#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperStreamingRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PaperPartitionRuntime_structs.hpp"
#include "PaperStreamingRuntime_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function PaperStreamingRuntime.PaperPSOPrecachingApplyRenderTargetSettings.Get
// 0x0020 (0x0020 - 0x0000)
struct PaperPSOPrecachingApplyRenderTargetSettings_Get final
{
public:
	bool                                          bForceReload;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConfigPath;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperPSOPrecachingApplyRenderTargetSettings* ReturnValue;                                 // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperPSOPrecachingApplyRenderTargetSettings_Get) == 0x000008, "Wrong alignment on PaperPSOPrecachingApplyRenderTargetSettings_Get");
static_assert(sizeof(PaperPSOPrecachingApplyRenderTargetSettings_Get) == 0x000020, "Wrong size on PaperPSOPrecachingApplyRenderTargetSettings_Get");
static_assert(offsetof(PaperPSOPrecachingApplyRenderTargetSettings_Get, bForceReload) == 0x000000, "Member 'PaperPSOPrecachingApplyRenderTargetSettings_Get::bForceReload' has a wrong offset!");
static_assert(offsetof(PaperPSOPrecachingApplyRenderTargetSettings_Get, ConfigPath) == 0x000008, "Member 'PaperPSOPrecachingApplyRenderTargetSettings_Get::ConfigPath' has a wrong offset!");
static_assert(offsetof(PaperPSOPrecachingApplyRenderTargetSettings_Get, ReturnValue) == 0x000018, "Member 'PaperPSOPrecachingApplyRenderTargetSettings_Get::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperPSOPrecachingApplyRenderTargetSettings.SetStartupQuality
// 0x0004 (0x0004 - 0x0000)
struct PaperPSOPrecachingApplyRenderTargetSettings_SetStartupQuality final
{
public:
	int32                                         InQuality;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperPSOPrecachingApplyRenderTargetSettings_SetStartupQuality) == 0x000004, "Wrong alignment on PaperPSOPrecachingApplyRenderTargetSettings_SetStartupQuality");
static_assert(sizeof(PaperPSOPrecachingApplyRenderTargetSettings_SetStartupQuality) == 0x000004, "Wrong size on PaperPSOPrecachingApplyRenderTargetSettings_SetStartupQuality");
static_assert(offsetof(PaperPSOPrecachingApplyRenderTargetSettings_SetStartupQuality, InQuality) == 0x000000, "Member 'PaperPSOPrecachingApplyRenderTargetSettings_SetStartupQuality::InQuality' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetActorLayers
// 0x0018 (0x0018 - 0x0000)
struct PaperStreamingSubsystem_GetActorLayers final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetActorLayers) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetActorLayers");
static_assert(sizeof(PaperStreamingSubsystem_GetActorLayers) == 0x000018, "Wrong size on PaperStreamingSubsystem_GetActorLayers");
static_assert(offsetof(PaperStreamingSubsystem_GetActorLayers, InActor) == 0x000000, "Member 'PaperStreamingSubsystem_GetActorLayers::InActor' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetActorLayers, ReturnValue) == 0x000008, "Member 'PaperStreamingSubsystem_GetActorLayers::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetBigWorldPath
// 0x0010 (0x0010 - 0x0000)
struct PaperStreamingSubsystem_GetBigWorldPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetBigWorldPath) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetBigWorldPath");
static_assert(sizeof(PaperStreamingSubsystem_GetBigWorldPath) == 0x000010, "Wrong size on PaperStreamingSubsystem_GetBigWorldPath");
static_assert(offsetof(PaperStreamingSubsystem_GetBigWorldPath, ReturnValue) == 0x000000, "Member 'PaperStreamingSubsystem_GetBigWorldPath::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetEffectivePreviewPlatformName
// 0x0010 (0x0010 - 0x0000)
struct PaperStreamingSubsystem_GetEffectivePreviewPlatformName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetEffectivePreviewPlatformName) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetEffectivePreviewPlatformName");
static_assert(sizeof(PaperStreamingSubsystem_GetEffectivePreviewPlatformName) == 0x000010, "Wrong size on PaperStreamingSubsystem_GetEffectivePreviewPlatformName");
static_assert(offsetof(PaperStreamingSubsystem_GetEffectivePreviewPlatformName, ReturnValue) == 0x000000, "Member 'PaperStreamingSubsystem_GetEffectivePreviewPlatformName::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.Instance
// 0x0008 (0x0008 - 0x0000)
struct PaperStreamingSubsystem_Instance final
{
public:
	class UPaperStreamingSubsystem*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_Instance) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_Instance");
static_assert(sizeof(PaperStreamingSubsystem_Instance) == 0x000008, "Wrong size on PaperStreamingSubsystem_Instance");
static_assert(offsetof(PaperStreamingSubsystem_Instance, ReturnValue) == 0x000000, "Member 'PaperStreamingSubsystem_Instance::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsBigWorldMap
// 0x0018 (0x0018 - 0x0000)
struct PaperStreamingSubsystem_IsBigWorldMap final
{
public:
	class FString                                 InPath;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_IsBigWorldMap) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_IsBigWorldMap");
static_assert(sizeof(PaperStreamingSubsystem_IsBigWorldMap) == 0x000018, "Wrong size on PaperStreamingSubsystem_IsBigWorldMap");
static_assert(offsetof(PaperStreamingSubsystem_IsBigWorldMap, InPath) == 0x000000, "Member 'PaperStreamingSubsystem_IsBigWorldMap::InPath' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_IsBigWorldMap, ReturnValue) == 0x000010, "Member 'PaperStreamingSubsystem_IsBigWorldMap::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsNeedLoadingInLocation
// 0x0020 (0x0020 - 0x0000)
struct PaperStreamingSubsystem_IsNeedLoadingInLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_IsNeedLoadingInLocation) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_IsNeedLoadingInLocation");
static_assert(sizeof(PaperStreamingSubsystem_IsNeedLoadingInLocation) == 0x000020, "Wrong size on PaperStreamingSubsystem_IsNeedLoadingInLocation");
static_assert(offsetof(PaperStreamingSubsystem_IsNeedLoadingInLocation, InLocation) == 0x000000, "Member 'PaperStreamingSubsystem_IsNeedLoadingInLocation::InLocation' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_IsNeedLoadingInLocation, ReturnValue) == 0x000018, "Member 'PaperStreamingSubsystem_IsNeedLoadingInLocation::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.AddOrUpdateExtraStreamingSource
// 0x0088 (0x0088 - 0x0000)
struct PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InSourceTag;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScale;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            InStreamerRange;                                   // 0x0038(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource");
static_assert(sizeof(PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource) == 0x000088, "Wrong size on PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource");
static_assert(offsetof(PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource, InWorldContextObject) == 0x000000, "Member 'PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource, InSourceTag) == 0x000008, "Member 'PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource::InSourceTag' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource, InLocation) == 0x000018, "Member 'PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource::InLocation' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource, InScale) == 0x000030, "Member 'PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource::InScale' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource, InStreamerRange) == 0x000038, "Member 'PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource::InStreamerRange' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.BindLayerChangedEvent
// 0x0020 (0x0020 - 0x0000)
struct PaperStreamingSubsystem_BindLayerChangedEvent final
{
public:
	class FString                                 InLayerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class AActor*>& Actors, bool IsAdd)> InOnLayerChanged;               // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_BindLayerChangedEvent) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_BindLayerChangedEvent");
static_assert(sizeof(PaperStreamingSubsystem_BindLayerChangedEvent) == 0x000020, "Wrong size on PaperStreamingSubsystem_BindLayerChangedEvent");
static_assert(offsetof(PaperStreamingSubsystem_BindLayerChangedEvent, InLayerName) == 0x000000, "Member 'PaperStreamingSubsystem_BindLayerChangedEvent::InLayerName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_BindLayerChangedEvent, InOnLayerChanged) == 0x000010, "Member 'PaperStreamingSubsystem_BindLayerChangedEvent::InOnLayerChanged' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.BindLayerVisibilityChangedEvent
// 0x0020 (0x0020 - 0x0000)
struct PaperStreamingSubsystem_BindLayerVisibilityChangedEvent final
{
public:
	class FString                                 InLayerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class AActor*>& Actors, bool IsVisible)> InOnLayerVisibilityChanged; // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_BindLayerVisibilityChangedEvent) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_BindLayerVisibilityChangedEvent");
static_assert(sizeof(PaperStreamingSubsystem_BindLayerVisibilityChangedEvent) == 0x000020, "Wrong size on PaperStreamingSubsystem_BindLayerVisibilityChangedEvent");
static_assert(offsetof(PaperStreamingSubsystem_BindLayerVisibilityChangedEvent, InLayerName) == 0x000000, "Member 'PaperStreamingSubsystem_BindLayerVisibilityChangedEvent::InLayerName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_BindLayerVisibilityChangedEvent, InOnLayerVisibilityChanged) == 0x000010, "Member 'PaperStreamingSubsystem_BindLayerVisibilityChangedEvent::InOnLayerVisibilityChanged' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.EnableGrassUpdate
// 0x0001 (0x0001 - 0x0000)
struct PaperStreamingSubsystem_EnableGrassUpdate final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_EnableGrassUpdate) == 0x000001, "Wrong alignment on PaperStreamingSubsystem_EnableGrassUpdate");
static_assert(sizeof(PaperStreamingSubsystem_EnableGrassUpdate) == 0x000001, "Wrong size on PaperStreamingSubsystem_EnableGrassUpdate");
static_assert(offsetof(PaperStreamingSubsystem_EnableGrassUpdate, bEnable) == 0x000000, "Member 'PaperStreamingSubsystem_EnableGrassUpdate::bEnable' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.EnableVirtualTextureUpdate
// 0x0001 (0x0001 - 0x0000)
struct PaperStreamingSubsystem_EnableVirtualTextureUpdate final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_EnableVirtualTextureUpdate) == 0x000001, "Wrong alignment on PaperStreamingSubsystem_EnableVirtualTextureUpdate");
static_assert(sizeof(PaperStreamingSubsystem_EnableVirtualTextureUpdate) == 0x000001, "Wrong size on PaperStreamingSubsystem_EnableVirtualTextureUpdate");
static_assert(offsetof(PaperStreamingSubsystem_EnableVirtualTextureUpdate, bEnable) == 0x000000, "Member 'PaperStreamingSubsystem_EnableVirtualTextureUpdate::bEnable' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GatherExternalLevels
// 0x0008 (0x0008 - 0x0000)
struct PaperStreamingSubsystem_GatherExternalLevels final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GatherExternalLevels) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GatherExternalLevels");
static_assert(sizeof(PaperStreamingSubsystem_GatherExternalLevels) == 0x000008, "Wrong size on PaperStreamingSubsystem_GatherExternalLevels");
static_assert(offsetof(PaperStreamingSubsystem_GatherExternalLevels, InWorldContextObject) == 0x000000, "Member 'PaperStreamingSubsystem_GatherExternalLevels::InWorldContextObject' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetActorsByLayer
// 0x0020 (0x0020 - 0x0000)
struct PaperStreamingSubsystem_GetActorsByLayer final
{
public:
	class FString                                 LayerName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetActorsByLayer) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetActorsByLayer");
static_assert(sizeof(PaperStreamingSubsystem_GetActorsByLayer) == 0x000020, "Wrong size on PaperStreamingSubsystem_GetActorsByLayer");
static_assert(offsetof(PaperStreamingSubsystem_GetActorsByLayer, LayerName) == 0x000000, "Member 'PaperStreamingSubsystem_GetActorsByLayer::LayerName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetActorsByLayer, ReturnValue) == 0x000010, "Member 'PaperStreamingSubsystem_GetActorsByLayer::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetAllSocketNames
// 0x0018 (0x0018 - 0x0000)
struct PaperStreamingSubsystem_GetAllSocketNames final
{
public:
	class USceneComponent*                        InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetAllSocketNames) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetAllSocketNames");
static_assert(sizeof(PaperStreamingSubsystem_GetAllSocketNames) == 0x000018, "Wrong size on PaperStreamingSubsystem_GetAllSocketNames");
static_assert(offsetof(PaperStreamingSubsystem_GetAllSocketNames, InComponent) == 0x000000, "Member 'PaperStreamingSubsystem_GetAllSocketNames::InComponent' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetAllSocketNames, ReturnValue) == 0x000008, "Member 'PaperStreamingSubsystem_GetAllSocketNames::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCellCollisionActiveCells
// 0x0010 (0x0010 - 0x0000)
struct PaperStreamingSubsystem_GetCellCollisionActiveCells final
{
public:
	TArray<struct FIntPoint>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetCellCollisionActiveCells) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetCellCollisionActiveCells");
static_assert(sizeof(PaperStreamingSubsystem_GetCellCollisionActiveCells) == 0x000010, "Wrong size on PaperStreamingSubsystem_GetCellCollisionActiveCells");
static_assert(offsetof(PaperStreamingSubsystem_GetCellCollisionActiveCells, ReturnValue) == 0x000000, "Member 'PaperStreamingSubsystem_GetCellCollisionActiveCells::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCellCollisionStateInfo
// 0x0050 (0x0050 - 0x0000)
struct PaperStreamingSubsystem_GetCellCollisionStateInfo final
{
public:
	TMap<struct FIntPoint, bool>                  ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetCellCollisionStateInfo) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetCellCollisionStateInfo");
static_assert(sizeof(PaperStreamingSubsystem_GetCellCollisionStateInfo) == 0x000050, "Wrong size on PaperStreamingSubsystem_GetCellCollisionStateInfo");
static_assert(offsetof(PaperStreamingSubsystem_GetCellCollisionStateInfo, ReturnValue) == 0x000000, "Member 'PaperStreamingSubsystem_GetCellCollisionStateInfo::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCellCollisionStateLevelInfo
// 0x0018 (0x0018 - 0x0000)
struct PaperStreamingSubsystem_GetCellCollisionStateLevelInfo final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetCellCollisionStateLevelInfo) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetCellCollisionStateLevelInfo");
static_assert(sizeof(PaperStreamingSubsystem_GetCellCollisionStateLevelInfo) == 0x000018, "Wrong size on PaperStreamingSubsystem_GetCellCollisionStateLevelInfo");
static_assert(offsetof(PaperStreamingSubsystem_GetCellCollisionStateLevelInfo, X) == 0x000000, "Member 'PaperStreamingSubsystem_GetCellCollisionStateLevelInfo::X' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetCellCollisionStateLevelInfo, Y) == 0x000004, "Member 'PaperStreamingSubsystem_GetCellCollisionStateLevelInfo::Y' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetCellCollisionStateLevelInfo, ReturnValue) == 0x000008, "Member 'PaperStreamingSubsystem_GetCellCollisionStateLevelInfo::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCellInfo
// 0x0018 (0x0018 - 0x0000)
struct PaperStreamingSubsystem_GetCellInfo final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetCellInfo) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetCellInfo");
static_assert(sizeof(PaperStreamingSubsystem_GetCellInfo) == 0x000018, "Wrong size on PaperStreamingSubsystem_GetCellInfo");
static_assert(offsetof(PaperStreamingSubsystem_GetCellInfo, X) == 0x000000, "Member 'PaperStreamingSubsystem_GetCellInfo::X' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetCellInfo, Y) == 0x000004, "Member 'PaperStreamingSubsystem_GetCellInfo::Y' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetCellInfo, ReturnValue) == 0x000008, "Member 'PaperStreamingSubsystem_GetCellInfo::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCollisionStreamingInfo
// 0x0078 (0x0078 - 0x0000)
struct PaperStreamingSubsystem_GetCollisionStreamingInfo final
{
public:
	float                                         InRange;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InFilterName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FVector2D, int32>                 CollisionInfos;                                    // 0x0018(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetCollisionStreamingInfo) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetCollisionStreamingInfo");
static_assert(sizeof(PaperStreamingSubsystem_GetCollisionStreamingInfo) == 0x000078, "Wrong size on PaperStreamingSubsystem_GetCollisionStreamingInfo");
static_assert(offsetof(PaperStreamingSubsystem_GetCollisionStreamingInfo, InRange) == 0x000000, "Member 'PaperStreamingSubsystem_GetCollisionStreamingInfo::InRange' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetCollisionStreamingInfo, InFilterName) == 0x000008, "Member 'PaperStreamingSubsystem_GetCollisionStreamingInfo::InFilterName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetCollisionStreamingInfo, CollisionInfos) == 0x000018, "Member 'PaperStreamingSubsystem_GetCollisionStreamingInfo::CollisionInfos' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetCollisionStreamingInfo, ReturnValue) == 0x000068, "Member 'PaperStreamingSubsystem_GetCollisionStreamingInfo::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCollisionStreamingRange
// 0x0004 (0x0004 - 0x0000)
struct PaperStreamingSubsystem_GetCollisionStreamingRange final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetCollisionStreamingRange) == 0x000004, "Wrong alignment on PaperStreamingSubsystem_GetCollisionStreamingRange");
static_assert(sizeof(PaperStreamingSubsystem_GetCollisionStreamingRange) == 0x000004, "Wrong size on PaperStreamingSubsystem_GetCollisionStreamingRange");
static_assert(offsetof(PaperStreamingSubsystem_GetCollisionStreamingRange, ReturnValue) == 0x000000, "Member 'PaperStreamingSubsystem_GetCollisionStreamingRange::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCurrentWorldTag
// 0x0010 (0x0010 - 0x0000)
struct PaperStreamingSubsystem_GetCurrentWorldTag final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetCurrentWorldTag) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetCurrentWorldTag");
static_assert(sizeof(PaperStreamingSubsystem_GetCurrentWorldTag) == 0x000010, "Wrong size on PaperStreamingSubsystem_GetCurrentWorldTag");
static_assert(offsetof(PaperStreamingSubsystem_GetCurrentWorldTag, ReturnValue) == 0x000000, "Member 'PaperStreamingSubsystem_GetCurrentWorldTag::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetLevelStreaming
// 0x0020 (0x0020 - 0x0000)
struct PaperStreamingSubsystem_GetLevelStreaming final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreaming*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetLevelStreaming) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetLevelStreaming");
static_assert(sizeof(PaperStreamingSubsystem_GetLevelStreaming) == 0x000020, "Wrong size on PaperStreamingSubsystem_GetLevelStreaming");
static_assert(offsetof(PaperStreamingSubsystem_GetLevelStreaming, InWorldContextObject) == 0x000000, "Member 'PaperStreamingSubsystem_GetLevelStreaming::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetLevelStreaming, Path) == 0x000008, "Member 'PaperStreamingSubsystem_GetLevelStreaming::Path' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetLevelStreaming, ReturnValue) == 0x000018, "Member 'PaperStreamingSubsystem_GetLevelStreaming::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetPaperPartitionCellSize
// 0x0004 (0x0004 - 0x0000)
struct PaperStreamingSubsystem_GetPaperPartitionCellSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetPaperPartitionCellSize) == 0x000004, "Wrong alignment on PaperStreamingSubsystem_GetPaperPartitionCellSize");
static_assert(sizeof(PaperStreamingSubsystem_GetPaperPartitionCellSize) == 0x000004, "Wrong size on PaperStreamingSubsystem_GetPaperPartitionCellSize");
static_assert(offsetof(PaperStreamingSubsystem_GetPaperPartitionCellSize, ReturnValue) == 0x000000, "Member 'PaperStreamingSubsystem_GetPaperPartitionCellSize::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetPaperPartitionCollisionRange
// 0x0004 (0x0004 - 0x0000)
struct PaperStreamingSubsystem_GetPaperPartitionCollisionRange final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetPaperPartitionCollisionRange) == 0x000004, "Wrong alignment on PaperStreamingSubsystem_GetPaperPartitionCollisionRange");
static_assert(sizeof(PaperStreamingSubsystem_GetPaperPartitionCollisionRange) == 0x000004, "Wrong size on PaperStreamingSubsystem_GetPaperPartitionCollisionRange");
static_assert(offsetof(PaperStreamingSubsystem_GetPaperPartitionCollisionRange, ReturnValue) == 0x000000, "Member 'PaperStreamingSubsystem_GetPaperPartitionCollisionRange::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetSocketLocation
// 0x0028 (0x0028 - 0x0000)
struct PaperStreamingSubsystem_GetSocketLocation final
{
public:
	class USceneComponent*                        InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetSocketLocation) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetSocketLocation");
static_assert(sizeof(PaperStreamingSubsystem_GetSocketLocation) == 0x000028, "Wrong size on PaperStreamingSubsystem_GetSocketLocation");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketLocation, InComponent) == 0x000000, "Member 'PaperStreamingSubsystem_GetSocketLocation::InComponent' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketLocation, InSocketName) == 0x000008, "Member 'PaperStreamingSubsystem_GetSocketLocation::InSocketName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketLocation, ReturnValue) == 0x000010, "Member 'PaperStreamingSubsystem_GetSocketLocation::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetSocketQuaternion
// 0x0030 (0x0030 - 0x0000)
struct PaperStreamingSubsystem_GetSocketQuaternion final
{
public:
	class USceneComponent*                        InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetSocketQuaternion) == 0x000010, "Wrong alignment on PaperStreamingSubsystem_GetSocketQuaternion");
static_assert(sizeof(PaperStreamingSubsystem_GetSocketQuaternion) == 0x000030, "Wrong size on PaperStreamingSubsystem_GetSocketQuaternion");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketQuaternion, InComponent) == 0x000000, "Member 'PaperStreamingSubsystem_GetSocketQuaternion::InComponent' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketQuaternion, InSocketName) == 0x000008, "Member 'PaperStreamingSubsystem_GetSocketQuaternion::InSocketName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketQuaternion, ReturnValue) == 0x000010, "Member 'PaperStreamingSubsystem_GetSocketQuaternion::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetSocketRotation
// 0x0028 (0x0028 - 0x0000)
struct PaperStreamingSubsystem_GetSocketRotation final
{
public:
	class USceneComponent*                        InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetSocketRotation) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetSocketRotation");
static_assert(sizeof(PaperStreamingSubsystem_GetSocketRotation) == 0x000028, "Wrong size on PaperStreamingSubsystem_GetSocketRotation");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketRotation, InComponent) == 0x000000, "Member 'PaperStreamingSubsystem_GetSocketRotation::InComponent' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketRotation, InSocketName) == 0x000008, "Member 'PaperStreamingSubsystem_GetSocketRotation::InSocketName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketRotation, ReturnValue) == 0x000010, "Member 'PaperStreamingSubsystem_GetSocketRotation::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetSocketTransform
// 0x0080 (0x0080 - 0x0000)
struct PaperStreamingSubsystem_GetSocketTransform final
{
public:
	class USceneComponent*                        InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelativeTransformSpace                       TransformSpace;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_GetSocketTransform) == 0x000010, "Wrong alignment on PaperStreamingSubsystem_GetSocketTransform");
static_assert(sizeof(PaperStreamingSubsystem_GetSocketTransform) == 0x000080, "Wrong size on PaperStreamingSubsystem_GetSocketTransform");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketTransform, InComponent) == 0x000000, "Member 'PaperStreamingSubsystem_GetSocketTransform::InComponent' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketTransform, InSocketName) == 0x000008, "Member 'PaperStreamingSubsystem_GetSocketTransform::InSocketName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketTransform, TransformSpace) == 0x000010, "Member 'PaperStreamingSubsystem_GetSocketTransform::TransformSpace' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSocketTransform, ReturnValue) == 0x000020, "Member 'PaperStreamingSubsystem_GetSocketTransform::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetSubLevelsByPath
// 0x0038 (0x0038 - 0x0000)
struct PaperStreamingSubsystem_GetSubLevelsByPath final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelPath;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysLoadedOnly;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipBigWorldNecessary;                            // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OutSubLevels;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_GetSubLevelsByPath) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_GetSubLevelsByPath");
static_assert(sizeof(PaperStreamingSubsystem_GetSubLevelsByPath) == 0x000038, "Wrong size on PaperStreamingSubsystem_GetSubLevelsByPath");
static_assert(offsetof(PaperStreamingSubsystem_GetSubLevelsByPath, InWorldContextObject) == 0x000000, "Member 'PaperStreamingSubsystem_GetSubLevelsByPath::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSubLevelsByPath, LevelPath) == 0x000008, "Member 'PaperStreamingSubsystem_GetSubLevelsByPath::LevelPath' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSubLevelsByPath, bAlwaysLoadedOnly) == 0x000018, "Member 'PaperStreamingSubsystem_GetSubLevelsByPath::bAlwaysLoadedOnly' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSubLevelsByPath, bSkipBigWorldNecessary) == 0x000019, "Member 'PaperStreamingSubsystem_GetSubLevelsByPath::bSkipBigWorldNecessary' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSubLevelsByPath, OutSubLevels) == 0x000020, "Member 'PaperStreamingSubsystem_GetSubLevelsByPath::OutSubLevels' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_GetSubLevelsByPath, ReturnValue) == 0x000030, "Member 'PaperStreamingSubsystem_GetSubLevelsByPath::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.HandleDetailModeComponentsPhys
// 0x0008 (0x0008 - 0x0000)
struct PaperStreamingSubsystem_HandleDetailModeComponentsPhys final
{
public:
	class ULevel*                                 InLevel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_HandleDetailModeComponentsPhys) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_HandleDetailModeComponentsPhys");
static_assert(sizeof(PaperStreamingSubsystem_HandleDetailModeComponentsPhys) == 0x000008, "Wrong size on PaperStreamingSubsystem_HandleDetailModeComponentsPhys");
static_assert(offsetof(PaperStreamingSubsystem_HandleDetailModeComponentsPhys, InLevel) == 0x000000, "Member 'PaperStreamingSubsystem_HandleDetailModeComponentsPhys::InLevel' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsActorInLayer
// 0x0020 (0x0020 - 0x0000)
struct PaperStreamingSubsystem_IsActorInLayer final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InLayerName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_IsActorInLayer) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_IsActorInLayer");
static_assert(sizeof(PaperStreamingSubsystem_IsActorInLayer) == 0x000020, "Wrong size on PaperStreamingSubsystem_IsActorInLayer");
static_assert(offsetof(PaperStreamingSubsystem_IsActorInLayer, InActor) == 0x000000, "Member 'PaperStreamingSubsystem_IsActorInLayer::InActor' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_IsActorInLayer, InLayerName) == 0x000008, "Member 'PaperStreamingSubsystem_IsActorInLayer::InLayerName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_IsActorInLayer, ReturnValue) == 0x000018, "Member 'PaperStreamingSubsystem_IsActorInLayer::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsEnableCellCollisionTest
// 0x0001 (0x0001 - 0x0000)
struct PaperStreamingSubsystem_IsEnableCellCollisionTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_IsEnableCellCollisionTest) == 0x000001, "Wrong alignment on PaperStreamingSubsystem_IsEnableCellCollisionTest");
static_assert(sizeof(PaperStreamingSubsystem_IsEnableCellCollisionTest) == 0x000001, "Wrong size on PaperStreamingSubsystem_IsEnableCellCollisionTest");
static_assert(offsetof(PaperStreamingSubsystem_IsEnableCellCollisionTest, ReturnValue) == 0x000000, "Member 'PaperStreamingSubsystem_IsEnableCellCollisionTest::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsEnableExternalLevels
// 0x0001 (0x0001 - 0x0000)
struct PaperStreamingSubsystem_IsEnableExternalLevels final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_IsEnableExternalLevels) == 0x000001, "Wrong alignment on PaperStreamingSubsystem_IsEnableExternalLevels");
static_assert(sizeof(PaperStreamingSubsystem_IsEnableExternalLevels) == 0x000001, "Wrong size on PaperStreamingSubsystem_IsEnableExternalLevels");
static_assert(offsetof(PaperStreamingSubsystem_IsEnableExternalLevels, ReturnValue) == 0x000000, "Member 'PaperStreamingSubsystem_IsEnableExternalLevels::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsLayerVisible
// 0x0018 (0x0018 - 0x0000)
struct PaperStreamingSubsystem_IsLayerVisible final
{
public:
	class FString                                 InLayerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_IsLayerVisible) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_IsLayerVisible");
static_assert(sizeof(PaperStreamingSubsystem_IsLayerVisible) == 0x000018, "Wrong size on PaperStreamingSubsystem_IsLayerVisible");
static_assert(offsetof(PaperStreamingSubsystem_IsLayerVisible, InLayerName) == 0x000000, "Member 'PaperStreamingSubsystem_IsLayerVisible::InLayerName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_IsLayerVisible, ReturnValue) == 0x000010, "Member 'PaperStreamingSubsystem_IsLayerVisible::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsPaperPartitionCellComplete
// 0x0020 (0x0020 - 0x0000)
struct PaperStreamingSubsystem_IsPaperPartitionCellComplete final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadStateCheckType                           CheckType;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_IsPaperPartitionCellComplete) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_IsPaperPartitionCellComplete");
static_assert(sizeof(PaperStreamingSubsystem_IsPaperPartitionCellComplete) == 0x000020, "Wrong size on PaperStreamingSubsystem_IsPaperPartitionCellComplete");
static_assert(offsetof(PaperStreamingSubsystem_IsPaperPartitionCellComplete, Position) == 0x000000, "Member 'PaperStreamingSubsystem_IsPaperPartitionCellComplete::Position' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_IsPaperPartitionCellComplete, Range) == 0x000018, "Member 'PaperStreamingSubsystem_IsPaperPartitionCellComplete::Range' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_IsPaperPartitionCellComplete, CheckType) == 0x00001C, "Member 'PaperStreamingSubsystem_IsPaperPartitionCellComplete::CheckType' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_IsPaperPartitionCellComplete, ReturnValue) == 0x00001D, "Member 'PaperStreamingSubsystem_IsPaperPartitionCellComplete::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadAssetAsync
// 0x0028 (0x0028 - 0x0000)
struct PaperStreamingSubsystem_LoadAssetAsync final
{
public:
	TArray<struct FSoftObjectPath>                AssetsPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class UObject*>& Loaded)> Callback;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLoadBPClass;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_LoadAssetAsync) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_LoadAssetAsync");
static_assert(sizeof(PaperStreamingSubsystem_LoadAssetAsync) == 0x000028, "Wrong size on PaperStreamingSubsystem_LoadAssetAsync");
static_assert(offsetof(PaperStreamingSubsystem_LoadAssetAsync, AssetsPath) == 0x000000, "Member 'PaperStreamingSubsystem_LoadAssetAsync::AssetsPath' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadAssetAsync, Callback) == 0x000010, "Member 'PaperStreamingSubsystem_LoadAssetAsync::Callback' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadAssetAsync, ForceLoadBPClass) == 0x000020, "Member 'PaperStreamingSubsystem_LoadAssetAsync::ForceLoadBPClass' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadAssetAsync, ReturnValue) == 0x000021, "Member 'PaperStreamingSubsystem_LoadAssetAsync::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadMap
// 0x0030 (0x0030 - 0x0000)
struct PaperStreamingSubsystem_LoadMap final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_LoadMap) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_LoadMap");
static_assert(sizeof(PaperStreamingSubsystem_LoadMap) == 0x000030, "Wrong size on PaperStreamingSubsystem_LoadMap");
static_assert(offsetof(PaperStreamingSubsystem_LoadMap, Path) == 0x000000, "Member 'PaperStreamingSubsystem_LoadMap::Path' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadMap, InLocation) == 0x000010, "Member 'PaperStreamingSubsystem_LoadMap::InLocation' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadMap, ReturnValue) == 0x000028, "Member 'PaperStreamingSubsystem_LoadMap::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadMapInVisible
// 0x0060 (0x0060 - 0x0000)
struct PaperStreamingSubsystem_LoadMapInVisible final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InVisibleLevels;                                   // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WorldTag;                                          // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_LoadMapInVisible) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_LoadMapInVisible");
static_assert(sizeof(PaperStreamingSubsystem_LoadMapInVisible) == 0x000060, "Wrong size on PaperStreamingSubsystem_LoadMapInVisible");
static_assert(offsetof(PaperStreamingSubsystem_LoadMapInVisible, Path) == 0x000000, "Member 'PaperStreamingSubsystem_LoadMapInVisible::Path' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadMapInVisible, InLocation) == 0x000010, "Member 'PaperStreamingSubsystem_LoadMapInVisible::InLocation' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadMapInVisible, InVisibleLevels) == 0x000028, "Member 'PaperStreamingSubsystem_LoadMapInVisible::InVisibleLevels' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadMapInVisible, Options) == 0x000038, "Member 'PaperStreamingSubsystem_LoadMapInVisible::Options' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadMapInVisible, WorldTag) == 0x000048, "Member 'PaperStreamingSubsystem_LoadMapInVisible::WorldTag' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadMapInVisible, ReturnValue) == 0x000058, "Member 'PaperStreamingSubsystem_LoadMapInVisible::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadMapsInVisible
// 0x0028 (0x0028 - 0x0000)
struct PaperStreamingSubsystem_LoadMapsInVisible final
{
public:
	TArray<struct FLoadMapParams>                 InLoadMapParams;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Options;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_LoadMapsInVisible) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_LoadMapsInVisible");
static_assert(sizeof(PaperStreamingSubsystem_LoadMapsInVisible) == 0x000028, "Wrong size on PaperStreamingSubsystem_LoadMapsInVisible");
static_assert(offsetof(PaperStreamingSubsystem_LoadMapsInVisible, InLoadMapParams) == 0x000000, "Member 'PaperStreamingSubsystem_LoadMapsInVisible::InLoadMapParams' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadMapsInVisible, Options) == 0x000010, "Member 'PaperStreamingSubsystem_LoadMapsInVisible::Options' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadMapsInVisible, ReturnValue) == 0x000020, "Member 'PaperStreamingSubsystem_LoadMapsInVisible::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadSubLevels
// 0x0038 (0x0038 - 0x0000)
struct PaperStreamingSubsystem_LoadSubLevels final
{
public:
	TArray<class FString>                         SubLevelPaths;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Locations;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class FString>& LevelPaths)> Callback;                               // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_LoadSubLevels) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_LoadSubLevels");
static_assert(sizeof(PaperStreamingSubsystem_LoadSubLevels) == 0x000038, "Wrong size on PaperStreamingSubsystem_LoadSubLevels");
static_assert(offsetof(PaperStreamingSubsystem_LoadSubLevels, SubLevelPaths) == 0x000000, "Member 'PaperStreamingSubsystem_LoadSubLevels::SubLevelPaths' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadSubLevels, Locations) == 0x000010, "Member 'PaperStreamingSubsystem_LoadSubLevels::Locations' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadSubLevels, Callback) == 0x000020, "Member 'PaperStreamingSubsystem_LoadSubLevels::Callback' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadSubLevels, ReturnValue) == 0x000030, "Member 'PaperStreamingSubsystem_LoadSubLevels::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadSubLevelToWorld
// 0x0030 (0x0030 - 0x0000)
struct PaperStreamingSubsystem_LoadSubLevelToWorld final
{
public:
	class FString                                 SubLevelPath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LoadLocation;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_LoadSubLevelToWorld) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_LoadSubLevelToWorld");
static_assert(sizeof(PaperStreamingSubsystem_LoadSubLevelToWorld) == 0x000030, "Wrong size on PaperStreamingSubsystem_LoadSubLevelToWorld");
static_assert(offsetof(PaperStreamingSubsystem_LoadSubLevelToWorld, SubLevelPath) == 0x000000, "Member 'PaperStreamingSubsystem_LoadSubLevelToWorld::SubLevelPath' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadSubLevelToWorld, LoadLocation) == 0x000010, "Member 'PaperStreamingSubsystem_LoadSubLevelToWorld::LoadLocation' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_LoadSubLevelToWorld, ReturnValue) == 0x000028, "Member 'PaperStreamingSubsystem_LoadSubLevelToWorld::ReturnValue' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.RemoveExternalDistance
// 0x0018 (0x0018 - 0x0000)
struct PaperStreamingSubsystem_RemoveExternalDistance final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Distance;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_RemoveExternalDistance) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_RemoveExternalDistance");
static_assert(sizeof(PaperStreamingSubsystem_RemoveExternalDistance) == 0x000018, "Wrong size on PaperStreamingSubsystem_RemoveExternalDistance");
static_assert(offsetof(PaperStreamingSubsystem_RemoveExternalDistance, Path) == 0x000000, "Member 'PaperStreamingSubsystem_RemoveExternalDistance::Path' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_RemoveExternalDistance, Distance) == 0x000010, "Member 'PaperStreamingSubsystem_RemoveExternalDistance::Distance' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.RemoveExtraStreamingSource
// 0x0018 (0x0018 - 0x0000)
struct PaperStreamingSubsystem_RemoveExtraStreamingSource final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InSourceTag;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_RemoveExtraStreamingSource) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_RemoveExtraStreamingSource");
static_assert(sizeof(PaperStreamingSubsystem_RemoveExtraStreamingSource) == 0x000018, "Wrong size on PaperStreamingSubsystem_RemoveExtraStreamingSource");
static_assert(offsetof(PaperStreamingSubsystem_RemoveExtraStreamingSource, InWorldContextObject) == 0x000000, "Member 'PaperStreamingSubsystem_RemoveExtraStreamingSource::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_RemoveExtraStreamingSource, InSourceTag) == 0x000008, "Member 'PaperStreamingSubsystem_RemoveExtraStreamingSource::InSourceTag' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetExternalDistance
// 0x0018 (0x0018 - 0x0000)
struct PaperStreamingSubsystem_SetExternalDistance final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Distance;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_SetExternalDistance) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_SetExternalDistance");
static_assert(sizeof(PaperStreamingSubsystem_SetExternalDistance) == 0x000018, "Wrong size on PaperStreamingSubsystem_SetExternalDistance");
static_assert(offsetof(PaperStreamingSubsystem_SetExternalDistance, Path) == 0x000000, "Member 'PaperStreamingSubsystem_SetExternalDistance::Path' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_SetExternalDistance, Distance) == 0x000010, "Member 'PaperStreamingSubsystem_SetExternalDistance::Distance' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetExtraConditionLevelInfo
// 0x0020 (0x0020 - 0x0000)
struct PaperStreamingSubsystem_SetExtraConditionLevelInfo final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InLevelKeyword;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCanLoad;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_SetExtraConditionLevelInfo) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_SetExtraConditionLevelInfo");
static_assert(sizeof(PaperStreamingSubsystem_SetExtraConditionLevelInfo) == 0x000020, "Wrong size on PaperStreamingSubsystem_SetExtraConditionLevelInfo");
static_assert(offsetof(PaperStreamingSubsystem_SetExtraConditionLevelInfo, InWorldContextObject) == 0x000000, "Member 'PaperStreamingSubsystem_SetExtraConditionLevelInfo::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_SetExtraConditionLevelInfo, InLevelKeyword) == 0x000008, "Member 'PaperStreamingSubsystem_SetExtraConditionLevelInfo::InLevelKeyword' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_SetExtraConditionLevelInfo, bInCanLoad) == 0x000018, "Member 'PaperStreamingSubsystem_SetExtraConditionLevelInfo::bInCanLoad' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetLayerVisibility
// 0x0018 (0x0018 - 0x0000)
struct PaperStreamingSubsystem_SetLayerVisibility final
{
public:
	class FString                                 InLayerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateImmediately;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_SetLayerVisibility) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_SetLayerVisibility");
static_assert(sizeof(PaperStreamingSubsystem_SetLayerVisibility) == 0x000018, "Wrong size on PaperStreamingSubsystem_SetLayerVisibility");
static_assert(offsetof(PaperStreamingSubsystem_SetLayerVisibility, InLayerName) == 0x000000, "Member 'PaperStreamingSubsystem_SetLayerVisibility::InLayerName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_SetLayerVisibility, bVisible) == 0x000010, "Member 'PaperStreamingSubsystem_SetLayerVisibility::bVisible' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_SetLayerVisibility, bUpdateImmediately) == 0x000011, "Member 'PaperStreamingSubsystem_SetLayerVisibility::bUpdateImmediately' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetOverrideLoadingRanges
// 0x0050 (0x0050 - 0x0000)
struct PaperStreamingSubsystem_SetOverrideLoadingRanges final
{
public:
	TMap<int32, int32>                            InOverrideLoadingRanges;                           // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_SetOverrideLoadingRanges) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_SetOverrideLoadingRanges");
static_assert(sizeof(PaperStreamingSubsystem_SetOverrideLoadingRanges) == 0x000050, "Wrong size on PaperStreamingSubsystem_SetOverrideLoadingRanges");
static_assert(offsetof(PaperStreamingSubsystem_SetOverrideLoadingRanges, InOverrideLoadingRanges) == 0x000000, "Member 'PaperStreamingSubsystem_SetOverrideLoadingRanges::InOverrideLoadingRanges' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetPaperPartitionBoost
// 0x0001 (0x0001 - 0x0000)
struct PaperStreamingSubsystem_SetPaperPartitionBoost final
{
public:
	bool                                          bIsBoost;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_SetPaperPartitionBoost) == 0x000001, "Wrong alignment on PaperStreamingSubsystem_SetPaperPartitionBoost");
static_assert(sizeof(PaperStreamingSubsystem_SetPaperPartitionBoost) == 0x000001, "Wrong size on PaperStreamingSubsystem_SetPaperPartitionBoost");
static_assert(offsetof(PaperStreamingSubsystem_SetPaperPartitionBoost, bIsBoost) == 0x000000, "Member 'PaperStreamingSubsystem_SetPaperPartitionBoost::bIsBoost' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetPlayerStreamingSourceEnable
// 0x0010 (0x0010 - 0x0000)
struct PaperStreamingSubsystem_SetPlayerStreamingSourceEnable final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_SetPlayerStreamingSourceEnable) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_SetPlayerStreamingSourceEnable");
static_assert(sizeof(PaperStreamingSubsystem_SetPlayerStreamingSourceEnable) == 0x000010, "Wrong size on PaperStreamingSubsystem_SetPlayerStreamingSourceEnable");
static_assert(offsetof(PaperStreamingSubsystem_SetPlayerStreamingSourceEnable, InWorldContextObject) == 0x000000, "Member 'PaperStreamingSubsystem_SetPlayerStreamingSourceEnable::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_SetPlayerStreamingSourceEnable, bEnable) == 0x000008, "Member 'PaperStreamingSubsystem_SetPlayerStreamingSourceEnable::bEnable' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetStreamingEnable
// 0x0001 (0x0001 - 0x0000)
struct PaperStreamingSubsystem_SetStreamingEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_SetStreamingEnable) == 0x000001, "Wrong alignment on PaperStreamingSubsystem_SetStreamingEnable");
static_assert(sizeof(PaperStreamingSubsystem_SetStreamingEnable) == 0x000001, "Wrong size on PaperStreamingSubsystem_SetStreamingEnable");
static_assert(offsetof(PaperStreamingSubsystem_SetStreamingEnable, bEnable) == 0x000000, "Member 'PaperStreamingSubsystem_SetStreamingEnable::bEnable' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetUseFullWorldComposition
// 0x0001 (0x0001 - 0x0000)
struct PaperStreamingSubsystem_SetUseFullWorldComposition final
{
public:
	bool                                          bInUseFullWorldComposition;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_SetUseFullWorldComposition) == 0x000001, "Wrong alignment on PaperStreamingSubsystem_SetUseFullWorldComposition");
static_assert(sizeof(PaperStreamingSubsystem_SetUseFullWorldComposition) == 0x000001, "Wrong size on PaperStreamingSubsystem_SetUseFullWorldComposition");
static_assert(offsetof(PaperStreamingSubsystem_SetUseFullWorldComposition, bInUseFullWorldComposition) == 0x000000, "Member 'PaperStreamingSubsystem_SetUseFullWorldComposition::bInUseFullWorldComposition' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.UnbindLayerChangedEvent
// 0x0020 (0x0020 - 0x0000)
struct PaperStreamingSubsystem_UnbindLayerChangedEvent final
{
public:
	class FString                                 InLayerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class AActor*>& Actors, bool IsAdd)> InOnLayerChanged;               // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_UnbindLayerChangedEvent) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_UnbindLayerChangedEvent");
static_assert(sizeof(PaperStreamingSubsystem_UnbindLayerChangedEvent) == 0x000020, "Wrong size on PaperStreamingSubsystem_UnbindLayerChangedEvent");
static_assert(offsetof(PaperStreamingSubsystem_UnbindLayerChangedEvent, InLayerName) == 0x000000, "Member 'PaperStreamingSubsystem_UnbindLayerChangedEvent::InLayerName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_UnbindLayerChangedEvent, InOnLayerChanged) == 0x000010, "Member 'PaperStreamingSubsystem_UnbindLayerChangedEvent::InOnLayerChanged' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.UnbindLayerVisibilityChangedEvent
// 0x0020 (0x0020 - 0x0000)
struct PaperStreamingSubsystem_UnbindLayerVisibilityChangedEvent final
{
public:
	class FString                                 InLayerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class AActor*>& Actors, bool IsVisible)> InOnLayerVisibilityChanged; // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperStreamingSubsystem_UnbindLayerVisibilityChangedEvent) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_UnbindLayerVisibilityChangedEvent");
static_assert(sizeof(PaperStreamingSubsystem_UnbindLayerVisibilityChangedEvent) == 0x000020, "Wrong size on PaperStreamingSubsystem_UnbindLayerVisibilityChangedEvent");
static_assert(offsetof(PaperStreamingSubsystem_UnbindLayerVisibilityChangedEvent, InLayerName) == 0x000000, "Member 'PaperStreamingSubsystem_UnbindLayerVisibilityChangedEvent::InLayerName' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_UnbindLayerVisibilityChangedEvent, InOnLayerVisibilityChanged) == 0x000010, "Member 'PaperStreamingSubsystem_UnbindLayerVisibilityChangedEvent::InOnLayerVisibilityChanged' has a wrong offset!");

// Function PaperStreamingRuntime.PaperStreamingSubsystem.UnloadSubLevels
// 0x0018 (0x0018 - 0x0000)
struct PaperStreamingSubsystem_UnloadSubLevels final
{
public:
	TArray<class FString>                         SubLevelPaths;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperStreamingSubsystem_UnloadSubLevels) == 0x000008, "Wrong alignment on PaperStreamingSubsystem_UnloadSubLevels");
static_assert(sizeof(PaperStreamingSubsystem_UnloadSubLevels) == 0x000018, "Wrong size on PaperStreamingSubsystem_UnloadSubLevels");
static_assert(offsetof(PaperStreamingSubsystem_UnloadSubLevels, SubLevelPaths) == 0x000000, "Member 'PaperStreamingSubsystem_UnloadSubLevels::SubLevelPaths' has a wrong offset!");
static_assert(offsetof(PaperStreamingSubsystem_UnloadSubLevels, ReturnValue) == 0x000010, "Member 'PaperStreamingSubsystem_UnloadSubLevels::ReturnValue' has a wrong offset!");

}

