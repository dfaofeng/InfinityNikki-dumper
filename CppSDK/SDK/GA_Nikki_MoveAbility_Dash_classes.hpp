#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Nikki_MoveAbility_Dash

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GA_AbilityMontageBase_classes.hpp"
#include "X6Game_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Nikki_MoveAbility_Dash.GA_Nikki_MoveAbility_Dash_C
// 0x0088 (0x0620 - 0x0598)
class UGA_Nikki_MoveAbility_Dash_C final : public UGA_AbilityMontageBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Nikki_MoveAbility_Dash_C;        // 0x0598(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAnimMontage*                           PlayAM;                                            // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           StopAm;                                            // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Insitu_;                                           // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Release_;                                          // 0x05B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SprintOrJog;                                       // 0x05B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B3[0x5];                                      // 0x05B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxJumpSpeed;                                      // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Interrupted_;                                      // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GoStopState_;                                      // 0x05C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C2[0x6];                                      // 0x05C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerOfSpeed;                                      // 0x05C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CharacterMovementComp;                             // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Owner;                                             // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerRegularMovementCompV3_C*      RegularMovementComp;                               // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x05E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RotateSpeed;                                       // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                RMTask;                                            // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         RotateDeltaTime;                                   // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_614[0x4];                                      // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           StopAM_cbt;                                        // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BackwardSection();
	void ClampXYSpeed(double Max, class UMovementComponent* MovementComp);
	void EnableRun(bool* Enable_Run_Operation);
	void ExecuteUbergraph_GA_Nikki_MoveAbility_Dash(int32 EntryPoint);
	ERegularLocomotionType GetRunOrWalk();
	void GetSopAnim(class UAnimMontage** Montage);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	bool NoInput_(class UCharacterMovementComponent* MovementComp);
	void OnAccelChange_ED0C22024A69A9D7E2C857A38C23901A();
	void OnBlendOut_0CAA8CB14C6ED774886F5A8BA49592E0(class FName NotifyName);
	void OnBlendOut_D30DE7AB48AEA8E333DF909738541332(class FName NotifyName);
	void OnCancelled_0CAA8CB14C6ED774886F5A8BA49592E0(class FName NotifyName);
	void OnCancelled_D30DE7AB48AEA8E333DF909738541332(class FName NotifyName);
	void OnCompleted_0CAA8CB14C6ED774886F5A8BA49592E0(class FName NotifyName);
	void OnCompleted_D30DE7AB48AEA8E333DF909738541332(class FName NotifyName);
	void OnInputRecv(bool bPressOrRelease, const struct FGameplayTag& InputTag);
	void OnInterrupted_0CAA8CB14C6ED774886F5A8BA49592E0(class FName NotifyName);
	void OnInterrupted_D30DE7AB48AEA8E333DF909738541332(class FName NotifyName);
	void OnNotifyBegin_0CAA8CB14C6ED774886F5A8BA49592E0(class FName NotifyName);
	void OnNotifyBegin_D30DE7AB48AEA8E333DF909738541332(class FName NotifyName);
	void OnNotifyEnd_0CAA8CB14C6ED774886F5A8BA49592E0(class FName NotifyName);
	void OnNotifyEnd_D30DE7AB48AEA8E333DF909738541332(class FName NotifyName);
	void SpawnEffect();
	void StageChange(ERegularFloatingJumpStage NewStage, ERegularFloatingJumpStage OldStage);
	void SwitchJogOrSprint();
	void UpdateSpeed();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Nikki_MoveAbility_Dash_C">();
	}
	static class UGA_Nikki_MoveAbility_Dash_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Nikki_MoveAbility_Dash_C>();
	}
};
static_assert(alignof(UGA_Nikki_MoveAbility_Dash_C) == 0x000008, "Wrong alignment on UGA_Nikki_MoveAbility_Dash_C");
static_assert(sizeof(UGA_Nikki_MoveAbility_Dash_C) == 0x000620, "Wrong size on UGA_Nikki_MoveAbility_Dash_C");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, UberGraphFrame_GA_Nikki_MoveAbility_Dash_C) == 0x000598, "Member 'UGA_Nikki_MoveAbility_Dash_C::UberGraphFrame_GA_Nikki_MoveAbility_Dash_C' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, PlayAM) == 0x0005A0, "Member 'UGA_Nikki_MoveAbility_Dash_C::PlayAM' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, StopAm) == 0x0005A8, "Member 'UGA_Nikki_MoveAbility_Dash_C::StopAm' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, Insitu_) == 0x0005B0, "Member 'UGA_Nikki_MoveAbility_Dash_C::Insitu_' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, Release_) == 0x0005B1, "Member 'UGA_Nikki_MoveAbility_Dash_C::Release_' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, SprintOrJog) == 0x0005B2, "Member 'UGA_Nikki_MoveAbility_Dash_C::SprintOrJog' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, MaxJumpSpeed) == 0x0005B8, "Member 'UGA_Nikki_MoveAbility_Dash_C::MaxJumpSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, Interrupted_) == 0x0005C0, "Member 'UGA_Nikki_MoveAbility_Dash_C::Interrupted_' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, GoStopState_) == 0x0005C1, "Member 'UGA_Nikki_MoveAbility_Dash_C::GoStopState_' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, TimerOfSpeed) == 0x0005C8, "Member 'UGA_Nikki_MoveAbility_Dash_C::TimerOfSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, CharacterMovementComp) == 0x0005D0, "Member 'UGA_Nikki_MoveAbility_Dash_C::CharacterMovementComp' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, Owner) == 0x0005D8, "Member 'UGA_Nikki_MoveAbility_Dash_C::Owner' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, RegularMovementComp) == 0x0005E0, "Member 'UGA_Nikki_MoveAbility_Dash_C::RegularMovementComp' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, TargetRotation) == 0x0005E8, "Member 'UGA_Nikki_MoveAbility_Dash_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, RotateSpeed) == 0x000600, "Member 'UGA_Nikki_MoveAbility_Dash_C::RotateSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, RMTask) == 0x000608, "Member 'UGA_Nikki_MoveAbility_Dash_C::RMTask' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, RotateDeltaTime) == 0x000610, "Member 'UGA_Nikki_MoveAbility_Dash_C::RotateDeltaTime' has a wrong offset!");
static_assert(offsetof(UGA_Nikki_MoveAbility_Dash_C, StopAM_cbt) == 0x000618, "Member 'UGA_Nikki_MoveAbility_Dash_C::StopAM_cbt' has a wrong offset!");

}

