#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6CustomRootMotion

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct X6CustomRootMotion.AnimNode_RootMotionFromAnimCurve
// 0x0110 (0x0158 - 0x0048)
struct FAnimNode_RootMotionFromAnimCurve final : public FAnimNode_SequencePlayer
{
public:
	class FName                                   XAxisName;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   YAxisName;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ZAxisName;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PitchAxisName;                                     // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   YawAxisName;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RollAxisName;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AxisRotation;                                      // 0x0078(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AxisScale;                                         // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGravity;                                    // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisablePartialEndTick;                            // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSensitiveLiftoffCheck;                         // 0x00AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionAccumulateMode                     AccumulateMode;                                    // 0x00AB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 Mode;                                              // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocity;                                       // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocity;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName[0x6];                                     // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FFloatCurve>         AxisCurves;                                        // 0x0100(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RootMotionFromAnimCurve) == 0x000008, "Wrong alignment on FAnimNode_RootMotionFromAnimCurve");
static_assert(sizeof(FAnimNode_RootMotionFromAnimCurve) == 0x000158, "Wrong size on FAnimNode_RootMotionFromAnimCurve");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, XAxisName) == 0x000048, "Member 'FAnimNode_RootMotionFromAnimCurve::XAxisName' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, YAxisName) == 0x000050, "Member 'FAnimNode_RootMotionFromAnimCurve::YAxisName' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, ZAxisName) == 0x000058, "Member 'FAnimNode_RootMotionFromAnimCurve::ZAxisName' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, PitchAxisName) == 0x000060, "Member 'FAnimNode_RootMotionFromAnimCurve::PitchAxisName' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, YawAxisName) == 0x000068, "Member 'FAnimNode_RootMotionFromAnimCurve::YawAxisName' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, RollAxisName) == 0x000070, "Member 'FAnimNode_RootMotionFromAnimCurve::RollAxisName' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, AxisRotation) == 0x000078, "Member 'FAnimNode_RootMotionFromAnimCurve::AxisRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, AxisScale) == 0x000090, "Member 'FAnimNode_RootMotionFromAnimCurve::AxisScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, bEnableGravity) == 0x0000A8, "Member 'FAnimNode_RootMotionFromAnimCurve::bEnableGravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, bDisablePartialEndTick) == 0x0000A9, "Member 'FAnimNode_RootMotionFromAnimCurve::bDisablePartialEndTick' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, bUseSensitiveLiftoffCheck) == 0x0000AA, "Member 'FAnimNode_RootMotionFromAnimCurve::bUseSensitiveLiftoffCheck' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, AccumulateMode) == 0x0000AB, "Member 'FAnimNode_RootMotionFromAnimCurve::AccumulateMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, Mode) == 0x0000AC, "Member 'FAnimNode_RootMotionFromAnimCurve::Mode' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, SetVelocity) == 0x0000B0, "Member 'FAnimNode_RootMotionFromAnimCurve::SetVelocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, ClampVelocity) == 0x0000C8, "Member 'FAnimNode_RootMotionFromAnimCurve::ClampVelocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, AxisName) == 0x0000CC, "Member 'FAnimNode_RootMotionFromAnimCurve::AxisName' has a wrong offset!");
static_assert(offsetof(FAnimNode_RootMotionFromAnimCurve, AxisCurves) == 0x000100, "Member 'FAnimNode_RootMotionFromAnimCurve::AxisCurves' has a wrong offset!");

// ScriptStruct X6CustomRootMotion.MotionMatchingWindowData
// 0x0040 (0x0040 - 0x0000)
struct FMotionMatchingWindowData final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MatchScale;                                        // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSign;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      AnimationSequence;                                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTime;                                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMotionMatchingWindowData) == 0x000008, "Wrong alignment on FMotionMatchingWindowData");
static_assert(sizeof(FMotionMatchingWindowData) == 0x000040, "Wrong size on FMotionMatchingWindowData");
static_assert(offsetof(FMotionMatchingWindowData, BoneName) == 0x000000, "Member 'FMotionMatchingWindowData::BoneName' has a wrong offset!");
static_assert(offsetof(FMotionMatchingWindowData, MatchScale) == 0x000008, "Member 'FMotionMatchingWindowData::MatchScale' has a wrong offset!");
static_assert(offsetof(FMotionMatchingWindowData, bIgnoreSign) == 0x000020, "Member 'FMotionMatchingWindowData::bIgnoreSign' has a wrong offset!");
static_assert(offsetof(FMotionMatchingWindowData, AnimationSequence) == 0x000028, "Member 'FMotionMatchingWindowData::AnimationSequence' has a wrong offset!");
static_assert(offsetof(FMotionMatchingWindowData, StartTime) == 0x000030, "Member 'FMotionMatchingWindowData::StartTime' has a wrong offset!");
static_assert(offsetof(FMotionMatchingWindowData, EndTime) == 0x000034, "Member 'FMotionMatchingWindowData::EndTime' has a wrong offset!");
static_assert(offsetof(FMotionMatchingWindowData, CurrentTime) == 0x000038, "Member 'FMotionMatchingWindowData::CurrentTime' has a wrong offset!");

// ScriptStruct X6CustomRootMotion.RootMotionSource_MoveByCurve
// 0x0070 (0x0150 - 0x00E0)
struct FRootMotionSource_MoveByCurve : public FRootMotionSource
{
public:
	class UCurveVector*                           RootMotionLocationCurve;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           RootMotionRotationCurve;                           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AxisTransformOffset;                               // 0x00F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRootMotionSource_MoveByCurve) == 0x000010, "Wrong alignment on FRootMotionSource_MoveByCurve");
static_assert(sizeof(FRootMotionSource_MoveByCurve) == 0x000150, "Wrong size on FRootMotionSource_MoveByCurve");
static_assert(offsetof(FRootMotionSource_MoveByCurve, RootMotionLocationCurve) == 0x0000D8, "Member 'FRootMotionSource_MoveByCurve::RootMotionLocationCurve' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_MoveByCurve, RootMotionRotationCurve) == 0x0000E0, "Member 'FRootMotionSource_MoveByCurve::RootMotionRotationCurve' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_MoveByCurve, AxisTransformOffset) == 0x0000F0, "Member 'FRootMotionSource_MoveByCurve::AxisTransformOffset' has a wrong offset!");

// ScriptStruct X6CustomRootMotion.RootMotionSource_FixedDirectionMove
// 0x0020 (0x0100 - 0x00E0)
struct FRootMotionSource_FixedDirectionMove final : public FRootMotionSource
{
public:
	float                                         Speed;                                             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionSource_FixedDirectionMove) == 0x000010, "Wrong alignment on FRootMotionSource_FixedDirectionMove");
static_assert(sizeof(FRootMotionSource_FixedDirectionMove) == 0x000100, "Wrong size on FRootMotionSource_FixedDirectionMove");
static_assert(offsetof(FRootMotionSource_FixedDirectionMove, Speed) == 0x0000D8, "Member 'FRootMotionSource_FixedDirectionMove::Speed' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_FixedDirectionMove, Direction) == 0x0000E0, "Member 'FRootMotionSource_FixedDirectionMove::Direction' has a wrong offset!");

// ScriptStruct X6CustomRootMotion.RootMotionSource_MoveByAnimCurve
// 0x0040 (0x0190 - 0x0150)
struct FRootMotionSource_MoveByAnimCurve final : public FRootMotionSource_MoveByCurve
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0150(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisSmartName[0x6];                                // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionSource_MoveByAnimCurve) == 0x000010, "Wrong alignment on FRootMotionSource_MoveByAnimCurve");
static_assert(sizeof(FRootMotionSource_MoveByAnimCurve) == 0x000190, "Wrong size on FRootMotionSource_MoveByAnimCurve");
static_assert(offsetof(FRootMotionSource_MoveByAnimCurve, AnimSequence) == 0x000150, "Member 'FRootMotionSource_MoveByAnimCurve::AnimSequence' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_MoveByAnimCurve, AxisSmartName) == 0x000158, "Member 'FRootMotionSource_MoveByAnimCurve::AxisSmartName' has a wrong offset!");

// ScriptStruct X6CustomRootMotion.RootMotionSource_MoveByAccelOrForward
// 0x0010 (0x00F0 - 0x00E0)
struct FRootMotionSource_MoveByAccelOrForward final : public FRootMotionSource
{
public:
	float                                         InterpSpeed;                                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            StrengthOverTime;                                  // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRootMotionSource_MoveByAccelOrForward) == 0x000010, "Wrong alignment on FRootMotionSource_MoveByAccelOrForward");
static_assert(sizeof(FRootMotionSource_MoveByAccelOrForward) == 0x0000F0, "Wrong size on FRootMotionSource_MoveByAccelOrForward");
static_assert(offsetof(FRootMotionSource_MoveByAccelOrForward, InterpSpeed) == 0x0000D8, "Member 'FRootMotionSource_MoveByAccelOrForward::InterpSpeed' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_MoveByAccelOrForward, Strength) == 0x0000DC, "Member 'FRootMotionSource_MoveByAccelOrForward::Strength' has a wrong offset!");
static_assert(offsetof(FRootMotionSource_MoveByAccelOrForward, StrengthOverTime) == 0x0000E0, "Member 'FRootMotionSource_MoveByAccelOrForward::StrengthOverTime' has a wrong offset!");

// ScriptStruct X6CustomRootMotion.RootMotionSource_JumpForceExtend
// 0x0000 (0x0130 - 0x0130)
struct FRootMotionSource_JumpForceExtend final : public FRootMotionSource_JumpForce
{
};
static_assert(alignof(FRootMotionSource_JumpForceExtend) == 0x000010, "Wrong alignment on FRootMotionSource_JumpForceExtend");
static_assert(sizeof(FRootMotionSource_JumpForceExtend) == 0x000130, "Wrong size on FRootMotionSource_JumpForceExtend");

}

