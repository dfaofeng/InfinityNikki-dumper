#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnLua

#include "Basic.hpp"

#include "UnLua_classes.hpp"
#include "UnLua_parameters.hpp"


namespace SDK
{

// Function UnLua.LuaDelegateHandler.Dummy
// (Final, Native, Public)

void ULuaDelegateHandler::Dummy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LuaDelegateHandler", "Dummy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.Testcase_LocalVariableCheck.Testcase_CallCPPWithOutParameter
// (Final, Native, Public, HasOutParams)
// Parameters:
// class FString*                          OutString                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestcase_LocalVariableCheck::Testcase_CallCPPWithOutParameter(class FString* OutString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Testcase_LocalVariableCheck", "Testcase_CallCPPWithOutParameter");

	Params::Testcase_LocalVariableCheck_Testcase_CallCPPWithOutParameter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutString != nullptr)
		*OutString = std::move(Parms.OutString);
}


// Function UnLua.Testcase_LocalVariableCheck.Testcase_CallLuaWithLocalVariable
// (Final, Native, Public)

void UTestcase_LocalVariableCheck::Testcase_CallLuaWithLocalVariable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Testcase_LocalVariableCheck", "Testcase_CallLuaWithLocalVariable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.Testcase_LocalVariableCheck.Testcase_ReturnLocalVariable
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UTestcase_LocalVariableCheck::Testcase_ReturnLocalVariable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Testcase_LocalVariableCheck", "Testcase_ReturnLocalVariable");

	Params::Testcase_LocalVariableCheck_Testcase_ReturnLocalVariable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnLua.Testcase_LocalVariableCheck.Testcase_UseMemberLocalVariable
// (Final, Native, Public)

void UTestcase_LocalVariableCheck::Testcase_UseMemberLocalVariable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Testcase_LocalVariableCheck", "Testcase_UseMemberLocalVariable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.TutorialTestInterface.DoTest
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ITutorialTestInterface::DoTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialTestInterface", "DoTest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UnLua.TutorialBlueprintFunctionLibrary.CallDelegate
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// TDelegate<void(int32 nValue)>           InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTutorialBlueprintFunctionLibrary::CallDelegate(TDelegate<void(int32 nValue)> InDelegate, int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TutorialBlueprintFunctionLibrary", "CallDelegate");

	Params::TutorialBlueprintFunctionLibrary_CallDelegate Parms{};

	Parms.InDelegate = InDelegate;
	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.TutorialBlueprintFunctionLibrary.CallLuaByFLuaTable
// (Final, Native, Static, Private, BlueprintCallable)

void UTutorialBlueprintFunctionLibrary::CallLuaByFLuaTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TutorialBlueprintFunctionLibrary", "CallLuaByFLuaTable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.TutorialBlueprintFunctionLibrary.CallLuaByGlobalTable
// (Final, Native, Static, Private, BlueprintCallable)

void UTutorialBlueprintFunctionLibrary::CallLuaByGlobalTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TutorialBlueprintFunctionLibrary", "CallLuaByGlobalTable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.TutorialBlueprintFunctionLibrary.KillObject
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UObject*                          obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTutorialBlueprintFunctionLibrary::KillObject(class UObject* obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TutorialBlueprintFunctionLibrary", "KillObject");

	Params::TutorialBlueprintFunctionLibrary_KillObject Parms{};

	Parms.obj = obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.TutorialBlueprintFunctionLibrary.SetupCustomLoader
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTutorialBlueprintFunctionLibrary::SetupCustomLoader(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TutorialBlueprintFunctionLibrary", "SetupCustomLoader");

	Params::TutorialBlueprintFunctionLibrary_SetupCustomLoader Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaInterface.GetModuleName
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString IUnLuaInterface::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaInterface", "GetModuleName");

	Params::UnLuaInterface_GetModuleName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnLua.UnLuaManager.InputAction
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUnLuaManager::InputAction(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaManager", "InputAction");

	Params::UnLuaManager_InputAction Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnLua.UnLuaManager.InputAxis
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUnLuaManager::InputAxis(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaManager", "InputAxis");

	Params::UnLuaManager_InputAxis Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnLua.UnLuaManager.InputGesture
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUnLuaManager::InputGesture(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaManager", "InputGesture");

	Params::UnLuaManager_InputGesture Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnLua.UnLuaManager.InputTouch
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// ETouchIndex                             FingerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUnLuaManager::InputTouch(ETouchIndex FingerIndex, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaManager", "InputTouch");

	Params::UnLuaManager_InputTouch Parms{};

	Parms.FingerIndex = FingerIndex;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnLua.UnLuaManager.InputVectorAxis
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   AxisValue                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUnLuaManager::InputVectorAxis(const struct FVector& AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaManager", "InputVectorAxis");

	Params::UnLuaManager_InputVectorAxis Parms{};

	Parms.AxisValue = std::move(AxisValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnLua.UnLuaManager.OnLatentActionCompleted
// (Final, Native, Public)
// Parameters:
// int32                                   LinkID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUnLuaManager::OnLatentActionCompleted(int32 LinkID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaManager", "OnLatentActionCompleted");

	Params::UnLuaManager_OnLatentActionCompleted Parms{};

	Parms.LinkID = LinkID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaManager.TriggerAnimNotify
// (Event, Public, BlueprintEvent)

void UUnLuaManager::TriggerAnimNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaManager", "TriggerAnimNotify");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UnLua.UnLuaPerformanceTestProxy.CallLuaActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::CallLuaActor(int32 Count, class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "CallLuaActor");

	Params::UnLuaPerformanceTestProxy_CallLuaActor Parms{};

	Parms.Count = Count;
	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaPerformanceTestProxy.CallLuaInt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::CallLuaInt(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "CallLuaInt");

	Params::UnLuaPerformanceTestProxy_CallLuaInt Parms{};

	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaPerformanceTestProxy.CallLuaTSet
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSet<struct FVector>&             InPositions                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::CallLuaTSet(int32 Count, const TSet<struct FVector>& InPositions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "CallLuaTSet");

	Params::UnLuaPerformanceTestProxy_CallLuaTSet Parms{};

	Parms.Count = Count;
	Parms.InPositions = std::move(InPositions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaPerformanceTestProxy.ExeDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::ExeDelegate(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "ExeDelegate");

	Params::UnLuaPerformanceTestProxy_ExeDelegate Parms{};

	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaPerformanceTestProxy.GetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AUnLuaPerformanceTestProxy::GetActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "GetActor");

	Params::UnLuaPerformanceTestProxy_GetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnLua.UnLuaPerformanceTestProxy.NOP
// (Final, Native, Public, BlueprintCallable)

void AUnLuaPerformanceTestProxy::NOP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "NOP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaPerformanceTestProxy.OverrideFunctionActor
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::OverrideFunctionActor(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "OverrideFunctionActor");

	Params::UnLuaPerformanceTestProxy_OverrideFunctionActor Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnLua.UnLuaPerformanceTestProxy.OverrideFunctionInt
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   In                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::OverrideFunctionInt(int32 In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "OverrideFunctionInt");

	Params::UnLuaPerformanceTestProxy_OverrideFunctionInt Parms{};

	Parms.In = In;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnLua.UnLuaPerformanceTestProxy.OverrideFunctionTSet
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TSet<struct FVector>&             InPositions                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::OverrideFunctionTSet(const TSet<struct FVector>& InPositions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "OverrideFunctionTSet");

	Params::UnLuaPerformanceTestProxy_OverrideFunctionTSet Parms{};

	Parms.InPositions = std::move(InPositions);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UnLua.UnLuaPerformanceTestProxy.SetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::SetActor(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "SetActor");

	Params::UnLuaPerformanceTestProxy_SetActor Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaPerformanceTestProxy.SetDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(int32 nIndex)>           InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::SetDelegate(TDelegate<void(int32 nIndex)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "SetDelegate");

	Params::UnLuaPerformanceTestProxy_SetDelegate Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaPerformanceTestProxy.Simulate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::Simulate(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "Simulate");

	Params::UnLuaPerformanceTestProxy_Simulate Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaPerformanceTestProxy.UpdateIndices
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    NewIndices                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::UpdateIndices(const TArray<int32>& NewIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "UpdateIndices");

	Params::UnLuaPerformanceTestProxy_UpdateIndices Parms{};

	Parms.NewIndices = std::move(NewIndices);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaPerformanceTestProxy.UpdateMeshID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUnLuaPerformanceTestProxy::UpdateMeshID(int32 NewID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "UpdateMeshID");

	Params::UnLuaPerformanceTestProxy_UpdateMeshID Parms{};

	Parms.NewID = NewID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnLua.UnLuaPerformanceTestProxy.UpdateMeshName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    NewName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AUnLuaPerformanceTestProxy::UpdateMeshName(const class FString& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "UpdateMeshName");

	Params::UnLuaPerformanceTestProxy_UpdateMeshName Parms{};

	Parms.NewName = std::move(NewName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnLua.UnLuaPerformanceTestProxy.UpdatePositions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FVector>&           NewPositions                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::UpdatePositions(const TArray<struct FVector>& NewPositions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "UpdatePositions");

	Params::UnLuaPerformanceTestProxy_UpdatePositions Parms{};

	Parms.NewPositions = std::move(NewPositions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UnLua.UnLuaPerformanceTestProxy.GetCOM
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector AUnLuaPerformanceTestProxy::GetCOM() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "GetCOM");

	Params::UnLuaPerformanceTestProxy_GetCOM Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnLua.UnLuaPerformanceTestProxy.GetIndices
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<int32>*                          OutIndices                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::GetIndices(TArray<int32>* OutIndices) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "GetIndices");

	Params::UnLuaPerformanceTestProxy_GetIndices Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIndices != nullptr)
		*OutIndices = std::move(Parms.OutIndices);
}


// Function UnLua.UnLuaPerformanceTestProxy.GetMeshID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUnLuaPerformanceTestProxy::GetMeshID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "GetMeshID");

	Params::UnLuaPerformanceTestProxy_GetMeshID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnLua.UnLuaPerformanceTestProxy.GetMeshInfo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32*                                  OutMeshID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutMeshName                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutCOM                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>*                          OutIndices                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector>*                 OutPositions                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector>*                 OutPredictedPositions                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUnLuaPerformanceTestProxy::GetMeshInfo(int32* OutMeshID, class FString* OutMeshName, struct FVector* OutCOM, TArray<int32>* OutIndices, TArray<struct FVector>* OutPositions, TArray<struct FVector>* OutPredictedPositions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "GetMeshInfo");

	Params::UnLuaPerformanceTestProxy_GetMeshInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMeshID != nullptr)
		*OutMeshID = Parms.OutMeshID;

	if (OutMeshName != nullptr)
		*OutMeshName = std::move(Parms.OutMeshName);

	if (OutCOM != nullptr)
		*OutCOM = std::move(Parms.OutCOM);

	if (OutIndices != nullptr)
		*OutIndices = std::move(Parms.OutIndices);

	if (OutPositions != nullptr)
		*OutPositions = std::move(Parms.OutPositions);

	if (OutPredictedPositions != nullptr)
		*OutPredictedPositions = std::move(Parms.OutPredictedPositions);

	return Parms.ReturnValue;
}


// Function UnLua.UnLuaPerformanceTestProxy.GetMeshName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AUnLuaPerformanceTestProxy::GetMeshName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "GetMeshName");

	Params::UnLuaPerformanceTestProxy_GetMeshName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnLua.UnLuaPerformanceTestProxy.GetPositions
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FVector>*                 OutPositions                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AUnLuaPerformanceTestProxy::GetPositions(TArray<struct FVector>* OutPositions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "GetPositions");

	Params::UnLuaPerformanceTestProxy_GetPositions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPositions != nullptr)
		*OutPositions = std::move(Parms.OutPositions);
}


// Function UnLua.UnLuaPerformanceTestProxy.GetPredictedPositions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FVector>            ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FVector> AUnLuaPerformanceTestProxy::GetPredictedPositions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "GetPredictedPositions");

	Params::UnLuaPerformanceTestProxy_GetPredictedPositions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UnLua.UnLuaPerformanceTestProxy.Raycast
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUnLuaPerformanceTestProxy::Raycast(const struct FVector& Origin, const struct FVector& Direction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnLuaPerformanceTestProxy", "Raycast");

	Params::UnLuaPerformanceTestProxy_Raycast Parms{};

	Parms.Origin = std::move(Origin);
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

