#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GoToVolume

#include "Basic.hpp"

#include "BP_GoToVolume_classes.hpp"
#include "BP_GoToVolume_parameters.hpp"


namespace SDK
{

// Function BP_GoToVolume.BP_GoToVolume_C.ShowVolumn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanShow                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GoToVolume_C::ShowVolumn(bool CanShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "ShowVolumn");

	Params::BP_GoToVolume_C_ShowVolumn Parms{};

	Parms.CanShow = CanShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GoToVolume.BP_GoToVolume_C.SetTransformInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GoToVolume_C::SetTransformInfo(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "SetTransformInfo");

	Params::BP_GoToVolume_C_SetTransformInfo Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GoToVolume.BP_GoToVolume_C.SetMeshType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MeshType_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GoToVolume_C::SetMeshType(int32 MeshType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "SetMeshType");

	Params::BP_GoToVolume_C_SetMeshType Parms{};

	Parms.MeshType_0 = MeshType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GoToVolume.BP_GoToVolume_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GoToVolume_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "ReceiveTick");

	Params::BP_GoToVolume_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GoToVolume.BP_GoToVolume_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_GoToVolume_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GoToVolume.BP_GoToVolume_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_GoToVolume_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GoToVolume.BP_GoToVolume_C.ReceiveActorEndOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GoToVolume_C::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "ReceiveActorEndOverlap");

	Params::BP_GoToVolume_C_ReceiveActorEndOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GoToVolume.BP_GoToVolume_C.ReceiveActorBeginOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GoToVolume_C::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "ReceiveActorBeginOverlap");

	Params::BP_GoToVolume_C_ReceiveActorBeginOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GoToVolume.BP_GoToVolume_C.OnOverlapEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GoToVolume_C::OnOverlapEnd(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "OnOverlapEnd");

	Params::BP_GoToVolume_C_OnOverlapEnd Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GoToVolume.BP_GoToVolume_C.OnOverlapBegin
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GoToVolume_C::OnOverlapBegin(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "OnOverlapBegin");

	Params::BP_GoToVolume_C_OnOverlapBegin Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GoToVolume.BP_GoToVolume_C.ExecuteUbergraph_BP_GoToVolume
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GoToVolume_C::ExecuteUbergraph_BP_GoToVolume(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "ExecuteUbergraph_BP_GoToVolume");

	Params::BP_GoToVolume_C_ExecuteUbergraph_BP_GoToVolume Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GoToVolume.BP_GoToVolume_C.EnableOverlap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GoToVolume_C::EnableOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "EnableOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GoToVolume.BP_GoToVolume_C.DisableOverlap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GoToVolume_C::DisableOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "DisableOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GoToVolume.BP_GoToVolume_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString ABP_GoToVolume_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GoToVolume_C", "GetModuleName");

	Params::BP_GoToVolume_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

