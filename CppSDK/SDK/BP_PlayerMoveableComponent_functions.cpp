#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerMoveableComponent

#include "Basic.hpp"

#include "BP_PlayerMoveableComponent_classes.hpp"
#include "BP_PlayerMoveableComponent_parameters.hpp"


namespace SDK
{

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_DebugVisualizeLocomotionInputData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BP_DebugVisualizeLocomotionInputData(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BP_DebugVisualizeLocomotionInputData");

	Params::BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_GetCurInputContext
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRMInputContext*                 BP_CurRMInputContext                                   (Parm, OutParm)

void UBP_PlayerMoveableComponent_C::BP_GetCurInputContext(struct FRMInputContext* BP_CurRMInputContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BP_GetCurInputContext");

	Params::BP_PlayerMoveableComponent_C_BP_GetCurInputContext Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BP_CurRMInputContext != nullptr)
		*BP_CurRMInputContext = std::move(Parms.BP_CurRMInputContext);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_GetCurrentActiveMovementMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPlayerGamePlayMovementMode*            Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BP_GetCurrentActiveMovementMode(EPlayerGamePlayMovementMode* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BP_GetCurrentActiveMovementMode");

	Params::BP_PlayerMoveableComponent_C_BP_GetCurrentActiveMovementMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_OnCharacterMovementModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PreviousCustomMode                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BP_OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BP_OnCharacterMovementModeChanged");

	Params::BP_PlayerMoveableComponent_C_BP_OnCharacterMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_OnX6CharacterPossessed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BP_OnX6CharacterPossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BP_OnX6CharacterPossessed");

	Params::BP_PlayerMoveableComponent_C_BP_OnX6CharacterPossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_OnX6CharacterUnPossessed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      PreviousController                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BP_OnX6CharacterUnPossessed(class AController* PreviousController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BP_OnX6CharacterUnPossessed");

	Params::BP_PlayerMoveableComponent_C_BP_OnX6CharacterUnPossessed Parms{};

	Parms.PreviousController = PreviousController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_Public_SwitchNikkiGamePlayMovementMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerGamePlayMovementMode             NewGamePlayMovementMode                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BP_Public_SwitchNikkiGamePlayMovementMode(EPlayerGamePlayMovementMode NewGamePlayMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BP_Public_SwitchNikkiGamePlayMovementMode");

	Params::BP_PlayerMoveableComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode Parms{};

	Parms.NewGamePlayMovementMode = NewGamePlayMovementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_BalanceBeamStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanMoveOnValidInput                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsEnterTowardSideOfBeam                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsCurInputValid                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BPI_Get_BalanceBeamStates(bool* CanMoveOnValidInput, bool* IsEnterTowardSideOfBeam, bool* IsCurInputValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_Get_BalanceBeamStates");

	Params::BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanMoveOnValidInput != nullptr)
		*CanMoveOnValidInput = Parms.CanMoveOnValidInput;

	if (IsEnterTowardSideOfBeam != nullptr)
		*IsEnterTowardSideOfBeam = Parms.IsEnterTowardSideOfBeam;

	if (IsCurInputValid != nullptr)
		*IsCurInputValid = Parms.IsCurInputValid;
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_ConfigData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 WalkSpeed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 RunSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 SprintSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BPI_Get_ConfigData(double* WalkSpeed, double* RunSpeed, double* SprintSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_Get_ConfigData");

	Params::BP_PlayerMoveableComponent_C_BPI_Get_ConfigData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WalkSpeed != nullptr)
		*WalkSpeed = Parms.WalkSpeed;

	if (RunSpeed != nullptr)
		*RunSpeed = Parms.RunSpeed;

	if (SprintSpeed != nullptr)
		*SprintSpeed = Parms.SprintSpeed;
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_CurrentGroundStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode*                          PawnMovementMode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERegularLocomotionType*                 AllowedGait                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerMovementScenarios*               MovementScenario                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputDeviceKeyType*                    CurInputDeviceKeyType                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BPI_Get_CurrentGroundStates(EMovementMode* PawnMovementMode, ERegularLocomotionType* AllowedGait, EPlayerMovementScenarios* MovementScenario, EInputDeviceKeyType* CurInputDeviceKeyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_Get_CurrentGroundStates");

	Params::BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PawnMovementMode != nullptr)
		*PawnMovementMode = Parms.PawnMovementMode;

	if (AllowedGait != nullptr)
		*AllowedGait = Parms.AllowedGait;

	if (MovementScenario != nullptr)
		*MovementScenario = Parms.MovementScenario;

	if (CurInputDeviceKeyType != nullptr)
		*CurInputDeviceKeyType = Parms.CurInputDeviceKeyType;
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_EssentialValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         InVelocity                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         InCurrentAcceleration                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InMaxAcceleration                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InTurnAroundAngle                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InSlopeAngle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InStartTurnAroundAngle                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InCurConfigMaxSpeed                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BPI_Get_EssentialValues(struct FVector* InVelocity, struct FVector* InCurrentAcceleration, double* InMaxAcceleration, double* InTurnAroundAngle, double* InSlopeAngle, double* InStartTurnAroundAngle, double* InCurConfigMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_Get_EssentialValues");

	Params::BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InVelocity != nullptr)
		*InVelocity = std::move(Parms.InVelocity);

	if (InCurrentAcceleration != nullptr)
		*InCurrentAcceleration = std::move(Parms.InCurrentAcceleration);

	if (InMaxAcceleration != nullptr)
		*InMaxAcceleration = Parms.InMaxAcceleration;

	if (InTurnAroundAngle != nullptr)
		*InTurnAroundAngle = Parms.InTurnAroundAngle;

	if (InSlopeAngle != nullptr)
		*InSlopeAngle = Parms.InSlopeAngle;

	if (InStartTurnAroundAngle != nullptr)
		*InStartTurnAroundAngle = Parms.InStartTurnAroundAngle;

	if (InCurConfigMaxSpeed != nullptr)
		*InCurConfigMaxSpeed = Parms.InCurConfigMaxSpeed;
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_MaxSpeedValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 CurMinAnalogWalkSpeed                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CurConfigMaxSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CurActualMaxSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BPI_Get_MaxSpeedValues(double* CurMinAnalogWalkSpeed, double* CurConfigMaxSpeed, double* CurActualMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_Get_MaxSpeedValues");

	Params::BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurMinAnalogWalkSpeed != nullptr)
		*CurMinAnalogWalkSpeed = Parms.CurMinAnalogWalkSpeed;

	if (CurConfigMaxSpeed != nullptr)
		*CurConfigMaxSpeed = Parms.CurConfigMaxSpeed;

	if (CurActualMaxSpeed != nullptr)
		*CurActualMaxSpeed = Parms.CurActualMaxSpeed;
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_PlayerStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsInState_AimMode                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BPI_Get_PlayerStates(bool* IsInState_AimMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_Get_PlayerStates");

	Params::BP_PlayerMoveableComponent_C_BPI_Get_PlayerStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInState_AimMode != nullptr)
		*IsInState_AimMode = Parms.IsInState_AimMode;
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_OnCharacterMovementModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BPI_OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_OnCharacterMovementModeChanged");

	Params::BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_OnMovementModeDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMoveableComponent_C::BPI_OnMovementModeDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_OnMovementModeDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_OnMovementModeEnabled
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMoveableComponent_C::BPI_OnMovementModeEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_OnMovementModeEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_OnRotateCameraInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InputVector                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputDeviceKeyType                     DeviceType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BPI_OnRotateCameraInput(const struct FVector& InputVector, EInputDeviceKeyType DeviceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_OnRotateCameraInput");

	Params::BP_PlayerMoveableComponent_C_BPI_OnRotateCameraInput Parms{};

	Parms.InputVector = std::move(InputVector);
	Parms.DeviceType = DeviceType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_OnSelfControlledByPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BPI_OnSelfControlledByPlayer(class APawn* PlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_OnSelfControlledByPlayer");

	Params::BP_PlayerMoveableComponent_C_BPI_OnSelfControlledByPlayer Parms{};

	Parms.PlayerPawn = PlayerPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_OnSelfLoseControlledByPlayer
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerMoveableComponent_C::BPI_OnSelfLoseControlledByPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_OnSelfLoseControlledByPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_SetPlayerToControlActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorToControl                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Controlled                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::BPI_SetPlayerToControlActor(class AActor* ActorToControl, bool* Controlled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "BPI_SetPlayerToControlActor");

	Params::BP_PlayerMoveableComponent_C_BPI_SetPlayerToControlActor Parms{};

	Parms.ActorToControl = ActorToControl;

	UObject::ProcessEvent(Func, &Parms);

	if (Controlled != nullptr)
		*Controlled = Parms.Controlled;
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.ExecuteUbergraph_BP_PlayerMoveableComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::ExecuteUbergraph_BP_PlayerMoveableComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "ExecuteUbergraph_BP_PlayerMoveableComponent");

	Params::BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.InputAction_Crash
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressedOrRelease                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::InputAction_Crash(bool PressedOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "InputAction_Crash");

	Params::BP_PlayerMoveableComponent_C_InputAction_Crash Parms{};

	Parms.PressedOrRelease = PressedOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.InputAction_Jump
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressedOrRelease                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::InputAction_Jump(bool PressedOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "InputAction_Jump");

	Params::BP_PlayerMoveableComponent_C_InputAction_Jump Parms{};

	Parms.PressedOrRelease = PressedOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.InputAction_Sprint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressedOrRelease                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::InputAction_Sprint(bool PressedOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "InputAction_Sprint");

	Params::BP_PlayerMoveableComponent_C_InputAction_Sprint Parms{};

	Parms.PressedOrRelease = PressedOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.InputAction_Walk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressOrRelease                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::InputAction_Walk(bool PressOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "InputAction_Walk");

	Params::BP_PlayerMoveableComponent_C_InputAction_Walk Parms{};

	Parms.PressOrRelease = PressOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.OnMovementMoveXAxisAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::OnMovementMoveXAxisAction(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "OnMovementMoveXAxisAction");

	Params::BP_PlayerMoveableComponent_C_OnMovementMoveXAxisAction Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.OnMovementMoveYAxisAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::OnMovementMoveYAxisAction(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "OnMovementMoveYAxisAction");

	Params::BP_PlayerMoveableComponent_C_OnMovementMoveYAxisAction Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_PlayerMoveableComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerMoveableComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "ReceiveTick");

	Params::BP_PlayerMoveableComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_PlayerMoveableComponent_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerMoveableComponent_C", "GetModuleName");

	Params::BP_PlayerMoveableComponent_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

