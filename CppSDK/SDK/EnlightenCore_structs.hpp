#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnlightenCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum EnlightenCore.EEnlightenPrecomputeDataVersion
// NumValues: 0x001D
enum class EEnlightenPrecomputeDataVersion : uint32
{
	None                                     = 0,
	IncludeEnvironmentInCubemaps             = 1,
	ReorderInstanceIds                       = 2,
	DisallowDuplicateLevel                   = 3,
	ShareCommonProbeSetData                  = 4,
	StaticProbeSetGuids                      = 5,
	MaxAtlasTileCount                        = 6,
	MaxAtlasProbeCount                       = 7,
	UnversionedDusterData                    = 8,
	MultipleDataSets                         = 9,
	RemoveLandscapeLod                       = 10,
	RemoveLightmapLod                        = 11,
	HideDisplacedProbes                      = 12,
	HideDisplacedProbesUE5                   = 13,
	ProbeSetDebugData                        = 14,
	ProbeSetDebugDataUE5                     = 15,
	VirtualProbeShader                       = 16,
	VirtualProbeShaderUE5                    = 17,
	ProbeOutputFP16                          = 18,
	PrecomputedCubemapGGXFilter              = 19,
	PrecomputedCubemapFilterUE5              = 20,
	DenseProbePlacement                      = 21,
	DenseProbePlacementUE5                   = 22,
	AllowInvalidProbes                       = 23,
	AllowInvalidProbesUE5                    = 24,
	LatestPlusOne                            = 25,
	Latest                                   = 24,
	Empty                                    = 18446744073709551615,
	EEnlightenPrecomputeDataVersion_MAX      = 26,
};

// Enum EnlightenCore.EEnlightenLightmapPixelFormat
// NumValues: 0x0003
enum class EEnlightenLightmapPixelFormat : uint8
{
	LRB                                      = 0,
	R11G11B10F                               = 1,
	EEnlightenLightmapPixelFormat_MAX        = 2,
};

// Enum EnlightenCore.EEnlightenLightmapDisplayQuality
// NumValues: 0x0004
enum class EEnlightenLightmapDisplayQuality : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	EEnlightenLightmapDisplayQuality_MAX     = 3,
};

// ScriptStruct EnlightenCore.EnlightenDiagnosticObject
// 0x0020 (0x0020 - 0x0000)
struct FEnlightenDiagnosticObject final
{
public:
	class FString                                 ObjectPath;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnlightenDiagnosticObject) == 0x000008, "Wrong alignment on FEnlightenDiagnosticObject");
static_assert(sizeof(FEnlightenDiagnosticObject) == 0x000020, "Wrong size on FEnlightenDiagnosticObject");
static_assert(offsetof(FEnlightenDiagnosticObject, ObjectPath) == 0x000000, "Member 'FEnlightenDiagnosticObject::ObjectPath' has a wrong offset!");
static_assert(offsetof(FEnlightenDiagnosticObject, DisplayName) == 0x000010, "Member 'FEnlightenDiagnosticObject::DisplayName' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenPrecomputeDiagnostic
// 0x0028 (0x0028 - 0x0000)
struct FEnlightenPrecomputeDiagnostic final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	TArray<struct FEnlightenDiagnosticObject>     Objects;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        Severity;                                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnlightenPrecomputeDiagnostic) == 0x000008, "Wrong alignment on FEnlightenPrecomputeDiagnostic");
static_assert(sizeof(FEnlightenPrecomputeDiagnostic) == 0x000028, "Wrong size on FEnlightenPrecomputeDiagnostic");
static_assert(offsetof(FEnlightenPrecomputeDiagnostic, Message) == 0x000000, "Member 'FEnlightenPrecomputeDiagnostic::Message' has a wrong offset!");
static_assert(offsetof(FEnlightenPrecomputeDiagnostic, Objects) == 0x000010, "Member 'FEnlightenPrecomputeDiagnostic::Objects' has a wrong offset!");
static_assert(offsetof(FEnlightenPrecomputeDiagnostic, Severity) == 0x000020, "Member 'FEnlightenPrecomputeDiagnostic::Severity' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenRuntimePrecomputeDataInfo
// 0x0088 (0x0088 - 0x0000)
struct FEnlightenRuntimePrecomputeDataInfo final
{
public:
	class FString                                 LevelUniquePackageName;                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        PrecomputeDataSavePath;                            // 0x0010(0x0020)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnlightenRuntimePrecomputeData*        StreamedPreComputeData;                            // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnlightenPrecomputeData*               ActuralStreamedPreComputeData;                     // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       BuildDataBound;                                    // 0x0040(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bContainLandscape;                                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideStreamingDistance;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnlightenRuntimePrecomputeDataInfo) == 0x000008, "Wrong alignment on FEnlightenRuntimePrecomputeDataInfo");
static_assert(sizeof(FEnlightenRuntimePrecomputeDataInfo) == 0x000088, "Wrong size on FEnlightenRuntimePrecomputeDataInfo");
static_assert(offsetof(FEnlightenRuntimePrecomputeDataInfo, LevelUniquePackageName) == 0x000000, "Member 'FEnlightenRuntimePrecomputeDataInfo::LevelUniquePackageName' has a wrong offset!");
static_assert(offsetof(FEnlightenRuntimePrecomputeDataInfo, PrecomputeDataSavePath) == 0x000010, "Member 'FEnlightenRuntimePrecomputeDataInfo::PrecomputeDataSavePath' has a wrong offset!");
static_assert(offsetof(FEnlightenRuntimePrecomputeDataInfo, StreamedPreComputeData) == 0x000030, "Member 'FEnlightenRuntimePrecomputeDataInfo::StreamedPreComputeData' has a wrong offset!");
static_assert(offsetof(FEnlightenRuntimePrecomputeDataInfo, ActuralStreamedPreComputeData) == 0x000038, "Member 'FEnlightenRuntimePrecomputeDataInfo::ActuralStreamedPreComputeData' has a wrong offset!");
static_assert(offsetof(FEnlightenRuntimePrecomputeDataInfo, BuildDataBound) == 0x000040, "Member 'FEnlightenRuntimePrecomputeDataInfo::BuildDataBound' has a wrong offset!");
static_assert(offsetof(FEnlightenRuntimePrecomputeDataInfo, bContainLandscape) == 0x000078, "Member 'FEnlightenRuntimePrecomputeDataInfo::bContainLandscape' has a wrong offset!");
static_assert(offsetof(FEnlightenRuntimePrecomputeDataInfo, OverrideStreamingDistance) == 0x00007C, "Member 'FEnlightenRuntimePrecomputeDataInfo::OverrideStreamingDistance' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenStreamingProbeSetInfo
// 0x0078 (0x0078 - 0x0000)
struct FEnlightenStreamingProbeSetInfo final
{
public:
	struct FBox                                   ProbeSetBound;                                     // 0x0000(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VoxelSize;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OctreeLevel;                                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LodDistance;                                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        ProbeSetDataSavePath;                              // 0x0048(0x0020)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnlightenProbeSet*                     StreamedProbeSet;                                  // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnlightenStreamingProbeSetInfo) == 0x000008, "Wrong alignment on FEnlightenStreamingProbeSetInfo");
static_assert(sizeof(FEnlightenStreamingProbeSetInfo) == 0x000078, "Wrong size on FEnlightenStreamingProbeSetInfo");
static_assert(offsetof(FEnlightenStreamingProbeSetInfo, ProbeSetBound) == 0x000000, "Member 'FEnlightenStreamingProbeSetInfo::ProbeSetBound' has a wrong offset!");
static_assert(offsetof(FEnlightenStreamingProbeSetInfo, VoxelSize) == 0x000038, "Member 'FEnlightenStreamingProbeSetInfo::VoxelSize' has a wrong offset!");
static_assert(offsetof(FEnlightenStreamingProbeSetInfo, OctreeLevel) == 0x00003C, "Member 'FEnlightenStreamingProbeSetInfo::OctreeLevel' has a wrong offset!");
static_assert(offsetof(FEnlightenStreamingProbeSetInfo, LodDistance) == 0x000040, "Member 'FEnlightenStreamingProbeSetInfo::LodDistance' has a wrong offset!");
static_assert(offsetof(FEnlightenStreamingProbeSetInfo, ProbeSetDataSavePath) == 0x000048, "Member 'FEnlightenStreamingProbeSetInfo::ProbeSetDataSavePath' has a wrong offset!");
static_assert(offsetof(FEnlightenStreamingProbeSetInfo, StreamedProbeSet) == 0x000068, "Member 'FEnlightenStreamingProbeSetInfo::StreamedProbeSet' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenSerializedPrimitive
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FEnlightenSerializedPrimitive final
{
public:
	struct FGuid                                  PrimitiveId;                                       // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnlightenSerializedPrimitive) == 0x000008, "Wrong alignment on FEnlightenSerializedPrimitive");
static_assert(sizeof(FEnlightenSerializedPrimitive) == 0x000020, "Wrong size on FEnlightenSerializedPrimitive");
static_assert(offsetof(FEnlightenSerializedPrimitive, PrimitiveId) == 0x000000, "Member 'FEnlightenSerializedPrimitive::PrimitiveId' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenSerializedInstance
// 0x0010 (0x0010 - 0x0000)
struct FEnlightenSerializedInstance final
{
public:
	struct FVector4f                              UVScaleBias;                                       // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnlightenSerializedInstance) == 0x000010, "Wrong alignment on FEnlightenSerializedInstance");
static_assert(sizeof(FEnlightenSerializedInstance) == 0x000010, "Wrong size on FEnlightenSerializedInstance");
static_assert(offsetof(FEnlightenSerializedInstance, UVScaleBias) == 0x000000, "Member 'FEnlightenSerializedInstance::UVScaleBias' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenSerializedInstancedPrimitive
// 0x0020 (0x0020 - 0x0000)
struct FEnlightenSerializedInstancedPrimitive final
{
public:
	struct FGuid                                  PrimitiveId;                                       // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEnlightenSerializedInstance>   Instances;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnlightenSerializedInstancedPrimitive) == 0x000008, "Wrong alignment on FEnlightenSerializedInstancedPrimitive");
static_assert(sizeof(FEnlightenSerializedInstancedPrimitive) == 0x000020, "Wrong size on FEnlightenSerializedInstancedPrimitive");
static_assert(offsetof(FEnlightenSerializedInstancedPrimitive, PrimitiveId) == 0x000000, "Member 'FEnlightenSerializedInstancedPrimitive::PrimitiveId' has a wrong offset!");
static_assert(offsetof(FEnlightenSerializedInstancedPrimitive, Instances) == 0x000010, "Member 'FEnlightenSerializedInstancedPrimitive::Instances' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenMaterialData
// 0x0030 (0x0030 - 0x0000)
struct FEnlightenMaterialData final
{
public:
	int32                                         ComponentMaterialIndex;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnlightenId;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LastAlbedo;                                        // 0x0008(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LastEmissive;                                      // 0x0018(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSavedDynamicAlbedo;                               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSavedDynamicEmissive;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSavedEmissive;                                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlbedoScale;                                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnlightenMaterialData) == 0x000004, "Wrong alignment on FEnlightenMaterialData");
static_assert(sizeof(FEnlightenMaterialData) == 0x000030, "Wrong size on FEnlightenMaterialData");
static_assert(offsetof(FEnlightenMaterialData, ComponentMaterialIndex) == 0x000000, "Member 'FEnlightenMaterialData::ComponentMaterialIndex' has a wrong offset!");
static_assert(offsetof(FEnlightenMaterialData, EnlightenId) == 0x000004, "Member 'FEnlightenMaterialData::EnlightenId' has a wrong offset!");
static_assert(offsetof(FEnlightenMaterialData, LastAlbedo) == 0x000008, "Member 'FEnlightenMaterialData::LastAlbedo' has a wrong offset!");
static_assert(offsetof(FEnlightenMaterialData, LastEmissive) == 0x000018, "Member 'FEnlightenMaterialData::LastEmissive' has a wrong offset!");
static_assert(offsetof(FEnlightenMaterialData, bSavedDynamicAlbedo) == 0x000028, "Member 'FEnlightenMaterialData::bSavedDynamicAlbedo' has a wrong offset!");
static_assert(offsetof(FEnlightenMaterialData, bSavedDynamicEmissive) == 0x000029, "Member 'FEnlightenMaterialData::bSavedDynamicEmissive' has a wrong offset!");
static_assert(offsetof(FEnlightenMaterialData, bSavedEmissive) == 0x00002A, "Member 'FEnlightenMaterialData::bSavedEmissive' has a wrong offset!");
static_assert(offsetof(FEnlightenMaterialData, AlbedoScale) == 0x00002C, "Member 'FEnlightenMaterialData::AlbedoScale' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenSerializedPrimitiveAlbedoData
// 0x0028 (0x0028 - 0x0000)
struct FEnlightenSerializedPrimitiveAlbedoData final
{
public:
	struct FGuid                                  PrimitiveGuid;                                     // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InstanceIndex;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceCount;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEnlightenMaterialData>         Materials;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnlightenSerializedPrimitiveAlbedoData) == 0x000008, "Wrong alignment on FEnlightenSerializedPrimitiveAlbedoData");
static_assert(sizeof(FEnlightenSerializedPrimitiveAlbedoData) == 0x000028, "Wrong size on FEnlightenSerializedPrimitiveAlbedoData");
static_assert(offsetof(FEnlightenSerializedPrimitiveAlbedoData, PrimitiveGuid) == 0x000000, "Member 'FEnlightenSerializedPrimitiveAlbedoData::PrimitiveGuid' has a wrong offset!");
static_assert(offsetof(FEnlightenSerializedPrimitiveAlbedoData, InstanceIndex) == 0x000010, "Member 'FEnlightenSerializedPrimitiveAlbedoData::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FEnlightenSerializedPrimitiveAlbedoData, InstanceCount) == 0x000014, "Member 'FEnlightenSerializedPrimitiveAlbedoData::InstanceCount' has a wrong offset!");
static_assert(offsetof(FEnlightenSerializedPrimitiveAlbedoData, Materials) == 0x000018, "Member 'FEnlightenSerializedPrimitiveAlbedoData::Materials' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenSerializedFoliageAlbedoData
// 0x0020 (0x0020 - 0x0000)
struct FEnlightenSerializedFoliageAlbedoData final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        FirstInstanceIndex;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceCount;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEnlightenMaterialData>         Materials;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnlightenSerializedFoliageAlbedoData) == 0x000008, "Wrong alignment on FEnlightenSerializedFoliageAlbedoData");
static_assert(sizeof(FEnlightenSerializedFoliageAlbedoData) == 0x000020, "Wrong size on FEnlightenSerializedFoliageAlbedoData");
static_assert(offsetof(FEnlightenSerializedFoliageAlbedoData, StaticMesh) == 0x000000, "Member 'FEnlightenSerializedFoliageAlbedoData::StaticMesh' has a wrong offset!");
static_assert(offsetof(FEnlightenSerializedFoliageAlbedoData, FirstInstanceIndex) == 0x000008, "Member 'FEnlightenSerializedFoliageAlbedoData::FirstInstanceIndex' has a wrong offset!");
static_assert(offsetof(FEnlightenSerializedFoliageAlbedoData, InstanceCount) == 0x00000C, "Member 'FEnlightenSerializedFoliageAlbedoData::InstanceCount' has a wrong offset!");
static_assert(offsetof(FEnlightenSerializedFoliageAlbedoData, Materials) == 0x000010, "Member 'FEnlightenSerializedFoliageAlbedoData::Materials' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenSerializedData
// 0x0040 (0x0040 - 0x0000)
struct FEnlightenSerializedData final
{
public:
	TArray<struct FEnlightenSerializedPrimitive>  Primitives;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEnlightenSerializedInstancedPrimitive> InstancedPrimitives;                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEnlightenSerializedPrimitiveAlbedoData> PrimitiveAlbedoData;                      // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEnlightenSerializedFoliageAlbedoData> FoliageAlbedoData;                          // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnlightenSerializedData) == 0x000008, "Wrong alignment on FEnlightenSerializedData");
static_assert(sizeof(FEnlightenSerializedData) == 0x000040, "Wrong size on FEnlightenSerializedData");
static_assert(offsetof(FEnlightenSerializedData, Primitives) == 0x000000, "Member 'FEnlightenSerializedData::Primitives' has a wrong offset!");
static_assert(offsetof(FEnlightenSerializedData, InstancedPrimitives) == 0x000010, "Member 'FEnlightenSerializedData::InstancedPrimitives' has a wrong offset!");
static_assert(offsetof(FEnlightenSerializedData, PrimitiveAlbedoData) == 0x000020, "Member 'FEnlightenSerializedData::PrimitiveAlbedoData' has a wrong offset!");
static_assert(offsetof(FEnlightenSerializedData, FoliageAlbedoData) == 0x000030, "Member 'FEnlightenSerializedData::FoliageAlbedoData' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenAtlasAllocation
// 0x0010 (0x0010 - 0x0000)
struct FEnlightenAtlasAllocation final
{
public:
	uint32                                        Width;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Height;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AtlasBaseX;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AtlasBaseY;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnlightenAtlasAllocation) == 0x000004, "Wrong alignment on FEnlightenAtlasAllocation");
static_assert(sizeof(FEnlightenAtlasAllocation) == 0x000010, "Wrong size on FEnlightenAtlasAllocation");
static_assert(offsetof(FEnlightenAtlasAllocation, Width) == 0x000000, "Member 'FEnlightenAtlasAllocation::Width' has a wrong offset!");
static_assert(offsetof(FEnlightenAtlasAllocation, Height) == 0x000004, "Member 'FEnlightenAtlasAllocation::Height' has a wrong offset!");
static_assert(offsetof(FEnlightenAtlasAllocation, AtlasBaseX) == 0x000008, "Member 'FEnlightenAtlasAllocation::AtlasBaseX' has a wrong offset!");
static_assert(offsetof(FEnlightenAtlasAllocation, AtlasBaseY) == 0x00000C, "Member 'FEnlightenAtlasAllocation::AtlasBaseY' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenSystemDusterPoint
// 0x0010 (0x0010 - 0x0000)
struct FEnlightenSystemDusterPoint final
{
public:
	int32                                         DusterIndex;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceIndex;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2f                              Position;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnlightenSystemDusterPoint) == 0x000004, "Wrong alignment on FEnlightenSystemDusterPoint");
static_assert(sizeof(FEnlightenSystemDusterPoint) == 0x000010, "Wrong size on FEnlightenSystemDusterPoint");
static_assert(offsetof(FEnlightenSystemDusterPoint, DusterIndex) == 0x000000, "Member 'FEnlightenSystemDusterPoint::DusterIndex' has a wrong offset!");
static_assert(offsetof(FEnlightenSystemDusterPoint, FaceIndex) == 0x000004, "Member 'FEnlightenSystemDusterPoint::FaceIndex' has a wrong offset!");
static_assert(offsetof(FEnlightenSystemDusterPoint, Position) == 0x000008, "Member 'FEnlightenSystemDusterPoint::Position' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenSystemDusterSection
// 0x0018 (0x0018 - 0x0000)
struct FEnlightenSystemDusterSection final
{
public:
	int32                                         FirstFace;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceCount;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEnlightenSystemDusterPoint>    Points;                                            // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnlightenSystemDusterSection) == 0x000008, "Wrong alignment on FEnlightenSystemDusterSection");
static_assert(sizeof(FEnlightenSystemDusterSection) == 0x000018, "Wrong size on FEnlightenSystemDusterSection");
static_assert(offsetof(FEnlightenSystemDusterSection, FirstFace) == 0x000000, "Member 'FEnlightenSystemDusterSection::FirstFace' has a wrong offset!");
static_assert(offsetof(FEnlightenSystemDusterSection, FaceCount) == 0x000004, "Member 'FEnlightenSystemDusterSection::FaceCount' has a wrong offset!");
static_assert(offsetof(FEnlightenSystemDusterSection, Points) == 0x000008, "Member 'FEnlightenSystemDusterSection::Points' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenSystemDusterInstance
// 0x0030 (0x0030 - 0x0000)
struct FEnlightenSystemDusterInstance final
{
public:
	struct FGuid                                  PrimitiveId;                                       // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InstanceId;                                        // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEnlightenSystemDusterSection>  Sections;                                          // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnlightenSystemDusterInstance) == 0x000008, "Wrong alignment on FEnlightenSystemDusterInstance");
static_assert(sizeof(FEnlightenSystemDusterInstance) == 0x000030, "Wrong size on FEnlightenSystemDusterInstance");
static_assert(offsetof(FEnlightenSystemDusterInstance, PrimitiveId) == 0x000000, "Member 'FEnlightenSystemDusterInstance::PrimitiveId' has a wrong offset!");
static_assert(offsetof(FEnlightenSystemDusterInstance, InstanceId) == 0x000010, "Member 'FEnlightenSystemDusterInstance::InstanceId' has a wrong offset!");
static_assert(offsetof(FEnlightenSystemDusterInstance, Sections) == 0x000020, "Member 'FEnlightenSystemDusterInstance::Sections' has a wrong offset!");

// ScriptStruct EnlightenCore.EnlightenUVKeyKeepData
// 0x0028 (0x0028 - 0x0000)
struct FEnlightenUVKeyKeepData final
{
public:
	class FName                                   StaticMeshName;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnlightenQuality                             EnlaightenQuality;                                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnlightenUVKeyKeepData) == 0x000008, "Wrong alignment on FEnlightenUVKeyKeepData");
static_assert(sizeof(FEnlightenUVKeyKeepData) == 0x000028, "Wrong size on FEnlightenUVKeyKeepData");
static_assert(offsetof(FEnlightenUVKeyKeepData, StaticMeshName) == 0x000000, "Member 'FEnlightenUVKeyKeepData::StaticMeshName' has a wrong offset!");
static_assert(offsetof(FEnlightenUVKeyKeepData, Scale) == 0x000008, "Member 'FEnlightenUVKeyKeepData::Scale' has a wrong offset!");
static_assert(offsetof(FEnlightenUVKeyKeepData, EnlaightenQuality) == 0x000020, "Member 'FEnlightenUVKeyKeepData::EnlaightenQuality' has a wrong offset!");

}

