#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6Camera

#include "Basic.hpp"

#include "X6Camera_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTasks_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class X6Camera.X6BaseCameraComponent
// 0x0010 (0x0B50 - 0x0B40)
#pragma pack(push, 0x1)
class alignas(0x10) UX6BaseCameraComponent : public UCameraComponent
{
public:
	ECameraState                                  CameraMode;                                        // 0x0B40(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B41[0x7];                                      // 0x0B41(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActorSetViewTarget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6BaseCameraComponent">();
	}
	static class UX6BaseCameraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6BaseCameraComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UX6BaseCameraComponent) == 0x000010, "Wrong alignment on UX6BaseCameraComponent");
static_assert(sizeof(UX6BaseCameraComponent) == 0x000B50, "Wrong size on UX6BaseCameraComponent");
static_assert(offsetof(UX6BaseCameraComponent, CameraMode) == 0x000B40, "Member 'UX6BaseCameraComponent::CameraMode' has a wrong offset!");

// Class X6Camera.AdvancedCamera
// 0x21C0 (0x2D10 - 0x0B50)
class UAdvancedCamera : public UX6BaseCameraComponent
{
public:
	bool                                          bRewriteFromSetting;                               // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B49[0x7];                                      // 0x0B49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraBaseParamsData*                  CameraDataBase;                                    // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UX6CameraConfigManager*                 CameraConfigManager;                               // 0x0B58(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UX6CameraRuntimeConfigModifier*> CameraConfigModifierList;                          // 0x0B60(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_B70[0x604];                                    // 0x0B70(0x0604)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AX6PlayerCameraManagerBase> OwnerPlayerCameraManager;                       // 0x1174(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAcceptInput;                                      // 0x117C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117D[0x3];                                     // 0x117D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputXRotateSpeedFactor;                           // 0x1180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputYRotateSpeedFactor;                           // 0x1184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BirthRotation;                                     // 0x1188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               OriginRotation;                                    // 0x11A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxPitchAngle;                                     // 0x11B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPitchAngle;                                     // 0x11BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxYawAngle;                                       // 0x11C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinYawAngle;                                       // 0x11C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      DefaultBlendFunction;                              // 0x11C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C9[0x7];                                     // 0x11C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6CameraZoomProcessor                 ZoomProcessor;                                     // 0x11D0(0x01A8)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCameraInputOptimizationConfig> CameraInputOptimizationConfigs;                    // 0x1378(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                InputVectorCache;                                  // 0x1388(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputVectorSize;                                   // 0x13A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A4[0x4];                                     // 0x13A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               InputDeltaRotation;                                // 0x13A8(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHaveInputData;                                    // 0x13C0(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C1[0x7F];                                    // 0x13C1(0x007F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsLookAt;                                         // 0x1440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1441[0x3];                                     // 0x1441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetArmLength;                                   // 0x1444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableInterpLookAtLocation;                       // 0x1448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1449[0x7];                                     // 0x1449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InterpLocationSpeed;                               // 0x1450(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InterpLookAtLocationSpeed;                         // 0x1468(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpLookAtLocationMaxDistanceToTarget;           // 0x1480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1484[0x4];                                     // 0x1484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousActualArmLength;                           // 0x1488(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148C[0x4];                                     // 0x148C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxArmLength;                                      // 0x1490(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinArmLength;                                      // 0x1494(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetArmLengthModifier;                           // 0x1498(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149C[0x4];                                     // 0x149C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableInfluenceOffsetByPitch;                     // 0x14A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A1[0x7];                                     // 0x14A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           OffsetCurveByPitch;                                // 0x14A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketOffset;                                      // 0x14B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketOffsetModifier;                              // 0x14C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SocketRotationOffset;                              // 0x14E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F8[0xB0];                                    // 0x14F8(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetOffset;                                      // 0x15A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffsetModifier;                              // 0x15C0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x15D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVModifier;                                       // 0x15DC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FixedSpringArmByPitch;                             // 0x15E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15E1[0x7];                                     // 0x15E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FixedSpringArmByPitchCurveAsset;                   // 0x15E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoCollisionTest;                                  // 0x15F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15F1[0x3];                                     // 0x15F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProbeSize;                                         // 0x15F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraCollisionProcess>    CameraCollisionProcessClass;                       // 0x15F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraCollisionProcess*                CameraCollisionProcess;                            // 0x1600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoLocationLag;                                    // 0x1608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoRotationLag;                                    // 0x1609(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoTargetArmlengthLag;                             // 0x160A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_160B[0x5];                                     // 0x160B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraLagProcess>          CameraLagProcessClass;                             // 0x1610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraLagProcess*                      CameraLagProcess;                                  // 0x1618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NormalConfigKey;                                   // 0x1620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1628[0x18];                                    // 0x1628(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               PreviousDesiredSpringArmRot;                       // 0x1640(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1658[0xA0];                                    // 0x1658(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSpecifiedTargetView;                              // 0x16F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecifiedTargetViewBlending;                      // 0x16F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16FA[0x6];                                     // 0x16FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            BlendParams;                                       // 0x1700(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMinimalViewInfo                       SpecifiedTargetBeginBlendViewInfo;                 // 0x1720(0x0970)(NativeAccessSpecifierPublic)
	struct FMinimalViewInfo                       SpecifiedTargetViewInfo;                           // 0x2090(0x0970)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         SpecifiedTargetTime;                               // 0x2A00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideArmlength;                                // 0x2A04(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A05[0x3];                                     // 0x2A05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideArmlengthValue;                            // 0x2A08(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockRelativeRotationToLookAtTarget;               // 0x2A0C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0D[0x24];                                    // 0x2A0D(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBlueprintDevelopment;                             // 0x2A31(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A32[0x46];                                    // 0x2A32(0x0046)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DebugSumInputVector;                               // 0x2A78(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DebugSumFinalInputVector;                          // 0x2A90(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA8[0xA8];                                    // 0x2AA8(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnX6CameraRuntimeConfigChanged;                    // 0x2B50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FVector                                InterpLookAtLocationSpeedScale;                    // 0x2B60(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceToInterpTargetScale;                    // 0x2B78(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedInterpLookAtLocation;                         // 0x2B7C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B7D[0x3];                                     // 0x2B7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LookAtTarget;                                      // 0x2B80(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, int32>              CameraConfigPrioritySet;                           // 0x2B88(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, int32>              BaseCameraConfigPrioritySet;                       // 0x2BD8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C28[0x18];                                    // 0x2C28(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraOrientationSynchronizer> CameraOrientationSynchronizerClass;            // 0x2C40(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraOrientationSynchronizer> BlueprintSetDefaultSynchronizerClass;          // 0x2C48(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C50[0x28];                                    // 0x2C50(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraOrientationSynchronizer*         CameraOrientationSynchronizer;                     // 0x2C78(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C80[0x10];                                    // 0x2C80(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableBasedMovementFix;                           // 0x2C90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C91[0xF];                                     // 0x2C91(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBasedMovementFixCameraHelper          BasedMovementHelper;                               // 0x2CA0(0x0070)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	class UX6CameraRuntimeConfigModifier* AddCameraConfigModifierByClass(const TSubclassOf<class UX6CameraRuntimeConfigModifier> ModifierClass, const struct FX6CameraConfigBlendParams& CameraConfigBlendParams);
	void BlendBackToFollow(const struct FViewTargetTransitionParams& CameraBlendParams);
	void BlendConfigFromCurrentCameraView(const bool bOverrideTransitionParams, const struct FViewTargetTransitionParams& TransitionParams);
	void BlendToCameraView(const struct FMinimalViewInfo& NewCameraView, const struct FViewTargetTransitionParams& CameraBlendParams);
	void CreateCameraCollisionProcessInstance(TSubclassOf<class UCameraCollisionProcess> NewCameraCollisionProcessClass);
	void CreateCameraLagInstance(TSubclassOf<class UCameraLagProcess> NewCameraLagProcessClass);
	void DoFixCameraByBasedMovement(const struct FBasedMovementFixCameraHelper& Helper);
	float ExitZoom(const float BlendOutTime);
	bool FindMostOpenSpaceRotation(const struct FTransform& RelativeTrans, struct FRotator* OutDeltaRot);
	class UX6CameraRuntimeConfigModifier* FindOrAddCameraConfigModifier(class UX6CameraRuntimeConfigModifier* NewModifier, const struct FX6CameraConfigBlendParams& CameraConfigBlendParams);
	void FixCameraByBasedMovement();
	float GetArmlengthLagSpeed(float ArmlengthLagSpeed);
	struct FRotator GetCameraRotation();
	float GetCameraRotationLagSpeed();
	void OnLookAtTargetBecomeViewTargetEvent();
	void OnLookAtTargetEndViewTargetEvent();
	void OnOwnerBecomeViewTargetEvent();
	void OnOwnerEndViewTargetEvent();
	void OnOwnerFullyBlendInViewTargetEvent();
	void OnOwnerFullyBlendOutViewTargetEvent();
	void OnRotateInput(const struct FVector& InputVector, float ElapsedTime);
	void OnZoomInput(const float InputValue);
	int32 PushBaseCameraConfig(class FName ConfigKey);
	int32 PushBaseParams(const struct FCameraBaseParamsDefine& BaseParams, const struct FX6CameraConfigBlendParams& CameraConfigBlendParams, const struct FX6CameraConfigPriority& Priority);
	int32 PushCameraConfig(class UCameraBaseParamsData* TargetCameraDataBase, class FName TargetConfigKey, bool bOverrideTransitionParams, const struct FViewTargetTransitionParams& TransitionParams);
	int32 PushCameraConfigOfCameraDataBase(const class FName& TargetConfigKey, const struct FX6CameraConfigBlendParams& CameraConfigBlendParams);
	void RecalculateCameraTransformIgnoreLag();
	void ReceiveUpdateLookAtTarget(const class AActor* OldLookAtTarget, const class AActor* NewLookAtTarget);
	void RemoveBaseCameraConfigByIndex(int32 Index_0, bool bOverrideTransitionParams, const struct FViewTargetTransitionParams& TransitionParams);
	void RemoveCameraConfigByIndex(int32 Index_0, bool bOverrideTransitionParams, const struct FViewTargetTransitionParams& TransitionParams);
	void RemoveCameraConfigModifier(class UX6CameraRuntimeConfigModifier* Modifier, const struct FX6CameraConfigBlendParams& CameraConfigBlendParams);
	void ResetData();
	void ResetToDefaultRelativeRotation(bool bApplyImmediate, const bool bForceUpdateCamera);
	void SetAcceptInput(bool bNewAcceptInput);
	void SetAmbientConfigKey(class FName ConfigKey);
	void SetArmlengthLagSpeed(float ArmlengthLagSpeed);
	void SetCameraOrientationSynchronizer(TSubclassOf<class UCameraOrientationSynchronizer> NewSynchronizerClass);
	void SetCameraRotationLagSpeed(float CameraRotationLagSpeed);
	void SetCameraWorldRotation(const struct FRotator& NewDesireRotation, bool ApplyImmediate);
	void SetDesiredFOV(float NewDesireFov, bool ApplyImmediate);
	void SetDesireLocation(const struct FVector& NewDesireLocation, bool ApplyImmediate);
	void SetDesireRotation(const struct FRotator& NewDesireRotation, bool ApplyImmediate, const bool bForceUpdateCamera);
	void SetDissolveEnable(bool bEnable);
	void SetEnableZoom(bool bEnable);
	void SetInterpLookAtLocationSpeedScale(const struct FVector& InInterpLookAtLocationSpeedScale);
	void SetLockRelativeRotationToLookAtTarget(bool bInLock);
	void SetLookAtRotation(const struct FRotator& NewDesireRotation, bool ApplyImmediate);
	void SetMaxDistanceToInterpTargetScale(float InMaxDistanceToInterpTargetScale);
	void SetNeedInterpLookAtLocation(bool bInNeedInterpLookAtLocation);
	void SetOverrideCameraRotationLagSpeed(bool bOverride, float CameraRotationLagSpeed);
	void SetPassiveDesiredRotationBySpeed(const struct FRotator& NewDesireRotation, float AngularSpeed, EViewTargetBlendFunction BlendFunction, float BlendExp);
	void SetPassiveDesiredRotationByTime(const struct FRotator& NewDesireRotation, float TotalTime, EViewTargetBlendFunction BlendFunction, float BlendExp);
	void SetUsingGamepad(bool bInUsingGamepad);
	void SetZoomedTargetOffsetZAdjustment(const float NewZoomedTargetOffsetZAdjustment);
	void StartAutoZoomOutCountDown();
	struct FVector TransformVectorByRotation(const struct FRotator& InRotation, const struct FVector& TransformVector);
	void TriggerAutoZoomOut();
	bool TryToUpdateBasedMovementHelper();
	bool UpdateBasedMovementHelper(const class UCharacterMovementComponent* MovementComponent, const struct FTransform& LastBaseTransform, const struct FTransform& CurrentBaseTransform, const struct FTransform& LastActorTransform, const struct FTransform& CurrentActorTransform);
	void UpdateCameraConfig(const float DeltaTime);
	void UpdateDesiredArmLocation(bool bDoTrace, float DeltaTime, bool bRotationLag, bool bLocationLag, bool bTargetArmlengthLag);
	void UpdateDesiredArmLocationFunction(bool bDoTrace, float DeltaTime, bool bRotationLag, bool bLocationLag, bool bTargetArmlengthLag);
	void UpdatePassiveRotate(struct FRotator* DesiredRot, float DeltaTime);

	void CollectInputDebugOutput(TArray<class FString>* InOutDebugInfoLines) const;
	void CollectLookAtTargetDebugOutput(TArray<class FString>* InOutDebugInfoLines) const;
	void CollectSpringArmDebugOutput(TArray<class FString>* InOutDebugInfoLines) const;
	struct FVector FixLocationByBasedMovement(const struct FBasedMovementFixCameraHelper& Helper, const struct FVector& InLocation) const;
	struct FRotator FixRotationByBasedMovement(const struct FBasedMovementFixCameraHelper& Helper, const struct FRotator& InRotation) const;
	float GetCameraArmlength() const;
	class FName GetCameraConfigkey() const;
	class UCameraOrientationSynchronizer* GetCameraOrientationSynchronizer() const;
	const struct FX6CameraBlendableSettings GetCameraSettings() const;
	struct FRotator GetCurrentSocketRotationOffset() const;
	float GetDesiredFOV() const;
	struct FVector GetDesiredLocation() const;
	struct FRotator GetDesiredRotation() const;
	class AActor* GetLookAtTarget() const;
	struct FVector GetPreviousArmOriginLocation() const;
	bool IsZoomedIn() const;
	void SetEnableRotationPitchSync(const bool bEnable) const;
	void SetEnableRotationYawSync(const bool bEnable) const;
	void SetOrientationSyncCanResetPitch(const bool bInEnabled) const;
	void StartResetRotation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdvancedCamera">();
	}
	static class UAdvancedCamera* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdvancedCamera>();
	}
};
static_assert(alignof(UAdvancedCamera) == 0x000010, "Wrong alignment on UAdvancedCamera");
static_assert(sizeof(UAdvancedCamera) == 0x002D10, "Wrong size on UAdvancedCamera");
static_assert(offsetof(UAdvancedCamera, bRewriteFromSetting) == 0x000B48, "Member 'UAdvancedCamera::bRewriteFromSetting' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, CameraDataBase) == 0x000B50, "Member 'UAdvancedCamera::CameraDataBase' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, CameraConfigManager) == 0x000B58, "Member 'UAdvancedCamera::CameraConfigManager' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, CameraConfigModifierList) == 0x000B60, "Member 'UAdvancedCamera::CameraConfigModifierList' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, OwnerPlayerCameraManager) == 0x001174, "Member 'UAdvancedCamera::OwnerPlayerCameraManager' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bAcceptInput) == 0x00117C, "Member 'UAdvancedCamera::bAcceptInput' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, InputXRotateSpeedFactor) == 0x001180, "Member 'UAdvancedCamera::InputXRotateSpeedFactor' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, InputYRotateSpeedFactor) == 0x001184, "Member 'UAdvancedCamera::InputYRotateSpeedFactor' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, BirthRotation) == 0x001188, "Member 'UAdvancedCamera::BirthRotation' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, OriginRotation) == 0x0011A0, "Member 'UAdvancedCamera::OriginRotation' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, MaxPitchAngle) == 0x0011B8, "Member 'UAdvancedCamera::MaxPitchAngle' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, MinPitchAngle) == 0x0011BC, "Member 'UAdvancedCamera::MinPitchAngle' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, MaxYawAngle) == 0x0011C0, "Member 'UAdvancedCamera::MaxYawAngle' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, MinYawAngle) == 0x0011C4, "Member 'UAdvancedCamera::MinYawAngle' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, DefaultBlendFunction) == 0x0011C8, "Member 'UAdvancedCamera::DefaultBlendFunction' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, ZoomProcessor) == 0x0011D0, "Member 'UAdvancedCamera::ZoomProcessor' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, CameraInputOptimizationConfigs) == 0x001378, "Member 'UAdvancedCamera::CameraInputOptimizationConfigs' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, InputVectorCache) == 0x001388, "Member 'UAdvancedCamera::InputVectorCache' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, InputVectorSize) == 0x0013A0, "Member 'UAdvancedCamera::InputVectorSize' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, InputDeltaRotation) == 0x0013A8, "Member 'UAdvancedCamera::InputDeltaRotation' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bHaveInputData) == 0x0013C0, "Member 'UAdvancedCamera::bHaveInputData' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bIsLookAt) == 0x001440, "Member 'UAdvancedCamera::bIsLookAt' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, TargetArmLength) == 0x001444, "Member 'UAdvancedCamera::TargetArmLength' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bEnableInterpLookAtLocation) == 0x001448, "Member 'UAdvancedCamera::bEnableInterpLookAtLocation' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, InterpLocationSpeed) == 0x001450, "Member 'UAdvancedCamera::InterpLocationSpeed' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, InterpLookAtLocationSpeed) == 0x001468, "Member 'UAdvancedCamera::InterpLookAtLocationSpeed' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, InterpLookAtLocationMaxDistanceToTarget) == 0x001480, "Member 'UAdvancedCamera::InterpLookAtLocationMaxDistanceToTarget' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, PreviousActualArmLength) == 0x001488, "Member 'UAdvancedCamera::PreviousActualArmLength' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, MaxArmLength) == 0x001490, "Member 'UAdvancedCamera::MaxArmLength' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, MinArmLength) == 0x001494, "Member 'UAdvancedCamera::MinArmLength' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, TargetArmLengthModifier) == 0x001498, "Member 'UAdvancedCamera::TargetArmLengthModifier' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bEnableInfluenceOffsetByPitch) == 0x0014A0, "Member 'UAdvancedCamera::bEnableInfluenceOffsetByPitch' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, OffsetCurveByPitch) == 0x0014A8, "Member 'UAdvancedCamera::OffsetCurveByPitch' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, SocketOffset) == 0x0014B0, "Member 'UAdvancedCamera::SocketOffset' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, SocketOffsetModifier) == 0x0014C8, "Member 'UAdvancedCamera::SocketOffsetModifier' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, SocketRotationOffset) == 0x0014E0, "Member 'UAdvancedCamera::SocketRotationOffset' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, TargetOffset) == 0x0015A8, "Member 'UAdvancedCamera::TargetOffset' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, TargetOffsetModifier) == 0x0015C0, "Member 'UAdvancedCamera::TargetOffsetModifier' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, FOV) == 0x0015D8, "Member 'UAdvancedCamera::FOV' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, FOVModifier) == 0x0015DC, "Member 'UAdvancedCamera::FOVModifier' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, FixedSpringArmByPitch) == 0x0015E0, "Member 'UAdvancedCamera::FixedSpringArmByPitch' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, FixedSpringArmByPitchCurveAsset) == 0x0015E8, "Member 'UAdvancedCamera::FixedSpringArmByPitchCurveAsset' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bDoCollisionTest) == 0x0015F0, "Member 'UAdvancedCamera::bDoCollisionTest' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, ProbeSize) == 0x0015F4, "Member 'UAdvancedCamera::ProbeSize' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, CameraCollisionProcessClass) == 0x0015F8, "Member 'UAdvancedCamera::CameraCollisionProcessClass' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, CameraCollisionProcess) == 0x001600, "Member 'UAdvancedCamera::CameraCollisionProcess' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bDoLocationLag) == 0x001608, "Member 'UAdvancedCamera::bDoLocationLag' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bDoRotationLag) == 0x001609, "Member 'UAdvancedCamera::bDoRotationLag' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bDoTargetArmlengthLag) == 0x00160A, "Member 'UAdvancedCamera::bDoTargetArmlengthLag' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, CameraLagProcessClass) == 0x001610, "Member 'UAdvancedCamera::CameraLagProcessClass' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, CameraLagProcess) == 0x001618, "Member 'UAdvancedCamera::CameraLagProcess' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, NormalConfigKey) == 0x001620, "Member 'UAdvancedCamera::NormalConfigKey' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, PreviousDesiredSpringArmRot) == 0x001640, "Member 'UAdvancedCamera::PreviousDesiredSpringArmRot' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bSpecifiedTargetView) == 0x0016F8, "Member 'UAdvancedCamera::bSpecifiedTargetView' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bSpecifiedTargetViewBlending) == 0x0016F9, "Member 'UAdvancedCamera::bSpecifiedTargetViewBlending' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, BlendParams) == 0x001700, "Member 'UAdvancedCamera::BlendParams' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, SpecifiedTargetBeginBlendViewInfo) == 0x001720, "Member 'UAdvancedCamera::SpecifiedTargetBeginBlendViewInfo' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, SpecifiedTargetViewInfo) == 0x002090, "Member 'UAdvancedCamera::SpecifiedTargetViewInfo' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, SpecifiedTargetTime) == 0x002A00, "Member 'UAdvancedCamera::SpecifiedTargetTime' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bOverrideArmlength) == 0x002A04, "Member 'UAdvancedCamera::bOverrideArmlength' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, OverrideArmlengthValue) == 0x002A08, "Member 'UAdvancedCamera::OverrideArmlengthValue' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bLockRelativeRotationToLookAtTarget) == 0x002A0C, "Member 'UAdvancedCamera::bLockRelativeRotationToLookAtTarget' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bBlueprintDevelopment) == 0x002A31, "Member 'UAdvancedCamera::bBlueprintDevelopment' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, DebugSumInputVector) == 0x002A78, "Member 'UAdvancedCamera::DebugSumInputVector' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, DebugSumFinalInputVector) == 0x002A90, "Member 'UAdvancedCamera::DebugSumFinalInputVector' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, OnX6CameraRuntimeConfigChanged) == 0x002B50, "Member 'UAdvancedCamera::OnX6CameraRuntimeConfigChanged' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, InterpLookAtLocationSpeedScale) == 0x002B60, "Member 'UAdvancedCamera::InterpLookAtLocationSpeedScale' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, MaxDistanceToInterpTargetScale) == 0x002B78, "Member 'UAdvancedCamera::MaxDistanceToInterpTargetScale' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bNeedInterpLookAtLocation) == 0x002B7C, "Member 'UAdvancedCamera::bNeedInterpLookAtLocation' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, LookAtTarget) == 0x002B80, "Member 'UAdvancedCamera::LookAtTarget' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, CameraConfigPrioritySet) == 0x002B88, "Member 'UAdvancedCamera::CameraConfigPrioritySet' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, BaseCameraConfigPrioritySet) == 0x002BD8, "Member 'UAdvancedCamera::BaseCameraConfigPrioritySet' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, CameraOrientationSynchronizerClass) == 0x002C40, "Member 'UAdvancedCamera::CameraOrientationSynchronizerClass' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, BlueprintSetDefaultSynchronizerClass) == 0x002C48, "Member 'UAdvancedCamera::BlueprintSetDefaultSynchronizerClass' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, CameraOrientationSynchronizer) == 0x002C78, "Member 'UAdvancedCamera::CameraOrientationSynchronizer' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, bEnableBasedMovementFix) == 0x002C90, "Member 'UAdvancedCamera::bEnableBasedMovementFix' has a wrong offset!");
static_assert(offsetof(UAdvancedCamera, BasedMovementHelper) == 0x002CA0, "Member 'UAdvancedCamera::BasedMovementHelper' has a wrong offset!");

// Class X6Camera.AdvancedCameraBPFLibrary
// 0x0000 (0x0028 - 0x0028)
class UAdvancedCameraBPFLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void GetOverriddenCameraBaseParams(const struct FCameraBaseParamsDefine& Origin, const struct FCameraBaseParamsDefine& Override, struct FCameraBaseParamsDefine* OutOverridden);
	static void GetOverriddenCameraInputConfig(const struct FX6CameraInputConfig& Origin, const struct FX6CameraInputConfig& Override, struct FX6CameraInputConfig* OutOverridden);
	static struct FVector3f VectorSpringInterp(const struct FVector3f& Current, const struct FVector3f& Target, struct FVectorSpringStateInfo& SpringState, float Stiffness, float CriticalDamping, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, const struct FVector3f& MinValue, const struct FVector3f& MaxValue, bool bInitializeFromTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdvancedCameraBPFLibrary">();
	}
	static class UAdvancedCameraBPFLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdvancedCameraBPFLibrary>();
	}
};
static_assert(alignof(UAdvancedCameraBPFLibrary) == 0x000008, "Wrong alignment on UAdvancedCameraBPFLibrary");
static_assert(sizeof(UAdvancedCameraBPFLibrary) == 0x000028, "Wrong size on UAdvancedCameraBPFLibrary");

// Class X6Camera.X6PlayerCameraManagerBase
// 0x46C0 (0x7280 - 0x2BC0)
class AX6PlayerCameraManagerBase : public APlayerCameraManager
{
public:
	bool                                          bBlendignNewCameraView;                            // 0x2BB8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB9[0x1F];                                    // 0x2BB9(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	ECameraBlendPathType                          CameraBlendType;                                   // 0x2BD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD9[0x7];                                     // 0x2BD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimalViewInfo                       CacheCameraView;                                   // 0x2BE0(0x0970)(Transient, NativeAccessSpecifierPublic)
	struct FMinimalViewInfo                       BeginBlendCameraView;                              // 0x3550(0x0970)(Transient, NativeAccessSpecifierPublic)
	struct FTransCameraViewData                   NewCameraViewData;                                 // 0x3EC0(0x0990)(Transient, NativeAccessSpecifierPublic)
	struct FMinimalViewInfo                       CachePOV;                                          // 0x4850(0x0970)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTViewTarget                           LastBlendCompleteTarget;                           // 0x51C0(0x0990)(Transient, NativeAccessSpecifierPublic)
	struct FViewTargetCurveTransitionParams       CurveTransitionParams;                             // 0x5B50(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBlendBackToViewTargetFromCameraView;              // 0x5B70(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B71[0x7];                                     // 0x5B71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraSpringArmPathBlend              SpringArmPathBlend;                                // 0x5B78(0x0070)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSplineCurves                          SplineCurves;                                      // 0x5BE8(0x0070)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        BezierPoints;                                      // 0x5C58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C68[0x28];                                    // 0x5C68(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULegacyCameraShake>         CustomizeCameraShake;                              // 0x5C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C98[0x18];                                    // 0x5C98(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* NewViewTarget)> OnNewTargetBlendEndEvent;            // 0x5CB0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* NewViewTarget)> OnNewTargetBlendBeginEvent;          // 0x5CC0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* OldViewTarget, class AActor* NewViewTarget)> OnTargetBlendCompleteEvent; // 0x5CD0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool YawValue, bool PitchValue)> OnCameraPitchYawSyncSettingValueChanged; // 0x5CE0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FCameraStateViewTagetData>      CameraStates;                                      // 0x5CF0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName VFXType, float Value)> OnCameraVFXValueChangedEvent;   // 0x5D00(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D10[0x8];                                     // 0x5D10(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UCameraModifiersDetailData*, struct FCameraModifierList> ModifierMap;                 // 0x5D18(0x0050)(NativeAccessSpecifierPublic)
	TArray<class UCameraTaskExecuter*>            TaskExecuters;                                     // 0x5D68(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D78[0x2A];                                    // 0x5D78(0x002A)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAllowInputDuringBlend;                            // 0x5DA2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5DA3[0x5];                                     // 0x5DA3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6CameraZoomCommonSettings            ZoomCommonSettings;                                // 0x5DA8(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bZoomLimitReached)> OnCameraZoomInLimitReached;               // 0x5E28(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E38[0x8];                                     // 0x5E38(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TransitionKey;                                     // 0x5E40(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastTransitionKey;                                 // 0x5E50(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 TargetCameraStateObject;                           // 0x5E60(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CameraStateTransition;                             // 0x5E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraState                                  CameraState;                                       // 0x5E70(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               BlendingCollisionTraceType;                        // 0x5E71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E72[0x6];                                     // 0x5E72(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EX6CameraInputDeviceType, struct FVector2D> InputAxisScaleMap;                              // 0x5E78(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UDataTable*                             CameraConfigPriorityDataTable;                     // 0x5EC8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, EX6CameraPlatformType>    X6CameraPlatformKeywordTypeMap;                    // 0x5ED0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bCameraIsBlending;                                 // 0x5F20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F21[0x3F];                                    // 0x5F21(0x003F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraCacheEntry                      CameraCachePublic;                                 // 0x5F60(0x0980)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_68E0[0x9A0];                                   // 0x68E0(0x09A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCameraModifierToCustomList(class UCameraModifiersDetailData* CameraModifierDataAsset);
	void BezierCurvePathBlend(const struct FVector& BeginPoint, const struct FVector& EndPoint, const struct FVector& Direction, float ControlPointVerticalLineDistance, float ExtremePointAlphy, int32 PointFrequency, bool DrawDebug);
	void BlendBackToFollow(const struct FViewTargetTransitionParams& TransitionParams);
	void BlendBackToViewTarget(const struct FViewTargetTransitionParams& TransitionParams);
	void BlendToNewViewInfo(const struct FMinimalViewInfo& NewInfo, const struct FViewTargetTransitionParams& TransitionParams);
	float ExitCameraZoom(const float BlendOutTime);
	void GenCustomCurve_Parabola(const struct FVector& StartPoint, const struct FVector& EndPoint, const struct FVector& ControllPoint, bool bTracePath, float ProjectileRadius, float SimFrequency, float MaxSimTime, TArray<struct FVector>* OutPathPositions, TArray<struct FVector>* OutPathVelocitys);
	void GenSecondOrderBezierCurve(const struct FVector& BeginPoint, const struct FVector& EndPoint, const struct FVector& InfluencePoint, int32 PointFrequency, bool DrawDebug);
	bool GenThirdOrderBezierCurve(const struct FVector& BeginPoint, const struct FVector& EndPoint, const struct FVector& InfluencePointA, const struct FVector& InfluencePointB, int32 PointFrequency, bool DrawDebug);
	void OnCameraRotateInput(const struct FVector& InputVector, const float ElapsedTime, const EX6CameraInputDeviceType InputDeviceType);
	void OnCameraZoomInput(const float InputValue, const EX6CameraInputDeviceType InputDeviceType);
	void PopCameraState();
	void PostChangeCameraStates();
	void PushCameraState(struct FCameraStateViewTagetData* InCameraState);
	void RemoveCameraModifierFromCustomList(class UCameraModifiersDetailData* CameraModifierDataAsset);
	void RemoveCameraStateByIndex(const int32 IndexToRemove, const bool bAllowShrinking);
	void SetCameraDrawDebug(bool bEnable, float DrawDebugTime);
	void SetCameraViewPointWithBlend(const struct FMinimalViewInfo& ViewInfo, const struct FViewTargetTransitionParams& TransitionParams);
	void SetEnableRotateInput(const bool bEnable);
	void SetEnableZoomInput(const bool bEnable);
	void SetPitchSyncSettingValue(bool PitchValue);
	void SetViewTargetBezierCurve(class AActor* Target, const struct FViewTargetTransitionParams& TransitionParams, const struct FVector& Direction, float ControlPointVerticalLineDistance, float ExtremePointAlphy, int32 PointFrequency);
	bool SetViewTargetWithParabolaPath(class AActor* Target, const struct FViewTargetCurveTransitionParams& TransitionParams, float FrontViewAngleScope, float MinHeight, float MaxHeight, float SimFrequency, bool HeightTakePrecedence, bool bErgodicFromMiddle);
	void SetX6CameraInputDeviceType(const EX6CameraInputDeviceType InputDeviceType);
	void SetYawSyncSettingValue(bool YawValue);
	void SortCameraStatesByPriority(const bool bDescendOrder);
	class UCameraShakeBase* StartCustomizeCameraShake(float Duration, float BlendInTime, float BlendOutTime, const struct FROscillator& ROscillator, const struct FVOscillator& VOscillator, const struct FFOscillator& Oscillator);
	bool SwitchCameraState(const class FString& ConfigKey, class UObject* TargetObject);
	bool SwitchToLastCameraState(class AActor* NewTarget);

	struct FTViewTarget GetCameraPendingViewTarget() const;
	struct FTViewTarget GetCameraViewTarget() const;
	bool GetEnableRotateInput() const;
	bool GetEnableZoomInput() const;
	struct FVector GetLastCameraLocation() const;
	struct FRotator GetLastCameraRotation() const;
	struct FVector GetPlayerInputForwardVector() const;
	struct FVector GetPlayerInputRightVector() const;
	EX6CameraInputDeviceType GetX6CameraInputDeviceType() const;
	EX6CameraPlatformType GetX6CameraPlatformType() const;
	bool IsCameraZoomedIn() const;
	const struct FCameraStateViewTagetData K2_GetCameraStateData(int32 Index_0) const;
	int32 K2_GetCameraStateNum() const;
	ECameraState K2_TopCameraState() const;
	const struct FCameraStateViewTagetData K2_TopCameraStateData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6PlayerCameraManagerBase">();
	}
	static class AX6PlayerCameraManagerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AX6PlayerCameraManagerBase>();
	}
};
static_assert(alignof(AX6PlayerCameraManagerBase) == 0x000010, "Wrong alignment on AX6PlayerCameraManagerBase");
static_assert(sizeof(AX6PlayerCameraManagerBase) == 0x007280, "Wrong size on AX6PlayerCameraManagerBase");
static_assert(offsetof(AX6PlayerCameraManagerBase, bBlendignNewCameraView) == 0x002BB8, "Member 'AX6PlayerCameraManagerBase::bBlendignNewCameraView' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, CameraBlendType) == 0x002BD8, "Member 'AX6PlayerCameraManagerBase::CameraBlendType' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, CacheCameraView) == 0x002BE0, "Member 'AX6PlayerCameraManagerBase::CacheCameraView' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, BeginBlendCameraView) == 0x003550, "Member 'AX6PlayerCameraManagerBase::BeginBlendCameraView' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, NewCameraViewData) == 0x003EC0, "Member 'AX6PlayerCameraManagerBase::NewCameraViewData' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, CachePOV) == 0x004850, "Member 'AX6PlayerCameraManagerBase::CachePOV' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, LastBlendCompleteTarget) == 0x0051C0, "Member 'AX6PlayerCameraManagerBase::LastBlendCompleteTarget' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, CurveTransitionParams) == 0x005B50, "Member 'AX6PlayerCameraManagerBase::CurveTransitionParams' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, bBlendBackToViewTargetFromCameraView) == 0x005B70, "Member 'AX6PlayerCameraManagerBase::bBlendBackToViewTargetFromCameraView' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, SpringArmPathBlend) == 0x005B78, "Member 'AX6PlayerCameraManagerBase::SpringArmPathBlend' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, SplineCurves) == 0x005BE8, "Member 'AX6PlayerCameraManagerBase::SplineCurves' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, BezierPoints) == 0x005C58, "Member 'AX6PlayerCameraManagerBase::BezierPoints' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, CustomizeCameraShake) == 0x005C90, "Member 'AX6PlayerCameraManagerBase::CustomizeCameraShake' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, OnNewTargetBlendEndEvent) == 0x005CB0, "Member 'AX6PlayerCameraManagerBase::OnNewTargetBlendEndEvent' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, OnNewTargetBlendBeginEvent) == 0x005CC0, "Member 'AX6PlayerCameraManagerBase::OnNewTargetBlendBeginEvent' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, OnTargetBlendCompleteEvent) == 0x005CD0, "Member 'AX6PlayerCameraManagerBase::OnTargetBlendCompleteEvent' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, OnCameraPitchYawSyncSettingValueChanged) == 0x005CE0, "Member 'AX6PlayerCameraManagerBase::OnCameraPitchYawSyncSettingValueChanged' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, CameraStates) == 0x005CF0, "Member 'AX6PlayerCameraManagerBase::CameraStates' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, OnCameraVFXValueChangedEvent) == 0x005D00, "Member 'AX6PlayerCameraManagerBase::OnCameraVFXValueChangedEvent' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, ModifierMap) == 0x005D18, "Member 'AX6PlayerCameraManagerBase::ModifierMap' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, TaskExecuters) == 0x005D68, "Member 'AX6PlayerCameraManagerBase::TaskExecuters' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, bAllowInputDuringBlend) == 0x005DA2, "Member 'AX6PlayerCameraManagerBase::bAllowInputDuringBlend' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, ZoomCommonSettings) == 0x005DA8, "Member 'AX6PlayerCameraManagerBase::ZoomCommonSettings' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, OnCameraZoomInLimitReached) == 0x005E28, "Member 'AX6PlayerCameraManagerBase::OnCameraZoomInLimitReached' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, TransitionKey) == 0x005E40, "Member 'AX6PlayerCameraManagerBase::TransitionKey' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, LastTransitionKey) == 0x005E50, "Member 'AX6PlayerCameraManagerBase::LastTransitionKey' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, TargetCameraStateObject) == 0x005E60, "Member 'AX6PlayerCameraManagerBase::TargetCameraStateObject' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, CameraStateTransition) == 0x005E68, "Member 'AX6PlayerCameraManagerBase::CameraStateTransition' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, CameraState) == 0x005E70, "Member 'AX6PlayerCameraManagerBase::CameraState' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, BlendingCollisionTraceType) == 0x005E71, "Member 'AX6PlayerCameraManagerBase::BlendingCollisionTraceType' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, InputAxisScaleMap) == 0x005E78, "Member 'AX6PlayerCameraManagerBase::InputAxisScaleMap' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, CameraConfigPriorityDataTable) == 0x005EC8, "Member 'AX6PlayerCameraManagerBase::CameraConfigPriorityDataTable' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, X6CameraPlatformKeywordTypeMap) == 0x005ED0, "Member 'AX6PlayerCameraManagerBase::X6CameraPlatformKeywordTypeMap' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, bCameraIsBlending) == 0x005F20, "Member 'AX6PlayerCameraManagerBase::bCameraIsBlending' has a wrong offset!");
static_assert(offsetof(AX6PlayerCameraManagerBase, CameraCachePublic) == 0x005F60, "Member 'AX6PlayerCameraManagerBase::CameraCachePublic' has a wrong offset!");

// Class X6Camera.CameraBaseParamsData
// 0x0058 (0x0088 - 0x0030)
class UCameraBaseParamsData final : public UDataAsset
{
public:
	TMap<class FName, struct FX6CameraConfig>     CameraConfigMap;                                   // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCanUseAmbientConfigKey;                           // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCacheCameraSettingsWhenLockOutgoingBlend;         // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraBaseParamsData">();
	}
	static class UCameraBaseParamsData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraBaseParamsData>();
	}
};
static_assert(alignof(UCameraBaseParamsData) == 0x000008, "Wrong alignment on UCameraBaseParamsData");
static_assert(sizeof(UCameraBaseParamsData) == 0x000088, "Wrong size on UCameraBaseParamsData");
static_assert(offsetof(UCameraBaseParamsData, CameraConfigMap) == 0x000030, "Member 'UCameraBaseParamsData::CameraConfigMap' has a wrong offset!");
static_assert(offsetof(UCameraBaseParamsData, bCanUseAmbientConfigKey) == 0x000080, "Member 'UCameraBaseParamsData::bCanUseAmbientConfigKey' has a wrong offset!");
static_assert(offsetof(UCameraBaseParamsData, bCacheCameraSettingsWhenLockOutgoingBlend) == 0x000081, "Member 'UCameraBaseParamsData::bCacheCameraSettingsWhenLockOutgoingBlend' has a wrong offset!");

// Class X6Camera.CameraCollisionProcess
// 0x0148 (0x01F0 - 0x00A8)
class UCameraCollisionProcess final : public UActorComponent
{
public:
	class UCameraCollisionConfig*                 CollisionConfig;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               CameraViewTraceType;                               // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               CameraOverlapTraceType;                            // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x3E];                                      // 0x00B2(0x003E)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class APlayerCameraManager>    PlayerCameraManager;                               // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x28];                                      // 0x00F8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxMiddleTraceTimes;                               // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x1C];                                     // 0x0124(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         DebugQueryNames;                                   // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           DebugQueryLodGroupNames;                           // 0x0150(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnableDebugCollision;                             // 0x0160(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DrawArmOriginColor;                                // 0x0164(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DrawDesiredCameraLocationColor;                    // 0x0174(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DrawCameraViewTraceColor;                          // 0x0184(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DrawCameraViewHitColor;                            // 0x0194(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DrawCameraCollisionTraceColor;                     // 0x01A4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DrawCameraCollisionHitColor;                       // 0x01B4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DrawHeadColor;                                     // 0x01C4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DrawFixedArmOriginColor;                           // 0x01D4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0xC];                                      // 0x01E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitActorsToIgnore();
	bool K2_GetValidCameraLocation(const struct FVector& LookAtTargetLoc, const struct FVector& ArmOriginLoc, const struct FVector& DesiredLoc, struct FVector* OutFixedArmOriginLoc, struct FVector* OutValidCameraLoc);
	void K2_ProcessSpringArmCollision(const float DeltaTime, class AActor* LookAtTarget, class APlayerCameraManager* InPlayerCameraManager, float PreviousExpectArmLength, float PreviousActualArmLength, float ProbeSize, const struct FVector& DesireLoc, const struct FVector& ArmOriginLoc, struct FVector* OutFixedArmOriginLoc, struct FVector* OutFixedResultLoc);

	bool GetEnableCameraCollisionDebug() const;
	bool GetHeadInFixArmOrigin(const class AActor* InLookAtTarget, struct FVector* OutHeadLocation, float* OutHeadSize) const;
	bool GetHeadOfActor(const class AActor* InActor, struct FVector* OutHeadLocation, float* OutHeadSize) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraCollisionProcess">();
	}
	static class UCameraCollisionProcess* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraCollisionProcess>();
	}
};
static_assert(alignof(UCameraCollisionProcess) == 0x000008, "Wrong alignment on UCameraCollisionProcess");
static_assert(sizeof(UCameraCollisionProcess) == 0x0001F0, "Wrong size on UCameraCollisionProcess");
static_assert(offsetof(UCameraCollisionProcess, CollisionConfig) == 0x0000A8, "Member 'UCameraCollisionProcess::CollisionConfig' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, CameraViewTraceType) == 0x0000B0, "Member 'UCameraCollisionProcess::CameraViewTraceType' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, CameraOverlapTraceType) == 0x0000B1, "Member 'UCameraCollisionProcess::CameraOverlapTraceType' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, PlayerCameraManager) == 0x0000F0, "Member 'UCameraCollisionProcess::PlayerCameraManager' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, MaxMiddleTraceTimes) == 0x000120, "Member 'UCameraCollisionProcess::MaxMiddleTraceTimes' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, DebugQueryNames) == 0x000140, "Member 'UCameraCollisionProcess::DebugQueryNames' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, DebugQueryLodGroupNames) == 0x000150, "Member 'UCameraCollisionProcess::DebugQueryLodGroupNames' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, bEnableDebugCollision) == 0x000160, "Member 'UCameraCollisionProcess::bEnableDebugCollision' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, DrawArmOriginColor) == 0x000164, "Member 'UCameraCollisionProcess::DrawArmOriginColor' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, DrawDesiredCameraLocationColor) == 0x000174, "Member 'UCameraCollisionProcess::DrawDesiredCameraLocationColor' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, DrawCameraViewTraceColor) == 0x000184, "Member 'UCameraCollisionProcess::DrawCameraViewTraceColor' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, DrawCameraViewHitColor) == 0x000194, "Member 'UCameraCollisionProcess::DrawCameraViewHitColor' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, DrawCameraCollisionTraceColor) == 0x0001A4, "Member 'UCameraCollisionProcess::DrawCameraCollisionTraceColor' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, DrawCameraCollisionHitColor) == 0x0001B4, "Member 'UCameraCollisionProcess::DrawCameraCollisionHitColor' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, DrawHeadColor) == 0x0001C4, "Member 'UCameraCollisionProcess::DrawHeadColor' has a wrong offset!");
static_assert(offsetof(UCameraCollisionProcess, DrawFixedArmOriginColor) == 0x0001D4, "Member 'UCameraCollisionProcess::DrawFixedArmOriginColor' has a wrong offset!");

// Class X6Camera.CameraDummyActor
// 0x0008 (0x03B0 - 0x03A8)
class ACameraDummyActor final : public AActor
{
public:
	class UX6BaseCameraComponent*                 CameraComponent;                                   // 0x03A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraDummyActor">();
	}
	static class ACameraDummyActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraDummyActor>();
	}
};
static_assert(alignof(ACameraDummyActor) == 0x000008, "Wrong alignment on ACameraDummyActor");
static_assert(sizeof(ACameraDummyActor) == 0x0003B0, "Wrong size on ACameraDummyActor");
static_assert(offsetof(ACameraDummyActor, CameraComponent) == 0x0003A8, "Member 'ACameraDummyActor::CameraComponent' has a wrong offset!");

// Class X6Camera.CameraEffectComponent
// 0x0028 (0x00D0 - 0x00A8)
class UCameraEffectComponent final : public UActorComponent
{
public:
	float                                         cd;                                                // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CdTimeStamp;                                       // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolveValue;                                     // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesireDissolveValue;                               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnterAlphaDistance;                                // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolveInterpSpeed;                               // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x1];                                       // 0x00C4(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ETraceTypeQuery                               TraceType;                                         // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x1];                                       // 0x00C6(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStandAloneToUse;                                  // 0x00C7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraEffectComponent">();
	}
	static class UCameraEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraEffectComponent>();
	}
};
static_assert(alignof(UCameraEffectComponent) == 0x000008, "Wrong alignment on UCameraEffectComponent");
static_assert(sizeof(UCameraEffectComponent) == 0x0000D0, "Wrong size on UCameraEffectComponent");
static_assert(offsetof(UCameraEffectComponent, cd) == 0x0000A8, "Member 'UCameraEffectComponent::cd' has a wrong offset!");
static_assert(offsetof(UCameraEffectComponent, CdTimeStamp) == 0x0000B0, "Member 'UCameraEffectComponent::CdTimeStamp' has a wrong offset!");
static_assert(offsetof(UCameraEffectComponent, DissolveValue) == 0x0000B4, "Member 'UCameraEffectComponent::DissolveValue' has a wrong offset!");
static_assert(offsetof(UCameraEffectComponent, DesireDissolveValue) == 0x0000B8, "Member 'UCameraEffectComponent::DesireDissolveValue' has a wrong offset!");
static_assert(offsetof(UCameraEffectComponent, EnterAlphaDistance) == 0x0000BC, "Member 'UCameraEffectComponent::EnterAlphaDistance' has a wrong offset!");
static_assert(offsetof(UCameraEffectComponent, DissolveInterpSpeed) == 0x0000C0, "Member 'UCameraEffectComponent::DissolveInterpSpeed' has a wrong offset!");
static_assert(offsetof(UCameraEffectComponent, TraceType) == 0x0000C5, "Member 'UCameraEffectComponent::TraceType' has a wrong offset!");
static_assert(offsetof(UCameraEffectComponent, bStandAloneToUse) == 0x0000C7, "Member 'UCameraEffectComponent::bStandAloneToUse' has a wrong offset!");

// Class X6Camera.CameraLagProcess
// 0x0220 (0x02C8 - 0x00A8)
class UCameraLagProcess final : public UActorComponent
{
public:
	bool                                          bDrawLagDebug;                                     // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraLagConfig*                       LagConfig;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraRotationLagSpeed;                            // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x8];                                       // 0x00BC(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmlengthLagSpeed;                                 // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraLagSubstepping;                          // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagMaxTimeStep;                              // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLocalSpaceClamp;                               // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraLocationLagMax;                              // 0x00D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraLagReferenceType                       ReferenceType;                                     // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReferenceRotationSpringInterpStiffness;            // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceRotationSpringInterpMass;                 // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraCollisionMoveMode                      LocationLagMode;                                   // 0x00FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationLagInterpSpeed;                            // 0x0100(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldSpaceLocationLagInterpSpeed;                  // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x1C];                                     // 0x011C(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mass;                                              // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Stiffness;                                         // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MassXYZ;                                           // 0x0148(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x18];                                     // 0x0160(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StiffnessXYZ;                                      // 0x0178(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecordFrame;                                       // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecordToleranceTime;                               // 0x0194(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecordMinSpeed;                                    // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecordMaxSpeed;                                    // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0[0x30];                                     // 0x01A0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraLagProcess*                      BlendFromLagProcess;                               // 0x01D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D8[0x3C];                                     // 0x01D8(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpringArmStretchMass;                              // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmStretchStiffness;                         // 0x0218(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmStretchTargetVelocityAmount;              // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchLagFinishedTolerance;                       // 0x0220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmStretchMaxLength;                         // 0x0224(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectStretchOnToAcceleration;                   // 0x0228(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovingSpringArmStretchLengthInterpSpeed;           // 0x022C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticSpringArmStretchLengthInterpSpeed;           // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234[0x94];                                     // 0x0234(0x0094)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FixCameraByBasedMovement(const struct FBasedMovementFixCameraHelper& Helper);
	struct FRotator GetLagRotation(const struct FRotator& PreviousRotation, const struct FRotator& DesiredRot, float DeltaTime);
	float GetLagSpringArm(float PreviousArmlength, float springArmLength, float DeltaTime);
	struct FVector GetLagSpringArmOrigin(const bool bUseWorldSpaceLag, const class AActor* ReferenceActor, const struct FVector& PreviousLocation, const struct FVector& FocusLocation, const float DeltaTime);
	struct FRotator GetLocalLagRotation(const struct FTransform& Transform, const struct FRotator& PreviousRotation, const struct FRotator& DesiredRot, float DeltaTime);
	struct FRotator RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraLagProcess">();
	}
	static class UCameraLagProcess* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraLagProcess>();
	}
};
static_assert(alignof(UCameraLagProcess) == 0x000008, "Wrong alignment on UCameraLagProcess");
static_assert(sizeof(UCameraLagProcess) == 0x0002C8, "Wrong size on UCameraLagProcess");
static_assert(offsetof(UCameraLagProcess, bDrawLagDebug) == 0x0000A8, "Member 'UCameraLagProcess::bDrawLagDebug' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, LagConfig) == 0x0000B0, "Member 'UCameraLagProcess::LagConfig' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, CameraRotationLagSpeed) == 0x0000B8, "Member 'UCameraLagProcess::CameraRotationLagSpeed' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, ArmlengthLagSpeed) == 0x0000C4, "Member 'UCameraLagProcess::ArmlengthLagSpeed' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, bUseCameraLagSubstepping) == 0x0000C8, "Member 'UCameraLagProcess::bUseCameraLagSubstepping' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, CameraLagMaxTimeStep) == 0x0000CC, "Member 'UCameraLagProcess::CameraLagMaxTimeStep' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, bUseLocalSpaceClamp) == 0x0000D0, "Member 'UCameraLagProcess::bUseLocalSpaceClamp' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, CameraLocationLagMax) == 0x0000D8, "Member 'UCameraLagProcess::CameraLocationLagMax' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, ReferenceType) == 0x0000F0, "Member 'UCameraLagProcess::ReferenceType' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, ReferenceRotationSpringInterpStiffness) == 0x0000F4, "Member 'UCameraLagProcess::ReferenceRotationSpringInterpStiffness' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, ReferenceRotationSpringInterpMass) == 0x0000F8, "Member 'UCameraLagProcess::ReferenceRotationSpringInterpMass' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, LocationLagMode) == 0x0000FC, "Member 'UCameraLagProcess::LocationLagMode' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, LocationLagInterpSpeed) == 0x000100, "Member 'UCameraLagProcess::LocationLagInterpSpeed' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, WorldSpaceLocationLagInterpSpeed) == 0x000118, "Member 'UCameraLagProcess::WorldSpaceLocationLagInterpSpeed' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, Mass) == 0x000138, "Member 'UCameraLagProcess::Mass' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, Stiffness) == 0x000140, "Member 'UCameraLagProcess::Stiffness' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, MassXYZ) == 0x000148, "Member 'UCameraLagProcess::MassXYZ' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, StiffnessXYZ) == 0x000178, "Member 'UCameraLagProcess::StiffnessXYZ' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, RecordFrame) == 0x000190, "Member 'UCameraLagProcess::RecordFrame' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, RecordToleranceTime) == 0x000194, "Member 'UCameraLagProcess::RecordToleranceTime' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, RecordMinSpeed) == 0x000198, "Member 'UCameraLagProcess::RecordMinSpeed' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, RecordMaxSpeed) == 0x00019C, "Member 'UCameraLagProcess::RecordMaxSpeed' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, BlendFromLagProcess) == 0x0001D0, "Member 'UCameraLagProcess::BlendFromLagProcess' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, SpringArmStretchMass) == 0x000214, "Member 'UCameraLagProcess::SpringArmStretchMass' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, SpringArmStretchStiffness) == 0x000218, "Member 'UCameraLagProcess::SpringArmStretchStiffness' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, SpringArmStretchTargetVelocityAmount) == 0x00021C, "Member 'UCameraLagProcess::SpringArmStretchTargetVelocityAmount' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, StretchLagFinishedTolerance) == 0x000220, "Member 'UCameraLagProcess::StretchLagFinishedTolerance' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, SpringArmStretchMaxLength) == 0x000224, "Member 'UCameraLagProcess::SpringArmStretchMaxLength' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, bProjectStretchOnToAcceleration) == 0x000228, "Member 'UCameraLagProcess::bProjectStretchOnToAcceleration' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, MovingSpringArmStretchLengthInterpSpeed) == 0x00022C, "Member 'UCameraLagProcess::MovingSpringArmStretchLengthInterpSpeed' has a wrong offset!");
static_assert(offsetof(UCameraLagProcess, StaticSpringArmStretchLengthInterpSpeed) == 0x000230, "Member 'UCameraLagProcess::StaticSpringArmStretchLengthInterpSpeed' has a wrong offset!");

// Class X6Camera.CameraModeInterface
// 0x0000 (0x0000 - 0x0000)
class ICameraModeInterface final : public IInterface
{
public:
	void OnCameraModeChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModeInterface">();
	}
	static class ICameraModeInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICameraModeInterface>();
	}
};
static_assert(alignof(ICameraModeInterface) == 0x000001, "Wrong alignment on ICameraModeInterface");
static_assert(sizeof(ICameraModeInterface) == 0x000001, "Wrong size on ICameraModeInterface");

// Class X6Camera.CameraModifiersDetailData
// 0x00F0 (0x0120 - 0x0030)
class UCameraModifiersDetailData final : public UDataAsset
{
public:
	struct FCameraModifierEffect                  ModifierEffect;                                    // 0x0030(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModifiersDetailData">();
	}
	static class UCameraModifiersDetailData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifiersDetailData>();
	}
};
static_assert(alignof(UCameraModifiersDetailData) == 0x000008, "Wrong alignment on UCameraModifiersDetailData");
static_assert(sizeof(UCameraModifiersDetailData) == 0x000120, "Wrong size on UCameraModifiersDetailData");
static_assert(offsetof(UCameraModifiersDetailData, ModifierEffect) == 0x000030, "Member 'UCameraModifiersDetailData::ModifierEffect' has a wrong offset!");

// Class X6Camera.CameraModifier_AdvancedBase
// 0x0008 (0x0050 - 0x0048)
class UCameraModifier_AdvancedBase : public UCameraModifier
{
public:
	class UAdvancedCamera*                        AdvancedCamera;                                    // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModifier_AdvancedBase">();
	}
	static class UCameraModifier_AdvancedBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier_AdvancedBase>();
	}
};
static_assert(alignof(UCameraModifier_AdvancedBase) == 0x000008, "Wrong alignment on UCameraModifier_AdvancedBase");
static_assert(sizeof(UCameraModifier_AdvancedBase) == 0x000050, "Wrong size on UCameraModifier_AdvancedBase");
static_assert(offsetof(UCameraModifier_AdvancedBase, AdvancedCamera) == 0x000048, "Member 'UCameraModifier_AdvancedBase::AdvancedCamera' has a wrong offset!");

// Class X6Camera.CameraModifier_CameraVFX
// 0x0068 (0x00B8 - 0x0050)
class UCameraModifier_CameraVFX final : public UCameraModifier_AdvancedBase
{
public:
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   PlayerCameraManager;                               // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModifier_CameraVFX">();
	}
	static class UCameraModifier_CameraVFX* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier_CameraVFX>();
	}
};
static_assert(alignof(UCameraModifier_CameraVFX) == 0x000008, "Wrong alignment on UCameraModifier_CameraVFX");
static_assert(sizeof(UCameraModifier_CameraVFX) == 0x0000B8, "Wrong size on UCameraModifier_CameraVFX");
static_assert(offsetof(UCameraModifier_CameraVFX, PlayerCameraManager) == 0x0000B0, "Member 'UCameraModifier_CameraVFX::PlayerCameraManager' has a wrong offset!");

// Class X6Camera.CameraModifier_CameraPostProcess
// 0x0030 (0x0080 - 0x0050)
class UCameraModifier_CameraPostProcess final : public UCameraModifier_AdvancedBase
{
public:
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   PlayerCameraManager;                               // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier*                        CameraModifier;                                    // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModifier_CameraPostProcess">();
	}
	static class UCameraModifier_CameraPostProcess* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier_CameraPostProcess>();
	}
};
static_assert(alignof(UCameraModifier_CameraPostProcess) == 0x000008, "Wrong alignment on UCameraModifier_CameraPostProcess");
static_assert(sizeof(UCameraModifier_CameraPostProcess) == 0x000080, "Wrong size on UCameraModifier_CameraPostProcess");
static_assert(offsetof(UCameraModifier_CameraPostProcess, PlayerCameraManager) == 0x000070, "Member 'UCameraModifier_CameraPostProcess::PlayerCameraManager' has a wrong offset!");
static_assert(offsetof(UCameraModifier_CameraPostProcess, CameraModifier) == 0x000078, "Member 'UCameraModifier_CameraPostProcess::CameraModifier' has a wrong offset!");

// Class X6Camera.CameraModifier_CameraShakeVessel
// 0x0028 (0x0050 - 0x0028)
class UCameraModifier_CameraShakeVessel final : public UObject
{
public:
	struct FCameraShake_ModifierSpec              CameraShakeModifierSpec;                           // 0x0028(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAdvancedCamera>         AdvancedCamera;                                    // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModifier_CameraShakeVessel">();
	}
	static class UCameraModifier_CameraShakeVessel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier_CameraShakeVessel>();
	}
};
static_assert(alignof(UCameraModifier_CameraShakeVessel) == 0x000008, "Wrong alignment on UCameraModifier_CameraShakeVessel");
static_assert(sizeof(UCameraModifier_CameraShakeVessel) == 0x000050, "Wrong size on UCameraModifier_CameraShakeVessel");
static_assert(offsetof(UCameraModifier_CameraShakeVessel, CameraShakeModifierSpec) == 0x000028, "Member 'UCameraModifier_CameraShakeVessel::CameraShakeModifierSpec' has a wrong offset!");
static_assert(offsetof(UCameraModifier_CameraShakeVessel, AdvancedCamera) == 0x000048, "Member 'UCameraModifier_CameraShakeVessel::AdvancedCamera' has a wrong offset!");

// Class X6Camera.CameraModifier_FOV
// 0x0028 (0x0078 - 0x0050)
class UCameraModifier_FOV final : public UCameraModifier_AdvancedBase
{
public:
	uint8                                         Pad_50[0x28];                                      // 0x0050(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModifier_FOV">();
	}
	static class UCameraModifier_FOV* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier_FOV>();
	}
};
static_assert(alignof(UCameraModifier_FOV) == 0x000008, "Wrong alignment on UCameraModifier_FOV");
static_assert(sizeof(UCameraModifier_FOV) == 0x000078, "Wrong size on UCameraModifier_FOV");

// Class X6Camera.CameraModifier_InterpLookAtLoc
// 0x0078 (0x00C8 - 0x0050)
class UCameraModifier_InterpLookAtLoc final : public UCameraModifier_AdvancedBase
{
public:
	uint8                                         Pad_50[0x78];                                      // 0x0050(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModifier_InterpLookAtLoc">();
	}
	static class UCameraModifier_InterpLookAtLoc* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier_InterpLookAtLoc>();
	}
};
static_assert(alignof(UCameraModifier_InterpLookAtLoc) == 0x000008, "Wrong alignment on UCameraModifier_InterpLookAtLoc");
static_assert(sizeof(UCameraModifier_InterpLookAtLoc) == 0x0000C8, "Wrong size on UCameraModifier_InterpLookAtLoc");

// Class X6Camera.CameraModifier_LocationOffset
// 0x0098 (0x00E8 - 0x0050)
class UCameraModifier_LocationOffset final : public UCameraModifier_AdvancedBase
{
public:
	uint8                                         Pad_50[0x98];                                      // 0x0050(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModifier_LocationOffset">();
	}
	static class UCameraModifier_LocationOffset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier_LocationOffset>();
	}
};
static_assert(alignof(UCameraModifier_LocationOffset) == 0x000008, "Wrong alignment on UCameraModifier_LocationOffset");
static_assert(sizeof(UCameraModifier_LocationOffset) == 0x0000E8, "Wrong size on UCameraModifier_LocationOffset");

// Class X6Camera.CameraModifier_SpringArmLength
// 0x0030 (0x0080 - 0x0050)
class UCameraModifier_SpringArmLength final : public UCameraModifier_AdvancedBase
{
public:
	uint8                                         Pad_50[0x30];                                      // 0x0050(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModifier_SpringArmLength">();
	}
	static class UCameraModifier_SpringArmLength* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier_SpringArmLength>();
	}
};
static_assert(alignof(UCameraModifier_SpringArmLength) == 0x000008, "Wrong alignment on UCameraModifier_SpringArmLength");
static_assert(sizeof(UCameraModifier_SpringArmLength) == 0x000080, "Wrong size on UCameraModifier_SpringArmLength");

// Class X6Camera.CameraOrientationSynchronizer
// 0x01A8 (0x01D0 - 0x0028)
class alignas(0x10) UCameraOrientationSynchronizer : public UObject
{
public:
	struct FCameraOrientationSyncConfig           CameraOrientationSyncConfig;                       // 0x0028(0x00B8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APawn>                   OwnerPawn;                                         // 0x00E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UAdvancedCamera>         OwnerAdvancedCamera;                               // 0x00E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBlueprintOverrideSynchronization;                 // 0x00F0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F1[0xD3];                                      // 0x00F1(0x00D3)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUserSettingEnableYawSync;                         // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUserSettingEnablePitchSync;                       // 0x01C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C6[0xA];                                      // 0x01C6(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FRotator BlueprintSyncCameraRotationPitch(const float DeltaTime, const struct FRotator& InTargetRotation);
	struct FRotator BlueprintSyncCameraRotationYaw(const float DeltaTime, const struct FRotator& InTargetRotation);
	void FixCameraByBasedMovement(const struct FBasedMovementFixCameraHelper& Helper);
	struct FRotator ReceiveCameraRotateInput(const struct FRotator& InDeltaRotation);
	void ReceiveInit(class UAdvancedCamera* InOwnerAdvancedCamera);
	void ReceiveShutdown();
	void SyncCameraPitchYawSyncSetting(bool YawValue, bool PitchValue);

	bool GetIsOwnerInAir() const;
	bool GetIsOwnerMoving() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraOrientationSynchronizer">();
	}
	static class UCameraOrientationSynchronizer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraOrientationSynchronizer>();
	}
};
static_assert(alignof(UCameraOrientationSynchronizer) == 0x000010, "Wrong alignment on UCameraOrientationSynchronizer");
static_assert(sizeof(UCameraOrientationSynchronizer) == 0x0001D0, "Wrong size on UCameraOrientationSynchronizer");
static_assert(offsetof(UCameraOrientationSynchronizer, CameraOrientationSyncConfig) == 0x000028, "Member 'UCameraOrientationSynchronizer::CameraOrientationSyncConfig' has a wrong offset!");
static_assert(offsetof(UCameraOrientationSynchronizer, OwnerPawn) == 0x0000E0, "Member 'UCameraOrientationSynchronizer::OwnerPawn' has a wrong offset!");
static_assert(offsetof(UCameraOrientationSynchronizer, OwnerAdvancedCamera) == 0x0000E8, "Member 'UCameraOrientationSynchronizer::OwnerAdvancedCamera' has a wrong offset!");
static_assert(offsetof(UCameraOrientationSynchronizer, bBlueprintOverrideSynchronization) == 0x0000F0, "Member 'UCameraOrientationSynchronizer::bBlueprintOverrideSynchronization' has a wrong offset!");
static_assert(offsetof(UCameraOrientationSynchronizer, bUserSettingEnableYawSync) == 0x0001C4, "Member 'UCameraOrientationSynchronizer::bUserSettingEnableYawSync' has a wrong offset!");
static_assert(offsetof(UCameraOrientationSynchronizer, bUserSettingEnablePitchSync) == 0x0001C5, "Member 'UCameraOrientationSynchronizer::bUserSettingEnablePitchSync' has a wrong offset!");

// Class X6Camera.CameraStateInterface
// 0x0000 (0x0000 - 0x0000)
class ICameraStateInterface final : public IInterface
{
public:
	bool HandleEnterCameraState(ECameraState LastState, ECameraState NewState, struct FViewTargetTransitionParams* TransitionParams);
	bool HandleExitCameraState(ECameraState LastState);
	bool HandleFullyBlendedCameraState(ECameraState NewState, struct FMinimalViewInfo* NewPOV);
	class UCameraComponent* HandleGetCameraComponent();
	bool HandleUpdateBlendCameraState(ECameraState NewState, float DurationPct, struct FViewTargetTransitionParams* BlendParams, struct FMinimalViewInfo* NewPOV);
	void OnEnterCameraState(ECameraState LastMode, ECameraState NewMode, const struct FCameraModifierBlendParam& ViewTargetTransitionParams, class AActor* NewTarget);
	void OnExitCameraState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraStateInterface">();
	}
	static class ICameraStateInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICameraStateInterface>();
	}
};
static_assert(alignof(ICameraStateInterface) == 0x000001, "Wrong alignment on ICameraStateInterface");
static_assert(sizeof(ICameraStateInterface) == 0x000001, "Wrong size on ICameraStateInterface");

// Class X6Camera.CameraStateTransitionData
// 0x0070 (0x00A0 - 0x0030)
class UCameraStateTransitionData final : public UDataAsset
{
public:
	ECameraState                                  CameraState;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifierBlendParam              DefaultTransition;                                 // 0x0038(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TMap<ECameraState, struct FCameraModifierBlendParam> SpecialTransitionMap;                       // 0x0050(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraStateTransitionData">();
	}
	static class UCameraStateTransitionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraStateTransitionData>();
	}
};
static_assert(alignof(UCameraStateTransitionData) == 0x000008, "Wrong alignment on UCameraStateTransitionData");
static_assert(sizeof(UCameraStateTransitionData) == 0x0000A0, "Wrong size on UCameraStateTransitionData");
static_assert(offsetof(UCameraStateTransitionData, CameraState) == 0x000030, "Member 'UCameraStateTransitionData::CameraState' has a wrong offset!");
static_assert(offsetof(UCameraStateTransitionData, DefaultTransition) == 0x000038, "Member 'UCameraStateTransitionData::DefaultTransition' has a wrong offset!");
static_assert(offsetof(UCameraStateTransitionData, SpecialTransitionMap) == 0x000050, "Member 'UCameraStateTransitionData::SpecialTransitionMap' has a wrong offset!");

// Class X6Camera.CameraTaskExecuter
// 0x0108 (0x0170 - 0x0068)
class alignas(0x10) UCameraTaskExecuter final : public UGameplayTask
{
public:
	TMulticastInlineDelegate<void(const struct FCameraTaskEventData& Payload)> OnTaskFinished;       // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCameraTaskEventData& Payload)> OnTaskCancled;        // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCameraTaskEventData& Payload)> OnAllTaskCancled;     // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FCameraTaskEventData& Payload)> OnAllTaskFinished;    // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x98];                                      // 0x00A8(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UX6CameraTaskBase*>              Tasks;                                             // 0x0140(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_150[0x20];                                     // 0x0150(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCameraTaskExecuter* DoExecuteCameraTask(class UObject* WorldContextObject, const TArray<TSubclassOf<class UCameraTask>>& CameraTasks);
	static class UCameraTaskExecuter* DoExecuteCameraTask_LookAt(class UObject* WorldContextObject, const struct FViewTargetTransitionParams& Transition, ECameraTaskLookAtType LookAtType, float TargetArmLength, float InterpSpeed, class UCameraTaskObject** FocusDummy);
	static class UCameraTaskExecuter* DoExecuteCameraTask_LookAtWithFOVBlend(class UObject* WorldContextObject, const struct FViewTargetTransitionParams& Transition, ECameraTaskLookAtType LookAtType, float TargetArmLength, float TargetFOV, float InterpSpeed, class UCameraTaskObject** FocusDummy);
	static class UCameraTaskExecuter* DoExecuteCameraTask_MoveTo(class UObject* WorldContextObject, const TArray<struct FCameraTaskMoveToData>& MoveToData);
	static class UCameraTaskExecuter* DoExecuteCameraTask_Spline(class UObject* WorldContextObject, const struct FViewTargetTransitionParams& BetweenTwoSplineTransition, const TArray<struct FCameraTaskSplineBlendInfo>& FSplineCameraTaskDatas, bool bBackToPreViewTarget, bool bDrawDebug, float DrawDebugTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraTaskExecuter">();
	}
	static class UCameraTaskExecuter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraTaskExecuter>();
	}
};
static_assert(alignof(UCameraTaskExecuter) == 0x000010, "Wrong alignment on UCameraTaskExecuter");
static_assert(sizeof(UCameraTaskExecuter) == 0x000170, "Wrong size on UCameraTaskExecuter");
static_assert(offsetof(UCameraTaskExecuter, OnTaskFinished) == 0x000068, "Member 'UCameraTaskExecuter::OnTaskFinished' has a wrong offset!");
static_assert(offsetof(UCameraTaskExecuter, OnTaskCancled) == 0x000078, "Member 'UCameraTaskExecuter::OnTaskCancled' has a wrong offset!");
static_assert(offsetof(UCameraTaskExecuter, OnAllTaskCancled) == 0x000088, "Member 'UCameraTaskExecuter::OnAllTaskCancled' has a wrong offset!");
static_assert(offsetof(UCameraTaskExecuter, OnAllTaskFinished) == 0x000098, "Member 'UCameraTaskExecuter::OnAllTaskFinished' has a wrong offset!");
static_assert(offsetof(UCameraTaskExecuter, Tasks) == 0x000140, "Member 'UCameraTaskExecuter::Tasks' has a wrong offset!");

// Class X6Camera.CameraTaskOwnerInterface
// 0x0000 (0x0000 - 0x0000)
class ICameraTaskOwnerInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraTaskOwnerInterface">();
	}
	static class ICameraTaskOwnerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICameraTaskOwnerInterface>();
	}
};
static_assert(alignof(ICameraTaskOwnerInterface) == 0x000001, "Wrong alignment on ICameraTaskOwnerInterface");
static_assert(sizeof(ICameraTaskOwnerInterface) == 0x000001, "Wrong size on ICameraTaskOwnerInterface");

// Class X6Camera.CameraVolumeBase
// 0x0018 (0x03C0 - 0x03A8)
class ACameraVolumeBase final : public AActor
{
public:
	float                                         BlendTimeEnter;                                    // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFuncEnter;                                    // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExpEnter;                                     // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeExit;                                     // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFuncExit;                                     // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExpExit;                                      // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraVolumeBase">();
	}
	static class ACameraVolumeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraVolumeBase>();
	}
};
static_assert(alignof(ACameraVolumeBase) == 0x000008, "Wrong alignment on ACameraVolumeBase");
static_assert(sizeof(ACameraVolumeBase) == 0x0003C0, "Wrong size on ACameraVolumeBase");
static_assert(offsetof(ACameraVolumeBase, BlendTimeEnter) == 0x0003A8, "Member 'ACameraVolumeBase::BlendTimeEnter' has a wrong offset!");
static_assert(offsetof(ACameraVolumeBase, BlendFuncEnter) == 0x0003AC, "Member 'ACameraVolumeBase::BlendFuncEnter' has a wrong offset!");
static_assert(offsetof(ACameraVolumeBase, BlendExpEnter) == 0x0003B0, "Member 'ACameraVolumeBase::BlendExpEnter' has a wrong offset!");
static_assert(offsetof(ACameraVolumeBase, BlendTimeExit) == 0x0003B4, "Member 'ACameraVolumeBase::BlendTimeExit' has a wrong offset!");
static_assert(offsetof(ACameraVolumeBase, BlendFuncExit) == 0x0003B8, "Member 'ACameraVolumeBase::BlendFuncExit' has a wrong offset!");
static_assert(offsetof(ACameraVolumeBase, BlendExpExit) == 0x0003BC, "Member 'ACameraVolumeBase::BlendExpExit' has a wrong offset!");

// Class X6Camera.FixedCameraVolumeActor
// 0x0038 (0x03E0 - 0x03A8)
class AFixedCameraVolumeActor final : public AActor
{
public:
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Root;                                              // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          EnterBox;                                          // 0x03B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          ExitBox;                                           // 0x03C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFixedCamera*                           FixedCamera;                                       // 0x03C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransitionConfigKey;                               // 0x03D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnActorEnterVolume(class AActor* Actor);
	void OnActorLeaveVolume(class AActor* Actor);
	void OnEnterBoxComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnEnterCameraState(ECameraState LastMode, ECameraState NewMode, const struct FCameraModifierBlendParam& ViewTargetTransitionParams, class AActor* NewTarget);
	void OnExitBoxBoxComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnExitCameraState();
	void SetViewTarget(class AActor* NewViewTarget, const struct FCameraModifierBlendParam& BlendParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FixedCameraVolumeActor">();
	}
	static class AFixedCameraVolumeActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFixedCameraVolumeActor>();
	}
};
static_assert(alignof(AFixedCameraVolumeActor) == 0x000008, "Wrong alignment on AFixedCameraVolumeActor");
static_assert(sizeof(AFixedCameraVolumeActor) == 0x0003E0, "Wrong size on AFixedCameraVolumeActor");
static_assert(offsetof(AFixedCameraVolumeActor, Root) == 0x0003B0, "Member 'AFixedCameraVolumeActor::Root' has a wrong offset!");
static_assert(offsetof(AFixedCameraVolumeActor, EnterBox) == 0x0003B8, "Member 'AFixedCameraVolumeActor::EnterBox' has a wrong offset!");
static_assert(offsetof(AFixedCameraVolumeActor, ExitBox) == 0x0003C0, "Member 'AFixedCameraVolumeActor::ExitBox' has a wrong offset!");
static_assert(offsetof(AFixedCameraVolumeActor, FixedCamera) == 0x0003C8, "Member 'AFixedCameraVolumeActor::FixedCamera' has a wrong offset!");
static_assert(offsetof(AFixedCameraVolumeActor, TransitionConfigKey) == 0x0003D0, "Member 'AFixedCameraVolumeActor::TransitionConfigKey' has a wrong offset!");

// Class X6Camera.FixedCamera
// 0x0040 (0x0B80 - 0x0B40)
class UFixedCamera final : public UCameraComponent
{
public:
	bool                                          LimitePitch;                                       // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LimiteYaw;                                         // 0x0B41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B42[0x2];                                      // 0x0B42(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxPitchAngle;                                     // 0x0B44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPitchAngle;                                     // 0x0B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxYawAngle;                                       // 0x0B4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinYawAngle;                                       // 0x0B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0B54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B58[0x28];                                     // 0x0B58(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnterVolume(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, class UCurveFloat* InBlendCurve);
	void LeaveVolume(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, class UCurveFloat* InBlendCurve);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FixedCamera">();
	}
	static class UFixedCamera* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFixedCamera>();
	}
};
static_assert(alignof(UFixedCamera) == 0x000010, "Wrong alignment on UFixedCamera");
static_assert(sizeof(UFixedCamera) == 0x000B80, "Wrong size on UFixedCamera");
static_assert(offsetof(UFixedCamera, LimitePitch) == 0x000B40, "Member 'UFixedCamera::LimitePitch' has a wrong offset!");
static_assert(offsetof(UFixedCamera, LimiteYaw) == 0x000B41, "Member 'UFixedCamera::LimiteYaw' has a wrong offset!");
static_assert(offsetof(UFixedCamera, MaxPitchAngle) == 0x000B44, "Member 'UFixedCamera::MaxPitchAngle' has a wrong offset!");
static_assert(offsetof(UFixedCamera, MinPitchAngle) == 0x000B48, "Member 'UFixedCamera::MinPitchAngle' has a wrong offset!");
static_assert(offsetof(UFixedCamera, MaxYawAngle) == 0x000B4C, "Member 'UFixedCamera::MaxYawAngle' has a wrong offset!");
static_assert(offsetof(UFixedCamera, MinYawAngle) == 0x000B50, "Member 'UFixedCamera::MinYawAngle' has a wrong offset!");
static_assert(offsetof(UFixedCamera, InterpSpeed) == 0x000B54, "Member 'UFixedCamera::InterpSpeed' has a wrong offset!");

// Class X6Camera.SimpleCamera
// 0x0000 (0x0B40 - 0x0B40)
class USimpleCamera final : public UCameraComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleCamera">();
	}
	static class USimpleCamera* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleCamera>();
	}
};
static_assert(alignof(USimpleCamera) == 0x000010, "Wrong alignment on USimpleCamera");
static_assert(sizeof(USimpleCamera) == 0x000B40, "Wrong size on USimpleCamera");

// Class X6Camera.SplineCamera
// 0x0020 (0x0B60 - 0x0B40)
class USplineCamera final : public UCameraComponent
{
public:
	uint8                                         Pad_B40[0x20];                                     // 0x0B40(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnterVolume(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, class UCurveFloat* InBlendCurve);
	void LeaveVolume(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, class UCurveFloat* InBlendCurve);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineCamera">();
	}
	static class USplineCamera* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineCamera>();
	}
};
static_assert(alignof(USplineCamera) == 0x000010, "Wrong alignment on USplineCamera");
static_assert(sizeof(USplineCamera) == 0x000B60, "Wrong size on USplineCamera");

// Class X6Camera.SplineCameraVolumeActor
// 0x0040 (0x03E8 - 0x03A8)
class ASplineCameraVolumeActor final : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          EnterBox;                                          // 0x03B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          ExitBox;                                           // 0x03B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineCamera*                          SplineCamera;                                      // 0x03C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineComponent;                                   // 0x03C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x03D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunction;                                     // 0x03D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D5[0x3];                                      // 0x03D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x03D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x03DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InBlendCurve;                                      // 0x03E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnActorEnterVolume(class AActor* Actor);
	void OnActorLeaveVolume(class AActor* Actor);
	void OnEnterBoxComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnExitBoxBoxComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void SetViewTarget(class AActor* NewViewTarget, const struct FCameraModifierBlendParam& BlendParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineCameraVolumeActor">();
	}
	static class ASplineCameraVolumeActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplineCameraVolumeActor>();
	}
};
static_assert(alignof(ASplineCameraVolumeActor) == 0x000008, "Wrong alignment on ASplineCameraVolumeActor");
static_assert(sizeof(ASplineCameraVolumeActor) == 0x0003E8, "Wrong size on ASplineCameraVolumeActor");
static_assert(offsetof(ASplineCameraVolumeActor, Root) == 0x0003A8, "Member 'ASplineCameraVolumeActor::Root' has a wrong offset!");
static_assert(offsetof(ASplineCameraVolumeActor, EnterBox) == 0x0003B0, "Member 'ASplineCameraVolumeActor::EnterBox' has a wrong offset!");
static_assert(offsetof(ASplineCameraVolumeActor, ExitBox) == 0x0003B8, "Member 'ASplineCameraVolumeActor::ExitBox' has a wrong offset!");
static_assert(offsetof(ASplineCameraVolumeActor, SplineCamera) == 0x0003C0, "Member 'ASplineCameraVolumeActor::SplineCamera' has a wrong offset!");
static_assert(offsetof(ASplineCameraVolumeActor, SplineComponent) == 0x0003C8, "Member 'ASplineCameraVolumeActor::SplineComponent' has a wrong offset!");
static_assert(offsetof(ASplineCameraVolumeActor, BlendTime) == 0x0003D0, "Member 'ASplineCameraVolumeActor::BlendTime' has a wrong offset!");
static_assert(offsetof(ASplineCameraVolumeActor, BlendFunction) == 0x0003D4, "Member 'ASplineCameraVolumeActor::BlendFunction' has a wrong offset!");
static_assert(offsetof(ASplineCameraVolumeActor, BlendExp) == 0x0003D8, "Member 'ASplineCameraVolumeActor::BlendExp' has a wrong offset!");
static_assert(offsetof(ASplineCameraVolumeActor, bLockOutgoing) == 0x0003DC, "Member 'ASplineCameraVolumeActor::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(ASplineCameraVolumeActor, InBlendCurve) == 0x0003E0, "Member 'ASplineCameraVolumeActor::InBlendCurve' has a wrong offset!");

// Class X6Camera.X6BikeCameraSynchronizer
// 0x0000 (0x01D0 - 0x01D0)
class UX6BikeCameraSynchronizer final : public UCameraOrientationSynchronizer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6BikeCameraSynchronizer">();
	}
	static class UX6BikeCameraSynchronizer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6BikeCameraSynchronizer>();
	}
};
static_assert(alignof(UX6BikeCameraSynchronizer) == 0x000010, "Wrong alignment on UX6BikeCameraSynchronizer");
static_assert(sizeof(UX6BikeCameraSynchronizer) == 0x0001D0, "Wrong size on UX6BikeCameraSynchronizer");

// Class X6Camera.X6CameraActor_VFX
// 0x0000 (0x03A8 - 0x03A8)
class AX6CameraActor_VFX final : public AActor
{
public:
	void OnActorBeginPlay();
	void OnActorEndPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6CameraActor_VFX">();
	}
	static class AX6CameraActor_VFX* GetDefaultObj()
	{
		return GetDefaultObjImpl<AX6CameraActor_VFX>();
	}
};
static_assert(alignof(AX6CameraActor_VFX) == 0x000008, "Wrong alignment on AX6CameraActor_VFX");
static_assert(sizeof(AX6CameraActor_VFX) == 0x0003A8, "Wrong size on AX6CameraActor_VFX");

// Class X6Camera.X6CameraConfigManager
// 0x0018 (0x0040 - 0x0028)
class UX6CameraConfigManager final : public UObject
{
public:
	TArray<struct FX6CameraConfigData>            ConfigDataList;                                    // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x4];                                       // 0x0038(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EX6CameraPlatformType                         PlatformType;                                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EX6CameraInputDeviceType                      InputDeviceType;                                   // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool IsCameraSettingsValueEqual(const struct FX6CameraBlendableSettings& A, const struct FX6CameraBlendableSettings& B);

	void CollectDebugOutput(TArray<class FString>* InOutDebugInfoLines) const;
	const TArray<struct FX6CameraConfigData> GetConfigDataList() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6CameraConfigManager">();
	}
	static class UX6CameraConfigManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6CameraConfigManager>();
	}
};
static_assert(alignof(UX6CameraConfigManager) == 0x000008, "Wrong alignment on UX6CameraConfigManager");
static_assert(sizeof(UX6CameraConfigManager) == 0x000040, "Wrong size on UX6CameraConfigManager");
static_assert(offsetof(UX6CameraConfigManager, ConfigDataList) == 0x000028, "Member 'UX6CameraConfigManager::ConfigDataList' has a wrong offset!");
static_assert(offsetof(UX6CameraConfigManager, PlatformType) == 0x00003C, "Member 'UX6CameraConfigManager::PlatformType' has a wrong offset!");
static_assert(offsetof(UX6CameraConfigManager, InputDeviceType) == 0x00003D, "Member 'UX6CameraConfigManager::InputDeviceType' has a wrong offset!");

// Class X6Camera.X6CameraRuntimeConfigModifier
// 0x0038 (0x0060 - 0x0028)
class UX6CameraRuntimeConfigModifier final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6CameraConfigPriority                Priority;                                          // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void BlueprintDeinitialize();
	void BlueprintInitialize();
	void BlueprintModifyCameraRuntimeConfig(const float DeltaTime, const bool bRefreshConfigData, const struct FX6CameraInputConfig& InInputConfig, const struct FCameraBaseParamsDefine& InBaseParams, struct FX6CameraInputConfig* OutInputConfig, struct FCameraBaseParamsDefine* OutBaseParams);

	int32 GetConfigDataUniqueKey() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6CameraRuntimeConfigModifier">();
	}
	static class UX6CameraRuntimeConfigModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6CameraRuntimeConfigModifier>();
	}
};
static_assert(alignof(UX6CameraRuntimeConfigModifier) == 0x000008, "Wrong alignment on UX6CameraRuntimeConfigModifier");
static_assert(sizeof(UX6CameraRuntimeConfigModifier) == 0x000060, "Wrong size on UX6CameraRuntimeConfigModifier");
static_assert(offsetof(UX6CameraRuntimeConfigModifier, Priority) == 0x000030, "Member 'UX6CameraRuntimeConfigModifier::Priority' has a wrong offset!");

// Class X6Camera.X6CameraSettings
// 0x0060 (0x0098 - 0x0038)
class UX6CameraSettings final : public UDeveloperSettings
{
public:
	TArray<struct FX6CustomCameraStateSetup>      CustomCameraStateSetups;                           // 0x0038(0x0010)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x50];                                      // 0x0048(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FName GetCameraStateName(const ECameraState CameraState);
	static class FString GetCameraStateNameString(const ECameraState CameraState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6CameraSettings">();
	}
	static class UX6CameraSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6CameraSettings>();
	}
};
static_assert(alignof(UX6CameraSettings) == 0x000008, "Wrong alignment on UX6CameraSettings");
static_assert(sizeof(UX6CameraSettings) == 0x000098, "Wrong size on UX6CameraSettings");
static_assert(offsetof(UX6CameraSettings, CustomCameraStateSetups) == 0x000038, "Member 'UX6CameraSettings::CustomCameraStateSetups' has a wrong offset!");

// Class X6Camera.CameraTaskObject
// 0x0078 (0x00A0 - 0x0028)
class UCameraTaskObject final : public UObject
{
public:
	bool                                          bActived;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x77];                                      // 0x0029(0x0077)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActive(bool bNewActive);
	void SetArmlength(float TargetArmLength);
	void SetLocation(const struct FVector& Location);
	void SetLocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation);
	void SetRotation(const struct FRotator& Rotation);

	float GetArmlength() const;
	struct FVector GetLocation() const;
	struct FRotator GetRotation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraTaskObject">();
	}
	static class UCameraTaskObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraTaskObject>();
	}
};
static_assert(alignof(UCameraTaskObject) == 0x000008, "Wrong alignment on UCameraTaskObject");
static_assert(sizeof(UCameraTaskObject) == 0x0000A0, "Wrong size on UCameraTaskObject");
static_assert(offsetof(UCameraTaskObject, bActived) == 0x000028, "Member 'UCameraTaskObject::bActived' has a wrong offset!");

// Class X6Camera.X6CameraTaskBase
// 0x0020 (0x0048 - 0x0028)
class UX6CameraTaskBase : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraTaskTag;                                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginTask();
	void CancelTask();
	class AX6PlayerCameraManagerBase* GetPlayerCameraManager();
	void OnTaskActivate();
	void OnTaskEnd();
	void PauseTask();
	void ReceiveBeginTask(float DeltaSeconds);
	void ReceiveTick(float DeltaSeconds);
	void TryToEndTask();

	class AActor* GetAvatar() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6CameraTaskBase">();
	}
	static class UX6CameraTaskBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6CameraTaskBase>();
	}
};
static_assert(alignof(UX6CameraTaskBase) == 0x000008, "Wrong alignment on UX6CameraTaskBase");
static_assert(sizeof(UX6CameraTaskBase) == 0x000048, "Wrong size on UX6CameraTaskBase");
static_assert(offsetof(UX6CameraTaskBase, CameraTaskTag) == 0x000038, "Member 'UX6CameraTaskBase::CameraTaskTag' has a wrong offset!");

// Class X6Camera.CameraTask
// 0x0068 (0x00B0 - 0x0048)
class UCameraTask final : public UX6CameraTaskBase
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraTransform;                                   // 0x0050(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraTask">();
	}
	static class UCameraTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraTask>();
	}
};
static_assert(alignof(UCameraTask) == 0x000010, "Wrong alignment on UCameraTask");
static_assert(sizeof(UCameraTask) == 0x0000B0, "Wrong size on UCameraTask");
static_assert(offsetof(UCameraTask, CameraTransform) == 0x000050, "Member 'UCameraTask::CameraTransform' has a wrong offset!");

// Class X6Camera.CameraTask_MoveTo
// 0x1CE8 (0x1D30 - 0x0048)
class UCameraTask_MoveTo final : public UX6CameraTaskBase
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetCameraTransfrom;                             // 0x0050(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x00B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x1C60];                                    // 0x00D0(0x1C60)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraTask_MoveTo">();
	}
	static class UCameraTask_MoveTo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraTask_MoveTo>();
	}
};
static_assert(alignof(UCameraTask_MoveTo) == 0x000010, "Wrong alignment on UCameraTask_MoveTo");
static_assert(sizeof(UCameraTask_MoveTo) == 0x001D30, "Wrong size on UCameraTask_MoveTo");
static_assert(offsetof(UCameraTask_MoveTo, TargetCameraTransfrom) == 0x000050, "Member 'UCameraTask_MoveTo::TargetCameraTransfrom' has a wrong offset!");
static_assert(offsetof(UCameraTask_MoveTo, TransitionParams) == 0x0000B0, "Member 'UCameraTask_MoveTo::TransitionParams' has a wrong offset!");

// Class X6Camera.CameraTask_LookAt
// 0x1CE8 (0x1D30 - 0x0048)
class UCameraTask_LookAt final : public UX6CameraTaskBase
{
public:
	ECameraTaskLookAtType                         LookAtType;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x2F];                                      // 0x0049(0x002F)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraTaskObject*                      CameraTaskObject;                                  // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x1C50];                                    // 0x0080(0x1C50)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraTransform;                                   // 0x1CD0(0x0060)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraTask_LookAt">();
	}
	static class UCameraTask_LookAt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraTask_LookAt>();
	}
};
static_assert(alignof(UCameraTask_LookAt) == 0x000010, "Wrong alignment on UCameraTask_LookAt");
static_assert(sizeof(UCameraTask_LookAt) == 0x001D30, "Wrong size on UCameraTask_LookAt");
static_assert(offsetof(UCameraTask_LookAt, LookAtType) == 0x000048, "Member 'UCameraTask_LookAt::LookAtType' has a wrong offset!");
static_assert(offsetof(UCameraTask_LookAt, CameraTaskObject) == 0x000078, "Member 'UCameraTask_LookAt::CameraTaskObject' has a wrong offset!");
static_assert(offsetof(UCameraTask_LookAt, CameraTransform) == 0x001CD0, "Member 'UCameraTask_LookAt::CameraTransform' has a wrong offset!");

// Class X6Camera.CameraTask_Spline
// 0x1D38 (0x1D80 - 0x0048)
class UCameraTask_Spline final : public UX6CameraTaskBase
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraTransform;                                   // 0x0050(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCameraTaskSplineBlendInfo>     SplineBlendInfo;                                   // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x1CC0];                                    // 0x00C0(0x1CC0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraTask_Spline">();
	}
	static class UCameraTask_Spline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraTask_Spline>();
	}
};
static_assert(alignof(UCameraTask_Spline) == 0x000010, "Wrong alignment on UCameraTask_Spline");
static_assert(sizeof(UCameraTask_Spline) == 0x001D80, "Wrong size on UCameraTask_Spline");
static_assert(offsetof(UCameraTask_Spline, CameraTransform) == 0x000050, "Member 'UCameraTask_Spline::CameraTransform' has a wrong offset!");
static_assert(offsetof(UCameraTask_Spline, SplineBlendInfo) == 0x0000B0, "Member 'UCameraTask_Spline::SplineBlendInfo' has a wrong offset!");

// Class X6Camera.CameraCollisionConfig
// 0x0038 (0x0068 - 0x0030)
class UCameraCollisionConfig final : public UPrimaryDataAsset
{
public:
	struct FCameraSpringBackSettings              SpringBackSettings;                                // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        TraceTargetRelativeLocations;                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FocusLocationAdjustRadiusDelta;                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraCollisionConfig">();
	}
	static class UCameraCollisionConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraCollisionConfig>();
	}
};
static_assert(alignof(UCameraCollisionConfig) == 0x000008, "Wrong alignment on UCameraCollisionConfig");
static_assert(sizeof(UCameraCollisionConfig) == 0x000068, "Wrong size on UCameraCollisionConfig");
static_assert(offsetof(UCameraCollisionConfig, SpringBackSettings) == 0x000030, "Member 'UCameraCollisionConfig::SpringBackSettings' has a wrong offset!");
static_assert(offsetof(UCameraCollisionConfig, TraceTargetRelativeLocations) == 0x000050, "Member 'UCameraCollisionConfig::TraceTargetRelativeLocations' has a wrong offset!");
static_assert(offsetof(UCameraCollisionConfig, FocusLocationAdjustRadiusDelta) == 0x000060, "Member 'UCameraCollisionConfig::FocusLocationAdjustRadiusDelta' has a wrong offset!");

// Class X6Camera.CameraLagConfig
// 0x00A0 (0x00D0 - 0x0030)
class UCameraLagConfig final : public UPrimaryDataAsset
{
public:
	bool                                          bUseLocalSpaceClamp;                               // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraLocationLagMax;                              // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraLagReferenceType                       ReferenceType;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReferenceRotationSpringInterpStiffness;            // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReferenceRotationSpringInterpMass;                 // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraCollisionMoveMode                      LocationLagMode;                                   // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationLagInterpSpeed;                            // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MassXYZ;                                           // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StiffnessXYZ;                                      // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmStretchMass;                              // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmStretchStiffness;                         // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmStretchTargetVelocityAmount;              // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchLagFinishedTolerance;                       // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmStretchMaxLength;                         // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectStretchOnToAcceleration;                   // 0x00C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovingSpringArmStretchLengthInterpSpeed;           // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticSpringArmStretchLengthInterpSpeed;           // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraLagConfig">();
	}
	static class UCameraLagConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraLagConfig>();
	}
};
static_assert(alignof(UCameraLagConfig) == 0x000008, "Wrong alignment on UCameraLagConfig");
static_assert(sizeof(UCameraLagConfig) == 0x0000D0, "Wrong size on UCameraLagConfig");
static_assert(offsetof(UCameraLagConfig, bUseLocalSpaceClamp) == 0x000030, "Member 'UCameraLagConfig::bUseLocalSpaceClamp' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, CameraLocationLagMax) == 0x000038, "Member 'UCameraLagConfig::CameraLocationLagMax' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, ReferenceType) == 0x000050, "Member 'UCameraLagConfig::ReferenceType' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, ReferenceRotationSpringInterpStiffness) == 0x000054, "Member 'UCameraLagConfig::ReferenceRotationSpringInterpStiffness' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, ReferenceRotationSpringInterpMass) == 0x000058, "Member 'UCameraLagConfig::ReferenceRotationSpringInterpMass' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, LocationLagMode) == 0x00005C, "Member 'UCameraLagConfig::LocationLagMode' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, LocationLagInterpSpeed) == 0x000060, "Member 'UCameraLagConfig::LocationLagInterpSpeed' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, Mass) == 0x000078, "Member 'UCameraLagConfig::Mass' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, Stiffness) == 0x00007C, "Member 'UCameraLagConfig::Stiffness' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, MassXYZ) == 0x000080, "Member 'UCameraLagConfig::MassXYZ' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, StiffnessXYZ) == 0x000098, "Member 'UCameraLagConfig::StiffnessXYZ' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, SpringArmStretchMass) == 0x0000B0, "Member 'UCameraLagConfig::SpringArmStretchMass' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, SpringArmStretchStiffness) == 0x0000B4, "Member 'UCameraLagConfig::SpringArmStretchStiffness' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, SpringArmStretchTargetVelocityAmount) == 0x0000B8, "Member 'UCameraLagConfig::SpringArmStretchTargetVelocityAmount' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, StretchLagFinishedTolerance) == 0x0000BC, "Member 'UCameraLagConfig::StretchLagFinishedTolerance' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, SpringArmStretchMaxLength) == 0x0000C0, "Member 'UCameraLagConfig::SpringArmStretchMaxLength' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, bProjectStretchOnToAcceleration) == 0x0000C4, "Member 'UCameraLagConfig::bProjectStretchOnToAcceleration' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, MovingSpringArmStretchLengthInterpSpeed) == 0x0000C8, "Member 'UCameraLagConfig::MovingSpringArmStretchLengthInterpSpeed' has a wrong offset!");
static_assert(offsetof(UCameraLagConfig, StaticSpringArmStretchLengthInterpSpeed) == 0x0000CC, "Member 'UCameraLagConfig::StaticSpringArmStretchLengthInterpSpeed' has a wrong offset!");

// Class X6Camera.CameraZoomConfigDataAsset
// 0x0028 (0x0058 - 0x0030)
class UCameraZoomConfigDataAsset final : public UPrimaryDataAsset
{
public:
	struct FVector                                ZoomedTargetOffset;                                // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ZoomedTargetOffsetZByPitchCurve;                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpringArmLength;                                // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinZoomedFOV;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraZoomConfigDataAsset">();
	}
	static class UCameraZoomConfigDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraZoomConfigDataAsset>();
	}
};
static_assert(alignof(UCameraZoomConfigDataAsset) == 0x000008, "Wrong alignment on UCameraZoomConfigDataAsset");
static_assert(sizeof(UCameraZoomConfigDataAsset) == 0x000058, "Wrong size on UCameraZoomConfigDataAsset");
static_assert(offsetof(UCameraZoomConfigDataAsset, ZoomedTargetOffset) == 0x000030, "Member 'UCameraZoomConfigDataAsset::ZoomedTargetOffset' has a wrong offset!");
static_assert(offsetof(UCameraZoomConfigDataAsset, ZoomedTargetOffsetZByPitchCurve) == 0x000048, "Member 'UCameraZoomConfigDataAsset::ZoomedTargetOffsetZByPitchCurve' has a wrong offset!");
static_assert(offsetof(UCameraZoomConfigDataAsset, MinSpringArmLength) == 0x000050, "Member 'UCameraZoomConfigDataAsset::MinSpringArmLength' has a wrong offset!");
static_assert(offsetof(UCameraZoomConfigDataAsset, MinZoomedFOV) == 0x000054, "Member 'UCameraZoomConfigDataAsset::MinZoomedFOV' has a wrong offset!");

// Class X6Camera.X6DebugCameraController
// 0x0020 (0x0B40 - 0x0B20)
class AX6DebugCameraController final : public ADebugCameraController
{
public:
	uint8                                         bOrbitPivotUseCenterFollow : 1;                    // 0x0B20(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B21[0x1F];                                     // 0x0B21(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ToggleOriginControllerHandleInput();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6DebugCameraController">();
	}
	static class AX6DebugCameraController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AX6DebugCameraController>();
	}
};
static_assert(alignof(AX6DebugCameraController) == 0x000008, "Wrong alignment on AX6DebugCameraController");
static_assert(sizeof(AX6DebugCameraController) == 0x000B40, "Wrong size on AX6DebugCameraController");

}

