#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CleaningAnimalComponent_V2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ECleaningAnimalStage_structs.hpp"
#include "BP_SimpleAbilityBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CleaningAnimalComponent_V2.BP_CleaningAnimalComponent_V2_C
// 0x00B8 (0x01A8 - 0x00F0)
class UBP_CleaningAnimalComponent_V2_C final : public UBP_SimpleAbilityBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_CleaningAnimalComponent_V2_C;    // 0x00F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	ECleaningAnimalStage                          BP_CleaningAnimalStage;                            // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_AnimalTraceRadius;                              // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BP_AnimalTraceAngle;                               // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bNoUseCleaningDownAnimState;                    // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            BP_CfgCameraBlendOutParam;                         // 0x0110(0x0020)(Edit, BlueprintVisible, NoDestructor)
	double                                        BP_ClearSkipWidgetTimeBeforeEnd;                   // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BP_CameraRotAfterClean;                            // 0x0138(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        BP_MaxAdjustHeight;                                // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_SafeZoneRadius;                                 // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_ForceResetAnimalLocAfterClean;                  // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* Actor)> OnStartHoldingBrush;                         // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* Actor)> OnStopHoldingBrush;                          // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UAnimSequence*                          BP_NikkiIdleAnim;                                  // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        CachedCleanAnimations;                             // 0x0190(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           TargetMontage;                                     // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void GetCleaningAnimalStage(ECleaningAnimalStage* Stage);
	void ExecuteUbergraph_BP_CleaningAnimalComponent_V2(int32 EntryPoint);
	void BPAnimNotify_ExitRealCleaning();
	void BPAnimNotify_ExitQuickCleaning();
	void BPAnimNotify_ExitCleaningInterrupt();
	void BPAnimNotify_ExitCleanCamera(double BlendTime);
	void BPAnimNotify_EnterCleanCamera(double BlendTime);
	void BP_IsMoving(bool* IsMoving);
	void BP_GetHandIKParams(double* IK_HandAlpha, struct FVector* IK_RightHandLocation_ComponentSpace, struct FRotator* IK_RightHandRotation_ComponentSpace);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CleaningAnimalComponent_V2_C">();
	}
	static class UBP_CleaningAnimalComponent_V2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CleaningAnimalComponent_V2_C>();
	}
};
static_assert(alignof(UBP_CleaningAnimalComponent_V2_C) == 0x000008, "Wrong alignment on UBP_CleaningAnimalComponent_V2_C");
static_assert(sizeof(UBP_CleaningAnimalComponent_V2_C) == 0x0001A8, "Wrong size on UBP_CleaningAnimalComponent_V2_C");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, UberGraphFrame_BP_CleaningAnimalComponent_V2_C) == 0x0000F0, "Member 'UBP_CleaningAnimalComponent_V2_C::UberGraphFrame_BP_CleaningAnimalComponent_V2_C' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, BP_CleaningAnimalStage) == 0x0000F8, "Member 'UBP_CleaningAnimalComponent_V2_C::BP_CleaningAnimalStage' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, BP_AnimalTraceRadius) == 0x000100, "Member 'UBP_CleaningAnimalComponent_V2_C::BP_AnimalTraceRadius' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, BP_AnimalTraceAngle) == 0x000108, "Member 'UBP_CleaningAnimalComponent_V2_C::BP_AnimalTraceAngle' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, BP_bNoUseCleaningDownAnimState) == 0x00010C, "Member 'UBP_CleaningAnimalComponent_V2_C::BP_bNoUseCleaningDownAnimState' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, BP_CfgCameraBlendOutParam) == 0x000110, "Member 'UBP_CleaningAnimalComponent_V2_C::BP_CfgCameraBlendOutParam' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, BP_ClearSkipWidgetTimeBeforeEnd) == 0x000130, "Member 'UBP_CleaningAnimalComponent_V2_C::BP_ClearSkipWidgetTimeBeforeEnd' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, BP_CameraRotAfterClean) == 0x000138, "Member 'UBP_CleaningAnimalComponent_V2_C::BP_CameraRotAfterClean' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, BP_MaxAdjustHeight) == 0x000150, "Member 'UBP_CleaningAnimalComponent_V2_C::BP_MaxAdjustHeight' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, BP_SafeZoneRadius) == 0x000158, "Member 'UBP_CleaningAnimalComponent_V2_C::BP_SafeZoneRadius' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, BP_ForceResetAnimalLocAfterClean) == 0x000160, "Member 'UBP_CleaningAnimalComponent_V2_C::BP_ForceResetAnimalLocAfterClean' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, OnStartHoldingBrush) == 0x000168, "Member 'UBP_CleaningAnimalComponent_V2_C::OnStartHoldingBrush' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, OnStopHoldingBrush) == 0x000178, "Member 'UBP_CleaningAnimalComponent_V2_C::OnStopHoldingBrush' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, BP_NikkiIdleAnim) == 0x000188, "Member 'UBP_CleaningAnimalComponent_V2_C::BP_NikkiIdleAnim' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, CachedCleanAnimations) == 0x000190, "Member 'UBP_CleaningAnimalComponent_V2_C::CachedCleanAnimations' has a wrong offset!");
static_assert(offsetof(UBP_CleaningAnimalComponent_V2_C, TargetMontage) == 0x0001A0, "Member 'UBP_CleaningAnimalComponent_V2_C::TargetMontage' has a wrong offset!");

}

