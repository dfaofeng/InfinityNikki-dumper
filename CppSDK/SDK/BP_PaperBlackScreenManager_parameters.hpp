#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PaperBlackScreenManager

#include "Basic.hpp"

#include "Enum_BlackScreenEvent_structs.hpp"
#include "Enum_BlackScreenSource_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_PaperBlackScreenManager.BP_PaperBlackScreenManager_C.RequestBlackScreenWait
// 0x0004 (0x0004 - 0x0000)
struct BP_PaperBlackScreenManager_C_RequestBlackScreenWait final
{
public:
	int32                                         WaitHandle;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaperBlackScreenManager_C_RequestBlackScreenWait) == 0x000004, "Wrong alignment on BP_PaperBlackScreenManager_C_RequestBlackScreenWait");
static_assert(sizeof(BP_PaperBlackScreenManager_C_RequestBlackScreenWait) == 0x000004, "Wrong size on BP_PaperBlackScreenManager_C_RequestBlackScreenWait");
static_assert(offsetof(BP_PaperBlackScreenManager_C_RequestBlackScreenWait, WaitHandle) == 0x000000, "Member 'BP_PaperBlackScreenManager_C_RequestBlackScreenWait::WaitHandle' has a wrong offset!");

// Function BP_PaperBlackScreenManager.BP_PaperBlackScreenManager_C.EnterBlackScreen
// 0x0058 (0x0058 - 0x0000)
struct BP_PaperBlackScreenManager_C_EnterBlackScreen final
{
public:
	Enum_BlackScreenSource                        BlackScreenSource;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Context;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 FadeOutEndCallback;                                // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 FadeInStartCallback;                               // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 FadeInEndCallback;                                 // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          bNoFadeOut;                                        // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FadeColor;                                         // 0x0044(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoFadeIn;                                         // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaperBlackScreenManager_C_EnterBlackScreen) == 0x000008, "Wrong alignment on BP_PaperBlackScreenManager_C_EnterBlackScreen");
static_assert(sizeof(BP_PaperBlackScreenManager_C_EnterBlackScreen) == 0x000058, "Wrong size on BP_PaperBlackScreenManager_C_EnterBlackScreen");
static_assert(offsetof(BP_PaperBlackScreenManager_C_EnterBlackScreen, BlackScreenSource) == 0x000000, "Member 'BP_PaperBlackScreenManager_C_EnterBlackScreen::BlackScreenSource' has a wrong offset!");
static_assert(offsetof(BP_PaperBlackScreenManager_C_EnterBlackScreen, Context) == 0x000008, "Member 'BP_PaperBlackScreenManager_C_EnterBlackScreen::Context' has a wrong offset!");
static_assert(offsetof(BP_PaperBlackScreenManager_C_EnterBlackScreen, FadeOutEndCallback) == 0x000010, "Member 'BP_PaperBlackScreenManager_C_EnterBlackScreen::FadeOutEndCallback' has a wrong offset!");
static_assert(offsetof(BP_PaperBlackScreenManager_C_EnterBlackScreen, FadeInStartCallback) == 0x000020, "Member 'BP_PaperBlackScreenManager_C_EnterBlackScreen::FadeInStartCallback' has a wrong offset!");
static_assert(offsetof(BP_PaperBlackScreenManager_C_EnterBlackScreen, FadeInEndCallback) == 0x000030, "Member 'BP_PaperBlackScreenManager_C_EnterBlackScreen::FadeInEndCallback' has a wrong offset!");
static_assert(offsetof(BP_PaperBlackScreenManager_C_EnterBlackScreen, bNoFadeOut) == 0x000040, "Member 'BP_PaperBlackScreenManager_C_EnterBlackScreen::bNoFadeOut' has a wrong offset!");
static_assert(offsetof(BP_PaperBlackScreenManager_C_EnterBlackScreen, FadeColor) == 0x000044, "Member 'BP_PaperBlackScreenManager_C_EnterBlackScreen::FadeColor' has a wrong offset!");
static_assert(offsetof(BP_PaperBlackScreenManager_C_EnterBlackScreen, bNoFadeIn) == 0x000054, "Member 'BP_PaperBlackScreenManager_C_EnterBlackScreen::bNoFadeIn' has a wrong offset!");

// Function BP_PaperBlackScreenManager.BP_PaperBlackScreenManager_C.CancelBlackScreenWait
// 0x0004 (0x0004 - 0x0000)
struct BP_PaperBlackScreenManager_C_CancelBlackScreenWait final
{
public:
	int32                                         WaitHandle;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaperBlackScreenManager_C_CancelBlackScreenWait) == 0x000004, "Wrong alignment on BP_PaperBlackScreenManager_C_CancelBlackScreenWait");
static_assert(sizeof(BP_PaperBlackScreenManager_C_CancelBlackScreenWait) == 0x000004, "Wrong size on BP_PaperBlackScreenManager_C_CancelBlackScreenWait");
static_assert(offsetof(BP_PaperBlackScreenManager_C_CancelBlackScreenWait, WaitHandle) == 0x000000, "Member 'BP_PaperBlackScreenManager_C_CancelBlackScreenWait::WaitHandle' has a wrong offset!");

// Function BP_PaperBlackScreenManager.BP_PaperBlackScreenManager_C.BroadcastBlackScreenEvent
// 0x0003 (0x0003 - 0x0000)
struct BP_PaperBlackScreenManager_C_BroadcastBlackScreenEvent final
{
public:
	Enum_BlackScreenEvent                         Event;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_BlackScreenSource                        Source;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaperBlackScreenManager_C_BroadcastBlackScreenEvent) == 0x000001, "Wrong alignment on BP_PaperBlackScreenManager_C_BroadcastBlackScreenEvent");
static_assert(sizeof(BP_PaperBlackScreenManager_C_BroadcastBlackScreenEvent) == 0x000003, "Wrong size on BP_PaperBlackScreenManager_C_BroadcastBlackScreenEvent");
static_assert(offsetof(BP_PaperBlackScreenManager_C_BroadcastBlackScreenEvent, Event) == 0x000000, "Member 'BP_PaperBlackScreenManager_C_BroadcastBlackScreenEvent::Event' has a wrong offset!");
static_assert(offsetof(BP_PaperBlackScreenManager_C_BroadcastBlackScreenEvent, Source) == 0x000001, "Member 'BP_PaperBlackScreenManager_C_BroadcastBlackScreenEvent::Source' has a wrong offset!");
static_assert(offsetof(BP_PaperBlackScreenManager_C_BroadcastBlackScreenEvent, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'BP_PaperBlackScreenManager_C_BroadcastBlackScreenEvent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PaperBlackScreenManager.BP_PaperBlackScreenManager_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_PaperBlackScreenManager_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaperBlackScreenManager_C_GetModuleName) == 0x000008, "Wrong alignment on BP_PaperBlackScreenManager_C_GetModuleName");
static_assert(sizeof(BP_PaperBlackScreenManager_C_GetModuleName) == 0x000010, "Wrong size on BP_PaperBlackScreenManager_C_GetModuleName");
static_assert(offsetof(BP_PaperBlackScreenManager_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_PaperBlackScreenManager_C_GetModuleName::ReturnValue' has a wrong offset!");

}

