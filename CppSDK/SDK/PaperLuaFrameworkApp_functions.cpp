#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperLuaFrameworkApp

#include "Basic.hpp"

#include "PaperLuaFrameworkApp_classes.hpp"
#include "PaperLuaFrameworkApp_parameters.hpp"


namespace SDK
{

// Function PaperLuaFrameworkApp.PaperDeviceFilterManager.SetDeviceMatchingRulesByJson
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperDeviceFilterManager::SetDeviceMatchingRulesByJson(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperDeviceFilterManager", "SetDeviceMatchingRulesByJson");

	Params::PaperDeviceFilterManager_SetDeviceMatchingRulesByJson Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperDeviceFilterManager.ShouldFilter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperDeviceFilterManager::ShouldFilter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperDeviceFilterManager", "ShouldFilter");

	Params::PaperDeviceFilterManager_ShouldFilter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperDeviceFilterManager.ShouldForceQuit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperDeviceFilterManager::ShouldForceQuit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperDeviceFilterManager", "ShouldForceQuit");

	Params::PaperDeviceFilterManager_ShouldForceQuit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotFixMgr.ApplyHotFix
// (Final, Native, Public)
// Parameters:
// const TArray<class FString>&            PakFiles                                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPaperHotFixMgr::ApplyHotFix(const TArray<class FString>& PakFiles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotFixMgr", "ApplyHotFix");

	Params::PaperHotFixMgr_ApplyHotFix Parms{};

	Parms.PakFiles = std::move(PakFiles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotFixMgr.ReloadGamePlayCue
// (Final, Native, Public)

void UPaperHotFixMgr::ReloadGamePlayCue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotFixMgr", "ReloadGamePlayCue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CopyPaksTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SrcDir                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SrcPakPattern                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DstDir                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::CopyPaksTo(const class FString& SrcDir, const class FString& SrcPakPattern, const class FString& DstDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperHotUpdateMgr", "CopyPaksTo");

	Params::PaperHotUpdateMgr_CopyPaksTo Parms{};

	Parms.SrcDir = std::move(SrcDir);
	Parms.SrcPakPattern = std::move(SrcPakPattern);
	Parms.DstDir = std::move(DstDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetHotUpdateCompleteMapName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UPaperHotUpdateMgr::GetHotUpdateCompleteMapName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperHotUpdateMgr", "GetHotUpdateCompleteMapName");

	Params::PaperHotUpdateMgr_GetHotUpdateCompleteMapName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetPackageVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPaperHotUpdateMgr::GetPackageVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperHotUpdateMgr", "GetPackageVersion");

	Params::PaperHotUpdateMgr_GetPackageVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetStorePackageVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPaperHotUpdateMgr::GetStorePackageVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperHotUpdateMgr", "GetStorePackageVersion");

	Params::PaperHotUpdateMgr_GetStorePackageVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetUnZipProgress
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPaperHotUpdateMgr::GetUnZipProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperHotUpdateMgr", "GetUnZipProgress");

	Params::PaperHotUpdateMgr_GetUnZipProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.IsEncryptionEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::IsEncryptionEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperHotUpdateMgr", "IsEncryptionEnabled");

	Params::PaperHotUpdateMgr_IsEncryptionEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.IsPaperAccessContentEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::IsPaperAccessContentEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperHotUpdateMgr", "IsPaperAccessContentEnabled");

	Params::PaperHotUpdateMgr_IsPaperAccessContentEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.IsPaperAccessContentInClient
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::IsPaperAccessContentInClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperHotUpdateMgr", "IsPaperAccessContentInClient");

	Params::PaperHotUpdateMgr_IsPaperAccessContentInClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.IsSigningEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::IsSigningEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperHotUpdateMgr", "IsSigningEnabled");

	Params::PaperHotUpdateMgr_IsSigningEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.PaperAssetPathToFilePath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InAssetPath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsMap                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPaperHotUpdateMgr::PaperAssetPathToFilePath(const class FString& InAssetPath, bool IsMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperHotUpdateMgr", "PaperAssetPathToFilePath");

	Params::PaperHotUpdateMgr_PaperAssetPathToFilePath Parms{};

	Parms.InAssetPath = std::move(InAssetPath);
	Parms.IsMap = IsMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.UnZipFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    SrcZipPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DstDir                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(bool Success)>&    OnEnded                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::UnZipFile(const class FString& SrcZipPath, const class FString& DstDir, const TDelegate<void(bool Success)>& OnEnded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperHotUpdateMgr", "UnZipFile");

	Params::PaperHotUpdateMgr_UnZipFile Parms{};

	Parms.SrcZipPath = std::move(SrcZipPath);
	Parms.DstDir = std::move(DstDir);
	Parms.OnEnded = OnEnded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.ApplyHotFix
// (Final, Native, Public, BlueprintCallable)

void UPaperHotUpdateMgr::ApplyHotFix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "ApplyHotFix");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.AsyncExtractPakTask
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DownloadDir                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Version                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::AsyncExtractPakTask(const class FString& DownloadDir, const class FString& Version)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "AsyncExtractPakTask");

	Params::PaperHotUpdateMgr_AsyncExtractPakTask Parms{};

	Parms.DownloadDir = std::move(DownloadDir);
	Parms.Version = std::move(Version);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.AsyncExtractSoFilesInPakTask
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DownloadDir                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Version                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::AsyncExtractSoFilesInPakTask(const class FString& DownloadDir, const class FString& Version)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "AsyncExtractSoFilesInPakTask");

	Params::PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask Parms{};

	Parms.DownloadDir = std::move(DownloadDir);
	Parms.Version = std::move(Version);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.BackGroundDeleteDir
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DeleteDir                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::BackGroundDeleteDir(const class FString& DeleteDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "BackGroundDeleteDir");

	Params::PaperHotUpdateMgr_BackGroundDeleteDir Parms{};

	Parms.DeleteDir = std::move(DeleteDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.BootLauncher
// (Final, Native, Public, BlueprintCallable)

void UPaperHotUpdateMgr::BootLauncher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "BootLauncher");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.BroadcastOnHotUpdateCompleted
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    IsSuccess                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          StatusString                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::BroadcastOnHotUpdateCompleted(bool IsSuccess, class FString* StatusString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "BroadcastOnHotUpdateCompleted");

	Params::PaperHotUpdateMgr_BroadcastOnHotUpdateCompleted Parms{};

	Parms.IsSuccess = IsSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (StatusString != nullptr)
		*StatusString = std::move(Parms.StatusString);
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.BroadcastOnHotUpdateStart
// (Final, Native, Public, BlueprintCallable)

void UPaperHotUpdateMgr::BroadcastOnHotUpdateStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "BroadcastOnHotUpdateStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CheckOldDownloadData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            FlagFiles                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    VersionInfoFile                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::CheckOldDownloadData(const TArray<class FString>& FlagFiles, const class FString& VersionInfoFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "CheckOldDownloadData");

	Params::PaperHotUpdateMgr_CheckOldDownloadData Parms{};

	Parms.FlagFiles = std::move(FlagFiles);
	Parms.VersionInfoFile = std::move(VersionInfoFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CleanExpiredPaks
// (Final, Native, Public, BlueprintCallable)

void UPaperHotUpdateMgr::CleanExpiredPaks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "CleanExpiredPaks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CloseShaderbytecode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    LibraryName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::CloseShaderbytecode(const class FString& LibraryName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "CloseShaderbytecode");

	Params::PaperHotUpdateMgr_CloseShaderbytecode Parms{};

	Parms.LibraryName = std::move(LibraryName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CreateDeleteRecordPak
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    LocalVersion_0                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PatchVersion                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            DeleteRecordPakContents                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::CreateDeleteRecordPak(const class FString& LocalVersion_0, const class FString& PatchVersion, const TArray<class FString>& DeleteRecordPakContents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "CreateDeleteRecordPak");

	Params::PaperHotUpdateMgr_CreateDeleteRecordPak Parms{};

	Parms.LocalVersion_0 = std::move(LocalVersion_0);
	Parms.PatchVersion = std::move(PatchVersion);
	Parms.DeleteRecordPakContents = std::move(DeleteRecordPakContents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CreateDynamicKeyChain
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    InKeyChainName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    DataBuffer                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::CreateDynamicKeyChain(const class FString& InKeyChainName, const TArray<uint8>& DataBuffer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "CreateDynamicKeyChain");

	Params::PaperHotUpdateMgr_CreateDynamicKeyChain Parms{};

	Parms.InKeyChainName = std::move(InKeyChainName);
	Parms.DataBuffer = std::move(DataBuffer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CreateDynamicKeyChainByBase64String
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InKeyChainName                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Base64Data                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::CreateDynamicKeyChainByBase64String(const class FString& InKeyChainName, const class FString& Base64Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "CreateDynamicKeyChainByBase64String");

	Params::PaperHotUpdateMgr_CreateDynamicKeyChainByBase64String Parms{};

	Parms.InKeyChainName = std::move(InKeyChainName);
	Parms.Base64Data = std::move(Base64Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.ExtractPakFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SrcFilePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DstDir                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Version                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseMountPoint                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPakExtractResult                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPakExtractResult UPaperHotUpdateMgr::ExtractPakFile(const class FString& SrcFilePath, const class FString& DstDir, const class FString& Version, bool bUseMountPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "ExtractPakFile");

	Params::PaperHotUpdateMgr_ExtractPakFile Parms{};

	Parms.SrcFilePath = std::move(SrcFilePath);
	Parms.DstDir = std::move(DstDir);
	Parms.Version = std::move(Version);
	Parms.bUseMountPoint = bUseMountPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetBaseHashDataTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ResponseCode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::GetBaseHashDataTable(bool bSuccess, int32 ResponseCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetBaseHashDataTable");

	Params::PaperHotUpdateMgr_GetBaseHashDataTable Parms{};

	Parms.bSuccess = bSuccess;
	Parms.ResponseCode = ResponseCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetCheckRepairProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPaperHotUpdateMgr::GetCheckRepairProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetCheckRepairProgress");

	Params::PaperHotUpdateMgr_GetCheckRepairProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetCmsURL
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Mode                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          URL                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::GetCmsURL(const class FString& Mode, class FString* URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetCmsURL");

	Params::PaperHotUpdateMgr_GetCmsURL Parms{};

	Parms.Mode = std::move(Mode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (URL != nullptr)
		*URL = std::move(Parms.URL);
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetExtractPaksProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPaperHotUpdateMgr::GetExtractPaksProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetExtractPaksProgress");

	Params::PaperHotUpdateMgr_GetExtractPaksProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetKeyChainNonDynamicGroups
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InKeyChainName                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UPaperHotUpdateMgr::GetKeyChainNonDynamicGroups(const class FString& InKeyChainName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetKeyChainNonDynamicGroups");

	Params::PaperHotUpdateMgr_GetKeyChainNonDynamicGroups Parms{};

	Parms.InKeyChainName = std::move(InKeyChainName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetMicroCodeVersion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPaperHotUpdateMgr::GetMicroCodeVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetMicroCodeVersion");

	Params::PaperHotUpdateMgr_GetMicroCodeVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetMotherBoardInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPaperHotUpdateMgr::GetMotherBoardInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetMotherBoardInfo");

	Params::PaperHotUpdateMgr_GetMotherBoardInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetMovePaksProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPaperHotUpdateMgr::GetMovePaksProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetMovePaksProgress");

	Params::PaperHotUpdateMgr_GetMovePaksProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetNewerPaklistFromFileInfo
// (Final, Native, Public, BlueprintCallable)

void UPaperHotUpdateMgr::GetNewerPaklistFromFileInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetNewerPaklistFromFileInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetRemoteFilePakHashMapCacheAsync
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    RemoteVersion_0                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InRemoteUrl                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LocalVersion_0                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InLocalUrl                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InVersionKey                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            InPakStarts                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FString>&            InFilterPaks                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    InbUseIoStore                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::GetRemoteFilePakHashMapCacheAsync(const class FString& RemoteVersion_0, const class FString& InRemoteUrl, const class FString& LocalVersion_0, const class FString& InLocalUrl, const class FString& InVersionKey, const TArray<class FString>& InPakStarts, const TArray<class FString>& InFilterPaks, bool InbUseIoStore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetRemoteFilePakHashMapCacheAsync");

	Params::PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync Parms{};

	Parms.RemoteVersion_0 = std::move(RemoteVersion_0);
	Parms.InRemoteUrl = std::move(InRemoteUrl);
	Parms.LocalVersion_0 = std::move(LocalVersion_0);
	Parms.InLocalUrl = std::move(InLocalUrl);
	Parms.InVersionKey = std::move(InVersionKey);
	Parms.InPakStarts = std::move(InPakStarts);
	Parms.InFilterPaks = std::move(InFilterPaks);
	Parms.InbUseIoStore = InbUseIoStore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetRemoteHashDataTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ResponseCode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::GetRemoteHashDataTable(bool bSuccess, int32 ResponseCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetRemoteHashDataTable");

	Params::PaperHotUpdateMgr_GetRemoteHashDataTable Parms{};

	Parms.bSuccess = bSuccess;
	Parms.ResponseCode = ResponseCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetSavedPaksInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>*                  SavedPaksInfo                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::GetSavedPaksInfo(TArray<class FString>* SavedPaksInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "GetSavedPaksInfo");

	Params::PaperHotUpdateMgr_GetSavedPaksInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SavedPaksInfo != nullptr)
		*SavedPaksInfo = std::move(Parms.SavedPaksInfo);
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.HotUpdateHashCheckCall
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Version                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>*                          InPaperHashStructData                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<uint8>*                          InShaderHashData                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<uint8>*                          InFastPatchData                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>*                  BlackList                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::HotUpdateHashCheckCall(const class FString& Version, TArray<uint8>* InPaperHashStructData, TArray<uint8>* InShaderHashData, TArray<uint8>* InFastPatchData, TArray<class FString>* BlackList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "HotUpdateHashCheckCall");

	Params::PaperHotUpdateMgr_HotUpdateHashCheckCall Parms{};

	Parms.Version = std::move(Version);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InPaperHashStructData != nullptr)
		*InPaperHashStructData = std::move(Parms.InPaperHashStructData);

	if (InShaderHashData != nullptr)
		*InShaderHashData = std::move(Parms.InShaderHashData);

	if (InFastPatchData != nullptr)
		*InFastPatchData = std::move(Parms.InFastPatchData);

	if (BlackList != nullptr)
		*BlackList = std::move(Parms.BlackList);
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.IsLoadingScreenFinished
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::IsLoadingScreenFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "IsLoadingScreenFinished");

	Params::PaperHotUpdateMgr_IsLoadingScreenFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.LoadShaderbytecode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    LibraryName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LibraryDir                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::LoadShaderbytecode(const class FString& LibraryName, const class FString& LibraryDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "LoadShaderbytecode");

	Params::PaperHotUpdateMgr_LoadShaderbytecode Parms{};

	Parms.LibraryName = std::move(LibraryName);
	Parms.LibraryDir = std::move(LibraryDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.LoadSinglePakMap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FString, class FString>*     SinglePakMap                                           (Parm, OutParm, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::LoadSinglePakMap(TMap<class FString, class FString>* SinglePakMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "LoadSinglePakMap");

	Params::PaperHotUpdateMgr_LoadSinglePakMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SinglePakMap != nullptr)
		*SinglePakMap = std::move(Parms.SinglePakMap);
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.MountAllPakFiles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PakFolder                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    CurrentVersion                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::MountAllPakFiles(const class FString& PakFolder, const class FString& CurrentVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "MountAllPakFiles");

	Params::PaperHotUpdateMgr_MountAllPakFiles Parms{};

	Parms.PakFolder = std::move(PakFolder);
	Parms.CurrentVersion = std::move(CurrentVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.MovePaksToMountDir
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TMap<class FString, class FString>&MoveTaskTb                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bNeedReboot                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::MovePaksToMountDir(const TMap<class FString, class FString>& MoveTaskTb, bool bNeedReboot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "MovePaksToMountDir");

	Params::PaperHotUpdateMgr_MovePaksToMountDir Parms{};

	Parms.MoveTaskTb = std::move(MoveTaskTb);
	Parms.bNeedReboot = bNeedReboot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.NeedRebootOrNot
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            InstallTags                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::NeedRebootOrNot(const TArray<class FString>& InstallTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "NeedRebootOrNot");

	Params::PaperHotUpdateMgr_NeedRebootOrNot Parms{};

	Parms.InstallTags = std::move(InstallTags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.NeedRebootOrNotWithFileName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InstallFileName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::NeedRebootOrNotWithFileName(const class FString& InstallFileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "NeedRebootOrNotWithFileName");

	Params::PaperHotUpdateMgr_NeedRebootOrNotWithFileName Parms{};

	Parms.InstallFileName = std::move(InstallFileName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.PatchAllBinaryDiffs
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    PatchVersion                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  FailedFiles                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::PatchAllBinaryDiffs(const class FString& PatchVersion, TArray<class FString>* FailedFiles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "PatchAllBinaryDiffs");

	Params::PaperHotUpdateMgr_PatchAllBinaryDiffs Parms{};

	Parms.PatchVersion = std::move(PatchVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FailedFiles != nullptr)
		*FailedFiles = std::move(Parms.FailedFiles);

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.PatchFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          PatchedFilename                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>*     SinglePakMap                                           (Parm, OutParm, NativeAccessSpecifierPublic)
// const class FString&                    LocalVersion_0                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PatchVersion                                           (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::PatchFile(const class FString& FilePath, class FString* PatchedFilename, TMap<class FString, class FString>* SinglePakMap, const class FString& LocalVersion_0, const class FString& PatchVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "PatchFile");

	Params::PaperHotUpdateMgr_PatchFile Parms{};

	Parms.FilePath = std::move(FilePath);
	Parms.LocalVersion_0 = std::move(LocalVersion_0);
	Parms.PatchVersion = std::move(PatchVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PatchedFilename != nullptr)
		*PatchedFilename = std::move(Parms.PatchedFilename);

	if (SinglePakMap != nullptr)
		*SinglePakMap = std::move(Parms.SinglePakMap);

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.PreSerializeVersionInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TMap<class FString, class FString>&VersionStrMap                                          (Parm, NativeAccessSpecifierPublic)
// const class FString&                    DownloadDir                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::PreSerializeVersionInfo(const TMap<class FString, class FString>& VersionStrMap, const class FString& DownloadDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "PreSerializeVersionInfo");

	Params::PaperHotUpdateMgr_PreSerializeVersionInfo Parms{};

	Parms.VersionStrMap = std::move(VersionStrMap);
	Parms.DownloadDir = std::move(DownloadDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.RefreshDynamicKeyWithGroupIDForAllVersion
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            RequestGroupIDs                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&DelayGroups                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::RefreshDynamicKeyWithGroupIDForAllVersion(const TArray<class FString>& RequestGroupIDs, const TMap<class FString, class FString>& DelayGroups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "RefreshDynamicKeyWithGroupIDForAllVersion");

	Params::PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForAllVersion Parms{};

	Parms.RequestGroupIDs = std::move(RequestGroupIDs);
	Parms.DelayGroups = std::move(DelayGroups);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.RefreshDynamicKeyWithGroupIDForCurVersion
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            RequestGroupIDs                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    CurVersion                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::RefreshDynamicKeyWithGroupIDForCurVersion(const TArray<class FString>& RequestGroupIDs, const class FString& CurVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "RefreshDynamicKeyWithGroupIDForCurVersion");

	Params::PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForCurVersion Parms{};

	Parms.RequestGroupIDs = std::move(RequestGroupIDs);
	Parms.CurVersion = std::move(CurVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.RegisterDynamicKeyChain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InKeyChainName                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::RegisterDynamicKeyChain(const class FString& InKeyChainName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "RegisterDynamicKeyChain");

	Params::PaperHotUpdateMgr_RegisterDynamicKeyChain Parms{};

	Parms.InKeyChainName = std::move(InKeyChainName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.RegularMoveFileTask
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TMap<class FString, class FString>&MoveTaskTb                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::RegularMoveFileTask(const TMap<class FString, class FString>& MoveTaskTb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "RegularMoveFileTask");

	Params::PaperHotUpdateMgr_RegularMoveFileTask Parms{};

	Parms.MoveTaskTb = std::move(MoveTaskTb);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.ReloadPakReaders
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::ReloadPakReaders()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "ReloadPakReaders");

	Params::PaperHotUpdateMgr_ReloadPakReaders Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.RequestDynamicKeysWithVersions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            Versions                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::RequestDynamicKeysWithVersions(const TArray<class FString>& Versions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "RequestDynamicKeysWithVersions");

	Params::PaperHotUpdateMgr_RequestDynamicKeysWithVersions Parms{};

	Parms.Versions = std::move(Versions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.ResetExtractMoveProgress
// (Final, Native, Public, BlueprintCallable)

void UPaperHotUpdateMgr::ResetExtractMoveProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "ResetExtractMoveProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SaveSinglePakMap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FString, class FString>*     SinglePakMap                                           (Parm, OutParm, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SaveSinglePakMap(TMap<class FString, class FString>* SinglePakMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SaveSinglePakMap");

	Params::PaperHotUpdateMgr_SaveSinglePakMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SinglePakMap != nullptr)
		*SinglePakMap = std::move(Parms.SinglePakMap);
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SerializeGroupFromBase64Data
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InKeyChainName                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GroupID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Base64Data                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SerializeGroupFromBase64Data(const class FString& InKeyChainName, const class FString& GroupID, const class FString& Base64Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SerializeGroupFromBase64Data");

	Params::PaperHotUpdateMgr_SerializeGroupFromBase64Data Parms{};

	Parms.InKeyChainName = std::move(InKeyChainName);
	Parms.GroupID = std::move(GroupID);
	Parms.Base64Data = std::move(Base64Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SerializeGroupFromDataBuffer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    InKeyChainName                                         (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    GroupID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    GroupDataBuffer                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SerializeGroupFromDataBuffer(const class FString& InKeyChainName, const class FString& GroupID, const TArray<uint8>& GroupDataBuffer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SerializeGroupFromDataBuffer");

	Params::PaperHotUpdateMgr_SerializeGroupFromDataBuffer Parms{};

	Parms.InKeyChainName = std::move(InKeyChainName);
	Parms.GroupID = std::move(GroupID);
	Parms.GroupDataBuffer = std::move(GroupDataBuffer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetAbortAssetCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SetAbortAssetCheck(bool InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SetAbortAssetCheck");

	Params::PaperHotUpdateMgr_SetAbortAssetCheck Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetCheckRepairProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InCheckRepairProgress                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SetCheckRepairProgress(float InCheckRepairProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SetCheckRepairProgress");

	Params::PaperHotUpdateMgr_SetCheckRepairProgress Parms{};

	Parms.InCheckRepairProgress = InCheckRepairProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetDownloadMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SetDownloadMode(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SetDownloadMode");

	Params::PaperHotUpdateMgr_SetDownloadMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetDynamicKeyChainHttpBaseURL
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InHttpBaseURL                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SetDynamicKeyChainHttpBaseURL(const class FString& InHttpBaseURL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SetDynamicKeyChainHttpBaseURL");

	Params::PaperHotUpdateMgr_SetDynamicKeyChainHttpBaseURL Parms{};

	Parms.InHttpBaseURL = std::move(InHttpBaseURL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   QualityLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LevelID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile(int32 QualityLevel, int32 LevelID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile");

	Params::PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile Parms{};

	Parms.QualityLevel = QualityLevel;
	Parms.LevelID = LevelID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetPSOCacheMaterialQualityLevelMaskForMobile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   QualityLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SetPSOCacheMaterialQualityLevelMaskForMobile(int32 QualityLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SetPSOCacheMaterialQualityLevelMaskForMobile");

	Params::PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelMaskForMobile Parms{};

	Parms.QualityLevel = QualityLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetUrlWithTimeStamp
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString*                          URL                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SetUrlWithTimeStamp(class FString* URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SetUrlWithTimeStamp");

	Params::PaperHotUpdateMgr_SetUrlWithTimeStamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (URL != nullptr)
		*URL = std::move(Parms.URL);
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SmallestPackageWithBasePak
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ResponseCode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SmallestPackageWithBasePak(bool bSuccess, int32 ResponseCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SmallestPackageWithBasePak");

	Params::PaperHotUpdateMgr_SmallestPackageWithBasePak Parms{};

	Parms.bSuccess = bSuccess;
	Parms.ResponseCode = ResponseCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SmallestPackageWithDelayPak
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ResponseCode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::SmallestPackageWithDelayPak(bool bSuccess, int32 ResponseCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SmallestPackageWithDelayPak");

	Params::PaperHotUpdateMgr_SmallestPackageWithDelayPak Parms{};

	Parms.bSuccess = bSuccess;
	Parms.ResponseCode = ResponseCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.StartCheckDelay
// (Final, Native, Public, BlueprintCallable)

void UPaperHotUpdateMgr::StartCheckDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "StartCheckDelay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.StartCheckHotUpdate
// (Final, Native, Public, BlueprintCallable)

void UPaperHotUpdateMgr::StartCheckHotUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "StartCheckHotUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SwitchToDefaultGameInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::SwitchToDefaultGameInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SwitchToDefaultGameInstance");

	Params::PaperHotUpdateMgr_SwitchToDefaultGameInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SwitchToDefaultGameMode
// (Final, Native, Public, BlueprintCallable)

void UPaperHotUpdateMgr::SwitchToDefaultGameMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "SwitchToDefaultGameMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.UnMountAllPakFiles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    PakFolder                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::UnMountAllPakFiles(const class FString& PakFolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "UnMountAllPakFiles");

	Params::PaperHotUpdateMgr_UnMountAllPakFiles Parms{};

	Parms.PakFolder = std::move(PakFolder);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.UnMountAndDeleteHotUpdatePaks
// (Final, Native, Public, BlueprintCallable)

void UPaperHotUpdateMgr::UnMountAndDeleteHotUpdatePaks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "UnMountAndDeleteHotUpdatePaks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.UnMountAndDeleteSavedPaks
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            PakNameList                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bCleanFileName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAsyncExecute                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::UnMountAndDeleteSavedPaks(const TArray<class FString>& PakNameList, bool bCleanFileName, bool bAsyncExecute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "UnMountAndDeleteSavedPaks");

	Params::PaperHotUpdateMgr_UnMountAndDeleteSavedPaks Parms{};

	Parms.PakNameList = std::move(PakNameList);
	Parms.bCleanFileName = bCleanFileName;
	Parms.bAsyncExecute = bAsyncExecute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.UnMountAndDeleteSavedPaksByPakPrefix
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            PakPrefixList                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateMgr::UnMountAndDeleteSavedPaksByPakPrefix(const TArray<class FString>& PakPrefixList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "UnMountAndDeleteSavedPaksByPakPrefix");

	Params::PaperHotUpdateMgr_UnMountAndDeleteSavedPaksByPakPrefix Parms{};

	Parms.PakPrefixList = std::move(PakPrefixList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.UpdateDelaySinglePakMap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            OldSingleTags                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    LocalVersion_0                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RemoteVersion_0                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::UpdateDelaySinglePakMap(const TArray<class FString>& OldSingleTags, const class FString& LocalVersion_0, const class FString& RemoteVersion_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "UpdateDelaySinglePakMap");

	Params::PaperHotUpdateMgr_UpdateDelaySinglePakMap Parms{};

	Parms.OldSingleTags = std::move(OldSingleTags);
	Parms.LocalVersion_0 = std::move(LocalVersion_0);
	Parms.RemoteVersion_0 = std::move(RemoteVersion_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.WaitForShaderCache
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float*                                  Progress                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateMgr::WaitForShaderCache(float* Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateMgr", "WaitForShaderCache");

	Params::PaperHotUpdateMgr_WaitForShaderCache Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Progress != nullptr)
		*Progress = Parms.Progress;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateRpc.GetServiceIPWithPort
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPaperHotUpdateRpc::GetServiceIPWithPort()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateRpc", "GetServiceIPWithPort");

	Params::PaperHotUpdateRpc_GetServiceIPWithPort Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateRpc.StartListening
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateRpc::StartListening()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateRpc", "StartListening");

	Params::PaperHotUpdateRpc_StartListening Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateRpc.StopListening
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperHotUpdateRpc::StopListening()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateRpc", "StopListening");

	Params::PaperHotUpdateRpc_StopListening Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateRuntimeBGCommandlet.OnHotUpdateCompleted
// (Final, Native, Private)
// Parameters:
// bool                                    IsSuccess                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StatusString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperHotUpdateRuntimeBGCommandlet::OnHotUpdateCompleted(bool IsSuccess, const class FString& StatusString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateRuntimeBGCommandlet", "OnHotUpdateCompleted");

	Params::PaperHotUpdateRuntimeBGCommandlet_OnHotUpdateCompleted Parms{};

	Parms.IsSuccess = IsSuccess;
	Parms.StatusString = std::move(StatusString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateSubsystem.GetPaperDeviceFilterManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPaperDeviceFilterManager*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPaperDeviceFilterManager* UPaperHotUpdateSubsystem::GetPaperDeviceFilterManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateSubsystem", "GetPaperDeviceFilterManager");

	Params::PaperHotUpdateSubsystem_GetPaperDeviceFilterManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateSubsystem.GetPaperHotUpdateMgr
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPaperHotUpdateMgr*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPaperHotUpdateMgr* UPaperHotUpdateSubsystem::GetPaperHotUpdateMgr() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateSubsystem", "GetPaperHotUpdateMgr");

	Params::PaperHotUpdateSubsystem_GetPaperHotUpdateMgr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperHotUpdateSubsystem.GetPaperHotUpdateRpc
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPaperHotUpdateRpc*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPaperHotUpdateRpc* UPaperHotUpdateSubsystem::GetPaperHotUpdateRpc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperHotUpdateSubsystem", "GetPaperHotUpdateRpc");

	Params::PaperHotUpdateSubsystem_GetPaperHotUpdateRpc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperLuaFrameworkApp.PaperPrivacyManager.EnableMotionSensor
// (Final, Native, Static, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperPrivacyManager::EnableMotionSensor(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperPrivacyManager", "EnableMotionSensor");

	Params::PaperPrivacyManager_EnableMotionSensor Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperLuaFrameworkApp.PaperPrivacyManager.LateInitSensors
// (Final, Native, Static, Public, BlueprintCallable)

void UPaperPrivacyManager::LateInitSensors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperPrivacyManager", "LateInitSensors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

