#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicEnvironmentSystem

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum DynamicEnvironmentSystem.EWeatherCollisionShape
// NumValues: 0x0005
enum class EWeatherCollisionShape : uint8
{
	Box                                      = 0,
	Sphere                                   = 1,
	Capsule                                  = 2,
	Volume                                   = 3,
	MAX                                      = 4,
};

// Enum DynamicEnvironmentSystem.EWeatherAmbianceComponentType
// NumValues: 0x000C
enum class EWeatherAmbianceComponentType : uint8
{
	TimeOfDay                                = 0,
	SingleWeather                            = 1,
	SunAndSkyLight                           = 2,
	SkyAtmosphere                            = 3,
	ExponentialHeightFog                     = 4,
	PostProcessing                           = 5,
	EnvironmentShading                       = 6,
	CharacterLighting                        = 7,
	WeatherComponent                         = 8,
	OverrideAllMode                          = 9,
	Curve24H                                 = 10,
	MAX                                      = 11,
};

// Enum DynamicEnvironmentSystem.EWeatherVolumeType
// NumValues: 0x000C
enum class EWeatherVolumeType : uint8
{
	TimeOfDay                                = 0,
	SingleWeather                            = 1,
	SunAndSkyLight                           = 2,
	SkyAtmosphere                            = 3,
	ExponentialHeightFog                     = 4,
	PostProcessing                           = 5,
	EnvironmentShading                       = 6,
	CharacterLighting                        = 7,
	WeatherComponent                         = 8,
	OverrideAllMode                          = 9,
	Curve24H                                 = 10,
	MAX                                      = 11,
};

// Enum DynamicEnvironmentSystem.EWeatherEnableMode
// NumValues: 0x0004
enum class EWeatherEnableMode : uint8
{
	Default                                  = 0,
	PCOnly                                   = 1,
	MobileOnly                               = 2,
	MAX                                      = 3,
};

// Enum DynamicEnvironmentSystem.EWeatherEffectType
// NumValues: 0x0003
enum class EWeatherEffectType : uint8
{
	NonParticle                              = 0,
	Particle                                 = 1,
	MAX                                      = 2,
};

// ScriptStruct DynamicEnvironmentSystem.WeatherEnableOnGI
// 0x0001 (0x0001 - 0x0000)
struct FWeatherEnableOnGI final
{
public:
	uint8                                         bSkyLight : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnlighten : 1;                                    // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFRXGI : 1;                                        // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLumen : 1;                                        // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FWeatherEnableOnGI) == 0x000001, "Wrong alignment on FWeatherEnableOnGI");
static_assert(sizeof(FWeatherEnableOnGI) == 0x000001, "Wrong size on FWeatherEnableOnGI");

// ScriptStruct DynamicEnvironmentSystem.TimeSpanLerpConfig
// 0x0020 (0x0020 - 0x0000)
struct FTimeSpanLerpConfig final
{
public:
	class FName                                   SpanName;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShowName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeSpanLerpConfig) == 0x000008, "Wrong alignment on FTimeSpanLerpConfig");
static_assert(sizeof(FTimeSpanLerpConfig) == 0x000020, "Wrong size on FTimeSpanLerpConfig");
static_assert(offsetof(FTimeSpanLerpConfig, SpanName) == 0x000000, "Member 'FTimeSpanLerpConfig::SpanName' has a wrong offset!");
static_assert(offsetof(FTimeSpanLerpConfig, StartTime) == 0x000008, "Member 'FTimeSpanLerpConfig::StartTime' has a wrong offset!");
static_assert(offsetof(FTimeSpanLerpConfig, EndTime) == 0x00000C, "Member 'FTimeSpanLerpConfig::EndTime' has a wrong offset!");
static_assert(offsetof(FTimeSpanLerpConfig, ShowName) == 0x000010, "Member 'FTimeSpanLerpConfig::ShowName' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.SunLightLerpConfig
// 0x0128 (0x0128 - 0x0000)
struct FSunLightLerpConfig final
{
public:
	uint8                                         bOverride_Rotator : 1;                             // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Intensity : 1;                           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightColor : 1;                          // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Temperature : 1;                         // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CustomAtmosphereLightIntensity : 1;      // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CustomAtmosphereLightColor : 1;          // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ContactShadowLength : 1;                 // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonLightIntensity : 1;                  // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonLightColor : 1;                      // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonLightTemperature : 1;                // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CustomAtmosphereMoonLightIntensity : 1;  // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CustomAtmosphereMoonLightColor : 1;      // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonLightContactShadowLength : 1;        // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SoftShadowEdgeColor : 1;                 // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowAmount : 1;                        // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowBias : 1;                          // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DynamicShadowDistanceMovableLight : 1;   // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricScatteringIntensity : 1;       // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudShadowOpacity : 1;                  // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightFunctionFadeDistance : 1;           // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DisabledBrightness : 1;                  // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomPassScale : 1;                      // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomFirstPassDistance : 1;              // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomScale : 1;                          // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomScale_Mobile : 1;                   // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomThreshold : 1;                      // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomThreshold_Mobile : 1;               // 0x0003(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomMaxBrightness : 1;                  // 0x0003(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomMaxBrightness_Mobile : 1;           // 0x0003(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomTint : 1;                           // 0x0003(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightSourceAngle : 1;                    // 0x0003(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AtmosphereSunDiskColorScale : 1;         // 0x0003(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_IndirectLightingIntensity : 1;           // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightIntensityMultiply : 1;              // 0x0004(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SpecularScale : 1;                       // 0x0004(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudScatteredLuminanceScale : 1;        // 0x0004(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunTrackModifier;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotator;                                           // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityMobileMultiply;                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColorMobileMultiply;                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomAtmosphereLightIntensity;                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CustomAtmosphereLightColor;                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowLength;                               // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonLightIntensity;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonLightColor;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonLightTemperature;                              // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomAtmosphereMoonLightIntensity;                // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CustomAtmosphereMoonLightColor;                    // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonLightContactShadowLength;                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SoftShadowEdgeColor;                               // 0x009C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowAmount;                                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBias;                                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceMovableLight;                 // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOpacity;                                // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionFadeDistance;                         // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisabledBrightness;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomPassScale;                                    // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomFirstPassDistance;                            // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomScale;                                        // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomScale_Mobile;                                 // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold_Mobile;                             // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomMaxBrightness;                                // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomMaxBrightness_Mobile;                         // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BloomTint;                                         // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceAngle;                                  // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AtmosphereSunDiskColorScale;                       // 0x00FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightingIntensity;                         // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightIntensityMultiply;                            // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecularScale;                                     // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudScatteredLuminanceScale;                      // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSunLightLerpConfig) == 0x000008, "Wrong alignment on FSunLightLerpConfig");
static_assert(sizeof(FSunLightLerpConfig) == 0x000128, "Wrong size on FSunLightLerpConfig");
static_assert(offsetof(FSunLightLerpConfig, SunTrackModifier) == 0x000008, "Member 'FSunLightLerpConfig::SunTrackModifier' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, Rotator) == 0x000010, "Member 'FSunLightLerpConfig::Rotator' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, Intensity) == 0x000028, "Member 'FSunLightLerpConfig::Intensity' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, IntensityMobileMultiply) == 0x00002C, "Member 'FSunLightLerpConfig::IntensityMobileMultiply' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, LightColor) == 0x000030, "Member 'FSunLightLerpConfig::LightColor' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, LightColorMobileMultiply) == 0x000040, "Member 'FSunLightLerpConfig::LightColorMobileMultiply' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, Temperature) == 0x000050, "Member 'FSunLightLerpConfig::Temperature' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, CustomAtmosphereLightIntensity) == 0x000054, "Member 'FSunLightLerpConfig::CustomAtmosphereLightIntensity' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, CustomAtmosphereLightColor) == 0x000058, "Member 'FSunLightLerpConfig::CustomAtmosphereLightColor' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, ContactShadowLength) == 0x000068, "Member 'FSunLightLerpConfig::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, MoonLightIntensity) == 0x00006C, "Member 'FSunLightLerpConfig::MoonLightIntensity' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, MoonLightColor) == 0x000070, "Member 'FSunLightLerpConfig::MoonLightColor' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, MoonLightTemperature) == 0x000080, "Member 'FSunLightLerpConfig::MoonLightTemperature' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, CustomAtmosphereMoonLightIntensity) == 0x000084, "Member 'FSunLightLerpConfig::CustomAtmosphereMoonLightIntensity' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, CustomAtmosphereMoonLightColor) == 0x000088, "Member 'FSunLightLerpConfig::CustomAtmosphereMoonLightColor' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, MoonLightContactShadowLength) == 0x000098, "Member 'FSunLightLerpConfig::MoonLightContactShadowLength' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, SoftShadowEdgeColor) == 0x00009C, "Member 'FSunLightLerpConfig::SoftShadowEdgeColor' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, ShadowAmount) == 0x0000AC, "Member 'FSunLightLerpConfig::ShadowAmount' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, ShadowBias) == 0x0000B0, "Member 'FSunLightLerpConfig::ShadowBias' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, DynamicShadowDistanceMovableLight) == 0x0000B4, "Member 'FSunLightLerpConfig::DynamicShadowDistanceMovableLight' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, VolumetricScatteringIntensity) == 0x0000B8, "Member 'FSunLightLerpConfig::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, CloudShadowOpacity) == 0x0000BC, "Member 'FSunLightLerpConfig::CloudShadowOpacity' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, LightFunctionFadeDistance) == 0x0000C0, "Member 'FSunLightLerpConfig::LightFunctionFadeDistance' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, DisabledBrightness) == 0x0000C4, "Member 'FSunLightLerpConfig::DisabledBrightness' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, BloomPassScale) == 0x0000C8, "Member 'FSunLightLerpConfig::BloomPassScale' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, BloomFirstPassDistance) == 0x0000CC, "Member 'FSunLightLerpConfig::BloomFirstPassDistance' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, BloomScale) == 0x0000D0, "Member 'FSunLightLerpConfig::BloomScale' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, BloomScale_Mobile) == 0x0000D4, "Member 'FSunLightLerpConfig::BloomScale_Mobile' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, BloomThreshold) == 0x0000D8, "Member 'FSunLightLerpConfig::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, BloomThreshold_Mobile) == 0x0000DC, "Member 'FSunLightLerpConfig::BloomThreshold_Mobile' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, BloomMaxBrightness) == 0x0000E0, "Member 'FSunLightLerpConfig::BloomMaxBrightness' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, BloomMaxBrightness_Mobile) == 0x0000E4, "Member 'FSunLightLerpConfig::BloomMaxBrightness_Mobile' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, BloomTint) == 0x0000E8, "Member 'FSunLightLerpConfig::BloomTint' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, LightSourceAngle) == 0x0000F8, "Member 'FSunLightLerpConfig::LightSourceAngle' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, AtmosphereSunDiskColorScale) == 0x0000FC, "Member 'FSunLightLerpConfig::AtmosphereSunDiskColorScale' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, IndirectLightingIntensity) == 0x00010C, "Member 'FSunLightLerpConfig::IndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, LightIntensityMultiply) == 0x000110, "Member 'FSunLightLerpConfig::LightIntensityMultiply' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, SpecularScale) == 0x000114, "Member 'FSunLightLerpConfig::SpecularScale' has a wrong offset!");
static_assert(offsetof(FSunLightLerpConfig, CloudScatteredLuminanceScale) == 0x000118, "Member 'FSunLightLerpConfig::CloudScatteredLuminanceScale' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.SkyLightLerpConfig
// 0x0088 (0x0088 - 0x0000)
struct FSkyLightLerpConfig final
{
public:
	uint8                                         bOverride_Intensity : 1;                           // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LightColor : 1;                          // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SourceCubemapAngle : 1;                  // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LowerHemisphereColor : 1;                // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EnvironmentReflectionTint : 1;           // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SLWEnvironmentReflectionTint : 1;        // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricScatteringIntensity : 1;       // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightFunctionLeaking : 1;             // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Intensity;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityMobileMultiply;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColorMobileMultiply;                          // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceCubemapAngle;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EnvironmentReflectionTint;                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EnvironmentReflectionTintMobileMultiply;           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SLWEnvironmentReflectionTint;                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SLWEnvironmentReflectionTintMobileMultiply;        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightFunctionLeaking;                           // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyLightLerpConfig) == 0x000004, "Wrong alignment on FSkyLightLerpConfig");
static_assert(sizeof(FSkyLightLerpConfig) == 0x000088, "Wrong size on FSkyLightLerpConfig");
static_assert(offsetof(FSkyLightLerpConfig, Intensity) == 0x000004, "Member 'FSkyLightLerpConfig::Intensity' has a wrong offset!");
static_assert(offsetof(FSkyLightLerpConfig, IntensityMobileMultiply) == 0x000008, "Member 'FSkyLightLerpConfig::IntensityMobileMultiply' has a wrong offset!");
static_assert(offsetof(FSkyLightLerpConfig, LightColor) == 0x00000C, "Member 'FSkyLightLerpConfig::LightColor' has a wrong offset!");
static_assert(offsetof(FSkyLightLerpConfig, LightColorMobileMultiply) == 0x00001C, "Member 'FSkyLightLerpConfig::LightColorMobileMultiply' has a wrong offset!");
static_assert(offsetof(FSkyLightLerpConfig, SourceCubemapAngle) == 0x00002C, "Member 'FSkyLightLerpConfig::SourceCubemapAngle' has a wrong offset!");
static_assert(offsetof(FSkyLightLerpConfig, LowerHemisphereColor) == 0x000030, "Member 'FSkyLightLerpConfig::LowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FSkyLightLerpConfig, EnvironmentReflectionTint) == 0x000040, "Member 'FSkyLightLerpConfig::EnvironmentReflectionTint' has a wrong offset!");
static_assert(offsetof(FSkyLightLerpConfig, EnvironmentReflectionTintMobileMultiply) == 0x000050, "Member 'FSkyLightLerpConfig::EnvironmentReflectionTintMobileMultiply' has a wrong offset!");
static_assert(offsetof(FSkyLightLerpConfig, SLWEnvironmentReflectionTint) == 0x000060, "Member 'FSkyLightLerpConfig::SLWEnvironmentReflectionTint' has a wrong offset!");
static_assert(offsetof(FSkyLightLerpConfig, SLWEnvironmentReflectionTintMobileMultiply) == 0x000070, "Member 'FSkyLightLerpConfig::SLWEnvironmentReflectionTintMobileMultiply' has a wrong offset!");
static_assert(offsetof(FSkyLightLerpConfig, VolumetricScatteringIntensity) == 0x000080, "Member 'FSkyLightLerpConfig::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSkyLightLerpConfig, SkyLightFunctionLeaking) == 0x000084, "Member 'FSkyLightLerpConfig::SkyLightFunctionLeaking' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.SkyAtmosphereLerpConfig
// 0x007C (0x007C - 0x0000)
struct FSkyAtmosphereLerpConfig final
{
public:
	uint8                                         bOverride_AtmosphereHeight : 1;                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MultiScatteringFactor : 1;               // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RayleighScatteringScale : 1;             // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RayleighScattering : 1;                  // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RayleighExponentialDistribution : 1;     // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MieScatteringScale : 1;                  // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MieScattering : 1;                       // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MieAbsorptionScale : 1;                  // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MieAbsorption : 1;                       // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MieAnisotropy : 1;                       // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MieExponentialDistribution : 1;          // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OtherAbsorptionScale : 1;                // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_OtherAbsorption : 1;                     // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLuminanceFactor : 1;                  // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AerialPespectiveViewDistanceScale : 1;   // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HeightFogContribution : 1;               // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AtmosphereHeight;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighScatteringScale;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RayleighScattering;                                // 0x000C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighExponentialDistribution;                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieScatteringScale;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieScattering;                                     // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAbsorptionScale;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieAbsorption;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAnisotropy;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieExponentialDistribution;                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherAbsorptionScale;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OtherAbsorption;                                   // 0x0054(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLuminanceFactor;                                // 0x0064(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveViewDistanceScale;                 // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFogContribution;                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyAtmosphereLerpConfig) == 0x000004, "Wrong alignment on FSkyAtmosphereLerpConfig");
static_assert(sizeof(FSkyAtmosphereLerpConfig) == 0x00007C, "Wrong size on FSkyAtmosphereLerpConfig");
static_assert(offsetof(FSkyAtmosphereLerpConfig, AtmosphereHeight) == 0x000004, "Member 'FSkyAtmosphereLerpConfig::AtmosphereHeight' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, RayleighScatteringScale) == 0x000008, "Member 'FSkyAtmosphereLerpConfig::RayleighScatteringScale' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, RayleighScattering) == 0x00000C, "Member 'FSkyAtmosphereLerpConfig::RayleighScattering' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, RayleighExponentialDistribution) == 0x00001C, "Member 'FSkyAtmosphereLerpConfig::RayleighExponentialDistribution' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, MieScatteringScale) == 0x000020, "Member 'FSkyAtmosphereLerpConfig::MieScatteringScale' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, MieScattering) == 0x000024, "Member 'FSkyAtmosphereLerpConfig::MieScattering' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, MieAbsorptionScale) == 0x000034, "Member 'FSkyAtmosphereLerpConfig::MieAbsorptionScale' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, MieAbsorption) == 0x000038, "Member 'FSkyAtmosphereLerpConfig::MieAbsorption' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, MieAnisotropy) == 0x000048, "Member 'FSkyAtmosphereLerpConfig::MieAnisotropy' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, MieExponentialDistribution) == 0x00004C, "Member 'FSkyAtmosphereLerpConfig::MieExponentialDistribution' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, OtherAbsorptionScale) == 0x000050, "Member 'FSkyAtmosphereLerpConfig::OtherAbsorptionScale' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, OtherAbsorption) == 0x000054, "Member 'FSkyAtmosphereLerpConfig::OtherAbsorption' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, SkyLuminanceFactor) == 0x000064, "Member 'FSkyAtmosphereLerpConfig::SkyLuminanceFactor' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, AerialPespectiveViewDistanceScale) == 0x000074, "Member 'FSkyAtmosphereLerpConfig::AerialPespectiveViewDistanceScale' has a wrong offset!");
static_assert(offsetof(FSkyAtmosphereLerpConfig, HeightFogContribution) == 0x000078, "Member 'FSkyAtmosphereLerpConfig::HeightFogContribution' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.ExponentialHeightFogLerpConfig
// 0x0528 (0x0528 - 0x0000)
struct FExponentialHeightFogLerpConfig final
{
public:
	uint8                                         bOverride_FogColor : 1;                            // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogFactor : 1;                           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FadeOffset : 1;                          // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FadeDistFactor : 1;                      // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CustomLocation : 1;                      // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogDensity : 1;                          // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogHeightFalloff : 1;                    // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogHeightOffset : 1;                     // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondFogData : 1;                       // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondFogDataHigh : 1;                   // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogInscatteringColor : 1;                // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyAtmosphereAmbientContributionColorScale : 1; // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DirectionalInscatteringExponent : 1;     // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DirectionalInscatteringStartDistance : 1; // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DirectionalInscatteringColor : 1;        // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogMaxOpacity : 1;                       // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_StartDistance : 1;                       // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogCutoffDistance : 1;                   // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DistanceTintColor : 1;                   // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DistanceTintOffset : 1;                  // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DistanceTintHardness : 1;                // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FarDistanceTintColor : 1;                // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FarDistanceTintOffset : 1;               // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FarDistanceTintHardness : 1;             // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogScatteringDistribution : 1; // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogAlbedo : 1;                 // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogEmissive : 1;               // 0x0003(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogExtinctionScale : 1;        // 0x0003(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogDistance : 1;               // 0x0003(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogStartDistance : 1;          // 0x0003(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricFogNearFadeInDistance : 1;     // 0x0003(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeCurveLinearColor               FogColor;                                          // 0x0008(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeCurveLinearColor               FogFactor;                                         // 0x0210(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         FadeOffset;                                        // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeDistFactor;                                    // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CustomLocation;                                    // 0x0420(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightOffset;                                   // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              SecondFogData;                                     // 0x0444(0x001C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              SecondFogDataHigh;                                 // 0x0460(0x001C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x047C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyAtmosphereAmbientContributionColorScale;        // 0x048C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x04A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DistanceTintColor;                                 // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceTintOffset;                                // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceTintHardness;                              // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FarDistanceTintColor;                              // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarDistanceTintOffset;                             // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarDistanceTintHardness;                           // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogScatteringDistribution;               // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogAlbedo;                               // 0x04F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x0504(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStartDistance;                        // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogNearFadeInDistance;                   // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExponentialHeightFogLerpConfig) == 0x000008, "Wrong alignment on FExponentialHeightFogLerpConfig");
static_assert(sizeof(FExponentialHeightFogLerpConfig) == 0x000528, "Wrong size on FExponentialHeightFogLerpConfig");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FogColor) == 0x000008, "Member 'FExponentialHeightFogLerpConfig::FogColor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FogFactor) == 0x000210, "Member 'FExponentialHeightFogLerpConfig::FogFactor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FadeOffset) == 0x000418, "Member 'FExponentialHeightFogLerpConfig::FadeOffset' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FadeDistFactor) == 0x00041C, "Member 'FExponentialHeightFogLerpConfig::FadeDistFactor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, CustomLocation) == 0x000420, "Member 'FExponentialHeightFogLerpConfig::CustomLocation' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FogDensity) == 0x000438, "Member 'FExponentialHeightFogLerpConfig::FogDensity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FogHeightFalloff) == 0x00043C, "Member 'FExponentialHeightFogLerpConfig::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FogHeightOffset) == 0x000440, "Member 'FExponentialHeightFogLerpConfig::FogHeightOffset' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, SecondFogData) == 0x000444, "Member 'FExponentialHeightFogLerpConfig::SecondFogData' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, SecondFogDataHigh) == 0x000460, "Member 'FExponentialHeightFogLerpConfig::SecondFogDataHigh' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FogInscatteringColor) == 0x00047C, "Member 'FExponentialHeightFogLerpConfig::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, SkyAtmosphereAmbientContributionColorScale) == 0x00048C, "Member 'FExponentialHeightFogLerpConfig::SkyAtmosphereAmbientContributionColorScale' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, DirectionalInscatteringExponent) == 0x00049C, "Member 'FExponentialHeightFogLerpConfig::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, DirectionalInscatteringStartDistance) == 0x0004A0, "Member 'FExponentialHeightFogLerpConfig::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, DirectionalInscatteringColor) == 0x0004A4, "Member 'FExponentialHeightFogLerpConfig::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FogMaxOpacity) == 0x0004B4, "Member 'FExponentialHeightFogLerpConfig::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, StartDistance) == 0x0004B8, "Member 'FExponentialHeightFogLerpConfig::StartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FogCutoffDistance) == 0x0004BC, "Member 'FExponentialHeightFogLerpConfig::FogCutoffDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, DistanceTintColor) == 0x0004C0, "Member 'FExponentialHeightFogLerpConfig::DistanceTintColor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, DistanceTintOffset) == 0x0004D0, "Member 'FExponentialHeightFogLerpConfig::DistanceTintOffset' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, DistanceTintHardness) == 0x0004D4, "Member 'FExponentialHeightFogLerpConfig::DistanceTintHardness' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FarDistanceTintColor) == 0x0004D8, "Member 'FExponentialHeightFogLerpConfig::FarDistanceTintColor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FarDistanceTintOffset) == 0x0004E8, "Member 'FExponentialHeightFogLerpConfig::FarDistanceTintOffset' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, FarDistanceTintHardness) == 0x0004EC, "Member 'FExponentialHeightFogLerpConfig::FarDistanceTintHardness' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, VolumetricFogScatteringDistribution) == 0x0004F0, "Member 'FExponentialHeightFogLerpConfig::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, VolumetricFogAlbedo) == 0x0004F4, "Member 'FExponentialHeightFogLerpConfig::VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, VolumetricFogEmissive) == 0x000504, "Member 'FExponentialHeightFogLerpConfig::VolumetricFogEmissive' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, VolumetricFogExtinctionScale) == 0x000514, "Member 'FExponentialHeightFogLerpConfig::VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, VolumetricFogDistance) == 0x000518, "Member 'FExponentialHeightFogLerpConfig::VolumetricFogDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, VolumetricFogStartDistance) == 0x00051C, "Member 'FExponentialHeightFogLerpConfig::VolumetricFogStartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogLerpConfig, VolumetricFogNearFadeInDistance) == 0x000520, "Member 'FExponentialHeightFogLerpConfig::VolumetricFogNearFadeInDistance' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.EnvironmentLerpConfig
// 0x0120 (0x0120 - 0x0000)
struct FEnvironmentLerpConfig final
{
public:
	uint8                                         bOverride_Sky : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudLayer : 1;                          // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_VolumetricCloud : 1;                     // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_DirLightFunction : 1;                    // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LayerBottomAltitude : 1;                 // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LayerHeight : 1;                         // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_TracingStartMaxDistance : 1;             // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowViewSampleCountScale : 1;          // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowTracingDistance : 1;               // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FX_BaceColor : 1;                        // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FX_EmissiveColor : 1;                    // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FX_Saturation : 1;                       // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FX_Gamma : 1;                            // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalFogColor : 1;                       // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LocalLightColor : 1;                     // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CinematicLightColor : 1;                 // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CinematicLightTemperature : 1;           // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CinematicLightAttenuationRadiusScale : 1; // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudTint : 1;                           // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudBloomTint : 1;                      // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CloudDistantTint : 1;                    // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_PaintFogColorA : 1;                      // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_PaintFogColorB : 1;                      // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogCardColor : 1;                        // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CustomLensFlare : 1;                     // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MoonColor : 1;                           // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_IndirectIrradiance_Mobile_SM_TwoSideFoliage : 1; // 0x0003(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      Sky;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      CloudLayer;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      VolumetricCloud;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      DirLightFunction;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerBottomAltitude;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerHeight;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracingStartMaxDistance;                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowViewSampleCountScale;                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTracingDistance;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FX_BaceColor;                                      // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FX_EmissiveColor;                                  // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FX_Saturation;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FX_Gamma;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LocalFogColor;                                     // 0x0064(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LocalLightColor;                                   // 0x0074(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CinematicLightColor;                               // 0x0084(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CinematicLightTemperature;                         // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CinematicLightAttenuationRadiusScale;              // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudTint;                                         // 0x009C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudBloomTint;                                    // 0x00AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudDistantTint;                                  // 0x00BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PaintFogColorA;                                    // 0x00CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PaintFogColorB;                                    // 0x00DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogCardColor;                                      // 0x00EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CustomLensFlare;                                   // 0x00FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MoonColor;                                         // 0x010C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectIrradiance_Mobile_SM_TwoSideFoliage;       // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnvironmentLerpConfig) == 0x000008, "Wrong alignment on FEnvironmentLerpConfig");
static_assert(sizeof(FEnvironmentLerpConfig) == 0x000120, "Wrong size on FEnvironmentLerpConfig");
static_assert(offsetof(FEnvironmentLerpConfig, Sky) == 0x000008, "Member 'FEnvironmentLerpConfig::Sky' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, CloudLayer) == 0x000010, "Member 'FEnvironmentLerpConfig::CloudLayer' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, VolumetricCloud) == 0x000018, "Member 'FEnvironmentLerpConfig::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, DirLightFunction) == 0x000020, "Member 'FEnvironmentLerpConfig::DirLightFunction' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, LayerBottomAltitude) == 0x000028, "Member 'FEnvironmentLerpConfig::LayerBottomAltitude' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, LayerHeight) == 0x00002C, "Member 'FEnvironmentLerpConfig::LayerHeight' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, TracingStartMaxDistance) == 0x000030, "Member 'FEnvironmentLerpConfig::TracingStartMaxDistance' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, ShadowViewSampleCountScale) == 0x000034, "Member 'FEnvironmentLerpConfig::ShadowViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, ShadowTracingDistance) == 0x000038, "Member 'FEnvironmentLerpConfig::ShadowTracingDistance' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, FX_BaceColor) == 0x00003C, "Member 'FEnvironmentLerpConfig::FX_BaceColor' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, FX_EmissiveColor) == 0x00004C, "Member 'FEnvironmentLerpConfig::FX_EmissiveColor' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, FX_Saturation) == 0x00005C, "Member 'FEnvironmentLerpConfig::FX_Saturation' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, FX_Gamma) == 0x000060, "Member 'FEnvironmentLerpConfig::FX_Gamma' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, LocalFogColor) == 0x000064, "Member 'FEnvironmentLerpConfig::LocalFogColor' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, LocalLightColor) == 0x000074, "Member 'FEnvironmentLerpConfig::LocalLightColor' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, CinematicLightColor) == 0x000084, "Member 'FEnvironmentLerpConfig::CinematicLightColor' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, CinematicLightTemperature) == 0x000094, "Member 'FEnvironmentLerpConfig::CinematicLightTemperature' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, CinematicLightAttenuationRadiusScale) == 0x000098, "Member 'FEnvironmentLerpConfig::CinematicLightAttenuationRadiusScale' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, CloudTint) == 0x00009C, "Member 'FEnvironmentLerpConfig::CloudTint' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, CloudBloomTint) == 0x0000AC, "Member 'FEnvironmentLerpConfig::CloudBloomTint' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, CloudDistantTint) == 0x0000BC, "Member 'FEnvironmentLerpConfig::CloudDistantTint' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, PaintFogColorA) == 0x0000CC, "Member 'FEnvironmentLerpConfig::PaintFogColorA' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, PaintFogColorB) == 0x0000DC, "Member 'FEnvironmentLerpConfig::PaintFogColorB' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, FogCardColor) == 0x0000EC, "Member 'FEnvironmentLerpConfig::FogCardColor' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, CustomLensFlare) == 0x0000FC, "Member 'FEnvironmentLerpConfig::CustomLensFlare' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, MoonColor) == 0x00010C, "Member 'FEnvironmentLerpConfig::MoonColor' has a wrong offset!");
static_assert(offsetof(FEnvironmentLerpConfig, IndirectIrradiance_Mobile_SM_TwoSideFoliage) == 0x00011C, "Member 'FEnvironmentLerpConfig::IndirectIrradiance_Mobile_SM_TwoSideFoliage' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.TODLerpConfig
// 0x0838 (0x0840 - 0x0008)
struct FTODLerpConfig final : public FTableRowBase
{
public:
	float                                         NowHours;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     LerpToCurve;                                       // 0x0010(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FRuntimeFloatCurve> CustomLerpCurve;                                  // 0x0098(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSunLightLerpConfig                    SunLightSettings;                                  // 0x00E8(0x0128)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyLightLerpConfig                    SkyLightSettings;                                  // 0x0210(0x0088)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyAtmosphereLerpConfig               SkyAtmosphereSettings;                             // 0x0298(0x007C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExponentialHeightFogLerpConfig        ExponentialHeightFogSettings;                      // 0x0318(0x0528)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTODLerpConfig) == 0x000008, "Wrong alignment on FTODLerpConfig");
static_assert(sizeof(FTODLerpConfig) == 0x000840, "Wrong size on FTODLerpConfig");
static_assert(offsetof(FTODLerpConfig, NowHours) == 0x000008, "Member 'FTODLerpConfig::NowHours' has a wrong offset!");
static_assert(offsetof(FTODLerpConfig, EndTime) == 0x00000C, "Member 'FTODLerpConfig::EndTime' has a wrong offset!");
static_assert(offsetof(FTODLerpConfig, LerpToCurve) == 0x000010, "Member 'FTODLerpConfig::LerpToCurve' has a wrong offset!");
static_assert(offsetof(FTODLerpConfig, CustomLerpCurve) == 0x000098, "Member 'FTODLerpConfig::CustomLerpCurve' has a wrong offset!");
static_assert(offsetof(FTODLerpConfig, SunLightSettings) == 0x0000E8, "Member 'FTODLerpConfig::SunLightSettings' has a wrong offset!");
static_assert(offsetof(FTODLerpConfig, SkyLightSettings) == 0x000210, "Member 'FTODLerpConfig::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(FTODLerpConfig, SkyAtmosphereSettings) == 0x000298, "Member 'FTODLerpConfig::SkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(FTODLerpConfig, ExponentialHeightFogSettings) == 0x000318, "Member 'FTODLerpConfig::ExponentialHeightFogSettings' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.WeatherTexturesConfig
// 0x0068 (0x0068 - 0x0000)
struct FWeatherTexturesConfig final
{
public:
	class UTextureCube*                           SkyLight_CubeMap_Src;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureCube*                           SkyLight_CubeMap;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLight_CubeMap_BlendFraction;                    // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SkyBox_SkyTexture_Src;                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SkyBox_CloudLayer_Src;                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SkyBox_SkyTexture;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SkyBox_CloudLayer;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyBox_SkyTexture_BlendFraction;                   // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SkyBox_SkyTexture_Next;                            // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SkyBox_CloudLayer_Next;                            // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyBox_SkyTexture_Next_BlendFraction;              // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TODIdentifyName;                                   // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeatherTexturesConfig) == 0x000008, "Wrong alignment on FWeatherTexturesConfig");
static_assert(sizeof(FWeatherTexturesConfig) == 0x000068, "Wrong size on FWeatherTexturesConfig");
static_assert(offsetof(FWeatherTexturesConfig, SkyLight_CubeMap_Src) == 0x000000, "Member 'FWeatherTexturesConfig::SkyLight_CubeMap_Src' has a wrong offset!");
static_assert(offsetof(FWeatherTexturesConfig, SkyLight_CubeMap) == 0x000008, "Member 'FWeatherTexturesConfig::SkyLight_CubeMap' has a wrong offset!");
static_assert(offsetof(FWeatherTexturesConfig, SkyLight_CubeMap_BlendFraction) == 0x000010, "Member 'FWeatherTexturesConfig::SkyLight_CubeMap_BlendFraction' has a wrong offset!");
static_assert(offsetof(FWeatherTexturesConfig, SkyBox_SkyTexture_Src) == 0x000018, "Member 'FWeatherTexturesConfig::SkyBox_SkyTexture_Src' has a wrong offset!");
static_assert(offsetof(FWeatherTexturesConfig, SkyBox_CloudLayer_Src) == 0x000020, "Member 'FWeatherTexturesConfig::SkyBox_CloudLayer_Src' has a wrong offset!");
static_assert(offsetof(FWeatherTexturesConfig, SkyBox_SkyTexture) == 0x000028, "Member 'FWeatherTexturesConfig::SkyBox_SkyTexture' has a wrong offset!");
static_assert(offsetof(FWeatherTexturesConfig, SkyBox_CloudLayer) == 0x000030, "Member 'FWeatherTexturesConfig::SkyBox_CloudLayer' has a wrong offset!");
static_assert(offsetof(FWeatherTexturesConfig, SkyBox_SkyTexture_BlendFraction) == 0x000038, "Member 'FWeatherTexturesConfig::SkyBox_SkyTexture_BlendFraction' has a wrong offset!");
static_assert(offsetof(FWeatherTexturesConfig, SkyBox_SkyTexture_Next) == 0x000040, "Member 'FWeatherTexturesConfig::SkyBox_SkyTexture_Next' has a wrong offset!");
static_assert(offsetof(FWeatherTexturesConfig, SkyBox_CloudLayer_Next) == 0x000048, "Member 'FWeatherTexturesConfig::SkyBox_CloudLayer_Next' has a wrong offset!");
static_assert(offsetof(FWeatherTexturesConfig, SkyBox_SkyTexture_Next_BlendFraction) == 0x000050, "Member 'FWeatherTexturesConfig::SkyBox_SkyTexture_Next_BlendFraction' has a wrong offset!");
static_assert(offsetof(FWeatherTexturesConfig, TODIdentifyName) == 0x000058, "Member 'FWeatherTexturesConfig::TODIdentifyName' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.CharacterLerpConfig
// 0x012C (0x012C - 0x0000)
struct FCharacterLerpConfig final
{
public:
	uint8                                         bOverride_RoleLocalLightColor : 1;                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RoleRimLightColor : 1;                   // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RoleCinematicLocalLightColor : 1;        // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RoleCinematicRimLightColor : 1;          // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CharacterAOScale : 1;                    // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_PaperCharacterIndirectLightingFactor : 1; // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CIL_IntensityAdditive_Mobile_Enlighten : 1; // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_PaperTranslucencyIndirectLightingFactor : 1; // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_PaperIndirectLightingFactor : 1;         // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LCI_Factor : 1;                          // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CILFill_IntensityAdditive_Mobile_Lightmass : 1; // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LCI_UpdownNeutralize : 1;                // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LCI_UpdownLerpHardness : 1;              // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LCI_HairSaturate : 1;                    // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LCI_SkyColor : 1;                        // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LCI_GroundColor : 1;                     // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LCI_TransAdd_Factor : 1;                 // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LCI_TransAdd_HairMulti : 1;              // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LCI_TransAdd_SkyColor : 1;               // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_LCI_TransAdd_GroundColor : 1;            // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EyeSpecular_Highlights_Intensities : 1;  // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EyeSpecularRotationFixed : 1;            // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EyeSpecularLightColorFixed : 1;          // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EmissiveAdaption : 1;                    // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_GlobalAttributesFactor : 1;              // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_IndirectIrradiance_Mobile_SM_Subsurface : 1; // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_IndirectIrradiance_Mobile_SM_PreIntegratedSkin : 1; // 0x0003(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_IndirectIrradiance_Mobile_SM_ClearCoat : 1; // 0x0003(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_IndirectIrradiance_Mobile_SM_Hair : 1;   // 0x0003(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_IndirectIrradiance_Mobile_SM_Cloth : 1;  // 0x0003(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_IndirectIrradiance_Mobile_SM_Eye : 1;    // 0x0003(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_IndirectIrradiance_Mobile_CharacterSkylightLerp : 1; // 0x0003(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_IndirectIrradiance_Mobile_CharacterHemisphereSkyLightDiffuseTint : 1; // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           RoleLocalLightColor;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RoleLocalLightColorMobileMultiply;                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RoleRimLightColor;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RoleCinematicLocalLightColor;                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RoleCinematicRimLightColor;                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterAOScale;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaperCharacterIndirectLightingFactor;              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CIL_IntensityAdditive_Mobile_Enlighten;            // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaperTranslucencyIndirectLightingFactor;           // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaperIndirectLightingFactor;                       // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LCI_UpdownNeutralize;                              // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LCI_Factor;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CILFill_IntensityAdditive_Mobile_Lightmass;        // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LCI_UpdownLerpHardness;                            // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LCI_HairSaturate;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LCI_SkyColor;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LCI_GroundColor;                                   // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LCI_TransAdd_Factor;                               // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LCI_TransAdd_HairMulti;                            // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LCI_TransAdd_SkyColor;                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LCI_TransAdd_GroundColor;                          // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EyeSpecular_Highlights_Intensities;                // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeSpecularRotationFixed;                          // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EyeSpecularLightColorFixed;                        // 0x00DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EmissiveAdaption;                                  // 0x00EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalAttributesFactor;                            // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectIrradiance_Mobile_SM_Subsurface;           // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectIrradiance_Mobile_SM_PreIntegratedSkin;    // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectIrradiance_Mobile_SM_ClearCoat;            // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectIrradiance_Mobile_SM_Hair;                 // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectIrradiance_Mobile_SM_Cloth;                // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectIrradiance_Mobile_SM_Eye;                  // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectIrradiance_Mobile_CharacterSkylightLerp;   // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IndirectIrradiance_Mobile_CharacterHemisphereSkyLightDiffuseTint; // 0x011C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterLerpConfig) == 0x000004, "Wrong alignment on FCharacterLerpConfig");
static_assert(sizeof(FCharacterLerpConfig) == 0x00012C, "Wrong size on FCharacterLerpConfig");
static_assert(offsetof(FCharacterLerpConfig, RoleLocalLightColor) == 0x000008, "Member 'FCharacterLerpConfig::RoleLocalLightColor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, RoleLocalLightColorMobileMultiply) == 0x000018, "Member 'FCharacterLerpConfig::RoleLocalLightColorMobileMultiply' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, RoleRimLightColor) == 0x000028, "Member 'FCharacterLerpConfig::RoleRimLightColor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, RoleCinematicLocalLightColor) == 0x000038, "Member 'FCharacterLerpConfig::RoleCinematicLocalLightColor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, RoleCinematicRimLightColor) == 0x000048, "Member 'FCharacterLerpConfig::RoleCinematicRimLightColor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, CharacterAOScale) == 0x000058, "Member 'FCharacterLerpConfig::CharacterAOScale' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, PaperCharacterIndirectLightingFactor) == 0x00005C, "Member 'FCharacterLerpConfig::PaperCharacterIndirectLightingFactor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, CIL_IntensityAdditive_Mobile_Enlighten) == 0x000060, "Member 'FCharacterLerpConfig::CIL_IntensityAdditive_Mobile_Enlighten' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, PaperTranslucencyIndirectLightingFactor) == 0x000064, "Member 'FCharacterLerpConfig::PaperTranslucencyIndirectLightingFactor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, PaperIndirectLightingFactor) == 0x000068, "Member 'FCharacterLerpConfig::PaperIndirectLightingFactor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, LCI_UpdownNeutralize) == 0x00006C, "Member 'FCharacterLerpConfig::LCI_UpdownNeutralize' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, LCI_Factor) == 0x000070, "Member 'FCharacterLerpConfig::LCI_Factor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, CILFill_IntensityAdditive_Mobile_Lightmass) == 0x000074, "Member 'FCharacterLerpConfig::CILFill_IntensityAdditive_Mobile_Lightmass' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, LCI_UpdownLerpHardness) == 0x000078, "Member 'FCharacterLerpConfig::LCI_UpdownLerpHardness' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, LCI_HairSaturate) == 0x00007C, "Member 'FCharacterLerpConfig::LCI_HairSaturate' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, LCI_SkyColor) == 0x000080, "Member 'FCharacterLerpConfig::LCI_SkyColor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, LCI_GroundColor) == 0x000090, "Member 'FCharacterLerpConfig::LCI_GroundColor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, LCI_TransAdd_Factor) == 0x0000A0, "Member 'FCharacterLerpConfig::LCI_TransAdd_Factor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, LCI_TransAdd_HairMulti) == 0x0000A4, "Member 'FCharacterLerpConfig::LCI_TransAdd_HairMulti' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, LCI_TransAdd_SkyColor) == 0x0000A8, "Member 'FCharacterLerpConfig::LCI_TransAdd_SkyColor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, LCI_TransAdd_GroundColor) == 0x0000B8, "Member 'FCharacterLerpConfig::LCI_TransAdd_GroundColor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, EyeSpecular_Highlights_Intensities) == 0x0000C8, "Member 'FCharacterLerpConfig::EyeSpecular_Highlights_Intensities' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, EyeSpecularRotationFixed) == 0x0000D8, "Member 'FCharacterLerpConfig::EyeSpecularRotationFixed' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, EyeSpecularLightColorFixed) == 0x0000DC, "Member 'FCharacterLerpConfig::EyeSpecularLightColorFixed' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, EmissiveAdaption) == 0x0000EC, "Member 'FCharacterLerpConfig::EmissiveAdaption' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, GlobalAttributesFactor) == 0x0000FC, "Member 'FCharacterLerpConfig::GlobalAttributesFactor' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, IndirectIrradiance_Mobile_SM_Subsurface) == 0x000100, "Member 'FCharacterLerpConfig::IndirectIrradiance_Mobile_SM_Subsurface' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, IndirectIrradiance_Mobile_SM_PreIntegratedSkin) == 0x000104, "Member 'FCharacterLerpConfig::IndirectIrradiance_Mobile_SM_PreIntegratedSkin' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, IndirectIrradiance_Mobile_SM_ClearCoat) == 0x000108, "Member 'FCharacterLerpConfig::IndirectIrradiance_Mobile_SM_ClearCoat' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, IndirectIrradiance_Mobile_SM_Hair) == 0x00010C, "Member 'FCharacterLerpConfig::IndirectIrradiance_Mobile_SM_Hair' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, IndirectIrradiance_Mobile_SM_Cloth) == 0x000110, "Member 'FCharacterLerpConfig::IndirectIrradiance_Mobile_SM_Cloth' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, IndirectIrradiance_Mobile_SM_Eye) == 0x000114, "Member 'FCharacterLerpConfig::IndirectIrradiance_Mobile_SM_Eye' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, IndirectIrradiance_Mobile_CharacterSkylightLerp) == 0x000118, "Member 'FCharacterLerpConfig::IndirectIrradiance_Mobile_CharacterSkylightLerp' has a wrong offset!");
static_assert(offsetof(FCharacterLerpConfig, IndirectIrradiance_Mobile_CharacterHemisphereSkyLightDiffuseTint) == 0x00011C, "Member 'FCharacterLerpConfig::IndirectIrradiance_Mobile_CharacterHemisphereSkyLightDiffuseTint' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.WeatherBaseLerpConfig
// 0x0310 (0x0310 - 0x0000)
struct FWeatherBaseLerpConfig final
{
public:
	uint8                                         bOverride_WeatherIntensity : 1;                    // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainIntensity : 1;                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RainRipplesCount : 1;                    // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WetnessOcclusionMultiply : 1;            // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WetnessSpecularFoliageMultiply : 1;      // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WetnessSpecularLandscapeMultiply : 1;    // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FoggyIntensity : 1;                      // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WeatherTemperature : 1;                  // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WindForce : 1;                           // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WindVariantCurve : 1;                    // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_n_DirIntensity : 1;                      // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_n_DirColor : 1;                          // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_n_SkyLitIntensity : 1;                   // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_n_SkyLitColor : 1;                       // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_n_Exposure : 1;                          // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_n_SceneColor : 1;                        // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_N_CustomAtmosphereMoonLightIntensity : 1; // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_N_CustomAtmosphereMoonLightColor : 1;    // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_N_RayleighScattering : 1;                // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_N_MieScattering : 1;                     // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_N_SLWEnvironmentReflectionTint : 1;      // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   DynamicWeatherComp;                                // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendAsVolumeWeight;                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeatherSpanName;                                   // 0x0034(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TODHour;                                           // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherFadein;                                     // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherFadeout;                                    // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherIntensity;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainIntensity;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesCount;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessOcclusionMultiply;                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSpecularFoliageMultiply;                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSpecularLandscapeMultiply;                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoggyIntensity;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherTemperature;                                // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WindForce;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeCurveLinearColor               WindVariantCurve;                                  // 0x0078(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         n_DirIntensity;                                    // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           n_DirColor;                                        // 0x0284(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         n_SkyLitIntensity;                                 // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           n_SkyLitColor;                                     // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         n_Exposure;                                        // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           n_SceneColor;                                      // 0x02AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         N_CustomAtmosphereMoonLightIntensity;              // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           N_CustomAtmosphereMoonLightColor;                  // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           N_RayleighScattering;                              // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           N_MieScattering;                                   // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           N_SLWEnvironmentReflectionTint;                    // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           N_SLWEnvironmentReflectionTintMobileMultiply;      // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeatherBaseLerpConfig) == 0x000008, "Wrong alignment on FWeatherBaseLerpConfig");
static_assert(sizeof(FWeatherBaseLerpConfig) == 0x000310, "Wrong size on FWeatherBaseLerpConfig");
static_assert(offsetof(FWeatherBaseLerpConfig, DynamicWeatherComp) == 0x000008, "Member 'FWeatherBaseLerpConfig::DynamicWeatherComp' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, bBlendAsVolumeWeight) == 0x000030, "Member 'FWeatherBaseLerpConfig::bBlendAsVolumeWeight' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, WeatherSpanName) == 0x000034, "Member 'FWeatherBaseLerpConfig::WeatherSpanName' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, TODHour) == 0x00003C, "Member 'FWeatherBaseLerpConfig::TODHour' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, WeatherFadein) == 0x000040, "Member 'FWeatherBaseLerpConfig::WeatherFadein' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, WeatherFadeout) == 0x000044, "Member 'FWeatherBaseLerpConfig::WeatherFadeout' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, WeatherIntensity) == 0x000048, "Member 'FWeatherBaseLerpConfig::WeatherIntensity' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, RainIntensity) == 0x00004C, "Member 'FWeatherBaseLerpConfig::RainIntensity' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, RainRipplesCount) == 0x000050, "Member 'FWeatherBaseLerpConfig::RainRipplesCount' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, WetnessOcclusionMultiply) == 0x000054, "Member 'FWeatherBaseLerpConfig::WetnessOcclusionMultiply' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, WetnessSpecularFoliageMultiply) == 0x000058, "Member 'FWeatherBaseLerpConfig::WetnessSpecularFoliageMultiply' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, WetnessSpecularLandscapeMultiply) == 0x00005C, "Member 'FWeatherBaseLerpConfig::WetnessSpecularLandscapeMultiply' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, FoggyIntensity) == 0x000060, "Member 'FWeatherBaseLerpConfig::FoggyIntensity' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, WeatherTemperature) == 0x000064, "Member 'FWeatherBaseLerpConfig::WeatherTemperature' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, WindForce) == 0x000068, "Member 'FWeatherBaseLerpConfig::WindForce' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, WindVariantCurve) == 0x000078, "Member 'FWeatherBaseLerpConfig::WindVariantCurve' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, n_DirIntensity) == 0x000280, "Member 'FWeatherBaseLerpConfig::n_DirIntensity' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, n_DirColor) == 0x000284, "Member 'FWeatherBaseLerpConfig::n_DirColor' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, n_SkyLitIntensity) == 0x000294, "Member 'FWeatherBaseLerpConfig::n_SkyLitIntensity' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, n_SkyLitColor) == 0x000298, "Member 'FWeatherBaseLerpConfig::n_SkyLitColor' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, n_Exposure) == 0x0002A8, "Member 'FWeatherBaseLerpConfig::n_Exposure' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, n_SceneColor) == 0x0002AC, "Member 'FWeatherBaseLerpConfig::n_SceneColor' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, N_CustomAtmosphereMoonLightIntensity) == 0x0002BC, "Member 'FWeatherBaseLerpConfig::N_CustomAtmosphereMoonLightIntensity' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, N_CustomAtmosphereMoonLightColor) == 0x0002C0, "Member 'FWeatherBaseLerpConfig::N_CustomAtmosphereMoonLightColor' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, N_RayleighScattering) == 0x0002D0, "Member 'FWeatherBaseLerpConfig::N_RayleighScattering' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, N_MieScattering) == 0x0002E0, "Member 'FWeatherBaseLerpConfig::N_MieScattering' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, N_SLWEnvironmentReflectionTint) == 0x0002F0, "Member 'FWeatherBaseLerpConfig::N_SLWEnvironmentReflectionTint' has a wrong offset!");
static_assert(offsetof(FWeatherBaseLerpConfig, N_SLWEnvironmentReflectionTintMobileMultiply) == 0x000300, "Member 'FWeatherBaseLerpConfig::N_SLWEnvironmentReflectionTintMobileMultiply' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.PhotoFilterPPSettings
// 0x02B0 (0x02B0 - 0x0000)
struct FPhotoFilterPPSettings final
{
public:
	float                                         BloomThreshold;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomIntensity;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureBias;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ColorSaturation;                                   // 0x0010(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrast;                                     // 0x0030(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGamma;                                        // 0x0050(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGain;                                         // 0x0070(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffset;                                       // 0x0090(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationShadows;                            // 0x00B0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastShadows;                              // 0x00D0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaShadows;                                 // 0x00F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainShadows;                                  // 0x0110(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetShadows;                                // 0x0130(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionShadowsMax;                         // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0xC];                                      // 0x0154(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ColorSaturationMidtones;                           // 0x0160(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastMidtones;                             // 0x0180(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaMidtones;                                // 0x01A0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainMidtones;                                 // 0x01C0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetMidtones;                               // 0x01E0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationHighlights;                         // 0x0200(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastHighlights;                           // 0x0220(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaHighlights;                              // 0x0240(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainHighlights;                               // 0x0260(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetHighlights;                             // 0x0280(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionHighlightsMin;                      // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionHighlightsMax;                      // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPhotoFilterPPSettings) == 0x000010, "Wrong alignment on FPhotoFilterPPSettings");
static_assert(sizeof(FPhotoFilterPPSettings) == 0x0002B0, "Wrong size on FPhotoFilterPPSettings");
static_assert(offsetof(FPhotoFilterPPSettings, BloomThreshold) == 0x000000, "Member 'FPhotoFilterPPSettings::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, BloomIntensity) == 0x000004, "Member 'FPhotoFilterPPSettings::BloomIntensity' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, AutoExposureBias) == 0x000008, "Member 'FPhotoFilterPPSettings::AutoExposureBias' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorSaturation) == 0x000010, "Member 'FPhotoFilterPPSettings::ColorSaturation' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorContrast) == 0x000030, "Member 'FPhotoFilterPPSettings::ColorContrast' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorGamma) == 0x000050, "Member 'FPhotoFilterPPSettings::ColorGamma' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorGain) == 0x000070, "Member 'FPhotoFilterPPSettings::ColorGain' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorOffset) == 0x000090, "Member 'FPhotoFilterPPSettings::ColorOffset' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorSaturationShadows) == 0x0000B0, "Member 'FPhotoFilterPPSettings::ColorSaturationShadows' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorContrastShadows) == 0x0000D0, "Member 'FPhotoFilterPPSettings::ColorContrastShadows' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorGammaShadows) == 0x0000F0, "Member 'FPhotoFilterPPSettings::ColorGammaShadows' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorGainShadows) == 0x000110, "Member 'FPhotoFilterPPSettings::ColorGainShadows' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorOffsetShadows) == 0x000130, "Member 'FPhotoFilterPPSettings::ColorOffsetShadows' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorCorrectionShadowsMax) == 0x000150, "Member 'FPhotoFilterPPSettings::ColorCorrectionShadowsMax' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorSaturationMidtones) == 0x000160, "Member 'FPhotoFilterPPSettings::ColorSaturationMidtones' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorContrastMidtones) == 0x000180, "Member 'FPhotoFilterPPSettings::ColorContrastMidtones' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorGammaMidtones) == 0x0001A0, "Member 'FPhotoFilterPPSettings::ColorGammaMidtones' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorGainMidtones) == 0x0001C0, "Member 'FPhotoFilterPPSettings::ColorGainMidtones' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorOffsetMidtones) == 0x0001E0, "Member 'FPhotoFilterPPSettings::ColorOffsetMidtones' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorSaturationHighlights) == 0x000200, "Member 'FPhotoFilterPPSettings::ColorSaturationHighlights' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorContrastHighlights) == 0x000220, "Member 'FPhotoFilterPPSettings::ColorContrastHighlights' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorGammaHighlights) == 0x000240, "Member 'FPhotoFilterPPSettings::ColorGammaHighlights' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorGainHighlights) == 0x000260, "Member 'FPhotoFilterPPSettings::ColorGainHighlights' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorOffsetHighlights) == 0x000280, "Member 'FPhotoFilterPPSettings::ColorOffsetHighlights' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorCorrectionHighlightsMin) == 0x0002A0, "Member 'FPhotoFilterPPSettings::ColorCorrectionHighlightsMin' has a wrong offset!");
static_assert(offsetof(FPhotoFilterPPSettings, ColorCorrectionHighlightsMax) == 0x0002A4, "Member 'FPhotoFilterPPSettings::ColorCorrectionHighlightsMax' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.MobilePPSettings
// 0x0060 (0x0060 - 0x0000)
struct FMobilePPSettings final
{
public:
	uint8                                         bOverride_ColorGamma : 1;                          // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmSlope : 1;                           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmToe : 1;                             // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmShoulder : 1;                        // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmBlackClip : 1;                       // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FilmWhiteClip : 1;                       // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SceneColorTint : 1;                      // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionIntensity : 1;           // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionRadius : 1;              // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ColorGamma;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmSlope;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmToe;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmShoulder;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmBlackClip;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmWhiteClip;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneColorTint;                                    // 0x0044(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionIntensity;                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionRadius;                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMobilePPSettings) == 0x000010, "Wrong alignment on FMobilePPSettings");
static_assert(sizeof(FMobilePPSettings) == 0x000060, "Wrong size on FMobilePPSettings");
static_assert(offsetof(FMobilePPSettings, ColorGamma) == 0x000010, "Member 'FMobilePPSettings::ColorGamma' has a wrong offset!");
static_assert(offsetof(FMobilePPSettings, FilmSlope) == 0x000030, "Member 'FMobilePPSettings::FilmSlope' has a wrong offset!");
static_assert(offsetof(FMobilePPSettings, FilmToe) == 0x000034, "Member 'FMobilePPSettings::FilmToe' has a wrong offset!");
static_assert(offsetof(FMobilePPSettings, FilmShoulder) == 0x000038, "Member 'FMobilePPSettings::FilmShoulder' has a wrong offset!");
static_assert(offsetof(FMobilePPSettings, FilmBlackClip) == 0x00003C, "Member 'FMobilePPSettings::FilmBlackClip' has a wrong offset!");
static_assert(offsetof(FMobilePPSettings, FilmWhiteClip) == 0x000040, "Member 'FMobilePPSettings::FilmWhiteClip' has a wrong offset!");
static_assert(offsetof(FMobilePPSettings, SceneColorTint) == 0x000044, "Member 'FMobilePPSettings::SceneColorTint' has a wrong offset!");
static_assert(offsetof(FMobilePPSettings, AmbientOcclusionIntensity) == 0x000054, "Member 'FMobilePPSettings::AmbientOcclusionIntensity' has a wrong offset!");
static_assert(offsetof(FMobilePPSettings, AmbientOcclusionRadius) == 0x000058, "Member 'FMobilePPSettings::AmbientOcclusionRadius' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.Curve24H
// 0x12F0 (0x12F0 - 0x0000)
struct FCurve24H final
{
public:
	uint8                                         bOverride_SunLightIntensity : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunLightIntensity_Mobile : 1;            // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunLightColor : 1;                       // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SunLightColor_Mobile : 1;                // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightIntensity : 1;                   // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightIntensity_Mobile : 1;            // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightColor : 1;                       // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SkyLightColor_Mobile : 1;                // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RayleighScattering : 1;                  // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MieScattering : 1;                       // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Exposure : 1;                            // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_PaintFogColorA : 1;                      // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FogDirectionalInscatteringColor : 1;     // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     SunLightIntensity;                                 // 0x0008(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     SunLightIntensity_Mobile;                          // 0x0090(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeCurveLinearColor               SunLightColor;                                     // 0x0118(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeCurveLinearColor               SunLightColor_Mobile;                              // 0x0320(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     SkyLightIntensity;                                 // 0x0528(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     SkyLightIntensity_Mobile;                          // 0x05B0(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeCurveLinearColor               SkyLightColor;                                     // 0x0638(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeCurveLinearColor               SkyLightColor_Mobile;                              // 0x0840(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeCurveLinearColor               RayleighScattering;                                // 0x0A48(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeCurveLinearColor               MieScattering;                                     // 0x0C50(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     Exposure;                                          // 0x0E58(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeCurveLinearColor               PaintFogColorA;                                    // 0x0EE0(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeCurveLinearColor               FogDirectionalInscatteringColor;                   // 0x10E8(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurve24H) == 0x000008, "Wrong alignment on FCurve24H");
static_assert(sizeof(FCurve24H) == 0x0012F0, "Wrong size on FCurve24H");
static_assert(offsetof(FCurve24H, SunLightIntensity) == 0x000008, "Member 'FCurve24H::SunLightIntensity' has a wrong offset!");
static_assert(offsetof(FCurve24H, SunLightIntensity_Mobile) == 0x000090, "Member 'FCurve24H::SunLightIntensity_Mobile' has a wrong offset!");
static_assert(offsetof(FCurve24H, SunLightColor) == 0x000118, "Member 'FCurve24H::SunLightColor' has a wrong offset!");
static_assert(offsetof(FCurve24H, SunLightColor_Mobile) == 0x000320, "Member 'FCurve24H::SunLightColor_Mobile' has a wrong offset!");
static_assert(offsetof(FCurve24H, SkyLightIntensity) == 0x000528, "Member 'FCurve24H::SkyLightIntensity' has a wrong offset!");
static_assert(offsetof(FCurve24H, SkyLightIntensity_Mobile) == 0x0005B0, "Member 'FCurve24H::SkyLightIntensity_Mobile' has a wrong offset!");
static_assert(offsetof(FCurve24H, SkyLightColor) == 0x000638, "Member 'FCurve24H::SkyLightColor' has a wrong offset!");
static_assert(offsetof(FCurve24H, SkyLightColor_Mobile) == 0x000840, "Member 'FCurve24H::SkyLightColor_Mobile' has a wrong offset!");
static_assert(offsetof(FCurve24H, RayleighScattering) == 0x000A48, "Member 'FCurve24H::RayleighScattering' has a wrong offset!");
static_assert(offsetof(FCurve24H, MieScattering) == 0x000C50, "Member 'FCurve24H::MieScattering' has a wrong offset!");
static_assert(offsetof(FCurve24H, Exposure) == 0x000E58, "Member 'FCurve24H::Exposure' has a wrong offset!");
static_assert(offsetof(FCurve24H, PaintFogColorA) == 0x000EE0, "Member 'FCurve24H::PaintFogColorA' has a wrong offset!");
static_assert(offsetof(FCurve24H, FogDirectionalInscatteringColor) == 0x0010E8, "Member 'FCurve24H::FogDirectionalInscatteringColor' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.DynamicEnvironmentLerpConfig
// 0x00A0 (0x00A8 - 0x0008)
struct FDynamicEnvironmentLerpConfig final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   TODPreset;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PPPreset;                                          // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WeatherPreset;                                     // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CharacterPreset;                                   // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicEnvironmentLerpConfig) == 0x000008, "Wrong alignment on FDynamicEnvironmentLerpConfig");
static_assert(sizeof(FDynamicEnvironmentLerpConfig) == 0x0000A8, "Wrong size on FDynamicEnvironmentLerpConfig");
static_assert(offsetof(FDynamicEnvironmentLerpConfig, TODPreset) == 0x000008, "Member 'FDynamicEnvironmentLerpConfig::TODPreset' has a wrong offset!");
static_assert(offsetof(FDynamicEnvironmentLerpConfig, PPPreset) == 0x000030, "Member 'FDynamicEnvironmentLerpConfig::PPPreset' has a wrong offset!");
static_assert(offsetof(FDynamicEnvironmentLerpConfig, WeatherPreset) == 0x000058, "Member 'FDynamicEnvironmentLerpConfig::WeatherPreset' has a wrong offset!");
static_assert(offsetof(FDynamicEnvironmentLerpConfig, CharacterPreset) == 0x000080, "Member 'FDynamicEnvironmentLerpConfig::CharacterPreset' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.FinalWeatherSettings
// 0x0E08 (0x0E08 - 0x0000)
struct FFinalWeatherSettings final
{
public:
	struct FTODLerpConfig                         TODSetting;                                        // 0x0000(0x0840)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEnvironmentLerpConfig                 EnvironmentSetting;                                // 0x0840(0x0120)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeatherTexturesConfig                 TextureSetting;                                    // 0x0960(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCharacterLerpConfig                   CharacterSetting;                                  // 0x09C8(0x012C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF4[0x4];                                      // 0x0AF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeatherBaseLerpConfig                 WeatherSetting;                                    // 0x0AF8(0x0310)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFinalWeatherSettings) == 0x000008, "Wrong alignment on FFinalWeatherSettings");
static_assert(sizeof(FFinalWeatherSettings) == 0x000E08, "Wrong size on FFinalWeatherSettings");
static_assert(offsetof(FFinalWeatherSettings, TODSetting) == 0x000000, "Member 'FFinalWeatherSettings::TODSetting' has a wrong offset!");
static_assert(offsetof(FFinalWeatherSettings, EnvironmentSetting) == 0x000840, "Member 'FFinalWeatherSettings::EnvironmentSetting' has a wrong offset!");
static_assert(offsetof(FFinalWeatherSettings, TextureSetting) == 0x000960, "Member 'FFinalWeatherSettings::TextureSetting' has a wrong offset!");
static_assert(offsetof(FFinalWeatherSettings, CharacterSetting) == 0x0009C8, "Member 'FFinalWeatherSettings::CharacterSetting' has a wrong offset!");
static_assert(offsetof(FFinalWeatherSettings, WeatherSetting) == 0x000AF8, "Member 'FFinalWeatherSettings::WeatherSetting' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.DynamicWeatherSettings
// 0x0D30 (0x0D30 - 0x0000)
struct FDynamicWeatherSettings final
{
public:
	uint8                                         Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NowHours;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSunLightLerpConfig                    SunLightSettings;                                  // 0x0010(0x0128)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyLightLerpConfig                    SkyLightSettings;                                  // 0x0138(0x0088)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeatherTexturesConfig                 WeatherTextureSettings;                            // 0x01C0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSkyAtmosphereLerpConfig               SkyAtmosphereSettings;                             // 0x0228(0x007C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExponentialHeightFogLerpConfig        ExponentialHeightFogSettings;                      // 0x02A8(0x0528)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEnvironmentLerpConfig                 EnvironmentSettings;                               // 0x07D0(0x0120)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterLerpConfig                   CharacterSettings;                                 // 0x08F0(0x012C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1C[0x4];                                      // 0x0A1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeatherBaseLerpConfig                 WeatherSettings;                                   // 0x0A20(0x0310)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicWeatherSettings) == 0x000008, "Wrong alignment on FDynamicWeatherSettings");
static_assert(sizeof(FDynamicWeatherSettings) == 0x000D30, "Wrong size on FDynamicWeatherSettings");
static_assert(offsetof(FDynamicWeatherSettings, Type) == 0x000000, "Member 'FDynamicWeatherSettings::Type' has a wrong offset!");
static_assert(offsetof(FDynamicWeatherSettings, NowHours) == 0x000004, "Member 'FDynamicWeatherSettings::NowHours' has a wrong offset!");
static_assert(offsetof(FDynamicWeatherSettings, EndTime) == 0x000008, "Member 'FDynamicWeatherSettings::EndTime' has a wrong offset!");
static_assert(offsetof(FDynamicWeatherSettings, SunLightSettings) == 0x000010, "Member 'FDynamicWeatherSettings::SunLightSettings' has a wrong offset!");
static_assert(offsetof(FDynamicWeatherSettings, SkyLightSettings) == 0x000138, "Member 'FDynamicWeatherSettings::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(FDynamicWeatherSettings, WeatherTextureSettings) == 0x0001C0, "Member 'FDynamicWeatherSettings::WeatherTextureSettings' has a wrong offset!");
static_assert(offsetof(FDynamicWeatherSettings, SkyAtmosphereSettings) == 0x000228, "Member 'FDynamicWeatherSettings::SkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(FDynamicWeatherSettings, ExponentialHeightFogSettings) == 0x0002A8, "Member 'FDynamicWeatherSettings::ExponentialHeightFogSettings' has a wrong offset!");
static_assert(offsetof(FDynamicWeatherSettings, EnvironmentSettings) == 0x0007D0, "Member 'FDynamicWeatherSettings::EnvironmentSettings' has a wrong offset!");
static_assert(offsetof(FDynamicWeatherSettings, CharacterSettings) == 0x0008F0, "Member 'FDynamicWeatherSettings::CharacterSettings' has a wrong offset!");
static_assert(offsetof(FDynamicWeatherSettings, WeatherSettings) == 0x000A20, "Member 'FDynamicWeatherSettings::WeatherSettings' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.TimeStamp
// 0x002C (0x002C - 0x0000)
struct FTimeStamp final
{
public:
	float                                         DayNightProportions;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DayHour;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightHour;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunriseHour;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunsetHour;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MorningHour;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AfternoonHour;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonAngle;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonAngleSecond;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoonCycle;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StarCycle;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeStamp) == 0x000004, "Wrong alignment on FTimeStamp");
static_assert(sizeof(FTimeStamp) == 0x00002C, "Wrong size on FTimeStamp");
static_assert(offsetof(FTimeStamp, DayNightProportions) == 0x000000, "Member 'FTimeStamp::DayNightProportions' has a wrong offset!");
static_assert(offsetof(FTimeStamp, DayHour) == 0x000004, "Member 'FTimeStamp::DayHour' has a wrong offset!");
static_assert(offsetof(FTimeStamp, NightHour) == 0x000008, "Member 'FTimeStamp::NightHour' has a wrong offset!");
static_assert(offsetof(FTimeStamp, SunriseHour) == 0x00000C, "Member 'FTimeStamp::SunriseHour' has a wrong offset!");
static_assert(offsetof(FTimeStamp, SunsetHour) == 0x000010, "Member 'FTimeStamp::SunsetHour' has a wrong offset!");
static_assert(offsetof(FTimeStamp, MorningHour) == 0x000014, "Member 'FTimeStamp::MorningHour' has a wrong offset!");
static_assert(offsetof(FTimeStamp, AfternoonHour) == 0x000018, "Member 'FTimeStamp::AfternoonHour' has a wrong offset!");
static_assert(offsetof(FTimeStamp, MoonAngle) == 0x00001C, "Member 'FTimeStamp::MoonAngle' has a wrong offset!");
static_assert(offsetof(FTimeStamp, MoonAngleSecond) == 0x000020, "Member 'FTimeStamp::MoonAngleSecond' has a wrong offset!");
static_assert(offsetof(FTimeStamp, MoonCycle) == 0x000024, "Member 'FTimeStamp::MoonCycle' has a wrong offset!");
static_assert(offsetof(FTimeStamp, StarCycle) == 0x000028, "Member 'FTimeStamp::StarCycle' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.TODAssets
// 0x0010 (0x0010 - 0x0000)
struct FTODAssets final
{
public:
	class UDataTable*                             TODDataTable;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           TODSunRotator;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTODAssets) == 0x000008, "Wrong alignment on FTODAssets");
static_assert(sizeof(FTODAssets) == 0x000010, "Wrong size on FTODAssets");
static_assert(offsetof(FTODAssets, TODDataTable) == 0x000000, "Member 'FTODAssets::TODDataTable' has a wrong offset!");
static_assert(offsetof(FTODAssets, TODSunRotator) == 0x000008, "Member 'FTODAssets::TODSunRotator' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.WetnessConfigParameters
// 0x04A8 (0x04A8 - 0x0000)
struct FWetnessConfigParameters final
{
public:
	float                                         RainIntensity;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wetness;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessOcclusionMultiply;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeCurveLinearColor               WetnessCurve;                                      // 0x0010(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         RainMaskScale;                                     // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             RainMask;                                          // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlLumenReflectionsSpecularScale;             // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LumenReflectionsSpecularScale;                     // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessMetallicReflectionBoost;                    // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeCurveLinearColor               ReflectionParametersCurve;                         // 0x0238(0x0208)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         WetnessBaseColorDarkness;                          // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessRoughness;                                  // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessRoughnessFoliage;                           // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessRoughnessTrunk;                             // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessRoughnessLandscape;                         // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSpecularNear;                               // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSpecularFar;                                // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessFadeIn;                                     // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessFadeDistance;                               // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSpecularFoliageMultiply;                    // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSpecularScaleNearFoliage;                   // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSpecularLandscapeMultiply;                  // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsTiling;                                   // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsSpeed;                                    // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsIntensity;                                // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             RainDrops;                                         // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddleBaseColorDarkness;                           // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddleRoughness;                                   // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddleSpecular;                                    // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddleFlatness;                                    // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddleHeightmapScale;                              // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddleHeightOffset;                                // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddleHeightFalloff;                               // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWetnessConfigParameters) == 0x000008, "Wrong alignment on FWetnessConfigParameters");
static_assert(sizeof(FWetnessConfigParameters) == 0x0004A8, "Wrong size on FWetnessConfigParameters");
static_assert(offsetof(FWetnessConfigParameters, RainIntensity) == 0x000000, "Member 'FWetnessConfigParameters::RainIntensity' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, Wetness) == 0x000004, "Member 'FWetnessConfigParameters::Wetness' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessOcclusionMultiply) == 0x000008, "Member 'FWetnessConfigParameters::WetnessOcclusionMultiply' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessCurve) == 0x000010, "Member 'FWetnessConfigParameters::WetnessCurve' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, RainMaskScale) == 0x000218, "Member 'FWetnessConfigParameters::RainMaskScale' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, RainMask) == 0x000220, "Member 'FWetnessConfigParameters::RainMask' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, bControlLumenReflectionsSpecularScale) == 0x000228, "Member 'FWetnessConfigParameters::bControlLumenReflectionsSpecularScale' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, LumenReflectionsSpecularScale) == 0x00022C, "Member 'FWetnessConfigParameters::LumenReflectionsSpecularScale' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessMetallicReflectionBoost) == 0x000230, "Member 'FWetnessConfigParameters::WetnessMetallicReflectionBoost' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, ReflectionParametersCurve) == 0x000238, "Member 'FWetnessConfigParameters::ReflectionParametersCurve' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessBaseColorDarkness) == 0x000440, "Member 'FWetnessConfigParameters::WetnessBaseColorDarkness' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessRoughness) == 0x000444, "Member 'FWetnessConfigParameters::WetnessRoughness' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessRoughnessFoliage) == 0x000448, "Member 'FWetnessConfigParameters::WetnessRoughnessFoliage' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessRoughnessTrunk) == 0x00044C, "Member 'FWetnessConfigParameters::WetnessRoughnessTrunk' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessRoughnessLandscape) == 0x000450, "Member 'FWetnessConfigParameters::WetnessRoughnessLandscape' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessSpecularNear) == 0x000454, "Member 'FWetnessConfigParameters::WetnessSpecularNear' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessSpecularFar) == 0x000458, "Member 'FWetnessConfigParameters::WetnessSpecularFar' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessFadeIn) == 0x00045C, "Member 'FWetnessConfigParameters::WetnessFadeIn' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessFadeDistance) == 0x000460, "Member 'FWetnessConfigParameters::WetnessFadeDistance' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessSpecularFoliageMultiply) == 0x000464, "Member 'FWetnessConfigParameters::WetnessSpecularFoliageMultiply' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessSpecularScaleNearFoliage) == 0x000468, "Member 'FWetnessConfigParameters::WetnessSpecularScaleNearFoliage' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, WetnessSpecularLandscapeMultiply) == 0x00046C, "Member 'FWetnessConfigParameters::WetnessSpecularLandscapeMultiply' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, RainDropsTiling) == 0x000470, "Member 'FWetnessConfigParameters::RainDropsTiling' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, RainDropsSpeed) == 0x000474, "Member 'FWetnessConfigParameters::RainDropsSpeed' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, RainDropsIntensity) == 0x000478, "Member 'FWetnessConfigParameters::RainDropsIntensity' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, RainDrops) == 0x000480, "Member 'FWetnessConfigParameters::RainDrops' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, PuddleBaseColorDarkness) == 0x000488, "Member 'FWetnessConfigParameters::PuddleBaseColorDarkness' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, PuddleRoughness) == 0x00048C, "Member 'FWetnessConfigParameters::PuddleRoughness' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, PuddleSpecular) == 0x000490, "Member 'FWetnessConfigParameters::PuddleSpecular' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, PuddleFlatness) == 0x000494, "Member 'FWetnessConfigParameters::PuddleFlatness' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, PuddleHeightmapScale) == 0x000498, "Member 'FWetnessConfigParameters::PuddleHeightmapScale' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, PuddleHeightOffset) == 0x00049C, "Member 'FWetnessConfigParameters::PuddleHeightOffset' has a wrong offset!");
static_assert(offsetof(FWetnessConfigParameters, PuddleHeightFalloff) == 0x0004A0, "Member 'FWetnessConfigParameters::PuddleHeightFalloff' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.LightFunctionSystemConfig
// 0x0060 (0x0060 - 0x0000)
struct FLightFunctionSystemConfig final
{
public:
	float                                         FadeInDistance;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UPrimaryDataAsset>       LightFunctionBrushArray;                           // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LightFunctionTexture;                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightenOverAll;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DarkenOverAll;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoxExtent;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RenderSize;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLightFunctionSystemConfig) == 0x000008, "Wrong alignment on FLightFunctionSystemConfig");
static_assert(sizeof(FLightFunctionSystemConfig) == 0x000060, "Wrong size on FLightFunctionSystemConfig");
static_assert(offsetof(FLightFunctionSystemConfig, FadeInDistance) == 0x000000, "Member 'FLightFunctionSystemConfig::FadeInDistance' has a wrong offset!");
static_assert(offsetof(FLightFunctionSystemConfig, LightFunctionBrushArray) == 0x000008, "Member 'FLightFunctionSystemConfig::LightFunctionBrushArray' has a wrong offset!");
static_assert(offsetof(FLightFunctionSystemConfig, LightFunctionTexture) == 0x000030, "Member 'FLightFunctionSystemConfig::LightFunctionTexture' has a wrong offset!");
static_assert(offsetof(FLightFunctionSystemConfig, LightenOverAll) == 0x000038, "Member 'FLightFunctionSystemConfig::LightenOverAll' has a wrong offset!");
static_assert(offsetof(FLightFunctionSystemConfig, DarkenOverAll) == 0x00003C, "Member 'FLightFunctionSystemConfig::DarkenOverAll' has a wrong offset!");
static_assert(offsetof(FLightFunctionSystemConfig, BoxExtent) == 0x000040, "Member 'FLightFunctionSystemConfig::BoxExtent' has a wrong offset!");
static_assert(offsetof(FLightFunctionSystemConfig, RenderSize) == 0x000044, "Member 'FLightFunctionSystemConfig::RenderSize' has a wrong offset!");
static_assert(offsetof(FLightFunctionSystemConfig, Location) == 0x000048, "Member 'FLightFunctionSystemConfig::Location' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.EnvironmentLevelConfig
// 0x01A0 (0x01A0 - 0x0000)
struct FEnvironmentLevelConfig final
{
public:
	bool                                          bUseCurveFog;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncFogHeight;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogActorHeight;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemapFogHeight;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogHeightRangeLow;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightRangeHigh;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVolumetricFog;                                    // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricFogGridPixelSize;                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalGMUI;                                        // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEditorUMG;                                        // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentSpanName;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentWeatherName;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SunCycleRotator;                                   // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MoonCycleRotator;                                  // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLightFunctionSystemConfig             LightFunctionSystemConfig;                         // 0x0070(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseCustomAtmosphereLight;                         // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightShaftOcclusion;                              // 0x00D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECSMSplitMethod                               CSMSplitMethod;                                    // 0x00D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CSMSplit1Distance;                                 // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSMSplit2Distance;                                 // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSMSplit3Distance;                                 // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSMSplit4Distance;                                 // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CSMSplit5Distance;                                 // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ShadowBiasSplit1 : 1;                    // 0x00E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowBiasSplit2 : 1;                    // 0x00E8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowBiasSplit3 : 1;                    // 0x00E8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowBiasSplit4 : 1;                    // 0x00E8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowBiasSplit5 : 1;                    // 0x00E8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowSlopeBiasSplit1 : 1;               // 0x00E8(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowSlopeBiasSplit2 : 1;               // 0x00E8(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowSlopeBiasSplit3 : 1;               // 0x00E8(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowSlopeBiasSplit4 : 1;               // 0x00E9(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ShadowSlopeBiasSplit5 : 1;               // 0x00E9(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShadowBiasSplit1;                                  // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBiasSplit1;                             // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBiasSplit2;                                  // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBiasSplit2;                             // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBiasSplit3;                                  // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBiasSplit3;                             // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBiasSplit4;                                  // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBiasSplit4;                             // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBiasSplit5;                                  // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBiasSplit5;                             // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FarShadowCascadeCount;                             // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarShadowMaxDrawDistance;                          // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSharpen;                                     // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopBias;                                    // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticFarShadowAsset*                  StaticFarShadowAsset;                              // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFieldShadowDistance;                       // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFieldTraceDistance;                        // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecialShadowConfig;                              // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CullingScreenSizeForOcclusionQuery;                // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialDeviceEnableShadingmodelStencilCulling;     // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MobileExtraReflectionAdd;                          // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLumen;                                         // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEnlighten;                                     // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x2];                                      // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnlightenSkyLightDiffuse;                          // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLowerHemisphereColor;                          // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0154(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               SkyLightFunctionTexture;                           // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               SkyLightHemisphereDiffuseTexture;                  // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SkyLightFunctionLocation;                          // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SkyLightFunctionHeightRange;                       // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightFunctionSmoothHeight;                      // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightFunctionScale;                             // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnvironmentLevelConfig) == 0x000008, "Wrong alignment on FEnvironmentLevelConfig");
static_assert(sizeof(FEnvironmentLevelConfig) == 0x0001A0, "Wrong size on FEnvironmentLevelConfig");
static_assert(offsetof(FEnvironmentLevelConfig, bUseCurveFog) == 0x000000, "Member 'FEnvironmentLevelConfig::bUseCurveFog' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, bSyncFogHeight) == 0x000001, "Member 'FEnvironmentLevelConfig::bSyncFogHeight' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, FogActorHeight) == 0x000004, "Member 'FEnvironmentLevelConfig::FogActorHeight' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, bRemapFogHeight) == 0x000008, "Member 'FEnvironmentLevelConfig::bRemapFogHeight' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, FogHeightRangeLow) == 0x00000C, "Member 'FEnvironmentLevelConfig::FogHeightRangeLow' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, FogHeightRangeHigh) == 0x000010, "Member 'FEnvironmentLevelConfig::FogHeightRangeHigh' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, bVolumetricFog) == 0x000014, "Member 'FEnvironmentLevelConfig::bVolumetricFog' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, VolumetricFogGridPixelSize) == 0x000018, "Member 'FEnvironmentLevelConfig::VolumetricFogGridPixelSize' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, bLocalGMUI) == 0x00001C, "Member 'FEnvironmentLevelConfig::bLocalGMUI' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, bEditorUMG) == 0x00001D, "Member 'FEnvironmentLevelConfig::bEditorUMG' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, CurrentSpanName) == 0x000020, "Member 'FEnvironmentLevelConfig::CurrentSpanName' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, CurrentWeatherName) == 0x000030, "Member 'FEnvironmentLevelConfig::CurrentWeatherName' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, SunCycleRotator) == 0x000040, "Member 'FEnvironmentLevelConfig::SunCycleRotator' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, MoonCycleRotator) == 0x000058, "Member 'FEnvironmentLevelConfig::MoonCycleRotator' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, LightFunctionSystemConfig) == 0x000070, "Member 'FEnvironmentLevelConfig::LightFunctionSystemConfig' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, bUseCustomAtmosphereLight) == 0x0000D0, "Member 'FEnvironmentLevelConfig::bUseCustomAtmosphereLight' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, bLightShaftOcclusion) == 0x0000D1, "Member 'FEnvironmentLevelConfig::bLightShaftOcclusion' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, CSMSplitMethod) == 0x0000D2, "Member 'FEnvironmentLevelConfig::CSMSplitMethod' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, CSMSplit1Distance) == 0x0000D4, "Member 'FEnvironmentLevelConfig::CSMSplit1Distance' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, CSMSplit2Distance) == 0x0000D8, "Member 'FEnvironmentLevelConfig::CSMSplit2Distance' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, CSMSplit3Distance) == 0x0000DC, "Member 'FEnvironmentLevelConfig::CSMSplit3Distance' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, CSMSplit4Distance) == 0x0000E0, "Member 'FEnvironmentLevelConfig::CSMSplit4Distance' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, CSMSplit5Distance) == 0x0000E4, "Member 'FEnvironmentLevelConfig::CSMSplit5Distance' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowBiasSplit1) == 0x0000EC, "Member 'FEnvironmentLevelConfig::ShadowBiasSplit1' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowSlopeBiasSplit1) == 0x0000F0, "Member 'FEnvironmentLevelConfig::ShadowSlopeBiasSplit1' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowBiasSplit2) == 0x0000F4, "Member 'FEnvironmentLevelConfig::ShadowBiasSplit2' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowSlopeBiasSplit2) == 0x0000F8, "Member 'FEnvironmentLevelConfig::ShadowSlopeBiasSplit2' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowBiasSplit3) == 0x0000FC, "Member 'FEnvironmentLevelConfig::ShadowBiasSplit3' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowSlopeBiasSplit3) == 0x000100, "Member 'FEnvironmentLevelConfig::ShadowSlopeBiasSplit3' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowBiasSplit4) == 0x000104, "Member 'FEnvironmentLevelConfig::ShadowBiasSplit4' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowSlopeBiasSplit4) == 0x000108, "Member 'FEnvironmentLevelConfig::ShadowSlopeBiasSplit4' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowBiasSplit5) == 0x00010C, "Member 'FEnvironmentLevelConfig::ShadowBiasSplit5' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowSlopeBiasSplit5) == 0x000110, "Member 'FEnvironmentLevelConfig::ShadowSlopeBiasSplit5' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, FarShadowCascadeCount) == 0x000114, "Member 'FEnvironmentLevelConfig::FarShadowCascadeCount' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, FarShadowMaxDrawDistance) == 0x000118, "Member 'FEnvironmentLevelConfig::FarShadowMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowSharpen) == 0x00011C, "Member 'FEnvironmentLevelConfig::ShadowSharpen' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, ShadowSlopBias) == 0x000120, "Member 'FEnvironmentLevelConfig::ShadowSlopBias' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, StaticFarShadowAsset) == 0x000128, "Member 'FEnvironmentLevelConfig::StaticFarShadowAsset' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, DistanceFieldShadowDistance) == 0x000130, "Member 'FEnvironmentLevelConfig::DistanceFieldShadowDistance' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, DistanceFieldTraceDistance) == 0x000134, "Member 'FEnvironmentLevelConfig::DistanceFieldTraceDistance' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, bSpecialShadowConfig) == 0x000138, "Member 'FEnvironmentLevelConfig::bSpecialShadowConfig' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, CullingScreenSizeForOcclusionQuery) == 0x00013C, "Member 'FEnvironmentLevelConfig::CullingScreenSizeForOcclusionQuery' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, SpecialDeviceEnableShadingmodelStencilCulling) == 0x000140, "Member 'FEnvironmentLevelConfig::SpecialDeviceEnableShadingmodelStencilCulling' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, MobileExtraReflectionAdd) == 0x000144, "Member 'FEnvironmentLevelConfig::MobileExtraReflectionAdd' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, bUseLumen) == 0x000148, "Member 'FEnvironmentLevelConfig::bUseLumen' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, bUseEnlighten) == 0x000149, "Member 'FEnvironmentLevelConfig::bUseEnlighten' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, EnlightenSkyLightDiffuse) == 0x00014C, "Member 'FEnvironmentLevelConfig::EnlightenSkyLightDiffuse' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, bUseLowerHemisphereColor) == 0x000150, "Member 'FEnvironmentLevelConfig::bUseLowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, LowerHemisphereColor) == 0x000154, "Member 'FEnvironmentLevelConfig::LowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, SkyLightFunctionTexture) == 0x000168, "Member 'FEnvironmentLevelConfig::SkyLightFunctionTexture' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, SkyLightHemisphereDiffuseTexture) == 0x000170, "Member 'FEnvironmentLevelConfig::SkyLightHemisphereDiffuseTexture' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, SkyLightFunctionLocation) == 0x000178, "Member 'FEnvironmentLevelConfig::SkyLightFunctionLocation' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, SkyLightFunctionHeightRange) == 0x000188, "Member 'FEnvironmentLevelConfig::SkyLightFunctionHeightRange' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, SkyLightFunctionSmoothHeight) == 0x000198, "Member 'FEnvironmentLevelConfig::SkyLightFunctionSmoothHeight' has a wrong offset!");
static_assert(offsetof(FEnvironmentLevelConfig, SkyLightFunctionScale) == 0x00019C, "Member 'FEnvironmentLevelConfig::SkyLightFunctionScale' has a wrong offset!");

// ScriptStruct DynamicEnvironmentSystem.PCGEffectSettings
// 0x0040 (0x0040 - 0x0000)
struct FPCGEffectSettings final
{
public:
	uint8                                         bOverride_TestFloat : 1;                           // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_TestColorControl : 1;                    // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_TestColor : 1;                           // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TestFloat;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               TestColorControl;                                  // 0x0010(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TestColor;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPCGEffectSettings) == 0x000010, "Wrong alignment on FPCGEffectSettings");
static_assert(sizeof(FPCGEffectSettings) == 0x000040, "Wrong size on FPCGEffectSettings");
static_assert(offsetof(FPCGEffectSettings, TestFloat) == 0x000004, "Member 'FPCGEffectSettings::TestFloat' has a wrong offset!");
static_assert(offsetof(FPCGEffectSettings, TestColorControl) == 0x000010, "Member 'FPCGEffectSettings::TestColorControl' has a wrong offset!");
static_assert(offsetof(FPCGEffectSettings, TestColor) == 0x000030, "Member 'FPCGEffectSettings::TestColor' has a wrong offset!");

}

