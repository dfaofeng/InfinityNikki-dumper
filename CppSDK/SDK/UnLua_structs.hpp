#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnLua

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct UnLua.LuaTValueWrapper
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FLuaTValueWrapper
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLuaTValueWrapper) == 0x000008, "Wrong alignment on FLuaTValueWrapper");
static_assert(sizeof(FLuaTValueWrapper) == 0x000048, "Wrong size on FLuaTValueWrapper");

// ScriptStruct UnLua.LuaTableWrapper
// 0x0088 (0x00D0 - 0x0048)
struct FLuaTableWrapper final : public FLuaTValueWrapper
{
public:
	uint8                                         Pad_48[0x88];                                      // 0x0048(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLuaTableWrapper) == 0x000008, "Wrong alignment on FLuaTableWrapper");
static_assert(sizeof(FLuaTableWrapper) == 0x0000D0, "Wrong size on FLuaTableWrapper");

// ScriptStruct UnLua.PropertyCollector
// 0x0001 (0x0001 - 0x0000)
struct FPropertyCollector final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropertyCollector) == 0x000001, "Wrong alignment on FPropertyCollector");
static_assert(sizeof(FPropertyCollector) == 0x000001, "Wrong size on FPropertyCollector");

// ScriptStruct UnLua.LuaBoolWrapper
// 0x0000 (0x0048 - 0x0048)
struct FLuaBoolWrapper final : public FLuaTValueWrapper
{
};
static_assert(alignof(FLuaBoolWrapper) == 0x000008, "Wrong alignment on FLuaBoolWrapper");
static_assert(sizeof(FLuaBoolWrapper) == 0x000048, "Wrong size on FLuaBoolWrapper");

// ScriptStruct UnLua.LuaFunctionWrapper
// 0x0008 (0x0050 - 0x0048)
struct FLuaFunctionWrapper final : public FLuaTValueWrapper
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLuaFunctionWrapper) == 0x000008, "Wrong alignment on FLuaFunctionWrapper");
static_assert(sizeof(FLuaFunctionWrapper) == 0x000050, "Wrong size on FLuaFunctionWrapper");

// ScriptStruct UnLua.LuaNumberWrapper
// 0x0000 (0x0048 - 0x0048)
struct FLuaNumberWrapper final : public FLuaTValueWrapper
{
};
static_assert(alignof(FLuaNumberWrapper) == 0x000008, "Wrong alignment on FLuaNumberWrapper");
static_assert(sizeof(FLuaNumberWrapper) == 0x000048, "Wrong size on FLuaNumberWrapper");

// ScriptStruct UnLua.LuaStringWrapper
// 0x0000 (0x0048 - 0x0048)
struct FLuaStringWrapper final : public FLuaTValueWrapper
{
};
static_assert(alignof(FLuaStringWrapper) == 0x000008, "Wrong alignment on FLuaStringWrapper");
static_assert(sizeof(FLuaStringWrapper) == 0x000048, "Wrong size on FLuaStringWrapper");

// ScriptStruct UnLua.SharedLuaTableWrapper
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSharedLuaTableWrapper final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSharedLuaTableWrapper) == 0x000008, "Wrong alignment on FSharedLuaTableWrapper");
static_assert(sizeof(FSharedLuaTableWrapper) == 0x000010, "Wrong size on FSharedLuaTableWrapper");

// ScriptStruct UnLua.LuaUserdataWrapper
// 0x0000 (0x0048 - 0x0048)
struct FLuaUserdataWrapper final : public FLuaTValueWrapper
{
};
static_assert(alignof(FLuaUserdataWrapper) == 0x000008, "Wrong alignment on FLuaUserdataWrapper");
static_assert(sizeof(FLuaUserdataWrapper) == 0x000048, "Wrong size on FLuaUserdataWrapper");

// ScriptStruct UnLua.DelegatesTest
// 0x0040 (0x0040 - 0x0000)
struct FDelegatesTest final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              MultDelegate;                                      // 0x0010(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                UIWidget;                                          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDelegatesTest) == 0x000008, "Wrong alignment on FDelegatesTest");
static_assert(sizeof(FDelegatesTest) == 0x000040, "Wrong size on FDelegatesTest");
static_assert(offsetof(FDelegatesTest, Delegate) == 0x000000, "Member 'FDelegatesTest::Delegate' has a wrong offset!");
static_assert(offsetof(FDelegatesTest, MultDelegate) == 0x000010, "Member 'FDelegatesTest::MultDelegate' has a wrong offset!");
static_assert(offsetof(FDelegatesTest, Pos) == 0x000020, "Member 'FDelegatesTest::Pos' has a wrong offset!");
static_assert(offsetof(FDelegatesTest, UIWidget) == 0x000038, "Member 'FDelegatesTest::UIWidget' has a wrong offset!");

}

