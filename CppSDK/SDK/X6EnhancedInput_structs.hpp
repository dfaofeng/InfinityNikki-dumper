#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6EnhancedInput

#include "Basic.hpp"

#include "InputCore_structs.hpp"


namespace SDK
{

// Enum X6EnhancedInput.EX6EnhancedInputType
// NumValues: 0x0004
enum class EX6EnhancedInputType : uint8
{
	Key                                      = 0,
	Event                                    = 1,
	Manual                                   = 2,
	EX6EnhancedInputType_MAX                 = 3,
};

// Enum X6EnhancedInput.EX6TriggerEvent
// NumValues: 0x0007
enum class EX6TriggerEvent : uint8
{
	None                                     = 0,
	Started                                  = 1,
	Ongoing                                  = 2,
	Canceled                                 = 3,
	Triggered                                = 4,
	Completed                                = 5,
	EX6TriggerEvent_MAX                      = 6,
};

// Enum X6EnhancedInput.EX6InputActionCheckState
// NumValues: 0x0004
enum class EX6InputActionCheckState : uint8
{
	Normal                                   = 0,
	Unbind                                   = 1,
	Disable                                  = 2,
	EX6InputActionCheckState_MAX             = 3,
};

// Enum X6EnhancedInput.EX6ForceInputState
// NumValues: 0x0006
enum class EX6ForceInputState : uint8
{
	None                                     = 0,
	DisableAll                               = 1,
	EnableAll                                = 2,
	DisableAllWithExcept                     = 3,
	EnableAllWithExcept                      = 4,
	EX6ForceInputState_MAX                   = 5,
};

// Enum X6EnhancedInput.EX6InputActionValueType
// NumValues: 0x0005
enum class EX6InputActionValueType : uint8
{
	Boolean                                  = 0,
	Axis1D                                   = 1,
	Axis2D                                   = 2,
	Axis3D                                   = 3,
	EX6InputActionValueType_MAX              = 4,
};

// Enum X6EnhancedInput.EX6MappingQueryResult
// NumValues: 0x0005
enum class EX6MappingQueryResult : uint8
{
	Error_EnhancedInputNotEnabled            = 0,
	Error_InputContextNotInActiveContexts    = 1,
	NotMappable                              = 2,
	MappingAvailable                         = 3,
	EX6MappingQueryResult_MAX                = 4,
};

// Enum X6EnhancedInput.EX6MappingQueryIssue
// NumValues: 0x0008
enum class EX6MappingQueryIssue : uint8
{
	NoIssue                                  = 0,
	ReservedByAction                         = 1,
	HidesExistingMapping                     = 2,
	HiddenByExistingMapping                  = 4,
	CollisionWithMappingInSameContext        = 8,
	ForcesTypePromotion                      = 16,
	ForcesTypeDemotion                       = 32,
	EX6MappingQueryIssue_MAX                 = 33,
};

// Enum X6EnhancedInput.EX6ModifierExecutionPhase
// NumValues: 0x0004
enum class EX6ModifierExecutionPhase : uint8
{
	PerInput                                 = 0,
	FinalValue                               = 1,
	NumPhases                                = 2,
	EX6ModifierExecutionPhase_MAX            = 3,
};

// Enum X6EnhancedInput.EX6DeadZoneType
// NumValues: 0x0003
enum class EX6DeadZoneType : uint8
{
	Axial                                    = 0,
	Radial                                   = 1,
	EX6DeadZoneType_MAX                      = 2,
};

// Enum X6EnhancedInput.EX6FOVScalingType
// NumValues: 0x0003
enum class EX6FOVScalingType : uint8
{
	Standard                                 = 0,
	UE4_BackCompat                           = 1,
	EX6FOVScalingType_MAX                    = 2,
};

// Enum X6EnhancedInput.EX6InputAxisSwizzle
// NumValues: 0x0006
enum class EX6InputAxisSwizzle : uint8
{
	YXZ                                      = 0,
	ZYX                                      = 1,
	XZY                                      = 2,
	YZX                                      = 3,
	ZXY                                      = 4,
	EX6InputAxisSwizzle_MAX                  = 5,
};

// Enum X6EnhancedInput.EX6TriggerState
// NumValues: 0x0004
enum class EX6TriggerState : uint8
{
	None                                     = 0,
	Ongoing                                  = 1,
	Triggered                                = 2,
	EX6TriggerState_MAX                      = 3,
};

// Enum X6EnhancedInput.EX6TriggerType
// NumValues: 0x0004
enum class EX6TriggerType : uint8
{
	Explicit                                 = 0,
	Implicit                                 = 1,
	Blocker                                  = 2,
	EX6TriggerType_MAX                       = 3,
};

// ScriptStruct X6EnhancedInput.X6InputActionTriggerKeyData
// 0x0058 (0x0058 - 0x0000)
struct FX6InputActionTriggerKeyData final
{
public:
	EX6EnhancedInputType                          InputType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyMenuCategory;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EventClass;                                        // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventPropertyName;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6InputActionTriggerKeyData) == 0x000008, "Wrong alignment on FX6InputActionTriggerKeyData");
static_assert(sizeof(FX6InputActionTriggerKeyData) == 0x000058, "Wrong size on FX6InputActionTriggerKeyData");
static_assert(offsetof(FX6InputActionTriggerKeyData, InputType) == 0x000000, "Member 'FX6InputActionTriggerKeyData::InputType' has a wrong offset!");
static_assert(offsetof(FX6InputActionTriggerKeyData, Key) == 0x000008, "Member 'FX6InputActionTriggerKeyData::Key' has a wrong offset!");
static_assert(offsetof(FX6InputActionTriggerKeyData, KeyMenuCategory) == 0x000020, "Member 'FX6InputActionTriggerKeyData::KeyMenuCategory' has a wrong offset!");
static_assert(offsetof(FX6InputActionTriggerKeyData, EventClass) == 0x000028, "Member 'FX6InputActionTriggerKeyData::EventClass' has a wrong offset!");
static_assert(offsetof(FX6InputActionTriggerKeyData, EventPropertyName) == 0x000050, "Member 'FX6InputActionTriggerKeyData::EventPropertyName' has a wrong offset!");

// ScriptStruct X6EnhancedInput.X6InputActionSoundInfo
// 0x0040 (0x0040 - 0x0000)
struct FX6InputActionSoundInfo final
{
public:
	class UX6InputAction*                         InputAction;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6TriggerEvent                               TriggerEvent;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkAudioEvent>           AudioEventPtr;                                     // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedBind;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FX6InputActionSoundInfo) == 0x000008, "Wrong alignment on FX6InputActionSoundInfo");
static_assert(sizeof(FX6InputActionSoundInfo) == 0x000040, "Wrong size on FX6InputActionSoundInfo");
static_assert(offsetof(FX6InputActionSoundInfo, InputAction) == 0x000000, "Member 'FX6InputActionSoundInfo::InputAction' has a wrong offset!");
static_assert(offsetof(FX6InputActionSoundInfo, TriggerEvent) == 0x000008, "Member 'FX6InputActionSoundInfo::TriggerEvent' has a wrong offset!");
static_assert(offsetof(FX6InputActionSoundInfo, AudioEventPtr) == 0x000010, "Member 'FX6InputActionSoundInfo::AudioEventPtr' has a wrong offset!");
static_assert(offsetof(FX6InputActionSoundInfo, bNeedBind) == 0x000038, "Member 'FX6InputActionSoundInfo::bNeedBind' has a wrong offset!");

// ScriptStruct X6EnhancedInput.X6InputActionValue
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FX6InputActionValue final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FX6InputActionValue) == 0x000008, "Wrong alignment on FX6InputActionValue");
static_assert(sizeof(FX6InputActionValue) == 0x000020, "Wrong size on FX6InputActionValue");

// ScriptStruct X6EnhancedInput.X6EnhancedActionKeyData
// 0x0088 (0x0088 - 0x0000)
struct FX6EnhancedActionKeyData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EX6EnhancedInputType                          InputType;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EventClass;                                        // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventPropertyName;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EventTargetTags;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UX6InputTrigger*>                Triggers;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UX6InputModifier*>               Modifiers;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bUseValue;                                         // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FX6EnhancedActionKeyData) == 0x000008, "Wrong alignment on FX6EnhancedActionKeyData");
static_assert(sizeof(FX6EnhancedActionKeyData) == 0x000088, "Wrong size on FX6EnhancedActionKeyData");
static_assert(offsetof(FX6EnhancedActionKeyData, InputType) == 0x000001, "Member 'FX6EnhancedActionKeyData::InputType' has a wrong offset!");
static_assert(offsetof(FX6EnhancedActionKeyData, Key) == 0x000008, "Member 'FX6EnhancedActionKeyData::Key' has a wrong offset!");
static_assert(offsetof(FX6EnhancedActionKeyData, EventClass) == 0x000020, "Member 'FX6EnhancedActionKeyData::EventClass' has a wrong offset!");
static_assert(offsetof(FX6EnhancedActionKeyData, EventPropertyName) == 0x000048, "Member 'FX6EnhancedActionKeyData::EventPropertyName' has a wrong offset!");
static_assert(offsetof(FX6EnhancedActionKeyData, EventTargetTags) == 0x000050, "Member 'FX6EnhancedActionKeyData::EventTargetTags' has a wrong offset!");
static_assert(offsetof(FX6EnhancedActionKeyData, Triggers) == 0x000060, "Member 'FX6EnhancedActionKeyData::Triggers' has a wrong offset!");
static_assert(offsetof(FX6EnhancedActionKeyData, Modifiers) == 0x000070, "Member 'FX6EnhancedActionKeyData::Modifiers' has a wrong offset!");
static_assert(offsetof(FX6EnhancedActionKeyData, bUseValue) == 0x000080, "Member 'FX6EnhancedActionKeyData::bUseValue' has a wrong offset!");

// ScriptStruct X6EnhancedInput.X6EnhancedActionKeyMapping
// 0x0040 (0x0040 - 0x0000)
struct FX6EnhancedActionKeyMapping final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ShowName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UX6InputAction*                         Action;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 X6VersionTag;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FX6EnhancedActionKeyData>       KeyDatas;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6EnhancedActionKeyMapping) == 0x000008, "Wrong alignment on FX6EnhancedActionKeyMapping");
static_assert(sizeof(FX6EnhancedActionKeyMapping) == 0x000040, "Wrong size on FX6EnhancedActionKeyMapping");
static_assert(offsetof(FX6EnhancedActionKeyMapping, ShowName) == 0x000008, "Member 'FX6EnhancedActionKeyMapping::ShowName' has a wrong offset!");
static_assert(offsetof(FX6EnhancedActionKeyMapping, Action) == 0x000018, "Member 'FX6EnhancedActionKeyMapping::Action' has a wrong offset!");
static_assert(offsetof(FX6EnhancedActionKeyMapping, X6VersionTag) == 0x000020, "Member 'FX6EnhancedActionKeyMapping::X6VersionTag' has a wrong offset!");
static_assert(offsetof(FX6EnhancedActionKeyMapping, KeyDatas) == 0x000030, "Member 'FX6EnhancedActionKeyMapping::KeyDatas' has a wrong offset!");

// ScriptStruct X6EnhancedInput.X6BlueprintEnhancedInputActionBinding
// 0x0018 (0x0018 - 0x0000)
struct FX6BlueprintEnhancedInputActionBinding final
{
public:
	class UX6InputAction*                         InputAction;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6TriggerEvent                               TriggerEvent;                                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FunctionNameToBind;                                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FX6BlueprintEnhancedInputActionBinding) == 0x000008, "Wrong alignment on FX6BlueprintEnhancedInputActionBinding");
static_assert(sizeof(FX6BlueprintEnhancedInputActionBinding) == 0x000018, "Wrong size on FX6BlueprintEnhancedInputActionBinding");
static_assert(offsetof(FX6BlueprintEnhancedInputActionBinding, InputAction) == 0x000000, "Member 'FX6BlueprintEnhancedInputActionBinding::InputAction' has a wrong offset!");
static_assert(offsetof(FX6BlueprintEnhancedInputActionBinding, TriggerEvent) == 0x000008, "Member 'FX6BlueprintEnhancedInputActionBinding::TriggerEvent' has a wrong offset!");
static_assert(offsetof(FX6BlueprintEnhancedInputActionBinding, FunctionNameToBind) == 0x00000C, "Member 'FX6BlueprintEnhancedInputActionBinding::FunctionNameToBind' has a wrong offset!");

// ScriptStruct X6EnhancedInput.OverwriteKeyArray
// 0x0010 (0x0010 - 0x0000)
struct FOverwriteKeyArray final
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOverwriteKeyArray) == 0x000008, "Wrong alignment on FOverwriteKeyArray");
static_assert(sizeof(FOverwriteKeyArray) == 0x000010, "Wrong size on FOverwriteKeyArray");
static_assert(offsetof(FOverwriteKeyArray, Keys) == 0x000000, "Member 'FOverwriteKeyArray::Keys' has a wrong offset!");

// ScriptStruct X6EnhancedInput.X6InputActionInstance
// 0x0080 (0x0080 - 0x0000)
struct FX6InputActionInstance final
{
public:
	class UX6InputAction*                         SourceAction;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UX6InputTrigger*>                Triggers;                                          // 0x0020(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UX6InputModifier*>               PerInputModifiers;                                 // 0x0030(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UX6InputModifier*>               FinalValueModifiers;                               // 0x0040(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedProcessedTime;                              // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ElapsedTriggeredTime;                              // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EX6TriggerEvent                               TriggerEvent;                                      // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FX6InputActionInstance) == 0x000008, "Wrong alignment on FX6InputActionInstance");
static_assert(sizeof(FX6InputActionInstance) == 0x000080, "Wrong size on FX6InputActionInstance");
static_assert(offsetof(FX6InputActionInstance, SourceAction) == 0x000000, "Member 'FX6InputActionInstance::SourceAction' has a wrong offset!");
static_assert(offsetof(FX6InputActionInstance, Triggers) == 0x000020, "Member 'FX6InputActionInstance::Triggers' has a wrong offset!");
static_assert(offsetof(FX6InputActionInstance, PerInputModifiers) == 0x000030, "Member 'FX6InputActionInstance::PerInputModifiers' has a wrong offset!");
static_assert(offsetof(FX6InputActionInstance, FinalValueModifiers) == 0x000040, "Member 'FX6InputActionInstance::FinalValueModifiers' has a wrong offset!");
static_assert(offsetof(FX6InputActionInstance, ElapsedProcessedTime) == 0x000070, "Member 'FX6InputActionInstance::ElapsedProcessedTime' has a wrong offset!");
static_assert(offsetof(FX6InputActionInstance, ElapsedTriggeredTime) == 0x000074, "Member 'FX6InputActionInstance::ElapsedTriggeredTime' has a wrong offset!");
static_assert(offsetof(FX6InputActionInstance, TriggerEvent) == 0x000078, "Member 'FX6InputActionInstance::TriggerEvent' has a wrong offset!");

// ScriptStruct X6EnhancedInput.X6MappingQueryIssue
// 0x0018 (0x0018 - 0x0000)
struct FX6MappingQueryIssue final
{
public:
	EX6MappingQueryIssue                          Issue;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6InputMappingContext*                 BlockingContext;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UX6InputAction*                         BlockingAction;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6MappingQueryIssue) == 0x000008, "Wrong alignment on FX6MappingQueryIssue");
static_assert(sizeof(FX6MappingQueryIssue) == 0x000018, "Wrong size on FX6MappingQueryIssue");
static_assert(offsetof(FX6MappingQueryIssue, Issue) == 0x000000, "Member 'FX6MappingQueryIssue::Issue' has a wrong offset!");
static_assert(offsetof(FX6MappingQueryIssue, BlockingContext) == 0x000008, "Member 'FX6MappingQueryIssue::BlockingContext' has a wrong offset!");
static_assert(offsetof(FX6MappingQueryIssue, BlockingAction) == 0x000010, "Member 'FX6MappingQueryIssue::BlockingAction' has a wrong offset!");

}

