#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANS_MontageBlendOut

#include "Basic.hpp"

#include "FBlendOutCondition_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ANS_MontageBlendOut.ANS_MontageBlendOut_C.AddJumpData
// 0x0020 (0x0020 - 0x0000)
struct ANS_MontageBlendOut_C_AddJumpData final
{
public:
	double                                        Duration;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFBlendOutCondition                    K2Node_MakeStruct_FBlendOutCondition;              // 0x0008(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANS_MontageBlendOut_C_AddJumpData) == 0x000008, "Wrong alignment on ANS_MontageBlendOut_C_AddJumpData");
static_assert(sizeof(ANS_MontageBlendOut_C_AddJumpData) == 0x000020, "Wrong size on ANS_MontageBlendOut_C_AddJumpData");
static_assert(offsetof(ANS_MontageBlendOut_C_AddJumpData, Duration) == 0x000000, "Member 'ANS_MontageBlendOut_C_AddJumpData::Duration' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_AddJumpData, K2Node_MakeStruct_FBlendOutCondition) == 0x000008, "Member 'ANS_MontageBlendOut_C_AddJumpData::K2Node_MakeStruct_FBlendOutCondition' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_AddJumpData, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'ANS_MontageBlendOut_C_AddJumpData::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function ANS_MontageBlendOut.ANS_MontageBlendOut_C.AddMoveData
// 0x0020 (0x0020 - 0x0000)
struct ANS_MontageBlendOut_C_AddMoveData final
{
public:
	double                                        Duration;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFBlendOutCondition                    K2Node_MakeStruct_FBlendOutCondition;              // 0x0008(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANS_MontageBlendOut_C_AddMoveData) == 0x000008, "Wrong alignment on ANS_MontageBlendOut_C_AddMoveData");
static_assert(sizeof(ANS_MontageBlendOut_C_AddMoveData) == 0x000020, "Wrong size on ANS_MontageBlendOut_C_AddMoveData");
static_assert(offsetof(ANS_MontageBlendOut_C_AddMoveData, Duration) == 0x000000, "Member 'ANS_MontageBlendOut_C_AddMoveData::Duration' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_AddMoveData, K2Node_MakeStruct_FBlendOutCondition) == 0x000008, "Member 'ANS_MontageBlendOut_C_AddMoveData::K2Node_MakeStruct_FBlendOutCondition' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_AddMoveData, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'ANS_MontageBlendOut_C_AddMoveData::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function ANS_MontageBlendOut.ANS_MontageBlendOut_C.CancelAbility
// 0x0048 (0x0048 - 0x0000)
struct ANS_MontageBlendOut_C_CancelAbility final
{
public:
	class ACharacter*                             InCharacter;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           InMontage;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6AbilitySystemComponent*              CallFunc_GetX6AbilitySystemComponent_ReturnValue;  // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       CallFunc_K2_GetAnimatingAbility_ReturnValue;       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_GetCurrentMontage_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANS_MontageBlendOut_C_CancelAbility) == 0x000008, "Wrong alignment on ANS_MontageBlendOut_C_CancelAbility");
static_assert(sizeof(ANS_MontageBlendOut_C_CancelAbility) == 0x000048, "Wrong size on ANS_MontageBlendOut_C_CancelAbility");
static_assert(offsetof(ANS_MontageBlendOut_C_CancelAbility, InCharacter) == 0x000000, "Member 'ANS_MontageBlendOut_C_CancelAbility::InCharacter' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_CancelAbility, InMontage) == 0x000008, "Member 'ANS_MontageBlendOut_C_CancelAbility::InMontage' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_CancelAbility, Ret) == 0x000010, "Member 'ANS_MontageBlendOut_C_CancelAbility::Ret' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_CancelAbility, CallFunc_GetX6AbilitySystemComponent_ReturnValue) == 0x000018, "Member 'ANS_MontageBlendOut_C_CancelAbility::CallFunc_GetX6AbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_CancelAbility, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ANS_MontageBlendOut_C_CancelAbility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_CancelAbility, CallFunc_K2_GetAnimatingAbility_ReturnValue) == 0x000028, "Member 'ANS_MontageBlendOut_C_CancelAbility::CallFunc_K2_GetAnimatingAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_CancelAbility, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'ANS_MontageBlendOut_C_CancelAbility::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_CancelAbility, CallFunc_GetCurrentMontage_ReturnValue) == 0x000038, "Member 'ANS_MontageBlendOut_C_CancelAbility::CallFunc_GetCurrentMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_CancelAbility, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000040, "Member 'ANS_MontageBlendOut_C_CancelAbility::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function ANS_MontageBlendOut.ANS_MontageBlendOut_C.GetNotifyName
// 0x0068 (0x0068 - 0x0000)
struct ANS_MontageBlendOut_C_GetNotifyName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
	class FString                                 TotalName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFBlendOutCondition                    CallFunc_Array_Get_Item;                           // 0x0050(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANS_MontageBlendOut_C_GetNotifyName) == 0x000008, "Wrong alignment on ANS_MontageBlendOut_C_GetNotifyName");
static_assert(sizeof(ANS_MontageBlendOut_C_GetNotifyName) == 0x000068, "Wrong size on ANS_MontageBlendOut_C_GetNotifyName");
static_assert(offsetof(ANS_MontageBlendOut_C_GetNotifyName, ReturnValue) == 0x000000, "Member 'ANS_MontageBlendOut_C_GetNotifyName::ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_GetNotifyName, TotalName) == 0x000010, "Member 'ANS_MontageBlendOut_C_GetNotifyName::TotalName' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_GetNotifyName, Temp_int_Array_Index_Variable) == 0x000020, "Member 'ANS_MontageBlendOut_C_GetNotifyName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_GetNotifyName, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'ANS_MontageBlendOut_C_GetNotifyName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_GetNotifyName, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'ANS_MontageBlendOut_C_GetNotifyName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_GetNotifyName, CallFunc_Concat_StrStr_ReturnValue) == 0x000030, "Member 'ANS_MontageBlendOut_C_GetNotifyName::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_GetNotifyName, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000040, "Member 'ANS_MontageBlendOut_C_GetNotifyName::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_GetNotifyName, CallFunc_Array_Get_Item) == 0x000050, "Member 'ANS_MontageBlendOut_C_GetNotifyName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_GetNotifyName, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'ANS_MontageBlendOut_C_GetNotifyName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_GetNotifyName, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'ANS_MontageBlendOut_C_GetNotifyName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_GetNotifyName, K2Node_SwitchEnum_CmpSuccess) == 0x000065, "Member 'ANS_MontageBlendOut_C_GetNotifyName::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ANS_MontageBlendOut.ANS_MontageBlendOut_C.Received_NotifyTick
// 0x00E0 (0x00E0 - 0x0000)
struct ANS_MontageBlendOut_C_Received_NotifyTick final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         FrameDeltaTime;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNotifyEventReference              EventReference;                                    // 0x0018(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AnimMontage;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          AnimInstance;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             Character;                                         // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFBlendOutCondition                    CallFunc_Array_Get_Item;                           // 0x0078(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage;                 // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLastInputVector_ReturnValue;           // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANS_MontageBlendOut_C_Received_NotifyTick) == 0x000008, "Wrong alignment on ANS_MontageBlendOut_C_Received_NotifyTick");
static_assert(sizeof(ANS_MontageBlendOut_C_Received_NotifyTick) == 0x0000E0, "Wrong size on ANS_MontageBlendOut_C_Received_NotifyTick");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, MeshComp) == 0x000000, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::MeshComp' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, Animation) == 0x000008, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::Animation' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, FrameDeltaTime) == 0x000010, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::FrameDeltaTime' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, EventReference) == 0x000018, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::EventReference' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, ReturnValue) == 0x000048, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, AnimMontage) == 0x000050, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::AnimMontage' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, AnimInstance) == 0x000058, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::AnimInstance' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, Character) == 0x000060, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::Character' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, Temp_int_Array_Index_Variable) == 0x000068, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, CallFunc_Array_Get_Item) == 0x000078, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, K2Node_DynamicCast_AsAnim_Montage) == 0x000088, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::K2Node_DynamicCast_AsAnim_Montage' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, K2Node_SwitchEnum_CmpSuccess) == 0x000091, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, CallFunc_Array_Length_ReturnValue) == 0x000094, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, CallFunc_GetAnimInstance_ReturnValue) == 0x0000A0, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, CallFunc_GetOwner_ReturnValue) == 0x0000A8, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, K2Node_DynamicCast_AsCharacter) == 0x0000B0, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, K2Node_DynamicCast_bSuccess_1) == 0x0000B8, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, CallFunc_IsFalling_ReturnValue) == 0x0000B9, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, CallFunc_GetLastInputVector_ReturnValue) == 0x0000C0, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::CallFunc_GetLastInputVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_Received_NotifyTick, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x0000D8, "Member 'ANS_MontageBlendOut_C_Received_NotifyTick::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");

// Function ANS_MontageBlendOut.ANS_MontageBlendOut_C.StopMontage
// 0x0028 (0x0028 - 0x0000)
struct ANS_MontageBlendOut_C_StopMontage final
{
public:
	class ACharacter*                             InCharacter;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          InAnimInstance;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        InBlendOutTime;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           InMontage;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CancelAbility_Ret;                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Montage_Stop_InBlendOutTime_ImplicitCast; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANS_MontageBlendOut_C_StopMontage) == 0x000008, "Wrong alignment on ANS_MontageBlendOut_C_StopMontage");
static_assert(sizeof(ANS_MontageBlendOut_C_StopMontage) == 0x000028, "Wrong size on ANS_MontageBlendOut_C_StopMontage");
static_assert(offsetof(ANS_MontageBlendOut_C_StopMontage, InCharacter) == 0x000000, "Member 'ANS_MontageBlendOut_C_StopMontage::InCharacter' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_StopMontage, InAnimInstance) == 0x000008, "Member 'ANS_MontageBlendOut_C_StopMontage::InAnimInstance' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_StopMontage, InBlendOutTime) == 0x000010, "Member 'ANS_MontageBlendOut_C_StopMontage::InBlendOutTime' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_StopMontage, InMontage) == 0x000018, "Member 'ANS_MontageBlendOut_C_StopMontage::InMontage' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_StopMontage, CallFunc_CancelAbility_Ret) == 0x000020, "Member 'ANS_MontageBlendOut_C_StopMontage::CallFunc_CancelAbility_Ret' has a wrong offset!");
static_assert(offsetof(ANS_MontageBlendOut_C_StopMontage, CallFunc_Montage_Stop_InBlendOutTime_ImplicitCast) == 0x000024, "Member 'ANS_MontageBlendOut_C_StopMontage::CallFunc_Montage_Stop_InBlendOutTime_ImplicitCast' has a wrong offset!");

}

