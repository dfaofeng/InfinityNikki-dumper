#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DragonIKPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DragonIKPlugin.EIK_Type_Plugin
// NumValues: 0x0003
enum class EIK_Type_Plugin : uint8
{
	ENUM_Two_Bone_Ik                         = 0,
	ENUM_Single_Bone_Ik                      = 1,
	ENUM_MAX                                 = 2,
};

// Enum DragonIKPlugin.ERefPosePluginEnum
// NumValues: 0x0003
enum class ERefPosePluginEnum : uint8
{
	VE_Animated                              = 0,
	VE_Rest                                  = 1,
	VE_MAX                                   = 2,
};

// Enum DragonIKPlugin.ESolverComplexityPluginEnum
// NumValues: 0x0003
enum class ESolverComplexityPluginEnum : uint8
{
	VE_Simple                                = 0,
	VE_Complex                               = 1,
	VE_MAX                                   = 2,
};

// Enum DragonIKPlugin.ETwist_Type_DragonIK
// NumValues: 0x0003
enum class ETwist_Type_DragonIK : uint8
{
	ENUM_PoseAxisTwist                       = 0,
	ENUM_UpAxisTwist                         = 1,
	ENUM_MAX                                 = 2,
};

// Enum DragonIKPlugin.EPole_System_DragonIK
// NumValues: 0x0003
enum class EPole_System_DragonIK : uint8
{
	ENUM_SinglePoleSystem                    = 0,
	ENUM_NSEWPoleSystem                      = 1,
	ENUM_MAX                                 = 2,
};

// Enum DragonIKPlugin.EInputTransformSpace_DragonIK
// NumValues: 0x0003
enum class EInputTransformSpace_DragonIK : uint8
{
	ENUM_WorldSpaceSystem                    = 0,
	ENUM_ComponentSpaceSystem                = 1,
	ENUM_MAX                                 = 2,
};

// Enum DragonIKPlugin.ERotation_Type_DragonIK
// NumValues: 0x0003
enum class ERotation_Type_DragonIK : uint8
{
	ENUM_AdditiveRotation                    = 0,
	ENUM_ReplaceRotation                     = 1,
	ENUM_MAX                                 = 2,
};

// Enum DragonIKPlugin.EIKTrace_Type_Plugin
// NumValues: 0x0004
enum class EIKTrace_Type_Plugin : uint8
{
	ENUM_LineTrace_Type                      = 0,
	ENUM_SphereTrace_Type                    = 1,
	ENUM_BoxTrace_Type                       = 2,
	ENUM_MAX                                 = 3,
};

// Enum DragonIKPlugin.EInterpoLocation_Type_Plugin
// NumValues: 0x0003
enum class EInterpoLocation_Type_Plugin : uint8
{
	ENUM_DivisiveLoc_Interp                  = 0,
	ENUM_LegacyLoc_Interp                    = 1,
	ENUM_MAX                                 = 2,
};

// Enum DragonIKPlugin.EInterpoRotation_Type_Plugin
// NumValues: 0x0003
enum class EInterpoRotation_Type_Plugin : uint8
{
	ENUM_DivisiveRot_Interp                  = 0,
	ENUM_LegacyRot_Interp                    = 1,
	ENUM_MAX                                 = 2,
};

// ScriptStruct DragonIKPlugin.AnimNode_DragonControlBase
// 0x00B8 (0x00C8 - 0x0010)
struct FAnimNode_DragonControlBase : public FAnimNode_Base
{
public:
	struct FComponentSpacePoseLink                ComponentPose;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualAlpha;                                       // 0x0024(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimAlphaInputType                           AlphaInputType;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlphaBoolEnabled;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         alpha;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0038(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   AlphaScaleBiasClamp;                               // 0x0088(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DragonControlBase) == 0x000008, "Wrong alignment on FAnimNode_DragonControlBase");
static_assert(sizeof(FAnimNode_DragonControlBase) == 0x0000C8, "Wrong size on FAnimNode_DragonControlBase");
static_assert(offsetof(FAnimNode_DragonControlBase, ComponentPose) == 0x000010, "Member 'FAnimNode_DragonControlBase::ComponentPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonControlBase, LODThreshold) == 0x000020, "Member 'FAnimNode_DragonControlBase::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonControlBase, ActualAlpha) == 0x000024, "Member 'FAnimNode_DragonControlBase::ActualAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonControlBase, AlphaInputType) == 0x000028, "Member 'FAnimNode_DragonControlBase::AlphaInputType' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonControlBase, bAlphaBoolEnabled) == 0x000029, "Member 'FAnimNode_DragonControlBase::bAlphaBoolEnabled' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonControlBase, alpha) == 0x00002C, "Member 'FAnimNode_DragonControlBase::alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonControlBase, AlphaScaleBias) == 0x000030, "Member 'FAnimNode_DragonControlBase::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonControlBase, AlphaBoolBlend) == 0x000038, "Member 'FAnimNode_DragonControlBase::AlphaBoolBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonControlBase, AlphaCurveName) == 0x000080, "Member 'FAnimNode_DragonControlBase::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonControlBase, AlphaScaleBiasClamp) == 0x000088, "Member 'FAnimNode_DragonControlBase::AlphaScaleBiasClamp' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_ArmSizeStruct
// 0x000C (0x000C - 0x0000)
struct FDragonData_ArmSizeStruct final
{
public:
	bool                                          Use_Custom_Arm_Sizes;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         custom_upperArm_length;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         custom_lowerArm_length;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_ArmSizeStruct) == 0x000004, "Wrong alignment on FDragonData_ArmSizeStruct");
static_assert(sizeof(FDragonData_ArmSizeStruct) == 0x00000C, "Wrong size on FDragonData_ArmSizeStruct");
static_assert(offsetof(FDragonData_ArmSizeStruct, Use_Custom_Arm_Sizes) == 0x000000, "Member 'FDragonData_ArmSizeStruct::Use_Custom_Arm_Sizes' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmSizeStruct, custom_upperArm_length) == 0x000004, "Member 'FDragonData_ArmSizeStruct::custom_upperArm_length' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmSizeStruct, custom_lowerArm_length) == 0x000008, "Member 'FDragonData_ArmSizeStruct::custom_lowerArm_length' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_CustomArmLengths
// 0x0010 (0x0010 - 0x0000)
struct FDragonData_CustomArmLengths final
{
public:
	TArray<struct FDragonData_ArmSizeStruct>      CustomArmSizeArray;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_CustomArmLengths) == 0x000008, "Wrong alignment on FDragonData_CustomArmLengths");
static_assert(sizeof(FDragonData_CustomArmLengths) == 0x000010, "Wrong size on FDragonData_CustomArmLengths");
static_assert(offsetof(FDragonData_CustomArmLengths, CustomArmSizeArray) == 0x000000, "Member 'FDragonData_CustomArmLengths::CustomArmSizeArray' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_FingerData
// 0x0030 (0x0030 - 0x0000)
struct FDragonData_FingerData final
{
public:
	class FName                                   Finger_Bone_Name;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Trace_Scale;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Trace_Offset;                                      // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_Finger_Backward;                                // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDragonData_FingerData) == 0x000008, "Wrong alignment on FDragonData_FingerData");
static_assert(sizeof(FDragonData_FingerData) == 0x000030, "Wrong size on FDragonData_FingerData");
static_assert(offsetof(FDragonData_FingerData, Finger_Bone_Name) == 0x000000, "Member 'FDragonData_FingerData::Finger_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_FingerData, Trace_Scale) == 0x000008, "Member 'FDragonData_FingerData::Trace_Scale' has a wrong offset!");
static_assert(offsetof(FDragonData_FingerData, Trace_Offset) == 0x000010, "Member 'FDragonData_FingerData::Trace_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_FingerData, Is_Finger_Backward) == 0x000028, "Member 'FDragonData_FingerData::Is_Finger_Backward' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_FootData
// 0x00A8 (0x00A8 - 0x0000)
struct FDragonData_FootData final
{
public:
	class FName                                   Feet_Bone_Name;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Knee_Bone_Name;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Thigh_Bone_Name;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Feet_Rotation_Offset;                              // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Fixed_Pole;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Knee_Direction_Offset;                             // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Feet_Trace_Offset;                                 // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Front_Trace_Point_Spacing;                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Side_Traces_Spacing;                               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Feet_Rotation_Limit;                               // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Fixed_Foot_Height;                                 // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Feet_Heights;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Feet_Alpha;                                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min_Feet_Extension;                                // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max_Feet_Extension;                                // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Feet_Slope_Offset_Multiplier;                      // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max_Feet_Lift;                                     // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Overrided_Trace_Radius;                            // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDragonData_FingerData>         Finger_Array;                                      // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_FootData) == 0x000008, "Wrong alignment on FDragonData_FootData");
static_assert(sizeof(FDragonData_FootData) == 0x0000A8, "Wrong size on FDragonData_FootData");
static_assert(offsetof(FDragonData_FootData, Feet_Bone_Name) == 0x000000, "Member 'FDragonData_FootData::Feet_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Knee_Bone_Name) == 0x000008, "Member 'FDragonData_FootData::Knee_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Thigh_Bone_Name) == 0x000010, "Member 'FDragonData_FootData::Thigh_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Feet_Rotation_Offset) == 0x000018, "Member 'FDragonData_FootData::Feet_Rotation_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Fixed_Pole) == 0x000030, "Member 'FDragonData_FootData::Fixed_Pole' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Knee_Direction_Offset) == 0x000038, "Member 'FDragonData_FootData::Knee_Direction_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Feet_Trace_Offset) == 0x000050, "Member 'FDragonData_FootData::Feet_Trace_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Front_Trace_Point_Spacing) == 0x000068, "Member 'FDragonData_FootData::Front_Trace_Point_Spacing' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Side_Traces_Spacing) == 0x00006C, "Member 'FDragonData_FootData::Side_Traces_Spacing' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Feet_Rotation_Limit) == 0x000070, "Member 'FDragonData_FootData::Feet_Rotation_Limit' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Fixed_Foot_Height) == 0x000074, "Member 'FDragonData_FootData::Fixed_Foot_Height' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Feet_Heights) == 0x000078, "Member 'FDragonData_FootData::Feet_Heights' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Feet_Alpha) == 0x00007C, "Member 'FDragonData_FootData::Feet_Alpha' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Min_Feet_Extension) == 0x000080, "Member 'FDragonData_FootData::Min_Feet_Extension' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Max_Feet_Extension) == 0x000084, "Member 'FDragonData_FootData::Max_Feet_Extension' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Feet_Slope_Offset_Multiplier) == 0x000088, "Member 'FDragonData_FootData::Feet_Slope_Offset_Multiplier' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Max_Feet_Lift) == 0x00008C, "Member 'FDragonData_FootData::Max_Feet_Lift' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Overrided_Trace_Radius) == 0x000090, "Member 'FDragonData_FootData::Overrided_Trace_Radius' has a wrong offset!");
static_assert(offsetof(FDragonData_FootData, Finger_Array) == 0x000098, "Member 'FDragonData_FootData::Finger_Array' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_MultiInput
// 0x0020 (0x0020 - 0x0000)
struct FDragonData_MultiInput final
{
public:
	class FName                                   Start_Spine;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Pelvis;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDragonData_FootData>           FeetBones;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_MultiInput) == 0x000008, "Wrong alignment on FDragonData_MultiInput");
static_assert(sizeof(FDragonData_MultiInput) == 0x000020, "Wrong size on FDragonData_MultiInput");
static_assert(offsetof(FDragonData_MultiInput, Start_Spine) == 0x000000, "Member 'FDragonData_MultiInput::Start_Spine' has a wrong offset!");
static_assert(offsetof(FDragonData_MultiInput, Pelvis) == 0x000008, "Member 'FDragonData_MultiInput::Pelvis' has a wrong offset!");
static_assert(offsetof(FDragonData_MultiInput, FeetBones) == 0x000010, "Member 'FDragonData_MultiInput::FeetBones' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_ArmsData
// 0x01E0 (0x01E0 - 0x0000)
struct FDragonData_ArmsData final
{
public:
	struct FBoneReference                         Clavicle_Bone;                                     // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         Shoulder_Bone_Name;                                // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         Elbow_Bone_Name;                                   // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         Hand_Bone_Name;                                    // 0x0030(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          is_this_right_hand;                                // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          invert_lower_twist;                                // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          invert_upper_twist;                                // 0x0042(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Local_Direction_Axis;                              // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Arm_Aiming_Offset;                                 // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          accurate_hand_rotation;                            // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          relative_axis;                                     // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Maximum_Extension;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum_Extension;                                 // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max_Stretch_Ratio;                                 // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stretch_lower_arm_Priorty;                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Elbow_Pole_Offset;                                 // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                North_Pole_Offset;                                 // 0x00A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                South_Pole_Offset;                                 // 0x00C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                West_Pole_Offset;                                  // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                East_Pole_Offset;                                  // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          override_limits;                                   // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Max_Arm_H_Angle;                                   // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Max_Arm_V_Angle;                                   // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Inner_Clavicle_Side_Limit;                         // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Inner_Clavicle_Vertical_Limit;                     // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Outer_Clavicle_Side_Limit;                         // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Outer_Clavicle_Vertical_Limit;                     // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Shoulder_Inner_Clamp;                              // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Shoulder_Outer_Clamp;                              // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ForeArm_Angle_Limit;                               // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Twist_Offset_Reverse;                              // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4[0x3C];                                     // 0x01A4(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDragonData_ArmsData) == 0x000008, "Wrong alignment on FDragonData_ArmsData");
static_assert(sizeof(FDragonData_ArmsData) == 0x0001E0, "Wrong size on FDragonData_ArmsData");
static_assert(offsetof(FDragonData_ArmsData, Clavicle_Bone) == 0x000000, "Member 'FDragonData_ArmsData::Clavicle_Bone' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Shoulder_Bone_Name) == 0x000010, "Member 'FDragonData_ArmsData::Shoulder_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Elbow_Bone_Name) == 0x000020, "Member 'FDragonData_ArmsData::Elbow_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Hand_Bone_Name) == 0x000030, "Member 'FDragonData_ArmsData::Hand_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, is_this_right_hand) == 0x000040, "Member 'FDragonData_ArmsData::is_this_right_hand' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, invert_lower_twist) == 0x000041, "Member 'FDragonData_ArmsData::invert_lower_twist' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, invert_upper_twist) == 0x000042, "Member 'FDragonData_ArmsData::invert_upper_twist' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Local_Direction_Axis) == 0x000048, "Member 'FDragonData_ArmsData::Local_Direction_Axis' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Arm_Aiming_Offset) == 0x000060, "Member 'FDragonData_ArmsData::Arm_Aiming_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, accurate_hand_rotation) == 0x000078, "Member 'FDragonData_ArmsData::accurate_hand_rotation' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, relative_axis) == 0x000079, "Member 'FDragonData_ArmsData::relative_axis' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Maximum_Extension) == 0x00007C, "Member 'FDragonData_ArmsData::Maximum_Extension' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Minimum_Extension) == 0x000080, "Member 'FDragonData_ArmsData::Minimum_Extension' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Max_Stretch_Ratio) == 0x000084, "Member 'FDragonData_ArmsData::Max_Stretch_Ratio' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Stretch_lower_arm_Priorty) == 0x000088, "Member 'FDragonData_ArmsData::Stretch_lower_arm_Priorty' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Elbow_Pole_Offset) == 0x000090, "Member 'FDragonData_ArmsData::Elbow_Pole_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, North_Pole_Offset) == 0x0000A8, "Member 'FDragonData_ArmsData::North_Pole_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, South_Pole_Offset) == 0x0000C0, "Member 'FDragonData_ArmsData::South_Pole_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, West_Pole_Offset) == 0x0000D8, "Member 'FDragonData_ArmsData::West_Pole_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, East_Pole_Offset) == 0x0000F0, "Member 'FDragonData_ArmsData::East_Pole_Offset' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, override_limits) == 0x000108, "Member 'FDragonData_ArmsData::override_limits' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Max_Arm_H_Angle) == 0x000110, "Member 'FDragonData_ArmsData::Max_Arm_H_Angle' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Max_Arm_V_Angle) == 0x000120, "Member 'FDragonData_ArmsData::Max_Arm_V_Angle' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Inner_Clavicle_Side_Limit) == 0x000130, "Member 'FDragonData_ArmsData::Inner_Clavicle_Side_Limit' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Inner_Clavicle_Vertical_Limit) == 0x000140, "Member 'FDragonData_ArmsData::Inner_Clavicle_Vertical_Limit' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Outer_Clavicle_Side_Limit) == 0x000150, "Member 'FDragonData_ArmsData::Outer_Clavicle_Side_Limit' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Outer_Clavicle_Vertical_Limit) == 0x000160, "Member 'FDragonData_ArmsData::Outer_Clavicle_Vertical_Limit' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Shoulder_Inner_Clamp) == 0x000170, "Member 'FDragonData_ArmsData::Shoulder_Inner_Clamp' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Shoulder_Outer_Clamp) == 0x000180, "Member 'FDragonData_ArmsData::Shoulder_Outer_Clamp' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, ForeArm_Angle_Limit) == 0x000190, "Member 'FDragonData_ArmsData::ForeArm_Angle_Limit' has a wrong offset!");
static_assert(offsetof(FDragonData_ArmsData, Twist_Offset_Reverse) == 0x0001A0, "Member 'FDragonData_ArmsData::Twist_Offset_Reverse' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_SingleArmElement
// 0x0080 (0x0080 - 0x0000)
struct FDragonData_SingleArmElement final
{
public:
	struct FTransform                             Overrided_Arm_Transform;                           // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Arm_Alpha;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               rotation_offset;                                   // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_SingleArmElement) == 0x000010, "Wrong alignment on FDragonData_SingleArmElement");
static_assert(sizeof(FDragonData_SingleArmElement) == 0x000080, "Wrong size on FDragonData_SingleArmElement");
static_assert(offsetof(FDragonData_SingleArmElement, Overrided_Arm_Transform) == 0x000000, "Member 'FDragonData_SingleArmElement::Overrided_Arm_Transform' has a wrong offset!");
static_assert(offsetof(FDragonData_SingleArmElement, Arm_Alpha) == 0x000060, "Member 'FDragonData_SingleArmElement::Arm_Alpha' has a wrong offset!");
static_assert(offsetof(FDragonData_SingleArmElement, rotation_offset) == 0x000068, "Member 'FDragonData_SingleArmElement::rotation_offset' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_Overrided_Location_Data
// 0x0010 (0x0010 - 0x0000)
struct FDragonData_Overrided_Location_Data final
{
public:
	TArray<struct FDragonData_SingleArmElement>   Arm_TargetLocation_Overrides;                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_Overrided_Location_Data) == 0x000008, "Wrong alignment on FDragonData_Overrided_Location_Data");
static_assert(sizeof(FDragonData_Overrided_Location_Data) == 0x000010, "Wrong size on FDragonData_Overrided_Location_Data");
static_assert(offsetof(FDragonData_Overrided_Location_Data, Arm_TargetLocation_Overrides) == 0x000000, "Member 'FDragonData_Overrided_Location_Data::Arm_TargetLocation_Overrides' has a wrong offset!");

// ScriptStruct DragonIKPlugin.AnimNode_DragonAimSolver
// 0x0C18 (0x0CE0 - 0x00C8)
struct FAnimNode_DragonAimSolver final : public FAnimNode_DragonControlBase
{
public:
	struct FBoneReference                         EndSplineBone;                                     // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         StartSplineBone;                                   // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LookAtLocation;                                    // 0x00F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDragonData_MultiInput                 dragon_input_data;                                 // 0x0150(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x88];                                     // 0x0170(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDragonData_ArmsData>           Aiming_Hand_Limbs;                                 // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_208[0x10];                                     // 0x0208(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDragonData_Overrided_Location_Data    Arm_TargetLocation_Overrides;                      // 0x0218(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Use_Separate_Targets;                              // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Override_Hand_Rotation;                            // 0x0229(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enable_head_aim;                                   // 0x022A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowHandStretching;                              // 0x022B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          reach_instead;                                     // 0x022C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Aggregate_Hand_Body;                               // 0x022D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Let_Arm_Twist_With_Hand;                           // 0x022E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPole_System_DragonIK                         pole_system_input;                                 // 0x022F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETwist_Type_DragonIK                          arm_twist_axis;                                    // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERotation_Type_DragonIK                       hand_rotation_method;                              // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Override_Head_Rotation;                            // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable_Hand_Interpolation;                         // 0x0233(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hand_Interpolation_Speed;                          // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDragonData_CustomArmLengths           custom_arm_lengths;                                // 0x0238(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EInputTransformSpace_DragonIK                 arm_transform_space;                               // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Main_Arm_Index;                                    // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_250[0x120];                                    // 0x0250(0x0120)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lookat_Radius;                                     // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Inner_Body_Clamp;                                  // 0x0378(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Lookat_Clamp;                                      // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Limbs_Clamp;                                       // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Downward_Dip_Multiplier;                           // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Inverted_Dip_Multiplier;                           // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Vertical_Dip_Treshold;                             // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Side_Move_Multiplier;                              // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Side_Down_Multiplier;                              // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Up_Rot_Clamp;                                      // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Verticle_Range_Angles;                             // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Horizontal_Range_Angles;                           // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     Look_Bending_Curve;                                // 0x03D0(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     Look_Multiplier_Curve;                             // 0x0458(0x0088)(Edit, NativeAccessSpecifierPublic)
	EInputTransformSpace_DragonIK                 look_transform_space;                              // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lock_Legs;                                         // 0x04E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignore_elbow_modification;                         // 0x04E2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignore_separate_hand_solving;                      // 0x04E3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_Natural_Method;                                // 0x04E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Head_Use_Separate_Clamp;                           // 0x04E5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_Head_Accurate;                                  // 0x04E6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          automatic_leg_make;                                // 0x04E7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E8[0x1];                                      // 0x04E8(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          enable_solver;                                     // 0x04E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Work_Outside_PIE;                                  // 0x04EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Adaptive_Terrain_Tail;                             // 0x04EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               Trace_Channel;                                     // 0x04EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4ED[0x3];                                      // 0x04ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Trace_Up_Height;                                   // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Trace_Down_Height;                                 // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F8[0xFC];                                     // 0x04F8(0x00FC)(Fixing Size After Last Property [ Dumper-7 ])
	EInterpoLocation_Type_Plugin                  loc_interp_type;                                   // 0x05F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F5[0x8];                                      // 0x05F5(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Enable_Interpolation;                              // 0x05FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5FE[0x2];                                      // 0x05FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interpolation_Speed;                               // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Toggle_Interpolation_Speed;                        // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_608[0x60];                                     // 0x0608(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAt_Axis;                                       // 0x0668(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Upward_Axis;                                       // 0x0680(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x0698(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_Reference_Forward_Axis;                        // 0x06B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B1[0x7];                                      // 0x06B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Reference_Constant_Forward_Axis;                   // 0x06B8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D0[0x130];                                    // 0x06D0(0x0130)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Debug_LookAtLocation;                              // 0x0800(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     Debug_Hand_Locations;                              // 0x0860(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_870[0x470];                                    // 0x0870(0x0470)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DragonAimSolver) == 0x000010, "Wrong alignment on FAnimNode_DragonAimSolver");
static_assert(sizeof(FAnimNode_DragonAimSolver) == 0x000CE0, "Wrong size on FAnimNode_DragonAimSolver");
static_assert(offsetof(FAnimNode_DragonAimSolver, EndSplineBone) == 0x0000C8, "Member 'FAnimNode_DragonAimSolver::EndSplineBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, StartSplineBone) == 0x0000D8, "Member 'FAnimNode_DragonAimSolver::StartSplineBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, LookAtLocation) == 0x0000F0, "Member 'FAnimNode_DragonAimSolver::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, dragon_input_data) == 0x000150, "Member 'FAnimNode_DragonAimSolver::dragon_input_data' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Aiming_Hand_Limbs) == 0x0001F8, "Member 'FAnimNode_DragonAimSolver::Aiming_Hand_Limbs' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Arm_TargetLocation_Overrides) == 0x000218, "Member 'FAnimNode_DragonAimSolver::Arm_TargetLocation_Overrides' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Use_Separate_Targets) == 0x000228, "Member 'FAnimNode_DragonAimSolver::Use_Separate_Targets' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Override_Hand_Rotation) == 0x000229, "Member 'FAnimNode_DragonAimSolver::Override_Hand_Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, enable_head_aim) == 0x00022A, "Member 'FAnimNode_DragonAimSolver::enable_head_aim' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, bAllowHandStretching) == 0x00022B, "Member 'FAnimNode_DragonAimSolver::bAllowHandStretching' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, reach_instead) == 0x00022C, "Member 'FAnimNode_DragonAimSolver::reach_instead' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Aggregate_Hand_Body) == 0x00022D, "Member 'FAnimNode_DragonAimSolver::Aggregate_Hand_Body' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Let_Arm_Twist_With_Hand) == 0x00022E, "Member 'FAnimNode_DragonAimSolver::Let_Arm_Twist_With_Hand' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, pole_system_input) == 0x00022F, "Member 'FAnimNode_DragonAimSolver::pole_system_input' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, arm_twist_axis) == 0x000230, "Member 'FAnimNode_DragonAimSolver::arm_twist_axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, hand_rotation_method) == 0x000231, "Member 'FAnimNode_DragonAimSolver::hand_rotation_method' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Override_Head_Rotation) == 0x000232, "Member 'FAnimNode_DragonAimSolver::Override_Head_Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Enable_Hand_Interpolation) == 0x000233, "Member 'FAnimNode_DragonAimSolver::Enable_Hand_Interpolation' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Hand_Interpolation_Speed) == 0x000234, "Member 'FAnimNode_DragonAimSolver::Hand_Interpolation_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, custom_arm_lengths) == 0x000238, "Member 'FAnimNode_DragonAimSolver::custom_arm_lengths' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, arm_transform_space) == 0x000248, "Member 'FAnimNode_DragonAimSolver::arm_transform_space' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Main_Arm_Index) == 0x00024C, "Member 'FAnimNode_DragonAimSolver::Main_Arm_Index' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Lookat_Radius) == 0x000370, "Member 'FAnimNode_DragonAimSolver::Lookat_Radius' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Inner_Body_Clamp) == 0x000378, "Member 'FAnimNode_DragonAimSolver::Inner_Body_Clamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Lookat_Clamp) == 0x000390, "Member 'FAnimNode_DragonAimSolver::Lookat_Clamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Limbs_Clamp) == 0x000394, "Member 'FAnimNode_DragonAimSolver::Limbs_Clamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Downward_Dip_Multiplier) == 0x000398, "Member 'FAnimNode_DragonAimSolver::Downward_Dip_Multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Inverted_Dip_Multiplier) == 0x00039C, "Member 'FAnimNode_DragonAimSolver::Inverted_Dip_Multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Vertical_Dip_Treshold) == 0x0003A0, "Member 'FAnimNode_DragonAimSolver::Vertical_Dip_Treshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Side_Move_Multiplier) == 0x0003A4, "Member 'FAnimNode_DragonAimSolver::Side_Move_Multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Side_Down_Multiplier) == 0x0003A8, "Member 'FAnimNode_DragonAimSolver::Side_Down_Multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Up_Rot_Clamp) == 0x0003AC, "Member 'FAnimNode_DragonAimSolver::Up_Rot_Clamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Verticle_Range_Angles) == 0x0003B0, "Member 'FAnimNode_DragonAimSolver::Verticle_Range_Angles' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Horizontal_Range_Angles) == 0x0003C0, "Member 'FAnimNode_DragonAimSolver::Horizontal_Range_Angles' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Look_Bending_Curve) == 0x0003D0, "Member 'FAnimNode_DragonAimSolver::Look_Bending_Curve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Look_Multiplier_Curve) == 0x000458, "Member 'FAnimNode_DragonAimSolver::Look_Multiplier_Curve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, look_transform_space) == 0x0004E0, "Member 'FAnimNode_DragonAimSolver::look_transform_space' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Lock_Legs) == 0x0004E1, "Member 'FAnimNode_DragonAimSolver::Lock_Legs' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, ignore_elbow_modification) == 0x0004E2, "Member 'FAnimNode_DragonAimSolver::ignore_elbow_modification' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, ignore_separate_hand_solving) == 0x0004E3, "Member 'FAnimNode_DragonAimSolver::ignore_separate_hand_solving' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Use_Natural_Method) == 0x0004E4, "Member 'FAnimNode_DragonAimSolver::Use_Natural_Method' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Head_Use_Separate_Clamp) == 0x0004E5, "Member 'FAnimNode_DragonAimSolver::Head_Use_Separate_Clamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Is_Head_Accurate) == 0x0004E6, "Member 'FAnimNode_DragonAimSolver::Is_Head_Accurate' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, automatic_leg_make) == 0x0004E7, "Member 'FAnimNode_DragonAimSolver::automatic_leg_make' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, enable_solver) == 0x0004E9, "Member 'FAnimNode_DragonAimSolver::enable_solver' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Work_Outside_PIE) == 0x0004EA, "Member 'FAnimNode_DragonAimSolver::Work_Outside_PIE' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Adaptive_Terrain_Tail) == 0x0004EB, "Member 'FAnimNode_DragonAimSolver::Adaptive_Terrain_Tail' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Trace_Channel) == 0x0004EC, "Member 'FAnimNode_DragonAimSolver::Trace_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Trace_Up_Height) == 0x0004F0, "Member 'FAnimNode_DragonAimSolver::Trace_Up_Height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Trace_Down_Height) == 0x0004F4, "Member 'FAnimNode_DragonAimSolver::Trace_Down_Height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, loc_interp_type) == 0x0005F4, "Member 'FAnimNode_DragonAimSolver::loc_interp_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Enable_Interpolation) == 0x0005FD, "Member 'FAnimNode_DragonAimSolver::Enable_Interpolation' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Interpolation_Speed) == 0x000600, "Member 'FAnimNode_DragonAimSolver::Interpolation_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Toggle_Interpolation_Speed) == 0x000604, "Member 'FAnimNode_DragonAimSolver::Toggle_Interpolation_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, LookAt_Axis) == 0x000668, "Member 'FAnimNode_DragonAimSolver::LookAt_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Upward_Axis) == 0x000680, "Member 'FAnimNode_DragonAimSolver::Upward_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, TargetOffset) == 0x000698, "Member 'FAnimNode_DragonAimSolver::TargetOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Use_Reference_Forward_Axis) == 0x0006B0, "Member 'FAnimNode_DragonAimSolver::Use_Reference_Forward_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Reference_Constant_Forward_Axis) == 0x0006B8, "Member 'FAnimNode_DragonAimSolver::Reference_Constant_Forward_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Debug_LookAtLocation) == 0x000800, "Member 'FAnimNode_DragonAimSolver::Debug_LookAtLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonAimSolver, Debug_Hand_Locations) == 0x000860, "Member 'FAnimNode_DragonAimSolver::Debug_Hand_Locations' has a wrong offset!");

// ScriptStruct DragonIKPlugin.SocketDragonReference
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FSocketDragonReference final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSocketDragonReference) == 0x000010, "Wrong alignment on FSocketDragonReference");
static_assert(sizeof(FSocketDragonReference) == 0x000070, "Wrong size on FSocketDragonReference");
static_assert(offsetof(FSocketDragonReference, SocketName) == 0x000060, "Member 'FSocketDragonReference::SocketName' has a wrong offset!");

// ScriptStruct DragonIKPlugin.BoneDragonSocketTarget
// 0x0090 (0x0090 - 0x0000)
struct FBoneDragonSocketTarget final
{
public:
	bool                                          bUseSocket;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         BoneReference;                                     // 0x0004(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSocketDragonReference                 SocketReference;                                   // 0x0020(0x0070)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneDragonSocketTarget) == 0x000010, "Wrong alignment on FBoneDragonSocketTarget");
static_assert(sizeof(FBoneDragonSocketTarget) == 0x000090, "Wrong size on FBoneDragonSocketTarget");
static_assert(offsetof(FBoneDragonSocketTarget, bUseSocket) == 0x000000, "Member 'FBoneDragonSocketTarget::bUseSocket' has a wrong offset!");
static_assert(offsetof(FBoneDragonSocketTarget, BoneReference) == 0x000004, "Member 'FBoneDragonSocketTarget::BoneReference' has a wrong offset!");
static_assert(offsetof(FBoneDragonSocketTarget, SocketReference) == 0x000020, "Member 'FBoneDragonSocketTarget::SocketReference' has a wrong offset!");

// ScriptStruct DragonIKPlugin.AnimNode_DragonFabrikSolver
// 0x00C8 (0x0190 - 0x00C8)
struct FAnimNode_DragonFabrikSolver final : public FAnimNode_DragonControlBase
{
public:
	struct FBoneReference                         StartSplineBone;                                   // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EndSplineBone;                                     // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxIterations;                                     // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Target_Transform;                                  // 0x00F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x40];                                     // 0x0150(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DragonFabrikSolver) == 0x000010, "Wrong alignment on FAnimNode_DragonFabrikSolver");
static_assert(sizeof(FAnimNode_DragonFabrikSolver) == 0x000190, "Wrong size on FAnimNode_DragonFabrikSolver");
static_assert(offsetof(FAnimNode_DragonFabrikSolver, StartSplineBone) == 0x0000C8, "Member 'FAnimNode_DragonFabrikSolver::StartSplineBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFabrikSolver, EndSplineBone) == 0x0000D8, "Member 'FAnimNode_DragonFabrikSolver::EndSplineBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFabrikSolver, Precision) == 0x0000E8, "Member 'FAnimNode_DragonFabrikSolver::Precision' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFabrikSolver, MaxIterations) == 0x0000EC, "Member 'FAnimNode_DragonFabrikSolver::MaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFabrikSolver, Target_Transform) == 0x0000F0, "Member 'FAnimNode_DragonFabrikSolver::Target_Transform' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_StickyFeetStruct
// 0x0010 (0x0010 - 0x0000)
struct FDragonData_StickyFeetStruct final
{
public:
	TArray<bool>                                  sticky_feet_array;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_StickyFeetStruct) == 0x000008, "Wrong alignment on FDragonData_StickyFeetStruct");
static_assert(sizeof(FDragonData_StickyFeetStruct) == 0x000010, "Wrong size on FDragonData_StickyFeetStruct");
static_assert(offsetof(FDragonData_StickyFeetStruct, sticky_feet_array) == 0x000000, "Member 'FDragonData_StickyFeetStruct::sticky_feet_array' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_FeetAlpha_Struct
// 0x0010 (0x0010 - 0x0000)
struct FDragonData_FeetAlpha_Struct final
{
public:
	TArray<float>                                 feet_IK_alpha_array;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_FeetAlpha_Struct) == 0x000008, "Wrong alignment on FDragonData_FeetAlpha_Struct");
static_assert(sizeof(FDragonData_FeetAlpha_Struct) == 0x000010, "Wrong size on FDragonData_FeetAlpha_Struct");
static_assert(offsetof(FDragonData_FeetAlpha_Struct, feet_IK_alpha_array) == 0x000000, "Member 'FDragonData_FeetAlpha_Struct::feet_IK_alpha_array' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_StickySocketStruct
// 0x0010 (0x0010 - 0x0000)
struct FDragonData_StickySocketStruct final
{
public:
	TArray<struct FBoneSocketTarget>              sticky_socket_array;                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_StickySocketStruct) == 0x000008, "Wrong alignment on FDragonData_StickySocketStruct");
static_assert(sizeof(FDragonData_StickySocketStruct) == 0x000010, "Wrong size on FDragonData_StickySocketStruct");
static_assert(offsetof(FDragonData_StickySocketStruct, sticky_socket_array) == 0x000000, "Member 'FDragonData_StickySocketStruct::sticky_socket_array' has a wrong offset!");

// ScriptStruct DragonIKPlugin.AnimNode_DragonFeetSolver
// 0x07B8 (0x0880 - 0x00C8)
struct alignas(0x10) FAnimNode_DragonFeetSolver final : public FAnimNode_DragonControlBase
{
public:
	struct FDragonData_MultiInput                 dragon_input_data;                                 // 0x00C8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x70];                                      // 0x00E8(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDragonData_FeetAlpha_Struct           feet_alpha_multiplier_array;                       // 0x0158(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x18];                                     // 0x0168(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	EIK_Type_Plugin                               ik_type;                                           // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIKTrace_Type_Plugin                          trace_type;                                        // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x2];                                      // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Trace_Radius;                                      // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Override_Curve_Velocity;                           // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         custom_velocity;                                   // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterpoLocation_Type_Plugin                  loc_interp_type;                                   // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0xB];                                      // 0x0191(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	EInterpoRotation_Type_Plugin                  rot_interp_type;                                   // 0x019C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         virtual_scale;                                     // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          automatic_leg_make;                                // 0x01A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_OptionalRef_Feet_As_Ref;                       // 0x01A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enable_solver;                                     // 0x01A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Work_Outside_PIE;                                  // 0x01A7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FComponentSpacePoseLink                OptionalRefPose;                                   // 0x01A8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          interpolate_only_z;                                // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         shift_speed;                                       // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x8];                                      // 0x01C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Location_Lerp_Speed;                               // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         feet_rotation_speed;                               // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignore_shift_speed;                                // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_Lerping;                                    // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_Location_Lerping;                           // 0x01D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3[0x5];                                      // 0x01D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Interpolation_Velocity_Curve;                      // 0x01D8(0x0088)(Edit, NativeAccessSpecifierPublic)
	bool                                          Enable_Complex_Rotation_Method;                    // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     ComplexSimpleFoot_Velocity_Curve;                  // 0x0268(0x0088)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F0[0x40];                                     // 0x02F0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	ETraceTypeQuery                               Trace_Channel;                                     // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               Anti_Trace_Channel;                                // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_332[0x2];                                      // 0x0332(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FPS_Lerp_Treshold;                                 // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_338[0x1CC];                                    // 0x0338(0x01CC)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         line_trace_upper_height;                           // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         line_trace_down_height;                            // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Trace_Down_Multiplier_Curve;                       // 0x0510(0x0088)(Edit, NativeAccessSpecifierPublic)
	bool                                          Use_Anti_Channel;                                  // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          use_footstep_listening;                            // 0x0599(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59A[0xE];                                      // 0x059A(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Should_Rotate_Feet;                                // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A9[0x1];                                      // 0x05A9(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          show_trace_in_game;                                // 0x05AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5AB[0x15];                                     // 0x05AB(0x0015)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Enable_Pitch;                                      // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable_Roll;                                       // 0x05C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C2[0x6];                                      // 0x05C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                character_direction_vector_CS;                     // 0x05C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                character_forward_direction_vector_CS;             // 0x05E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                poles_forward_direction_vector_CS;                 // 0x05F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_Four_Point_Feets;                              // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable_Foot_Lift_Limit;                            // 0x0611(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Affect_Toes_Always;                                // 0x0612(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_613[0x5];                                      // 0x0613(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Finger_Alpha_Velocity_Curve;                       // 0x0618(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         Max_Limb_Radius;                                   // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          sticky_feet_mode;                                  // 0x06A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A5[0x3];                                      // 0x06A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         sticky_feet_on_speed;                              // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         sticky_feet_off_speed;                             // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sticky_Feet_Range;                                 // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDragonData_StickyFeetStruct           sticky_feets_data;                                 // 0x06B8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          sticky_floor_detection;                            // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C9[0x3];                                      // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         floor_value;                                       // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Auto_Sticky_Toggle;                                // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D1[0x7];                                      // 0x06D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDragonData_StickySocketStruct         sticky_sockets_data;                               // 0x06D8(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E8[0x188];                                    // 0x06E8(0x0188)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Foot_01_Height_Offset;                             // 0x0870(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Foot_02_Height_Offset;                             // 0x0874(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Foot_03_Height_Offset;                             // 0x0878(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Foot_04_Height_Offset;                             // 0x087C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_DragonFeetSolver) == 0x000010, "Wrong alignment on FAnimNode_DragonFeetSolver");
static_assert(sizeof(FAnimNode_DragonFeetSolver) == 0x000880, "Wrong size on FAnimNode_DragonFeetSolver");
static_assert(offsetof(FAnimNode_DragonFeetSolver, dragon_input_data) == 0x0000C8, "Member 'FAnimNode_DragonFeetSolver::dragon_input_data' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, feet_alpha_multiplier_array) == 0x000158, "Member 'FAnimNode_DragonFeetSolver::feet_alpha_multiplier_array' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, ik_type) == 0x000180, "Member 'FAnimNode_DragonFeetSolver::ik_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, trace_type) == 0x000181, "Member 'FAnimNode_DragonFeetSolver::trace_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Trace_Radius) == 0x000184, "Member 'FAnimNode_DragonFeetSolver::Trace_Radius' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Override_Curve_Velocity) == 0x000188, "Member 'FAnimNode_DragonFeetSolver::Override_Curve_Velocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, custom_velocity) == 0x00018C, "Member 'FAnimNode_DragonFeetSolver::custom_velocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, loc_interp_type) == 0x000190, "Member 'FAnimNode_DragonFeetSolver::loc_interp_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, rot_interp_type) == 0x00019C, "Member 'FAnimNode_DragonFeetSolver::rot_interp_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, virtual_scale) == 0x0001A0, "Member 'FAnimNode_DragonFeetSolver::virtual_scale' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, automatic_leg_make) == 0x0001A4, "Member 'FAnimNode_DragonFeetSolver::automatic_leg_make' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Use_OptionalRef_Feet_As_Ref) == 0x0001A5, "Member 'FAnimNode_DragonFeetSolver::Use_OptionalRef_Feet_As_Ref' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, enable_solver) == 0x0001A6, "Member 'FAnimNode_DragonFeetSolver::enable_solver' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Work_Outside_PIE) == 0x0001A7, "Member 'FAnimNode_DragonFeetSolver::Work_Outside_PIE' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, OptionalRefPose) == 0x0001A8, "Member 'FAnimNode_DragonFeetSolver::OptionalRefPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, interpolate_only_z) == 0x0001B8, "Member 'FAnimNode_DragonFeetSolver::interpolate_only_z' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, shift_speed) == 0x0001BC, "Member 'FAnimNode_DragonFeetSolver::shift_speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Location_Lerp_Speed) == 0x0001C8, "Member 'FAnimNode_DragonFeetSolver::Location_Lerp_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, feet_rotation_speed) == 0x0001CC, "Member 'FAnimNode_DragonFeetSolver::feet_rotation_speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, ignore_shift_speed) == 0x0001D0, "Member 'FAnimNode_DragonFeetSolver::ignore_shift_speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Ignore_Lerping) == 0x0001D1, "Member 'FAnimNode_DragonFeetSolver::Ignore_Lerping' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Ignore_Location_Lerping) == 0x0001D2, "Member 'FAnimNode_DragonFeetSolver::Ignore_Location_Lerping' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Interpolation_Velocity_Curve) == 0x0001D8, "Member 'FAnimNode_DragonFeetSolver::Interpolation_Velocity_Curve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Enable_Complex_Rotation_Method) == 0x000260, "Member 'FAnimNode_DragonFeetSolver::Enable_Complex_Rotation_Method' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, ComplexSimpleFoot_Velocity_Curve) == 0x000268, "Member 'FAnimNode_DragonFeetSolver::ComplexSimpleFoot_Velocity_Curve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Trace_Channel) == 0x000330, "Member 'FAnimNode_DragonFeetSolver::Trace_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Anti_Trace_Channel) == 0x000331, "Member 'FAnimNode_DragonFeetSolver::Anti_Trace_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, FPS_Lerp_Treshold) == 0x000334, "Member 'FAnimNode_DragonFeetSolver::FPS_Lerp_Treshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, line_trace_upper_height) == 0x000504, "Member 'FAnimNode_DragonFeetSolver::line_trace_upper_height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, line_trace_down_height) == 0x000508, "Member 'FAnimNode_DragonFeetSolver::line_trace_down_height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Trace_Down_Multiplier_Curve) == 0x000510, "Member 'FAnimNode_DragonFeetSolver::Trace_Down_Multiplier_Curve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Use_Anti_Channel) == 0x000598, "Member 'FAnimNode_DragonFeetSolver::Use_Anti_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, use_footstep_listening) == 0x000599, "Member 'FAnimNode_DragonFeetSolver::use_footstep_listening' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Should_Rotate_Feet) == 0x0005A8, "Member 'FAnimNode_DragonFeetSolver::Should_Rotate_Feet' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, show_trace_in_game) == 0x0005AA, "Member 'FAnimNode_DragonFeetSolver::show_trace_in_game' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Enable_Pitch) == 0x0005C0, "Member 'FAnimNode_DragonFeetSolver::Enable_Pitch' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Enable_Roll) == 0x0005C1, "Member 'FAnimNode_DragonFeetSolver::Enable_Roll' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, character_direction_vector_CS) == 0x0005C8, "Member 'FAnimNode_DragonFeetSolver::character_direction_vector_CS' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, character_forward_direction_vector_CS) == 0x0005E0, "Member 'FAnimNode_DragonFeetSolver::character_forward_direction_vector_CS' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, poles_forward_direction_vector_CS) == 0x0005F8, "Member 'FAnimNode_DragonFeetSolver::poles_forward_direction_vector_CS' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Use_Four_Point_Feets) == 0x000610, "Member 'FAnimNode_DragonFeetSolver::Use_Four_Point_Feets' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Enable_Foot_Lift_Limit) == 0x000611, "Member 'FAnimNode_DragonFeetSolver::Enable_Foot_Lift_Limit' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Affect_Toes_Always) == 0x000612, "Member 'FAnimNode_DragonFeetSolver::Affect_Toes_Always' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Finger_Alpha_Velocity_Curve) == 0x000618, "Member 'FAnimNode_DragonFeetSolver::Finger_Alpha_Velocity_Curve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Max_Limb_Radius) == 0x0006A0, "Member 'FAnimNode_DragonFeetSolver::Max_Limb_Radius' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, sticky_feet_mode) == 0x0006A4, "Member 'FAnimNode_DragonFeetSolver::sticky_feet_mode' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, sticky_feet_on_speed) == 0x0006A8, "Member 'FAnimNode_DragonFeetSolver::sticky_feet_on_speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, sticky_feet_off_speed) == 0x0006AC, "Member 'FAnimNode_DragonFeetSolver::sticky_feet_off_speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Sticky_Feet_Range) == 0x0006B0, "Member 'FAnimNode_DragonFeetSolver::Sticky_Feet_Range' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, sticky_feets_data) == 0x0006B8, "Member 'FAnimNode_DragonFeetSolver::sticky_feets_data' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, sticky_floor_detection) == 0x0006C8, "Member 'FAnimNode_DragonFeetSolver::sticky_floor_detection' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, floor_value) == 0x0006CC, "Member 'FAnimNode_DragonFeetSolver::floor_value' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Auto_Sticky_Toggle) == 0x0006D0, "Member 'FAnimNode_DragonFeetSolver::Auto_Sticky_Toggle' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, sticky_sockets_data) == 0x0006D8, "Member 'FAnimNode_DragonFeetSolver::sticky_sockets_data' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Foot_01_Height_Offset) == 0x000870, "Member 'FAnimNode_DragonFeetSolver::Foot_01_Height_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Foot_02_Height_Offset) == 0x000874, "Member 'FAnimNode_DragonFeetSolver::Foot_02_Height_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Foot_03_Height_Offset) == 0x000878, "Member 'FAnimNode_DragonFeetSolver::Foot_03_Height_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonFeetSolver, Foot_04_Height_Offset) == 0x00087C, "Member 'FAnimNode_DragonFeetSolver::Foot_04_Height_Offset' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_PhysicsBoneStrip
// 0x0020 (0x0020 - 0x0000)
struct FDragonData_PhysicsBoneStrip final
{
public:
	struct FBoneReference                         Bone_Chain_Start;                                  // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         Bone_Chain_End;                                    // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_PhysicsBoneStrip) == 0x000004, "Wrong alignment on FDragonData_PhysicsBoneStrip");
static_assert(sizeof(FDragonData_PhysicsBoneStrip) == 0x000020, "Wrong size on FDragonData_PhysicsBoneStrip");
static_assert(offsetof(FDragonData_PhysicsBoneStrip, Bone_Chain_Start) == 0x000000, "Member 'FDragonData_PhysicsBoneStrip::Bone_Chain_Start' has a wrong offset!");
static_assert(offsetof(FDragonData_PhysicsBoneStrip, Bone_Chain_End) == 0x000010, "Member 'FDragonData_PhysicsBoneStrip::Bone_Chain_End' has a wrong offset!");

// ScriptStruct DragonIKPlugin.AnimNode_DragonPhysicsSolver
// 0x0048 (0x0110 - 0x00C8)
struct FAnimNode_DragonPhysicsSolver final : public FAnimNode_DragonControlBase
{
public:
	uint8                                         Pad_C8[0x40];                                      // 0x00C8(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         physanim_tag_index;                                // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DragonPhysicsSolver) == 0x000008, "Wrong alignment on FAnimNode_DragonPhysicsSolver");
static_assert(sizeof(FAnimNode_DragonPhysicsSolver) == 0x000110, "Wrong size on FAnimNode_DragonPhysicsSolver");
static_assert(offsetof(FAnimNode_DragonPhysicsSolver, physanim_tag_index) == 0x000108, "Member 'FAnimNode_DragonPhysicsSolver::physanim_tag_index' has a wrong offset!");

// ScriptStruct DragonIKPlugin.AnimNode_DragonSpineSolver
// 0x0C68 (0x0D30 - 0x00C8)
struct alignas(0x10) FAnimNode_DragonSpineSolver final : public FAnimNode_DragonControlBase
{
public:
	struct FDragonData_MultiInput                 dragon_input_data;                                 // 0x00C8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x70];                                      // 0x00E8(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Precision;                                         // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumPitch;                                      // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumPitch;                                      // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumRoll;                                       // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumRoll;                                       // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x4];                                      // 0x0170(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         shift_speed;                                       // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               Trace_Channel;                                     // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               Anti_Trace_Channel;                                // 0x0179(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIKTrace_Type_Plugin                          trace_type;                                        // 0x017A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17B[0x1];                                      // 0x017B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Trace_Radius;                                      // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Override_Curve_Velocity;                           // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         custom_velocity;                                   // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Rotate_Around_Translate;                           // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESolverComplexityPluginEnum                   complexity_type;                                   // 0x0189(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_Lerping;                                    // 0x018A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18B[0x1D];                                     // 0x018B(0x001D)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         virtual_scale;                                     // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         line_trace_downward_height;                        // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         line_trace_upper_height;                           // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_Anti_Channel;                                  // 0x01B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5[0x13];                                     // 0x01B5(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          stabilize_pelvis_legs;                             // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Pelvis_UpSlopeStabilization_Alpha;                 // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis_DownSlopeStabilization_Alpha;               // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          stabilize_chest_legs;                              // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Chest_UpSlopeStabilization_Alpha;                  // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_DownslopeStabilization_Alpha;                // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         Stabilization_Head_Bone;                           // 0x01E0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         Stabilization_Tail_Bone;                           // 0x01F0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Use_Ducking_Feature;                               // 0x0200(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               Ducking_Trace_Channel;                             // 0x0201(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Ducking_Limit;                                     // 0x0204(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis_Crouch_Height;                              // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis_Crouch_Rotation_Intensity;                  // 0x020C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Duck_Pelvis_Trace_Offset;                          // 0x0210(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_Crouch_Height;                               // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_Crouch_Rotation_Intensity;                   // 0x022C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Duck_Chest_Trace_Offset;                           // 0x0230(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_248[0x250];                                    // 0x0248(0x0250)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Slanted_Height_Up_Offset;                          // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Slanted_Height_Down_Offset;                        // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         dip_multiplier;                                    // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pelvis_adaptive_gravity;                           // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          reverse_fabrik;                                    // 0x04AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AD[0x7];                                      // 0x04AD(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Calculation_To_RefPose;                            // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Chest_Slanted_Height_Up_Offset;                    // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_Slanted_Height_Down_Offset;                  // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         chest_side_dip_multiplier;                         // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         chest_adaptive_gravity;                            // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_Base_Offset;                                 // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis_Base_Offset;                                // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         virtual_leg_width;                                 // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Maximum_Dip_Height;                                // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D8[0x8];                                      // 0x04D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Pelvis_Height_Multiplier_Curve;                    // 0x04E0(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         Maximum_Dip_Height_Chest;                          // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Chest_Height_Multiplier_Curve;                     // 0x0570(0x0088)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F8[0xC];                                      // 0x05F8(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         rotation_power_between;                            // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_Automatic_Fabrik_Selection;                    // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Trace_Lerp_Speed;                                  // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Location_Lerp_Speed;                               // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_614[0x10];                                     // 0x0614(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rotation_Lerp_Speed;                               // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_628[0x8];                                      // 0x0628(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Interpolation_Multiplier_Curve;                    // 0x0630(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         Chest_Influence_Alpha;                             // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis_ForwardRotation_Intensity;                  // 0x06BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis_UpwardForwardRotation_Intensity;            // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Body_Rotation_Intensity;                           // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pelvis_Rotation_Offset;                            // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_ForwardRotation_Intensity;                   // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_UpwardForwardRotation_Intensity;             // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_SidewardRotation_Intensity;                  // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chest_Rotation_Offset;                             // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6DC[0x64];                                     // 0x06DC(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Full_Extended_Spine;                               // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_741[0x3];                                      // 0x0741(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         max_extension_ratio;                               // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         min_extension_ratio;                               // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         extension_switch_speed;                            // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_750[0x4];                                      // 0x0750(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          enable_solver;                                     // 0x0754(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Work_Outside_PIE;                                  // 0x0755(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_Fake_Chest_Rotations;                          // 0x0756(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use_Fake_Pelvis_Rotations;                         // 0x0757(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_758[0x4];                                      // 0x0758(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Force_Activation;                                  // 0x075C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          accurate_feet_placement;                           // 0x075D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75E[0x2];                                      // 0x075E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Accurate_Foot_Curve;                               // 0x0760(0x0088)(Edit, NativeAccessSpecifierPublic)
	bool                                          use_crosshair_trace_also_for_fail_distance;        // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Only_Root_Solve;                                   // 0x07E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_Chest_Solve;                                // 0x07EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7EB[0xD];                                      // 0x07EB(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Overall_PostSolved_Offset;                         // 0x07F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                character_direction_vector_CS;                     // 0x0810(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward_Direction_Vector;                          // 0x0828(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          flip_forward_and_right;                            // 0x0840(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_841[0x1F];                                     // 0x0841(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	ERefPosePluginEnum                            SolverReferencePose;                               // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Spine_Feet_Connect;                                // 0x0861(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_862[0x3C2];                                    // 0x0862(0x03C2)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Snake_Joint_Speed;                                 // 0x0C24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable_Snake_Interpolation;                        // 0x0C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          is_snake;                                          // 0x0C29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore_End_Points;                                 // 0x0C2A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2B[0x1];                                      // 0x0C2B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Maximum_Feet_Distance;                             // 0x0C2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Minimum_Feet_Distance;                             // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayLineTrace;                                  // 0x0C34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C35[0xFB];                                     // 0x0C35(0x00FB)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DragonSpineSolver) == 0x000010, "Wrong alignment on FAnimNode_DragonSpineSolver");
static_assert(sizeof(FAnimNode_DragonSpineSolver) == 0x000D30, "Wrong size on FAnimNode_DragonSpineSolver");
static_assert(offsetof(FAnimNode_DragonSpineSolver, dragon_input_data) == 0x0000C8, "Member 'FAnimNode_DragonSpineSolver::dragon_input_data' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Precision) == 0x000158, "Member 'FAnimNode_DragonSpineSolver::Precision' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, MaximumPitch) == 0x00015C, "Member 'FAnimNode_DragonSpineSolver::MaximumPitch' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, MinimumPitch) == 0x000160, "Member 'FAnimNode_DragonSpineSolver::MinimumPitch' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, MaximumRoll) == 0x000164, "Member 'FAnimNode_DragonSpineSolver::MaximumRoll' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, MinimumRoll) == 0x000168, "Member 'FAnimNode_DragonSpineSolver::MinimumRoll' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, MaxIterations) == 0x00016C, "Member 'FAnimNode_DragonSpineSolver::MaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, shift_speed) == 0x000174, "Member 'FAnimNode_DragonSpineSolver::shift_speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Trace_Channel) == 0x000178, "Member 'FAnimNode_DragonSpineSolver::Trace_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Anti_Trace_Channel) == 0x000179, "Member 'FAnimNode_DragonSpineSolver::Anti_Trace_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, trace_type) == 0x00017A, "Member 'FAnimNode_DragonSpineSolver::trace_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Trace_Radius) == 0x00017C, "Member 'FAnimNode_DragonSpineSolver::Trace_Radius' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Override_Curve_Velocity) == 0x000180, "Member 'FAnimNode_DragonSpineSolver::Override_Curve_Velocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, custom_velocity) == 0x000184, "Member 'FAnimNode_DragonSpineSolver::custom_velocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Rotate_Around_Translate) == 0x000188, "Member 'FAnimNode_DragonSpineSolver::Rotate_Around_Translate' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, complexity_type) == 0x000189, "Member 'FAnimNode_DragonSpineSolver::complexity_type' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Ignore_Lerping) == 0x00018A, "Member 'FAnimNode_DragonSpineSolver::Ignore_Lerping' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, virtual_scale) == 0x0001A8, "Member 'FAnimNode_DragonSpineSolver::virtual_scale' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, line_trace_downward_height) == 0x0001AC, "Member 'FAnimNode_DragonSpineSolver::line_trace_downward_height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, line_trace_upper_height) == 0x0001B0, "Member 'FAnimNode_DragonSpineSolver::line_trace_upper_height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Use_Anti_Channel) == 0x0001B4, "Member 'FAnimNode_DragonSpineSolver::Use_Anti_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, stabilize_pelvis_legs) == 0x0001C8, "Member 'FAnimNode_DragonSpineSolver::stabilize_pelvis_legs' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Pelvis_UpSlopeStabilization_Alpha) == 0x0001CC, "Member 'FAnimNode_DragonSpineSolver::Pelvis_UpSlopeStabilization_Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Pelvis_DownSlopeStabilization_Alpha) == 0x0001D0, "Member 'FAnimNode_DragonSpineSolver::Pelvis_DownSlopeStabilization_Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, stabilize_chest_legs) == 0x0001D4, "Member 'FAnimNode_DragonSpineSolver::stabilize_chest_legs' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_UpSlopeStabilization_Alpha) == 0x0001D8, "Member 'FAnimNode_DragonSpineSolver::Chest_UpSlopeStabilization_Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_DownslopeStabilization_Alpha) == 0x0001DC, "Member 'FAnimNode_DragonSpineSolver::Chest_DownslopeStabilization_Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Stabilization_Head_Bone) == 0x0001E0, "Member 'FAnimNode_DragonSpineSolver::Stabilization_Head_Bone' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Stabilization_Tail_Bone) == 0x0001F0, "Member 'FAnimNode_DragonSpineSolver::Stabilization_Tail_Bone' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Use_Ducking_Feature) == 0x000200, "Member 'FAnimNode_DragonSpineSolver::Use_Ducking_Feature' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Ducking_Trace_Channel) == 0x000201, "Member 'FAnimNode_DragonSpineSolver::Ducking_Trace_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Ducking_Limit) == 0x000204, "Member 'FAnimNode_DragonSpineSolver::Ducking_Limit' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Pelvis_Crouch_Height) == 0x000208, "Member 'FAnimNode_DragonSpineSolver::Pelvis_Crouch_Height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Pelvis_Crouch_Rotation_Intensity) == 0x00020C, "Member 'FAnimNode_DragonSpineSolver::Pelvis_Crouch_Rotation_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Duck_Pelvis_Trace_Offset) == 0x000210, "Member 'FAnimNode_DragonSpineSolver::Duck_Pelvis_Trace_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Crouch_Height) == 0x000228, "Member 'FAnimNode_DragonSpineSolver::Chest_Crouch_Height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Crouch_Rotation_Intensity) == 0x00022C, "Member 'FAnimNode_DragonSpineSolver::Chest_Crouch_Rotation_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Duck_Chest_Trace_Offset) == 0x000230, "Member 'FAnimNode_DragonSpineSolver::Duck_Chest_Trace_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Slanted_Height_Up_Offset) == 0x000498, "Member 'FAnimNode_DragonSpineSolver::Slanted_Height_Up_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Slanted_Height_Down_Offset) == 0x0004A0, "Member 'FAnimNode_DragonSpineSolver::Slanted_Height_Down_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, dip_multiplier) == 0x0004A4, "Member 'FAnimNode_DragonSpineSolver::dip_multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, pelvis_adaptive_gravity) == 0x0004A8, "Member 'FAnimNode_DragonSpineSolver::pelvis_adaptive_gravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, reverse_fabrik) == 0x0004AC, "Member 'FAnimNode_DragonSpineSolver::reverse_fabrik' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Calculation_To_RefPose) == 0x0004B4, "Member 'FAnimNode_DragonSpineSolver::Calculation_To_RefPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Slanted_Height_Up_Offset) == 0x0004B8, "Member 'FAnimNode_DragonSpineSolver::Chest_Slanted_Height_Up_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Slanted_Height_Down_Offset) == 0x0004BC, "Member 'FAnimNode_DragonSpineSolver::Chest_Slanted_Height_Down_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, chest_side_dip_multiplier) == 0x0004C0, "Member 'FAnimNode_DragonSpineSolver::chest_side_dip_multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, chest_adaptive_gravity) == 0x0004C4, "Member 'FAnimNode_DragonSpineSolver::chest_adaptive_gravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Base_Offset) == 0x0004C8, "Member 'FAnimNode_DragonSpineSolver::Chest_Base_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Pelvis_Base_Offset) == 0x0004CC, "Member 'FAnimNode_DragonSpineSolver::Pelvis_Base_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, virtual_leg_width) == 0x0004D0, "Member 'FAnimNode_DragonSpineSolver::virtual_leg_width' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Maximum_Dip_Height) == 0x0004D4, "Member 'FAnimNode_DragonSpineSolver::Maximum_Dip_Height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Pelvis_Height_Multiplier_Curve) == 0x0004E0, "Member 'FAnimNode_DragonSpineSolver::Pelvis_Height_Multiplier_Curve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Maximum_Dip_Height_Chest) == 0x000568, "Member 'FAnimNode_DragonSpineSolver::Maximum_Dip_Height_Chest' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Height_Multiplier_Curve) == 0x000570, "Member 'FAnimNode_DragonSpineSolver::Chest_Height_Multiplier_Curve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, rotation_power_between) == 0x000604, "Member 'FAnimNode_DragonSpineSolver::rotation_power_between' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Use_Automatic_Fabrik_Selection) == 0x000608, "Member 'FAnimNode_DragonSpineSolver::Use_Automatic_Fabrik_Selection' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Trace_Lerp_Speed) == 0x00060C, "Member 'FAnimNode_DragonSpineSolver::Trace_Lerp_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Location_Lerp_Speed) == 0x000610, "Member 'FAnimNode_DragonSpineSolver::Location_Lerp_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Rotation_Lerp_Speed) == 0x000624, "Member 'FAnimNode_DragonSpineSolver::Rotation_Lerp_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Interpolation_Multiplier_Curve) == 0x000630, "Member 'FAnimNode_DragonSpineSolver::Interpolation_Multiplier_Curve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Influence_Alpha) == 0x0006B8, "Member 'FAnimNode_DragonSpineSolver::Chest_Influence_Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Pelvis_ForwardRotation_Intensity) == 0x0006BC, "Member 'FAnimNode_DragonSpineSolver::Pelvis_ForwardRotation_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Pelvis_UpwardForwardRotation_Intensity) == 0x0006C0, "Member 'FAnimNode_DragonSpineSolver::Pelvis_UpwardForwardRotation_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Body_Rotation_Intensity) == 0x0006C4, "Member 'FAnimNode_DragonSpineSolver::Body_Rotation_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Pelvis_Rotation_Offset) == 0x0006C8, "Member 'FAnimNode_DragonSpineSolver::Pelvis_Rotation_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_ForwardRotation_Intensity) == 0x0006CC, "Member 'FAnimNode_DragonSpineSolver::Chest_ForwardRotation_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_UpwardForwardRotation_Intensity) == 0x0006D0, "Member 'FAnimNode_DragonSpineSolver::Chest_UpwardForwardRotation_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_SidewardRotation_Intensity) == 0x0006D4, "Member 'FAnimNode_DragonSpineSolver::Chest_SidewardRotation_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Chest_Rotation_Offset) == 0x0006D8, "Member 'FAnimNode_DragonSpineSolver::Chest_Rotation_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Full_Extended_Spine) == 0x000740, "Member 'FAnimNode_DragonSpineSolver::Full_Extended_Spine' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, max_extension_ratio) == 0x000744, "Member 'FAnimNode_DragonSpineSolver::max_extension_ratio' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, min_extension_ratio) == 0x000748, "Member 'FAnimNode_DragonSpineSolver::min_extension_ratio' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, extension_switch_speed) == 0x00074C, "Member 'FAnimNode_DragonSpineSolver::extension_switch_speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, enable_solver) == 0x000754, "Member 'FAnimNode_DragonSpineSolver::enable_solver' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Work_Outside_PIE) == 0x000755, "Member 'FAnimNode_DragonSpineSolver::Work_Outside_PIE' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Use_Fake_Chest_Rotations) == 0x000756, "Member 'FAnimNode_DragonSpineSolver::Use_Fake_Chest_Rotations' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Use_Fake_Pelvis_Rotations) == 0x000757, "Member 'FAnimNode_DragonSpineSolver::Use_Fake_Pelvis_Rotations' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Force_Activation) == 0x00075C, "Member 'FAnimNode_DragonSpineSolver::Force_Activation' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, accurate_feet_placement) == 0x00075D, "Member 'FAnimNode_DragonSpineSolver::accurate_feet_placement' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Accurate_Foot_Curve) == 0x000760, "Member 'FAnimNode_DragonSpineSolver::Accurate_Foot_Curve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, use_crosshair_trace_also_for_fail_distance) == 0x0007E8, "Member 'FAnimNode_DragonSpineSolver::use_crosshair_trace_also_for_fail_distance' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Only_Root_Solve) == 0x0007E9, "Member 'FAnimNode_DragonSpineSolver::Only_Root_Solve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Ignore_Chest_Solve) == 0x0007EA, "Member 'FAnimNode_DragonSpineSolver::Ignore_Chest_Solve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Overall_PostSolved_Offset) == 0x0007F8, "Member 'FAnimNode_DragonSpineSolver::Overall_PostSolved_Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, character_direction_vector_CS) == 0x000810, "Member 'FAnimNode_DragonSpineSolver::character_direction_vector_CS' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Forward_Direction_Vector) == 0x000828, "Member 'FAnimNode_DragonSpineSolver::Forward_Direction_Vector' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, flip_forward_and_right) == 0x000840, "Member 'FAnimNode_DragonSpineSolver::flip_forward_and_right' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, SolverReferencePose) == 0x000860, "Member 'FAnimNode_DragonSpineSolver::SolverReferencePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Spine_Feet_Connect) == 0x000861, "Member 'FAnimNode_DragonSpineSolver::Spine_Feet_Connect' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Snake_Joint_Speed) == 0x000C24, "Member 'FAnimNode_DragonSpineSolver::Snake_Joint_Speed' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Enable_Snake_Interpolation) == 0x000C28, "Member 'FAnimNode_DragonSpineSolver::Enable_Snake_Interpolation' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, is_snake) == 0x000C29, "Member 'FAnimNode_DragonSpineSolver::is_snake' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Ignore_End_Points) == 0x000C2A, "Member 'FAnimNode_DragonSpineSolver::Ignore_End_Points' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Maximum_Feet_Distance) == 0x000C2C, "Member 'FAnimNode_DragonSpineSolver::Maximum_Feet_Distance' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, Minimum_Feet_Distance) == 0x000C30, "Member 'FAnimNode_DragonSpineSolver::Minimum_Feet_Distance' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonSpineSolver, DisplayLineTrace) == 0x000C34, "Member 'FAnimNode_DragonSpineSolver::DisplayLineTrace' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_WarpLimbsData
// 0x0038 (0x0038 - 0x0000)
struct FDragonData_WarpLimbsData final
{
public:
	class FName                                   Foot_Bone_Name;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Knee_Bone_Name;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Thigh_Bone_Name;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Warp_Lift_Reference_Location;                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Warp_Param_Adder;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Min_Max_Warp;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         max_extra_compression_height;                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDragonData_WarpLimbsData) == 0x000008, "Wrong alignment on FDragonData_WarpLimbsData");
static_assert(sizeof(FDragonData_WarpLimbsData) == 0x000038, "Wrong size on FDragonData_WarpLimbsData");
static_assert(offsetof(FDragonData_WarpLimbsData, Foot_Bone_Name) == 0x000000, "Member 'FDragonData_WarpLimbsData::Foot_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_WarpLimbsData, Knee_Bone_Name) == 0x000008, "Member 'FDragonData_WarpLimbsData::Knee_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_WarpLimbsData, Thigh_Bone_Name) == 0x000010, "Member 'FDragonData_WarpLimbsData::Thigh_Bone_Name' has a wrong offset!");
static_assert(offsetof(FDragonData_WarpLimbsData, Warp_Lift_Reference_Location) == 0x000018, "Member 'FDragonData_WarpLimbsData::Warp_Lift_Reference_Location' has a wrong offset!");
static_assert(offsetof(FDragonData_WarpLimbsData, Warp_Param_Adder) == 0x00001C, "Member 'FDragonData_WarpLimbsData::Warp_Param_Adder' has a wrong offset!");
static_assert(offsetof(FDragonData_WarpLimbsData, Min_Max_Warp) == 0x000020, "Member 'FDragonData_WarpLimbsData::Min_Max_Warp' has a wrong offset!");
static_assert(offsetof(FDragonData_WarpLimbsData, max_extra_compression_height) == 0x000030, "Member 'FDragonData_WarpLimbsData::max_extra_compression_height' has a wrong offset!");

// ScriptStruct DragonIKPlugin.AnimNode_DragonWarpSolver
// 0x0618 (0x06E0 - 0x00C8)
struct alignas(0x10) FAnimNode_DragonWarpSolver final : public FAnimNode_DragonControlBase
{
public:
	TArray<struct FDragonData_WarpLimbsData>      dragon_limb_input;                                 // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   Hip_Bone_Name;                                     // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x44];                                      // 0x00E0(0x0044)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          enable_solver;                                     // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x183];                                    // 0x0125(0x0183)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                character_direction_vector_CS;                     // 0x02A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                forward_vector_CS;                                 // 0x02C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         speed_warping_const;                               // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enable_slope_warp;                                 // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         automatic_speed_warping_const;                     // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         slope_detection_tolerance;                         // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Warp_Slope_Interpolation;                          // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EC[0x64];                                     // 0x02EC(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	ETraceTypeQuery                               Trace_Channel;                                     // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         line_trace_downward_height;                        // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         line_trace_upper_height;                           // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         virtual_leg_width;                                 // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         virtual_scale;                                     // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DisplayLineTrace;                                  // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Limb_Compression_Intensity;                        // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     Limb_Lifting_Curve;                                // 0x0370(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         Hip_Change_Intensity;                              // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Hip_Lifting_Curve;                                 // 0x0400(0x0088)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_488[0x258];                                    // 0x0488(0x0258)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_DragonWarpSolver) == 0x000010, "Wrong alignment on FAnimNode_DragonWarpSolver");
static_assert(sizeof(FAnimNode_DragonWarpSolver) == 0x0006E0, "Wrong size on FAnimNode_DragonWarpSolver");
static_assert(offsetof(FAnimNode_DragonWarpSolver, dragon_limb_input) == 0x0000C8, "Member 'FAnimNode_DragonWarpSolver::dragon_limb_input' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, Hip_Bone_Name) == 0x0000D8, "Member 'FAnimNode_DragonWarpSolver::Hip_Bone_Name' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, enable_solver) == 0x000124, "Member 'FAnimNode_DragonWarpSolver::enable_solver' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, character_direction_vector_CS) == 0x0002A8, "Member 'FAnimNode_DragonWarpSolver::character_direction_vector_CS' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, forward_vector_CS) == 0x0002C0, "Member 'FAnimNode_DragonWarpSolver::forward_vector_CS' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, speed_warping_const) == 0x0002D8, "Member 'FAnimNode_DragonWarpSolver::speed_warping_const' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, enable_slope_warp) == 0x0002DC, "Member 'FAnimNode_DragonWarpSolver::enable_slope_warp' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, automatic_speed_warping_const) == 0x0002E0, "Member 'FAnimNode_DragonWarpSolver::automatic_speed_warping_const' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, slope_detection_tolerance) == 0x0002E4, "Member 'FAnimNode_DragonWarpSolver::slope_detection_tolerance' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, Warp_Slope_Interpolation) == 0x0002E8, "Member 'FAnimNode_DragonWarpSolver::Warp_Slope_Interpolation' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, Trace_Channel) == 0x000350, "Member 'FAnimNode_DragonWarpSolver::Trace_Channel' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, line_trace_downward_height) == 0x000354, "Member 'FAnimNode_DragonWarpSolver::line_trace_downward_height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, line_trace_upper_height) == 0x000358, "Member 'FAnimNode_DragonWarpSolver::line_trace_upper_height' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, virtual_leg_width) == 0x00035C, "Member 'FAnimNode_DragonWarpSolver::virtual_leg_width' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, virtual_scale) == 0x000360, "Member 'FAnimNode_DragonWarpSolver::virtual_scale' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, DisplayLineTrace) == 0x000368, "Member 'FAnimNode_DragonWarpSolver::DisplayLineTrace' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, Limb_Compression_Intensity) == 0x00036C, "Member 'FAnimNode_DragonWarpSolver::Limb_Compression_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, Limb_Lifting_Curve) == 0x000370, "Member 'FAnimNode_DragonWarpSolver::Limb_Lifting_Curve' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, Hip_Change_Intensity) == 0x0003F8, "Member 'FAnimNode_DragonWarpSolver::Hip_Change_Intensity' has a wrong offset!");
static_assert(offsetof(FAnimNode_DragonWarpSolver, Hip_Lifting_Curve) == 0x000400, "Member 'FAnimNode_DragonWarpSolver::Hip_Lifting_Curve' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_PhysicsParentRelationship
// 0x0010 (0x0010 - 0x0000)
struct FDragonData_PhysicsParentRelationship final
{
public:
	class FName                                   child_bone_name;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   parent_bone_name;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_PhysicsParentRelationship) == 0x000004, "Wrong alignment on FDragonData_PhysicsParentRelationship");
static_assert(sizeof(FDragonData_PhysicsParentRelationship) == 0x000010, "Wrong size on FDragonData_PhysicsParentRelationship");
static_assert(offsetof(FDragonData_PhysicsParentRelationship, child_bone_name) == 0x000000, "Member 'FDragonData_PhysicsParentRelationship::child_bone_name' has a wrong offset!");
static_assert(offsetof(FDragonData_PhysicsParentRelationship, parent_bone_name) == 0x000008, "Member 'FDragonData_PhysicsParentRelationship::parent_bone_name' has a wrong offset!");

// ScriptStruct DragonIKPlugin.DragonData_PhysicsHandleMultiplier
// 0x000C (0x000C - 0x0000)
struct FDragonData_PhysicsHandleMultiplier final
{
public:
	class FName                                   bone_name;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bone_strength;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDragonData_PhysicsHandleMultiplier) == 0x000004, "Wrong alignment on FDragonData_PhysicsHandleMultiplier");
static_assert(sizeof(FDragonData_PhysicsHandleMultiplier) == 0x00000C, "Wrong size on FDragonData_PhysicsHandleMultiplier");
static_assert(offsetof(FDragonData_PhysicsHandleMultiplier, bone_name) == 0x000000, "Member 'FDragonData_PhysicsHandleMultiplier::bone_name' has a wrong offset!");
static_assert(offsetof(FDragonData_PhysicsHandleMultiplier, bone_strength) == 0x000008, "Member 'FDragonData_PhysicsHandleMultiplier::bone_strength' has a wrong offset!");

// ScriptStruct DragonIKPlugin.CCDIK_Modified_ChainLink
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x10) FCCDIK_Modified_ChainLink final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCCDIK_Modified_ChainLink) == 0x000010, "Wrong alignment on FCCDIK_Modified_ChainLink");
static_assert(sizeof(FCCDIK_Modified_ChainLink) == 0x0000A0, "Wrong size on FCCDIK_Modified_ChainLink");

}

