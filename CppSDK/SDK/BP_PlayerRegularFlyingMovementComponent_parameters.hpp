#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerRegularFlyingMovementComponent

#include "Basic.hpp"

#include "EPlayerRegularFlyingMovementSpeedType_structs.hpp"
#include "EPlayerRegularFlyingMovementType_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerRegularFlyingMovementComponent.BP_PlayerRegularFlyingMovementComponent_C.BP_ChangeFlyingMovementSpeedType
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularFlyingMovementComponent_C_BP_ChangeFlyingMovementSpeedType final
{
public:
	EPlayerRegularFlyingMovementSpeedType         NewFlyingMovementSpeedType;                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularFlyingMovementComponent_C_BP_ChangeFlyingMovementSpeedType) == 0x000001, "Wrong alignment on BP_PlayerRegularFlyingMovementComponent_C_BP_ChangeFlyingMovementSpeedType");
static_assert(sizeof(BP_PlayerRegularFlyingMovementComponent_C_BP_ChangeFlyingMovementSpeedType) == 0x000001, "Wrong size on BP_PlayerRegularFlyingMovementComponent_C_BP_ChangeFlyingMovementSpeedType");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_BP_ChangeFlyingMovementSpeedType, NewFlyingMovementSpeedType) == 0x000000, "Member 'BP_PlayerRegularFlyingMovementComponent_C_BP_ChangeFlyingMovementSpeedType::NewFlyingMovementSpeedType' has a wrong offset!");

// Function BP_PlayerRegularFlyingMovementComponent.BP_PlayerRegularFlyingMovementComponent_C.BP_GetCurrentFlyingSpeedType
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularFlyingMovementComponent_C_BP_GetCurrentFlyingSpeedType final
{
public:
	EPlayerRegularFlyingMovementSpeedType         Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularFlyingMovementComponent_C_BP_GetCurrentFlyingSpeedType) == 0x000001, "Wrong alignment on BP_PlayerRegularFlyingMovementComponent_C_BP_GetCurrentFlyingSpeedType");
static_assert(sizeof(BP_PlayerRegularFlyingMovementComponent_C_BP_GetCurrentFlyingSpeedType) == 0x000001, "Wrong size on BP_PlayerRegularFlyingMovementComponent_C_BP_GetCurrentFlyingSpeedType");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_BP_GetCurrentFlyingSpeedType, Result) == 0x000000, "Member 'BP_PlayerRegularFlyingMovementComponent_C_BP_GetCurrentFlyingSpeedType::Result' has a wrong offset!");

// Function BP_PlayerRegularFlyingMovementComponent.BP_PlayerRegularFlyingMovementComponent_C.BP_ModifyBrakingDecelerationFlyingConfigValue
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyBrakingDecelerationFlyingConfigValue final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyBrakingDecelerationFlyingConfigValue) == 0x000008, "Wrong alignment on BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyBrakingDecelerationFlyingConfigValue");
static_assert(sizeof(BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyBrakingDecelerationFlyingConfigValue) == 0x000008, "Wrong size on BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyBrakingDecelerationFlyingConfigValue");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyBrakingDecelerationFlyingConfigValue, Value) == 0x000000, "Member 'BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyBrakingDecelerationFlyingConfigValue::Value' has a wrong offset!");

// Function BP_PlayerRegularFlyingMovementComponent.BP_PlayerRegularFlyingMovementComponent_C.BP_ModifyMaxFlySpeedConfigValue
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyMaxFlySpeedConfigValue final
{
public:
	EPlayerRegularFlyingMovementSpeedType         FlyingMovementSpeedType;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyMaxFlySpeedConfigValue) == 0x000008, "Wrong alignment on BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyMaxFlySpeedConfigValue");
static_assert(sizeof(BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyMaxFlySpeedConfigValue) == 0x000010, "Wrong size on BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyMaxFlySpeedConfigValue");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyMaxFlySpeedConfigValue, FlyingMovementSpeedType) == 0x000000, "Member 'BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyMaxFlySpeedConfigValue::FlyingMovementSpeedType' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyMaxFlySpeedConfigValue, Value) == 0x000008, "Member 'BP_PlayerRegularFlyingMovementComponent_C_BP_ModifyMaxFlySpeedConfigValue::Value' has a wrong offset!");

// Function BP_PlayerRegularFlyingMovementComponent.BP_PlayerRegularFlyingMovementComponent_C.BP_ResetMaxFlySpeedConfigValue
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularFlyingMovementComponent_C_BP_ResetMaxFlySpeedConfigValue final
{
public:
	EPlayerRegularFlyingMovementSpeedType         FlyingMovementSpeedType;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularFlyingMovementComponent_C_BP_ResetMaxFlySpeedConfigValue) == 0x000001, "Wrong alignment on BP_PlayerRegularFlyingMovementComponent_C_BP_ResetMaxFlySpeedConfigValue");
static_assert(sizeof(BP_PlayerRegularFlyingMovementComponent_C_BP_ResetMaxFlySpeedConfigValue) == 0x000001, "Wrong size on BP_PlayerRegularFlyingMovementComponent_C_BP_ResetMaxFlySpeedConfigValue");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_BP_ResetMaxFlySpeedConfigValue, FlyingMovementSpeedType) == 0x000000, "Member 'BP_PlayerRegularFlyingMovementComponent_C_BP_ResetMaxFlySpeedConfigValue::FlyingMovementSpeedType' has a wrong offset!");

// Function BP_PlayerRegularFlyingMovementComponent.BP_PlayerRegularFlyingMovementComponent_C.BP_SetCurrenntFlyingMovementType
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularFlyingMovementComponent_C_BP_SetCurrenntFlyingMovementType final
{
public:
	EPlayerRegularFlyingMovementType              NewFlyingMovementType;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularFlyingMovementComponent_C_BP_SetCurrenntFlyingMovementType) == 0x000001, "Wrong alignment on BP_PlayerRegularFlyingMovementComponent_C_BP_SetCurrenntFlyingMovementType");
static_assert(sizeof(BP_PlayerRegularFlyingMovementComponent_C_BP_SetCurrenntFlyingMovementType) == 0x000001, "Wrong size on BP_PlayerRegularFlyingMovementComponent_C_BP_SetCurrenntFlyingMovementType");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_BP_SetCurrenntFlyingMovementType, NewFlyingMovementType) == 0x000000, "Member 'BP_PlayerRegularFlyingMovementComponent_C_BP_SetCurrenntFlyingMovementType::NewFlyingMovementType' has a wrong offset!");

// Function BP_PlayerRegularFlyingMovementComponent.BP_PlayerRegularFlyingMovementComponent_C.BPI_Get_RegularFlyingConfigData
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerRegularFlyingMovementComponent_C_BPI_Get_RegularFlyingConfigData final
{
public:
	double                                        LowFlyingSpeed;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NormalFlyingSpeed;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TopFlyingSpeed;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularFlyingMovementComponent_C_BPI_Get_RegularFlyingConfigData) == 0x000008, "Wrong alignment on BP_PlayerRegularFlyingMovementComponent_C_BPI_Get_RegularFlyingConfigData");
static_assert(sizeof(BP_PlayerRegularFlyingMovementComponent_C_BPI_Get_RegularFlyingConfigData) == 0x000018, "Wrong size on BP_PlayerRegularFlyingMovementComponent_C_BPI_Get_RegularFlyingConfigData");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_BPI_Get_RegularFlyingConfigData, LowFlyingSpeed) == 0x000000, "Member 'BP_PlayerRegularFlyingMovementComponent_C_BPI_Get_RegularFlyingConfigData::LowFlyingSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_BPI_Get_RegularFlyingConfigData, NormalFlyingSpeed) == 0x000008, "Member 'BP_PlayerRegularFlyingMovementComponent_C_BPI_Get_RegularFlyingConfigData::NormalFlyingSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_BPI_Get_RegularFlyingConfigData, TopFlyingSpeed) == 0x000010, "Member 'BP_PlayerRegularFlyingMovementComponent_C_BPI_Get_RegularFlyingConfigData::TopFlyingSpeed' has a wrong offset!");

// Function BP_PlayerRegularFlyingMovementComponent.BP_PlayerRegularFlyingMovementComponent_C.ExecuteUbergraph_BP_PlayerRegularFlyingMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularFlyingMovementComponent_C_ExecuteUbergraph_BP_PlayerRegularFlyingMovementComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularFlyingMovementComponent_C_ExecuteUbergraph_BP_PlayerRegularFlyingMovementComponent) == 0x000004, "Wrong alignment on BP_PlayerRegularFlyingMovementComponent_C_ExecuteUbergraph_BP_PlayerRegularFlyingMovementComponent");
static_assert(sizeof(BP_PlayerRegularFlyingMovementComponent_C_ExecuteUbergraph_BP_PlayerRegularFlyingMovementComponent) == 0x000008, "Wrong size on BP_PlayerRegularFlyingMovementComponent_C_ExecuteUbergraph_BP_PlayerRegularFlyingMovementComponent");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_ExecuteUbergraph_BP_PlayerRegularFlyingMovementComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerRegularFlyingMovementComponent_C_ExecuteUbergraph_BP_PlayerRegularFlyingMovementComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_ExecuteUbergraph_BP_PlayerRegularFlyingMovementComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_PlayerRegularFlyingMovementComponent_C_ExecuteUbergraph_BP_PlayerRegularFlyingMovementComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_PlayerRegularFlyingMovementComponent.BP_PlayerRegularFlyingMovementComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerRegularFlyingMovementComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularFlyingMovementComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerRegularFlyingMovementComponent_C_ReceiveTick");
static_assert(sizeof(BP_PlayerRegularFlyingMovementComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerRegularFlyingMovementComponent_C_ReceiveTick");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerRegularFlyingMovementComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerRegularFlyingMovementComponent.BP_PlayerRegularFlyingMovementComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularFlyingMovementComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularFlyingMovementComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_PlayerRegularFlyingMovementComponent_C_GetModuleName");
static_assert(sizeof(BP_PlayerRegularFlyingMovementComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_PlayerRegularFlyingMovementComponent_C_GetModuleName");
static_assert(offsetof(BP_PlayerRegularFlyingMovementComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_PlayerRegularFlyingMovementComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

