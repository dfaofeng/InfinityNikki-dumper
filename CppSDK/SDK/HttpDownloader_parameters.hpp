#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HttpDownloader

#include "Basic.hpp"

#include "HttpDownloader_structs.hpp"


namespace SDK::Params
{

// Function HttpDownloader.DownloadTaskInfoMgr.Init
// 0x0030 (0x0030 - 0x0000)
struct DownloadTaskInfoMgr_Init final
{
public:
	class FString                                 CacheDir;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InDBName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InTableName;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloadTaskInfoMgr_Init) == 0x000008, "Wrong alignment on DownloadTaskInfoMgr_Init");
static_assert(sizeof(DownloadTaskInfoMgr_Init) == 0x000030, "Wrong size on DownloadTaskInfoMgr_Init");
static_assert(offsetof(DownloadTaskInfoMgr_Init, CacheDir) == 0x000000, "Member 'DownloadTaskInfoMgr_Init::CacheDir' has a wrong offset!");
static_assert(offsetof(DownloadTaskInfoMgr_Init, InDBName) == 0x000010, "Member 'DownloadTaskInfoMgr_Init::InDBName' has a wrong offset!");
static_assert(offsetof(DownloadTaskInfoMgr_Init, InTableName) == 0x000020, "Member 'DownloadTaskInfoMgr_Init::InTableName' has a wrong offset!");

// Function HttpDownloader.DownloadTaskInfoMgr.SyncDownloadTasks
// 0x0018 (0x0018 - 0x0000)
struct DownloadTaskInfoMgr_SyncDownloadTasks final
{
public:
	TArray<struct FSimpleHttpDownloadTaskInfo>    newlyCreatedTask;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloadTaskInfoMgr_SyncDownloadTasks) == 0x000008, "Wrong alignment on DownloadTaskInfoMgr_SyncDownloadTasks");
static_assert(sizeof(DownloadTaskInfoMgr_SyncDownloadTasks) == 0x000018, "Wrong size on DownloadTaskInfoMgr_SyncDownloadTasks");
static_assert(offsetof(DownloadTaskInfoMgr_SyncDownloadTasks, newlyCreatedTask) == 0x000000, "Member 'DownloadTaskInfoMgr_SyncDownloadTasks::newlyCreatedTask' has a wrong offset!");
static_assert(offsetof(DownloadTaskInfoMgr_SyncDownloadTasks, ReturnValue) == 0x000010, "Member 'DownloadTaskInfoMgr_SyncDownloadTasks::ReturnValue' has a wrong offset!");

// Function HttpDownloader.DownloadTaskInfoMgr.UpdateDownloadTaskStatus
// 0x0020 (0x0020 - 0x0000)
struct DownloadTaskInfoMgr_UpdateDownloadTaskStatus final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDownloadTaskInfoStatus                       Status;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Size;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DownloadTaskInfoMgr_UpdateDownloadTaskStatus) == 0x000008, "Wrong alignment on DownloadTaskInfoMgr_UpdateDownloadTaskStatus");
static_assert(sizeof(DownloadTaskInfoMgr_UpdateDownloadTaskStatus) == 0x000020, "Wrong size on DownloadTaskInfoMgr_UpdateDownloadTaskStatus");
static_assert(offsetof(DownloadTaskInfoMgr_UpdateDownloadTaskStatus, URL) == 0x000000, "Member 'DownloadTaskInfoMgr_UpdateDownloadTaskStatus::URL' has a wrong offset!");
static_assert(offsetof(DownloadTaskInfoMgr_UpdateDownloadTaskStatus, Status) == 0x000010, "Member 'DownloadTaskInfoMgr_UpdateDownloadTaskStatus::Status' has a wrong offset!");
static_assert(offsetof(DownloadTaskInfoMgr_UpdateDownloadTaskStatus, Size) == 0x000014, "Member 'DownloadTaskInfoMgr_UpdateDownloadTaskStatus::Size' has a wrong offset!");
static_assert(offsetof(DownloadTaskInfoMgr_UpdateDownloadTaskStatus, ReturnValue) == 0x000018, "Member 'DownloadTaskInfoMgr_UpdateDownloadTaskStatus::ReturnValue' has a wrong offset!");

// Function HttpDownloader.DownloadTaskInfoMgr.GetFinalDownloadedTasks
// 0x0050 (0x0050 - 0x0000)
struct DownloadTaskInfoMgr_GetFinalDownloadedTasks final
{
public:
	TMap<class FString, struct FSimpleHttpDownloadTaskInfo> ReturnValue;                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloadTaskInfoMgr_GetFinalDownloadedTasks) == 0x000008, "Wrong alignment on DownloadTaskInfoMgr_GetFinalDownloadedTasks");
static_assert(sizeof(DownloadTaskInfoMgr_GetFinalDownloadedTasks) == 0x000050, "Wrong size on DownloadTaskInfoMgr_GetFinalDownloadedTasks");
static_assert(offsetof(DownloadTaskInfoMgr_GetFinalDownloadedTasks, ReturnValue) == 0x000000, "Member 'DownloadTaskInfoMgr_GetFinalDownloadedTasks::ReturnValue' has a wrong offset!");

// Function HttpDownloader.DownloadTaskInfoMgr.GetFinalShouldDownloadTasks
// 0x0050 (0x0050 - 0x0000)
struct DownloadTaskInfoMgr_GetFinalShouldDownloadTasks final
{
public:
	TMap<class FString, struct FSimpleHttpDownloadTaskInfo> ReturnValue;                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloadTaskInfoMgr_GetFinalShouldDownloadTasks) == 0x000008, "Wrong alignment on DownloadTaskInfoMgr_GetFinalShouldDownloadTasks");
static_assert(sizeof(DownloadTaskInfoMgr_GetFinalShouldDownloadTasks) == 0x000050, "Wrong size on DownloadTaskInfoMgr_GetFinalShouldDownloadTasks");
static_assert(offsetof(DownloadTaskInfoMgr_GetFinalShouldDownloadTasks, ReturnValue) == 0x000000, "Member 'DownloadTaskInfoMgr_GetFinalShouldDownloadTasks::ReturnValue' has a wrong offset!");

// Function HttpDownloader.DownloadTaskInfoMgr.GetPreDownloadedTasks
// 0x0050 (0x0050 - 0x0000)
struct DownloadTaskInfoMgr_GetPreDownloadedTasks final
{
public:
	TMap<class FString, struct FSimpleHttpDownloadTaskInfo> ReturnValue;                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DownloadTaskInfoMgr_GetPreDownloadedTasks) == 0x000008, "Wrong alignment on DownloadTaskInfoMgr_GetPreDownloadedTasks");
static_assert(sizeof(DownloadTaskInfoMgr_GetPreDownloadedTasks) == 0x000050, "Wrong size on DownloadTaskInfoMgr_GetPreDownloadedTasks");
static_assert(offsetof(DownloadTaskInfoMgr_GetPreDownloadedTasks, ReturnValue) == 0x000000, "Member 'DownloadTaskInfoMgr_GetPreDownloadedTasks::ReturnValue' has a wrong offset!");

// Function HttpDownloader.SimpleDownloader.AddFilesToDownload
// 0x0020 (0x0020 - 0x0000)
struct SimpleDownloader_AddFilesToDownload final
{
public:
	TArray<struct FSimpleHttpDownloadTaskInfo>    DownloadTasks;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleDownloader_AddFilesToDownload) == 0x000008, "Wrong alignment on SimpleDownloader_AddFilesToDownload");
static_assert(sizeof(SimpleDownloader_AddFilesToDownload) == 0x000020, "Wrong size on SimpleDownloader_AddFilesToDownload");
static_assert(offsetof(SimpleDownloader_AddFilesToDownload, DownloadTasks) == 0x000000, "Member 'SimpleDownloader_AddFilesToDownload::DownloadTasks' has a wrong offset!");
static_assert(offsetof(SimpleDownloader_AddFilesToDownload, ReturnValue) == 0x000010, "Member 'SimpleDownloader_AddFilesToDownload::ReturnValue' has a wrong offset!");

// Function HttpDownloader.SimpleDownloader.GetDownloadTaskInfoByID
// 0x00E8 (0x00E8 - 0x0000)
struct SimpleDownloader_GetDownloadTaskInfoByID final
{
public:
	int32                                         RequestID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSimpleHttpDownloadTaskInfo            OutTaskInfo;                                       // 0x0008(0x00D8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleDownloader_GetDownloadTaskInfoByID) == 0x000008, "Wrong alignment on SimpleDownloader_GetDownloadTaskInfoByID");
static_assert(sizeof(SimpleDownloader_GetDownloadTaskInfoByID) == 0x0000E8, "Wrong size on SimpleDownloader_GetDownloadTaskInfoByID");
static_assert(offsetof(SimpleDownloader_GetDownloadTaskInfoByID, RequestID) == 0x000000, "Member 'SimpleDownloader_GetDownloadTaskInfoByID::RequestID' has a wrong offset!");
static_assert(offsetof(SimpleDownloader_GetDownloadTaskInfoByID, OutTaskInfo) == 0x000008, "Member 'SimpleDownloader_GetDownloadTaskInfoByID::OutTaskInfo' has a wrong offset!");
static_assert(offsetof(SimpleDownloader_GetDownloadTaskInfoByID, ReturnValue) == 0x0000E0, "Member 'SimpleDownloader_GetDownloadTaskInfoByID::ReturnValue' has a wrong offset!");

// Function HttpDownloader.SimpleDownloader.GetResponseContentByID
// 0x0020 (0x0020 - 0x0000)
struct SimpleDownloader_GetResponseContentByID final
{
public:
	int32                                         RequestID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Content;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleDownloader_GetResponseContentByID) == 0x000008, "Wrong alignment on SimpleDownloader_GetResponseContentByID");
static_assert(sizeof(SimpleDownloader_GetResponseContentByID) == 0x000020, "Wrong size on SimpleDownloader_GetResponseContentByID");
static_assert(offsetof(SimpleDownloader_GetResponseContentByID, RequestID) == 0x000000, "Member 'SimpleDownloader_GetResponseContentByID::RequestID' has a wrong offset!");
static_assert(offsetof(SimpleDownloader_GetResponseContentByID, Content) == 0x000008, "Member 'SimpleDownloader_GetResponseContentByID::Content' has a wrong offset!");
static_assert(offsetof(SimpleDownloader_GetResponseContentByID, ReturnValue) == 0x000018, "Member 'SimpleDownloader_GetResponseContentByID::ReturnValue' has a wrong offset!");

// Function HttpDownloader.SimpleDownloader.IsDownloadTaskUsingStreamMode
// 0x00E0 (0x00E0 - 0x0000)
struct SimpleDownloader_IsDownloadTaskUsingStreamMode final
{
public:
	struct FSimpleHttpDownloadTaskInfo            InTaskInfo;                                        // 0x0000(0x00D8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleDownloader_IsDownloadTaskUsingStreamMode) == 0x000008, "Wrong alignment on SimpleDownloader_IsDownloadTaskUsingStreamMode");
static_assert(sizeof(SimpleDownloader_IsDownloadTaskUsingStreamMode) == 0x0000E0, "Wrong size on SimpleDownloader_IsDownloadTaskUsingStreamMode");
static_assert(offsetof(SimpleDownloader_IsDownloadTaskUsingStreamMode, InTaskInfo) == 0x000000, "Member 'SimpleDownloader_IsDownloadTaskUsingStreamMode::InTaskInfo' has a wrong offset!");
static_assert(offsetof(SimpleDownloader_IsDownloadTaskUsingStreamMode, ReturnValue) == 0x0000D8, "Member 'SimpleDownloader_IsDownloadTaskUsingStreamMode::ReturnValue' has a wrong offset!");

// Function HttpDownloader.SimpleDownloader.IsFinishDownload
// 0x000C (0x000C - 0x0000)
struct SimpleDownloader_IsFinishDownload final
{
public:
	int32                                         SuccessCount;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailedCount;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleDownloader_IsFinishDownload) == 0x000004, "Wrong alignment on SimpleDownloader_IsFinishDownload");
static_assert(sizeof(SimpleDownloader_IsFinishDownload) == 0x00000C, "Wrong size on SimpleDownloader_IsFinishDownload");
static_assert(offsetof(SimpleDownloader_IsFinishDownload, SuccessCount) == 0x000000, "Member 'SimpleDownloader_IsFinishDownload::SuccessCount' has a wrong offset!");
static_assert(offsetof(SimpleDownloader_IsFinishDownload, FailedCount) == 0x000004, "Member 'SimpleDownloader_IsFinishDownload::FailedCount' has a wrong offset!");
static_assert(offsetof(SimpleDownloader_IsFinishDownload, ReturnValue) == 0x000008, "Member 'SimpleDownloader_IsFinishDownload::ReturnValue' has a wrong offset!");

// Function HttpDownloader.SimpleDownloader.SetMaxRequestCount
// 0x0004 (0x0004 - 0x0000)
struct SimpleDownloader_SetMaxRequestCount final
{
public:
	int32                                         MaxCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleDownloader_SetMaxRequestCount) == 0x000004, "Wrong alignment on SimpleDownloader_SetMaxRequestCount");
static_assert(sizeof(SimpleDownloader_SetMaxRequestCount) == 0x000004, "Wrong size on SimpleDownloader_SetMaxRequestCount");
static_assert(offsetof(SimpleDownloader_SetMaxRequestCount, MaxCount) == 0x000000, "Member 'SimpleDownloader_SetMaxRequestCount::MaxCount' has a wrong offset!");

// Function HttpDownloader.SimpleDownloader.SetMaxRetryCount
// 0x0004 (0x0004 - 0x0000)
struct SimpleDownloader_SetMaxRetryCount final
{
public:
	int32                                         MaxCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleDownloader_SetMaxRetryCount) == 0x000004, "Wrong alignment on SimpleDownloader_SetMaxRetryCount");
static_assert(sizeof(SimpleDownloader_SetMaxRetryCount) == 0x000004, "Wrong size on SimpleDownloader_SetMaxRetryCount");
static_assert(offsetof(SimpleDownloader_SetMaxRetryCount, MaxCount) == 0x000000, "Member 'SimpleDownloader_SetMaxRetryCount::MaxCount' has a wrong offset!");

// Function HttpDownloader.SimpleDownloader.SetStreamingModeFileExt
// 0x0010 (0x0010 - 0x0000)
struct SimpleDownloader_SetStreamingModeFileExt final
{
public:
	TArray<class FString>                         Exts;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleDownloader_SetStreamingModeFileExt) == 0x000008, "Wrong alignment on SimpleDownloader_SetStreamingModeFileExt");
static_assert(sizeof(SimpleDownloader_SetStreamingModeFileExt) == 0x000010, "Wrong size on SimpleDownloader_SetStreamingModeFileExt");
static_assert(offsetof(SimpleDownloader_SetStreamingModeFileExt, Exts) == 0x000000, "Member 'SimpleDownloader_SetStreamingModeFileExt::Exts' has a wrong offset!");

// Function HttpDownloader.SimpleHashChecker.AddTasksToCheck
// 0x0018 (0x0018 - 0x0000)
struct SimpleHashChecker_AddTasksToCheck final
{
public:
	TArray<struct FSimpleHttpDownloadTaskInfo>    Tasks;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleHashChecker_AddTasksToCheck) == 0x000008, "Wrong alignment on SimpleHashChecker_AddTasksToCheck");
static_assert(sizeof(SimpleHashChecker_AddTasksToCheck) == 0x000018, "Wrong size on SimpleHashChecker_AddTasksToCheck");
static_assert(offsetof(SimpleHashChecker_AddTasksToCheck, Tasks) == 0x000000, "Member 'SimpleHashChecker_AddTasksToCheck::Tasks' has a wrong offset!");
static_assert(offsetof(SimpleHashChecker_AddTasksToCheck, ReturnValue) == 0x000010, "Member 'SimpleHashChecker_AddTasksToCheck::ReturnValue' has a wrong offset!");

// Function HttpDownloader.SimpleHashChecker.StartCheck
// 0x0024 (0x0024 - 0x0000)
struct SimpleHashChecker_StartCheck final
{
public:
	TDelegate<void(const TArray<struct FSimpleHttpDownloadTaskInfo>& CurrentSuccessTask, const TArray<struct FSimpleHttpDownloadTaskInfo>& CurrentFailedTask)> Progress; // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FSimpleHttpDownloadTaskInfo>& AllFailedFileName)> AllComplete; // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleHashChecker_StartCheck) == 0x000004, "Wrong alignment on SimpleHashChecker_StartCheck");
static_assert(sizeof(SimpleHashChecker_StartCheck) == 0x000024, "Wrong size on SimpleHashChecker_StartCheck");
static_assert(offsetof(SimpleHashChecker_StartCheck, Progress) == 0x000000, "Member 'SimpleHashChecker_StartCheck::Progress' has a wrong offset!");
static_assert(offsetof(SimpleHashChecker_StartCheck, AllComplete) == 0x000010, "Member 'SimpleHashChecker_StartCheck::AllComplete' has a wrong offset!");
static_assert(offsetof(SimpleHashChecker_StartCheck, ReturnValue) == 0x000020, "Member 'SimpleHashChecker_StartCheck::ReturnValue' has a wrong offset!");

}

