#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PSDKCustomerServiceCommon

#include "Basic.hpp"

#include "PSDKCustomerServiceCommon_classes.hpp"
#include "PSDKCustomerServiceCommon_parameters.hpp"


namespace SDK
{

// Function PSDKCustomerServiceCommon.CustomerServicePSNQRCodeWidget.Init
// (Final, Native, Public, BlueprintCallable)

void UCustomerServicePSNQRCodeWidget::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomerServicePSNQRCodeWidget", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PSDKCustomerServiceCommon.CustomerServicePSNQRCodeWidget.InvalidateQrCode
// (Final, Native, Public, BlueprintCallable)

void UCustomerServicePSNQRCodeWidget::InvalidateQrCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomerServicePSNQRCodeWidget", "InvalidateQrCode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PSDKCustomerServiceCommon.CustomerServicePSNQRCodeWidget.NativeOnFocusLost
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFocusEvent&               InFocusEvent                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCustomerServicePSNQRCodeWidget::NativeOnFocusLost(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomerServicePSNQRCodeWidget", "NativeOnFocusLost");

	Params::CustomerServicePSNQRCodeWidget_NativeOnFocusLost Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PSDKCustomerServiceCommon.CustomerServicePSNQRCodeWidget.OnBackToGame
// (Final, Native, Private, BlueprintCallable)

void UCustomerServicePSNQRCodeWidget::OnBackToGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomerServicePSNQRCodeWidget", "OnBackToGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PSDKCustomerServiceCommon.CustomerServicePSNQRCodeWidget.OnGamepadEvent
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKeyEvent&                 InKeyEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomerServicePSNQRCodeWidget::OnGamepadEvent(const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomerServicePSNQRCodeWidget", "OnGamepadEvent");

	Params::CustomerServicePSNQRCodeWidget_OnGamepadEvent Parms{};

	Parms.InKeyEvent = std::move(InKeyEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PSDKCustomerServiceCommon.CustomerServicePSNQRCodeWidget.OnRefreshQrCode
// (Final, Native, Private, BlueprintCallable)

void UCustomerServicePSNQRCodeWidget::OnRefreshQrCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomerServicePSNQRCodeWidget", "OnRefreshQrCode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PSDKCustomerServiceCommon.CustomerServicePSNQRCodeWidget.SetRouter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Router                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomerServicePSNQRCodeWidget::SetRouter(const class FString& Router)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomerServicePSNQRCodeWidget", "SetRouter");

	Params::CustomerServicePSNQRCodeWidget_SetRouter Parms{};

	Parms.Router = std::move(Router);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PSDKCustomerServiceCommon.CustomerServicePSNQRCodeWidget.UpdateQrCodeImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ImageUrl                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomerServicePSNQRCodeWidget::UpdateQrCodeImage(const class FString& ImageUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomerServicePSNQRCodeWidget", "UpdateQrCodeImage");

	Params::CustomerServicePSNQRCodeWidget_UpdateQrCodeImage Parms{};

	Parms.ImageUrl = std::move(ImageUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PSDKCustomerServiceCommon.CustomerServicePSNQRCodeWidget.UpdateTimeoutSeconds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TimeoutSeconds                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomerServicePSNQRCodeWidget::UpdateTimeoutSeconds(int32 TimeoutSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomerServicePSNQRCodeWidget", "UpdateTimeoutSeconds");

	Params::CustomerServicePSNQRCodeWidget_UpdateTimeoutSeconds Parms{};

	Parms.TimeoutSeconds = TimeoutSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

