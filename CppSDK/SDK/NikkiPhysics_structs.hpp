#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NikkiPhysics

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum NikkiPhysics.EControlBoneAxis
// NumValues: 0x0004
enum class EControlBoneAxis : uint32
{
	Default                                  = 0,
	Positive                                 = 1,
	Opposite                                 = 2,
	EControlBoneAxis_MAX                     = 3,
};

// Enum NikkiPhysics.EControlBoneMethod
// NumValues: 0x0006
enum class EControlBoneMethod : uint32
{
	Default                                  = 0,
	FollowRefBones                           = 1,
	AdaptiveFollowAndSplay                   = 2,
	RBFInterpolation                         = 3,
	JustFirstBone                            = 4,
	EControlBoneMethod_MAX                   = 5,
};

// Enum NikkiPhysics.EControlBoneAlphaMethod
// NumValues: 0x0004
enum class EControlBoneAlphaMethod : uint32
{
	UpdatePerFrame                           = 0,
	PreInitAuto                              = 1,
	PreInitWithSettingBone                   = 2,
	EControlBoneAlphaMethod_MAX              = 3,
};

// Enum NikkiPhysics.EControlBoneType
// NumValues: 0x0003
enum class EControlBoneType : uint8
{
	Follow                                   = 0,
	Splay                                    = 1,
	EControlBoneType_MAX                     = 2,
};

// Enum NikkiPhysics.ERBFDistMethod
// NumValues: 0x0004
enum class ERBFDistMethod : uint32
{
	Default                                  = 0,
	Euclidean                                = 1,
	Quaternion                               = 2,
	ERBFDistMethod_MAX                       = 3,
};

// Enum NikkiPhysics.ENikki_ClothType
// NumValues: 0x0010
enum class ENikki_ClothType : uint32
{
	Null                                     = 0,
	InnermostCloth                           = 100,
	Shoes                                    = 200,
	FootAccessories                          = 300,
	BottomCloth                              = 400,
	Dress                                    = 500,
	WaistAccessories                         = 600,
	HandAccessories                          = 700,
	HandWeapon                               = 750,
	UpperCloth                               = 800,
	Coat                                     = 900,
	UpperAccessories                         = 1000,
	Hair                                     = 1100,
	HairAccessories                          = 1200,
	OutermostCloth                           = 2000,
	ENikki_MAX                               = 2001,
};

// Enum NikkiPhysics.ENikki_ParticleType
// NumValues: 0x0006
enum class ENikki_ParticleType : uint8
{
	Normal                                   = 0,
	Root                                     = 1,
	Trunk                                    = 2,
	Virtual                                  = 3,
	Fixed                                    = 4,
	ENikki_MAX                               = 5,
};

// Enum NikkiPhysics.ENikki_SpringType
// NumValues: 0x0004
enum class ENikki_SpringType : uint8
{
	Normal                                   = 0,
	Compress                                 = 1,
	Stretch                                  = 2,
	ENikki_MAX                               = 3,
};

// Enum NikkiPhysics.ENikki_SolverType
// NumValues: 0x0003
enum class ENikki_SolverType : uint8
{
	BaseSolver                               = 0,
	RopeSolver                               = 1,
	ENikki_MAX                               = 2,
};

// Enum NikkiPhysics.ENikki_PartColMethod
// NumValues: 0x0004
enum class ENikki_PartColMethod : uint8
{
	Off                                      = 0,
	PartCollider                             = 1,
	LayeringConstraint                       = 2,
	ENikki_MAX                               = 3,
};

// Enum NikkiPhysics.ENikki_HumanColMethod
// NumValues: 0x0005
enum class ENikki_HumanColMethod : uint8
{
	MaintainSideOrCapsuleCollision           = 0,
	MaintainSideAndCapsuleCollision          = 1,
	CapsuleCollisionOnly                     = 2,
	NoCollision                              = 3,
	ENikki_MAX                               = 4,
};

// Enum NikkiPhysics.ENikki_CapColMethod
// NumValues: 0x0007
enum class ENikki_CapColMethod : uint8
{
	SwitchClosestDirAndNormal                = 0,
	AlwaysClosestDir                         = 1,
	AlwaysNormal                             = 2,
	PureParticleCollision                    = 3,
	PredictContact                           = 4,
	SwitchBindDirAndNormal                   = 5,
	ENikki_MAX                               = 6,
};

// Enum NikkiPhysics.ENikki_RotCorrectRef
// NumValues: 0x0003
enum class ENikki_RotCorrectRef : uint8
{
	AnimPose                                 = 0,
	AnimPoseWithSpring                       = 1,
	ENikki_MAX                               = 2,
};

// Enum NikkiPhysics.ENikki_HeightFieldMethod
// NumValues: 0x0006
enum class ENikki_HeightFieldMethod : uint8
{
	Off                                      = 0,
	LineTrace                                = 1,
	HeightMap                                = 2,
	EnvGeometry                              = 3,
	HeightMapAndEnvGeometry                  = 4,
	ENikki_MAX                               = 5,
};

// Enum NikkiPhysics.ENikki_LengthConstraintType
// NumValues: 0x0005
enum class ENikki_LengthConstraintType : uint8
{
	SoftLength                               = 0,
	SoftOneSide                              = 1,
	HardLength                               = 2,
	HardOneSide                              = 3,
	ENikki_MAX                               = 4,
};

// Enum NikkiPhysics.ENikki_ShapeMethod
// NumValues: 0x0003
enum class ENikki_ShapeMethod : uint8
{
	ParentFixed                              = 0,
	DynamicRotCenter                         = 1,
	ENikki_MAX                               = 2,
};

// Enum NikkiPhysics.ENikki_ParticleColliderType
// NumValues: 0x0004
enum class ENikki_ParticleColliderType : uint8
{
	NotACollider                             = 0,
	SphereCollider                           = 1,
	CapsuleCollider                          = 2,
	ENikki_MAX                               = 3,
};

// Enum NikkiPhysics.ENikki_ColliderType
// NumValues: 0x0005
enum class ENikki_ColliderType : uint8
{
	Sphere                                   = 0,
	Box                                      = 1,
	Capsule                                  = 2,
	Polygon                                  = 3,
	ENikki_MAX                               = 4,
};

// Enum NikkiPhysics.ENikki_GravityType
// NumValues: 0x0003
enum class ENikki_GravityType : uint8
{
	ComponentSpace                           = 0,
	WorldSpace                               = 1,
	ENikki_MAX                               = 2,
};

// Enum NikkiPhysics.ENikki_LayeredBoneBlendMode
// NumValues: 0x0003
enum class ENikki_LayeredBoneBlendMode : uint8
{
	BranchFilter                             = 0,
	BlendMask                                = 1,
	ENikki_MAX                               = 2,
};

// Enum NikkiPhysics.FNikki_CellType
// NumValues: 0x0004
enum class EFNikki_CellType : uint8
{
	FNikkiHeightField_CELL_Null              = 0,
	FNikkiHeightField_CELL_Flat              = 1,
	FNikkiHeightField_CELL_Block             = 2,
	FNikkiHeightField_CELL_MAX               = 3,
};

// Enum NikkiPhysics.ENikki_PoseDriverType
// NumValues: 0x0003
enum class ENikki_PoseDriverType : uint32
{
	NormalDirection                          = 0,
	BoneSpaceCertainAxis                     = 1,
	ENikki_MAX                               = 2,
};

// Enum NikkiPhysics.ENikki_SimplePhySimSpace
// NumValues: 0x0003
enum class ENikki_SimplePhySimSpace : uint32
{
	ComponentSpace                           = 0,
	SpecificBoneSpace                        = 1,
	ENikki_MAX                               = 2,
};

// Enum NikkiPhysics.ENikki_SleeveRigFollowArm
// NumValues: 0x0003
enum class ENikki_SleeveRigFollowArm : uint32
{
	UpperArm                                 = 0,
	LowerArm                                 = 1,
	ENikki_MAX                               = 2,
};

// Enum NikkiPhysics.ENikki_SimSpaceType
// NumValues: 0x0004
enum class ENikki_SimSpaceType : uint8
{
	ComponentSpace                           = 0,
	RootMSpace                               = 1,
	SpecificBoneSpace                        = 2,
	ENikki_MAX                               = 3,
};

// Enum NikkiPhysics.ENikki_SpaceType
// NumValues: 0x0003
enum class ENikki_SpaceType : uint8
{
	ComponentSpace                           = 0,
	WorldSpace                               = 1,
	ENikki_MAX                               = 2,
};

// Enum NikkiPhysics.ENikki_WindAccumType
// NumValues: 0x0003
enum class ENikki_WindAccumType : uint8
{
	Add                                      = 0,
	Replace                                  = 1,
	ENikki_MAX                               = 2,
};

// ScriptStruct NikkiPhysics.Nikki_ArmSkirtRig_FollowBone
// 0x0068 (0x0068 - 0x0000)
struct FNikki_ArmSkirtRig_FollowBone final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FollowRatio;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TposeDirection;                                    // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateDirInverse;                                 // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x37];                                      // 0x0031(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_ArmSkirtRig_FollowBone) == 0x000008, "Wrong alignment on FNikki_ArmSkirtRig_FollowBone");
static_assert(sizeof(FNikki_ArmSkirtRig_FollowBone) == 0x000068, "Wrong size on FNikki_ArmSkirtRig_FollowBone");
static_assert(offsetof(FNikki_ArmSkirtRig_FollowBone, BoneRef) == 0x000000, "Member 'FNikki_ArmSkirtRig_FollowBone::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_FollowBone, FollowRatio) == 0x000010, "Member 'FNikki_ArmSkirtRig_FollowBone::FollowRatio' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_FollowBone, TposeDirection) == 0x000018, "Member 'FNikki_ArmSkirtRig_FollowBone::TposeDirection' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_FollowBone, bRotateDirInverse) == 0x000030, "Member 'FNikki_ArmSkirtRig_FollowBone::bRotateDirInverse' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_ArmSkirtRig_FollowBoneDistHelper
// 0x0014 (0x0014 - 0x0000)
struct FNikki_ArmSkirtRig_FollowBoneDistHelper final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CriticalDistance;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_ArmSkirtRig_FollowBoneDistHelper) == 0x000004, "Wrong alignment on FNikki_ArmSkirtRig_FollowBoneDistHelper");
static_assert(sizeof(FNikki_ArmSkirtRig_FollowBoneDistHelper) == 0x000014, "Wrong size on FNikki_ArmSkirtRig_FollowBoneDistHelper");
static_assert(offsetof(FNikki_ArmSkirtRig_FollowBoneDistHelper, BoneRef) == 0x000000, "Member 'FNikki_ArmSkirtRig_FollowBoneDistHelper::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_FollowBoneDistHelper, CriticalDistance) == 0x000010, "Member 'FNikki_ArmSkirtRig_FollowBoneDistHelper::CriticalDistance' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_ArmSkirtRig_AxisBone
// 0x00A0 (0x00A0 - 0x0000)
struct FNikki_ArmSkirtRig_AxisBone final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                FrontDir;                                          // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotAxis;                                           // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpAxis;                                            // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x48];                                      // 0x0058(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_ArmSkirtRig_AxisBone) == 0x000008, "Wrong alignment on FNikki_ArmSkirtRig_AxisBone");
static_assert(sizeof(FNikki_ArmSkirtRig_AxisBone) == 0x0000A0, "Wrong size on FNikki_ArmSkirtRig_AxisBone");
static_assert(offsetof(FNikki_ArmSkirtRig_AxisBone, BoneRef) == 0x000000, "Member 'FNikki_ArmSkirtRig_AxisBone::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_AxisBone, FrontDir) == 0x000010, "Member 'FNikki_ArmSkirtRig_AxisBone::FrontDir' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_AxisBone, RotAxis) == 0x000028, "Member 'FNikki_ArmSkirtRig_AxisBone::RotAxis' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_AxisBone, UpAxis) == 0x000040, "Member 'FNikki_ArmSkirtRig_AxisBone::UpAxis' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_ArmSkirtRig_ModifiedBone
// 0x01D0 (0x01D0 - 0x0000)
struct FNikki_ArmSkirtRig_ModifiedBone final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartFollowAngle;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNikki_ArmSkirtRig_AxisBone            AxisBone;                                          // 0x0018(0x00A0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FNikki_ArmSkirtRig_FollowBone          FollowStrictBone;                                  // 0x00B8(0x0068)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FNikki_ArmSkirtRig_FollowBoneDistHelper DistHelper;                                       // 0x0120(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LastBoneRef;                                       // 0x0134(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     ChildRotCurve;                                     // 0x0148(0x0088)(Edit, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_ArmSkirtRig_ModifiedBone) == 0x000008, "Wrong alignment on FNikki_ArmSkirtRig_ModifiedBone");
static_assert(sizeof(FNikki_ArmSkirtRig_ModifiedBone) == 0x0001D0, "Wrong size on FNikki_ArmSkirtRig_ModifiedBone");
static_assert(offsetof(FNikki_ArmSkirtRig_ModifiedBone, BoneRef) == 0x000000, "Member 'FNikki_ArmSkirtRig_ModifiedBone::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_ModifiedBone, StartFollowAngle) == 0x000010, "Member 'FNikki_ArmSkirtRig_ModifiedBone::StartFollowAngle' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_ModifiedBone, AxisBone) == 0x000018, "Member 'FNikki_ArmSkirtRig_ModifiedBone::AxisBone' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_ModifiedBone, FollowStrictBone) == 0x0000B8, "Member 'FNikki_ArmSkirtRig_ModifiedBone::FollowStrictBone' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_ModifiedBone, DistHelper) == 0x000120, "Member 'FNikki_ArmSkirtRig_ModifiedBone::DistHelper' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_ModifiedBone, LastBoneRef) == 0x000134, "Member 'FNikki_ArmSkirtRig_ModifiedBone::LastBoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_ArmSkirtRig_ModifiedBone, ChildRotCurve) == 0x000148, "Member 'FNikki_ArmSkirtRig_ModifiedBone::ChildRotCurve' has a wrong offset!");

// ScriptStruct NikkiPhysics.AnimNode_NikkiArmSkirtRig
// 0x0050 (0x0060 - 0x0010)
struct FAnimNode_NikkiArmSkirtRig final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNikki_ArmSkirtRig_ModifiedBone> ModifiedBones;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NikkiArmSkirtRig) == 0x000008, "Wrong alignment on FAnimNode_NikkiArmSkirtRig");
static_assert(sizeof(FAnimNode_NikkiArmSkirtRig) == 0x000060, "Wrong size on FAnimNode_NikkiArmSkirtRig");
static_assert(offsetof(FAnimNode_NikkiArmSkirtRig, Source) == 0x000010, "Member 'FAnimNode_NikkiArmSkirtRig::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiArmSkirtRig, alpha) == 0x000020, "Member 'FAnimNode_NikkiArmSkirtRig::alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiArmSkirtRig, bDebugDraw) == 0x000024, "Member 'FAnimNode_NikkiArmSkirtRig::bDebugDraw' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiArmSkirtRig, ModifiedBones) == 0x000028, "Member 'FAnimNode_NikkiArmSkirtRig::ModifiedBones' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_SpineControlTarget
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FNikki_SpineControlTarget final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBoneAxis                                     BodyRefAxis;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControlledAlpha;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x68];                                      // 0x0018(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_SpineControlTarget) == 0x000010, "Wrong alignment on FNikki_SpineControlTarget");
static_assert(sizeof(FNikki_SpineControlTarget) == 0x000080, "Wrong size on FNikki_SpineControlTarget");
static_assert(offsetof(FNikki_SpineControlTarget, bone) == 0x000000, "Member 'FNikki_SpineControlTarget::bone' has a wrong offset!");
static_assert(offsetof(FNikki_SpineControlTarget, BodyRefAxis) == 0x000010, "Member 'FNikki_SpineControlTarget::BodyRefAxis' has a wrong offset!");
static_assert(offsetof(FNikki_SpineControlTarget, ControlledAlpha) == 0x000014, "Member 'FNikki_SpineControlTarget::ControlledAlpha' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_BagDrivenParameters
// 0x0014 (0x0014 - 0x0000)
struct FNikki_BagDrivenParameters final
{
public:
	EBoneAxis                                     RotationAxisToRefer;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneAxis                                     RotationAxis;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAngle;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngle;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_BagDrivenParameters) == 0x000004, "Wrong alignment on FNikki_BagDrivenParameters");
static_assert(sizeof(FNikki_BagDrivenParameters) == 0x000014, "Wrong size on FNikki_BagDrivenParameters");
static_assert(offsetof(FNikki_BagDrivenParameters, RotationAxisToRefer) == 0x000000, "Member 'FNikki_BagDrivenParameters::RotationAxisToRefer' has a wrong offset!");
static_assert(offsetof(FNikki_BagDrivenParameters, RotationAxis) == 0x000001, "Member 'FNikki_BagDrivenParameters::RotationAxis' has a wrong offset!");
static_assert(offsetof(FNikki_BagDrivenParameters, MaxAngle) == 0x000004, "Member 'FNikki_BagDrivenParameters::MaxAngle' has a wrong offset!");
static_assert(offsetof(FNikki_BagDrivenParameters, MinAngle) == 0x000008, "Member 'FNikki_BagDrivenParameters::MinAngle' has a wrong offset!");
static_assert(offsetof(FNikki_BagDrivenParameters, StartAngle) == 0x00000C, "Member 'FNikki_BagDrivenParameters::StartAngle' has a wrong offset!");
static_assert(offsetof(FNikki_BagDrivenParameters, Multiplier) == 0x000010, "Member 'FNikki_BagDrivenParameters::Multiplier' has a wrong offset!");

// ScriptStruct NikkiPhysics.AnimNode_NikkiBagRig
// 0x0088 (0x0098 - 0x0010)
struct FAnimNode_NikkiBagRig final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         DrivenBone;                                        // 0x0024(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         DriverBone;                                        // 0x0034(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNikki_BagDrivenParameters>     DrivenParameters;                                  // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         BodyMainBone;                                      // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_SpineControlTarget>      ModifiedBones;                                     // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x20];                                      // 0x0078(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NikkiBagRig) == 0x000008, "Wrong alignment on FAnimNode_NikkiBagRig");
static_assert(sizeof(FAnimNode_NikkiBagRig) == 0x000098, "Wrong size on FAnimNode_NikkiBagRig");
static_assert(offsetof(FAnimNode_NikkiBagRig, Source) == 0x000010, "Member 'FAnimNode_NikkiBagRig::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiBagRig, alpha) == 0x000020, "Member 'FAnimNode_NikkiBagRig::alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiBagRig, DrivenBone) == 0x000024, "Member 'FAnimNode_NikkiBagRig::DrivenBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiBagRig, DriverBone) == 0x000034, "Member 'FAnimNode_NikkiBagRig::DriverBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiBagRig, DrivenParameters) == 0x000048, "Member 'FAnimNode_NikkiBagRig::DrivenParameters' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiBagRig, BodyMainBone) == 0x000058, "Member 'FAnimNode_NikkiBagRig::BodyMainBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiBagRig, ModifiedBones) == 0x000068, "Member 'FAnimNode_NikkiBagRig::ModifiedBones' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_DrivenParameters
// 0x000C (0x000C - 0x0000)
struct FNikki_DrivenParameters final
{
public:
	EBoneAxis                                     RotationAxisToRefer;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneAxis                                     RotationAxis;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EControlBoneAxis                              RotationLimit;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_DrivenParameters) == 0x000004, "Wrong alignment on FNikki_DrivenParameters");
static_assert(sizeof(FNikki_DrivenParameters) == 0x00000C, "Wrong size on FNikki_DrivenParameters");
static_assert(offsetof(FNikki_DrivenParameters, RotationAxisToRefer) == 0x000000, "Member 'FNikki_DrivenParameters::RotationAxisToRefer' has a wrong offset!");
static_assert(offsetof(FNikki_DrivenParameters, RotationAxis) == 0x000001, "Member 'FNikki_DrivenParameters::RotationAxis' has a wrong offset!");
static_assert(offsetof(FNikki_DrivenParameters, RotationLimit) == 0x000004, "Member 'FNikki_DrivenParameters::RotationLimit' has a wrong offset!");
static_assert(offsetof(FNikki_DrivenParameters, Multiplier) == 0x000008, "Member 'FNikki_DrivenParameters::Multiplier' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_BodyControlTarget
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FNikki_BodyControlTarget final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBoneAxis                                     BodyRefAxis;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControlledAlpha;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x68];                                      // 0x0018(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_BodyControlTarget) == 0x000010, "Wrong alignment on FNikki_BodyControlTarget");
static_assert(sizeof(FNikki_BodyControlTarget) == 0x000080, "Wrong size on FNikki_BodyControlTarget");
static_assert(offsetof(FNikki_BodyControlTarget, bone) == 0x000000, "Member 'FNikki_BodyControlTarget::bone' has a wrong offset!");
static_assert(offsetof(FNikki_BodyControlTarget, BodyRefAxis) == 0x000010, "Member 'FNikki_BodyControlTarget::BodyRefAxis' has a wrong offset!");
static_assert(offsetof(FNikki_BodyControlTarget, ControlledAlpha) == 0x000014, "Member 'FNikki_BodyControlTarget::ControlledAlpha' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_ControlledClockBone
// 0x0030 (0x0030 - 0x0000)
struct FNikki_ControlledClockBone final
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_DrivenParameters>        DrivenParameters;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_ControlledClockBone) == 0x000008, "Wrong alignment on FNikki_ControlledClockBone");
static_assert(sizeof(FNikki_ControlledClockBone) == 0x000030, "Wrong size on FNikki_ControlledClockBone");
static_assert(offsetof(FNikki_ControlledClockBone, SourceBone) == 0x000000, "Member 'FNikki_ControlledClockBone::SourceBone' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledClockBone, TargetBone) == 0x000010, "Member 'FNikki_ControlledClockBone::TargetBone' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledClockBone, DrivenParameters) == 0x000020, "Member 'FNikki_ControlledClockBone::DrivenParameters' has a wrong offset!");

// ScriptStruct NikkiPhysics.AnimNode_NikkiCloakRig
// 0x0068 (0x0078 - 0x0010)
struct FAnimNode_NikkiCloakRig final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNikki_ControlledClockBone>     ControlledBones;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         BodyMainBone;                                      // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_BodyControlTarget>       ModifiedBones;                                     // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x20];                                      // 0x0058(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NikkiCloakRig) == 0x000008, "Wrong alignment on FAnimNode_NikkiCloakRig");
static_assert(sizeof(FAnimNode_NikkiCloakRig) == 0x000078, "Wrong size on FAnimNode_NikkiCloakRig");
static_assert(offsetof(FAnimNode_NikkiCloakRig, Source) == 0x000010, "Member 'FAnimNode_NikkiCloakRig::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiCloakRig, alpha) == 0x000020, "Member 'FAnimNode_NikkiCloakRig::alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiCloakRig, ControlledBones) == 0x000028, "Member 'FAnimNode_NikkiCloakRig::ControlledBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiCloakRig, BodyMainBone) == 0x000038, "Member 'FAnimNode_NikkiCloakRig::BodyMainBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiCloakRig, ModifiedBones) == 0x000048, "Member 'FAnimNode_NikkiCloakRig::ModifiedBones' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_TargetBone
// 0x0058 (0x0058 - 0x0000)
struct FNikki_TargetBone final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ControlBoneNum;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 JointedAlphas;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ApartAlphas;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimpleAlpha;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInit;                                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x17];                                      // 0x0041(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_TargetBone) == 0x000008, "Wrong alignment on FNikki_TargetBone");
static_assert(sizeof(FNikki_TargetBone) == 0x000058, "Wrong size on FNikki_TargetBone");
static_assert(offsetof(FNikki_TargetBone, BoneRef) == 0x000000, "Member 'FNikki_TargetBone::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_TargetBone, ControlBoneNum) == 0x000010, "Member 'FNikki_TargetBone::ControlBoneNum' has a wrong offset!");
static_assert(offsetof(FNikki_TargetBone, JointedAlphas) == 0x000018, "Member 'FNikki_TargetBone::JointedAlphas' has a wrong offset!");
static_assert(offsetof(FNikki_TargetBone, ApartAlphas) == 0x000028, "Member 'FNikki_TargetBone::ApartAlphas' has a wrong offset!");
static_assert(offsetof(FNikki_TargetBone, StartAngle) == 0x000038, "Member 'FNikki_TargetBone::StartAngle' has a wrong offset!");
static_assert(offsetof(FNikki_TargetBone, SimpleAlpha) == 0x00003C, "Member 'FNikki_TargetBone::SimpleAlpha' has a wrong offset!");
static_assert(offsetof(FNikki_TargetBone, bInit) == 0x000040, "Member 'FNikki_TargetBone::bInit' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_ControlledBone
// 0x0108 (0x0108 - 0x0000)
struct FNikki_ControlledBone final
{
public:
	struct FBoneReference                         ChainDirBone;                                      // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FNikki_TargetBone                      First;                                             // 0x0010(0x0058)(Edit, NativeAccessSpecifierPublic)
	struct FNikki_TargetBone                      Second;                                            // 0x0068(0x0058)(Edit, NativeAccessSpecifierPublic)
	struct FVector                                BSBoneDir;                                         // 0x00C0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormDir;                                           // 0x00D8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApartFollowRatio;                                  // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSplayMark;                                        // 0x00F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SplayAlpha;                                        // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplayStartAngle;                                   // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplayMaxAngle;                                     // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseChainDirWhenSplaying;                          // 0x0104(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMarkStopFirstRotate;                              // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_ControlledBone) == 0x000008, "Wrong alignment on FNikki_ControlledBone");
static_assert(sizeof(FNikki_ControlledBone) == 0x000108, "Wrong size on FNikki_ControlledBone");
static_assert(offsetof(FNikki_ControlledBone, ChainDirBone) == 0x000000, "Member 'FNikki_ControlledBone::ChainDirBone' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledBone, First) == 0x000010, "Member 'FNikki_ControlledBone::First' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledBone, Second) == 0x000068, "Member 'FNikki_ControlledBone::Second' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledBone, BSBoneDir) == 0x0000C0, "Member 'FNikki_ControlledBone::BSBoneDir' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledBone, NormDir) == 0x0000D8, "Member 'FNikki_ControlledBone::NormDir' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledBone, ApartFollowRatio) == 0x0000F0, "Member 'FNikki_ControlledBone::ApartFollowRatio' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledBone, bSplayMark) == 0x0000F4, "Member 'FNikki_ControlledBone::bSplayMark' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledBone, SplayAlpha) == 0x0000F8, "Member 'FNikki_ControlledBone::SplayAlpha' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledBone, SplayStartAngle) == 0x0000FC, "Member 'FNikki_ControlledBone::SplayStartAngle' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledBone, SplayMaxAngle) == 0x000100, "Member 'FNikki_ControlledBone::SplayMaxAngle' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledBone, bUseChainDirWhenSplaying) == 0x000104, "Member 'FNikki_ControlledBone::bUseChainDirWhenSplaying' has a wrong offset!");
static_assert(offsetof(FNikki_ControlledBone, bMarkStopFirstRotate) == 0x000105, "Member 'FNikki_ControlledBone::bMarkStopFirstRotate' has a wrong offset!");

// ScriptStruct NikkiPhysics.HorizontalRigProxySim
// 0x00E0 (0x00E0 - 0x0000)
struct alignas(0x10) FHorizontalRigProxySim final
{
public:
	struct FBoneReference                         TargetBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FixStiffness;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xCC];                                      // 0x0014(0x00CC)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHorizontalRigProxySim) == 0x000010, "Wrong alignment on FHorizontalRigProxySim");
static_assert(sizeof(FHorizontalRigProxySim) == 0x0000E0, "Wrong size on FHorizontalRigProxySim");
static_assert(offsetof(FHorizontalRigProxySim, TargetBone) == 0x000000, "Member 'FHorizontalRigProxySim::TargetBone' has a wrong offset!");
static_assert(offsetof(FHorizontalRigProxySim, FixStiffness) == 0x000010, "Member 'FHorizontalRigProxySim::FixStiffness' has a wrong offset!");

// ScriptStruct NikkiPhysics.HorizontalRigCorrectProxy
// 0x0200 (0x0200 - 0x0000)
struct alignas(0x10) FHorizontalRigCorrectProxy final
{
public:
	struct FBoneReference                         TargetBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityStiffness;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x1D0];                                     // 0x0030(0x01D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHorizontalRigCorrectProxy) == 0x000010, "Wrong alignment on FHorizontalRigCorrectProxy");
static_assert(sizeof(FHorizontalRigCorrectProxy) == 0x000200, "Wrong size on FHorizontalRigCorrectProxy");
static_assert(offsetof(FHorizontalRigCorrectProxy, TargetBone) == 0x000000, "Member 'FHorizontalRigCorrectProxy::TargetBone' has a wrong offset!");
static_assert(offsetof(FHorizontalRigCorrectProxy, Gravity) == 0x000010, "Member 'FHorizontalRigCorrectProxy::Gravity' has a wrong offset!");
static_assert(offsetof(FHorizontalRigCorrectProxy, GravityStiffness) == 0x000028, "Member 'FHorizontalRigCorrectProxy::GravityStiffness' has a wrong offset!");
static_assert(offsetof(FHorizontalRigCorrectProxy, Damping) == 0x00002C, "Member 'FHorizontalRigCorrectProxy::Damping' has a wrong offset!");

// ScriptStruct NikkiPhysics.RBFPose
// 0x0010 (0x0010 - 0x0000)
struct FRBFPose final
{
public:
	TArray<float>                                 Values;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRBFPose) == 0x000008, "Wrong alignment on FRBFPose");
static_assert(sizeof(FRBFPose) == 0x000010, "Wrong size on FRBFPose");
static_assert(offsetof(FRBFPose, Values) == 0x000000, "Member 'FRBFPose::Values' has a wrong offset!");

// ScriptStruct NikkiPhysics.RBFSolver
// 0x0004 (0x0004 - 0x0000)
struct FRBFSolver final
{
public:
	ERBFDistMethod                                DistanceMethod;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRBFSolver) == 0x000004, "Wrong alignment on FRBFSolver");
static_assert(sizeof(FRBFSolver) == 0x000004, "Wrong size on FRBFSolver");
static_assert(offsetof(FRBFSolver, DistanceMethod) == 0x000000, "Member 'FRBFSolver::DistanceMethod' has a wrong offset!");

// ScriptStruct NikkiPhysics.AnimNode_NikkiHorizontalRig
// 0x05D0 (0x05E0 - 0x0010)
struct FAnimNode_NikkiHorizontalRig final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HipRadius;                                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KneeRadius;                                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipFollowSpeed;                                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KneeFollowSpeed;                                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HipFollowAngleFactor;                              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KneeFollowAngleFactor;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RefBoneDirectionInfluence;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrontJointedAlpha;                                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackJointedAlpha;                                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlBoneType                              ExcuteType;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EControlBoneMethod                            Method;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlBoneAlphaMethod                       RelativeAlphaGenMethod;                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplayBoneDistributionSoften;                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixBodyRot;                                       // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         ClothBodyBone;                                     // 0x005C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FootBodyBone;                                      // 0x006C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FrontDirection;                                    // 0x0080(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftBone;                                          // 0x0098(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftSecondBone;                                    // 0x00A8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LeftBoneDir;                                       // 0x00B8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightBone;                                         // 0x00D0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightSecondBone;                                   // 0x00E0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RightBoneDir;                                      // 0x00F0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableNormalize;                                  // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSmoothing;                                  // 0x0109(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothRatio;                                       // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothCenter;                                      // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         ControlledLeftBone;                                // 0x0114(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ControlledRightBone;                               // 0x0124(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNikki_ControlledBone>          ControlledBones;                                   // 0x0138(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 FixedBones;                                        // 0x0148(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x0158(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHorizontalRigProxySim                 ProxySimSystem;                                    // 0x0170(0x00E0)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHorizontalRigCorrectProxy             GravityProxy;                                      // 0x0250(0x0200)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCheckRefBoneComponentSpace;                       // 0x0450(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetAngleComponentSpace;                           // 0x0451(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugInfo;                                    // 0x0452(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawControlledBones;                              // 0x0453(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRBFPose>                       LeftPoses;                                         // 0x0458(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRBFPose>                       RightPoses;                                        // 0x0468(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRBFSolver                             RBFSolver;                                         // 0x0478(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBFPose                               Poses;                                             // 0x0480(0x0010)(NativeAccessSpecifierPublic)
	uint8                                         Pad_490[0x150];                                    // 0x0490(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NikkiHorizontalRig) == 0x000010, "Wrong alignment on FAnimNode_NikkiHorizontalRig");
static_assert(sizeof(FAnimNode_NikkiHorizontalRig) == 0x0005E0, "Wrong size on FAnimNode_NikkiHorizontalRig");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, Source) == 0x000010, "Member 'FAnimNode_NikkiHorizontalRig::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, HipRadius) == 0x000020, "Member 'FAnimNode_NikkiHorizontalRig::HipRadius' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, KneeRadius) == 0x000024, "Member 'FAnimNode_NikkiHorizontalRig::KneeRadius' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, HipFollowSpeed) == 0x000028, "Member 'FAnimNode_NikkiHorizontalRig::HipFollowSpeed' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, KneeFollowSpeed) == 0x00002C, "Member 'FAnimNode_NikkiHorizontalRig::KneeFollowSpeed' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, HipFollowAngleFactor) == 0x000030, "Member 'FAnimNode_NikkiHorizontalRig::HipFollowAngleFactor' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, KneeFollowAngleFactor) == 0x000034, "Member 'FAnimNode_NikkiHorizontalRig::KneeFollowAngleFactor' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, RefBoneDirectionInfluence) == 0x000038, "Member 'FAnimNode_NikkiHorizontalRig::RefBoneDirectionInfluence' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, FrontJointedAlpha) == 0x00003C, "Member 'FAnimNode_NikkiHorizontalRig::FrontJointedAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, BackJointedAlpha) == 0x000040, "Member 'FAnimNode_NikkiHorizontalRig::BackJointedAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, alpha) == 0x000044, "Member 'FAnimNode_NikkiHorizontalRig::alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, ExcuteType) == 0x000048, "Member 'FAnimNode_NikkiHorizontalRig::ExcuteType' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, Method) == 0x00004C, "Member 'FAnimNode_NikkiHorizontalRig::Method' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, RelativeAlphaGenMethod) == 0x000050, "Member 'FAnimNode_NikkiHorizontalRig::RelativeAlphaGenMethod' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, SplayBoneDistributionSoften) == 0x000054, "Member 'FAnimNode_NikkiHorizontalRig::SplayBoneDistributionSoften' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, bFixBodyRot) == 0x000058, "Member 'FAnimNode_NikkiHorizontalRig::bFixBodyRot' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, ClothBodyBone) == 0x00005C, "Member 'FAnimNode_NikkiHorizontalRig::ClothBodyBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, FootBodyBone) == 0x00006C, "Member 'FAnimNode_NikkiHorizontalRig::FootBodyBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, FrontDirection) == 0x000080, "Member 'FAnimNode_NikkiHorizontalRig::FrontDirection' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, LeftBone) == 0x000098, "Member 'FAnimNode_NikkiHorizontalRig::LeftBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, LeftSecondBone) == 0x0000A8, "Member 'FAnimNode_NikkiHorizontalRig::LeftSecondBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, LeftBoneDir) == 0x0000B8, "Member 'FAnimNode_NikkiHorizontalRig::LeftBoneDir' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, RightBone) == 0x0000D0, "Member 'FAnimNode_NikkiHorizontalRig::RightBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, RightSecondBone) == 0x0000E0, "Member 'FAnimNode_NikkiHorizontalRig::RightSecondBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, RightBoneDir) == 0x0000F0, "Member 'FAnimNode_NikkiHorizontalRig::RightBoneDir' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, bEnableNormalize) == 0x000108, "Member 'FAnimNode_NikkiHorizontalRig::bEnableNormalize' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, bEnableSmoothing) == 0x000109, "Member 'FAnimNode_NikkiHorizontalRig::bEnableSmoothing' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, SmoothRatio) == 0x00010C, "Member 'FAnimNode_NikkiHorizontalRig::SmoothRatio' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, SmoothCenter) == 0x000110, "Member 'FAnimNode_NikkiHorizontalRig::SmoothCenter' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, ControlledLeftBone) == 0x000114, "Member 'FAnimNode_NikkiHorizontalRig::ControlledLeftBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, ControlledRightBone) == 0x000124, "Member 'FAnimNode_NikkiHorizontalRig::ControlledRightBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, ControlledBones) == 0x000138, "Member 'FAnimNode_NikkiHorizontalRig::ControlledBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, FixedBones) == 0x000148, "Member 'FAnimNode_NikkiHorizontalRig::FixedBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, Gravity) == 0x000158, "Member 'FAnimNode_NikkiHorizontalRig::Gravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, ProxySimSystem) == 0x000170, "Member 'FAnimNode_NikkiHorizontalRig::ProxySimSystem' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, GravityProxy) == 0x000250, "Member 'FAnimNode_NikkiHorizontalRig::GravityProxy' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, bCheckRefBoneComponentSpace) == 0x000450, "Member 'FAnimNode_NikkiHorizontalRig::bCheckRefBoneComponentSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, bGetAngleComponentSpace) == 0x000451, "Member 'FAnimNode_NikkiHorizontalRig::bGetAngleComponentSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, bDrawDebugInfo) == 0x000452, "Member 'FAnimNode_NikkiHorizontalRig::bDrawDebugInfo' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, bDrawControlledBones) == 0x000453, "Member 'FAnimNode_NikkiHorizontalRig::bDrawControlledBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, LeftPoses) == 0x000458, "Member 'FAnimNode_NikkiHorizontalRig::LeftPoses' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, RightPoses) == 0x000468, "Member 'FAnimNode_NikkiHorizontalRig::RightPoses' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, RBFSolver) == 0x000478, "Member 'FAnimNode_NikkiHorizontalRig::RBFSolver' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiHorizontalRig, Poses) == 0x000480, "Member 'FAnimNode_NikkiHorizontalRig::Poses' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_LiftLegRig_FollowBone
// 0x0058 (0x0058 - 0x0000)
struct FNikki_LiftLegRig_FollowBone final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FollowRatio;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TposeDirection;                                    // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotateDirInverse;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x27];                                      // 0x0031(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_LiftLegRig_FollowBone) == 0x000008, "Wrong alignment on FNikki_LiftLegRig_FollowBone");
static_assert(sizeof(FNikki_LiftLegRig_FollowBone) == 0x000058, "Wrong size on FNikki_LiftLegRig_FollowBone");
static_assert(offsetof(FNikki_LiftLegRig_FollowBone, BoneRef) == 0x000000, "Member 'FNikki_LiftLegRig_FollowBone::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_FollowBone, FollowRatio) == 0x000010, "Member 'FNikki_LiftLegRig_FollowBone::FollowRatio' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_FollowBone, TposeDirection) == 0x000018, "Member 'FNikki_LiftLegRig_FollowBone::TposeDirection' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_FollowBone, RotateDirInverse) == 0x000030, "Member 'FNikki_LiftLegRig_FollowBone::RotateDirInverse' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_LiftLegRig_AxisBone
// 0x0040 (0x0040 - 0x0000)
struct FNikki_LiftLegRig_AxisBone final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                FrontDir;                                          // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotAxis;                                           // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_LiftLegRig_AxisBone) == 0x000008, "Wrong alignment on FNikki_LiftLegRig_AxisBone");
static_assert(sizeof(FNikki_LiftLegRig_AxisBone) == 0x000040, "Wrong size on FNikki_LiftLegRig_AxisBone");
static_assert(offsetof(FNikki_LiftLegRig_AxisBone, BoneRef) == 0x000000, "Member 'FNikki_LiftLegRig_AxisBone::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_AxisBone, FrontDir) == 0x000010, "Member 'FNikki_LiftLegRig_AxisBone::FrontDir' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_AxisBone, RotAxis) == 0x000028, "Member 'FNikki_LiftLegRig_AxisBone::RotAxis' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_LiftLegRig_ModifiedBone
// 0x0148 (0x0148 - 0x0000)
struct FNikki_LiftLegRig_ModifiedBone final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartLiftAngle;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNikki_LiftLegRig_AxisBone             AxisBone;                                          // 0x0018(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FNikki_LiftLegRig_FollowBone           FollowStrictBone;                                  // 0x0058(0x0058)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OtherBoneCoeff;                                    // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNikki_LiftLegRig_FollowBone>   FollowOtherBones;                                  // 0x00B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          EnableAxialRotation;                               // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         RotatedLastBone;                                   // 0x00CC(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RefBoneA;                                          // 0x00DC(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RefBoneB;                                          // 0x00EC(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RotateAxisLocalSpace;                              // 0x0100(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x30];                                     // 0x0118(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_LiftLegRig_ModifiedBone) == 0x000008, "Wrong alignment on FNikki_LiftLegRig_ModifiedBone");
static_assert(sizeof(FNikki_LiftLegRig_ModifiedBone) == 0x000148, "Wrong size on FNikki_LiftLegRig_ModifiedBone");
static_assert(offsetof(FNikki_LiftLegRig_ModifiedBone, BoneRef) == 0x000000, "Member 'FNikki_LiftLegRig_ModifiedBone::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_ModifiedBone, StartLiftAngle) == 0x000010, "Member 'FNikki_LiftLegRig_ModifiedBone::StartLiftAngle' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_ModifiedBone, AxisBone) == 0x000018, "Member 'FNikki_LiftLegRig_ModifiedBone::AxisBone' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_ModifiedBone, FollowStrictBone) == 0x000058, "Member 'FNikki_LiftLegRig_ModifiedBone::FollowStrictBone' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_ModifiedBone, OtherBoneCoeff) == 0x0000B0, "Member 'FNikki_LiftLegRig_ModifiedBone::OtherBoneCoeff' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_ModifiedBone, FollowOtherBones) == 0x0000B8, "Member 'FNikki_LiftLegRig_ModifiedBone::FollowOtherBones' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_ModifiedBone, EnableAxialRotation) == 0x0000C8, "Member 'FNikki_LiftLegRig_ModifiedBone::EnableAxialRotation' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_ModifiedBone, RotatedLastBone) == 0x0000CC, "Member 'FNikki_LiftLegRig_ModifiedBone::RotatedLastBone' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_ModifiedBone, RefBoneA) == 0x0000DC, "Member 'FNikki_LiftLegRig_ModifiedBone::RefBoneA' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_ModifiedBone, RefBoneB) == 0x0000EC, "Member 'FNikki_LiftLegRig_ModifiedBone::RefBoneB' has a wrong offset!");
static_assert(offsetof(FNikki_LiftLegRig_ModifiedBone, RotateAxisLocalSpace) == 0x000100, "Member 'FNikki_LiftLegRig_ModifiedBone::RotateAxisLocalSpace' has a wrong offset!");

// ScriptStruct NikkiPhysics.AnimNode_NikkiLiftLegRig
// 0x0050 (0x0060 - 0x0010)
struct FAnimNode_NikkiLiftLegRig final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNikki_LiftLegRig_ModifiedBone> ModifiedBones;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NikkiLiftLegRig) == 0x000008, "Wrong alignment on FAnimNode_NikkiLiftLegRig");
static_assert(sizeof(FAnimNode_NikkiLiftLegRig) == 0x000060, "Wrong size on FAnimNode_NikkiLiftLegRig");
static_assert(offsetof(FAnimNode_NikkiLiftLegRig, Source) == 0x000010, "Member 'FAnimNode_NikkiLiftLegRig::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiLiftLegRig, alpha) == 0x000020, "Member 'FAnimNode_NikkiLiftLegRig::alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiLiftLegRig, bDebugDraw) == 0x000024, "Member 'FAnimNode_NikkiLiftLegRig::bDebugDraw' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiLiftLegRig, ModifiedBones) == 0x000028, "Member 'FAnimNode_NikkiLiftLegRig::ModifiedBones' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_StreamerTarget
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FNikki_StreamerTarget final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x60];                                      // 0x0010(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_StreamerTarget) == 0x000010, "Wrong alignment on FNikki_StreamerTarget");
static_assert(sizeof(FNikki_StreamerTarget) == 0x000070, "Wrong size on FNikki_StreamerTarget");
static_assert(offsetof(FNikki_StreamerTarget, bone) == 0x000000, "Member 'FNikki_StreamerTarget::bone' has a wrong offset!");

// ScriptStruct NikkiPhysics.AnimNode_NikkiLongStreamerRig
// 0x0058 (0x0068 - 0x0010)
struct FAnimNode_NikkiLongStreamerRig final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNikki_StreamerTarget>          ModifiedBones;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         BodyMainBone;                                      // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x20];                                      // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NikkiLongStreamerRig) == 0x000008, "Wrong alignment on FAnimNode_NikkiLongStreamerRig");
static_assert(sizeof(FAnimNode_NikkiLongStreamerRig) == 0x000068, "Wrong size on FAnimNode_NikkiLongStreamerRig");
static_assert(offsetof(FAnimNode_NikkiLongStreamerRig, Source) == 0x000010, "Member 'FAnimNode_NikkiLongStreamerRig::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiLongStreamerRig, alpha) == 0x000020, "Member 'FAnimNode_NikkiLongStreamerRig::alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiLongStreamerRig, ModifiedBones) == 0x000028, "Member 'FAnimNode_NikkiLongStreamerRig::ModifiedBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiLongStreamerRig, BodyMainBone) == 0x000038, "Member 'FAnimNode_NikkiLongStreamerRig::BodyMainBone' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_DebugAddVelocity
// 0x0020 (0x0020 - 0x0000)
struct FNikki_DebugAddVelocity final
{
public:
	struct FVector                                VelocityDirection;                                 // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityMagnitude;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_DebugAddVelocity) == 0x000008, "Wrong alignment on FNikki_DebugAddVelocity");
static_assert(sizeof(FNikki_DebugAddVelocity) == 0x000020, "Wrong size on FNikki_DebugAddVelocity");
static_assert(offsetof(FNikki_DebugAddVelocity, VelocityDirection) == 0x000000, "Member 'FNikki_DebugAddVelocity::VelocityDirection' has a wrong offset!");
static_assert(offsetof(FNikki_DebugAddVelocity, VelocityMagnitude) == 0x000018, "Member 'FNikki_DebugAddVelocity::VelocityMagnitude' has a wrong offset!");

// ScriptStruct NikkiPhysics.NikkiParticle_BackstopConstraint
// 0x000C (0x000C - 0x0000)
struct FNikkiParticle_BackstopConstraint final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikkiParticle_BackstopConstraint) == 0x000004, "Wrong alignment on FNikkiParticle_BackstopConstraint");
static_assert(sizeof(FNikkiParticle_BackstopConstraint) == 0x00000C, "Wrong size on FNikkiParticle_BackstopConstraint");
static_assert(offsetof(FNikkiParticle_BackstopConstraint, Distance) == 0x000000, "Member 'FNikkiParticle_BackstopConstraint::Distance' has a wrong offset!");
static_assert(offsetof(FNikkiParticle_BackstopConstraint, Radius) == 0x000004, "Member 'FNikkiParticle_BackstopConstraint::Radius' has a wrong offset!");
static_assert(offsetof(FNikkiParticle_BackstopConstraint, Stiffness) == 0x000008, "Member 'FNikkiParticle_BackstopConstraint::Stiffness' has a wrong offset!");

// ScriptStruct NikkiPhysics.NikkiParticle_MaxDistConstraintData
// 0x0008 (0x0008 - 0x0000)
struct FNikkiParticle_MaxDistConstraintData final
{
public:
	float                                         MaxDistance;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceStiffness;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikkiParticle_MaxDistConstraintData) == 0x000004, "Wrong alignment on FNikkiParticle_MaxDistConstraintData");
static_assert(sizeof(FNikkiParticle_MaxDistConstraintData) == 0x000008, "Wrong size on FNikkiParticle_MaxDistConstraintData");
static_assert(offsetof(FNikkiParticle_MaxDistConstraintData, MaxDistance) == 0x000000, "Member 'FNikkiParticle_MaxDistConstraintData::MaxDistance' has a wrong offset!");
static_assert(offsetof(FNikkiParticle_MaxDistConstraintData, MaxDistanceStiffness) == 0x000004, "Member 'FNikkiParticle_MaxDistConstraintData::MaxDistanceStiffness' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_CapsuleCollider
// 0x01F0 (0x01F0 - 0x0000)
struct alignas(0x10) FNikki_CapsuleCollider final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos_A_BoneSpace;                                   // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius_A;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos_B_BoneSpace;                                   // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius_B;                                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x194];                                     // 0x005C(0x0194)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_CapsuleCollider) == 0x000010, "Wrong alignment on FNikki_CapsuleCollider");
static_assert(sizeof(FNikki_CapsuleCollider) == 0x0001F0, "Wrong size on FNikki_CapsuleCollider");
static_assert(offsetof(FNikki_CapsuleCollider, BoneRef) == 0x000000, "Member 'FNikki_CapsuleCollider::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_CapsuleCollider, Guid) == 0x000010, "Member 'FNikki_CapsuleCollider::Guid' has a wrong offset!");
static_assert(offsetof(FNikki_CapsuleCollider, Pos_A_BoneSpace) == 0x000020, "Member 'FNikki_CapsuleCollider::Pos_A_BoneSpace' has a wrong offset!");
static_assert(offsetof(FNikki_CapsuleCollider, Radius_A) == 0x000038, "Member 'FNikki_CapsuleCollider::Radius_A' has a wrong offset!");
static_assert(offsetof(FNikki_CapsuleCollider, Pos_B_BoneSpace) == 0x000040, "Member 'FNikki_CapsuleCollider::Pos_B_BoneSpace' has a wrong offset!");
static_assert(offsetof(FNikki_CapsuleCollider, Radius_B) == 0x000058, "Member 'FNikki_CapsuleCollider::Radius_B' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_PlaneShape
// 0x0030 (0x0030 - 0x0000)
struct FNikki_PlaneShape final
{
public:
	struct FVector                                FacePos;                                           // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FaceNormal;                                        // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_PlaneShape) == 0x000008, "Wrong alignment on FNikki_PlaneShape");
static_assert(sizeof(FNikki_PlaneShape) == 0x000030, "Wrong size on FNikki_PlaneShape");
static_assert(offsetof(FNikki_PlaneShape, FacePos) == 0x000000, "Member 'FNikki_PlaneShape::FacePos' has a wrong offset!");
static_assert(offsetof(FNikki_PlaneShape, FaceNormal) == 0x000018, "Member 'FNikki_PlaneShape::FaceNormal' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_PlaneCollider
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FNikki_PlaneCollider final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos_BoneSpace;                                     // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Norm_BoneSpace;                                    // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0xA0];                                      // 0x0050(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_PlaneCollider) == 0x000010, "Wrong alignment on FNikki_PlaneCollider");
static_assert(sizeof(FNikki_PlaneCollider) == 0x0000F0, "Wrong size on FNikki_PlaneCollider");
static_assert(offsetof(FNikki_PlaneCollider, BoneRef) == 0x000000, "Member 'FNikki_PlaneCollider::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_PlaneCollider, Guid) == 0x000010, "Member 'FNikki_PlaneCollider::Guid' has a wrong offset!");
static_assert(offsetof(FNikki_PlaneCollider, Pos_BoneSpace) == 0x000020, "Member 'FNikki_PlaneCollider::Pos_BoneSpace' has a wrong offset!");
static_assert(offsetof(FNikki_PlaneCollider, Norm_BoneSpace) == 0x000038, "Member 'FNikki_PlaneCollider::Norm_BoneSpace' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_QuadCollider
// 0x01C8 (0x01C8 - 0x0000)
struct FNikki_QuadCollider final
{
public:
	int32                                         Conns[0x4];                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoneNames[0x4];                                    // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSkeleton;                                      // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x177];                                     // 0x0051(0x0177)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_QuadCollider) == 0x000008, "Wrong alignment on FNikki_QuadCollider");
static_assert(sizeof(FNikki_QuadCollider) == 0x0001C8, "Wrong size on FNikki_QuadCollider");
static_assert(offsetof(FNikki_QuadCollider, Conns) == 0x000000, "Member 'FNikki_QuadCollider::Conns' has a wrong offset!");
static_assert(offsetof(FNikki_QuadCollider, BoneNames) == 0x000010, "Member 'FNikki_QuadCollider::BoneNames' has a wrong offset!");
static_assert(offsetof(FNikki_QuadCollider, bHasSkeleton) == 0x000050, "Member 'FNikki_QuadCollider::bHasSkeleton' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_TriaCollider
// 0x0168 (0x0168 - 0x0000)
struct FNikki_TriaCollider final
{
public:
	int32                                         Conns[0x3];                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BoneNames[0x3];                                    // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSkeleton;                                      // 0x0040(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x127];                                     // 0x0041(0x0127)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_TriaCollider) == 0x000008, "Wrong alignment on FNikki_TriaCollider");
static_assert(sizeof(FNikki_TriaCollider) == 0x000168, "Wrong size on FNikki_TriaCollider");
static_assert(offsetof(FNikki_TriaCollider, Conns) == 0x000000, "Member 'FNikki_TriaCollider::Conns' has a wrong offset!");
static_assert(offsetof(FNikki_TriaCollider, BoneNames) == 0x000010, "Member 'FNikki_TriaCollider::BoneNames' has a wrong offset!");
static_assert(offsetof(FNikki_TriaCollider, bHasSkeleton) == 0x000040, "Member 'FNikki_TriaCollider::bHasSkeleton' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_MeshCollider
// 0x0090 (0x0090 - 0x0000)
struct FNikki_MeshCollider final
{
public:
	TArray<struct FNikki_QuadCollider>            QuadColliders;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FNikki_TriaCollider>            TriaColliders;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TMap<int32, struct FVector>                   BoneIndexNormalMap;                                // 0x0020(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x20];                                      // 0x0070(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_MeshCollider) == 0x000008, "Wrong alignment on FNikki_MeshCollider");
static_assert(sizeof(FNikki_MeshCollider) == 0x000090, "Wrong size on FNikki_MeshCollider");
static_assert(offsetof(FNikki_MeshCollider, QuadColliders) == 0x000000, "Member 'FNikki_MeshCollider::QuadColliders' has a wrong offset!");
static_assert(offsetof(FNikki_MeshCollider, TriaColliders) == 0x000010, "Member 'FNikki_MeshCollider::TriaColliders' has a wrong offset!");
static_assert(offsetof(FNikki_MeshCollider, BoneIndexNormalMap) == 0x000020, "Member 'FNikki_MeshCollider::BoneIndexNormalMap' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_ParticleCollider
// 0x0030 (0x0030 - 0x0000)
struct FNikki_ParticleCollider final
{
public:
	TArray<int32>                                 SphereParticleIndices;                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CapsuleParticleIndices_A;                          // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CapsuleParticleIndices_B;                          // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_ParticleCollider) == 0x000008, "Wrong alignment on FNikki_ParticleCollider");
static_assert(sizeof(FNikki_ParticleCollider) == 0x000030, "Wrong size on FNikki_ParticleCollider");
static_assert(offsetof(FNikki_ParticleCollider, SphereParticleIndices) == 0x000000, "Member 'FNikki_ParticleCollider::SphereParticleIndices' has a wrong offset!");
static_assert(offsetof(FNikki_ParticleCollider, CapsuleParticleIndices_A) == 0x000010, "Member 'FNikki_ParticleCollider::CapsuleParticleIndices_A' has a wrong offset!");
static_assert(offsetof(FNikki_ParticleCollider, CapsuleParticleIndices_B) == 0x000020, "Member 'FNikki_ParticleCollider::CapsuleParticleIndices_B' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_CollisionShapeBase
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FNikki_CollisionShapeBase
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVirtual;                                        // 0x0024(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0xCB];                                      // 0x0025(0x00CB)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_CollisionShapeBase) == 0x000010, "Wrong alignment on FNikki_CollisionShapeBase");
static_assert(sizeof(FNikki_CollisionShapeBase) == 0x0000F0, "Wrong size on FNikki_CollisionShapeBase");
static_assert(offsetof(FNikki_CollisionShapeBase, bone) == 0x000000, "Member 'FNikki_CollisionShapeBase::bone' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionShapeBase, Guid) == 0x000010, "Member 'FNikki_CollisionShapeBase::Guid' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionShapeBase, Layer) == 0x000020, "Member 'FNikki_CollisionShapeBase::Layer' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionShapeBase, bIsVirtual) == 0x000024, "Member 'FNikki_CollisionShapeBase::bIsVirtual' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_SphereShape
// 0x0050 (0x0140 - 0x00F0)
struct FNikki_SphereShape final : public FNikki_CollisionShapeBase
{
public:
	struct FVector                                Center;                                            // 0x00F0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestOffset;                                        // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x30];                                     // 0x0110(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_SphereShape) == 0x000010, "Wrong alignment on FNikki_SphereShape");
static_assert(sizeof(FNikki_SphereShape) == 0x000140, "Wrong size on FNikki_SphereShape");
static_assert(offsetof(FNikki_SphereShape, Center) == 0x0000F0, "Member 'FNikki_SphereShape::Center' has a wrong offset!");
static_assert(offsetof(FNikki_SphereShape, Radius) == 0x000108, "Member 'FNikki_SphereShape::Radius' has a wrong offset!");
static_assert(offsetof(FNikki_SphereShape, RestOffset) == 0x00010C, "Member 'FNikki_SphereShape::RestOffset' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_BoxShape
// 0x00C0 (0x01B0 - 0x00F0)
struct FNikki_BoxShape final : public FNikki_CollisionShapeBase
{
public:
	struct FTransform                             Trans_BoneSpace;                                   // 0x00F0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x0150(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x48];                                     // 0x0168(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_BoxShape) == 0x000010, "Wrong alignment on FNikki_BoxShape");
static_assert(sizeof(FNikki_BoxShape) == 0x0001B0, "Wrong size on FNikki_BoxShape");
static_assert(offsetof(FNikki_BoxShape, Trans_BoneSpace) == 0x0000F0, "Member 'FNikki_BoxShape::Trans_BoneSpace' has a wrong offset!");
static_assert(offsetof(FNikki_BoxShape, Extent) == 0x000150, "Member 'FNikki_BoxShape::Extent' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_CapsuleShape
// 0x00A0 (0x0190 - 0x00F0)
struct FNikki_CapsuleShape final : public FNikki_CollisionShapeBase
{
public:
	struct FVector                                PosA;                                              // 0x00F0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusA;                                           // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PosB;                                              // 0x0110(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusB;                                           // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x64];                                     // 0x012C(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_CapsuleShape) == 0x000010, "Wrong alignment on FNikki_CapsuleShape");
static_assert(sizeof(FNikki_CapsuleShape) == 0x000190, "Wrong size on FNikki_CapsuleShape");
static_assert(offsetof(FNikki_CapsuleShape, PosA) == 0x0000F0, "Member 'FNikki_CapsuleShape::PosA' has a wrong offset!");
static_assert(offsetof(FNikki_CapsuleShape, RadiusA) == 0x000108, "Member 'FNikki_CapsuleShape::RadiusA' has a wrong offset!");
static_assert(offsetof(FNikki_CapsuleShape, PosB) == 0x000110, "Member 'FNikki_CapsuleShape::PosB' has a wrong offset!");
static_assert(offsetof(FNikki_CapsuleShape, RadiusB) == 0x000128, "Member 'FNikki_CapsuleShape::RadiusB' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_ConvexPolyhedronShape
// 0x0070 (0x0160 - 0x00F0)
struct FNikki_ConvexPolyhedronShape final : public FNikki_CollisionShapeBase
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Indices;                                           // 0x0100(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector4>                       Planes;                                            // 0x0110(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0x40];                                     // 0x0120(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_ConvexPolyhedronShape) == 0x000010, "Wrong alignment on FNikki_ConvexPolyhedronShape");
static_assert(sizeof(FNikki_ConvexPolyhedronShape) == 0x000160, "Wrong size on FNikki_ConvexPolyhedronShape");
static_assert(offsetof(FNikki_ConvexPolyhedronShape, Vertices) == 0x0000F0, "Member 'FNikki_ConvexPolyhedronShape::Vertices' has a wrong offset!");
static_assert(offsetof(FNikki_ConvexPolyhedronShape, Indices) == 0x000100, "Member 'FNikki_ConvexPolyhedronShape::Indices' has a wrong offset!");
static_assert(offsetof(FNikki_ConvexPolyhedronShape, Planes) == 0x000110, "Member 'FNikki_ConvexPolyhedronShape::Planes' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_PublicCollisionShape
// 0x0040 (0x0040 - 0x0000)
struct FNikki_PublicCollisionShape final
{
public:
	TArray<struct FNikki_SphereShape>             SphereElems;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_BoxShape>                BoxElems;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_CapsuleShape>            CapsuleElems;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_ConvexPolyhedronShape>   ConvexElems;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_PublicCollisionShape) == 0x000008, "Wrong alignment on FNikki_PublicCollisionShape");
static_assert(sizeof(FNikki_PublicCollisionShape) == 0x000040, "Wrong size on FNikki_PublicCollisionShape");
static_assert(offsetof(FNikki_PublicCollisionShape, SphereElems) == 0x000000, "Member 'FNikki_PublicCollisionShape::SphereElems' has a wrong offset!");
static_assert(offsetof(FNikki_PublicCollisionShape, BoxElems) == 0x000010, "Member 'FNikki_PublicCollisionShape::BoxElems' has a wrong offset!");
static_assert(offsetof(FNikki_PublicCollisionShape, CapsuleElems) == 0x000020, "Member 'FNikki_PublicCollisionShape::CapsuleElems' has a wrong offset!");
static_assert(offsetof(FNikki_PublicCollisionShape, ConvexElems) == 0x000030, "Member 'FNikki_PublicCollisionShape::ConvexElems' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_CollisionPrim_Sphere
// 0x0020 (0x0020 - 0x0000)
struct FNikki_CollisionPrim_Sphere final
{
public:
	int32                                         BoneIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_CollisionPrim_Sphere) == 0x000008, "Wrong alignment on FNikki_CollisionPrim_Sphere");
static_assert(sizeof(FNikki_CollisionPrim_Sphere) == 0x000020, "Wrong size on FNikki_CollisionPrim_Sphere");
static_assert(offsetof(FNikki_CollisionPrim_Sphere, BoneIndex) == 0x000000, "Member 'FNikki_CollisionPrim_Sphere::BoneIndex' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionPrim_Sphere, Radius) == 0x000004, "Member 'FNikki_CollisionPrim_Sphere::Radius' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionPrim_Sphere, Position) == 0x000008, "Member 'FNikki_CollisionPrim_Sphere::Position' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_CollisionPrim_Capsule
// 0x0040 (0x0040 - 0x0000)
struct FNikki_CollisionPrim_Capsule final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_CollisionPrim_Capsule) == 0x000008, "Wrong alignment on FNikki_CollisionPrim_Capsule");
static_assert(sizeof(FNikki_CollisionPrim_Capsule) == 0x000040, "Wrong size on FNikki_CollisionPrim_Capsule");
static_assert(offsetof(FNikki_CollisionPrim_Capsule, Point) == 0x000000, "Member 'FNikki_CollisionPrim_Capsule::Point' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionPrim_Capsule, Axis) == 0x000018, "Member 'FNikki_CollisionPrim_Capsule::Axis' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionPrim_Capsule, Length) == 0x000030, "Member 'FNikki_CollisionPrim_Capsule::Length' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionPrim_Capsule, Radius) == 0x000034, "Member 'FNikki_CollisionPrim_Capsule::Radius' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionPrim_Capsule, BoneIndex) == 0x000038, "Member 'FNikki_CollisionPrim_Capsule::BoneIndex' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_CollisionPrim_Box
// 0x0060 (0x0060 - 0x0000)
struct FNikki_CollisionPrim_Box final
{
public:
	struct FVector                                LocalPosition;                                     // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  LocalRotation;                                     // 0x0020(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HalfExtents;                                       // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_CollisionPrim_Box) == 0x000010, "Wrong alignment on FNikki_CollisionPrim_Box");
static_assert(sizeof(FNikki_CollisionPrim_Box) == 0x000060, "Wrong size on FNikki_CollisionPrim_Box");
static_assert(offsetof(FNikki_CollisionPrim_Box, LocalPosition) == 0x000000, "Member 'FNikki_CollisionPrim_Box::LocalPosition' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionPrim_Box, LocalRotation) == 0x000020, "Member 'FNikki_CollisionPrim_Box::LocalRotation' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionPrim_Box, HalfExtents) == 0x000040, "Member 'FNikki_CollisionPrim_Box::HalfExtents' has a wrong offset!");
static_assert(offsetof(FNikki_CollisionPrim_Box, BoneIndex) == 0x000058, "Member 'FNikki_CollisionPrim_Box::BoneIndex' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_ClothEnvCollisionData
// 0x0030 (0x0030 - 0x0000)
struct FNikki_ClothEnvCollisionData final
{
public:
	TArray<struct FNikki_CollisionPrim_Sphere>    Spheres;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_CollisionPrim_Capsule>   Capsules;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_CollisionPrim_Box>       Boxes;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_ClothEnvCollisionData) == 0x000008, "Wrong alignment on FNikki_ClothEnvCollisionData");
static_assert(sizeof(FNikki_ClothEnvCollisionData) == 0x000030, "Wrong size on FNikki_ClothEnvCollisionData");
static_assert(offsetof(FNikki_ClothEnvCollisionData, Spheres) == 0x000000, "Member 'FNikki_ClothEnvCollisionData::Spheres' has a wrong offset!");
static_assert(offsetof(FNikki_ClothEnvCollisionData, Capsules) == 0x000010, "Member 'FNikki_ClothEnvCollisionData::Capsules' has a wrong offset!");
static_assert(offsetof(FNikki_ClothEnvCollisionData, Boxes) == 0x000020, "Member 'FNikki_ClothEnvCollisionData::Boxes' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_HeightFieldCell
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FNikki_HeightFieldCell final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_HeightFieldCell) == 0x000008, "Wrong alignment on FNikki_HeightFieldCell");
static_assert(sizeof(FNikki_HeightFieldCell) == 0x000058, "Wrong size on FNikki_HeightFieldCell");

// ScriptStruct NikkiPhysics.Nikki_HeightField
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FNikki_HeightField final
{
public:
	int32                                         NumRow;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCol;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtentRow;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtentCol;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RayCastUpperThreshold;                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayCastLowerThreshold;                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForcePushDist;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFieldFriction;                               // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRayCastPerFrame;                                // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x3C];                                      // 0x002C(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_HeightField) == 0x000008, "Wrong alignment on FNikki_HeightField");
static_assert(sizeof(FNikki_HeightField) == 0x000068, "Wrong size on FNikki_HeightField");
static_assert(offsetof(FNikki_HeightField, NumRow) == 0x000000, "Member 'FNikki_HeightField::NumRow' has a wrong offset!");
static_assert(offsetof(FNikki_HeightField, NumCol) == 0x000004, "Member 'FNikki_HeightField::NumCol' has a wrong offset!");
static_assert(offsetof(FNikki_HeightField, ExtentRow) == 0x000008, "Member 'FNikki_HeightField::ExtentRow' has a wrong offset!");
static_assert(offsetof(FNikki_HeightField, ExtentCol) == 0x00000C, "Member 'FNikki_HeightField::ExtentCol' has a wrong offset!");
static_assert(offsetof(FNikki_HeightField, RayCastUpperThreshold) == 0x000018, "Member 'FNikki_HeightField::RayCastUpperThreshold' has a wrong offset!");
static_assert(offsetof(FNikki_HeightField, RayCastLowerThreshold) == 0x00001C, "Member 'FNikki_HeightField::RayCastLowerThreshold' has a wrong offset!");
static_assert(offsetof(FNikki_HeightField, ForcePushDist) == 0x000020, "Member 'FNikki_HeightField::ForcePushDist' has a wrong offset!");
static_assert(offsetof(FNikki_HeightField, HeightFieldFriction) == 0x000024, "Member 'FNikki_HeightField::HeightFieldFriction' has a wrong offset!");
static_assert(offsetof(FNikki_HeightField, NumRayCastPerFrame) == 0x000028, "Member 'FNikki_HeightField::NumRayCastPerFrame' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_HeighiFieldMap
// 0x0018 (0x0018 - 0x0000)
struct FNikki_HeighiFieldMap final
{
public:
	int32                                         SampleDelta;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpOffsetHeight;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KineticFriction;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckChainRootHeight;                             // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightFieldSoftThreshold;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFieldSoftFactor;                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_HeighiFieldMap) == 0x000004, "Wrong alignment on FNikki_HeighiFieldMap");
static_assert(sizeof(FNikki_HeighiFieldMap) == 0x000018, "Wrong size on FNikki_HeighiFieldMap");
static_assert(offsetof(FNikki_HeighiFieldMap, SampleDelta) == 0x000000, "Member 'FNikki_HeighiFieldMap::SampleDelta' has a wrong offset!");
static_assert(offsetof(FNikki_HeighiFieldMap, UpOffsetHeight) == 0x000004, "Member 'FNikki_HeighiFieldMap::UpOffsetHeight' has a wrong offset!");
static_assert(offsetof(FNikki_HeighiFieldMap, KineticFriction) == 0x000008, "Member 'FNikki_HeighiFieldMap::KineticFriction' has a wrong offset!");
static_assert(offsetof(FNikki_HeighiFieldMap, bCheckChainRootHeight) == 0x00000C, "Member 'FNikki_HeighiFieldMap::bCheckChainRootHeight' has a wrong offset!");
static_assert(offsetof(FNikki_HeighiFieldMap, HeightFieldSoftThreshold) == 0x000010, "Member 'FNikki_HeighiFieldMap::HeightFieldSoftThreshold' has a wrong offset!");
static_assert(offsetof(FNikki_HeighiFieldMap, HeightFieldSoftFactor) == 0x000014, "Member 'FNikki_HeighiFieldMap::HeightFieldSoftFactor' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_WindSource
// 0x0028 (0x0028 - 0x0000)
struct FNikki_WindSource final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGustAmount;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGustAmount;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_WindSource) == 0x000008, "Wrong alignment on FNikki_WindSource");
static_assert(sizeof(FNikki_WindSource) == 0x000028, "Wrong size on FNikki_WindSource");
static_assert(offsetof(FNikki_WindSource, Direction) == 0x000000, "Member 'FNikki_WindSource::Direction' has a wrong offset!");
static_assert(offsetof(FNikki_WindSource, Speed) == 0x000018, "Member 'FNikki_WindSource::Speed' has a wrong offset!");
static_assert(offsetof(FNikki_WindSource, Strength) == 0x00001C, "Member 'FNikki_WindSource::Strength' has a wrong offset!");
static_assert(offsetof(FNikki_WindSource, MinGustAmount) == 0x000020, "Member 'FNikki_WindSource::MinGustAmount' has a wrong offset!");
static_assert(offsetof(FNikki_WindSource, MaxGustAmount) == 0x000024, "Member 'FNikki_WindSource::MaxGustAmount' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_WindWave
// 0x0014 (0x0014 - 0x0000)
struct FNikki_WindWave final
{
public:
	float                                         SinFrequency;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseFrequency;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseSize;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveSize;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindForceCoeff;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_WindWave) == 0x000004, "Wrong alignment on FNikki_WindWave");
static_assert(sizeof(FNikki_WindWave) == 0x000014, "Wrong size on FNikki_WindWave");
static_assert(offsetof(FNikki_WindWave, SinFrequency) == 0x000000, "Member 'FNikki_WindWave::SinFrequency' has a wrong offset!");
static_assert(offsetof(FNikki_WindWave, NoiseFrequency) == 0x000004, "Member 'FNikki_WindWave::NoiseFrequency' has a wrong offset!");
static_assert(offsetof(FNikki_WindWave, NoiseSize) == 0x000008, "Member 'FNikki_WindWave::NoiseSize' has a wrong offset!");
static_assert(offsetof(FNikki_WindWave, WaveSize) == 0x00000C, "Member 'FNikki_WindWave::WaveSize' has a wrong offset!");
static_assert(offsetof(FNikki_WindWave, WindForceCoeff) == 0x000010, "Member 'FNikki_WindWave::WindForceCoeff' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_WindPara
// 0x0034 (0x0034 - 0x0000)
struct FNikki_WindPara final
{
public:
	float                                         Influence;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frequency;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Turbulence;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseBlend;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Synchronization;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthWeight;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingWindInfluence;                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseWindSpeed;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNikki_WindWave                        WaveConfig;                                        // 0x0020(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_WindPara) == 0x000004, "Wrong alignment on FNikki_WindPara");
static_assert(sizeof(FNikki_WindPara) == 0x000034, "Wrong size on FNikki_WindPara");
static_assert(offsetof(FNikki_WindPara, Influence) == 0x000000, "Member 'FNikki_WindPara::Influence' has a wrong offset!");
static_assert(offsetof(FNikki_WindPara, Frequency) == 0x000004, "Member 'FNikki_WindPara::Frequency' has a wrong offset!");
static_assert(offsetof(FNikki_WindPara, Turbulence) == 0x000008, "Member 'FNikki_WindPara::Turbulence' has a wrong offset!");
static_assert(offsetof(FNikki_WindPara, NoiseBlend) == 0x00000C, "Member 'FNikki_WindPara::NoiseBlend' has a wrong offset!");
static_assert(offsetof(FNikki_WindPara, Synchronization) == 0x000010, "Member 'FNikki_WindPara::Synchronization' has a wrong offset!");
static_assert(offsetof(FNikki_WindPara, DepthWeight) == 0x000014, "Member 'FNikki_WindPara::DepthWeight' has a wrong offset!");
static_assert(offsetof(FNikki_WindPara, MovingWindInfluence) == 0x000018, "Member 'FNikki_WindPara::MovingWindInfluence' has a wrong offset!");
static_assert(offsetof(FNikki_WindPara, BaseWindSpeed) == 0x00001C, "Member 'FNikki_WindPara::BaseWindSpeed' has a wrong offset!");
static_assert(offsetof(FNikki_WindPara, WaveConfig) == 0x000020, "Member 'FNikki_WindPara::WaveConfig' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_LODLevel
// 0x0028 (0x0028 - 0x0000)
struct FNikki_LODLevel final
{
public:
	TArray<bool>                                  ChainSetting;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SolverFrameRate;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalShapeCoeff;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalShapeCoeff;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirDampingCoeff;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindCoeff;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFixInRenderStep;                            // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_LODLevel) == 0x000008, "Wrong alignment on FNikki_LODLevel");
static_assert(sizeof(FNikki_LODLevel) == 0x000028, "Wrong size on FNikki_LODLevel");
static_assert(offsetof(FNikki_LODLevel, ChainSetting) == 0x000000, "Member 'FNikki_LODLevel::ChainSetting' has a wrong offset!");
static_assert(offsetof(FNikki_LODLevel, SolverFrameRate) == 0x000010, "Member 'FNikki_LODLevel::SolverFrameRate' has a wrong offset!");
static_assert(offsetof(FNikki_LODLevel, GlobalShapeCoeff) == 0x000014, "Member 'FNikki_LODLevel::GlobalShapeCoeff' has a wrong offset!");
static_assert(offsetof(FNikki_LODLevel, LocalShapeCoeff) == 0x000018, "Member 'FNikki_LODLevel::LocalShapeCoeff' has a wrong offset!");
static_assert(offsetof(FNikki_LODLevel, AirDampingCoeff) == 0x00001C, "Member 'FNikki_LODLevel::AirDampingCoeff' has a wrong offset!");
static_assert(offsetof(FNikki_LODLevel, WindCoeff) == 0x000020, "Member 'FNikki_LODLevel::WindCoeff' has a wrong offset!");
static_assert(offsetof(FNikki_LODLevel, bEnableFixInRenderStep) == 0x000024, "Member 'FNikki_LODLevel::bEnableFixInRenderStep' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_LODSettings
// 0x0010 (0x0010 - 0x0000)
struct FNikki_LODSettings final
{
public:
	TArray<struct FNikki_LODLevel>                LodLevels;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_LODSettings) == 0x000008, "Wrong alignment on FNikki_LODSettings");
static_assert(sizeof(FNikki_LODSettings) == 0x000010, "Wrong size on FNikki_LODSettings");
static_assert(offsetof(FNikki_LODSettings, LodLevels) == 0x000000, "Member 'FNikki_LODSettings::LodLevels' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_Particle
// 0x0390 (0x0390 - 0x0000)
struct alignas(0x10) FNikki_Particle final
{
public:
	struct FBoneReference                         BoneRef;                                           // 0x0000(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	ENikki_ParticleType                           Type;                                              // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VirtualTPosePos_BoneSpace;                         // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TPoseNorm_BoneSpace;                               // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDamping;                                     // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDamping;                                    // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalShapeStiffness;                              // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalShapeStiffness;                               // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVelocity;                                       // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHalfAngleSin2;                                  // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShapeInertia;                                      // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinShapeInertia;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalRootVelocityCheck;                         // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirDamping;                                        // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthStiffness;                                   // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongRangeStiffness;                                // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongRangeScale;                                    // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendingStiffness;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimDriveStiffness;                                // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNikkiParticle_BackstopConstraint      BackstopData;                                      // 0x0094(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FNikkiParticle_MaxDistConstraintData   MaxDistConData;                                    // 0x00A0(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WindInfluence;                                     // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MaintainSideCapGuid;                               // 0x00AC(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaintainSideSphereRadius;                          // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaintainSideSphereDist;                            // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LayerBindParticleIndices;                          // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LayerSphereRadius;                                 // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerSphereDist;                                   // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SkinBoneNames;                                     // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SkinBoneWeights;                                   // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ENikki_ParticleColliderType                   ColliderType;                                      // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x28F];                                    // 0x0101(0x028F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_Particle) == 0x000010, "Wrong alignment on FNikki_Particle");
static_assert(sizeof(FNikki_Particle) == 0x000390, "Wrong size on FNikki_Particle");
static_assert(offsetof(FNikki_Particle, BoneRef) == 0x000000, "Member 'FNikki_Particle::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, Type) == 0x000010, "Member 'FNikki_Particle::Type' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, VirtualTPosePos_BoneSpace) == 0x000018, "Member 'FNikki_Particle::VirtualTPosePos_BoneSpace' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, TPoseNorm_BoneSpace) == 0x000030, "Member 'FNikki_Particle::TPoseNorm_BoneSpace' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, Radius) == 0x000048, "Member 'FNikki_Particle::Radius' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, Thickness) == 0x00004C, "Member 'FNikki_Particle::Thickness' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, Mass) == 0x000050, "Member 'FNikki_Particle::Mass' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, LinearDamping) == 0x000054, "Member 'FNikki_Particle::LinearDamping' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, AngularDamping) == 0x000058, "Member 'FNikki_Particle::AngularDamping' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, GlobalShapeStiffness) == 0x00005C, "Member 'FNikki_Particle::GlobalShapeStiffness' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, LocalShapeStiffness) == 0x000060, "Member 'FNikki_Particle::LocalShapeStiffness' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, MaxVelocity) == 0x000064, "Member 'FNikki_Particle::MaxVelocity' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, MaxAngle) == 0x000068, "Member 'FNikki_Particle::MaxAngle' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, MaxHalfAngleSin2) == 0x00006C, "Member 'FNikki_Particle::MaxHalfAngleSin2' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, ShapeInertia) == 0x000070, "Member 'FNikki_Particle::ShapeInertia' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, MinShapeInertia) == 0x000074, "Member 'FNikki_Particle::MinShapeInertia' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, CriticalRootVelocityCheck) == 0x000078, "Member 'FNikki_Particle::CriticalRootVelocityCheck' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, AirDamping) == 0x00007C, "Member 'FNikki_Particle::AirDamping' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, LengthStiffness) == 0x000080, "Member 'FNikki_Particle::LengthStiffness' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, LongRangeStiffness) == 0x000084, "Member 'FNikki_Particle::LongRangeStiffness' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, LongRangeScale) == 0x000088, "Member 'FNikki_Particle::LongRangeScale' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, BendingStiffness) == 0x00008C, "Member 'FNikki_Particle::BendingStiffness' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, AnimDriveStiffness) == 0x000090, "Member 'FNikki_Particle::AnimDriveStiffness' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, BackstopData) == 0x000094, "Member 'FNikki_Particle::BackstopData' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, MaxDistConData) == 0x0000A0, "Member 'FNikki_Particle::MaxDistConData' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, WindInfluence) == 0x0000A8, "Member 'FNikki_Particle::WindInfluence' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, MaintainSideCapGuid) == 0x0000AC, "Member 'FNikki_Particle::MaintainSideCapGuid' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, MaintainSideSphereRadius) == 0x0000BC, "Member 'FNikki_Particle::MaintainSideSphereRadius' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, MaintainSideSphereDist) == 0x0000C0, "Member 'FNikki_Particle::MaintainSideSphereDist' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, LayerBindParticleIndices) == 0x0000C8, "Member 'FNikki_Particle::LayerBindParticleIndices' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, LayerSphereRadius) == 0x0000D8, "Member 'FNikki_Particle::LayerSphereRadius' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, LayerSphereDist) == 0x0000DC, "Member 'FNikki_Particle::LayerSphereDist' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, SkinBoneNames) == 0x0000E0, "Member 'FNikki_Particle::SkinBoneNames' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, SkinBoneWeights) == 0x0000F0, "Member 'FNikki_Particle::SkinBoneWeights' has a wrong offset!");
static_assert(offsetof(FNikki_Particle, ColliderType) == 0x000100, "Member 'FNikki_Particle::ColliderType' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_ParticleConfig
// 0x0001 (0x0001 - 0x0000)
struct FNikki_ParticleConfig final
{
public:
	bool                                          bEnableThickness;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_ParticleConfig) == 0x000001, "Wrong alignment on FNikki_ParticleConfig");
static_assert(sizeof(FNikki_ParticleConfig) == 0x000001, "Wrong size on FNikki_ParticleConfig");
static_assert(offsetof(FNikki_ParticleConfig, bEnableThickness) == 0x000000, "Member 'FNikki_ParticleConfig::bEnableThickness' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_Spring
// 0x0014 (0x0014 - 0x0000)
struct FNikki_Spring final
{
public:
	int32                                         ParticleIndex_A;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndex_B;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_SpringType                             SpringType;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Stiffness;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x4];                                       // 0x0010(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_Spring) == 0x000004, "Wrong alignment on FNikki_Spring");
static_assert(sizeof(FNikki_Spring) == 0x000014, "Wrong size on FNikki_Spring");
static_assert(offsetof(FNikki_Spring, ParticleIndex_A) == 0x000000, "Member 'FNikki_Spring::ParticleIndex_A' has a wrong offset!");
static_assert(offsetof(FNikki_Spring, ParticleIndex_B) == 0x000004, "Member 'FNikki_Spring::ParticleIndex_B' has a wrong offset!");
static_assert(offsetof(FNikki_Spring, SpringType) == 0x000008, "Member 'FNikki_Spring::SpringType' has a wrong offset!");
static_assert(offsetof(FNikki_Spring, Stiffness) == 0x00000C, "Member 'FNikki_Spring::Stiffness' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_Chain
// 0x0048 (0x0048 - 0x0000)
struct FNikki_Chain final
{
public:
	int32                                         RootParticleIndex;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRootVelocity;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ParticleIndices;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          bEnableDirCorrection;                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighLight;                                        // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAxisConstraint;                             // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ConstraintAxis;                                    // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixRotationWithTPose;                             // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0xF];                                       // 0x0039(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_Chain) == 0x000008, "Wrong alignment on FNikki_Chain");
static_assert(sizeof(FNikki_Chain) == 0x000048, "Wrong size on FNikki_Chain");
static_assert(offsetof(FNikki_Chain, RootParticleIndex) == 0x000000, "Member 'FNikki_Chain::RootParticleIndex' has a wrong offset!");
static_assert(offsetof(FNikki_Chain, MaxRootVelocity) == 0x000004, "Member 'FNikki_Chain::MaxRootVelocity' has a wrong offset!");
static_assert(offsetof(FNikki_Chain, ParticleIndices) == 0x000008, "Member 'FNikki_Chain::ParticleIndices' has a wrong offset!");
static_assert(offsetof(FNikki_Chain, bEnableDirCorrection) == 0x000018, "Member 'FNikki_Chain::bEnableDirCorrection' has a wrong offset!");
static_assert(offsetof(FNikki_Chain, bHighLight) == 0x000019, "Member 'FNikki_Chain::bHighLight' has a wrong offset!");
static_assert(offsetof(FNikki_Chain, bEnableAxisConstraint) == 0x00001A, "Member 'FNikki_Chain::bEnableAxisConstraint' has a wrong offset!");
static_assert(offsetof(FNikki_Chain, ConstraintAxis) == 0x000020, "Member 'FNikki_Chain::ConstraintAxis' has a wrong offset!");
static_assert(offsetof(FNikki_Chain, bFixRotationWithTPose) == 0x000038, "Member 'FNikki_Chain::bFixRotationWithTPose' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_Part
// 0x01C8 (0x01C8 - 0x0000)
struct FNikki_Part final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartName;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNikki_Chain>                   Chains;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_Spring>                  Springs;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          ColWithCapsuleGuids;                               // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          ColWithPlaneGuids;                                 // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          ColWithPrivatePartGuids;                           // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ENikki_ClothType>                      ColWithPublicClothTypes;                           // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ColWithHeightField;                                // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNikki_MeshCollider                    MeshCollider;                                      // 0x0088(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FNikki_PublicCollisionShape            PublicShapes;                                      // 0x0118(0x0040)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x70];                                     // 0x0158(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_Part) == 0x000008, "Wrong alignment on FNikki_Part");
static_assert(sizeof(FNikki_Part) == 0x0001C8, "Wrong size on FNikki_Part");
static_assert(offsetof(FNikki_Part, Guid) == 0x000000, "Member 'FNikki_Part::Guid' has a wrong offset!");
static_assert(offsetof(FNikki_Part, PartName) == 0x000010, "Member 'FNikki_Part::PartName' has a wrong offset!");
static_assert(offsetof(FNikki_Part, Chains) == 0x000020, "Member 'FNikki_Part::Chains' has a wrong offset!");
static_assert(offsetof(FNikki_Part, Springs) == 0x000030, "Member 'FNikki_Part::Springs' has a wrong offset!");
static_assert(offsetof(FNikki_Part, ColWithCapsuleGuids) == 0x000040, "Member 'FNikki_Part::ColWithCapsuleGuids' has a wrong offset!");
static_assert(offsetof(FNikki_Part, ColWithPlaneGuids) == 0x000050, "Member 'FNikki_Part::ColWithPlaneGuids' has a wrong offset!");
static_assert(offsetof(FNikki_Part, ColWithPrivatePartGuids) == 0x000060, "Member 'FNikki_Part::ColWithPrivatePartGuids' has a wrong offset!");
static_assert(offsetof(FNikki_Part, ColWithPublicClothTypes) == 0x000070, "Member 'FNikki_Part::ColWithPublicClothTypes' has a wrong offset!");
static_assert(offsetof(FNikki_Part, ColWithHeightField) == 0x000080, "Member 'FNikki_Part::ColWithHeightField' has a wrong offset!");
static_assert(offsetof(FNikki_Part, MeshCollider) == 0x000088, "Member 'FNikki_Part::MeshCollider' has a wrong offset!");
static_assert(offsetof(FNikki_Part, PublicShapes) == 0x000118, "Member 'FNikki_Part::PublicShapes' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_Cloth
// 0x0800 (0x0800 - 0x0000)
struct alignas(0x10) FNikki_Cloth final
{
public:
	class FString                                 ClothName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_ClothType                              Type;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FormatVersion;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNikki_CapsuleCollider>         PrivateCapsuleColliders;                           // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_PlaneCollider>           PrivatePlaneColliders;                             // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_Particle>                Particles;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_Part>                    Parts;                                             // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x6D0];                                     // 0x0068(0x06D0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ParticleAnimWeights;                               // 0x0738(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_748[0xB8];                                     // 0x0748(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_Cloth) == 0x000010, "Wrong alignment on FNikki_Cloth");
static_assert(sizeof(FNikki_Cloth) == 0x000800, "Wrong size on FNikki_Cloth");
static_assert(offsetof(FNikki_Cloth, ClothName) == 0x000000, "Member 'FNikki_Cloth::ClothName' has a wrong offset!");
static_assert(offsetof(FNikki_Cloth, Guid) == 0x000010, "Member 'FNikki_Cloth::Guid' has a wrong offset!");
static_assert(offsetof(FNikki_Cloth, Type) == 0x000020, "Member 'FNikki_Cloth::Type' has a wrong offset!");
static_assert(offsetof(FNikki_Cloth, FormatVersion) == 0x000024, "Member 'FNikki_Cloth::FormatVersion' has a wrong offset!");
static_assert(offsetof(FNikki_Cloth, PrivateCapsuleColliders) == 0x000028, "Member 'FNikki_Cloth::PrivateCapsuleColliders' has a wrong offset!");
static_assert(offsetof(FNikki_Cloth, PrivatePlaneColliders) == 0x000038, "Member 'FNikki_Cloth::PrivatePlaneColliders' has a wrong offset!");
static_assert(offsetof(FNikki_Cloth, Particles) == 0x000048, "Member 'FNikki_Cloth::Particles' has a wrong offset!");
static_assert(offsetof(FNikki_Cloth, Parts) == 0x000058, "Member 'FNikki_Cloth::Parts' has a wrong offset!");
static_assert(offsetof(FNikki_Cloth, ParticleAnimWeights) == 0x000738, "Member 'FNikki_Cloth::ParticleAnimWeights' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_ProxySimulateSystem
// 0x0250 (0x0250 - 0x0000)
struct alignas(0x10) FNikki_ProxySimulateSystem final
{
public:
	bool                                          bByChain;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         BoneRef;                                           // 0x0004(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GravityVector;                                     // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityStiffness;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShapeStiffness;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngleToAnim;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDamping;                                     // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearMaxVel;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x208];                                     // 0x0048(0x0208)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_ProxySimulateSystem) == 0x000010, "Wrong alignment on FNikki_ProxySimulateSystem");
static_assert(sizeof(FNikki_ProxySimulateSystem) == 0x000250, "Wrong size on FNikki_ProxySimulateSystem");
static_assert(offsetof(FNikki_ProxySimulateSystem, bByChain) == 0x000000, "Member 'FNikki_ProxySimulateSystem::bByChain' has a wrong offset!");
static_assert(offsetof(FNikki_ProxySimulateSystem, BoneRef) == 0x000004, "Member 'FNikki_ProxySimulateSystem::BoneRef' has a wrong offset!");
static_assert(offsetof(FNikki_ProxySimulateSystem, GravityVector) == 0x000018, "Member 'FNikki_ProxySimulateSystem::GravityVector' has a wrong offset!");
static_assert(offsetof(FNikki_ProxySimulateSystem, GravityStiffness) == 0x000030, "Member 'FNikki_ProxySimulateSystem::GravityStiffness' has a wrong offset!");
static_assert(offsetof(FNikki_ProxySimulateSystem, ShapeStiffness) == 0x000034, "Member 'FNikki_ProxySimulateSystem::ShapeStiffness' has a wrong offset!");
static_assert(offsetof(FNikki_ProxySimulateSystem, MaxAngleToAnim) == 0x000038, "Member 'FNikki_ProxySimulateSystem::MaxAngleToAnim' has a wrong offset!");
static_assert(offsetof(FNikki_ProxySimulateSystem, Damping) == 0x00003C, "Member 'FNikki_ProxySimulateSystem::Damping' has a wrong offset!");
static_assert(offsetof(FNikki_ProxySimulateSystem, LinearDamping) == 0x000040, "Member 'FNikki_ProxySimulateSystem::LinearDamping' has a wrong offset!");
static_assert(offsetof(FNikki_ProxySimulateSystem, LinearMaxVel) == 0x000044, "Member 'FNikki_ProxySimulateSystem::LinearMaxVel' has a wrong offset!");

// ScriptStruct NikkiPhysics.AnimNode_NikkiPhysics
// 0x1128 (0x11F0 - 0x00C8)
struct FAnimNode_NikkiPhysics final : public FAnimNode_SkeletalControlBase
{
public:
	class FString                                 PartName;                                          // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNikki_Cloth                           NikkiCloth;                                        // 0x00E0(0x0800)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UNikkiPhysicsSettings*                  NikkiPhysicsSettings;                              // 0x08E0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableNikkiPhysics;                                // 0x08E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_SolverType                             SolverType;                                        // 0x08E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitWithTPose;                                    // 0x08EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachment;                                       // 0x08EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8EC[0x64];                                     // 0x08EC(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkinPoseAlpha;                                     // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameRate;                                         // 0x0954(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStepNumOneFrame;                                // 0x0958(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreDoStepTimes;                                    // 0x095C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x0960(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_SpaceType                              GravityType;                                       // 0x0978(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddExternalAcc;                                    // 0x0979(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_SpaceType                              AccSpace;                                          // 0x097A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_97B[0x5];                                      // 0x097B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ExternalAcc;                                       // 0x0980(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerPlatformInt                        MinLOD;                                            // 0x0998(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_99C[0x4];                                      // 0x099C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNikki_LODSettings                     LODs;                                              // 0x09A0(0x0010)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B0[0x14];                                     // 0x09B0(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	ENikki_SimSpaceType                           RuntimeRefSpace;                                   // 0x09C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_SimSpaceType                           ReferenceSpace;                                    // 0x09C5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C6[0x2];                                      // 0x09C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         SpecificBone;                                      // 0x09C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D8[0xC8];                                     // 0x09D8(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         RootBone;                                          // 0x0AA0(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB0[0xC1];                                     // 0x0AB0(0x00C1)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bLongRangeConstraint;                              // 0x0B71(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBendingConstraint;                                // 0x0B72(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimDriveConstraint;                              // 0x0B73(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableShapeConstraint;                            // 0x0B74(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B75[0x3];                                      // 0x0B75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StepNum;                                           // 0x0B78(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_ShapeMethod                            ShapeMethod;                                       // 0x0B7C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B7D[0x3];                                      // 0x0B7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotCenterRatio;                                    // 0x0B80(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicRotAttenuation;                             // 0x0B84(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FixShapeAttenuation;                               // 0x0B88(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableShapeInertia;                                // 0x0B8C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8D[0x3];                                      // 0x0B8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShapeApplyLimit;                                   // 0x0B90(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableMaxAngleConstraint;                          // 0x0B94(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSpring;                                      // 0x0B95(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLenCorrection;                               // 0x0B96(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_LengthConstraintType                   LengthConsMethod;                                  // 0x0B97(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthStiffness;                                   // 0x0B98(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_RotCorrectRef                          RotationCorrectionMethod;                          // 0x0B9C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9D[0x3];                                      // 0x0B9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RootBoneRotUpdateRatio;                            // 0x0BA0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_HumanColMethod                         HumanCollisionMethod;                              // 0x0BA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA5[0x3];                                      // 0x0BA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleCollisionRange;                             // 0x0BA8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_CapColMethod                           CapsulePushMethod;                                 // 0x0BAC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BAD[0x3];                                      // 0x0BAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BindDirAndNormalBlendAlpha;                        // 0x0BB0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalBindDirRotRatio;                           // 0x0BB4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinStaticContactRadius;                            // 0x0BB8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCapsuleSphereCheck;                         // 0x0BBC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCapsuleSphereCheckInSpring;                 // 0x0BBD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWeightedCollision;                          // 0x0BBE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePlaneCollision;                             // 0x0BBF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePartSelfCollision;                          // 0x0BC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFaceNormal;                                    // 0x0BC1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLayerConstraint;                            // 0x0BC2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNikki_ParticleConfig                  ParticleConfig;                                    // 0x0BC3(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ENikki_HeightFieldMethod                      HeightFieldMethod;                                 // 0x0BC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC5[0x3];                                      // 0x0BC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNikki_HeightField                     NikkiHeightField;                                  // 0x0BC8(0x0068)(Edit, NativeAccessSpecifierPublic)
	struct FNikki_HeighiFieldMap                  NikkiHeightFieldMap;                               // 0x0C30(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          EnableCollisionFriction;                           // 0x0C48(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C49[0x3];                                      // 0x0C49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaticFriction;                                    // 0x0C4C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KineticFriction;                                   // 0x0C50(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableAnimInfClamp;                                // 0x0C54(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C55[0x3];                                      // 0x0C55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         AnimMainBone;                                      // 0x0C58(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C68[0x80];                                     // 0x0C68(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAnimVelocity;                                   // 0x0CE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimLinearDamping;                                 // 0x0CEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAnimRotVel;                                     // 0x0CF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimAngularDamping;                                // 0x0CF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWorldMovementVelocity;                          // 0x0CF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWorldRotationVelocity;                          // 0x0CFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxParticleVelocity;                               // 0x0D00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableProxySim;                                    // 0x0D04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D05[0xB];                                      // 0x0D05(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNikki_ProxySimulateSystem             Sim;                                               // 0x0D10(0x0250)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableBlendAnimPose;                              // 0x0F60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_LayeredBoneBlendMode                   BlendMode;                                         // 0x0F61(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F62[0x2];                                      // 0x0F62(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AnimPoseIndex;                                     // 0x0F64(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F68[0x8];                                      // 0x0F68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBlendProfile*>                  BlendMasks;                                        // 0x0F70(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FInputBlendPose>                LayerSetup;                                        // 0x0F80(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPerBoneBlendWeight>            PerBoneBlendWeights;                               // 0x0F90(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  SkeletonGuid;                                      // 0x0FA0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  VirtualSkeletonGuid;                               // 0x0FB0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x0FC0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC1[0x3];                                      // 0x0FC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNikki_WindPara                        WindPara;                                          // 0x0FC4(0x0034)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF8[0x40];                                     // 0x0FF8(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindStrength;                                      // 0x1038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCentrifugalforce;                           // 0x103C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugWindSource;                                  // 0x103D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103E[0x2];                                     // 0x103E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNikki_WindSource                      DebugWindSource;                                   // 0x1040(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDebugAddVelocity;                                 // 0x1068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1069[0x7];                                     // 0x1069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNikki_DebugAddVelocity                AddVelocitySetting;                                // 0x1070(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bControlGlobalShape;                               // 0x1090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1091[0x3];                                     // 0x1091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControledGlobalShape;                              // 0x1094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlLocalShape;                                // 0x1098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1099[0x3];                                     // 0x1099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControledLocalShape;                               // 0x109C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlAirDamping;                                // 0x10A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A1[0x3];                                     // 0x10A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControledAirDamping;                               // 0x10A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugInfo;                                        // 0x10A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFixStep;                                    // 0x10A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x10AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawAllCloth;                                     // 0x10AB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawBones;                                        // 0x10AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawParticles;                                    // 0x10AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawThickness;                                    // 0x10AE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawSprings;                                      // 0x10AF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawCapsules;                                     // 0x10B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawNormals;                                      // 0x10B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawAnimationPose;                                // 0x10B2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawBounds;                                       // 0x10B3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPublicCollisionInfo;                          // 0x10B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawMaintainSideSpheres;                          // 0x10B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawLayering;                                     // 0x10B6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawLayeringSpheres;                              // 0x10B7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawHeightField;                                  // 0x10B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawHeightFieldCollision;                         // 0x10B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawEnvironment;                                  // 0x10BA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawWind;                                         // 0x10BB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawBoneParticleInfo;                             // 0x10BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawProxySimulation;                              // 0x10BD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10BE[0x2];                                     // 0x10BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DrawBoneParticleNames;                             // 0x10C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D0[0x120];                                   // 0x10D0(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NikkiPhysics) == 0x000010, "Wrong alignment on FAnimNode_NikkiPhysics");
static_assert(sizeof(FAnimNode_NikkiPhysics) == 0x0011F0, "Wrong size on FAnimNode_NikkiPhysics");
static_assert(offsetof(FAnimNode_NikkiPhysics, PartName) == 0x0000C8, "Member 'FAnimNode_NikkiPhysics::PartName' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, NikkiCloth) == 0x0000E0, "Member 'FAnimNode_NikkiPhysics::NikkiCloth' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, NikkiPhysicsSettings) == 0x0008E0, "Member 'FAnimNode_NikkiPhysics::NikkiPhysicsSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, EnableNikkiPhysics) == 0x0008E8, "Member 'FAnimNode_NikkiPhysics::EnableNikkiPhysics' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, SolverType) == 0x0008E9, "Member 'FAnimNode_NikkiPhysics::SolverType' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bInitWithTPose) == 0x0008EA, "Member 'FAnimNode_NikkiPhysics::bInitWithTPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bAttachment) == 0x0008EB, "Member 'FAnimNode_NikkiPhysics::bAttachment' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, SkinPoseAlpha) == 0x000950, "Member 'FAnimNode_NikkiPhysics::SkinPoseAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, FrameRate) == 0x000954, "Member 'FAnimNode_NikkiPhysics::FrameRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, MaxStepNumOneFrame) == 0x000958, "Member 'FAnimNode_NikkiPhysics::MaxStepNumOneFrame' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, PreDoStepTimes) == 0x00095C, "Member 'FAnimNode_NikkiPhysics::PreDoStepTimes' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, Gravity) == 0x000960, "Member 'FAnimNode_NikkiPhysics::Gravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, GravityType) == 0x000978, "Member 'FAnimNode_NikkiPhysics::GravityType' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, AddExternalAcc) == 0x000979, "Member 'FAnimNode_NikkiPhysics::AddExternalAcc' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, AccSpace) == 0x00097A, "Member 'FAnimNode_NikkiPhysics::AccSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, ExternalAcc) == 0x000980, "Member 'FAnimNode_NikkiPhysics::ExternalAcc' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, MinLOD) == 0x000998, "Member 'FAnimNode_NikkiPhysics::MinLOD' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, LODs) == 0x0009A0, "Member 'FAnimNode_NikkiPhysics::LODs' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, RuntimeRefSpace) == 0x0009C4, "Member 'FAnimNode_NikkiPhysics::RuntimeRefSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, ReferenceSpace) == 0x0009C5, "Member 'FAnimNode_NikkiPhysics::ReferenceSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, SpecificBone) == 0x0009C8, "Member 'FAnimNode_NikkiPhysics::SpecificBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, RootBone) == 0x000AA0, "Member 'FAnimNode_NikkiPhysics::RootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bLongRangeConstraint) == 0x000B71, "Member 'FAnimNode_NikkiPhysics::bLongRangeConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bBendingConstraint) == 0x000B72, "Member 'FAnimNode_NikkiPhysics::bBendingConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bAnimDriveConstraint) == 0x000B73, "Member 'FAnimNode_NikkiPhysics::bAnimDriveConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bEnableShapeConstraint) == 0x000B74, "Member 'FAnimNode_NikkiPhysics::bEnableShapeConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, StepNum) == 0x000B78, "Member 'FAnimNode_NikkiPhysics::StepNum' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, ShapeMethod) == 0x000B7C, "Member 'FAnimNode_NikkiPhysics::ShapeMethod' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, RotCenterRatio) == 0x000B80, "Member 'FAnimNode_NikkiPhysics::RotCenterRatio' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, DynamicRotAttenuation) == 0x000B84, "Member 'FAnimNode_NikkiPhysics::DynamicRotAttenuation' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, FixShapeAttenuation) == 0x000B88, "Member 'FAnimNode_NikkiPhysics::FixShapeAttenuation' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, EnableShapeInertia) == 0x000B8C, "Member 'FAnimNode_NikkiPhysics::EnableShapeInertia' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, ShapeApplyLimit) == 0x000B90, "Member 'FAnimNode_NikkiPhysics::ShapeApplyLimit' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, EnableMaxAngleConstraint) == 0x000B94, "Member 'FAnimNode_NikkiPhysics::EnableMaxAngleConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, EnableSpring) == 0x000B95, "Member 'FAnimNode_NikkiPhysics::EnableSpring' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, EnableLenCorrection) == 0x000B96, "Member 'FAnimNode_NikkiPhysics::EnableLenCorrection' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, LengthConsMethod) == 0x000B97, "Member 'FAnimNode_NikkiPhysics::LengthConsMethod' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, LengthStiffness) == 0x000B98, "Member 'FAnimNode_NikkiPhysics::LengthStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, RotationCorrectionMethod) == 0x000B9C, "Member 'FAnimNode_NikkiPhysics::RotationCorrectionMethod' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, RootBoneRotUpdateRatio) == 0x000BA0, "Member 'FAnimNode_NikkiPhysics::RootBoneRotUpdateRatio' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, HumanCollisionMethod) == 0x000BA4, "Member 'FAnimNode_NikkiPhysics::HumanCollisionMethod' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, CapsuleCollisionRange) == 0x000BA8, "Member 'FAnimNode_NikkiPhysics::CapsuleCollisionRange' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, CapsulePushMethod) == 0x000BAC, "Member 'FAnimNode_NikkiPhysics::CapsulePushMethod' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, BindDirAndNormalBlendAlpha) == 0x000BB0, "Member 'FAnimNode_NikkiPhysics::BindDirAndNormalBlendAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, CriticalBindDirRotRatio) == 0x000BB4, "Member 'FAnimNode_NikkiPhysics::CriticalBindDirRotRatio' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, MinStaticContactRadius) == 0x000BB8, "Member 'FAnimNode_NikkiPhysics::MinStaticContactRadius' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bEnableCapsuleSphereCheck) == 0x000BBC, "Member 'FAnimNode_NikkiPhysics::bEnableCapsuleSphereCheck' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bEnableCapsuleSphereCheckInSpring) == 0x000BBD, "Member 'FAnimNode_NikkiPhysics::bEnableCapsuleSphereCheckInSpring' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bEnableWeightedCollision) == 0x000BBE, "Member 'FAnimNode_NikkiPhysics::bEnableWeightedCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bEnablePlaneCollision) == 0x000BBF, "Member 'FAnimNode_NikkiPhysics::bEnablePlaneCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bEnablePartSelfCollision) == 0x000BC0, "Member 'FAnimNode_NikkiPhysics::bEnablePartSelfCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bUseFaceNormal) == 0x000BC1, "Member 'FAnimNode_NikkiPhysics::bUseFaceNormal' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bEnableLayerConstraint) == 0x000BC2, "Member 'FAnimNode_NikkiPhysics::bEnableLayerConstraint' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, ParticleConfig) == 0x000BC3, "Member 'FAnimNode_NikkiPhysics::ParticleConfig' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, HeightFieldMethod) == 0x000BC4, "Member 'FAnimNode_NikkiPhysics::HeightFieldMethod' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, NikkiHeightField) == 0x000BC8, "Member 'FAnimNode_NikkiPhysics::NikkiHeightField' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, NikkiHeightFieldMap) == 0x000C30, "Member 'FAnimNode_NikkiPhysics::NikkiHeightFieldMap' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, EnableCollisionFriction) == 0x000C48, "Member 'FAnimNode_NikkiPhysics::EnableCollisionFriction' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, StaticFriction) == 0x000C4C, "Member 'FAnimNode_NikkiPhysics::StaticFriction' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, KineticFriction) == 0x000C50, "Member 'FAnimNode_NikkiPhysics::KineticFriction' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, EnableAnimInfClamp) == 0x000C54, "Member 'FAnimNode_NikkiPhysics::EnableAnimInfClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, AnimMainBone) == 0x000C58, "Member 'FAnimNode_NikkiPhysics::AnimMainBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, MaxAnimVelocity) == 0x000CE8, "Member 'FAnimNode_NikkiPhysics::MaxAnimVelocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, AnimLinearDamping) == 0x000CEC, "Member 'FAnimNode_NikkiPhysics::AnimLinearDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, MaxAnimRotVel) == 0x000CF0, "Member 'FAnimNode_NikkiPhysics::MaxAnimRotVel' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, AnimAngularDamping) == 0x000CF4, "Member 'FAnimNode_NikkiPhysics::AnimAngularDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, MaxWorldMovementVelocity) == 0x000CF8, "Member 'FAnimNode_NikkiPhysics::MaxWorldMovementVelocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, MaxWorldRotationVelocity) == 0x000CFC, "Member 'FAnimNode_NikkiPhysics::MaxWorldRotationVelocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, MaxParticleVelocity) == 0x000D00, "Member 'FAnimNode_NikkiPhysics::MaxParticleVelocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, EnableProxySim) == 0x000D04, "Member 'FAnimNode_NikkiPhysics::EnableProxySim' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, Sim) == 0x000D10, "Member 'FAnimNode_NikkiPhysics::Sim' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bEnableBlendAnimPose) == 0x000F60, "Member 'FAnimNode_NikkiPhysics::bEnableBlendAnimPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, BlendMode) == 0x000F61, "Member 'FAnimNode_NikkiPhysics::BlendMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, AnimPoseIndex) == 0x000F64, "Member 'FAnimNode_NikkiPhysics::AnimPoseIndex' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, BlendMasks) == 0x000F70, "Member 'FAnimNode_NikkiPhysics::BlendMasks' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, LayerSetup) == 0x000F80, "Member 'FAnimNode_NikkiPhysics::LayerSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, PerBoneBlendWeights) == 0x000F90, "Member 'FAnimNode_NikkiPhysics::PerBoneBlendWeights' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, SkeletonGuid) == 0x000FA0, "Member 'FAnimNode_NikkiPhysics::SkeletonGuid' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, VirtualSkeletonGuid) == 0x000FB0, "Member 'FAnimNode_NikkiPhysics::VirtualSkeletonGuid' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bEnableWind) == 0x000FC0, "Member 'FAnimNode_NikkiPhysics::bEnableWind' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, WindPara) == 0x000FC4, "Member 'FAnimNode_NikkiPhysics::WindPara' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, WindStrength) == 0x001038, "Member 'FAnimNode_NikkiPhysics::WindStrength' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bEnableCentrifugalforce) == 0x00103C, "Member 'FAnimNode_NikkiPhysics::bEnableCentrifugalforce' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDebugWindSource) == 0x00103D, "Member 'FAnimNode_NikkiPhysics::bDebugWindSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, DebugWindSource) == 0x001040, "Member 'FAnimNode_NikkiPhysics::DebugWindSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDebugAddVelocity) == 0x001068, "Member 'FAnimNode_NikkiPhysics::bDebugAddVelocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, AddVelocitySetting) == 0x001070, "Member 'FAnimNode_NikkiPhysics::AddVelocitySetting' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bControlGlobalShape) == 0x001090, "Member 'FAnimNode_NikkiPhysics::bControlGlobalShape' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, ControledGlobalShape) == 0x001094, "Member 'FAnimNode_NikkiPhysics::ControledGlobalShape' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bControlLocalShape) == 0x001098, "Member 'FAnimNode_NikkiPhysics::bControlLocalShape' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, ControledLocalShape) == 0x00109C, "Member 'FAnimNode_NikkiPhysics::ControledLocalShape' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bControlAirDamping) == 0x0010A0, "Member 'FAnimNode_NikkiPhysics::bControlAirDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, ControledAirDamping) == 0x0010A4, "Member 'FAnimNode_NikkiPhysics::ControledAirDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDebugInfo) == 0x0010A8, "Member 'FAnimNode_NikkiPhysics::bDebugInfo' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bEnableFixStep) == 0x0010A9, "Member 'FAnimNode_NikkiPhysics::bEnableFixStep' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDebugDraw) == 0x0010AA, "Member 'FAnimNode_NikkiPhysics::bDebugDraw' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawAllCloth) == 0x0010AB, "Member 'FAnimNode_NikkiPhysics::bDrawAllCloth' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawBones) == 0x0010AC, "Member 'FAnimNode_NikkiPhysics::bDrawBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawParticles) == 0x0010AD, "Member 'FAnimNode_NikkiPhysics::bDrawParticles' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawThickness) == 0x0010AE, "Member 'FAnimNode_NikkiPhysics::bDrawThickness' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawSprings) == 0x0010AF, "Member 'FAnimNode_NikkiPhysics::bDrawSprings' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawCapsules) == 0x0010B0, "Member 'FAnimNode_NikkiPhysics::bDrawCapsules' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawNormals) == 0x0010B1, "Member 'FAnimNode_NikkiPhysics::bDrawNormals' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawAnimationPose) == 0x0010B2, "Member 'FAnimNode_NikkiPhysics::bDrawAnimationPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawBounds) == 0x0010B3, "Member 'FAnimNode_NikkiPhysics::bDrawBounds' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawPublicCollisionInfo) == 0x0010B4, "Member 'FAnimNode_NikkiPhysics::bDrawPublicCollisionInfo' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawMaintainSideSpheres) == 0x0010B5, "Member 'FAnimNode_NikkiPhysics::bDrawMaintainSideSpheres' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawLayering) == 0x0010B6, "Member 'FAnimNode_NikkiPhysics::bDrawLayering' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawLayeringSpheres) == 0x0010B7, "Member 'FAnimNode_NikkiPhysics::bDrawLayeringSpheres' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawHeightField) == 0x0010B8, "Member 'FAnimNode_NikkiPhysics::bDrawHeightField' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawHeightFieldCollision) == 0x0010B9, "Member 'FAnimNode_NikkiPhysics::bDrawHeightFieldCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawEnvironment) == 0x0010BA, "Member 'FAnimNode_NikkiPhysics::bDrawEnvironment' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawWind) == 0x0010BB, "Member 'FAnimNode_NikkiPhysics::bDrawWind' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawBoneParticleInfo) == 0x0010BC, "Member 'FAnimNode_NikkiPhysics::bDrawBoneParticleInfo' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, bDrawProxySimulation) == 0x0010BD, "Member 'FAnimNode_NikkiPhysics::bDrawProxySimulation' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPhysics, DrawBoneParticleNames) == 0x0010C0, "Member 'FAnimNode_NikkiPhysics::DrawBoneParticleNames' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_PoseDriverAxisBone
// 0x0040 (0x0040 - 0x0000)
struct FNikki_PoseDriverAxisBone final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RotAxisCompSpace;                                  // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_PoseDriverAxisBone) == 0x000008, "Wrong alignment on FNikki_PoseDriverAxisBone");
static_assert(sizeof(FNikki_PoseDriverAxisBone) == 0x000040, "Wrong size on FNikki_PoseDriverAxisBone");
static_assert(offsetof(FNikki_PoseDriverAxisBone, bone) == 0x000000, "Member 'FNikki_PoseDriverAxisBone::bone' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverAxisBone, RotAxisCompSpace) == 0x000010, "Member 'FNikki_PoseDriverAxisBone::RotAxisCompSpace' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_PoseDriverRefBone
// 0x0030 (0x0030 - 0x0000)
struct FNikki_PoseDriverRefBone final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoneDir;                                           // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNikki_PoseDriverRefBone) == 0x000008, "Wrong alignment on FNikki_PoseDriverRefBone");
static_assert(sizeof(FNikki_PoseDriverRefBone) == 0x000030, "Wrong size on FNikki_PoseDriverRefBone");
static_assert(offsetof(FNikki_PoseDriverRefBone, bone) == 0x000000, "Member 'FNikki_PoseDriverRefBone::bone' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverRefBone, BoneDir) == 0x000010, "Member 'FNikki_PoseDriverRefBone::BoneDir' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverRefBone, alpha) == 0x000028, "Member 'FNikki_PoseDriverRefBone::alpha' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverRefBone, StartAngle) == 0x00002C, "Member 'FNikki_PoseDriverRefBone::StartAngle' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_PoseDriverTargets
// 0x0128 (0x0128 - 0x0000)
struct FNikki_PoseDriverTargets final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoneDir;                                           // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalDir;                                         // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         ReferenceBone;                                     // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         SecondReferenceBone;                               // 0x0050(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RefBoneDir;                                        // 0x0060(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNikki_PoseDriverRefBone>       MultiReferenceBones;                               // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x90];                                      // 0x0098(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_PoseDriverTargets) == 0x000008, "Wrong alignment on FNikki_PoseDriverTargets");
static_assert(sizeof(FNikki_PoseDriverTargets) == 0x000128, "Wrong size on FNikki_PoseDriverTargets");
static_assert(offsetof(FNikki_PoseDriverTargets, bone) == 0x000000, "Member 'FNikki_PoseDriverTargets::bone' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverTargets, BoneDir) == 0x000010, "Member 'FNikki_PoseDriverTargets::BoneDir' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverTargets, NormalDir) == 0x000028, "Member 'FNikki_PoseDriverTargets::NormalDir' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverTargets, ReferenceBone) == 0x000040, "Member 'FNikki_PoseDriverTargets::ReferenceBone' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverTargets, SecondReferenceBone) == 0x000050, "Member 'FNikki_PoseDriverTargets::SecondReferenceBone' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverTargets, RefBoneDir) == 0x000060, "Member 'FNikki_PoseDriverTargets::RefBoneDir' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverTargets, StartAngle) == 0x000078, "Member 'FNikki_PoseDriverTargets::StartAngle' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverTargets, MaxAngle) == 0x00007C, "Member 'FNikki_PoseDriverTargets::MaxAngle' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverTargets, alpha) == 0x000080, "Member 'FNikki_PoseDriverTargets::alpha' has a wrong offset!");
static_assert(offsetof(FNikki_PoseDriverTargets, MultiReferenceBones) == 0x000088, "Member 'FNikki_PoseDriverTargets::MultiReferenceBones' has a wrong offset!");

// ScriptStruct NikkiPhysics.AnimNode_NikkiPoseDriver
// 0x00F0 (0x0100 - 0x0010)
struct alignas(0x10) FAnimNode_NikkiPoseDriver final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_PoseDriverType                         Method;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckComponentMovement;                           // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNikki_PoseDriverAxisBone              AxisBone;                                          // 0x0030(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FNikki_PoseDriverTargets>       ModifiedBones;                                     // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x80];                                      // 0x0080(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NikkiPoseDriver) == 0x000010, "Wrong alignment on FAnimNode_NikkiPoseDriver");
static_assert(sizeof(FAnimNode_NikkiPoseDriver) == 0x000100, "Wrong size on FAnimNode_NikkiPoseDriver");
static_assert(offsetof(FAnimNode_NikkiPoseDriver, Source) == 0x000010, "Member 'FAnimNode_NikkiPoseDriver::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPoseDriver, alpha) == 0x000020, "Member 'FAnimNode_NikkiPoseDriver::alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPoseDriver, Method) == 0x000024, "Member 'FAnimNode_NikkiPoseDriver::Method' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPoseDriver, bCheckComponentMovement) == 0x000028, "Member 'FAnimNode_NikkiPoseDriver::bCheckComponentMovement' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPoseDriver, AxisBone) == 0x000030, "Member 'FAnimNode_NikkiPoseDriver::AxisBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiPoseDriver, ModifiedBones) == 0x000070, "Member 'FAnimNode_NikkiPoseDriver::ModifiedBones' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_ShawlRigTarget
// 0x00C0 (0x00C0 - 0x0000)
struct FNikki_ShawlRigTarget final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoneDir;                                           // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         UpperArm;                                          // 0x0028(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LowerArm;                                          // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftAngle;                                        // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPosRatioInUpperArm;                             // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpperArmToSkyDir;                                  // 0x0058(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalAngleFromUpperArmToSky;                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4C];                                      // 0x0074(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_ShawlRigTarget) == 0x000008, "Wrong alignment on FNikki_ShawlRigTarget");
static_assert(sizeof(FNikki_ShawlRigTarget) == 0x0000C0, "Wrong size on FNikki_ShawlRigTarget");
static_assert(offsetof(FNikki_ShawlRigTarget, bone) == 0x000000, "Member 'FNikki_ShawlRigTarget::bone' has a wrong offset!");
static_assert(offsetof(FNikki_ShawlRigTarget, BoneDir) == 0x000010, "Member 'FNikki_ShawlRigTarget::BoneDir' has a wrong offset!");
static_assert(offsetof(FNikki_ShawlRigTarget, UpperArm) == 0x000028, "Member 'FNikki_ShawlRigTarget::UpperArm' has a wrong offset!");
static_assert(offsetof(FNikki_ShawlRigTarget, LowerArm) == 0x000038, "Member 'FNikki_ShawlRigTarget::LowerArm' has a wrong offset!");
static_assert(offsetof(FNikki_ShawlRigTarget, StartAngle) == 0x000048, "Member 'FNikki_ShawlRigTarget::StartAngle' has a wrong offset!");
static_assert(offsetof(FNikki_ShawlRigTarget, ShiftAngle) == 0x00004C, "Member 'FNikki_ShawlRigTarget::ShiftAngle' has a wrong offset!");
static_assert(offsetof(FNikki_ShawlRigTarget, MaxAngle) == 0x000050, "Member 'FNikki_ShawlRigTarget::MaxAngle' has a wrong offset!");
static_assert(offsetof(FNikki_ShawlRigTarget, MaxPosRatioInUpperArm) == 0x000054, "Member 'FNikki_ShawlRigTarget::MaxPosRatioInUpperArm' has a wrong offset!");
static_assert(offsetof(FNikki_ShawlRigTarget, UpperArmToSkyDir) == 0x000058, "Member 'FNikki_ShawlRigTarget::UpperArmToSkyDir' has a wrong offset!");
static_assert(offsetof(FNikki_ShawlRigTarget, CriticalAngleFromUpperArmToSky) == 0x000070, "Member 'FNikki_ShawlRigTarget::CriticalAngleFromUpperArmToSky' has a wrong offset!");

// ScriptStruct NikkiPhysics.AnimNode_NikkiShawlRig
// 0x0048 (0x0058 - 0x0010)
struct FAnimNode_NikkiShawlRig final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNikki_ShawlRigTarget>          ModifiedBones;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NikkiShawlRig) == 0x000008, "Wrong alignment on FAnimNode_NikkiShawlRig");
static_assert(sizeof(FAnimNode_NikkiShawlRig) == 0x000058, "Wrong size on FAnimNode_NikkiShawlRig");
static_assert(offsetof(FAnimNode_NikkiShawlRig, Source) == 0x000010, "Member 'FAnimNode_NikkiShawlRig::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiShawlRig, alpha) == 0x000020, "Member 'FAnimNode_NikkiShawlRig::alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiShawlRig, ModifiedBones) == 0x000028, "Member 'FAnimNode_NikkiShawlRig::ModifiedBones' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_SimplePhysicsTarget
// 0x0088 (0x0088 - 0x0000)
struct FNikki_SimplePhysicsTarget final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 FollowBones;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FollowBoneStiffness;                               // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollowBoneAwayOnly;                               // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x5B];                                      // 0x002D(0x005B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_SimplePhysicsTarget) == 0x000008, "Wrong alignment on FNikki_SimplePhysicsTarget");
static_assert(sizeof(FNikki_SimplePhysicsTarget) == 0x000088, "Wrong size on FNikki_SimplePhysicsTarget");
static_assert(offsetof(FNikki_SimplePhysicsTarget, bone) == 0x000000, "Member 'FNikki_SimplePhysicsTarget::bone' has a wrong offset!");
static_assert(offsetof(FNikki_SimplePhysicsTarget, Stiffness) == 0x000010, "Member 'FNikki_SimplePhysicsTarget::Stiffness' has a wrong offset!");
static_assert(offsetof(FNikki_SimplePhysicsTarget, Damping) == 0x000014, "Member 'FNikki_SimplePhysicsTarget::Damping' has a wrong offset!");
static_assert(offsetof(FNikki_SimplePhysicsTarget, FollowBones) == 0x000018, "Member 'FNikki_SimplePhysicsTarget::FollowBones' has a wrong offset!");
static_assert(offsetof(FNikki_SimplePhysicsTarget, FollowBoneStiffness) == 0x000028, "Member 'FNikki_SimplePhysicsTarget::FollowBoneStiffness' has a wrong offset!");
static_assert(offsetof(FNikki_SimplePhysicsTarget, bFollowBoneAwayOnly) == 0x00002C, "Member 'FNikki_SimplePhysicsTarget::bFollowBoneAwayOnly' has a wrong offset!");

// ScriptStruct NikkiPhysics.AnimNode_NikkiSimplePhysics
// 0x0200 (0x0210 - 0x0010)
struct alignas(0x10) FAnimNode_NikkiSimplePhysics final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNikki_SimplePhysicsTarget>     SimulateTargets;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ENikki_SimplePhySimSpace                      RefSpace;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         RefSpaceBone;                                      // 0x003C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LinearScale;                                       // 0x0050(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularScale;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTPose;                                         // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x1A3];                                     // 0x006D(0x01A3)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NikkiSimplePhysics) == 0x000010, "Wrong alignment on FAnimNode_NikkiSimplePhysics");
static_assert(sizeof(FAnimNode_NikkiSimplePhysics) == 0x000210, "Wrong size on FAnimNode_NikkiSimplePhysics");
static_assert(offsetof(FAnimNode_NikkiSimplePhysics, Source) == 0x000010, "Member 'FAnimNode_NikkiSimplePhysics::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSimplePhysics, alpha) == 0x000020, "Member 'FAnimNode_NikkiSimplePhysics::alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSimplePhysics, SimulateTargets) == 0x000028, "Member 'FAnimNode_NikkiSimplePhysics::SimulateTargets' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSimplePhysics, RefSpace) == 0x000038, "Member 'FAnimNode_NikkiSimplePhysics::RefSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSimplePhysics, RefSpaceBone) == 0x00003C, "Member 'FAnimNode_NikkiSimplePhysics::RefSpaceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSimplePhysics, LinearScale) == 0x000050, "Member 'FAnimNode_NikkiSimplePhysics::LinearScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSimplePhysics, AngularScale) == 0x000068, "Member 'FAnimNode_NikkiSimplePhysics::AngularScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSimplePhysics, bUseTPose) == 0x00006C, "Member 'FAnimNode_NikkiSimplePhysics::bUseTPose' has a wrong offset!");

// ScriptStruct NikkiPhysics.Nikki_PhysicsAutoHanging
// 0x00A0 (0x00A0 - 0x0000)
struct FNikki_PhysicsAutoHanging final
{
public:
	struct FBoneReference                         TargetBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         UpperArm;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LowerArm;                                          // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ENikki_SleeveRigFollowArm                     FollowBone;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoneDir;                                           // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ArmBoneDir;                                        // 0x0050(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x38];                                      // 0x0068(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikki_PhysicsAutoHanging) == 0x000008, "Wrong alignment on FNikki_PhysicsAutoHanging");
static_assert(sizeof(FNikki_PhysicsAutoHanging) == 0x0000A0, "Wrong size on FNikki_PhysicsAutoHanging");
static_assert(offsetof(FNikki_PhysicsAutoHanging, TargetBone) == 0x000000, "Member 'FNikki_PhysicsAutoHanging::TargetBone' has a wrong offset!");
static_assert(offsetof(FNikki_PhysicsAutoHanging, UpperArm) == 0x000010, "Member 'FNikki_PhysicsAutoHanging::UpperArm' has a wrong offset!");
static_assert(offsetof(FNikki_PhysicsAutoHanging, LowerArm) == 0x000020, "Member 'FNikki_PhysicsAutoHanging::LowerArm' has a wrong offset!");
static_assert(offsetof(FNikki_PhysicsAutoHanging, FollowBone) == 0x000030, "Member 'FNikki_PhysicsAutoHanging::FollowBone' has a wrong offset!");
static_assert(offsetof(FNikki_PhysicsAutoHanging, BoneDir) == 0x000038, "Member 'FNikki_PhysicsAutoHanging::BoneDir' has a wrong offset!");
static_assert(offsetof(FNikki_PhysicsAutoHanging, ArmBoneDir) == 0x000050, "Member 'FNikki_PhysicsAutoHanging::ArmBoneDir' has a wrong offset!");

// ScriptStruct NikkiPhysics.AnimNode_NikkiSleeveRig
// 0x00F8 (0x0108 - 0x0010)
struct FAnimNode_NikkiSleeveRig final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FrontDir;                                          // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityCriticalCheckValue;                         // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBackRotation;                               // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveSelfAxisRotation;                           // 0x005D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckSleeveDirection;                             // 0x005E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SleeveCriticalCheckValue;                          // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         BodyBone;                                          // 0x0064(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BodyBoneDir;                                       // 0x0078(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyCheckRadius;                                   // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         CharacterMainBone;                                 // 0x0094(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNikki_PhysicsAutoHanging>      Sleeves;                                           // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x50];                                      // 0x00B8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_NikkiSleeveRig) == 0x000008, "Wrong alignment on FAnimNode_NikkiSleeveRig");
static_assert(sizeof(FAnimNode_NikkiSleeveRig) == 0x000108, "Wrong size on FAnimNode_NikkiSleeveRig");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, Source) == 0x000010, "Member 'FAnimNode_NikkiSleeveRig::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, alpha) == 0x000020, "Member 'FAnimNode_NikkiSleeveRig::alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, FrontDir) == 0x000028, "Member 'FAnimNode_NikkiSleeveRig::FrontDir' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, Gravity) == 0x000040, "Member 'FAnimNode_NikkiSleeveRig::Gravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, GravityCriticalCheckValue) == 0x000058, "Member 'FAnimNode_NikkiSleeveRig::GravityCriticalCheckValue' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, bEnableBackRotation) == 0x00005C, "Member 'FAnimNode_NikkiSleeveRig::bEnableBackRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, bRemoveSelfAxisRotation) == 0x00005D, "Member 'FAnimNode_NikkiSleeveRig::bRemoveSelfAxisRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, bCheckSleeveDirection) == 0x00005E, "Member 'FAnimNode_NikkiSleeveRig::bCheckSleeveDirection' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, SleeveCriticalCheckValue) == 0x000060, "Member 'FAnimNode_NikkiSleeveRig::SleeveCriticalCheckValue' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, BodyBone) == 0x000064, "Member 'FAnimNode_NikkiSleeveRig::BodyBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, BodyBoneDir) == 0x000078, "Member 'FAnimNode_NikkiSleeveRig::BodyBoneDir' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, BodyCheckRadius) == 0x000090, "Member 'FAnimNode_NikkiSleeveRig::BodyCheckRadius' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, CharacterMainBone) == 0x000094, "Member 'FAnimNode_NikkiSleeveRig::CharacterMainBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_NikkiSleeveRig, Sleeves) == 0x0000A8, "Member 'FAnimNode_NikkiSleeveRig::Sleeves' has a wrong offset!");

// ScriptStruct NikkiPhysics.NikkiPlatformPhysicsSetting
// 0x000C (0x000C - 0x0000)
struct FNikkiPlatformPhysicsSetting final
{
public:
	float                                         CapsuleCollisionRange;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLenCorrection;                               // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePartSelfCollision;                          // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_HeightFieldMethod                      HeightFieldMethod;                                 // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_RotCorrectRef                          RotationCorrectionMethod;                          // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCollisionFriction;                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableProxySim;                                   // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNikkiPlatformPhysicsSetting) == 0x000004, "Wrong alignment on FNikkiPlatformPhysicsSetting");
static_assert(sizeof(FNikkiPlatformPhysicsSetting) == 0x00000C, "Wrong size on FNikkiPlatformPhysicsSetting");
static_assert(offsetof(FNikkiPlatformPhysicsSetting, CapsuleCollisionRange) == 0x000000, "Member 'FNikkiPlatformPhysicsSetting::CapsuleCollisionRange' has a wrong offset!");
static_assert(offsetof(FNikkiPlatformPhysicsSetting, EnableLenCorrection) == 0x000004, "Member 'FNikkiPlatformPhysicsSetting::EnableLenCorrection' has a wrong offset!");
static_assert(offsetof(FNikkiPlatformPhysicsSetting, bEnablePartSelfCollision) == 0x000005, "Member 'FNikkiPlatformPhysicsSetting::bEnablePartSelfCollision' has a wrong offset!");
static_assert(offsetof(FNikkiPlatformPhysicsSetting, HeightFieldMethod) == 0x000006, "Member 'FNikkiPlatformPhysicsSetting::HeightFieldMethod' has a wrong offset!");
static_assert(offsetof(FNikkiPlatformPhysicsSetting, RotationCorrectionMethod) == 0x000007, "Member 'FNikkiPlatformPhysicsSetting::RotationCorrectionMethod' has a wrong offset!");
static_assert(offsetof(FNikkiPlatformPhysicsSetting, bEnableCollisionFriction) == 0x000008, "Member 'FNikkiPlatformPhysicsSetting::bEnableCollisionFriction' has a wrong offset!");
static_assert(offsetof(FNikkiPlatformPhysicsSetting, bEnableProxySim) == 0x000009, "Member 'FNikkiPlatformPhysicsSetting::bEnableProxySim' has a wrong offset!");

}

