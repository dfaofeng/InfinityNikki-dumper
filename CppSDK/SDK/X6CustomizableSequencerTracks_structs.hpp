#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6CustomizableSequencerTracks

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum X6CustomizableSequencerTracks.EX6CustomSequencerTrackType
// NumValues: 0x0003
enum class EX6CustomSequencerTrackType : uint32
{
	MasterTrack                              = 0,
	ObjectTrack                              = 1,
	EX6CustomSequencerTrackType_MAX          = 2,
};

// ScriptStruct X6CustomizableSequencerTracks.X6ParameterEvaluateValues
// 0x0280 (0x0280 - 0x0000)
struct FX6ParameterEvaluateValues final
{
public:
	TMap<class FName, double>                     ScalarValues;                                      // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      IntegerValues;                                     // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       BoolValues;                                        // 0x00A0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             VectorValues;                                      // 0x00F0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        LinearColorValues;                                 // 0x0140(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTransform>          TransformValues;                                   // 0x0190(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, uint8>                      ByteValues;                                        // 0x01E0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, class UObject*>             ObjectValues;                                      // 0x0230(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6ParameterEvaluateValues) == 0x000008, "Wrong alignment on FX6ParameterEvaluateValues");
static_assert(sizeof(FX6ParameterEvaluateValues) == 0x000280, "Wrong size on FX6ParameterEvaluateValues");
static_assert(offsetof(FX6ParameterEvaluateValues, ScalarValues) == 0x000000, "Member 'FX6ParameterEvaluateValues::ScalarValues' has a wrong offset!");
static_assert(offsetof(FX6ParameterEvaluateValues, IntegerValues) == 0x000050, "Member 'FX6ParameterEvaluateValues::IntegerValues' has a wrong offset!");
static_assert(offsetof(FX6ParameterEvaluateValues, BoolValues) == 0x0000A0, "Member 'FX6ParameterEvaluateValues::BoolValues' has a wrong offset!");
static_assert(offsetof(FX6ParameterEvaluateValues, VectorValues) == 0x0000F0, "Member 'FX6ParameterEvaluateValues::VectorValues' has a wrong offset!");
static_assert(offsetof(FX6ParameterEvaluateValues, LinearColorValues) == 0x000140, "Member 'FX6ParameterEvaluateValues::LinearColorValues' has a wrong offset!");
static_assert(offsetof(FX6ParameterEvaluateValues, TransformValues) == 0x000190, "Member 'FX6ParameterEvaluateValues::TransformValues' has a wrong offset!");
static_assert(offsetof(FX6ParameterEvaluateValues, ByteValues) == 0x0001E0, "Member 'FX6ParameterEvaluateValues::ByteValues' has a wrong offset!");
static_assert(offsetof(FX6ParameterEvaluateValues, ObjectValues) == 0x000230, "Member 'FX6ParameterEvaluateValues::ObjectValues' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6ScalarParameterNameAndCurve
// 0x0120 (0x0120 - 0x0000)
struct FX6ScalarParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneDoubleChannel               ParameterCurve;                                    // 0x0008(0x0118)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6ScalarParameterNameAndCurve) == 0x000008, "Wrong alignment on FX6ScalarParameterNameAndCurve");
static_assert(sizeof(FX6ScalarParameterNameAndCurve) == 0x000120, "Wrong size on FX6ScalarParameterNameAndCurve");
static_assert(offsetof(FX6ScalarParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FX6ScalarParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FX6ScalarParameterNameAndCurve, ParameterCurve) == 0x000008, "Member 'FX6ScalarParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6IntegerParameterNameAndCurve
// 0x0110 (0x0110 - 0x0000)
struct FX6IntegerParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneIntegerChannel              ParameterCurve;                                    // 0x0008(0x0108)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6IntegerParameterNameAndCurve) == 0x000008, "Wrong alignment on FX6IntegerParameterNameAndCurve");
static_assert(sizeof(FX6IntegerParameterNameAndCurve) == 0x000110, "Wrong size on FX6IntegerParameterNameAndCurve");
static_assert(offsetof(FX6IntegerParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FX6IntegerParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FX6IntegerParameterNameAndCurve, ParameterCurve) == 0x000008, "Member 'FX6IntegerParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6BoolParameterNameAndCurve
// 0x0110 (0x0110 - 0x0000)
struct FX6BoolParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneBoolChannel                 ParameterCurve;                                    // 0x0008(0x0108)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6BoolParameterNameAndCurve) == 0x000008, "Wrong alignment on FX6BoolParameterNameAndCurve");
static_assert(sizeof(FX6BoolParameterNameAndCurve) == 0x000110, "Wrong size on FX6BoolParameterNameAndCurve");
static_assert(offsetof(FX6BoolParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FX6BoolParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FX6BoolParameterNameAndCurve, ParameterCurve) == 0x000008, "Member 'FX6BoolParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6VectorParameterNameAndCurve
// 0x0350 (0x0350 - 0x0000)
struct FX6VectorParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneDoubleChannel               XCurve;                                            // 0x0008(0x0118)(NativeAccessSpecifierPublic)
	struct FMovieSceneDoubleChannel               YCurve;                                            // 0x0120(0x0118)(NativeAccessSpecifierPublic)
	struct FMovieSceneDoubleChannel               ZCurve;                                            // 0x0238(0x0118)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6VectorParameterNameAndCurve) == 0x000008, "Wrong alignment on FX6VectorParameterNameAndCurve");
static_assert(sizeof(FX6VectorParameterNameAndCurve) == 0x000350, "Wrong size on FX6VectorParameterNameAndCurve");
static_assert(offsetof(FX6VectorParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FX6VectorParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FX6VectorParameterNameAndCurve, XCurve) == 0x000008, "Member 'FX6VectorParameterNameAndCurve::XCurve' has a wrong offset!");
static_assert(offsetof(FX6VectorParameterNameAndCurve, YCurve) == 0x000120, "Member 'FX6VectorParameterNameAndCurve::YCurve' has a wrong offset!");
static_assert(offsetof(FX6VectorParameterNameAndCurve, ZCurve) == 0x000238, "Member 'FX6VectorParameterNameAndCurve::ZCurve' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6LinearColorParameterNameAndCurve
// 0x0468 (0x0468 - 0x0000)
struct FX6LinearColorParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneDoubleChannel               RCurve;                                            // 0x0008(0x0118)(NativeAccessSpecifierPublic)
	struct FMovieSceneDoubleChannel               GCurve;                                            // 0x0120(0x0118)(NativeAccessSpecifierPublic)
	struct FMovieSceneDoubleChannel               BCurve;                                            // 0x0238(0x0118)(NativeAccessSpecifierPublic)
	struct FMovieSceneDoubleChannel               ACurve;                                            // 0x0350(0x0118)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6LinearColorParameterNameAndCurve) == 0x000008, "Wrong alignment on FX6LinearColorParameterNameAndCurve");
static_assert(sizeof(FX6LinearColorParameterNameAndCurve) == 0x000468, "Wrong size on FX6LinearColorParameterNameAndCurve");
static_assert(offsetof(FX6LinearColorParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FX6LinearColorParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FX6LinearColorParameterNameAndCurve, RCurve) == 0x000008, "Member 'FX6LinearColorParameterNameAndCurve::RCurve' has a wrong offset!");
static_assert(offsetof(FX6LinearColorParameterNameAndCurve, GCurve) == 0x000120, "Member 'FX6LinearColorParameterNameAndCurve::GCurve' has a wrong offset!");
static_assert(offsetof(FX6LinearColorParameterNameAndCurve, BCurve) == 0x000238, "Member 'FX6LinearColorParameterNameAndCurve::BCurve' has a wrong offset!");
static_assert(offsetof(FX6LinearColorParameterNameAndCurve, ACurve) == 0x000350, "Member 'FX6LinearColorParameterNameAndCurve::ACurve' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6TransformParameterNameAndCurve
// 0x09E0 (0x09E0 - 0x0000)
struct FX6TransformParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneDoubleChannel               Translation[0x3];                                  // 0x0008(0x0118)(NativeAccessSpecifierPublic)
	struct FMovieSceneDoubleChannel               Rotation[0x3];                                     // 0x0350(0x0118)(NativeAccessSpecifierPublic)
	struct FMovieSceneDoubleChannel               Scale[0x3];                                        // 0x0698(0x0118)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6TransformParameterNameAndCurve) == 0x000008, "Wrong alignment on FX6TransformParameterNameAndCurve");
static_assert(sizeof(FX6TransformParameterNameAndCurve) == 0x0009E0, "Wrong size on FX6TransformParameterNameAndCurve");
static_assert(offsetof(FX6TransformParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FX6TransformParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FX6TransformParameterNameAndCurve, Translation) == 0x000008, "Member 'FX6TransformParameterNameAndCurve::Translation' has a wrong offset!");
static_assert(offsetof(FX6TransformParameterNameAndCurve, Rotation) == 0x000350, "Member 'FX6TransformParameterNameAndCurve::Rotation' has a wrong offset!");
static_assert(offsetof(FX6TransformParameterNameAndCurve, Scale) == 0x000698, "Member 'FX6TransformParameterNameAndCurve::Scale' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6ByteParameterNameAndCurve
// 0x0110 (0x0110 - 0x0000)
struct FX6ByteParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneByteChannel                 ParameterCurve;                                    // 0x0008(0x0108)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6ByteParameterNameAndCurve) == 0x000008, "Wrong alignment on FX6ByteParameterNameAndCurve");
static_assert(sizeof(FX6ByteParameterNameAndCurve) == 0x000110, "Wrong size on FX6ByteParameterNameAndCurve");
static_assert(offsetof(FX6ByteParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FX6ByteParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FX6ByteParameterNameAndCurve, ParameterCurve) == 0x000008, "Member 'FX6ByteParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6ObjectParameterNameAndCurve
// 0x0138 (0x0138 - 0x0000)
struct FX6ObjectParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectPathChannel           ParameterCurve;                                    // 0x0008(0x0130)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6ObjectParameterNameAndCurve) == 0x000008, "Wrong alignment on FX6ObjectParameterNameAndCurve");
static_assert(sizeof(FX6ObjectParameterNameAndCurve) == 0x000138, "Wrong size on FX6ObjectParameterNameAndCurve");
static_assert(offsetof(FX6ObjectParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FX6ObjectParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FX6ObjectParameterNameAndCurve, ParameterCurve) == 0x000008, "Member 'FX6ObjectParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6ObjectParameterContent
// 0x0018 (0x0018 - 0x0000)
struct FX6ObjectParameterContent final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ObjectValues;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6ObjectParameterContent) == 0x000008, "Wrong alignment on FX6ObjectParameterContent");
static_assert(sizeof(FX6ObjectParameterContent) == 0x000018, "Wrong size on FX6ObjectParameterContent");
static_assert(offsetof(FX6ObjectParameterContent, ParameterName) == 0x000000, "Member 'FX6ObjectParameterContent::ParameterName' has a wrong offset!");
static_assert(offsetof(FX6ObjectParameterContent, ObjectValues) == 0x000008, "Member 'FX6ObjectParameterContent::ObjectValues' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6SequencerSectionTemplate
// 0x0008 (0x0028 - 0x0020)
struct FX6SequencerSectionTemplate : public FMovieSceneEvalTemplate
{
public:
	class UX6SequencerSectionBP*                  Section;                                           // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6SequencerSectionTemplate) == 0x000008, "Wrong alignment on FX6SequencerSectionTemplate");
static_assert(sizeof(FX6SequencerSectionTemplate) == 0x000028, "Wrong size on FX6SequencerSectionTemplate");
static_assert(offsetof(FX6SequencerSectionTemplate, Section) == 0x000020, "Member 'FX6SequencerSectionTemplate::Section' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6SequencerParameterSectionTemplate
// 0x0580 (0x05A8 - 0x0028)
struct FX6SequencerParameterSectionTemplate final : public FX6SequencerSectionTemplate
{
public:
	TArray<struct FX6ScalarParameterNameAndCurve> ScalarCurves;                                      // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6IntegerParameterNameAndCurve> IntegerCurves;                                    // 0x0038(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6BoolParameterNameAndCurve>   BoolCurves;                                        // 0x0048(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6VectorParameterNameAndCurve> VectorCurves;                                      // 0x0058(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6LinearColorParameterNameAndCurve> LinearColorCurves;                            // 0x0068(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6TransformParameterNameAndCurve> TransformCurves;                                // 0x0078(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6ByteParameterNameAndCurve>   ByteCurves;                                        // 0x0088(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6ObjectParameterNameAndCurve> ObjectCurves;                                      // 0x0098(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A8[0x500];                                     // 0x00A8(0x0500)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FX6SequencerParameterSectionTemplate) == 0x000008, "Wrong alignment on FX6SequencerParameterSectionTemplate");
static_assert(sizeof(FX6SequencerParameterSectionTemplate) == 0x0005A8, "Wrong size on FX6SequencerParameterSectionTemplate");
static_assert(offsetof(FX6SequencerParameterSectionTemplate, ScalarCurves) == 0x000028, "Member 'FX6SequencerParameterSectionTemplate::ScalarCurves' has a wrong offset!");
static_assert(offsetof(FX6SequencerParameterSectionTemplate, IntegerCurves) == 0x000038, "Member 'FX6SequencerParameterSectionTemplate::IntegerCurves' has a wrong offset!");
static_assert(offsetof(FX6SequencerParameterSectionTemplate, BoolCurves) == 0x000048, "Member 'FX6SequencerParameterSectionTemplate::BoolCurves' has a wrong offset!");
static_assert(offsetof(FX6SequencerParameterSectionTemplate, VectorCurves) == 0x000058, "Member 'FX6SequencerParameterSectionTemplate::VectorCurves' has a wrong offset!");
static_assert(offsetof(FX6SequencerParameterSectionTemplate, LinearColorCurves) == 0x000068, "Member 'FX6SequencerParameterSectionTemplate::LinearColorCurves' has a wrong offset!");
static_assert(offsetof(FX6SequencerParameterSectionTemplate, TransformCurves) == 0x000078, "Member 'FX6SequencerParameterSectionTemplate::TransformCurves' has a wrong offset!");
static_assert(offsetof(FX6SequencerParameterSectionTemplate, ByteCurves) == 0x000088, "Member 'FX6SequencerParameterSectionTemplate::ByteCurves' has a wrong offset!");
static_assert(offsetof(FX6SequencerParameterSectionTemplate, ObjectCurves) == 0x000098, "Member 'FX6SequencerParameterSectionTemplate::ObjectCurves' has a wrong offset!");

// ScriptStruct X6CustomizableSequencerTracks.X6SequencerTrackInstanceInput
// 0x0070 (0x0070 - 0x0000)
struct FX6SequencerTrackInstanceInput final
{
public:
	class UX6SequencerSectionBP*                  Section;                                           // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x68];                                       // 0x0008(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FX6SequencerTrackInstanceInput) == 0x000008, "Wrong alignment on FX6SequencerTrackInstanceInput");
static_assert(sizeof(FX6SequencerTrackInstanceInput) == 0x000070, "Wrong size on FX6SequencerTrackInstanceInput");
static_assert(offsetof(FX6SequencerTrackInstanceInput, Section) == 0x000000, "Member 'FX6SequencerTrackInstanceInput::Section' has a wrong offset!");

}

