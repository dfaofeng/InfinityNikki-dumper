#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Nikki_AimOffset

#include "Basic.hpp"

#include "ABP_Nikki_AimOffset_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "X6Animation_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C
// 0x0F20 (0x12F0 - 0x03D0)
class UABP_Nikki_AimOffset_C final : public UAnimInstance
{
public:
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Nikki_AimOffset::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;          // 0x03D8(0x0020)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x03F8(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0400(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root_16;                             // 0x0408(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_5;                   // 0x0428(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_15;                             // 0x04E0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_14;                             // 0x0500(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_13;                             // 0x0520(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_12;                             // 0x0540(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_11;                             // 0x0560(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_10;                             // 0x0580(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_9;                              // 0x05A0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_8;                              // 0x05C0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_7;                              // 0x05E0(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_4;                   // 0x0600(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_6;                              // 0x06B8(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_3;                   // 0x06D8(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_5;                              // 0x0790(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_4;                              // 0x07B0(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_3;                              // 0x07D0(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_2;                   // 0x07F0(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_2;                              // 0x08A8(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_1;                   // 0x08C8(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x0980(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x09A0(0x00B8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x0A58(0x0080)()
	uint8                                         Pad_AD8[0x8];                                      // 0x0AD8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_X6EyeLookAt                  AnimGraphNode_X6EyeLookAt;                         // 0x0AE0(0x01B0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x0C90(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x0CB8(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0CE0(0x0048)()
	uint8                                         Pad_D28[0x8];                                      // 0x0D28(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_X6AimOffsetLookAt            AnimGraphNode_X6AimOffsetLookAt;                   // 0x0D30(0x0210)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x0F40(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0FC0(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x1040(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x1068(0x00F0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x1158(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1180(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x11C8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x11F0(0x0028)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1218(0x0020)()
	class UBP_PlayerFeedBackPerformanceComponent_C* OwnerFeedbackComponent;                          // 0x1238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerAnimStatesComponent_C*        AnimStatesComponent;                               // 0x1240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAimOffsetBlendSpace*                   IdleAO;                                            // 0x1248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAimOffsetBlendSpace*                   DefaultIdleAO;                                     // 0x1250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAOValid;                                         // 0x1258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPauseAimOffset;                                   // 0x1259(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCustomSmoothingTime;                              // 0x125A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_125B[0x5];                                     // 0x125B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CustomSmoothingTime;                               // 0x1260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               EyeOffsetRotator_L;                                // 0x1268(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               EyeOffsetRotator_R;                                // 0x1280(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAimOffsetWithEyeMotion;                           // 0x1298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1299[0x3];                                     // 0x1299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AOAlpha;                                           // 0x129C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ValidAOBlendTime;                                  // 0x12A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           IsLookAtChangedTimer;                              // 0x12A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverrideEyeOffsetRotator;                         // 0x12B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12B1[0x7];                                     // 0x12B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OverrideEyeOffsetRotator_L;                        // 0x12B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               OverrideEyeOffsetRotator_R;                        // 0x12D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void AnimLayer_AimOffset(const struct FPoseLink& InPoseForAimOffset, struct FPoseLink* AnimLayer_AimOffset_0);
	void AnimLayer_BehaviorAdditiveMode(const struct FPoseLink& InPoseForPlayerBehavior, struct FPoseLink* AnimLayer_BehaviorAdditiveMode_0);
	void AnimLayer_CombatMovement(struct FPoseLink* AnimLayer_CombatMovement_0);
	void AnimLayer_EquipmentAdditiveMode(const struct FPoseLink& InPoseForEquipment, struct FPoseLink* AnimLayer_EquipmentAdditiveMode_0);
	void AnimLayer_Jump(struct FPoseLink* AnimLayer_Jump_0);
	void AnimLayer_Land(struct FPoseLink* AnimLayer_Land_0);
	void AnimLayer_MovementDependObject(struct FPoseLink* AnimLayer_MovementDependObject_0);
	void AnimLayer_NPCAdditiveBehavior(const struct FPoseLink& InPose, struct FPoseLink* AnimLayer_NPCAdditiveBehavior_0);
	void AnimLayer_NPCBehavior(const struct FPoseLink& InPose_0, struct FPoseLink* AnimLayer_NPCBehavior_0);
	void AnimLayer_PlayerControllingTool(struct FPoseLink* AnimLayer_PlayerControllingTool_0);
	void AnimLayer_PlayerRegularMovement(struct FPoseLink* AnimLayer_PlayerRegularMovement_0);
	void AnimLayer_SpecialSurfaceMovement(struct FPoseLink* AnimLayer_SpecialSurfaceMovement_0);
	void AnimLayer_StrafeMovement(struct FPoseLink* AnimLayer_StrafeMovement_0);
	void AnimLayer_UsingCarrierMovement(struct FPoseLink* AnimLayer_UsingCarrierMovement_0);
	void AnimLayer_WhiteBoxMovement(struct FPoseLink* AnimLayer_WhiteBoxMovement_0);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_ABP_Nikki_AimOffset(int32 EntryPoint);
	void OnIsLookAtChanged(bool IsLookAtValid);
	void SkipUpdateAnimation();
	void UpdateAO_ControlParams();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Nikki_AimOffset_C">();
	}
	static class UABP_Nikki_AimOffset_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Nikki_AimOffset_C>();
	}
};
static_assert(alignof(UABP_Nikki_AimOffset_C) == 0x000010, "Wrong alignment on UABP_Nikki_AimOffset_C");
static_assert(sizeof(UABP_Nikki_AimOffset_C) == 0x0012F0, "Wrong size on UABP_Nikki_AimOffset_C");
static_assert(offsetof(UABP_Nikki_AimOffset_C, UberGraphFrame) == 0x0003D0, "Member 'UABP_Nikki_AimOffset_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, __AnimBlueprintMutables) == 0x0003D8, "Member 'UABP_Nikki_AimOffset_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimBlueprintExtension_PropertyAccess) == 0x0003F8, "Member 'UABP_Nikki_AimOffset_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimBlueprintExtension_Base) == 0x000400, "Member 'UABP_Nikki_AimOffset_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_16) == 0x000408, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_16' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_LinkedInputPose_5) == 0x000428, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_LinkedInputPose_5' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_15) == 0x0004E0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_15' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_14) == 0x000500, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_14' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_13) == 0x000520, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_13' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_12) == 0x000540, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_12' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_11) == 0x000560, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_11' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_10) == 0x000580, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_10' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_9) == 0x0005A0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_9' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_8) == 0x0005C0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_8' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_7) == 0x0005E0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_7' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_LinkedInputPose_4) == 0x000600, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_LinkedInputPose_4' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_6) == 0x0006B8, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_6' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_LinkedInputPose_3) == 0x0006D8, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_LinkedInputPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_5) == 0x000790, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_5' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_4) == 0x0007B0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_4' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_3) == 0x0007D0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_3' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_LinkedInputPose_2) == 0x0007F0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_LinkedInputPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_2) == 0x0008A8, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_2' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_LinkedInputPose_1) == 0x0008C8, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_LinkedInputPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root_1) == 0x000980, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_LinkedInputPose) == 0x0009A0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_SaveCachedPose_2) == 0x000A58, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_X6EyeLookAt) == 0x000AE0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_X6EyeLookAt' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_UseCachedPose_5) == 0x000C90, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_UseCachedPose_4) == 0x000CB8, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_BlendListByBool_1) == 0x000CE0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_X6AimOffsetLookAt) == 0x000D30, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_X6AimOffsetLookAt' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_SaveCachedPose_1) == 0x000F40, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_SaveCachedPose) == 0x000FC0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_UseCachedPose_3) == 0x001040, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_LayeredBoneBlend) == 0x001068, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_UseCachedPose_2) == 0x001158, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_BlendListByBool) == 0x001180, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_UseCachedPose_1) == 0x0011C8, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_UseCachedPose) == 0x0011F0, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimGraphNode_Root) == 0x001218, "Member 'UABP_Nikki_AimOffset_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, OwnerFeedbackComponent) == 0x001238, "Member 'UABP_Nikki_AimOffset_C::OwnerFeedbackComponent' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AnimStatesComponent) == 0x001240, "Member 'UABP_Nikki_AimOffset_C::AnimStatesComponent' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, IdleAO) == 0x001248, "Member 'UABP_Nikki_AimOffset_C::IdleAO' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, DefaultIdleAO) == 0x001250, "Member 'UABP_Nikki_AimOffset_C::DefaultIdleAO' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, IsAOValid) == 0x001258, "Member 'UABP_Nikki_AimOffset_C::IsAOValid' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, bPauseAimOffset) == 0x001259, "Member 'UABP_Nikki_AimOffset_C::bPauseAimOffset' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, bCustomSmoothingTime) == 0x00125A, "Member 'UABP_Nikki_AimOffset_C::bCustomSmoothingTime' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, CustomSmoothingTime) == 0x001260, "Member 'UABP_Nikki_AimOffset_C::CustomSmoothingTime' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, EyeOffsetRotator_L) == 0x001268, "Member 'UABP_Nikki_AimOffset_C::EyeOffsetRotator_L' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, EyeOffsetRotator_R) == 0x001280, "Member 'UABP_Nikki_AimOffset_C::EyeOffsetRotator_R' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, bAimOffsetWithEyeMotion) == 0x001298, "Member 'UABP_Nikki_AimOffset_C::bAimOffsetWithEyeMotion' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, AOAlpha) == 0x00129C, "Member 'UABP_Nikki_AimOffset_C::AOAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, ValidAOBlendTime) == 0x0012A0, "Member 'UABP_Nikki_AimOffset_C::ValidAOBlendTime' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, IsLookAtChangedTimer) == 0x0012A8, "Member 'UABP_Nikki_AimOffset_C::IsLookAtChangedTimer' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, bOverrideEyeOffsetRotator) == 0x0012B0, "Member 'UABP_Nikki_AimOffset_C::bOverrideEyeOffsetRotator' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, OverrideEyeOffsetRotator_L) == 0x0012B8, "Member 'UABP_Nikki_AimOffset_C::OverrideEyeOffsetRotator_L' has a wrong offset!");
static_assert(offsetof(UABP_Nikki_AimOffset_C, OverrideEyeOffsetRotator_R) == 0x0012D0, "Member 'UABP_Nikki_AimOffset_C::OverrideEyeOffsetRotator_R' has a wrong offset!");

}

