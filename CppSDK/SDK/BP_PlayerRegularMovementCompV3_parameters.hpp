#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerRegularMovementCompV3

#include "Basic.hpp"

#include "EInputDeviceKeyType_structs.hpp"
#include "Engine_structs.hpp"
#include "EPlayerMovementScenarios_structs.hpp"
#include "X6Game_structs.hpp"
#include "EPlayerAdditiveMovementMode_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_ReceiveEndPlay");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_ReceiveEndPlay");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.NotifyCurAllowedGaitChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_NotifyCurAllowedGaitChanged final
{
public:
	ERegularLocomotionType                        NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        CurrentGait;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_NotifyCurAllowedGaitChanged) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_NotifyCurAllowedGaitChanged");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_NotifyCurAllowedGaitChanged) == 0x000002, "Wrong size on BP_PlayerRegularMovementCompV3_C_NotifyCurAllowedGaitChanged");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_NotifyCurAllowedGaitChanged, NewGait) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_NotifyCurAllowedGaitChanged::NewGait' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_NotifyCurAllowedGaitChanged, CurrentGait) == 0x000001, "Member 'BP_PlayerRegularMovementCompV3_C_NotifyCurAllowedGaitChanged::CurrentGait' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.NotifyCurActualGaitChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_NotifyCurActualGaitChanged final
{
public:
	ERegularLocomotionType                        NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        CurrentGait;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_NotifyCurActualGaitChanged) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_NotifyCurActualGaitChanged");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_NotifyCurActualGaitChanged) == 0x000002, "Wrong size on BP_PlayerRegularMovementCompV3_C_NotifyCurActualGaitChanged");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_NotifyCurActualGaitChanged, NewGait) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_NotifyCurActualGaitChanged::NewGait' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_NotifyCurActualGaitChanged, CurrentGait) == 0x000001, "Member 'BP_PlayerRegularMovementCompV3_C_NotifyCurActualGaitChanged::CurrentGait' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.ExecuteUbergraph_BP_PlayerRegularMovementCompV3
// 0x000C (0x000C - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        K2Node_Event_NewGait;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        K2Node_Event_CurrentGait;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        K2Node_Event_NewGait_1;                            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        K2Node_Event_CurrentGait_1;                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3) == 0x000004, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3) == 0x00000C, "Wrong size on BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3, EntryPoint) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3, K2Node_Event_NewGait) == 0x000004, "Member 'BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3::K2Node_Event_NewGait' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3, K2Node_Event_CurrentGait) == 0x000005, "Member 'BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3::K2Node_Event_CurrentGait' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3, K2Node_Event_EndPlayReason) == 0x000006, "Member 'BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3, K2Node_Event_NewGait_1) == 0x000007, "Member 'BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3::K2Node_Event_NewGait_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3, K2Node_Event_CurrentGait_1) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3::K2Node_Event_CurrentGait_1' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_PlayerStates
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BPI_Get_PlayerStates final
{
public:
	bool                                          IsInState_AimMode;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BPI_Get_PlayerStates) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BPI_Get_PlayerStates");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BPI_Get_PlayerStates) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BPI_Get_PlayerStates");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_PlayerStates, IsInState_AimMode) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_PlayerStates::IsInState_AimMode' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_MaxSpeedValues
// 0x0038 (0x0038 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues final
{
public:
	double                                        CurMinAnalogWalkSpeed;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurConfigMaxSpeed;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurActualMaxSpeed;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurConfigMaxSpeed_ReturnValue;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_CurMinAnalogWalkSpeed_ImplicitCast; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_CurConfigMaxSpeed_ImplicitCast; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_CurActualMaxSpeed_ImplicitCast; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues) == 0x000038, "Wrong size on BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues, CurMinAnalogWalkSpeed) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues::CurMinAnalogWalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues, CurConfigMaxSpeed) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues::CurConfigMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues, CurActualMaxSpeed) == 0x000010, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues::CurActualMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues, CallFunc_GetCurConfigMaxSpeed_ReturnValue) == 0x000018, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues::CallFunc_GetCurConfigMaxSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues, K2Node_FunctionResult_CurMinAnalogWalkSpeed_ImplicitCast) == 0x000020, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues::K2Node_FunctionResult_CurMinAnalogWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues, K2Node_FunctionResult_CurConfigMaxSpeed_ImplicitCast) == 0x000028, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues::K2Node_FunctionResult_CurConfigMaxSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues, K2Node_FunctionResult_CurActualMaxSpeed_ImplicitCast) == 0x000030, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues::K2Node_FunctionResult_CurActualMaxSpeed_ImplicitCast' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_EssentialValues
// 0x00C0 (0x00C0 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InCurrentAcceleration;                             // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InMaxAcceleration;                                 // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InTurnAroundAngle;                                 // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InSlopeAngle;                                      // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InStartTurnAroundAngle;                            // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InCurConfigMaxSpeed;                               // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurConfigMaxSpeed_ReturnValue;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URMOutputContextInterface*              CallFunc_GetOutputContext_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMOutputContext_OnGround*              K2Node_DynamicCast_AsRMOutput_Context_on_Ground;   // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_InMaxAcceleration_ImplicitCast; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_InTurnAroundAngle_ImplicitCast; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_InSlopeAngle_ImplicitCast;   // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_InStartTurnAroundAngle_ImplicitCast; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_InCurConfigMaxSpeed_ImplicitCast; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues) == 0x0000C0, "Wrong size on BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, InVelocity) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::InVelocity' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, InCurrentAcceleration) == 0x000018, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::InCurrentAcceleration' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, InMaxAcceleration) == 0x000030, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::InMaxAcceleration' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, InTurnAroundAngle) == 0x000038, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::InTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, InSlopeAngle) == 0x000040, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::InSlopeAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, InStartTurnAroundAngle) == 0x000048, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::InStartTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, InCurConfigMaxSpeed) == 0x000050, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::InCurConfigMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, CallFunc_GetCurConfigMaxSpeed_ReturnValue) == 0x000058, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::CallFunc_GetCurConfigMaxSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, CallFunc_IsValid_ReturnValue) == 0x00005C, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x000060, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, CallFunc_GetOutputContext_ReturnValue) == 0x000078, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::CallFunc_GetOutputContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, CallFunc_IsValid_ReturnValue_1) == 0x000080, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, K2Node_DynamicCast_AsRMOutput_Context_on_Ground) == 0x000088, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::K2Node_DynamicCast_AsRMOutput_Context_on_Ground' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, CallFunc_BooleanAND_ReturnValue) == 0x000091, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, CallFunc_IsValid_ReturnValue_2) == 0x000092, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, CallFunc_BooleanAND_ReturnValue_1) == 0x000093, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, K2Node_FunctionResult_InMaxAcceleration_ImplicitCast) == 0x000098, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::K2Node_FunctionResult_InMaxAcceleration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, K2Node_FunctionResult_InTurnAroundAngle_ImplicitCast) == 0x0000A0, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::K2Node_FunctionResult_InTurnAroundAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, K2Node_FunctionResult_InSlopeAngle_ImplicitCast) == 0x0000A8, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::K2Node_FunctionResult_InSlopeAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, K2Node_FunctionResult_InStartTurnAroundAngle_ImplicitCast) == 0x0000B0, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::K2Node_FunctionResult_InStartTurnAroundAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues, K2Node_FunctionResult_InCurConfigMaxSpeed_ImplicitCast) == 0x0000B8, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues::K2Node_FunctionResult_InCurConfigMaxSpeed_ImplicitCast' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_CurrentGroundStates
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates final
{
public:
	EMovementMode                                 PawnMovementMode;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        AllowedGait;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerMovementScenarios                      MovementScenario;                                  // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDeviceKeyType                           CurInputDeviceKeyType;                             // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates) == 0x000004, "Wrong size on BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates, PawnMovementMode) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates::PawnMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates, AllowedGait) == 0x000001, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates::AllowedGait' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates, MovementScenario) == 0x000002, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates::MovementScenario' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates, CurInputDeviceKeyType) == 0x000003, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates::CurInputDeviceKeyType' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_ConfigData
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData final
{
public:
	double                                        WalkSpeed;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RunSpeed;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SprintSpeed;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetConfigMaxSpeedData_MaxSpeed_Walk;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetConfigMaxSpeedData_MaxSpeed_Run;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetConfigMaxSpeedData_MaxSpeed_Sprint;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_WalkSpeed_ImplicitCast;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_RunSpeed_ImplicitCast;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_SprintSpeed_ImplicitCast;    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData) == 0x000040, "Wrong size on BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData, WalkSpeed) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData::WalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData, RunSpeed) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData::RunSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData, SprintSpeed) == 0x000010, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData::SprintSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData, CallFunc_GetConfigMaxSpeedData_MaxSpeed_Walk) == 0x000018, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData::CallFunc_GetConfigMaxSpeedData_MaxSpeed_Walk' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData, CallFunc_GetConfigMaxSpeedData_MaxSpeed_Run) == 0x00001C, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData::CallFunc_GetConfigMaxSpeedData_MaxSpeed_Run' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData, CallFunc_GetConfigMaxSpeedData_MaxSpeed_Sprint) == 0x000020, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData::CallFunc_GetConfigMaxSpeedData_MaxSpeed_Sprint' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData, K2Node_FunctionResult_WalkSpeed_ImplicitCast) == 0x000028, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData::K2Node_FunctionResult_WalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData, K2Node_FunctionResult_RunSpeed_ImplicitCast) == 0x000030, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData::K2Node_FunctionResult_RunSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData, K2Node_FunctionResult_SprintSpeed_ImplicitCast) == 0x000038, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData::K2Node_FunctionResult_SprintSpeed_ImplicitCast' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_BalanceBeamStates
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates final
{
public:
	bool                                          CanMoveOnValidInput;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnterTowardSideOfBeam;                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCurInputValid;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates) == 0x000003, "Wrong size on BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates, CanMoveOnValidInput) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates::CanMoveOnValidInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates, IsEnterTowardSideOfBeam) == 0x000001, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates::IsEnterTowardSideOfBeam' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates, IsCurInputValid) == 0x000002, "Member 'BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates::IsCurInputValid' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_VisitorSetAdditiveMovementMode_Aiming
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_VisitorSetAdditiveMovementMode_Aiming final
{
public:
	bool                                          bEnter;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_VisitorSetAdditiveMovementMode_Aiming) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_VisitorSetAdditiveMovementMode_Aiming");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_VisitorSetAdditiveMovementMode_Aiming) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_VisitorSetAdditiveMovementMode_Aiming");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_VisitorSetAdditiveMovementMode_Aiming, bEnter) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_VisitorSetAdditiveMovementMode_Aiming::bEnter' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SyncCMCValue
// 0x0048 (0x0048 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue final
{
public:
	class UCharacterMovementComponent*            CMC;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        MaxWalkSpeed;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinAnalogWalkSpeed;                                // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxAcceleration;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrakingDecelerationWalking;                        // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GroundFriction;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxWalkSpeed_ImplicitCast;      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MinAnalogWalkSpeed_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxAcceleration_ImplicitCast;   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_GroundFriction_ImplicitCast;    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue) == 0x000048, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue, CMC) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue::CMC' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue, MaxWalkSpeed) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue, MinAnalogWalkSpeed) == 0x000010, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue::MinAnalogWalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue, MaxAcceleration) == 0x000018, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue, BrakingDecelerationWalking) == 0x000020, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue::BrakingDecelerationWalking' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue, GroundFriction) == 0x000028, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue::GroundFriction' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue, K2Node_VariableSet_MaxWalkSpeed_ImplicitCast) == 0x000030, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue::K2Node_VariableSet_MaxWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue, K2Node_VariableSet_MinAnalogWalkSpeed_ImplicitCast) == 0x000034, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue::K2Node_VariableSet_MinAnalogWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue, K2Node_VariableSet_MaxAcceleration_ImplicitCast) == 0x000038, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue::K2Node_VariableSet_MaxAcceleration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue, K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast) == 0x00003C, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue::K2Node_VariableSet_BrakingDecelerationWalking_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue, K2Node_VariableSet_GroundFriction_ImplicitCast) == 0x000040, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue::K2Node_VariableSet_GroundFriction_ImplicitCast' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SyncAnimStatesWithTickV2
// 0x0110 (0x0110 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2 final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMStateInstructionContext*             CallFunc_GetStateInstructionContext_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URMOutputContextInterface*              CallFunc_GetOutputContext_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URMOutputContext_OnGround*              K2Node_DynamicCast_AsRMOutput_Context_on_Ground;   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_RMStateInstructionContext_C*        K2Node_DynamicCast_AsBP_RMState_Instruction_Context; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_HasState_ReturnValue;                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRMInputContext                        CallFunc_GetInputContext_ReturnValue;              // 0x0040(0x00B8)()
	double                                        K2Node_VariableSet_BP_CurTurnInplaceAngle_ImplicitCast; // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_BP_CurFloorAngle_ImplicitCast;  // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_BP_CurTurnAroundAngle_ImplicitCast; // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2) == 0x000110, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, CallFunc_GetStateInstructionContext_ReturnValue) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::CallFunc_GetStateInstructionContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, CallFunc_GetOutputContext_ReturnValue) == 0x000010, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::CallFunc_GetOutputContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, CallFunc_IsValid_ReturnValue_2) == 0x000019, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, K2Node_DynamicCast_AsRMOutput_Context_on_Ground) == 0x000020, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::K2Node_DynamicCast_AsRMOutput_Context_on_Ground' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, K2Node_DynamicCast_AsBP_RMState_Instruction_Context) == 0x000030, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::K2Node_DynamicCast_AsBP_RMState_Instruction_Context' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, CallFunc_IsValid_ReturnValue_3) == 0x000039, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, CallFunc_BP_HasState_ReturnValue) == 0x00003A, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::CallFunc_BP_HasState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, CallFunc_IsValid_ReturnValue_4) == 0x00003B, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, CallFunc_GetInputContext_ReturnValue) == 0x000040, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::CallFunc_GetInputContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, K2Node_VariableSet_BP_CurTurnInplaceAngle_ImplicitCast) == 0x0000F8, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::K2Node_VariableSet_BP_CurTurnInplaceAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, K2Node_VariableSet_BP_CurFloorAngle_ImplicitCast) == 0x000100, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::K2Node_VariableSet_BP_CurFloorAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2, K2Node_VariableSet_BP_CurTurnAroundAngle_ImplicitCast) == 0x000108, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTickV2::K2Node_VariableSet_BP_CurTurnAroundAngle_ImplicitCast' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SyncAnimStatesWithTick
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick final
{
public:
	double                                        CurFloorAngle_0;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurTurnAroundAngle;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCurInputValid;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        CurrentAllowedGait_0;                              // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLogicInStateAiming;                              // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick) == 0x000018, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick, CurFloorAngle_0) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick::CurFloorAngle_0' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick, CurTurnAroundAngle) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick::CurTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick, IsCurInputValid) == 0x000010, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick::IsCurInputValid' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick, CurrentAllowedGait_0) == 0x000011, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick::CurrentAllowedGait_0' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick, IsLogicInStateAiming) == 0x000012, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick::IsLogicInStateAiming' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_StopActiveTurnInplace
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace final
{
public:
	class UX6CharacterMovementComponent*          K2Node_DynamicCast_AsX6Character_Movement_Component; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URMOutputContextInterface*              CallFunc_GetOutputContext_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URMOutputContextInterface*              CallFunc_GetOutputContext_ReturnValue_1;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URMOutputContext_OnGround*              K2Node_DynamicCast_AsRMOutput_Context_on_Ground;   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace) == 0x000030, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace, K2Node_DynamicCast_AsX6Character_Movement_Component) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace::K2Node_DynamicCast_AsX6Character_Movement_Component' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace, CallFunc_GetOutputContext_ReturnValue) == 0x000010, "Member 'BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace::CallFunc_GetOutputContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace, CallFunc_GetOutputContext_ReturnValue_1) == 0x000018, "Member 'BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace::CallFunc_GetOutputContext_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace, K2Node_DynamicCast_AsRMOutput_Context_on_Ground) == 0x000020, "Member 'BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace::K2Node_DynamicCast_AsRMOutput_Context_on_Ground' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace, CallFunc_IsValid_ReturnValue_2) == 0x00002A, "Member 'BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace, CallFunc_BooleanAND_ReturnValue) == 0x00002B, "Member 'BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace, CallFunc_BooleanAND_ReturnValue_1) == 0x00002C, "Member 'BP_PlayerRegularMovementCompV3_C_BP_StopActiveTurnInplace::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SetRegularMovementEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_SetRegularMovementEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_SetRegularMovementEnable) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_SetRegularMovementEnable");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_SetRegularMovementEnable) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_SetRegularMovementEnable");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetRegularMovementEnable, bEnable) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetRegularMovementEnable::bEnable' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SetInplaceTurnAroundAngle
// 0x00E0 (0x00E0 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle final
{
public:
	double                                        CurTargetTurnAroundAngle;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LowerBoundOfAngleOfTurnInplace;                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPreventRotationMovementWhenTurningInPlace;        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMConfigContextInterface*              CallFunc_GetConfigContext_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URMConfigContext_OnGround*              K2Node_DynamicCast_AsRMConfig_Context_on_Ground;   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMOutputContextInterface*              CallFunc_GetOutputContext_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URMOutputContext_OnGround*              K2Node_DynamicCast_AsRMOutput_Context_on_Ground;   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6CharacterMovementComponent*          K2Node_DynamicCast_AsX6Character_Movement_Component; // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTurnAroundAngle_ReturnValue;           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMConfigContextInterface*              CallFunc_GetConfigContext_ReturnValue_1;           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URMOutputContextInterface*              CallFunc_GetOutputContext_ReturnValue_1;           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x00D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D7[0x1];                                       // 0x00D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle) == 0x0000E0, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CurTargetTurnAroundAngle) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CurTargetTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, LowerBoundOfAngleOfTurnInplace) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::LowerBoundOfAngleOfTurnInplace' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, bPreventRotationMovementWhenTurningInPlace) == 0x000010, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::bPreventRotationMovementWhenTurningInPlace' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_GetConfigContext_ReturnValue) == 0x000018, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_GetConfigContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, K2Node_DynamicCast_AsRMConfig_Context_on_Ground) == 0x000020, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::K2Node_DynamicCast_AsRMConfig_Context_on_Ground' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_GetOutputContext_ReturnValue) == 0x000030, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_GetOutputContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, K2Node_DynamicCast_AsRMOutput_Context_on_Ground) == 0x000038, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::K2Node_DynamicCast_AsRMOutput_Context_on_Ground' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, K2Node_DynamicCast_AsX6Character_Movement_Component) == 0x000048, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::K2Node_DynamicCast_AsX6Character_Movement_Component' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000058, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_GetOwner_ReturnValue) == 0x000070, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_GetActorForwardVector_ReturnValue) == 0x000080, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_GetTurnAroundAngle_ReturnValue) == 0x000098, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_GetTurnAroundAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_MakeRotator_ReturnValue) == 0x0000A0, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_IsValid_ReturnValue_1) == 0x0000B8, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_GetConfigContext_ReturnValue_1) == 0x0000C0, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_GetConfigContext_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_GetOutputContext_ReturnValue_1) == 0x0000C8, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_GetOutputContext_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_IsValid_ReturnValue_2) == 0x0000D0, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_IsValid_ReturnValue_3) == 0x0000D1, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_BooleanAND_ReturnValue) == 0x0000D2, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_IsValid_ReturnValue_4) == 0x0000D3, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_BooleanAND_ReturnValue_1) == 0x0000D4, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_BooleanAND_ReturnValue_2) == 0x0000D5, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_BooleanAND_ReturnValue_3) == 0x0000D6, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0000D8, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SetForceMaxInput
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_SetForceMaxInput final
{
public:
	bool                                          bForceMaxInput;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_SetForceMaxInput) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_SetForceMaxInput");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_SetForceMaxInput) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_SetForceMaxInput");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetForceMaxInput, bForceMaxInput) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetForceMaxInput::bForceMaxInput' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SetEnableFootIK
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_SetEnableFootIK final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bImmediately;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_SetEnableFootIK) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_SetEnableFootIK");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_SetEnableFootIK) == 0x000002, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_SetEnableFootIK");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetEnableFootIK, bEnable) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetEnableFootIK::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetEnableFootIK, bImmediately) == 0x000001, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetEnableFootIK::bImmediately' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SetAIInplaceTurnAroundAngle
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_SetAIInplaceTurnAroundAngle final
{
public:
	double                                        CurInplaceTurnAroundAngle;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_SetAIInplaceTurnAroundAngle) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_SetAIInplaceTurnAroundAngle");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_SetAIInplaceTurnAroundAngle) == 0x000008, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_SetAIInplaceTurnAroundAngle");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_SetAIInplaceTurnAroundAngle, CurInplaceTurnAroundAngle) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_SetAIInplaceTurnAroundAngle::CurInplaceTurnAroundAngle' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ResetMaxAccelerationConfigValue
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ResetMaxAccelerationConfigValue final
{
public:
	double                                        OldMaxAcceleration;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ResetMaxAccelerationConfigValue) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ResetMaxAccelerationConfigValue");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ResetMaxAccelerationConfigValue) == 0x000008, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ResetMaxAccelerationConfigValue");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ResetMaxAccelerationConfigValue, OldMaxAcceleration) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ResetMaxAccelerationConfigValue::OldMaxAcceleration' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ResetGroundFrictionConfigValue
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ResetGroundFrictionConfigValue final
{
public:
	double                                        OldGroundFriction;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ResetGroundFrictionConfigValue) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ResetGroundFrictionConfigValue");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ResetGroundFrictionConfigValue) == 0x000008, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ResetGroundFrictionConfigValue");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ResetGroundFrictionConfigValue, OldGroundFriction) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ResetGroundFrictionConfigValue::OldGroundFriction' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ResetGaitMaxWalkSpeedConfigValue
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ResetGaitMaxWalkSpeedConfigValue final
{
public:
	ERegularLocomotionType                        Gait;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ResetGaitMaxWalkSpeedConfigValue) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ResetGaitMaxWalkSpeedConfigValue");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ResetGaitMaxWalkSpeedConfigValue) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ResetGaitMaxWalkSpeedConfigValue");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ResetGaitMaxWalkSpeedConfigValue, Gait) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ResetGaitMaxWalkSpeedConfigValue::Gait' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ResetBrakingDecelerationWalkingConfigValue
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ResetBrakingDecelerationWalkingConfigValue final
{
public:
	double                                        OldBrakingDecelerationWalking;                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ResetBrakingDecelerationWalkingConfigValue) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ResetBrakingDecelerationWalkingConfigValue");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ResetBrakingDecelerationWalkingConfigValue) == 0x000008, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ResetBrakingDecelerationWalkingConfigValue");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ResetBrakingDecelerationWalkingConfigValue, OldBrakingDecelerationWalking) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ResetBrakingDecelerationWalkingConfigValue::OldBrakingDecelerationWalking' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyOwnerMovementConfigByDA
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ModifyOwnerMovementConfigByDA final
{
public:
	class UBP_MovementAllConfigTemplate_C*        NewDataAsset;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_MovementAllConfigTemplate_C*        OldDataAsset;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ModifyOwnerMovementConfigByDA) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ModifyOwnerMovementConfigByDA");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ModifyOwnerMovementConfigByDA) == 0x000010, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ModifyOwnerMovementConfigByDA");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyOwnerMovementConfigByDA, NewDataAsset) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyOwnerMovementConfigByDA::NewDataAsset' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyOwnerMovementConfigByDA, OldDataAsset) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyOwnerMovementConfigByDA::OldDataAsset' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyMaxAccelerationConfigValue
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ModifyMaxAccelerationConfigValue final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ModifyMaxAccelerationConfigValue) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ModifyMaxAccelerationConfigValue");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ModifyMaxAccelerationConfigValue) == 0x000008, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ModifyMaxAccelerationConfigValue");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyMaxAccelerationConfigValue, Value) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyMaxAccelerationConfigValue::Value' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyGroundFrictionConfigValue
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ModifyGroundFrictionConfigValue final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ModifyGroundFrictionConfigValue) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ModifyGroundFrictionConfigValue");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ModifyGroundFrictionConfigValue) == 0x000008, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ModifyGroundFrictionConfigValue");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyGroundFrictionConfigValue, Value) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyGroundFrictionConfigValue::Value' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyGlideMovementConfig
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ModifyGlideMovementConfig final
{
public:
	double                                        NewMaxWalkSpeed;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewRotationActorInterpSpeed;                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ModifyGlideMovementConfig) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ModifyGlideMovementConfig");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ModifyGlideMovementConfig) == 0x000010, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ModifyGlideMovementConfig");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyGlideMovementConfig, NewMaxWalkSpeed) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyGlideMovementConfig::NewMaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyGlideMovementConfig, NewRotationActorInterpSpeed) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyGlideMovementConfig::NewRotationActorInterpSpeed' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyGaitMaxWalkSpeedConfigValue
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ModifyGaitMaxWalkSpeedConfigValue final
{
public:
	ERegularLocomotionType                        Gait;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxWalkSpeedValue;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ModifyGaitMaxWalkSpeedConfigValue) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ModifyGaitMaxWalkSpeedConfigValue");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ModifyGaitMaxWalkSpeedConfigValue) == 0x000010, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ModifyGaitMaxWalkSpeedConfigValue");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyGaitMaxWalkSpeedConfigValue, Gait) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyGaitMaxWalkSpeedConfigValue::Gait' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyGaitMaxWalkSpeedConfigValue, MaxWalkSpeedValue) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyGaitMaxWalkSpeedConfigValue::MaxWalkSpeedValue' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyCurLocomotionAnimSetBySoftRef
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetBySoftRef final
{
public:
	TSoftObjectPtr<class UBP_QuadrupedLocomotion_AnimSet_C> NewAnimSetSoftRef;                       // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetBySoftRef) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetBySoftRef");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetBySoftRef) == 0x000028, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetBySoftRef");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetBySoftRef, NewAnimSetSoftRef) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetBySoftRef::NewAnimSetSoftRef' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyCurLocomotionAnimSetByPath
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetByPath final
{
public:
	class FString                                 NewAnimSetPath;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetByPath) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetByPath");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetByPath) == 0x000010, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetByPath");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetByPath, NewAnimSetPath) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetByPath::NewAnimSetPath' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyCurLocomotionAnimSet
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSet final
{
public:
	class UBP_QuadrupedLocomotion_AnimSet_C*      NewAnimSet;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSet) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSet");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSet) == 0x000008, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSet");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSet, NewAnimSet) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSet::NewAnimSet' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyBrakingDecelerationWalkingConfigValue
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ModifyBrakingDecelerationWalkingConfigValue final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ModifyBrakingDecelerationWalkingConfigValue) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ModifyBrakingDecelerationWalkingConfigValue");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ModifyBrakingDecelerationWalkingConfigValue) == 0x000008, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ModifyBrakingDecelerationWalkingConfigValue");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ModifyBrakingDecelerationWalkingConfigValue, Value) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ModifyBrakingDecelerationWalkingConfigValue::Value' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetPlayerCurTurnAroundAngle
// 0x0028 (0x0028 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle final
{
public:
	double                                        CurrentTurnAroundAngle;                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMOutputContextInterface*              CallFunc_GetOutputContext_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_CurrentTurnAroundAngle_ImplicitCast; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle) == 0x000028, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle, CurrentTurnAroundAngle) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle::CurrentTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle, CallFunc_GetOutputContext_ReturnValue) == 0x000010, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle::CallFunc_GetOutputContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle, K2Node_FunctionResult_CurrentTurnAroundAngle_ImplicitCast) == 0x000020, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle::K2Node_FunctionResult_CurrentTurnAroundAngle_ImplicitCast' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetPlayerCurLocomotionStateByCurSpeed
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed final
{
public:
	ERegularLocomotionType                        CurLocomotionType;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        CallFunc_GetCurLocomotionTypeBySpeed_ReturnValue;  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurLocomotionTypeBySpeed_Speed2D_ImplicitCast; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed) == 0x000018, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed, CurLocomotionType) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed::CurLocomotionType' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed, CallFunc_VSizeXY_ReturnValue) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed, CallFunc_GetCurLocomotionTypeBySpeed_ReturnValue) == 0x000010, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed::CallFunc_GetCurLocomotionTypeBySpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed, CallFunc_GetCurLocomotionTypeBySpeed_Speed2D_ImplicitCast) == 0x000014, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed::CallFunc_GetCurLocomotionTypeBySpeed_Speed2D_ImplicitCast' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetOwnerIsSimulated
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_GetOwnerIsSimulated final
{
public:
	bool                                          bOwnerSimulated;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_GetOwnerIsSimulated) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_GetOwnerIsSimulated");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_GetOwnerIsSimulated) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_GetOwnerIsSimulated");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetOwnerIsSimulated, bOwnerSimulated) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetOwnerIsSimulated::bOwnerSimulated' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetDesiredGait
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_GetDesiredGait final
{
public:
	ERegularLocomotionType                        BP_CurrentAllowedGait_0;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_GetDesiredGait) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_GetDesiredGait");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_GetDesiredGait) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_GetDesiredGait");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetDesiredGait, BP_CurrentAllowedGait_0) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetDesiredGait::BP_CurrentAllowedGait_0' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetCurConfigMaxSpeed
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed final
{
public:
	double                                        CurConfigMaxSpeed;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurConfigMaxSpeed_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_CurConfigMaxSpeed_ImplicitCast; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed) == 0x000018, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed, CurConfigMaxSpeed) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed::CurConfigMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed, CallFunc_GetCurConfigMaxSpeed_ReturnValue) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed::CallFunc_GetCurConfigMaxSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed, K2Node_FunctionResult_CurConfigMaxSpeed_ImplicitCast) == 0x000010, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed::K2Node_FunctionResult_CurConfigMaxSpeed_ImplicitCast' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetAllowGait
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_GetAllowGait final
{
public:
	ERegularLocomotionType                        NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_GetAllowGait) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_GetAllowGait");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_GetAllowGait) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_GetAllowGait");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_GetAllowGait, NewParam) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_GetAllowGait::NewParam' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ForbidPlayerRegularMovementInput
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ForbidPlayerRegularMovementInput final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerRegularForbidInputType                 RegularForbidInputType;                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ForbidPlayerRegularMovementInput) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ForbidPlayerRegularMovementInput");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ForbidPlayerRegularMovementInput) == 0x000002, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ForbidPlayerRegularMovementInput");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ForbidPlayerRegularMovementInput, Value) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ForbidPlayerRegularMovementInput::Value' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ForbidPlayerRegularMovementInput, RegularForbidInputType) == 0x000001, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ForbidPlayerRegularMovementInput::RegularForbidInputType' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ExitAdditiveMovementMode_Aiming
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ExitAdditiveMovementMode_Aiming final
{
public:
	class UBP_AimModeMovement_CT_C*               OldAimingMovementModeConfig;                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ExitAdditiveMovementMode_Aiming) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ExitAdditiveMovementMode_Aiming");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ExitAdditiveMovementMode_Aiming) == 0x000008, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ExitAdditiveMovementMode_Aiming");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ExitAdditiveMovementMode_Aiming, OldAimingMovementModeConfig) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ExitAdditiveMovementMode_Aiming::OldAimingMovementModeConfig' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_EnterAdditiveMovementMode_Aiming
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_EnterAdditiveMovementMode_Aiming final
{
public:
	class UBP_AimModeMovement_CT_C*               NewAimingMovementModeConfig;                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_EnterAdditiveMovementMode_Aiming) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_EnterAdditiveMovementMode_Aiming");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_EnterAdditiveMovementMode_Aiming) == 0x000010, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_EnterAdditiveMovementMode_Aiming");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnterAdditiveMovementMode_Aiming, NewAimingMovementModeConfig) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnterAdditiveMovementMode_Aiming::NewAimingMovementModeConfig' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnterAdditiveMovementMode_Aiming, Ret) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnterAdditiveMovementMode_Aiming::Ret' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_EnableInplaceTurnAroundBehavior
// 0x0058 (0x0058 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6CharacterMovementComponent*          K2Node_DynamicCast_AsX6Character_Movement_Component; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_RMBaseLogicProcessor_C*             K2Node_DynamicCast_AsBP_RMBase_Logic_Processor;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMOutputContextInterface*              CallFunc_GetOutputContext_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMOutputContext_OnGround*              K2Node_DynamicCast_AsRMOutput_Context_on_Ground;   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMOutputContextInterface*              CallFunc_GetOutputContext_ReturnValue_1;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior) == 0x000058, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, bEnable) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::bEnable' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, K2Node_DynamicCast_AsX6Character_Movement_Component) == 0x000008, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::K2Node_DynamicCast_AsX6Character_Movement_Component' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, K2Node_DynamicCast_AsBP_RMBase_Logic_Processor) == 0x000018, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::K2Node_DynamicCast_AsBP_RMBase_Logic_Processor' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, CallFunc_GetOutputContext_ReturnValue) == 0x000028, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::CallFunc_GetOutputContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, K2Node_DynamicCast_AsRMOutput_Context_on_Ground) == 0x000038, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::K2Node_DynamicCast_AsRMOutput_Context_on_Ground' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, K2Node_DynamicCast_bSuccess_2) == 0x000040, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, CallFunc_GetOutputContext_ReturnValue_1) == 0x000048, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::CallFunc_GetOutputContext_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, CallFunc_IsValid_ReturnValue_2) == 0x000051, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, CallFunc_BooleanAND_ReturnValue) == 0x000052, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior, CallFunc_BooleanAND_ReturnValue_1) == 0x000053, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_EnableAIInplaceTurnAroundBehavior
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_EnableAIInplaceTurnAroundBehavior final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_EnableAIInplaceTurnAroundBehavior) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_EnableAIInplaceTurnAroundBehavior");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_EnableAIInplaceTurnAroundBehavior) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_EnableAIInplaceTurnAroundBehavior");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_EnableAIInplaceTurnAroundBehavior, bEnable) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_EnableAIInplaceTurnAroundBehavior::bEnable' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_DebugForceEnterSprintGait
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_DebugForceEnterSprintGait final
{
public:
	bool                                          bForceEnterSprintGait;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_DebugForceEnterSprintGait) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_DebugForceEnterSprintGait");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_DebugForceEnterSprintGait) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_DebugForceEnterSprintGait");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_DebugForceEnterSprintGait, bForceEnterSprintGait) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_DebugForceEnterSprintGait::bForceEnterSprintGait' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ChangeDesiredGait
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_ChangeDesiredGait final
{
public:
	ERegularLocomotionType                        NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceChangeOperationInput;                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_ChangeDesiredGait) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_ChangeDesiredGait");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_ChangeDesiredGait) == 0x000002, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_ChangeDesiredGait");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ChangeDesiredGait, NewGait) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ChangeDesiredGait::NewGait' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_ChangeDesiredGait, bForceChangeOperationInput) == 0x000001, "Member 'BP_PlayerRegularMovementCompV3_C_BP_ChangeDesiredGait::bForceChangeOperationInput' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_AnimNotifyState_EnableEdgeProtection
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_AnimNotifyState_EnableEdgeProtection final
{
public:
	bool                                          bEnableEdgeProtection;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_AnimNotifyState_EnableEdgeProtection) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_AnimNotifyState_EnableEdgeProtection");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_AnimNotifyState_EnableEdgeProtection) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_AnimNotifyState_EnableEdgeProtection");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_AnimNotifyState_EnableEdgeProtection, bEnableEdgeProtection) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_AnimNotifyState_EnableEdgeProtection::bEnableEdgeProtection' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_AnimNotify_IsInStateStartMoving
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_BP_AnimNotify_IsInStateStartMoving final
{
public:
	bool                                          bInStateStartMoving;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_BP_AnimNotify_IsInStateStartMoving) == 0x000001, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_BP_AnimNotify_IsInStateStartMoving");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_BP_AnimNotify_IsInStateStartMoving) == 0x000001, "Wrong size on BP_PlayerRegularMovementCompV3_C_BP_AnimNotify_IsInStateStartMoving");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_BP_AnimNotify_IsInStateStartMoving, bInStateStartMoving) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_BP_AnimNotify_IsInStateStartMoving::bInStateStartMoving' has a wrong offset!");

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularMovementCompV3_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularMovementCompV3_C_GetModuleName) == 0x000008, "Wrong alignment on BP_PlayerRegularMovementCompV3_C_GetModuleName");
static_assert(sizeof(BP_PlayerRegularMovementCompV3_C_GetModuleName) == 0x000010, "Wrong size on BP_PlayerRegularMovementCompV3_C_GetModuleName");
static_assert(offsetof(BP_PlayerRegularMovementCompV3_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_PlayerRegularMovementCompV3_C_GetModuleName::ReturnValue' has a wrong offset!");

}

