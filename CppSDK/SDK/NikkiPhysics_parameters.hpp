#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NikkiPhysics

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "NikkiPhysics_structs.hpp"


namespace SDK::Params
{

// Function NikkiPhysics.NikkiPhysicsAttachmentInterface.GetAttachedParentComponent
// 0x0008 (0x0008 - 0x0000)
struct NikkiPhysicsAttachmentInterface_GetAttachedParentComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NikkiPhysicsAttachmentInterface_GetAttachedParentComponent) == 0x000008, "Wrong alignment on NikkiPhysicsAttachmentInterface_GetAttachedParentComponent");
static_assert(sizeof(NikkiPhysicsAttachmentInterface_GetAttachedParentComponent) == 0x000008, "Wrong size on NikkiPhysicsAttachmentInterface_GetAttachedParentComponent");
static_assert(offsetof(NikkiPhysicsAttachmentInterface_GetAttachedParentComponent, ReturnValue) == 0x000000, "Member 'NikkiPhysicsAttachmentInterface_GetAttachedParentComponent::ReturnValue' has a wrong offset!");

// Function NikkiPhysics.NikkiPhysicsAttachmentInterface.GetAttachmentComponent
// 0x0008 (0x0008 - 0x0000)
struct NikkiPhysicsAttachmentInterface_GetAttachmentComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NikkiPhysicsAttachmentInterface_GetAttachmentComponent) == 0x000008, "Wrong alignment on NikkiPhysicsAttachmentInterface_GetAttachmentComponent");
static_assert(sizeof(NikkiPhysicsAttachmentInterface_GetAttachmentComponent) == 0x000008, "Wrong size on NikkiPhysicsAttachmentInterface_GetAttachmentComponent");
static_assert(offsetof(NikkiPhysicsAttachmentInterface_GetAttachmentComponent, ReturnValue) == 0x000000, "Member 'NikkiPhysicsAttachmentInterface_GetAttachmentComponent::ReturnValue' has a wrong offset!");

// Function NikkiPhysics.NikkiPhysicsFunctions.AddDynamicWind
// 0x0040 (0x0040 - 0x0000)
struct NikkiPhysicsFunctions_AddDynamicWind final
{
public:
	bool                                          bEnableWind;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNikkiPhysicsManagerComponent*          NikkiPhyManager;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNikki_WindSource                      WindSource;                                        // 0x0010(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ENikki_SpaceType                              Space;                                             // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENikki_WindAccumType                          WindAccumType;                                     // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NikkiPhysicsFunctions_AddDynamicWind) == 0x000008, "Wrong alignment on NikkiPhysicsFunctions_AddDynamicWind");
static_assert(sizeof(NikkiPhysicsFunctions_AddDynamicWind) == 0x000040, "Wrong size on NikkiPhysicsFunctions_AddDynamicWind");
static_assert(offsetof(NikkiPhysicsFunctions_AddDynamicWind, bEnableWind) == 0x000000, "Member 'NikkiPhysicsFunctions_AddDynamicWind::bEnableWind' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_AddDynamicWind, NikkiPhyManager) == 0x000008, "Member 'NikkiPhysicsFunctions_AddDynamicWind::NikkiPhyManager' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_AddDynamicWind, WindSource) == 0x000010, "Member 'NikkiPhysicsFunctions_AddDynamicWind::WindSource' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_AddDynamicWind, Space) == 0x000038, "Member 'NikkiPhysicsFunctions_AddDynamicWind::Space' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_AddDynamicWind, WindAccumType) == 0x000039, "Member 'NikkiPhysicsFunctions_AddDynamicWind::WindAccumType' has a wrong offset!");

// Function NikkiPhysics.NikkiPhysicsFunctions.ForceTickClothPhysics
// 0x0008 (0x0008 - 0x0000)
struct NikkiPhysicsFunctions_ForceTickClothPhysics final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NikkiPhysicsFunctions_ForceTickClothPhysics) == 0x000008, "Wrong alignment on NikkiPhysicsFunctions_ForceTickClothPhysics");
static_assert(sizeof(NikkiPhysicsFunctions_ForceTickClothPhysics) == 0x000008, "Wrong size on NikkiPhysicsFunctions_ForceTickClothPhysics");
static_assert(offsetof(NikkiPhysicsFunctions_ForceTickClothPhysics, InSkeletalMeshComponent) == 0x000000, "Member 'NikkiPhysicsFunctions_ForceTickClothPhysics::InSkeletalMeshComponent' has a wrong offset!");

// Function NikkiPhysics.NikkiPhysicsFunctions.GetNikkiPhysicsClothThickness
// 0x0038 (0x0038 - 0x0000)
struct NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchRadius;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetCompSpace;                                   // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness) == 0x000008, "Wrong alignment on NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness");
static_assert(sizeof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness) == 0x000038, "Wrong size on NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness");
static_assert(offsetof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness, AnimInstance) == 0x000000, "Member 'NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness::AnimInstance' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness, BoneName) == 0x000008, "Member 'NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness::BoneName' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness, SearchRadius) == 0x000010, "Member 'NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness::SearchRadius' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness, OffsetCompSpace) == 0x000018, "Member 'NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness::OffsetCompSpace' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness, ReturnValue) == 0x000030, "Member 'NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness::ReturnValue' has a wrong offset!");

// Function NikkiPhysics.NikkiPhysicsFunctions.GetNikkiPhysicsClothThicknessReal
// 0x0038 (0x0038 - 0x0000)
struct NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchRadius;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetCompSpace;                                   // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal) == 0x000008, "Wrong alignment on NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal");
static_assert(sizeof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal) == 0x000038, "Wrong size on NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal");
static_assert(offsetof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal, AnimInstance) == 0x000000, "Member 'NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal::AnimInstance' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal, BoneName) == 0x000008, "Member 'NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal::BoneName' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal, SearchRadius) == 0x000010, "Member 'NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal::SearchRadius' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal, OffsetCompSpace) == 0x000018, "Member 'NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal::OffsetCompSpace' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal, ReturnValue) == 0x000030, "Member 'NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal::ReturnValue' has a wrong offset!");

// Function NikkiPhysics.NikkiPhysicsFunctions.HasNikkiPhysicsNode
// 0x0010 (0x0010 - 0x0000)
struct NikkiPhysicsFunctions_HasNikkiPhysicsNode final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NikkiPhysicsFunctions_HasNikkiPhysicsNode) == 0x000008, "Wrong alignment on NikkiPhysicsFunctions_HasNikkiPhysicsNode");
static_assert(sizeof(NikkiPhysicsFunctions_HasNikkiPhysicsNode) == 0x000010, "Wrong size on NikkiPhysicsFunctions_HasNikkiPhysicsNode");
static_assert(offsetof(NikkiPhysicsFunctions_HasNikkiPhysicsNode, AnimInstance) == 0x000000, "Member 'NikkiPhysicsFunctions_HasNikkiPhysicsNode::AnimInstance' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_HasNikkiPhysicsNode, ReturnValue) == 0x000008, "Member 'NikkiPhysicsFunctions_HasNikkiPhysicsNode::ReturnValue' has a wrong offset!");

// Function NikkiPhysics.NikkiPhysicsFunctions.ResimulationTrigger
// 0x0010 (0x0010 - 0x0000)
struct NikkiPhysicsFunctions_ResimulationTrigger final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceRunNikkiPhysicsStepTimes;                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NikkiPhysicsFunctions_ResimulationTrigger) == 0x000008, "Wrong alignment on NikkiPhysicsFunctions_ResimulationTrigger");
static_assert(sizeof(NikkiPhysicsFunctions_ResimulationTrigger) == 0x000010, "Wrong size on NikkiPhysicsFunctions_ResimulationTrigger");
static_assert(offsetof(NikkiPhysicsFunctions_ResimulationTrigger, AnimInstance) == 0x000000, "Member 'NikkiPhysicsFunctions_ResimulationTrigger::AnimInstance' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_ResimulationTrigger, ForceRunNikkiPhysicsStepTimes) == 0x000008, "Member 'NikkiPhysicsFunctions_ResimulationTrigger::ForceRunNikkiPhysicsStepTimes' has a wrong offset!");

// Function NikkiPhysics.NikkiPhysicsFunctions.ResimulationTriggerOnSkelMeshComponent
// 0x0010 (0x0010 - 0x0000)
struct NikkiPhysicsFunctions_ResimulationTriggerOnSkelMeshComponent final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceRunNikkiPhysicsStepTimes;                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NikkiPhysicsFunctions_ResimulationTriggerOnSkelMeshComponent) == 0x000008, "Wrong alignment on NikkiPhysicsFunctions_ResimulationTriggerOnSkelMeshComponent");
static_assert(sizeof(NikkiPhysicsFunctions_ResimulationTriggerOnSkelMeshComponent) == 0x000010, "Wrong size on NikkiPhysicsFunctions_ResimulationTriggerOnSkelMeshComponent");
static_assert(offsetof(NikkiPhysicsFunctions_ResimulationTriggerOnSkelMeshComponent, SkeletalMeshComponent) == 0x000000, "Member 'NikkiPhysicsFunctions_ResimulationTriggerOnSkelMeshComponent::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_ResimulationTriggerOnSkelMeshComponent, ForceRunNikkiPhysicsStepTimes) == 0x000008, "Member 'NikkiPhysicsFunctions_ResimulationTriggerOnSkelMeshComponent::ForceRunNikkiPhysicsStepTimes' has a wrong offset!");

// Function NikkiPhysics.NikkiPhysicsFunctions.SetNikkiPhysicsAnimBoneMask
// 0x0028 (0x0028 - 0x0000)
struct NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BonesRemoveColliders;                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           BonesAnim;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask) == 0x000008, "Wrong alignment on NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask");
static_assert(sizeof(NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask) == 0x000028, "Wrong size on NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask");
static_assert(offsetof(NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask, AnimInstance) == 0x000000, "Member 'NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask::AnimInstance' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask, BonesRemoveColliders) == 0x000008, "Member 'NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask::BonesRemoveColliders' has a wrong offset!");
static_assert(offsetof(NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask, BonesAnim) == 0x000018, "Member 'NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask::BonesAnim' has a wrong offset!");

}

