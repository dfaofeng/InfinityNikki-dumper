#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MultiPlayerGroupMovementComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_X6ActorComponent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C
// 0x0138 (0x01E0 - 0x00A8)
class UBP_MultiPlayerGroupMovementComponent_C final : public UBP_X6ActorComponent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          BP_Replicated_IsHoldingHands;                      // 0x00B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class ACharacter*>                       BP_AllPlayerManageAsGroup;                         // 0x00B8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                BP_TowingPosition;                                 // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsHoldingHands;                                 // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BP_MyHandBoneNameToBeHeld;                         // 0x0124(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BP_OtherHandBoneNameToBeHeld;                      // 0x012C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsLeader;                                       // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsInvitingToHoldHands;                          // 0x0135(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             BP_OtherCharacterToBeingHeldHand;                  // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsHoldingRightHandOrLeftHand;                   // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_HoldingHandsMovement_ConfigTemplate_C* BP_HoldingHandsConfig;                          // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_Replicated_IsInvitingToHoldHands;               // 0x0150(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableHoldingHandsIK;                           // 0x0151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableWeaklyholdingHandsMoving;                 // 0x0152(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsHoldingHandsFloatMoving;                      // 0x0153(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_Replicated_EnableHandHoldingAnchorPull;         // 0x0154(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableHandHoldingAnchorPull;                    // 0x0155(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsBeingPulledToAnchorPoint;                     // 0x0156(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_Replicated_EnableHandInHandGesture;             // 0x0157(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableHandInHandGesture;                        // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BP_CurrentTargetWorldAnchorPointTransform;         // 0x0160(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        BP_Replicated_FollowersFallingBehindTargetSafetyPoints; // 0x01C0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          BP_Replicated_IsHoldingHandsFloatMoving;           // 0x01D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsWaitingForOthersToCompleteInvitation;         // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_Rep_LDCanDoAnchorPushWithWL;                    // 0x01D2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower(double* MaximumDistanceBetweenLeaderAndFollower);
	void BP_Get_CurrentTargetWorldAnchorPointTransform(struct FTransform* BP_CurrentTargetWorldAnchorPointTransform_0);
	void BP_Get_FollowerEntityId(int64* Ret);
	void BP_Get_IsHoldingHands(bool* Ret);
	void BP_Get_IsHoldingRightHandOrLeftHand(bool* Ret);
	void BP_Get_IsLeaderOrFollower(bool* Ret);
	void BP_Get_LeaderEntityId(int64* Ret);
	void BP_Get_OtherCharacterToBeingHeldHand(class AActor** Ret);
	void BP_ReleaseHandHoldingMode();
	void BP_ResetFollowerWalkRelativeLocation();
	void BP_RevertFollowerGravityScale();
	void BP_SetEnableGroupConstraints(bool bEnable);
	void BP_SetEnableHoldingHandsIK(bool bEnable);
	void BP_SetEnableWeaklyholdingHandsMoving(bool bEnable);
	void BP_SetFollowerGravityScale(double GravityValue);
	void BP_SetFollowerWalkRelativeLocation(bool bLeftLocation, const struct FVector& NewRelativeLocation);
	void BP_TryHoldingHandsWithOthers(bool bSelfIsLeader, class ACharacter* OtherCharacter, bool* Ret);
	void BP_TryHoldingHandsWithOthersByEntityId(bool bSelfIsLeader, int64 OtherCharacterEntityId, bool* Ret);
	void BP_UpdateHoldingHandsConnectionNiagaraParams(bool bIsLeaderOrFollower, bool bRightHandOrLeftHand);
	void ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent(int32 EntryPoint);
	void OnRep_BP_Rep_LDCanDoAnchorPushWithWL();
	void OnRep_BP_Replicated_EnableHandHoldingAnchorPull();
	void OnRep_BP_Replicated_EnableHandInHandGesture();
	void OnRep_BP_Replicated_IsHoldingHands();
	void OnRep_BP_Replicated_IsHoldingHandsFloatMoving();
	void OnRep_BP_Replicated_IsInvitingToHoldHands();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MultiPlayerGroupMovementComponent_C">();
	}
	static class UBP_MultiPlayerGroupMovementComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MultiPlayerGroupMovementComponent_C>();
	}
};
static_assert(alignof(UBP_MultiPlayerGroupMovementComponent_C) == 0x000010, "Wrong alignment on UBP_MultiPlayerGroupMovementComponent_C");
static_assert(sizeof(UBP_MultiPlayerGroupMovementComponent_C) == 0x0001E0, "Wrong size on UBP_MultiPlayerGroupMovementComponent_C");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, UberGraphFrame) == 0x0000A8, "Member 'UBP_MultiPlayerGroupMovementComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_Replicated_IsHoldingHands) == 0x0000B0, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_Replicated_IsHoldingHands' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_AllPlayerManageAsGroup) == 0x0000B8, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_AllPlayerManageAsGroup' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_TowingPosition) == 0x000108, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_TowingPosition' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_IsHoldingHands) == 0x000120, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_IsHoldingHands' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_MyHandBoneNameToBeHeld) == 0x000124, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_MyHandBoneNameToBeHeld' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_OtherHandBoneNameToBeHeld) == 0x00012C, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_OtherHandBoneNameToBeHeld' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_IsLeader) == 0x000134, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_IsLeader' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_IsInvitingToHoldHands) == 0x000135, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_IsInvitingToHoldHands' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_OtherCharacterToBeingHeldHand) == 0x000138, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_OtherCharacterToBeingHeldHand' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_IsHoldingRightHandOrLeftHand) == 0x000140, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_IsHoldingRightHandOrLeftHand' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_HoldingHandsConfig) == 0x000148, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_HoldingHandsConfig' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_Replicated_IsInvitingToHoldHands) == 0x000150, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_Replicated_IsInvitingToHoldHands' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_EnableHoldingHandsIK) == 0x000151, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_EnableHoldingHandsIK' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_EnableWeaklyholdingHandsMoving) == 0x000152, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_EnableWeaklyholdingHandsMoving' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_IsHoldingHandsFloatMoving) == 0x000153, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_IsHoldingHandsFloatMoving' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_Replicated_EnableHandHoldingAnchorPull) == 0x000154, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_Replicated_EnableHandHoldingAnchorPull' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_EnableHandHoldingAnchorPull) == 0x000155, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_EnableHandHoldingAnchorPull' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_IsBeingPulledToAnchorPoint) == 0x000156, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_IsBeingPulledToAnchorPoint' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_Replicated_EnableHandInHandGesture) == 0x000157, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_Replicated_EnableHandInHandGesture' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_EnableHandInHandGesture) == 0x000158, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_EnableHandInHandGesture' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_CurrentTargetWorldAnchorPointTransform) == 0x000160, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_CurrentTargetWorldAnchorPointTransform' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_Replicated_FollowersFallingBehindTargetSafetyPoints) == 0x0001C0, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_Replicated_FollowersFallingBehindTargetSafetyPoints' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_Replicated_IsHoldingHandsFloatMoving) == 0x0001D0, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_Replicated_IsHoldingHandsFloatMoving' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_IsWaitingForOthersToCompleteInvitation) == 0x0001D1, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_IsWaitingForOthersToCompleteInvitation' has a wrong offset!");
static_assert(offsetof(UBP_MultiPlayerGroupMovementComponent_C, BP_Rep_LDCanDoAnchorPushWithWL) == 0x0001D2, "Member 'UBP_MultiPlayerGroupMovementComponent_C::BP_Rep_LDCanDoAnchorPushWithWL' has a wrong offset!");

}

