#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterGeneratorAssets

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum CharacterGeneratorAssets.ECharacterCreatorStatisticType
// NumValues: 0x000C
enum class ECharacterCreatorStatisticType : uint8
{
	Triangles                                = 0,
	Vertices                                 = 1,
	Parts                                    = 2,
	MaterialSlots                            = 3,
	Textures                                 = 4,
	Textures2K                               = 5,
	Textures1K                               = 6,
	Textures512                              = 7,
	Bones                                    = 8,
	Sockets                                  = 9,
	GPUTime                                  = 10,
	Max                                      = 11,
};

// ScriptStruct CharacterGeneratorAssets.CategoryBoneAttribute
// 0x0048 (0x0048 - 0x0000)
struct FCategoryBoneAttribute final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Rotation;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCategoryBoneAttribute) == 0x000008, "Wrong alignment on FCategoryBoneAttribute");
static_assert(sizeof(FCategoryBoneAttribute) == 0x000048, "Wrong size on FCategoryBoneAttribute");
static_assert(offsetof(FCategoryBoneAttribute, Location) == 0x000000, "Member 'FCategoryBoneAttribute::Location' has a wrong offset!");
static_assert(offsetof(FCategoryBoneAttribute, Rotation) == 0x000018, "Member 'FCategoryBoneAttribute::Rotation' has a wrong offset!");
static_assert(offsetof(FCategoryBoneAttribute, Scale) == 0x000030, "Member 'FCategoryBoneAttribute::Scale' has a wrong offset!");

// ScriptStruct CharacterGeneratorAssets.CategoryBone
// 0x0098 (0x0098 - 0x0000)
struct FCategoryBone final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCategoryBoneAttribute                 MinOffset;                                         // 0x0008(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCategoryBoneAttribute                 MaxOffset;                                         // 0x0050(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCategoryBone) == 0x000008, "Wrong alignment on FCategoryBone");
static_assert(sizeof(FCategoryBone) == 0x000098, "Wrong size on FCategoryBone");
static_assert(offsetof(FCategoryBone, Name) == 0x000000, "Member 'FCategoryBone::Name' has a wrong offset!");
static_assert(offsetof(FCategoryBone, MinOffset) == 0x000008, "Member 'FCategoryBone::MinOffset' has a wrong offset!");
static_assert(offsetof(FCategoryBone, MaxOffset) == 0x000050, "Member 'FCategoryBone::MaxOffset' has a wrong offset!");

// ScriptStruct CharacterGeneratorAssets.CategoryMorph
// 0x0020 (0x0020 - 0x0000)
struct FCategoryMorph final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Attribute;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCategoryMorph) == 0x000008, "Wrong alignment on FCategoryMorph");
static_assert(sizeof(FCategoryMorph) == 0x000020, "Wrong size on FCategoryMorph");
static_assert(offsetof(FCategoryMorph, Name) == 0x000000, "Member 'FCategoryMorph::Name' has a wrong offset!");
static_assert(offsetof(FCategoryMorph, Attribute) == 0x000008, "Member 'FCategoryMorph::Attribute' has a wrong offset!");

// ScriptStruct CharacterGeneratorAssets.CategoryItem
// 0x0030 (0x0030 - 0x0000)
struct FCategoryItem final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NiceName;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCategoryBone>                  CategoryBone;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCategoryMorph>                 CategoryMorph;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCategoryItem) == 0x000008, "Wrong alignment on FCategoryItem");
static_assert(sizeof(FCategoryItem) == 0x000030, "Wrong size on FCategoryItem");
static_assert(offsetof(FCategoryItem, Category) == 0x000000, "Member 'FCategoryItem::Category' has a wrong offset!");
static_assert(offsetof(FCategoryItem, NiceName) == 0x000008, "Member 'FCategoryItem::NiceName' has a wrong offset!");
static_assert(offsetof(FCategoryItem, CategoryBone) == 0x000010, "Member 'FCategoryItem::CategoryBone' has a wrong offset!");
static_assert(offsetof(FCategoryItem, CategoryMorph) == 0x000020, "Member 'FCategoryItem::CategoryMorph' has a wrong offset!");

// ScriptStruct CharacterGeneratorAssets.MaterialSkinData
// 0x0050 (0x0050 - 0x0000)
struct FMaterialSkinData final
{
public:
	TMap<class FName, struct FLinearColor>        Material_Parameter;                                // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialSkinData) == 0x000008, "Wrong alignment on FMaterialSkinData");
static_assert(sizeof(FMaterialSkinData) == 0x000050, "Wrong size on FMaterialSkinData");
static_assert(offsetof(FMaterialSkinData, Material_Parameter) == 0x000000, "Member 'FMaterialSkinData::Material_Parameter' has a wrong offset!");

// ScriptStruct CharacterGeneratorAssets.MaterialItem
// 0x0140 (0x0140 - 0x0000)
struct FMaterialItem final
{
public:
	TMap<class FName, float>                      Material_Scalar;                                   // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        Material_Parameter;                                // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, class UTexture2D*>          BaseTexture;                                       // 0x00A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInstance*>   MaterialObjects;                                   // 0x00F0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialItem) == 0x000008, "Wrong alignment on FMaterialItem");
static_assert(sizeof(FMaterialItem) == 0x000140, "Wrong size on FMaterialItem");
static_assert(offsetof(FMaterialItem, Material_Scalar) == 0x000000, "Member 'FMaterialItem::Material_Scalar' has a wrong offset!");
static_assert(offsetof(FMaterialItem, Material_Parameter) == 0x000050, "Member 'FMaterialItem::Material_Parameter' has a wrong offset!");
static_assert(offsetof(FMaterialItem, BaseTexture) == 0x0000A0, "Member 'FMaterialItem::BaseTexture' has a wrong offset!");
static_assert(offsetof(FMaterialItem, MaterialObjects) == 0x0000F0, "Member 'FMaterialItem::MaterialObjects' has a wrong offset!");

// ScriptStruct CharacterGeneratorAssets.SpecifiedSlotMaterialItem
// 0x0050 (0x0050 - 0x0000)
struct FSpecifiedSlotMaterialItem final
{
public:
	TMap<class FName, struct FMaterialItem>       MaterialItem;                                      // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecifiedSlotMaterialItem) == 0x000008, "Wrong alignment on FSpecifiedSlotMaterialItem");
static_assert(sizeof(FSpecifiedSlotMaterialItem) == 0x000050, "Wrong size on FSpecifiedSlotMaterialItem");
static_assert(offsetof(FSpecifiedSlotMaterialItem, MaterialItem) == 0x000000, "Member 'FSpecifiedSlotMaterialItem::MaterialItem' has a wrong offset!");

// ScriptStruct CharacterGeneratorAssets.ClothesStaticMeshData
// 0x0080 (0x0080 - 0x0000)
struct FClothesStaticMeshData final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClothesStaticMeshData) == 0x000010, "Wrong alignment on FClothesStaticMeshData");
static_assert(sizeof(FClothesStaticMeshData) == 0x000080, "Wrong size on FClothesStaticMeshData");
static_assert(offsetof(FClothesStaticMeshData, StaticMesh) == 0x000000, "Member 'FClothesStaticMeshData::StaticMesh' has a wrong offset!");
static_assert(offsetof(FClothesStaticMeshData, Transform) == 0x000010, "Member 'FClothesStaticMeshData::Transform' has a wrong offset!");
static_assert(offsetof(FClothesStaticMeshData, Socket) == 0x000070, "Member 'FClothesStaticMeshData::Socket' has a wrong offset!");

// ScriptStruct CharacterGeneratorAssets.ColorBlock
// 0x0010 (0x0010 - 0x0000)
struct FColorBlock final
{
public:
	int32                                         PositionX;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionY;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorBlock) == 0x000004, "Wrong alignment on FColorBlock");
static_assert(sizeof(FColorBlock) == 0x000010, "Wrong size on FColorBlock");
static_assert(offsetof(FColorBlock, PositionX) == 0x000000, "Member 'FColorBlock::PositionX' has a wrong offset!");
static_assert(offsetof(FColorBlock, PositionY) == 0x000004, "Member 'FColorBlock::PositionY' has a wrong offset!");
static_assert(offsetof(FColorBlock, SizeX) == 0x000008, "Member 'FColorBlock::SizeX' has a wrong offset!");
static_assert(offsetof(FColorBlock, SizeY) == 0x00000C, "Member 'FColorBlock::SizeY' has a wrong offset!");

// ScriptStruct CharacterGeneratorAssets.DrawToRenderTarget2DArrayContext
// 0x0010 (0x0010 - 0x0000)
struct FDrawToRenderTarget2DArrayContext final
{
public:
	class UTextureRenderTarget2DArray*            RenderTarget;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDrawToRenderTarget2DArrayContext) == 0x000008, "Wrong alignment on FDrawToRenderTarget2DArrayContext");
static_assert(sizeof(FDrawToRenderTarget2DArrayContext) == 0x000010, "Wrong size on FDrawToRenderTarget2DArrayContext");
static_assert(offsetof(FDrawToRenderTarget2DArrayContext, RenderTarget) == 0x000000, "Member 'FDrawToRenderTarget2DArrayContext::RenderTarget' has a wrong offset!");

// ScriptStruct CharacterGeneratorAssets.NPCRowStruct
// 0x01B0 (0x01B8 - 0x0008)
struct FNPCRowStruct final : public FTableRowBase
{
public:
	class FString                                 NPCName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      bodyCategoryValueMap;                              // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UCharacterGenDataAsset*                 bodyDataAsset;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      faceCategoryValueMap;                              // 0x0070(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UCharacterGenDataAsset*                 faceDataAsset;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class USkeletalMesh*>     SkeletalMeshLib;                                   // 0x00C8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class USkeletalMesh*>     BakedSkeletalMeshLib;                              // 0x0118(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FMaterialItem>       MaterialItem;                                      // 0x0168(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNPCRowStruct) == 0x000008, "Wrong alignment on FNPCRowStruct");
static_assert(sizeof(FNPCRowStruct) == 0x0001B8, "Wrong size on FNPCRowStruct");
static_assert(offsetof(FNPCRowStruct, NPCName) == 0x000008, "Member 'FNPCRowStruct::NPCName' has a wrong offset!");
static_assert(offsetof(FNPCRowStruct, bodyCategoryValueMap) == 0x000018, "Member 'FNPCRowStruct::bodyCategoryValueMap' has a wrong offset!");
static_assert(offsetof(FNPCRowStruct, bodyDataAsset) == 0x000068, "Member 'FNPCRowStruct::bodyDataAsset' has a wrong offset!");
static_assert(offsetof(FNPCRowStruct, faceCategoryValueMap) == 0x000070, "Member 'FNPCRowStruct::faceCategoryValueMap' has a wrong offset!");
static_assert(offsetof(FNPCRowStruct, faceDataAsset) == 0x0000C0, "Member 'FNPCRowStruct::faceDataAsset' has a wrong offset!");
static_assert(offsetof(FNPCRowStruct, SkeletalMeshLib) == 0x0000C8, "Member 'FNPCRowStruct::SkeletalMeshLib' has a wrong offset!");
static_assert(offsetof(FNPCRowStruct, BakedSkeletalMeshLib) == 0x000118, "Member 'FNPCRowStruct::BakedSkeletalMeshLib' has a wrong offset!");
static_assert(offsetof(FNPCRowStruct, MaterialItem) == 0x000168, "Member 'FNPCRowStruct::MaterialItem' has a wrong offset!");

}

