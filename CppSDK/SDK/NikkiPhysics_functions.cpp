#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NikkiPhysics

#include "Basic.hpp"

#include "NikkiPhysics_classes.hpp"
#include "NikkiPhysics_parameters.hpp"


namespace SDK
{

// Function NikkiPhysics.NikkiPhysicsAttachmentInterface.GetAttachedParentComponent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* INikkiPhysicsAttachmentInterface::GetAttachedParentComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPhysicsAttachmentInterface", "GetAttachedParentComponent");

	Params::NikkiPhysicsAttachmentInterface_GetAttachedParentComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NikkiPhysics.NikkiPhysicsAttachmentInterface.GetAttachmentComponent
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* INikkiPhysicsAttachmentInterface::GetAttachmentComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPhysicsAttachmentInterface", "GetAttachmentComponent");

	Params::NikkiPhysicsAttachmentInterface_GetAttachmentComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NikkiPhysics.NikkiPhysicsFunctions.AddDynamicWind
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    bEnableWind                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNikkiPhysicsManagerComponent*    NikkiPhyManager                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNikki_WindSource&         WindSource                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ENikki_SpaceType                        Space                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENikki_WindAccumType                    WindAccumType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNikkiPhysicsFunctions::AddDynamicWind(bool bEnableWind, class UNikkiPhysicsManagerComponent* NikkiPhyManager, const struct FNikki_WindSource& WindSource, ENikki_SpaceType Space, ENikki_WindAccumType WindAccumType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NikkiPhysicsFunctions", "AddDynamicWind");

	Params::NikkiPhysicsFunctions_AddDynamicWind Parms{};

	Parms.bEnableWind = bEnableWind;
	Parms.NikkiPhyManager = NikkiPhyManager;
	Parms.WindSource = std::move(WindSource);
	Parms.Space = Space;
	Parms.WindAccumType = WindAccumType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NikkiPhysics.NikkiPhysicsFunctions.ForceTickClothPhysics
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           InSkeletalMeshComponent                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNikkiPhysicsFunctions::ForceTickClothPhysics(class USkeletalMeshComponent* InSkeletalMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NikkiPhysicsFunctions", "ForceTickClothPhysics");

	Params::NikkiPhysicsFunctions_ForceTickClothPhysics Parms{};

	Parms.InSkeletalMeshComponent = InSkeletalMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NikkiPhysics.NikkiPhysicsFunctions.GetNikkiPhysicsClothThickness
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             SearchRadius                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   OffsetCompSpace                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNikkiPhysicsFunctions::GetNikkiPhysicsClothThickness(class UAnimInstance* AnimInstance, const class FName BoneName, const float SearchRadius, const struct FVector& OffsetCompSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NikkiPhysicsFunctions", "GetNikkiPhysicsClothThickness");

	Params::NikkiPhysicsFunctions_GetNikkiPhysicsClothThickness Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.BoneName = BoneName;
	Parms.SearchRadius = SearchRadius;
	Parms.OffsetCompSpace = std::move(OffsetCompSpace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NikkiPhysics.NikkiPhysicsFunctions.GetNikkiPhysicsClothThicknessReal
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             SearchRadius                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   OffsetCompSpace                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNikkiPhysicsFunctions::GetNikkiPhysicsClothThicknessReal(class UAnimInstance* AnimInstance, const class FName BoneName, const float SearchRadius, const struct FVector& OffsetCompSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NikkiPhysicsFunctions", "GetNikkiPhysicsClothThicknessReal");

	Params::NikkiPhysicsFunctions_GetNikkiPhysicsClothThicknessReal Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.BoneName = BoneName;
	Parms.SearchRadius = SearchRadius;
	Parms.OffsetCompSpace = std::move(OffsetCompSpace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NikkiPhysics.NikkiPhysicsFunctions.HasNikkiPhysicsNode
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNikkiPhysicsFunctions::HasNikkiPhysicsNode(class UAnimInstance* AnimInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NikkiPhysicsFunctions", "HasNikkiPhysicsNode");

	Params::NikkiPhysicsFunctions_HasNikkiPhysicsNode Parms{};

	Parms.AnimInstance = AnimInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NikkiPhysics.NikkiPhysicsFunctions.ResimulationTrigger
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ForceRunNikkiPhysicsStepTimes                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNikkiPhysicsFunctions::ResimulationTrigger(class UAnimInstance* AnimInstance, int32 ForceRunNikkiPhysicsStepTimes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NikkiPhysicsFunctions", "ResimulationTrigger");

	Params::NikkiPhysicsFunctions_ResimulationTrigger Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.ForceRunNikkiPhysicsStepTimes = ForceRunNikkiPhysicsStepTimes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NikkiPhysics.NikkiPhysicsFunctions.ResimulationTriggerOnSkelMeshComponent
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ForceRunNikkiPhysicsStepTimes                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNikkiPhysicsFunctions::ResimulationTriggerOnSkelMeshComponent(class USkeletalMeshComponent* SkeletalMeshComponent, int32 ForceRunNikkiPhysicsStepTimes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NikkiPhysicsFunctions", "ResimulationTriggerOnSkelMeshComponent");

	Params::NikkiPhysicsFunctions_ResimulationTriggerOnSkelMeshComponent Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.ForceRunNikkiPhysicsStepTimes = ForceRunNikkiPhysicsStepTimes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NikkiPhysics.NikkiPhysicsFunctions.SetNikkiPhysicsAnimBoneMask
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              BonesRemoveColliders                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class FName>&              BonesAnim                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UNikkiPhysicsFunctions::SetNikkiPhysicsAnimBoneMask(class UAnimInstance* AnimInstance, const TArray<class FName>& BonesRemoveColliders, const TArray<class FName>& BonesAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NikkiPhysicsFunctions", "SetNikkiPhysicsAnimBoneMask");

	Params::NikkiPhysicsFunctions_SetNikkiPhysicsAnimBoneMask Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.BonesRemoveColliders = std::move(BonesRemoveColliders);
	Parms.BonesAnim = std::move(BonesAnim);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

