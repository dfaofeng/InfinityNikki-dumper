#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Multiplayer_PaperAirplane

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MultiplayerMovePlatform_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Multiplayer_PaperAirplane.BP_Multiplayer_PaperAirplane_C
// 0x0080 (0x0568 - 0x04E8)
class ABP_Multiplayer_PaperAirplane_C final : public ABP_MultiplayerMovePlatform_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Multiplayer_PaperAirplane_C;     // 0x04E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Trigger_Back;                                      // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InvisibleWall_Back;                                // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_PaperAirplane_appear;                           // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Trigger_Left;                                      // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Trigger_Right;                                     // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_MagicGrid_Range1;                               // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Tail;                                           // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Paper_Wind;                                     // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InvisibleWall_Top;                                 // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InvisibleWall_Left;                                // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InvisibleWall_Right;                               // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bTurningLeft;                                      // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RollingAngle;                                      // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpSpeed;                                       // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OverlapWallCount;                                  // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasActivated;                                     // 0x0564(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AdjustRotation(double DeltaTime);
	void BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BP_Init();
	void BP_StartMove();
	void BP_StopMove();
	void ExecuteUbergraph_BP_Multiplayer_PaperAirplane(int32 EntryPoint);
	void SetInvisibleWall(bool bEnable);
	void TriggerWallFX(bool bEnter);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Multiplayer_PaperAirplane_C">();
	}
	static class ABP_Multiplayer_PaperAirplane_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Multiplayer_PaperAirplane_C>();
	}
};
static_assert(alignof(ABP_Multiplayer_PaperAirplane_C) == 0x000008, "Wrong alignment on ABP_Multiplayer_PaperAirplane_C");
static_assert(sizeof(ABP_Multiplayer_PaperAirplane_C) == 0x000568, "Wrong size on ABP_Multiplayer_PaperAirplane_C");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, UberGraphFrame_BP_Multiplayer_PaperAirplane_C) == 0x0004E8, "Member 'ABP_Multiplayer_PaperAirplane_C::UberGraphFrame_BP_Multiplayer_PaperAirplane_C' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, Trigger_Back) == 0x0004F0, "Member 'ABP_Multiplayer_PaperAirplane_C::Trigger_Back' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, InvisibleWall_Back) == 0x0004F8, "Member 'ABP_Multiplayer_PaperAirplane_C::InvisibleWall_Back' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, NS_PaperAirplane_appear) == 0x000500, "Member 'ABP_Multiplayer_PaperAirplane_C::NS_PaperAirplane_appear' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, Trigger_Left) == 0x000508, "Member 'ABP_Multiplayer_PaperAirplane_C::Trigger_Left' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, Trigger_Right) == 0x000510, "Member 'ABP_Multiplayer_PaperAirplane_C::Trigger_Right' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, NS_MagicGrid_Range1) == 0x000518, "Member 'ABP_Multiplayer_PaperAirplane_C::NS_MagicGrid_Range1' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, NS_Tail) == 0x000520, "Member 'ABP_Multiplayer_PaperAirplane_C::NS_Tail' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, NS_Paper_Wind) == 0x000528, "Member 'ABP_Multiplayer_PaperAirplane_C::NS_Paper_Wind' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, InvisibleWall_Top) == 0x000530, "Member 'ABP_Multiplayer_PaperAirplane_C::InvisibleWall_Top' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, InvisibleWall_Left) == 0x000538, "Member 'ABP_Multiplayer_PaperAirplane_C::InvisibleWall_Left' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, InvisibleWall_Right) == 0x000540, "Member 'ABP_Multiplayer_PaperAirplane_C::InvisibleWall_Right' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, bTurningLeft) == 0x000548, "Member 'ABP_Multiplayer_PaperAirplane_C::bTurningLeft' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, RollingAngle) == 0x000550, "Member 'ABP_Multiplayer_PaperAirplane_C::RollingAngle' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, InterpSpeed) == 0x000558, "Member 'ABP_Multiplayer_PaperAirplane_C::InterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, OverlapWallCount) == 0x000560, "Member 'ABP_Multiplayer_PaperAirplane_C::OverlapWallCount' has a wrong offset!");
static_assert(offsetof(ABP_Multiplayer_PaperAirplane_C, bHasActivated) == 0x000564, "Member 'ABP_Multiplayer_PaperAirplane_C::bHasActivated' has a wrong offset!");

}

