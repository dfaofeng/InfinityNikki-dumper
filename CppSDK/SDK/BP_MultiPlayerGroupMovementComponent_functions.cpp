#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MultiPlayerGroupMovementComponent

#include "Basic.hpp"

#include "BP_MultiPlayerGroupMovementComponent_classes.hpp"
#include "BP_MultiPlayerGroupMovementComponent_parameters.hpp"


namespace SDK
{

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 MaximumDistanceBetweenLeaderAndFollower                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower(double* MaximumDistanceBetweenLeaderAndFollower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaximumDistanceBetweenLeaderAndFollower != nullptr)
		*MaximumDistanceBetweenLeaderAndFollower = Parms.MaximumDistanceBetweenLeaderAndFollower;
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_CurrentTargetWorldAnchorPointTransform
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform*                      BP_CurrentTargetWorldAnchorPointTransform_0            (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_Get_CurrentTargetWorldAnchorPointTransform(struct FTransform* BP_CurrentTargetWorldAnchorPointTransform_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_Get_CurrentTargetWorldAnchorPointTransform");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_Get_CurrentTargetWorldAnchorPointTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BP_CurrentTargetWorldAnchorPointTransform_0 != nullptr)
		*BP_CurrentTargetWorldAnchorPointTransform_0 = std::move(Parms.BP_CurrentTargetWorldAnchorPointTransform_0);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_FollowerEntityId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64*                                  Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_Get_FollowerEntityId(int64* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_Get_FollowerEntityId");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_Get_FollowerEntityId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_IsHoldingHands
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_Get_IsHoldingHands(bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_Get_IsHoldingHands");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingHands Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_IsHoldingRightHandOrLeftHand
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_Get_IsHoldingRightHandOrLeftHand(bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_Get_IsHoldingRightHandOrLeftHand");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingRightHandOrLeftHand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_IsLeaderOrFollower
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_Get_IsLeaderOrFollower(bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_Get_IsLeaderOrFollower");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsLeaderOrFollower Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_LeaderEntityId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64*                                  Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_Get_LeaderEntityId(int64* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_Get_LeaderEntityId");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_Get_LeaderEntityId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_OtherCharacterToBeingHeldHand
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor**                          Ret                                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_Get_OtherCharacterToBeingHeldHand(class AActor** Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_Get_OtherCharacterToBeingHeldHand");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_Get_OtherCharacterToBeingHeldHand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_ReleaseHandHoldingMode
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MultiPlayerGroupMovementComponent_C::BP_ReleaseHandHoldingMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_ReleaseHandHoldingMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_ResetFollowerWalkRelativeLocation
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MultiPlayerGroupMovementComponent_C::BP_ResetFollowerWalkRelativeLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_ResetFollowerWalkRelativeLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_RevertFollowerGravityScale
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MultiPlayerGroupMovementComponent_C::BP_RevertFollowerGravityScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_RevertFollowerGravityScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_SetEnableGroupConstraints
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_SetEnableGroupConstraints(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_SetEnableGroupConstraints");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableGroupConstraints Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_SetEnableHoldingHandsIK
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_SetEnableHoldingHandsIK(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_SetEnableHoldingHandsIK");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableHoldingHandsIK Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_SetEnableWeaklyholdingHandsMoving
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_SetEnableWeaklyholdingHandsMoving(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_SetEnableWeaklyholdingHandsMoving");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableWeaklyholdingHandsMoving Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_SetFollowerGravityScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  GravityValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_SetFollowerGravityScale(double GravityValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_SetFollowerGravityScale");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerGravityScale Parms{};

	Parms.GravityValue = GravityValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_SetFollowerWalkRelativeLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLeftLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NewRelativeLocation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_SetFollowerWalkRelativeLocation(bool bLeftLocation, const struct FVector& NewRelativeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_SetFollowerWalkRelativeLocation");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerWalkRelativeLocation Parms{};

	Parms.bLeftLocation = bLeftLocation;
	Parms.NewRelativeLocation = std::move(NewRelativeLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_TryHoldingHandsWithOthers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSelfIsLeader                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ACharacter*                       OtherCharacter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_TryHoldingHandsWithOthers(bool bSelfIsLeader, class ACharacter* OtherCharacter, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_TryHoldingHandsWithOthers");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers Parms{};

	Parms.bSelfIsLeader = bSelfIsLeader;
	Parms.OtherCharacter = OtherCharacter;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_TryHoldingHandsWithOthersByEntityId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSelfIsLeader                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64                                   OtherCharacterEntityId                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_TryHoldingHandsWithOthersByEntityId(bool bSelfIsLeader, int64 OtherCharacterEntityId, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_TryHoldingHandsWithOthersByEntityId");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId Parms{};

	Parms.bSelfIsLeader = bSelfIsLeader;
	Parms.OtherCharacterEntityId = OtherCharacterEntityId;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_UpdateHoldingHandsConnectionNiagaraParams
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsLeaderOrFollower                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRightHandOrLeftHand                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::BP_UpdateHoldingHandsConnectionNiagaraParams(bool bIsLeaderOrFollower, bool bRightHandOrLeftHand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "BP_UpdateHoldingHandsConnectionNiagaraParams");

	Params::BP_MultiPlayerGroupMovementComponent_C_BP_UpdateHoldingHandsConnectionNiagaraParams Parms{};

	Parms.bIsLeaderOrFollower = bIsLeaderOrFollower;
	Parms.bRightHandOrLeftHand = bRightHandOrLeftHand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent");

	Params::BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.OnRep_BP_Rep_LDCanDoAnchorPushWithWL
// (BlueprintCallable, BlueprintEvent)

void UBP_MultiPlayerGroupMovementComponent_C::OnRep_BP_Rep_LDCanDoAnchorPushWithWL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "OnRep_BP_Rep_LDCanDoAnchorPushWithWL");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.OnRep_BP_Replicated_EnableHandHoldingAnchorPull
// (BlueprintCallable, BlueprintEvent)

void UBP_MultiPlayerGroupMovementComponent_C::OnRep_BP_Replicated_EnableHandHoldingAnchorPull()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "OnRep_BP_Replicated_EnableHandHoldingAnchorPull");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.OnRep_BP_Replicated_EnableHandInHandGesture
// (BlueprintCallable, BlueprintEvent)

void UBP_MultiPlayerGroupMovementComponent_C::OnRep_BP_Replicated_EnableHandInHandGesture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "OnRep_BP_Replicated_EnableHandInHandGesture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.OnRep_BP_Replicated_IsHoldingHands
// (BlueprintCallable, BlueprintEvent)

void UBP_MultiPlayerGroupMovementComponent_C::OnRep_BP_Replicated_IsHoldingHands()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "OnRep_BP_Replicated_IsHoldingHands");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.OnRep_BP_Replicated_IsHoldingHandsFloatMoving
// (BlueprintCallable, BlueprintEvent)

void UBP_MultiPlayerGroupMovementComponent_C::OnRep_BP_Replicated_IsHoldingHandsFloatMoving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "OnRep_BP_Replicated_IsHoldingHandsFloatMoving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.OnRep_BP_Replicated_IsInvitingToHoldHands
// (BlueprintCallable, BlueprintEvent)

void UBP_MultiPlayerGroupMovementComponent_C::OnRep_BP_Replicated_IsInvitingToHoldHands()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "OnRep_BP_Replicated_IsInvitingToHoldHands");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_MultiPlayerGroupMovementComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "ReceiveEndPlay");

	Params::BP_MultiPlayerGroupMovementComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MultiPlayerGroupMovementComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "ReceiveTick");

	Params::BP_MultiPlayerGroupMovementComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_MultiPlayerGroupMovementComponent_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MultiPlayerGroupMovementComponent_C", "GetModuleName");

	Params::BP_MultiPlayerGroupMovementComponent_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

