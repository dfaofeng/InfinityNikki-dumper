#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicEnvironmentSystem

#include "Basic.hpp"

#include "DynamicEnvironmentSystem_classes.hpp"
#include "DynamicEnvironmentSystem_parameters.hpp"


namespace SDK
{

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.BeginUpdateTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ADynamicEnvironmentSystemManager* DynamicEnvironmentSystemManager                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NowTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicEnvironmentSystemBPLibrary::BeginUpdateTime(class ADynamicEnvironmentSystemManager* DynamicEnvironmentSystemManager, float NowTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "BeginUpdateTime");

	Params::DynamicEnvironmentSystemBPLibrary_BeginUpdateTime Parms{};

	Parms.DynamicEnvironmentSystemManager = DynamicEnvironmentSystemManager;
	Parms.NowTime = NowTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.ChangeWeatherEventEnd
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ADynamicWeatherVolume*            VolumeFrom                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADynamicWeatherVolume*            VolumeTo                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicEnvironmentSystemBPLibrary::ChangeWeatherEventEnd(class ADynamicWeatherVolume* VolumeFrom, class ADynamicWeatherVolume* VolumeTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "ChangeWeatherEventEnd");

	Params::DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventEnd Parms{};

	Parms.VolumeFrom = VolumeFrom;
	Parms.VolumeTo = VolumeTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.ChangeWeatherEventIsReady
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ADynamicWeatherVolume*            VolumeFrom                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADynamicWeatherVolume*            VolumeTo                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicEnvironmentSystemBPLibrary::ChangeWeatherEventIsReady(class ADynamicWeatherVolume* VolumeFrom, class ADynamicWeatherVolume* VolumeTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "ChangeWeatherEventIsReady");

	Params::DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady Parms{};

	Parms.VolumeFrom = VolumeFrom;
	Parms.VolumeTo = VolumeTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.CopyRuntimeCurveLinearColor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FRuntimeCurveLinearColor&  RuntimeCurve                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCurveLinearColor*                CurveLinearColor                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicEnvironmentSystemBPLibrary::CopyRuntimeCurveLinearColor(const struct FRuntimeCurveLinearColor& RuntimeCurve, class UCurveLinearColor* CurveLinearColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "CopyRuntimeCurveLinearColor");

	Params::DynamicEnvironmentSystemBPLibrary_CopyRuntimeCurveLinearColor Parms{};

	Parms.RuntimeCurve = std::move(RuntimeCurve);
	Parms.CurveLinearColor = CurveLinearColor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetDynamicEnvironmentSystemManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADynamicEnvironmentSystemManager* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADynamicEnvironmentSystemManager* UDynamicEnvironmentSystemBPLibrary::GetDynamicEnvironmentSystemManager(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "GetDynamicEnvironmentSystemManager");

	Params::DynamicEnvironmentSystemBPLibrary_GetDynamicEnvironmentSystemManager Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetEnvironmentLevelConfigManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AEnvironmentLevelConfigManager*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AEnvironmentLevelConfigManager* UDynamicEnvironmentSystemBPLibrary::GetEnvironmentLevelConfigManager(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "GetEnvironmentLevelConfigManager");

	Params::DynamicEnvironmentSystemBPLibrary_GetEnvironmentLevelConfigManager Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetRuntimeCurveLinearColorExternal
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRuntimeCurveLinearColor&  RuntimeCurve                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCurveLinearColor*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCurveLinearColor* UDynamicEnvironmentSystemBPLibrary::GetRuntimeCurveLinearColorExternal(const struct FRuntimeCurveLinearColor& RuntimeCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "GetRuntimeCurveLinearColorExternal");

	Params::DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorExternal Parms{};

	Parms.RuntimeCurve = std::move(RuntimeCurve);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetRuntimeCurveLinearColorValue
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRuntimeCurveLinearColor&  RuntimeCurve                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   InTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UDynamicEnvironmentSystemBPLibrary::GetRuntimeCurveLinearColorValue(const struct FRuntimeCurveLinearColor& RuntimeCurve, float InTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "GetRuntimeCurveLinearColorValue");

	Params::DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue Parms{};

	Parms.RuntimeCurve = std::move(RuntimeCurve);
	Parms.InTime = InTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetRuntimeFloatCurveExternal
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRuntimeFloatCurve&        RuntimeCurve                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCurveFloat*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCurveFloat* UDynamicEnvironmentSystemBPLibrary::GetRuntimeFloatCurveExternal(const struct FRuntimeFloatCurve& RuntimeCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "GetRuntimeFloatCurveExternal");

	Params::DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveExternal Parms{};

	Parms.RuntimeCurve = std::move(RuntimeCurve);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetRuntimeFloatCurveValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRuntimeFloatCurve&        RuntimeCurve                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   InTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicEnvironmentSystemBPLibrary::GetRuntimeFloatCurveValue(const struct FRuntimeFloatCurve& RuntimeCurve, float InTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "GetRuntimeFloatCurveValue");

	Params::DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue Parms{};

	Parms.RuntimeCurve = std::move(RuntimeCurve);
	Parms.InTime = InTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetTargetOverridePropertyInCharacterLerpConfigByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FCharacterLerpConfig&      InCharacterLerpConfig                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             InPropertyName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicEnvironmentSystemBPLibrary::GetTargetOverridePropertyInCharacterLerpConfigByName(const struct FCharacterLerpConfig& InCharacterLerpConfig, class FName InPropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "GetTargetOverridePropertyInCharacterLerpConfigByName");

	Params::DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName Parms{};

	Parms.InCharacterLerpConfig = std::move(InCharacterLerpConfig);
	Parms.InPropertyName = InPropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetTargetOverridePropertyInPPSettingByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FPostProcessSettings&      InPPSetting                                            (Parm, NativeAccessSpecifierPublic)
// class FName                             InPropertyName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicEnvironmentSystemBPLibrary::GetTargetOverridePropertyInPPSettingByName(const struct FPostProcessSettings& InPPSetting, class FName InPropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "GetTargetOverridePropertyInPPSettingByName");

	Params::DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName Parms{};

	Parms.InPPSetting = std::move(InPPSetting);
	Parms.InPropertyName = InPropertyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.IsPlayingInEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicEnvironmentSystemBPLibrary::IsPlayingInEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "IsPlayingInEditor");

	Params::DynamicEnvironmentSystemBPLibrary_IsPlayingInEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.LoadDynamicEnvironmentLerpConfigByDataTable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDataTable*                       EnvironmentConfigFile                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      SpanName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutTodConfigPath                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutPPConfigPath                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutCharacterConfigPath                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDynamicEnvironmentLerpConfig*   OutEnvironmentLerpConfig                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicEnvironmentSystemBPLibrary::LoadDynamicEnvironmentLerpConfigByDataTable(class UDataTable* EnvironmentConfigFile, const class FName& SpanName, class FString* OutTodConfigPath, class FString* OutPPConfigPath, class FString* OutCharacterConfigPath, struct FDynamicEnvironmentLerpConfig* OutEnvironmentLerpConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "LoadDynamicEnvironmentLerpConfigByDataTable");

	Params::DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable Parms{};

	Parms.EnvironmentConfigFile = EnvironmentConfigFile;
	Parms.SpanName = SpanName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTodConfigPath != nullptr)
		*OutTodConfigPath = std::move(Parms.OutTodConfigPath);

	if (OutPPConfigPath != nullptr)
		*OutPPConfigPath = std::move(Parms.OutPPConfigPath);

	if (OutCharacterConfigPath != nullptr)
		*OutCharacterConfigPath = std::move(Parms.OutCharacterConfigPath);

	if (OutEnvironmentLerpConfig != nullptr)
		*OutEnvironmentLerpConfig = std::move(Parms.OutEnvironmentLerpConfig);

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.LoadDynamicEnvironmentLerpConfigIfNeeded
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ADynamicWeatherVolume*            DynamicWeatherVolume                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      SpanName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutTodConfigPath                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutPPConfigPath                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutCharacterConfigPath                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDynamicEnvironmentLerpConfig*   OutEnvironmentLerpConfig                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicEnvironmentSystemBPLibrary::LoadDynamicEnvironmentLerpConfigIfNeeded(class ADynamicWeatherVolume* DynamicWeatherVolume, const class FName& SpanName, class FString* OutTodConfigPath, class FString* OutPPConfigPath, class FString* OutCharacterConfigPath, struct FDynamicEnvironmentLerpConfig* OutEnvironmentLerpConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "LoadDynamicEnvironmentLerpConfigIfNeeded");

	Params::DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded Parms{};

	Parms.DynamicWeatherVolume = DynamicWeatherVolume;
	Parms.SpanName = SpanName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTodConfigPath != nullptr)
		*OutTodConfigPath = std::move(Parms.OutTodConfigPath);

	if (OutPPConfigPath != nullptr)
		*OutPPConfigPath = std::move(Parms.OutPPConfigPath);

	if (OutCharacterConfigPath != nullptr)
		*OutCharacterConfigPath = std::move(Parms.OutCharacterConfigPath);

	if (OutEnvironmentLerpConfig != nullptr)
		*OutEnvironmentLerpConfig = std::move(Parms.OutEnvironmentLerpConfig);

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.PreRequestAsyncLoad
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       EnvironmentConfigFile                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicEnvironmentSystemBPLibrary::PreRequestAsyncLoad(class UDataTable* EnvironmentConfigFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "PreRequestAsyncLoad");

	Params::DynamicEnvironmentSystemBPLibrary_PreRequestAsyncLoad Parms{};

	Parms.EnvironmentConfigFile = EnvironmentConfigFile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.SaveToCharacterConfig
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             CharacterConfig                                        (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCharacterLerpConfig&      InCharacterSetting                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicEnvironmentSystemBPLibrary::SaveToCharacterConfig(TSoftClassPtr<class UClass> CharacterConfig, const struct FCharacterLerpConfig& InCharacterSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "SaveToCharacterConfig");

	Params::DynamicEnvironmentSystemBPLibrary_SaveToCharacterConfig Parms{};

	Parms.CharacterConfig = CharacterConfig;
	Parms.InCharacterSetting = std::move(InCharacterSetting);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.SaveToPPConfig
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             PPConfig                                               (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPostProcessSettings&      InPPSetting                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FMobilePPSettings&         InMobilePPSettings                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicEnvironmentSystemBPLibrary::SaveToPPConfig(TSoftClassPtr<class UClass> PPConfig, const struct FPostProcessSettings& InPPSetting, const struct FMobilePPSettings& InMobilePPSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "SaveToPPConfig");

	Params::DynamicEnvironmentSystemBPLibrary_SaveToPPConfig Parms{};

	Parms.PPConfig = PPConfig;
	Parms.InPPSetting = std::move(InPPSetting);
	Parms.InMobilePPSettings = std::move(InMobilePPSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.SaveToTODConfig
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             TODConfig                                              (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTODLerpConfig&            InTODSetting                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FString, struct FRuntimeFloatCurve>&InCustomEnvironmentSettingsLerpCurve                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FEnvironmentLerpConfig&    EnvironmentSetting                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FWeatherTexturesConfig&    TextureSetting                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDynamicEnvironmentSystemBPLibrary::SaveToTODConfig(TSoftClassPtr<class UClass> TODConfig, const struct FTODLerpConfig& InTODSetting, const TMap<class FString, struct FRuntimeFloatCurve>& InCustomEnvironmentSettingsLerpCurve, const struct FEnvironmentLerpConfig& EnvironmentSetting, const struct FWeatherTexturesConfig& TextureSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "SaveToTODConfig");

	Params::DynamicEnvironmentSystemBPLibrary_SaveToTODConfig Parms{};

	Parms.TODConfig = TODConfig;
	Parms.InTODSetting = std::move(InTODSetting);
	Parms.InCustomEnvironmentSettingsLerpCurve = std::move(InCustomEnvironmentSettingsLerpCurve);
	Parms.EnvironmentSetting = std::move(EnvironmentSetting);
	Parms.TextureSetting = std::move(TextureSetting);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.SaveToWeatherConfig
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             WeatherConfig                                          (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FWeatherBaseLerpConfig&    InWeatherControl                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDynamicEnvironmentSystemBPLibrary::SaveToWeatherConfig(TSoftClassPtr<class UClass> WeatherConfig, const struct FWeatherBaseLerpConfig& InWeatherControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicEnvironmentSystemBPLibrary", "SaveToWeatherConfig");

	Params::DynamicEnvironmentSystemBPLibrary_SaveToWeatherConfig Parms{};

	Parms.WeatherConfig = WeatherConfig;
	Parms.InWeatherControl = std::move(InWeatherControl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.BlendTextures
// (Final, Native, Public, BlueprintCallable)

void ADynamicEnvironmentSystemManager::BlendTextures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicEnvironmentSystemManager", "BlendTextures");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.GetFinalPostProcessSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FPostProcessSettings       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FPostProcessSettings ADynamicEnvironmentSystemManager::GetFinalPostProcessSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicEnvironmentSystemManager", "GetFinalPostProcessSettings");

	Params::DynamicEnvironmentSystemManager_GetFinalPostProcessSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.GetFinalWeatherSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FFinalWeatherSettings      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FFinalWeatherSettings ADynamicEnvironmentSystemManager::GetFinalWeatherSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicEnvironmentSystemManager", "GetFinalWeatherSettings");

	Params::DynamicEnvironmentSystemManager_GetFinalWeatherSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.GetPhotoFilterFinalPPSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FPhotoFilterPPSettings     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FPhotoFilterPPSettings ADynamicEnvironmentSystemManager::GetPhotoFilterFinalPPSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicEnvironmentSystemManager", "GetPhotoFilterFinalPPSettings");

	Params::DynamicEnvironmentSystemManager_GetPhotoFilterFinalPPSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.GetWeatherWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   WeatherID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADynamicEnvironmentSystemManager::GetWeatherWeight(int32 WeatherID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicEnvironmentSystemManager", "GetWeatherWeight");

	Params::DynamicEnvironmentSystemManager_GetWeatherWeight Parms{};

	Parms.WeatherID = WeatherID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.RemoveWeatherWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   WeatherID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADynamicEnvironmentSystemManager::RemoveWeatherWeight(int32 WeatherID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicEnvironmentSystemManager", "RemoveWeatherWeight");

	Params::DynamicEnvironmentSystemManager_RemoveWeatherWeight Parms{};

	Parms.WeatherID = WeatherID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.SetWeatherWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   WeatherID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Weight                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADynamicEnvironmentSystemManager::SetWeatherWeight(int32 WeatherID, float Weight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicEnvironmentSystemManager", "SetWeatherWeight");

	Params::DynamicEnvironmentSystemManager_SetWeatherWeight Parms{};

	Parms.WeatherID = WeatherID;
	Parms.Weight = Weight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.ShouldUpdateEnvironment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADynamicEnvironmentSystemManager::ShouldUpdateEnvironment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicEnvironmentSystemManager", "ShouldUpdateEnvironment");

	Params::DynamicEnvironmentSystemManager_ShouldUpdateEnvironment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.ShouldUpdateExponentialHeightFog
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADynamicEnvironmentSystemManager::ShouldUpdateExponentialHeightFog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicEnvironmentSystemManager", "ShouldUpdateExponentialHeightFog");

	Params::DynamicEnvironmentSystemManager_ShouldUpdateExponentialHeightFog Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.ShouldUpdateSkyAtmosphere
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADynamicEnvironmentSystemManager::ShouldUpdateSkyAtmosphere()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicEnvironmentSystemManager", "ShouldUpdateSkyAtmosphere");

	Params::DynamicEnvironmentSystemManager_ShouldUpdateSkyAtmosphere Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.ShouldUpdateSunAndSkyLight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADynamicEnvironmentSystemManager::ShouldUpdateSunAndSkyLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicEnvironmentSystemManager", "ShouldUpdateSunAndSkyLight");

	Params::DynamicEnvironmentSystemManager_ShouldUpdateSunAndSkyLight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicWeatherComponent.OnCreated
// (Event, Public, BlueprintEvent)

void UDynamicWeatherComponent::OnCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherComponent", "OnCreated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicEnvironmentSystem.DynamicWeatherComponent.OnDestroyed
// (Event, Public, BlueprintEvent)

void UDynamicWeatherComponent::OnDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherComponent", "OnDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicEnvironmentSystem.DynamicWeatherComponent.OnFadeIn
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicWeatherComponent::OnFadeIn(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherComponent", "OnFadeIn");

	Params::DynamicWeatherComponent_OnFadeIn Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicEnvironmentSystem.DynamicWeatherComponent.OnFadeInComplete
// (Event, Public, BlueprintEvent)

void UDynamicWeatherComponent::OnFadeInComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherComponent", "OnFadeInComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicEnvironmentSystem.DynamicWeatherComponent.OnFadeOut
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicWeatherComponent::OnFadeOut(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherComponent", "OnFadeOut");

	Params::DynamicWeatherComponent_OnFadeOut Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicEnvironmentSystem.DynamicWeatherComponent.OnFadeOutComplete
// (Event, Public, BlueprintEvent)

void UDynamicWeatherComponent::OnFadeOutComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherComponent", "OnFadeOutComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicEnvironmentSystem.DynamicWeatherManager.ChangeToWeather
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ADynamicWeatherVolume*            WeatherVolume                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionDelay                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionDuration                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADynamicWeatherManager::ChangeToWeather(class ADynamicWeatherVolume* WeatherVolume, float TransitionDelay, float TransitionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherManager", "ChangeToWeather");

	Params::DynamicWeatherManager_ChangeToWeather Parms{};

	Parms.WeatherVolume = WeatherVolume;
	Parms.TransitionDelay = TransitionDelay;
	Parms.TransitionDuration = TransitionDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWeatherManager.ChangeWeather
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   WeatherIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionDelay                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionDuration                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADynamicWeatherManager::ChangeWeather(int32 WeatherIndex, float TransitionDelay, float TransitionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherManager", "ChangeWeather");

	Params::DynamicWeatherManager_ChangeWeather Parms{};

	Parms.WeatherIndex = WeatherIndex;
	Parms.TransitionDelay = TransitionDelay;
	Parms.TransitionDuration = TransitionDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWeatherManager.FadeInWeather
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ADynamicWeatherVolume*            WeatherVolume                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionDelay                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionDuration                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADynamicWeatherManager::FadeInWeather(class ADynamicWeatherVolume* WeatherVolume, float TransitionDelay, float TransitionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherManager", "FadeInWeather");

	Params::DynamicWeatherManager_FadeInWeather Parms{};

	Parms.WeatherVolume = WeatherVolume;
	Parms.TransitionDelay = TransitionDelay;
	Parms.TransitionDuration = TransitionDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWeatherManager.FadeOutWeather
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ADynamicWeatherVolume*            WeatherVolume                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionDelay                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionDuration                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADynamicWeatherManager::FadeOutWeather(class ADynamicWeatherVolume* WeatherVolume, float TransitionDelay, float TransitionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherManager", "FadeOutWeather");

	Params::DynamicWeatherManager_FadeOutWeather Parms{};

	Parms.WeatherVolume = WeatherVolume;
	Parms.TransitionDelay = TransitionDelay;
	Parms.TransitionDuration = TransitionDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWeatherManager.GetCurrentWeather
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADynamicWeatherManager::GetCurrentWeather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherManager", "GetCurrentWeather");

	Params::DynamicWeatherManager_GetCurrentWeather Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicWeatherManager.LimitTODSunRotator
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSunLightLerpConfig&       FinalSunLightSetting                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           SkySphere                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADirectionalLight*                SunLight                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADirectionalLight*                MoonLight                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NowTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  SunExtraIntensity                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  MoonExtraIntensity                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADynamicWeatherManager::LimitTODSunRotator(const struct FSunLightLerpConfig& FinalSunLightSetting, class AActor* SkySphere, class ADirectionalLight* SunLight, class ADirectionalLight* MoonLight, float NowTime, float* SunExtraIntensity, float* MoonExtraIntensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherManager", "LimitTODSunRotator");

	Params::DynamicWeatherManager_LimitTODSunRotator Parms{};

	Parms.FinalSunLightSetting = std::move(FinalSunLightSetting);
	Parms.SkySphere = SkySphere;
	Parms.SunLight = SunLight;
	Parms.MoonLight = MoonLight;
	Parms.NowTime = NowTime;

	UObject::ProcessEvent(Func, &Parms);

	if (SunExtraIntensity != nullptr)
		*SunExtraIntensity = Parms.SunExtraIntensity;

	if (MoonExtraIntensity != nullptr)
		*MoonExtraIntensity = Parms.MoonExtraIntensity;
}


// Function DynamicEnvironmentSystem.DynamicWeatherManager.RandomWeather
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TransitionDelay                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionDuration                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADynamicWeatherManager::RandomWeather(float TransitionDelay, float TransitionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherManager", "RandomWeather");

	Params::DynamicWeatherManager_RandomWeather Parms{};

	Parms.TransitionDelay = TransitionDelay;
	Parms.TransitionDuration = TransitionDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWeatherManager.UpdateEffectPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   EffectPosition                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADynamicWeatherManager::UpdateEffectPosition(const struct FVector& EffectPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherManager", "UpdateEffectPosition");

	Params::DynamicWeatherManager_UpdateEffectPosition Parms{};

	Parms.EffectPosition = std::move(EffectPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWeatherManager.WeatherRaining
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FWeatherBaseLerpConfig&    WeatherSettings                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ADynamicWeatherManager::WeatherRaining(const struct FWeatherBaseLerpConfig& WeatherSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherManager", "WeatherRaining");

	Params::DynamicWeatherManager_WeatherRaining Parms{};

	Parms.WeatherSettings = std::move(WeatherSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.ClearMaterialInstancesCache
// (Final, Native, Public, BlueprintCallable)

void ADynamicWeatherVolume::ClearMaterialInstancesCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "ClearMaterialInstancesCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.ClearTimeSpansAndConfigsCache
// (Final, Native, Public, BlueprintCallable)

void ADynamicWeatherVolume::ClearTimeSpansAndConfigsCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "ClearTimeSpansAndConfigsCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetLerpConfigCharacter
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      SpanName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContextString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCharacterPresetConfig*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterPresetConfig* ADynamicWeatherVolume::GetLerpConfigCharacter(const class FName& SpanName, const class FString& ContextString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "GetLerpConfigCharacter");

	Params::DynamicWeatherVolume_GetLerpConfigCharacter Parms{};

	Parms.SpanName = SpanName;
	Parms.ContextString = std::move(ContextString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetLerpConfigPP
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      SpanName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContextString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPostprocessPresetConfig*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPostprocessPresetConfig* ADynamicWeatherVolume::GetLerpConfigPP(const class FName& SpanName, const class FString& ContextString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "GetLerpConfigPP");

	Params::DynamicWeatherVolume_GetLerpConfigPP Parms{};

	Parms.SpanName = SpanName;
	Parms.ContextString = std::move(ContextString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetLerpConfigTod
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      SpanName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContextString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTODPresetConfig*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTODPresetConfig* ADynamicWeatherVolume::GetLerpConfigTod(const class FName& SpanName, const class FString& ContextString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "GetLerpConfigTod");

	Params::DynamicWeatherVolume_GetLerpConfigTod Parms{};

	Parms.SpanName = SpanName;
	Parms.ContextString = std::move(ContextString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetLerpConfigWeather
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      SpanName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ContextString                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWeatherPresetConfig*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWeatherPresetConfig* ADynamicWeatherVolume::GetLerpConfigWeather(const class FName& SpanName, const class FString& ContextString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "GetLerpConfigWeather");

	Params::DynamicWeatherVolume_GetLerpConfigWeather Parms{};

	Parms.SpanName = SpanName;
	Parms.ContextString = std::move(ContextString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetTODLerpWeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADynamicWeatherVolume::GetTODLerpWeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "GetTODLerpWeight");

	Params::DynamicWeatherVolume_GetTODLerpWeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetTodTimeSpan1
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTimeSpanLerpConfig        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FTimeSpanLerpConfig ADynamicWeatherVolume::GetTodTimeSpan1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "GetTodTimeSpan1");

	Params::DynamicWeatherVolume_GetTodTimeSpan1 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetTodTimeSpan2
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTimeSpanLerpConfig        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FTimeSpanLerpConfig ADynamicWeatherVolume::GetTodTimeSpan2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "GetTodTimeSpan2");

	Params::DynamicWeatherVolume_GetTodTimeSpan2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.RefreshTimeSpansAndConfigs
// (Final, Native, Public, BlueprintCallable)

void ADynamicWeatherVolume::RefreshTimeSpansAndConfigs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "RefreshTimeSpansAndConfigs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.ResetTimeSpansAndConfigs
// (Final, Native, Public, BlueprintCallable)

void ADynamicWeatherVolume::ResetTimeSpansAndConfigs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "ResetTimeSpansAndConfigs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWeatherVolume.UpdateTimeSpanProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ADynamicEnvironmentSystemManager* DynamicEnvironmentSystemMgr                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NowTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADynamicWeatherVolume::UpdateTimeSpanProgress(class ADynamicEnvironmentSystemManager* DynamicEnvironmentSystemMgr, float NowTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWeatherVolume", "UpdateTimeSpanProgress");

	Params::DynamicWeatherVolume_UpdateTimeSpanProgress Parms{};

	Parms.DynamicEnvironmentSystemMgr = DynamicEnvironmentSystemMgr;
	Parms.NowTime = NowTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetLumenReflectionsSpecularScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicWetnessComponent::SetLumenReflectionsSpecularScale(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWetnessComponent", "SetLumenReflectionsSpecularScale");

	Params::DynamicWetnessComponent_SetLumenReflectionsSpecularScale Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetPuddleHeightOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bToRain                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicWetnessComponent::SetPuddleHeightOffset(float InValue, bool bToRain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWetnessComponent", "SetPuddleHeightOffset");

	Params::DynamicWetnessComponent_SetPuddleHeightOffset Parms{};

	Parms.InValue = InValue;
	Parms.bToRain = bToRain;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetRainIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicWetnessComponent::SetRainIntensity(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWetnessComponent", "SetRainIntensity");

	Params::DynamicWetnessComponent_SetRainIntensity Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetReflectionParameters
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bToRain                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicWetnessComponent::SetReflectionParameters(float InValue, bool bToRain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWetnessComponent", "SetReflectionParameters");

	Params::DynamicWetnessComponent_SetReflectionParameters Parms{};

	Parms.InValue = InValue;
	Parms.bToRain = bToRain;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetWetness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bToRain                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicWetnessComponent::SetWetness(float InValue, bool bToRain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWetnessComponent", "SetWetness");

	Params::DynamicWetnessComponent_SetWetness Parms{};

	Parms.InValue = InValue;
	Parms.bToRain = bToRain;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetWetnessOcclusionMultiply
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicWetnessComponent::SetWetnessOcclusionMultiply(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWetnessComponent", "SetWetnessOcclusionMultiply");

	Params::DynamicWetnessComponent_SetWetnessOcclusionMultiply Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetWetnessSpecularFoliageMultiply
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicWetnessComponent::SetWetnessSpecularFoliageMultiply(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWetnessComponent", "SetWetnessSpecularFoliageMultiply");

	Params::DynamicWetnessComponent_SetWetnessSpecularFoliageMultiply Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetWetnessSpecularLandscapeMultiply
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicWetnessComponent::SetWetnessSpecularLandscapeMultiply(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWetnessComponent", "SetWetnessSpecularLandscapeMultiply");

	Params::DynamicWetnessComponent_SetWetnessSpecularLandscapeMultiply Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.DynamicWetnessComponent.UpdateWetnessConfig
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FWetnessConfigParameters&  NewWetness                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDynamicWetnessComponent::UpdateWetnessConfig(const struct FWetnessConfigParameters& NewWetness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicWetnessComponent", "UpdateWetnessConfig");

	Params::DynamicWetnessComponent_UpdateWetnessConfig Parms{};

	Parms.NewWetness = std::move(NewWetness);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.EnvironmentLevelConfigActor.SetConfigEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AEnvironmentLevelConfigActor::SetConfigEnabled(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EnvironmentLevelConfigActor", "SetConfigEnabled");

	Params::EnvironmentLevelConfigActor_SetConfigEnabled Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.EnvironmentLevelConfigManager.OnUpdateFinalEnvironmentLevelConfig
// (Event, Public, BlueprintEvent)

void AEnvironmentLevelConfigManager::OnUpdateFinalEnvironmentLevelConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EnvironmentLevelConfigManager", "OnUpdateFinalEnvironmentLevelConfig");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicEnvironmentSystem.EnvironmentLevelConfigManager.UpdateFinalEnvironmentLevelConfig
// (Final, Native, Public, BlueprintCallable)

void AEnvironmentLevelConfigManager::UpdateFinalEnvironmentLevelConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EnvironmentLevelConfigManager", "UpdateFinalEnvironmentLevelConfig");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.PCGEffectVolume.AddOrUpdateBlendable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IBlendableInterface>InBlendableObject                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InWeight                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APCGEffectVolume::AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCGEffectVolume", "AddOrUpdateBlendable");

	Params::PCGEffectVolume_AddOrUpdateBlendable Parms{};

	Parms.InBlendableObject = InBlendableObject;
	Parms.InWeight = InWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicEnvironmentSystem.PCGEffectVolumeSystem.GetCurrentSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FPCGEffectSettings               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FPCGEffectSettings UPCGEffectVolumeSystem::GetCurrentSetting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCGEffectVolumeSystem", "GetCurrentSetting");

	Params::PCGEffectVolumeSystem_GetCurrentSetting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

