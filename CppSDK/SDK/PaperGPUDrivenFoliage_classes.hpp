#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperGPUDrivenFoliage

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PaperGPUDrivenFoliage_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class PaperGPUDrivenFoliage.PaperGPUDrivenFoliageClusterComponent
// 0x0010 (0x05D0 - 0x05C0)
class UPaperGPUDrivenFoliageClusterComponent final : public UPrimitiveComponent
{
public:
	int32                                         ClusterID;                                         // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5BC[0x14];                                     // 0x05BC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGPUDrivenFoliageClusterComponent">();
	}
	static class UPaperGPUDrivenFoliageClusterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGPUDrivenFoliageClusterComponent>();
	}
};
static_assert(alignof(UPaperGPUDrivenFoliageClusterComponent) == 0x000010, "Wrong alignment on UPaperGPUDrivenFoliageClusterComponent");
static_assert(sizeof(UPaperGPUDrivenFoliageClusterComponent) == 0x0005D0, "Wrong size on UPaperGPUDrivenFoliageClusterComponent");
static_assert(offsetof(UPaperGPUDrivenFoliageClusterComponent, ClusterID) == 0x0005B8, "Member 'UPaperGPUDrivenFoliageClusterComponent::ClusterID' has a wrong offset!");

// Class PaperGPUDrivenFoliage.CompressedStreamedGPUDrivenFoliageClusterInstanceAssetData
// 0x0390 (0x03C0 - 0x0030)
class UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData final : public UDataAsset
{
public:
	uint32                                        TotalInstanceNum;                                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TotalPatchNum;                                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x388];                                     // 0x0038(0x0388)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CompressedStreamedGPUDrivenFoliageClusterInstanceAssetData">();
	}
	static class UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData>();
	}
};
static_assert(alignof(UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData) == 0x000008, "Wrong alignment on UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData");
static_assert(sizeof(UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData) == 0x0003C0, "Wrong size on UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData, TotalInstanceNum) == 0x000030, "Member 'UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData::TotalInstanceNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData, TotalPatchNum) == 0x000034, "Member 'UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData::TotalPatchNum' has a wrong offset!");

// Class PaperGPUDrivenFoliage.CompressedStreamedGPUDrivenFoliageSectorInstanceAssetData
// 0x04C0 (0x04F0 - 0x0030)
class UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData final : public UDataAsset
{
public:
	uint8                                         Pad_30[0x130];                                     // 0x0030(0x0130)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        BuildMaxLODNum;                                    // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TotalInstanceNum;                                  // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TotalSplineInstanceNum;                            // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TotalMeshNum;                                      // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TotalMeshSectionPairPageSectionNum;                // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TotalPatchNum;                                     // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TotalPageSectionNum;                               // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TotalPageNum;                                      // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TotalEnlightenAtlasNum;                            // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TotalEnlightenInstanceUVNum;                       // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x368];                                    // 0x0188(0x0368)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CompressedStreamedGPUDrivenFoliageSectorInstanceAssetData">();
	}
	static class UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData>();
	}
};
static_assert(alignof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData) == 0x000008, "Wrong alignment on UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData");
static_assert(sizeof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData) == 0x0004F0, "Wrong size on UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData, BuildMaxLODNum) == 0x000160, "Member 'UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData::BuildMaxLODNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData, TotalInstanceNum) == 0x000164, "Member 'UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData::TotalInstanceNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData, TotalSplineInstanceNum) == 0x000168, "Member 'UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData::TotalSplineInstanceNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData, TotalMeshNum) == 0x00016C, "Member 'UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData::TotalMeshNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData, TotalMeshSectionPairPageSectionNum) == 0x000170, "Member 'UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData::TotalMeshSectionPairPageSectionNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData, TotalPatchNum) == 0x000174, "Member 'UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData::TotalPatchNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData, TotalPageSectionNum) == 0x000178, "Member 'UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData::TotalPageSectionNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData, TotalPageNum) == 0x00017C, "Member 'UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData::TotalPageNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData, TotalEnlightenAtlasNum) == 0x000180, "Member 'UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData::TotalEnlightenAtlasNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData, TotalEnlightenInstanceUVNum) == 0x000184, "Member 'UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData::TotalEnlightenInstanceUVNum' has a wrong offset!");

// Class PaperGPUDrivenFoliage.GPUDrivenFoliageMeshVertexAssetData
// 0x0200 (0x0230 - 0x0030)
class UGPUDrivenFoliageMeshVertexAssetData final : public UDataAsset
{
public:
	bool                                          bInitialized;                                      // 0x0030(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 KeyName;                                           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SrcMat;                                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumVertices;                                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VertexStride;                                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumTexCoords;                                      // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUVFullPrecision;                                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainEnlightenUV;                               // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TotalNumEnlightenUVVertices;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVertexCompressed;                                 // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTangentCompressed;                                // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0xA];                                       // 0x0066(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4f                              MeshBounds;                                        // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAGFGPUDrivenFoliageMeshVertex> PageVertexBufferData;                              // 0x0080(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x30];                                      // 0x0090(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 PageVertexUVBufferData;                            // 0x00C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseFullVertexStream;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        NumIndices;                                        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        IndexStride;                                       // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint32>                                PageIndexBufferData;                               // 0x00F0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x130];                                    // 0x0100(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GPUDrivenFoliageMeshVertexAssetData">();
	}
	static class UGPUDrivenFoliageMeshVertexAssetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGPUDrivenFoliageMeshVertexAssetData>();
	}
};
static_assert(alignof(UGPUDrivenFoliageMeshVertexAssetData) == 0x000010, "Wrong alignment on UGPUDrivenFoliageMeshVertexAssetData");
static_assert(sizeof(UGPUDrivenFoliageMeshVertexAssetData) == 0x000230, "Wrong size on UGPUDrivenFoliageMeshVertexAssetData");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, bInitialized) == 0x000030, "Member 'UGPUDrivenFoliageMeshVertexAssetData::bInitialized' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, KeyName) == 0x000038, "Member 'UGPUDrivenFoliageMeshVertexAssetData::KeyName' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, SrcMat) == 0x000048, "Member 'UGPUDrivenFoliageMeshVertexAssetData::SrcMat' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, NumVertices) == 0x000050, "Member 'UGPUDrivenFoliageMeshVertexAssetData::NumVertices' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, VertexStride) == 0x000054, "Member 'UGPUDrivenFoliageMeshVertexAssetData::VertexStride' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, NumTexCoords) == 0x000058, "Member 'UGPUDrivenFoliageMeshVertexAssetData::NumTexCoords' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, bUVFullPrecision) == 0x00005C, "Member 'UGPUDrivenFoliageMeshVertexAssetData::bUVFullPrecision' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, bContainEnlightenUV) == 0x00005D, "Member 'UGPUDrivenFoliageMeshVertexAssetData::bContainEnlightenUV' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, TotalNumEnlightenUVVertices) == 0x000060, "Member 'UGPUDrivenFoliageMeshVertexAssetData::TotalNumEnlightenUVVertices' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, bVertexCompressed) == 0x000064, "Member 'UGPUDrivenFoliageMeshVertexAssetData::bVertexCompressed' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, bTangentCompressed) == 0x000065, "Member 'UGPUDrivenFoliageMeshVertexAssetData::bTangentCompressed' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, MeshBounds) == 0x000070, "Member 'UGPUDrivenFoliageMeshVertexAssetData::MeshBounds' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, PageVertexBufferData) == 0x000080, "Member 'UGPUDrivenFoliageMeshVertexAssetData::PageVertexBufferData' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, PageVertexUVBufferData) == 0x0000C0, "Member 'UGPUDrivenFoliageMeshVertexAssetData::PageVertexUVBufferData' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, bUseFullVertexStream) == 0x0000E0, "Member 'UGPUDrivenFoliageMeshVertexAssetData::bUseFullVertexStream' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, NumIndices) == 0x0000E4, "Member 'UGPUDrivenFoliageMeshVertexAssetData::NumIndices' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, IndexStride) == 0x0000E8, "Member 'UGPUDrivenFoliageMeshVertexAssetData::IndexStride' has a wrong offset!");
static_assert(offsetof(UGPUDrivenFoliageMeshVertexAssetData, PageIndexBufferData) == 0x0000F0, "Member 'UGPUDrivenFoliageMeshVertexAssetData::PageIndexBufferData' has a wrong offset!");

// Class PaperGPUDrivenFoliage.PaperGPUDrivenFoliageCullingComponent
// 0x0090 (0x0650 - 0x05C0)
class UPaperGPUDrivenFoliageCullingComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_5B8[0x10];                                     // 0x05B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxSphereBounds                       SecotrBound;                                       // 0x05C8(0x0038)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLODProxyPrimitiveBounds>       HLODProxies;                                       // 0x0600(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          RelatedEnlightenAtlasGUIDs;                        // 0x0610(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_620[0x30];                                     // 0x0620(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGPUDrivenFoliageCullingComponent">();
	}
	static class UPaperGPUDrivenFoliageCullingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGPUDrivenFoliageCullingComponent>();
	}
};
static_assert(alignof(UPaperGPUDrivenFoliageCullingComponent) == 0x000010, "Wrong alignment on UPaperGPUDrivenFoliageCullingComponent");
static_assert(sizeof(UPaperGPUDrivenFoliageCullingComponent) == 0x000650, "Wrong size on UPaperGPUDrivenFoliageCullingComponent");
static_assert(offsetof(UPaperGPUDrivenFoliageCullingComponent, SecotrBound) == 0x0005C8, "Member 'UPaperGPUDrivenFoliageCullingComponent::SecotrBound' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliageCullingComponent, HLODProxies) == 0x000600, "Member 'UPaperGPUDrivenFoliageCullingComponent::HLODProxies' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliageCullingComponent, RelatedEnlightenAtlasGUIDs) == 0x000610, "Member 'UPaperGPUDrivenFoliageCullingComponent::RelatedEnlightenAtlasGUIDs' has a wrong offset!");

// Class PaperGPUDrivenFoliage.PaperGPUDrivenFoliageDebugManager
// 0x0018 (0x03F8 - 0x03E0)
class APaperGPUDrivenFoliageDebugManager final : public AVolume
{
public:
	class USceneComponent*                        SceneComp;                                         // 0x03E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           OriginalStaticComps;                               // 0x03E8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGPUDrivenFoliageDebugManager">();
	}
	static class APaperGPUDrivenFoliageDebugManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGPUDrivenFoliageDebugManager>();
	}
};
static_assert(alignof(APaperGPUDrivenFoliageDebugManager) == 0x000008, "Wrong alignment on APaperGPUDrivenFoliageDebugManager");
static_assert(sizeof(APaperGPUDrivenFoliageDebugManager) == 0x0003F8, "Wrong size on APaperGPUDrivenFoliageDebugManager");
static_assert(offsetof(APaperGPUDrivenFoliageDebugManager, SceneComp) == 0x0003E0, "Member 'APaperGPUDrivenFoliageDebugManager::SceneComp' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageDebugManager, OriginalStaticComps) == 0x0003E8, "Member 'APaperGPUDrivenFoliageDebugManager::OriginalStaticComps' has a wrong offset!");

// Class PaperGPUDrivenFoliage.PaperGPUDrivenFoliageDLCVolume
// 0x0000 (0x03E0 - 0x03E0)
class APaperGPUDrivenFoliageDLCVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGPUDrivenFoliageDLCVolume">();
	}
	static class APaperGPUDrivenFoliageDLCVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGPUDrivenFoliageDLCVolume>();
	}
};
static_assert(alignof(APaperGPUDrivenFoliageDLCVolume) == 0x000008, "Wrong alignment on APaperGPUDrivenFoliageDLCVolume");
static_assert(sizeof(APaperGPUDrivenFoliageDLCVolume) == 0x0003E0, "Wrong size on APaperGPUDrivenFoliageDLCVolume");

// Class PaperGPUDrivenFoliage.PaperGPUDrivenFoliageManager
// 0x06E0 (0x0AC0 - 0x03E0)
class APaperGPUDrivenFoliageManager final : public AVolume
{
public:
	uint8                                         Pad_3E0[0x8];                                      // 0x03E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        SceneComp;                                         // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysSortBeforeBuild;                             // 0x03F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     RuntimeDebugFoliageMaterial;                       // 0x03F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetSaveDir;                                      // 0x0400(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplaceMeshTableDir;                               // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplaceGrassTableDir;                              // 0x0420(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DLCMapPath;                                        // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawAllSectorBound;                               // 0x0440(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildStaticMesh;                                  // 0x0441(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildGrass;                                       // 0x0442(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildFoliage;                                     // 0x0443(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildSplineMesh;                                  // 0x0444(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildDecal;                                       // 0x0445(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildMovableStaticMeshes;                         // 0x0446(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_447[0x1];                                      // 0x0447(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StaticMeshInstanceThre;                            // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticMeshInstanceDistanceThre;                    // 0x044C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBoundToIncludeBuild;                            // 0x0450(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInstanceInOneSector;                            // 0x0454(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPatchInOneSector;                               // 0x0458(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESectorDevideOptions                          SectorDivideOption;                                // 0x045C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45D[0x3];                                      // 0x045D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FixedGridX;                                        // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FixedGridY;                                        // 0x0464(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxKDTreeDevideTimes;                              // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDiscardEnlighten;                                 // 0x046C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMobileDataToBuild;                             // 0x046D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46E[0x2];                                      // 0x046E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalDensityScaleForBuild;                        // 0x0470(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateOptimizedTextureStreamingBound;           // 0x0474(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFilteredLevel;                                 // 0x0475(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMobile;                                           // 0x0476(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePlatform;                                   // 0x0477(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SplineMeshActorTags;                               // 0x0478(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         IgnoreActorTags;                                   // 0x0488(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         IgnoreLevelTags;                                   // 0x0498(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         UseFilteredLevels;                                 // 0x04A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxAseestsLoadOneFrame;                            // 0x04B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFrameToAccelerateLoad;                          // 0x04BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInstanceScreenSizeCalOneFrame;                  // 0x04C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectorStreamingInScreenSize;                       // 0x04C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectorStreamingOutScreenSize;                      // 0x04C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PagePerInstanceStreamindInScreenSize;              // 0x04CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PagePerInstanceStreamingOutScreenSize;             // 0x04D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSectorCullingOneFrame;                          // 0x04D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawSectorBound;                             // 0x04D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawClusterBound;                            // 0x04D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4DA[0x6];                                      // 0x04DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AllStaticMeshPathNames;                            // 0x04E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class UPackage*>                       TempBuildPackages;                                 // 0x04F0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class FString>                         RelatedPageSectionStaticMeshNames;                 // 0x0500(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FPaperGPUDrivenFoliageSectorData       MainSectorData;                                    // 0x0510(0x0238)(NativeAccessSpecifierPublic)
	TArray<struct FPaperGPUDrivenFoliageClusterData> AllClusterDatas;                                // 0x0748(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPaperGPUDrivenFoliagePageComponent*> RelatedFoliagePageComps;                      // 0x0758(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPaperVirtualGrassPageComponent*> RelatedGrassPageComps;                            // 0x0768(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPaperGPUDrivenFoliageCullingComponent*> RelatedFoliageCullingComps;                // 0x0778(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPaperGPUDrivenFoliageClusterComponent*> RelatedInstanceClusterComps;               // 0x0788(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPaperVirtualGrassCullingComponent*     GrassCullingComp;                                  // 0x0798(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVirtualGrassSharedData                GrassSharedData;                                   // 0x07A0(0x0040)(NativeAccessSpecifierPublic)
	bool                                          bBuilt;                                            // 0x07E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E1[0x8F];                                     // 0x07E1(0x008F)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class APaperGPUDrivenFoliageLevelMarker*> CollectedLevelMarkers;                            // 0x0870(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C0[0x200];                                    // 0x08C0(0x0200)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class APaperGPUDrivenFoliageManager* Get(class UObject* WorldContextObject);

	bool IsInTeleportStreaming() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGPUDrivenFoliageManager">();
	}
	static class APaperGPUDrivenFoliageManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGPUDrivenFoliageManager>();
	}
};
static_assert(alignof(APaperGPUDrivenFoliageManager) == 0x000008, "Wrong alignment on APaperGPUDrivenFoliageManager");
static_assert(sizeof(APaperGPUDrivenFoliageManager) == 0x000AC0, "Wrong size on APaperGPUDrivenFoliageManager");
static_assert(offsetof(APaperGPUDrivenFoliageManager, SceneComp) == 0x0003E8, "Member 'APaperGPUDrivenFoliageManager::SceneComp' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, AlwaysSortBeforeBuild) == 0x0003F0, "Member 'APaperGPUDrivenFoliageManager::AlwaysSortBeforeBuild' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, RuntimeDebugFoliageMaterial) == 0x0003F8, "Member 'APaperGPUDrivenFoliageManager::RuntimeDebugFoliageMaterial' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, AssetSaveDir) == 0x000400, "Member 'APaperGPUDrivenFoliageManager::AssetSaveDir' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, ReplaceMeshTableDir) == 0x000410, "Member 'APaperGPUDrivenFoliageManager::ReplaceMeshTableDir' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, ReplaceGrassTableDir) == 0x000420, "Member 'APaperGPUDrivenFoliageManager::ReplaceGrassTableDir' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, DLCMapPath) == 0x000430, "Member 'APaperGPUDrivenFoliageManager::DLCMapPath' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bDrawAllSectorBound) == 0x000440, "Member 'APaperGPUDrivenFoliageManager::bDrawAllSectorBound' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bBuildStaticMesh) == 0x000441, "Member 'APaperGPUDrivenFoliageManager::bBuildStaticMesh' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bBuildGrass) == 0x000442, "Member 'APaperGPUDrivenFoliageManager::bBuildGrass' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bBuildFoliage) == 0x000443, "Member 'APaperGPUDrivenFoliageManager::bBuildFoliage' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bBuildSplineMesh) == 0x000444, "Member 'APaperGPUDrivenFoliageManager::bBuildSplineMesh' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bBuildDecal) == 0x000445, "Member 'APaperGPUDrivenFoliageManager::bBuildDecal' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bBuildMovableStaticMeshes) == 0x000446, "Member 'APaperGPUDrivenFoliageManager::bBuildMovableStaticMeshes' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, StaticMeshInstanceThre) == 0x000448, "Member 'APaperGPUDrivenFoliageManager::StaticMeshInstanceThre' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, StaticMeshInstanceDistanceThre) == 0x00044C, "Member 'APaperGPUDrivenFoliageManager::StaticMeshInstanceDistanceThre' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, MaxBoundToIncludeBuild) == 0x000450, "Member 'APaperGPUDrivenFoliageManager::MaxBoundToIncludeBuild' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, MaxInstanceInOneSector) == 0x000454, "Member 'APaperGPUDrivenFoliageManager::MaxInstanceInOneSector' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, MaxPatchInOneSector) == 0x000458, "Member 'APaperGPUDrivenFoliageManager::MaxPatchInOneSector' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, SectorDivideOption) == 0x00045C, "Member 'APaperGPUDrivenFoliageManager::SectorDivideOption' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, FixedGridX) == 0x000460, "Member 'APaperGPUDrivenFoliageManager::FixedGridX' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, FixedGridY) == 0x000464, "Member 'APaperGPUDrivenFoliageManager::FixedGridY' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, MaxKDTreeDevideTimes) == 0x000468, "Member 'APaperGPUDrivenFoliageManager::MaxKDTreeDevideTimes' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bDiscardEnlighten) == 0x00046C, "Member 'APaperGPUDrivenFoliageManager::bDiscardEnlighten' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bUseMobileDataToBuild) == 0x00046D, "Member 'APaperGPUDrivenFoliageManager::bUseMobileDataToBuild' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, GlobalDensityScaleForBuild) == 0x000470, "Member 'APaperGPUDrivenFoliageManager::GlobalDensityScaleForBuild' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bGenerateOptimizedTextureStreamingBound) == 0x000474, "Member 'APaperGPUDrivenFoliageManager::bGenerateOptimizedTextureStreamingBound' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bUseFilteredLevel) == 0x000475, "Member 'APaperGPUDrivenFoliageManager::bUseFilteredLevel' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bMobile) == 0x000476, "Member 'APaperGPUDrivenFoliageManager::bMobile' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bIgnorePlatform) == 0x000477, "Member 'APaperGPUDrivenFoliageManager::bIgnorePlatform' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, SplineMeshActorTags) == 0x000478, "Member 'APaperGPUDrivenFoliageManager::SplineMeshActorTags' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, IgnoreActorTags) == 0x000488, "Member 'APaperGPUDrivenFoliageManager::IgnoreActorTags' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, IgnoreLevelTags) == 0x000498, "Member 'APaperGPUDrivenFoliageManager::IgnoreLevelTags' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, UseFilteredLevels) == 0x0004A8, "Member 'APaperGPUDrivenFoliageManager::UseFilteredLevels' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, MaxAseestsLoadOneFrame) == 0x0004B8, "Member 'APaperGPUDrivenFoliageManager::MaxAseestsLoadOneFrame' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, MaxFrameToAccelerateLoad) == 0x0004BC, "Member 'APaperGPUDrivenFoliageManager::MaxFrameToAccelerateLoad' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, MaxInstanceScreenSizeCalOneFrame) == 0x0004C0, "Member 'APaperGPUDrivenFoliageManager::MaxInstanceScreenSizeCalOneFrame' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, SectorStreamingInScreenSize) == 0x0004C4, "Member 'APaperGPUDrivenFoliageManager::SectorStreamingInScreenSize' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, SectorStreamingOutScreenSize) == 0x0004C8, "Member 'APaperGPUDrivenFoliageManager::SectorStreamingOutScreenSize' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, PagePerInstanceStreamindInScreenSize) == 0x0004CC, "Member 'APaperGPUDrivenFoliageManager::PagePerInstanceStreamindInScreenSize' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, PagePerInstanceStreamingOutScreenSize) == 0x0004D0, "Member 'APaperGPUDrivenFoliageManager::PagePerInstanceStreamingOutScreenSize' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, MaxSectorCullingOneFrame) == 0x0004D4, "Member 'APaperGPUDrivenFoliageManager::MaxSectorCullingOneFrame' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bDebugDrawSectorBound) == 0x0004D8, "Member 'APaperGPUDrivenFoliageManager::bDebugDrawSectorBound' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bDebugDrawClusterBound) == 0x0004D9, "Member 'APaperGPUDrivenFoliageManager::bDebugDrawClusterBound' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, AllStaticMeshPathNames) == 0x0004E0, "Member 'APaperGPUDrivenFoliageManager::AllStaticMeshPathNames' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, TempBuildPackages) == 0x0004F0, "Member 'APaperGPUDrivenFoliageManager::TempBuildPackages' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, RelatedPageSectionStaticMeshNames) == 0x000500, "Member 'APaperGPUDrivenFoliageManager::RelatedPageSectionStaticMeshNames' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, MainSectorData) == 0x000510, "Member 'APaperGPUDrivenFoliageManager::MainSectorData' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, AllClusterDatas) == 0x000748, "Member 'APaperGPUDrivenFoliageManager::AllClusterDatas' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, RelatedFoliagePageComps) == 0x000758, "Member 'APaperGPUDrivenFoliageManager::RelatedFoliagePageComps' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, RelatedGrassPageComps) == 0x000768, "Member 'APaperGPUDrivenFoliageManager::RelatedGrassPageComps' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, RelatedFoliageCullingComps) == 0x000778, "Member 'APaperGPUDrivenFoliageManager::RelatedFoliageCullingComps' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, RelatedInstanceClusterComps) == 0x000788, "Member 'APaperGPUDrivenFoliageManager::RelatedInstanceClusterComps' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, GrassCullingComp) == 0x000798, "Member 'APaperGPUDrivenFoliageManager::GrassCullingComp' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, GrassSharedData) == 0x0007A0, "Member 'APaperGPUDrivenFoliageManager::GrassSharedData' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, bBuilt) == 0x0007E0, "Member 'APaperGPUDrivenFoliageManager::bBuilt' has a wrong offset!");
static_assert(offsetof(APaperGPUDrivenFoliageManager, CollectedLevelMarkers) == 0x000870, "Member 'APaperGPUDrivenFoliageManager::CollectedLevelMarkers' has a wrong offset!");

// Class PaperGPUDrivenFoliage.PaperGPUDrivenFoliageLevelMarker
// 0x0008 (0x03B0 - 0x03A8)
class APaperGPUDrivenFoliageLevelMarker final : public AActor
{
public:
	int32                                         LevelMarkerID;                                     // 0x03A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGPUDrivenFoliageLevelMarker">();
	}
	static class APaperGPUDrivenFoliageLevelMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGPUDrivenFoliageLevelMarker>();
	}
};
static_assert(alignof(APaperGPUDrivenFoliageLevelMarker) == 0x000008, "Wrong alignment on APaperGPUDrivenFoliageLevelMarker");
static_assert(sizeof(APaperGPUDrivenFoliageLevelMarker) == 0x0003B0, "Wrong size on APaperGPUDrivenFoliageLevelMarker");
static_assert(offsetof(APaperGPUDrivenFoliageLevelMarker, LevelMarkerID) == 0x0003A8, "Member 'APaperGPUDrivenFoliageLevelMarker::LevelMarkerID' has a wrong offset!");

// Class PaperGPUDrivenFoliage.PaperGPUDrivenFoliagePageComponent
// 0x0230 (0x07F0 - 0x05C0)
class UPaperGPUDrivenFoliagePageComponent final : public UPrimitiveComponent
{
public:
	struct FSoftObjectPath                        VertexAssetSaveDataPath;                           // 0x05B8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        IndiceAssetSaveDataPath;                           // 0x05D8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SrcMat;                                            // 0x05F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RuntimeMat;                                        // 0x0600(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DebugMaterial;                                     // 0x0608(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PrebakeMaterial;                                   // 0x0610(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       PageBound;                                         // 0x0618(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SectorIndex;                                       // 0x0650(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIndex;                                         // 0x0654(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InnerPageIndex;                                    // 0x0658(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSectionIndexOffset;                            // 0x065C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSectionFirstPatchOffset;                       // 0x0660(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSectionPatchNum;                               // 0x0664(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOfPageSections;                                 // 0x0668(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMeshUVChannelInfo                     PageUVChannelData;                                 // 0x066C(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasSpeedTree;                                     // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainOnlyStaticMeshes;                          // 0x0681(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEnlightenLightmap;                             // 0x0682(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_683[0x5];                                      // 0x0683(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 SavedSpeedTreeData;                                // 0x0688(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       PageMeshBound;                                     // 0x0698(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPageCastShadow;                                   // 0x06D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSplineMesh;                                     // 0x06D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D2[0x6];                                      // 0x06D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPFoliagePageSectionData>       PageSections;                                      // 0x06D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          PrebakedEnlightenAtlasGUIDs;                       // 0x06E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ContainedInstanceIndices;                          // 0x06F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector4f>                      PreBuildInstanceBounds;                            // 0x0708(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FVector4f>                      PreBuildInstanceBoundExtents;                      // 0x0718(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class UGPUDrivenFoliageMeshVertexAssetData*   TemptFoliagePageVertexAssetData;                   // 0x0728(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStreamed;                                         // 0x0730(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_731[0x3];                                      // 0x0731(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        LastVisibleFrameNumber;                            // 0x0734(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_738[0xB8];                                     // 0x0738(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGPUDrivenFoliagePageComponent">();
	}
	static class UPaperGPUDrivenFoliagePageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGPUDrivenFoliagePageComponent>();
	}
};
static_assert(alignof(UPaperGPUDrivenFoliagePageComponent) == 0x000010, "Wrong alignment on UPaperGPUDrivenFoliagePageComponent");
static_assert(sizeof(UPaperGPUDrivenFoliagePageComponent) == 0x0007F0, "Wrong size on UPaperGPUDrivenFoliagePageComponent");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, VertexAssetSaveDataPath) == 0x0005B8, "Member 'UPaperGPUDrivenFoliagePageComponent::VertexAssetSaveDataPath' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, IndiceAssetSaveDataPath) == 0x0005D8, "Member 'UPaperGPUDrivenFoliagePageComponent::IndiceAssetSaveDataPath' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, SrcMat) == 0x0005F8, "Member 'UPaperGPUDrivenFoliagePageComponent::SrcMat' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, RuntimeMat) == 0x000600, "Member 'UPaperGPUDrivenFoliagePageComponent::RuntimeMat' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, DebugMaterial) == 0x000608, "Member 'UPaperGPUDrivenFoliagePageComponent::DebugMaterial' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PrebakeMaterial) == 0x000610, "Member 'UPaperGPUDrivenFoliagePageComponent::PrebakeMaterial' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PageBound) == 0x000618, "Member 'UPaperGPUDrivenFoliagePageComponent::PageBound' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, SectorIndex) == 0x000650, "Member 'UPaperGPUDrivenFoliagePageComponent::SectorIndex' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PageIndex) == 0x000654, "Member 'UPaperGPUDrivenFoliagePageComponent::PageIndex' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, InnerPageIndex) == 0x000658, "Member 'UPaperGPUDrivenFoliagePageComponent::InnerPageIndex' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PageSectionIndexOffset) == 0x00065C, "Member 'UPaperGPUDrivenFoliagePageComponent::PageSectionIndexOffset' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PageSectionFirstPatchOffset) == 0x000660, "Member 'UPaperGPUDrivenFoliagePageComponent::PageSectionFirstPatchOffset' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PageSectionPatchNum) == 0x000664, "Member 'UPaperGPUDrivenFoliagePageComponent::PageSectionPatchNum' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, NumOfPageSections) == 0x000668, "Member 'UPaperGPUDrivenFoliagePageComponent::NumOfPageSections' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PageUVChannelData) == 0x00066C, "Member 'UPaperGPUDrivenFoliagePageComponent::PageUVChannelData' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, bHasSpeedTree) == 0x000680, "Member 'UPaperGPUDrivenFoliagePageComponent::bHasSpeedTree' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, bContainOnlyStaticMeshes) == 0x000681, "Member 'UPaperGPUDrivenFoliagePageComponent::bContainOnlyStaticMeshes' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, bUseEnlightenLightmap) == 0x000682, "Member 'UPaperGPUDrivenFoliagePageComponent::bUseEnlightenLightmap' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, SavedSpeedTreeData) == 0x000688, "Member 'UPaperGPUDrivenFoliagePageComponent::SavedSpeedTreeData' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PageMeshBound) == 0x000698, "Member 'UPaperGPUDrivenFoliagePageComponent::PageMeshBound' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, bPageCastShadow) == 0x0006D0, "Member 'UPaperGPUDrivenFoliagePageComponent::bPageCastShadow' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, bIsSplineMesh) == 0x0006D1, "Member 'UPaperGPUDrivenFoliagePageComponent::bIsSplineMesh' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PageSections) == 0x0006D8, "Member 'UPaperGPUDrivenFoliagePageComponent::PageSections' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PrebakedEnlightenAtlasGUIDs) == 0x0006E8, "Member 'UPaperGPUDrivenFoliagePageComponent::PrebakedEnlightenAtlasGUIDs' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, ContainedInstanceIndices) == 0x0006F8, "Member 'UPaperGPUDrivenFoliagePageComponent::ContainedInstanceIndices' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PreBuildInstanceBounds) == 0x000708, "Member 'UPaperGPUDrivenFoliagePageComponent::PreBuildInstanceBounds' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, PreBuildInstanceBoundExtents) == 0x000718, "Member 'UPaperGPUDrivenFoliagePageComponent::PreBuildInstanceBoundExtents' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, TemptFoliagePageVertexAssetData) == 0x000728, "Member 'UPaperGPUDrivenFoliagePageComponent::TemptFoliagePageVertexAssetData' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, bStreamed) == 0x000730, "Member 'UPaperGPUDrivenFoliagePageComponent::bStreamed' has a wrong offset!");
static_assert(offsetof(UPaperGPUDrivenFoliagePageComponent, LastVisibleFrameNumber) == 0x000734, "Member 'UPaperGPUDrivenFoliagePageComponent::LastVisibleFrameNumber' has a wrong offset!");

// Class PaperGPUDrivenFoliage.PaperGPUDrivenFoliageStreamingSubsystem
// 0x0018 (0x0048 - 0x0030)
class UPaperGPUDrivenFoliageStreamingSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPaperGPUDrivenFoliageStreamingSubsystem* Instance();

	void Freeze();
	void UnFreeze();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGPUDrivenFoliageStreamingSubsystem">();
	}
	static class UPaperGPUDrivenFoliageStreamingSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGPUDrivenFoliageStreamingSubsystem>();
	}
};
static_assert(alignof(UPaperGPUDrivenFoliageStreamingSubsystem) == 0x000008, "Wrong alignment on UPaperGPUDrivenFoliageStreamingSubsystem");
static_assert(sizeof(UPaperGPUDrivenFoliageStreamingSubsystem) == 0x000048, "Wrong size on UPaperGPUDrivenFoliageStreamingSubsystem");

// Class PaperGPUDrivenFoliage.PaperGPUDrivenInteractiveComponent
// 0x0000 (0x12D0 - 0x12D0)
class UPaperGPUDrivenInteractiveComponent final : public USkeletalMeshComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGPUDrivenInteractiveComponent">();
	}
	static class UPaperGPUDrivenInteractiveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGPUDrivenInteractiveComponent>();
	}
};
static_assert(alignof(UPaperGPUDrivenInteractiveComponent) == 0x000010, "Wrong alignment on UPaperGPUDrivenInteractiveComponent");
static_assert(sizeof(UPaperGPUDrivenInteractiveComponent) == 0x0012D0, "Wrong size on UPaperGPUDrivenInteractiveComponent");

// Class PaperGPUDrivenFoliage.CompressedStreamedVirtualGrassPageSectionData
// 0x01F8 (0x0228 - 0x0030)
class UCompressedStreamedVirtualGrassPageSectionData final : public UDataAsset
{
public:
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TotalGrassMeshNum;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TotalPageSectionsNum;                              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUintVector2>                   GrassVarietyKeys;                                  // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 GrassMeshMap;                                      // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x1C8];                                     // 0x0060(0x01C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CompressedStreamedVirtualGrassPageSectionData">();
	}
	static class UCompressedStreamedVirtualGrassPageSectionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompressedStreamedVirtualGrassPageSectionData>();
	}
};
static_assert(alignof(UCompressedStreamedVirtualGrassPageSectionData) == 0x000008, "Wrong alignment on UCompressedStreamedVirtualGrassPageSectionData");
static_assert(sizeof(UCompressedStreamedVirtualGrassPageSectionData) == 0x000228, "Wrong size on UCompressedStreamedVirtualGrassPageSectionData");
static_assert(offsetof(UCompressedStreamedVirtualGrassPageSectionData, TotalGrassMeshNum) == 0x000034, "Member 'UCompressedStreamedVirtualGrassPageSectionData::TotalGrassMeshNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedVirtualGrassPageSectionData, TotalPageSectionsNum) == 0x000038, "Member 'UCompressedStreamedVirtualGrassPageSectionData::TotalPageSectionsNum' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedVirtualGrassPageSectionData, GrassVarietyKeys) == 0x000040, "Member 'UCompressedStreamedVirtualGrassPageSectionData::GrassVarietyKeys' has a wrong offset!");
static_assert(offsetof(UCompressedStreamedVirtualGrassPageSectionData, GrassMeshMap) == 0x000050, "Member 'UCompressedStreamedVirtualGrassPageSectionData::GrassMeshMap' has a wrong offset!");

// Class PaperGPUDrivenFoliage.PaperVirtualGrassCullingComponent
// 0x0010 (0x05D0 - 0x05C0)
class UPaperVirtualGrassCullingComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_5B8[0x18];                                     // 0x05B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperVirtualGrassCullingComponent">();
	}
	static class UPaperVirtualGrassCullingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperVirtualGrassCullingComponent>();
	}
};
static_assert(alignof(UPaperVirtualGrassCullingComponent) == 0x000010, "Wrong alignment on UPaperVirtualGrassCullingComponent");
static_assert(sizeof(UPaperVirtualGrassCullingComponent) == 0x0005D0, "Wrong size on UPaperVirtualGrassCullingComponent");

// Class PaperGPUDrivenFoliage.PaperVirtualGrassPageComponent
// 0x00B0 (0x0670 - 0x05C0)
class UPaperVirtualGrassPageComponent final : public UPrimitiveComponent
{
public:
	struct FSoftObjectPath                        VertexAssetSaveDataPath;                           // 0x05B8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SrcMat;                                            // 0x05D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RuntimeMat;                                        // 0x05E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPFoliagePageSectionData>       PageSections;                                      // 0x05E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PageSectionIndexStart;                             // 0x05F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIndex;                                         // 0x05FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InnerPageIndex;                                    // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMeshUVChannelInfo                     PageUVChannelData;                                 // 0x0604(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	class UGPUDrivenFoliageMeshVertexAssetData*   TemptGrassPageVertexAssetData;                     // 0x0618(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_620[0x50];                                     // 0x0620(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperVirtualGrassPageComponent">();
	}
	static class UPaperVirtualGrassPageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperVirtualGrassPageComponent>();
	}
};
static_assert(alignof(UPaperVirtualGrassPageComponent) == 0x000010, "Wrong alignment on UPaperVirtualGrassPageComponent");
static_assert(sizeof(UPaperVirtualGrassPageComponent) == 0x000670, "Wrong size on UPaperVirtualGrassPageComponent");
static_assert(offsetof(UPaperVirtualGrassPageComponent, VertexAssetSaveDataPath) == 0x0005B8, "Member 'UPaperVirtualGrassPageComponent::VertexAssetSaveDataPath' has a wrong offset!");
static_assert(offsetof(UPaperVirtualGrassPageComponent, SrcMat) == 0x0005D8, "Member 'UPaperVirtualGrassPageComponent::SrcMat' has a wrong offset!");
static_assert(offsetof(UPaperVirtualGrassPageComponent, RuntimeMat) == 0x0005E0, "Member 'UPaperVirtualGrassPageComponent::RuntimeMat' has a wrong offset!");
static_assert(offsetof(UPaperVirtualGrassPageComponent, PageSections) == 0x0005E8, "Member 'UPaperVirtualGrassPageComponent::PageSections' has a wrong offset!");
static_assert(offsetof(UPaperVirtualGrassPageComponent, PageSectionIndexStart) == 0x0005F8, "Member 'UPaperVirtualGrassPageComponent::PageSectionIndexStart' has a wrong offset!");
static_assert(offsetof(UPaperVirtualGrassPageComponent, PageIndex) == 0x0005FC, "Member 'UPaperVirtualGrassPageComponent::PageIndex' has a wrong offset!");
static_assert(offsetof(UPaperVirtualGrassPageComponent, InnerPageIndex) == 0x000600, "Member 'UPaperVirtualGrassPageComponent::InnerPageIndex' has a wrong offset!");
static_assert(offsetof(UPaperVirtualGrassPageComponent, PageUVChannelData) == 0x000604, "Member 'UPaperVirtualGrassPageComponent::PageUVChannelData' has a wrong offset!");
static_assert(offsetof(UPaperVirtualGrassPageComponent, TemptGrassPageVertexAssetData) == 0x000618, "Member 'UPaperVirtualGrassPageComponent::TemptGrassPageVertexAssetData' has a wrong offset!");

// Class PaperGPUDrivenFoliage.PaperVirtualLandscapeComponent
// 0x0050 (0x0610 - 0x05C0)
class UPaperVirtualLandscapeComponent final : public UPrimitiveComponent
{
public:
	struct FPerPlatformFloat                      Space;                                             // 0x05B8(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformFloat                      Lod0Distribution;                                  // 0x05BC(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformFloat                      LodDistribution;                                   // 0x05C0(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformFloat                      LODScale;                                          // 0x05C4(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformInt                        LevelNum;                                          // 0x05C8(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformInt                        FarLevelBegin;                                     // 0x05CC(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SrcMaterial;                                       // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SrcFarDisMaterial;                                 // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DebugToggleMaterial;                               // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             AreaMaskTexture;                                   // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AreaMaskWorldPosSize;                              // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AreaMaskWorldPosOffset;                            // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperVirtualLandscapeComponent">();
	}
	static class UPaperVirtualLandscapeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperVirtualLandscapeComponent>();
	}
};
static_assert(alignof(UPaperVirtualLandscapeComponent) == 0x000010, "Wrong alignment on UPaperVirtualLandscapeComponent");
static_assert(sizeof(UPaperVirtualLandscapeComponent) == 0x000610, "Wrong size on UPaperVirtualLandscapeComponent");
static_assert(offsetof(UPaperVirtualLandscapeComponent, Space) == 0x0005B8, "Member 'UPaperVirtualLandscapeComponent::Space' has a wrong offset!");
static_assert(offsetof(UPaperVirtualLandscapeComponent, Lod0Distribution) == 0x0005BC, "Member 'UPaperVirtualLandscapeComponent::Lod0Distribution' has a wrong offset!");
static_assert(offsetof(UPaperVirtualLandscapeComponent, LodDistribution) == 0x0005C0, "Member 'UPaperVirtualLandscapeComponent::LodDistribution' has a wrong offset!");
static_assert(offsetof(UPaperVirtualLandscapeComponent, LODScale) == 0x0005C4, "Member 'UPaperVirtualLandscapeComponent::LODScale' has a wrong offset!");
static_assert(offsetof(UPaperVirtualLandscapeComponent, LevelNum) == 0x0005C8, "Member 'UPaperVirtualLandscapeComponent::LevelNum' has a wrong offset!");
static_assert(offsetof(UPaperVirtualLandscapeComponent, FarLevelBegin) == 0x0005CC, "Member 'UPaperVirtualLandscapeComponent::FarLevelBegin' has a wrong offset!");
static_assert(offsetof(UPaperVirtualLandscapeComponent, SrcMaterial) == 0x0005D0, "Member 'UPaperVirtualLandscapeComponent::SrcMaterial' has a wrong offset!");
static_assert(offsetof(UPaperVirtualLandscapeComponent, SrcFarDisMaterial) == 0x0005D8, "Member 'UPaperVirtualLandscapeComponent::SrcFarDisMaterial' has a wrong offset!");
static_assert(offsetof(UPaperVirtualLandscapeComponent, DebugToggleMaterial) == 0x0005E0, "Member 'UPaperVirtualLandscapeComponent::DebugToggleMaterial' has a wrong offset!");
static_assert(offsetof(UPaperVirtualLandscapeComponent, AreaMaskTexture) == 0x0005E8, "Member 'UPaperVirtualLandscapeComponent::AreaMaskTexture' has a wrong offset!");
static_assert(offsetof(UPaperVirtualLandscapeComponent, AreaMaskWorldPosSize) == 0x0005F0, "Member 'UPaperVirtualLandscapeComponent::AreaMaskWorldPosSize' has a wrong offset!");
static_assert(offsetof(UPaperVirtualLandscapeComponent, AreaMaskWorldPosOffset) == 0x000600, "Member 'UPaperVirtualLandscapeComponent::AreaMaskWorldPosOffset' has a wrong offset!");

}

