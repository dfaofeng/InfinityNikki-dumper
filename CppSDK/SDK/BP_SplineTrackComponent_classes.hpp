#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineTrackComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Enum_SplineTrackState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "F_SplineTrackKeyFrameData_structs.hpp"
#include "X6Game_structs.hpp"
#include "X6Game_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineTrackComponent.BP_SplineTrackComponent_C
// 0x02B0 (0x0A30 - 0x0780)
class UBP_SplineTrackComponent_C final : public UX6BaseSplineTrackComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0780(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bIsTrackActive;                                    // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_789[0x3];                                      // 0x0789(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastPassedPointIndex;                              // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextPointIndex;                                    // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSegmentIndex;                               // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextSegmentIndex;                                  // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsMovingForward;                                  // 0x079C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79D[0x3];                                      // 0x079D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentSpeed;                                      // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAcceleration;                               // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B8[0x8];                                      // 0x07B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitTransform;                                     // 0x07C0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LogLevel;                                          // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_824[0x4];                                      // 0x0824(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 PointIndex)> OnReachPoint;                                   // 0x0828(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	Enum_SplineTrackState                         CurrentState;                                      // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentStayTime;                                   // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_SplineTrackState                         LastFrameState;                                    // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_849[0x7];                                      // 0x0849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LastFrameSpeed;                                    // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             EffectSplineMeshSoftRef;                           // 0x0858(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       EffectMaterialInstanceSoftRef;                     // 0x0880(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UStaticMesh*                            Object;                                            // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            EffectStaticMesh;                                  // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      EffectMaterialInstance;                            // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          EffectNiagaraSystemSoftRef;                        // 0x08C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          bAutoShowEffectPoints;                             // 0x08E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoShowEffectLine;                               // 0x08E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EA[0x2];                                      // 0x08EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           EffectLineColor;                                   // 0x08EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FC[0x4];                                      // 0x08FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         EffectNiagaraSystem;                               // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      EffectSplineStartNiagara;                          // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      EffectSplineEndNiagara;                            // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       EffectLineMIDs;                                    // 0x0918(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 EffectSplineMeshManager;                           // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<int32, struct FTrackSegmentOverride>     TempMap;                                           // 0x0930(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 SortedKeys;                                        // 0x0980(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bUseSplineRotation;                                // 0x0990(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_991[0x3];                                      // 0x0991(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           EffectPointColor;                                  // 0x0994(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowEffectLine;                                   // 0x09A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowEffectPoints;                                 // 0x09A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnablePitchRotation;                              // 0x09A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKeyFrameMode;                                     // 0x09A7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FF_SplineTrackKeyFrameData>     KeyFrameDataArray;                                 // 0x09A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        CurrentDistance;                                   // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentTime;                                       // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bClosedLoopCurrDisCrossStart;                      // 0x09C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUsedWithDatalayer;                                // 0x09C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9CA[0x6];                                      // 0x09CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bForward, int32 PointIndex)> OnReacheEnd;                     // 0x09D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bBrakeAtEnd;                                       // 0x09E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E1[0x7];                                      // 0x09E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MultiParams;                                       // 0x09E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bEnableNetSync;                                    // 0x09F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F9[0x7];                                      // 0x09F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        KeyFrameOneShotTime;                               // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        KeyFrameRoundTripTime;                             // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KeyFrameArrayReverseIndex;                         // 0x0A10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A14[0x4];                                      // 0x0A14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        UpdatedComponent;                                  // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        InitOffsetTime;                                    // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugEventDispatchers;                            // 0x0A28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddKeyFrameDataBlend(const struct FF_SplineTrackKeyFrameData& OldData, double NewSpeed, double BlendTime, struct FF_SplineTrackKeyFrameData* NewData);
	void AddKeyFrameDataConst(const struct FF_SplineTrackKeyFrameData& OldData, double EndDistance, struct FF_SplineTrackKeyFrameData* NewData);
	void AddKeyFrameDataStay(const struct FF_SplineTrackKeyFrameData& OldData, double StayTime, struct FF_SplineTrackKeyFrameData* NewData);
	void AlignToInitPosition();
	void AlmostArriveNextPoint(double DeltaTime_0, bool* bAlmostArrive);
	void ArrangeSegmentOverrides();
	void BP_DeinitMulti();
	void BP_ForceSetStartTime(double NewStartTime);
	void BP_InitMulti();
	void BP_IsMultiPlayerModeAndEnableNetSync(bool* bYes);
	void BP_UpdateCurrentTimeMulti();
	void ChangeEffectLineColor(const struct FLinearColor& NewColor);
	void ChangeEffectPointColor(const struct FLinearColor& NewColor);
	void CondtionallySetPlatformActorRotation(const struct FRotator& TargetRotation);
	void DeInit();
	void DoesSegmentOverrideAnything(const struct FTrackSegmentOverride& Segment, bool* bOverrideSomething);
	void DrawEffectLine();
	void DrawEffectLineImpl();
	void DrawEffectPoints();
	void DrawEffectPointsImpl();
	void ExecuteUbergraph_BP_SplineTrackComponent(int32 EntryPoint);
	void FillSegmentOverrides();
	void GetAccelerationByKetFrameTime(double Time, double* Acceleration);
	void GetAllMoveInfoByKeyFrameTime(double Time, struct FTransform* Transform, struct FVector* Velocity, double* Acceleration, double* SplineDistance);
	void GetBlendTimeOnLeaveSplineSegment(int32 SegmentIndex, double* BlendTime);
	void GetClampedDistance(double InDistance);
	void GetClosedLoopClampDistance(double InDistance, double* OutDistance);
	void GetDistanceAndSpeedByKeyFrameData(double Time, double* Distance, double* Speed);
	void GetDistanceByKeyFrameTime(double Time, double* Distance);
	void GetInitializationSplineInuptKey(double* InitializationSplineInuptKey);
	void GetKeyFrameDataMaxTime(double* MaxTime);
	void GetKeyFrameTimeByDistance(double Distance, bool bForward, double* KeyFrameTime);
	void GetLaunchTimeOnSplineSegment(int32 SegmentIndex, double* LaunchTime);
	void GetLocationAndVelocityByKeyFrameTime(double Time, struct FVector* Location, struct FVector* Velocity);
	void GetLowerKeyFrameDataByDistance(double Distance, bool bForward, struct FF_SplineTrackKeyFrameData* NewParam);
	void GetLowerKeyFrameDataByTime(double Time, struct FF_SplineTrackKeyFrameData* NewParam);
	void GetNextSpeedBlendTime(double* Time);
	void GetSpeedOnSplineSegment(int32 SegmentIndex, double* Speed);
	void GetSpeedOnSplineSegmentImpl(int32 SegmentIndex, bool bForward, double* Speed);
	void GetStayTimeOnEnterSplineSegment(int32 SegmentIndex, double* StayTime);
	void GetUpperKeyFrameDataByDistance(double Distance, bool bForward, struct FF_SplineTrackKeyFrameData* KeyFrameData);
	void GetUpperKeyFrameDataByTime(double Time, struct FF_SplineTrackKeyFrameData* NewParam);
	void HasArrivedNextPoint(bool* bArrived);
	void HasReachedEnd(bool* bReachedEnd);
	void Init();
	void InitDistanceAndIndex();
	void InitKeyFrameData();
	void InitSegmentOverrides();
	void IsStaying(bool* bIsStaying);
	void IsTrackActive(bool* bActive);
	void LaunchHelper();
	void MapTimeToKeyFrameDataRange(double InTime, double* ValidTime);
	void OnLaunchFromEndPoint();
	void OnLoaded_001FCB834655C195935AE8ABB5056F2C(class UObject* Loaded);
	void OnLoaded_6CED6E0242C047F2D28A56AA09B6CC63(class UObject* Loaded);
	void OnLoaded_7DB3D5DB4E70E356CCC6DE94FB30A177(class UObject* Loaded);
	void OnReachEnd_Debug(bool bForward, int32 PointIndex);
	void OnReachPoint_Debug(int32 PointIndex);
	void PrintInfoOnUpdate();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void RemoveAllEffect();
	void RemoveEffectLine();
	void RemoveEffectPoints();
	void RequestMultiStart(TArray<int32>& Params_0);
	void RequestMultiStop(TArray<int32>& Params_0);
	void Reset();
	void ResetVariables();
	void ServerInit();
	void SetDefaultTimeBySpeed();
	void SetTrackActive(bool bNewActive);
	void SetTrackActiveImpl(bool bActive);
	void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);
	void ShouldStayOnEnterSplineSegment(int32 SegmentIndex, bool* bStay);
	void SnapToClosestPoint();
	void SortSegmentOverrides();
	void TryConstrainRotationToPitch(const struct FRotator& InRotation, struct FRotator* OutRotation);
	void UpdateAcceleration(double* NewAcceleration);
	void UpdateDistance(double DeltaTime_0, double* NewDistance);
	void UpdateNextPoint(double DeltaTime_0);
	void UpdatePlatformActor(double DeltaTime_0);
	void UpdateSpeed(double DeltaTime_0, double* NewSpeed);
	void UpdateState(double DeltaTime_0, Enum_SplineTrackState* NewState);
	void UpdateUsingKeyFrameMode(double DeltaTime_0);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineTrackComponent_C">();
	}
	static class UBP_SplineTrackComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SplineTrackComponent_C>();
	}
};
static_assert(alignof(UBP_SplineTrackComponent_C) == 0x000010, "Wrong alignment on UBP_SplineTrackComponent_C");
static_assert(sizeof(UBP_SplineTrackComponent_C) == 0x000A30, "Wrong size on UBP_SplineTrackComponent_C");
static_assert(offsetof(UBP_SplineTrackComponent_C, UberGraphFrame) == 0x000780, "Member 'UBP_SplineTrackComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bIsTrackActive) == 0x000788, "Member 'UBP_SplineTrackComponent_C::bIsTrackActive' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, LastPassedPointIndex) == 0x00078C, "Member 'UBP_SplineTrackComponent_C::LastPassedPointIndex' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, NextPointIndex) == 0x000790, "Member 'UBP_SplineTrackComponent_C::NextPointIndex' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, CurrentSegmentIndex) == 0x000794, "Member 'UBP_SplineTrackComponent_C::CurrentSegmentIndex' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, NextSegmentIndex) == 0x000798, "Member 'UBP_SplineTrackComponent_C::NextSegmentIndex' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bIsMovingForward) == 0x00079C, "Member 'UBP_SplineTrackComponent_C::bIsMovingForward' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, CurrentSpeed) == 0x0007A0, "Member 'UBP_SplineTrackComponent_C::CurrentSpeed' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, CurrentAcceleration) == 0x0007A8, "Member 'UBP_SplineTrackComponent_C::CurrentAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, DeltaTime) == 0x0007B0, "Member 'UBP_SplineTrackComponent_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, InitTransform) == 0x0007C0, "Member 'UBP_SplineTrackComponent_C::InitTransform' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, LogLevel) == 0x000820, "Member 'UBP_SplineTrackComponent_C::LogLevel' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, OnReachPoint) == 0x000828, "Member 'UBP_SplineTrackComponent_C::OnReachPoint' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, CurrentState) == 0x000838, "Member 'UBP_SplineTrackComponent_C::CurrentState' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, CurrentStayTime) == 0x000840, "Member 'UBP_SplineTrackComponent_C::CurrentStayTime' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, LastFrameState) == 0x000848, "Member 'UBP_SplineTrackComponent_C::LastFrameState' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, LastFrameSpeed) == 0x000850, "Member 'UBP_SplineTrackComponent_C::LastFrameSpeed' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectSplineMeshSoftRef) == 0x000858, "Member 'UBP_SplineTrackComponent_C::EffectSplineMeshSoftRef' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectMaterialInstanceSoftRef) == 0x000880, "Member 'UBP_SplineTrackComponent_C::EffectMaterialInstanceSoftRef' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, Object) == 0x0008A8, "Member 'UBP_SplineTrackComponent_C::Object' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectStaticMesh) == 0x0008B0, "Member 'UBP_SplineTrackComponent_C::EffectStaticMesh' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectMaterialInstance) == 0x0008B8, "Member 'UBP_SplineTrackComponent_C::EffectMaterialInstance' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectNiagaraSystemSoftRef) == 0x0008C0, "Member 'UBP_SplineTrackComponent_C::EffectNiagaraSystemSoftRef' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bAutoShowEffectPoints) == 0x0008E8, "Member 'UBP_SplineTrackComponent_C::bAutoShowEffectPoints' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bAutoShowEffectLine) == 0x0008E9, "Member 'UBP_SplineTrackComponent_C::bAutoShowEffectLine' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectLineColor) == 0x0008EC, "Member 'UBP_SplineTrackComponent_C::EffectLineColor' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectNiagaraSystem) == 0x000900, "Member 'UBP_SplineTrackComponent_C::EffectNiagaraSystem' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectSplineStartNiagara) == 0x000908, "Member 'UBP_SplineTrackComponent_C::EffectSplineStartNiagara' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectSplineEndNiagara) == 0x000910, "Member 'UBP_SplineTrackComponent_C::EffectSplineEndNiagara' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectLineMIDs) == 0x000918, "Member 'UBP_SplineTrackComponent_C::EffectLineMIDs' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectSplineMeshManager) == 0x000928, "Member 'UBP_SplineTrackComponent_C::EffectSplineMeshManager' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, TempMap) == 0x000930, "Member 'UBP_SplineTrackComponent_C::TempMap' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, SortedKeys) == 0x000980, "Member 'UBP_SplineTrackComponent_C::SortedKeys' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bUseSplineRotation) == 0x000990, "Member 'UBP_SplineTrackComponent_C::bUseSplineRotation' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, EffectPointColor) == 0x000994, "Member 'UBP_SplineTrackComponent_C::EffectPointColor' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bShowEffectLine) == 0x0009A4, "Member 'UBP_SplineTrackComponent_C::bShowEffectLine' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bShowEffectPoints) == 0x0009A5, "Member 'UBP_SplineTrackComponent_C::bShowEffectPoints' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bEnablePitchRotation) == 0x0009A6, "Member 'UBP_SplineTrackComponent_C::bEnablePitchRotation' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bKeyFrameMode) == 0x0009A7, "Member 'UBP_SplineTrackComponent_C::bKeyFrameMode' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, KeyFrameDataArray) == 0x0009A8, "Member 'UBP_SplineTrackComponent_C::KeyFrameDataArray' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, CurrentDistance) == 0x0009B8, "Member 'UBP_SplineTrackComponent_C::CurrentDistance' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, CurrentTime) == 0x0009C0, "Member 'UBP_SplineTrackComponent_C::CurrentTime' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bClosedLoopCurrDisCrossStart) == 0x0009C8, "Member 'UBP_SplineTrackComponent_C::bClosedLoopCurrDisCrossStart' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bUsedWithDatalayer) == 0x0009C9, "Member 'UBP_SplineTrackComponent_C::bUsedWithDatalayer' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, OnReacheEnd) == 0x0009D0, "Member 'UBP_SplineTrackComponent_C::OnReacheEnd' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bBrakeAtEnd) == 0x0009E0, "Member 'UBP_SplineTrackComponent_C::bBrakeAtEnd' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, MultiParams) == 0x0009E8, "Member 'UBP_SplineTrackComponent_C::MultiParams' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bEnableNetSync) == 0x0009F8, "Member 'UBP_SplineTrackComponent_C::bEnableNetSync' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, KeyFrameOneShotTime) == 0x000A00, "Member 'UBP_SplineTrackComponent_C::KeyFrameOneShotTime' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, KeyFrameRoundTripTime) == 0x000A08, "Member 'UBP_SplineTrackComponent_C::KeyFrameRoundTripTime' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, KeyFrameArrayReverseIndex) == 0x000A10, "Member 'UBP_SplineTrackComponent_C::KeyFrameArrayReverseIndex' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, UpdatedComponent) == 0x000A18, "Member 'UBP_SplineTrackComponent_C::UpdatedComponent' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, InitOffsetTime) == 0x000A20, "Member 'UBP_SplineTrackComponent_C::InitOffsetTime' has a wrong offset!");
static_assert(offsetof(UBP_SplineTrackComponent_C, bDebugEventDispatchers) == 0x000A28, "Member 'UBP_SplineTrackComponent_C::bDebugEventDispatchers' has a wrong offset!");

}

