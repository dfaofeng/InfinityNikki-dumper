#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PCGAreaCheck

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PCGAreaCheck_structs.hpp"


namespace SDK::Params
{

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.AddActorToUEDataLayer
// 0x0020 (0x0020 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayer final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LayerName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayer) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayer");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayer) == 0x000020, "Wrong size on PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayer");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayer, InActor) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayer::InActor' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayer, LayerName) == 0x000008, "Member 'PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayer::LayerName' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayer, ReturnValue) == 0x000018, "Member 'PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayer::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.AddActorToUEDataLayerFromAsset
// 0x0018 (0x0018 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayerFromAsset final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataLayerAsset*                        LayerAsset;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayerFromAsset) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayerFromAsset");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayerFromAsset) == 0x000018, "Wrong size on PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayerFromAsset");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayerFromAsset, InActor) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayerFromAsset::InActor' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayerFromAsset, LayerAsset) == 0x000008, "Member 'PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayerFromAsset::LayerAsset' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayerFromAsset, ReturnValue) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_AddActorToUEDataLayerFromAsset::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.BuildLandscapeActorBuffToImage
// 0x0038 (0x0038 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CollectLayers;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 BuffImagePath;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGAreaBuffType                              BuffType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage) == 0x000038, "Wrong size on PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage, FilePath) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage::FilePath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage, CollectLayers) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage::CollectLayers' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage, BuffImagePath) == 0x000020, "Member 'PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage::BuffImagePath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage, BuffType) == 0x000030, "Member 'PCGAreaCheckBlueprintLibrary_BuildLandscapeActorBuffToImage::BuffType' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.BuildLandscapesBuffToImage
// 0x0038 (0x0038 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CollectLayers;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 BuffImagePath;                                     // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGAreaBuffType                              BuffType;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage) == 0x000038, "Wrong size on PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage, FilePath) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage::FilePath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage, CollectLayers) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage::CollectLayers' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage, BuffImagePath) == 0x000020, "Member 'PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage::BuffImagePath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage, BuffType) == 0x000030, "Member 'PCGAreaCheckBlueprintLibrary_BuildLandscapesBuffToImage::BuffType' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.ChangeSelectedObjectPosTerrainData
// 0x0028 (0x0028 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_ChangeSelectedObjectPosTerrainData final
{
public:
	class FString                                 ReplacedLayerName;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeleteLayerFix;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpendTimes;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_ChangeSelectedObjectPosTerrainData) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_ChangeSelectedObjectPosTerrainData");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_ChangeSelectedObjectPosTerrainData) == 0x000028, "Wrong size on PCGAreaCheckBlueprintLibrary_ChangeSelectedObjectPosTerrainData");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ChangeSelectedObjectPosTerrainData, ReplacedLayerName) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_ChangeSelectedObjectPosTerrainData::ReplacedLayerName' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ChangeSelectedObjectPosTerrainData, DeleteLayerFix) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_ChangeSelectedObjectPosTerrainData::DeleteLayerFix' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ChangeSelectedObjectPosTerrainData, ExpendTimes) == 0x000020, "Member 'PCGAreaCheckBlueprintLibrary_ChangeSelectedObjectPosTerrainData::ExpendTimes' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.CollectLandscapeBuff
// 0x0030 (0x0030 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff final
{
public:
	class UAreaCheckSubsystem*                    AreaCheckSubsystem;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALandscapeProxy*                        LandscapeProxy;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 landscapeName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff) == 0x000030, "Wrong size on PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff, AreaCheckSubsystem) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff::AreaCheckSubsystem' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff, LandscapeProxy) == 0x000008, "Member 'PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff::LandscapeProxy' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff, landscapeName) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff::landscapeName' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff, FilePath) == 0x000020, "Member 'PCGAreaCheckBlueprintLibrary_CollectLandscapeBuff::FilePath' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.CollectLandscapesBuff
// 0x0018 (0x0018 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_CollectLandscapesBuff final
{
public:
	class UAreaCheckSubsystem*                    AreaCheckSubsystem;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_CollectLandscapesBuff) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_CollectLandscapesBuff");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_CollectLandscapesBuff) == 0x000018, "Wrong size on PCGAreaCheckBlueprintLibrary_CollectLandscapesBuff");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CollectLandscapesBuff, AreaCheckSubsystem) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_CollectLandscapesBuff::AreaCheckSubsystem' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CollectLandscapesBuff, FilePath) == 0x000008, "Member 'PCGAreaCheckBlueprintLibrary_CollectLandscapesBuff::FilePath' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.CombinLandscapesHeightAreaDataToPng
// 0x0048 (0x0048 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng final
{
public:
	class FString                                 ExportPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TileFilePath;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LayerName;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ALandscapeProxy*>                InSelectedLandscapeProxy;                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MinZ;                                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxZ;                                              // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng) == 0x000048, "Wrong size on PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng, ExportPath) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng::ExportPath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng, TileFilePath) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng::TileFilePath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng, LayerName) == 0x000020, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng::LayerName' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng, InSelectedLandscapeProxy) == 0x000030, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng::InSelectedLandscapeProxy' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng, MinZ) == 0x000040, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng::MinZ' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng, MaxZ) == 0x000044, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesHeightAreaDataToPng::MaxZ' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.CombinLandscapesMapDataToPng
// 0x0048 (0x0048 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng final
{
public:
	class FString                                 ExportPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TileFilePath;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LayerName;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ALandscapeProxy*>                InSelectedLandscapeProxy;                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         StepSizeX;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepSizeY;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng) == 0x000048, "Wrong size on PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng, ExportPath) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng::ExportPath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng, TileFilePath) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng::TileFilePath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng, LayerName) == 0x000020, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng::LayerName' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng, InSelectedLandscapeProxy) == 0x000030, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng::InSelectedLandscapeProxy' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng, StepSizeX) == 0x000040, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng::StepSizeX' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng, StepSizeY) == 0x000044, "Member 'PCGAreaCheckBlueprintLibrary_CombinLandscapesMapDataToPng::StepSizeY' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.ConcludeAreaFacePoint
// 0x0110 (0x0110 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint final
{
public:
	struct FVector                                StartPos;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   CheckArea;                                         // 0x0018(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TMap<struct FIntVector, struct FPCGAreaCheckPointInfo> OutResult;                                // 0x0050(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<struct FIntVector, struct FVector>       OutErrPoint;                                       // 0x00A0(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         LineTraceIgnoreActors;                             // 0x00F0(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x0100(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSearchSize;                                     // 0x0104(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint) == 0x000110, "Wrong size on PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint, StartPos) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint::StartPos' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint, CheckArea) == 0x000018, "Member 'PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint::CheckArea' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint, OutResult) == 0x000050, "Member 'PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint::OutResult' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint, OutErrPoint) == 0x0000A0, "Member 'PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint::OutErrPoint' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint, LineTraceIgnoreActors) == 0x0000F0, "Member 'PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint::LineTraceIgnoreActors' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint, StepSize) == 0x000100, "Member 'PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint::StepSize' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint, MaxSearchSize) == 0x000104, "Member 'PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint::MaxSearchSize' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint, ReturnValue) == 0x000108, "Member 'PCGAreaCheckBlueprintLibrary_ConcludeAreaFacePoint::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.ExportAllLandscapesToVTPng
// 0x0058 (0x0058 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng final
{
public:
	class FString                                 ExportPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AreaMap;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlockWidth;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlockHeight;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0020(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng) == 0x000058, "Wrong size on PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng, ExportPath) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng::ExportPath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng, AreaMap) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng::AreaMap' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng, BlockWidth) == 0x000018, "Member 'PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng::BlockWidth' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng, BlockHeight) == 0x00001C, "Member 'PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng::BlockHeight' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng, ReturnValue) == 0x000020, "Member 'PCGAreaCheckBlueprintLibrary_ExportAllLandscapesToVTPng::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.ExportBoxDataToPng
// 0x0078 (0x0078 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng final
{
public:
	struct FBox                                   BoundingBox;                                       // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ExportPath;                                        // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AreaMap;                                           // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExtCaptureLayers;                                  // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureSize;                                       // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExportDataWithTextureSize;                        // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBlackPlane;                                    // 0x0075(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng) == 0x000078, "Wrong size on PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng, BoundingBox) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng::BoundingBox' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng, ExportPath) == 0x000038, "Member 'PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng::ExportPath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng, AreaMap) == 0x000048, "Member 'PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng::AreaMap' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng, ExtCaptureLayers) == 0x000050, "Member 'PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng::ExtCaptureLayers' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng, Prefix) == 0x000060, "Member 'PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng::Prefix' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng, TextureSize) == 0x000070, "Member 'PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng::TextureSize' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng, bExportDataWithTextureSize) == 0x000074, "Member 'PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng::bExportDataWithTextureSize' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng, bUseBlackPlane) == 0x000075, "Member 'PCGAreaCheckBlueprintLibrary_ExportBoxDataToPng::bUseBlackPlane' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.ExportLandscapesMapDataToPng
// 0x0038 (0x0038 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng final
{
public:
	class FString                                 ExportPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AreaMap;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExtCaptureLayers;                                  // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         TextureSize;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraZOffset;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExportDataWithTextureSize;                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng) == 0x000038, "Wrong size on PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng, ExportPath) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng::ExportPath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng, AreaMap) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng::AreaMap' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng, ExtCaptureLayers) == 0x000018, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng::ExtCaptureLayers' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng, TextureSize) == 0x000028, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng::TextureSize' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng, CameraZOffset) == 0x00002C, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng::CameraZOffset' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng, bExportDataWithTextureSize) == 0x000030, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng::bExportDataWithTextureSize' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.ExportLandscapesMapDataToPng_Async
// 0x0068 (0x0068 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ExportPath;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AreaMap;                                           // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ALandscapeProxy*>                InSelectedLandscapeProxy;                          // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExtCaptureLayers;                                  // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         TextureSize;                                       // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraZOffset;                                     // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExportDataWithTextureSize;                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async) == 0x000068, "Wrong size on PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async, WorldContextObject) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async, LatentInfo) == 0x000008, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async::LatentInfo' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async, ExportPath) == 0x000020, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async::ExportPath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async, AreaMap) == 0x000030, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async::AreaMap' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async, InSelectedLandscapeProxy) == 0x000038, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async::InSelectedLandscapeProxy' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async, ExtCaptureLayers) == 0x000048, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async::ExtCaptureLayers' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async, TextureSize) == 0x000058, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async::TextureSize' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async, CameraZOffset) == 0x00005C, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async::CameraZOffset' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async, bExportDataWithTextureSize) == 0x000060, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesMapDataToPng_Async::bExportDataWithTextureSize' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.ExportLandscapesToPng
// 0x0028 (0x0028 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng final
{
public:
	class FString                                 ExportPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AreaMap;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng) == 0x000028, "Wrong size on PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng, ExportPath) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng::ExportPath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng, AreaMap) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng::AreaMap' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng, Width) == 0x000018, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng::Width' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng, Height) == 0x00001C, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng::Height' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng, Scale) == 0x000020, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesToPng::Scale' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.ExportLandscapesToPngWithBlockSize
// 0x0020 (0x0020 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize final
{
public:
	class FString                                 ExportPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AreaMap;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlockWidth;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlockHeight;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize) == 0x000020, "Wrong size on PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize, ExportPath) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize::ExportPath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize, AreaMap) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize::AreaMap' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize, BlockWidth) == 0x000018, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize::BlockWidth' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize, BlockHeight) == 0x00001C, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapesToPngWithBlockSize::BlockHeight' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.ExportLandscapeWeightLayerInfo
// 0x0018 (0x0018 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_ExportLandscapeWeightLayerInfo final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_ExportLandscapeWeightLayerInfo) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_ExportLandscapeWeightLayerInfo");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_ExportLandscapeWeightLayerInfo) == 0x000018, "Wrong size on PCGAreaCheckBlueprintLibrary_ExportLandscapeWeightLayerInfo");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapeWeightLayerInfo, FilePath) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapeWeightLayerInfo::FilePath' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_ExportLandscapeWeightLayerInfo, ReturnValue) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_ExportLandscapeWeightLayerInfo::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.GetBoxOverlapActors
// 0x0050 (0x0050 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_GetBoxOverlapActors final
{
public:
	struct FBox                                   InBox;                                             // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOnlyWithStaticMesh;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_GetBoxOverlapActors) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_GetBoxOverlapActors");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_GetBoxOverlapActors) == 0x000050, "Wrong size on PCGAreaCheckBlueprintLibrary_GetBoxOverlapActors");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetBoxOverlapActors, InBox) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_GetBoxOverlapActors::InBox' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetBoxOverlapActors, bOnlyWithStaticMesh) == 0x000038, "Member 'PCGAreaCheckBlueprintLibrary_GetBoxOverlapActors::bOnlyWithStaticMesh' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetBoxOverlapActors, ReturnValue) == 0x000040, "Member 'PCGAreaCheckBlueprintLibrary_GetBoxOverlapActors::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.GetEditorWorldCounterpartActor
// 0x0010 (0x0010 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_GetEditorWorldCounterpartActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_GetEditorWorldCounterpartActor) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_GetEditorWorldCounterpartActor");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_GetEditorWorldCounterpartActor) == 0x000010, "Wrong size on PCGAreaCheckBlueprintLibrary_GetEditorWorldCounterpartActor");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetEditorWorldCounterpartActor, InActor) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_GetEditorWorldCounterpartActor::InActor' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetEditorWorldCounterpartActor, ReturnValue) == 0x000008, "Member 'PCGAreaCheckBlueprintLibrary_GetEditorWorldCounterpartActor::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.GetHashString
// 0x0018 (0x0018 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_GetHashString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_GetHashString) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_GetHashString");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_GetHashString) == 0x000018, "Wrong size on PCGAreaCheckBlueprintLibrary_GetHashString");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetHashString, InString) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_GetHashString::InString' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetHashString, ReturnValue) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_GetHashString::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.GetInAreaActors
// 0x0020 (0x0020 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_GetInAreaActors final
{
public:
	TArray<class USplineComponent*>               InSplines;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_GetInAreaActors) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_GetInAreaActors");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_GetInAreaActors) == 0x000020, "Wrong size on PCGAreaCheckBlueprintLibrary_GetInAreaActors");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetInAreaActors, InSplines) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_GetInAreaActors::InSplines' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetInAreaActors, ReturnValue) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_GetInAreaActors::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.GetLandscapeComponentByLocation
// 0x0020 (0x0020 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_GetLandscapeComponentByLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeComponent*                    ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_GetLandscapeComponentByLocation) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_GetLandscapeComponentByLocation");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_GetLandscapeComponentByLocation) == 0x000020, "Wrong size on PCGAreaCheckBlueprintLibrary_GetLandscapeComponentByLocation");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetLandscapeComponentByLocation, InLocation) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_GetLandscapeComponentByLocation::InLocation' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetLandscapeComponentByLocation, ReturnValue) == 0x000018, "Member 'PCGAreaCheckBlueprintLibrary_GetLandscapeComponentByLocation::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.GetLandscapeComponentsByLocation
// 0x0068 (0x0068 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   OutBox;                                            // 0x0018(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULandscapeComponent*>            ReturnValue;                                       // 0x0058(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation) == 0x000068, "Wrong size on PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation, InLocation) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation::InLocation' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation, OutBox) == 0x000018, "Member 'PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation::OutBox' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation, SizeX) == 0x000050, "Member 'PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation::SizeX' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation, SizeY) == 0x000054, "Member 'PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation::SizeY' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation, ReturnValue) == 0x000058, "Member 'PCGAreaCheckBlueprintLibrary_GetLandscapeComponentsByLocation::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.GetLandscapeWeightLayerOrder
// 0x0068 (0x0068 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder final
{
public:
	struct FBox                                   AreaBox;                                           // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreLayers;                                      // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 OutTotalWeightValue;                               // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder) == 0x000068, "Wrong size on PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder, AreaBox) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder::AreaBox' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder, IgnoreLayers) == 0x000038, "Member 'PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder::IgnoreLayers' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder, OutTotalWeightValue) == 0x000048, "Member 'PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder::OutTotalWeightValue' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder, ReturnValue) == 0x000058, "Member 'PCGAreaCheckBlueprintLibrary_GetLandscapeWeightLayerOrder::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.GetPluginBaseDir
// 0x0020 (0x0020 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_GetPluginBaseDir final
{
public:
	class FString                                 PluginName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_GetPluginBaseDir) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_GetPluginBaseDir");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_GetPluginBaseDir) == 0x000020, "Wrong size on PCGAreaCheckBlueprintLibrary_GetPluginBaseDir");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetPluginBaseDir, PluginName) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_GetPluginBaseDir::PluginName' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetPluginBaseDir, ReturnValue) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_GetPluginBaseDir::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.GetSelectedComponents
// 0x0010 (0x0010 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_GetSelectedComponents final
{
public:
	TArray<class UActorComponent*>                ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_GetSelectedComponents) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_GetSelectedComponents");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_GetSelectedComponents) == 0x000010, "Wrong size on PCGAreaCheckBlueprintLibrary_GetSelectedComponents");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_GetSelectedComponents, ReturnValue) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_GetSelectedComponents::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.RemoveActorFromUEDataLayer
// 0x0020 (0x0020 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_RemoveActorFromUEDataLayer final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LayerName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_RemoveActorFromUEDataLayer) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_RemoveActorFromUEDataLayer");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_RemoveActorFromUEDataLayer) == 0x000020, "Wrong size on PCGAreaCheckBlueprintLibrary_RemoveActorFromUEDataLayer");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_RemoveActorFromUEDataLayer, InActor) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_RemoveActorFromUEDataLayer::InActor' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_RemoveActorFromUEDataLayer, LayerName) == 0x000008, "Member 'PCGAreaCheckBlueprintLibrary_RemoveActorFromUEDataLayer::LayerName' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_RemoveActorFromUEDataLayer, ReturnValue) == 0x000018, "Member 'PCGAreaCheckBlueprintLibrary_RemoveActorFromUEDataLayer::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.RemoveInstanceInSplineArea
// 0x0020 (0x0020 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FilterKeys;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         MinSize;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveStep;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea) == 0x000020, "Wrong size on PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea, Spline) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea::Spline' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea, FilterKeys) == 0x000008, "Member 'PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea::FilterKeys' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea, MinSize) == 0x000018, "Member 'PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea::MinSize' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea, CurveStep) == 0x00001C, "Member 'PCGAreaCheckBlueprintLibrary_RemoveInstanceInSplineArea::CurveStep' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.RemoveStaticMeshCoveredGrass
// 0x0018 (0x0018 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_RemoveStaticMeshCoveredGrass final
{
public:
	class FString                                 ReplacedLayerName;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShrinkTimes;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_RemoveStaticMeshCoveredGrass) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_RemoveStaticMeshCoveredGrass");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_RemoveStaticMeshCoveredGrass) == 0x000018, "Wrong size on PCGAreaCheckBlueprintLibrary_RemoveStaticMeshCoveredGrass");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_RemoveStaticMeshCoveredGrass, ReplacedLayerName) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_RemoveStaticMeshCoveredGrass::ReplacedLayerName' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_RemoveStaticMeshCoveredGrass, ShrinkTimes) == 0x000010, "Member 'PCGAreaCheckBlueprintLibrary_RemoveStaticMeshCoveredGrass::ShrinkTimes' has a wrong offset!");

// Function PCGAreaCheck.PCGAreaCheckBlueprintLibrary.StampFromSplineArea
// 0x0068 (0x0068 - 0x0000)
struct PCGAreaCheckBlueprintLibrary_StampFromSplineArea final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FilterKeys;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        InStampAsset;                                      // 0x0018(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSize;                                           // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveStep;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceNow;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveAsset;                                        // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0048(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAreaCheckBlueprintLibrary_StampFromSplineArea) == 0x000008, "Wrong alignment on PCGAreaCheckBlueprintLibrary_StampFromSplineArea");
static_assert(sizeof(PCGAreaCheckBlueprintLibrary_StampFromSplineArea) == 0x000068, "Wrong size on PCGAreaCheckBlueprintLibrary_StampFromSplineArea");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_StampFromSplineArea, Spline) == 0x000000, "Member 'PCGAreaCheckBlueprintLibrary_StampFromSplineArea::Spline' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_StampFromSplineArea, FilterKeys) == 0x000008, "Member 'PCGAreaCheckBlueprintLibrary_StampFromSplineArea::FilterKeys' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_StampFromSplineArea, InStampAsset) == 0x000018, "Member 'PCGAreaCheckBlueprintLibrary_StampFromSplineArea::InStampAsset' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_StampFromSplineArea, MinSize) == 0x000038, "Member 'PCGAreaCheckBlueprintLibrary_StampFromSplineArea::MinSize' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_StampFromSplineArea, CurveStep) == 0x00003C, "Member 'PCGAreaCheckBlueprintLibrary_StampFromSplineArea::CurveStep' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_StampFromSplineArea, bReplaceNow) == 0x000040, "Member 'PCGAreaCheckBlueprintLibrary_StampFromSplineArea::bReplaceNow' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_StampFromSplineArea, bSaveAsset) == 0x000041, "Member 'PCGAreaCheckBlueprintLibrary_StampFromSplineArea::bSaveAsset' has a wrong offset!");
static_assert(offsetof(PCGAreaCheckBlueprintLibrary_StampFromSplineArea, ReturnValue) == 0x000048, "Member 'PCGAreaCheckBlueprintLibrary_StampFromSplineArea::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.RuntimeDataColllector.CollectPlayerData
// 0x0060 (0x0060 - 0x0000)
struct RuntimeDataColllector_CollectPlayerData final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataColllector_CollectPlayerData) == 0x000010, "Wrong alignment on RuntimeDataColllector_CollectPlayerData");
static_assert(sizeof(RuntimeDataColllector_CollectPlayerData) == 0x000060, "Wrong size on RuntimeDataColllector_CollectPlayerData");
static_assert(offsetof(RuntimeDataColllector_CollectPlayerData, ReturnValue) == 0x000000, "Member 'RuntimeDataColllector_CollectPlayerData::ReturnValue' has a wrong offset!");

// Function PCGAreaCheck.RuntimeDataColllector.SetSavePath
// 0x0010 (0x0010 - 0x0000)
struct RuntimeDataColllector_SetSavePath final
{
public:
	class FString                                 InSavePath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataColllector_SetSavePath) == 0x000008, "Wrong alignment on RuntimeDataColllector_SetSavePath");
static_assert(sizeof(RuntimeDataColllector_SetSavePath) == 0x000010, "Wrong size on RuntimeDataColllector_SetSavePath");
static_assert(offsetof(RuntimeDataColllector_SetSavePath, InSavePath) == 0x000000, "Member 'RuntimeDataColllector_SetSavePath::InSavePath' has a wrong offset!");

// Function PCGAreaCheck.RuntimeDataColllector.SetTickInterval
// 0x0004 (0x0004 - 0x0000)
struct RuntimeDataColllector_SetTickInterval final
{
public:
	int32                                         InInterval;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataColllector_SetTickInterval) == 0x000004, "Wrong alignment on RuntimeDataColllector_SetTickInterval");
static_assert(sizeof(RuntimeDataColllector_SetTickInterval) == 0x000004, "Wrong size on RuntimeDataColllector_SetTickInterval");
static_assert(offsetof(RuntimeDataColllector_SetTickInterval, InInterval) == 0x000000, "Member 'RuntimeDataColllector_SetTickInterval::InInterval' has a wrong offset!");

// Function PCGAreaCheck.RuntimeDataColllector.ShowCollectData
// 0x0050 (0x0050 - 0x0000)
struct RuntimeDataColllector_ShowCollectData final
{
public:
	struct FSoftObjectPath                        PackagePath;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutPointsArr;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutPointNumArr;                                    // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutColorArr;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataColllector_ShowCollectData) == 0x000008, "Wrong alignment on RuntimeDataColllector_ShowCollectData");
static_assert(sizeof(RuntimeDataColllector_ShowCollectData) == 0x000050, "Wrong size on RuntimeDataColllector_ShowCollectData");
static_assert(offsetof(RuntimeDataColllector_ShowCollectData, PackagePath) == 0x000000, "Member 'RuntimeDataColllector_ShowCollectData::PackagePath' has a wrong offset!");
static_assert(offsetof(RuntimeDataColllector_ShowCollectData, OutPointsArr) == 0x000020, "Member 'RuntimeDataColllector_ShowCollectData::OutPointsArr' has a wrong offset!");
static_assert(offsetof(RuntimeDataColllector_ShowCollectData, OutPointNumArr) == 0x000030, "Member 'RuntimeDataColllector_ShowCollectData::OutPointNumArr' has a wrong offset!");
static_assert(offsetof(RuntimeDataColllector_ShowCollectData, OutColorArr) == 0x000040, "Member 'RuntimeDataColllector_ShowCollectData::OutColorArr' has a wrong offset!");

// Function PCGAreaCheck.RuntimeDataColllector.StartCollectData
// 0x0020 (0x0020 - 0x0000)
struct RuntimeDataColllector_StartCollectData final
{
public:
	struct FLinearColor                           InBaseColor;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InSpecialColor;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataColllector_StartCollectData) == 0x000004, "Wrong alignment on RuntimeDataColllector_StartCollectData");
static_assert(sizeof(RuntimeDataColllector_StartCollectData) == 0x000020, "Wrong size on RuntimeDataColllector_StartCollectData");
static_assert(offsetof(RuntimeDataColllector_StartCollectData, InBaseColor) == 0x000000, "Member 'RuntimeDataColllector_StartCollectData::InBaseColor' has a wrong offset!");
static_assert(offsetof(RuntimeDataColllector_StartCollectData, InSpecialColor) == 0x000010, "Member 'RuntimeDataColllector_StartCollectData::InSpecialColor' has a wrong offset!");

}

