#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperMeshCapture

#include "Basic.hpp"

#include "PaperMeshCapture_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class PaperMeshCapture.PaperMeshCaptureComponent
// 0x0050 (0x0610 - 0x05C0)
class UPaperMeshCaptureComponent final : public UPrimitiveComponent
{
public:
	class UTextureRenderTarget*                   MeshColorCaptureRT;                                // 0x05B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget*                   MeshDepthCaptureRT;                                // 0x05C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PaperMeshCaptureChannelIndex;                      // 0x05C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C9[0x3];                                      // 0x05C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CacheFOV;                                          // 0x05CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOrth;                                             // 0x05D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D1[0x3];                                      // 0x05D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OrthoWidth;                                        // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlanarReflection;                                 // 0x05D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureEveryFrame;                                // 0x05DA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputAlpha;                                      // 0x05DB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPaperMeshCaptureAlphaMode                    AlphaOutputMode;                                   // 0x05DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5DD[0x3];                                      // 0x05DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NormalDistortionStrength;                          // 0x05E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraFOV;                                          // 0x05E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromPlaneFadeoutStart;                     // 0x05E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromPlaneFadeoutEnd;                       // 0x05EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleFromPlaneFadeStart;                           // 0x05F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleFromPlaneFadeEnd;                             // 0x05F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F8[0x18];                                     // 0x05F8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CaptureFrame();
	void SetEnable(bool bInEnable);
	void SetNewCaptureIndex(int32 NewMeshCaptureChannelIndex);
	void SetNewMeshColorTarget(class UTextureRenderTarget* NewMeshColorCaptureRT);
	void SetNewMeshDepthTarget(class UTextureRenderTarget* NewMeshDepthCaptureRT);
	void SetOrthoWidth(float NewOrthoWidth);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperMeshCaptureComponent">();
	}
	static class UPaperMeshCaptureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperMeshCaptureComponent>();
	}
};
static_assert(alignof(UPaperMeshCaptureComponent) == 0x000010, "Wrong alignment on UPaperMeshCaptureComponent");
static_assert(sizeof(UPaperMeshCaptureComponent) == 0x000610, "Wrong size on UPaperMeshCaptureComponent");
static_assert(offsetof(UPaperMeshCaptureComponent, MeshColorCaptureRT) == 0x0005B8, "Member 'UPaperMeshCaptureComponent::MeshColorCaptureRT' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, MeshDepthCaptureRT) == 0x0005C0, "Member 'UPaperMeshCaptureComponent::MeshDepthCaptureRT' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, PaperMeshCaptureChannelIndex) == 0x0005C8, "Member 'UPaperMeshCaptureComponent::PaperMeshCaptureChannelIndex' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, CacheFOV) == 0x0005CC, "Member 'UPaperMeshCaptureComponent::CacheFOV' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, bOrth) == 0x0005D0, "Member 'UPaperMeshCaptureComponent::bOrth' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, OrthoWidth) == 0x0005D4, "Member 'UPaperMeshCaptureComponent::OrthoWidth' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, bEnable) == 0x0005D8, "Member 'UPaperMeshCaptureComponent::bEnable' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, bPlanarReflection) == 0x0005D9, "Member 'UPaperMeshCaptureComponent::bPlanarReflection' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, bCaptureEveryFrame) == 0x0005DA, "Member 'UPaperMeshCaptureComponent::bCaptureEveryFrame' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, bOutputAlpha) == 0x0005DB, "Member 'UPaperMeshCaptureComponent::bOutputAlpha' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, AlphaOutputMode) == 0x0005DC, "Member 'UPaperMeshCaptureComponent::AlphaOutputMode' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, NormalDistortionStrength) == 0x0005E0, "Member 'UPaperMeshCaptureComponent::NormalDistortionStrength' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, ExtraFOV) == 0x0005E4, "Member 'UPaperMeshCaptureComponent::ExtraFOV' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, DistanceFromPlaneFadeoutStart) == 0x0005E8, "Member 'UPaperMeshCaptureComponent::DistanceFromPlaneFadeoutStart' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, DistanceFromPlaneFadeoutEnd) == 0x0005EC, "Member 'UPaperMeshCaptureComponent::DistanceFromPlaneFadeoutEnd' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, AngleFromPlaneFadeStart) == 0x0005F0, "Member 'UPaperMeshCaptureComponent::AngleFromPlaneFadeStart' has a wrong offset!");
static_assert(offsetof(UPaperMeshCaptureComponent, AngleFromPlaneFadeEnd) == 0x0005F4, "Member 'UPaperMeshCaptureComponent::AngleFromPlaneFadeEnd' has a wrong offset!");

}

