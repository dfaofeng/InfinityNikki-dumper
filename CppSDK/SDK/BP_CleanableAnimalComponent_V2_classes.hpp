#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CleanableAnimalComponent_V2

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ECleaningAnimalHeightType_structs.hpp"
#include "BP_X6ActorComponent_classes.hpp"
#include "E_CleaningAbilityType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CleanableAnimalComponent_V2.BP_CleanableAnimalComponent_V2_C
// 0x00E0 (0x0188 - 0x00A8)
class UBP_CleanableAnimalComponent_V2_C final : public UBP_X6ActorComponent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	ECleaningAnimalHeightType                     animalSize;                                        // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     slotsTransform;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible)
	double                                        CleanRange;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         slotsLS;                                           // 0x00D0(0x0010)(Edit, BlueprintVisible)
	TMulticastInlineDelegate<void(bool bIsClean)> OnCleanStateChanged;                               // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         BP_CleanEffctSize;                                 // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* CleaningPlayer, E_CleaningAbilityType CleaningAbilityType)> OnBecomeCleanSkillTarget; // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* CleaningPlayer, E_CleaningAbilityType CleaningAbilityType)> OnAfterCleanedAnimStarted; // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* CleaningPlayer, E_CleaningAbilityType CleaningAbilityType)> OnCleaningAnimalFinished; // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BP_DebugCameraSelection;                           // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableTwoWaySync;                               // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_PrepareCameraWithPlayerActorLocation;           // 0x012A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12B[0x5];                                      // 0x012B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BP_LookAtTargetLocationOffset;                     // 0x0130(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_AfterCleanFaceToNikki;                          // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* CleaningPlayer, E_CleaningAbilityType CleaningAbilityType)> PostCleaningAnimalFinished; // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UAnimSequence*>                  BP_TagList;                                        // 0x0160(0x0010)(Edit, BlueprintVisible)
	class UClass*                                 JewelrySystemComponent;                            // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         BP_TagStringList;                                  // 0x0178(0x0010)(Edit, BlueprintVisible)

public:
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_BP_CleanableAnimalComponent_V2(int32 EntryPoint);
	void BP_SetJewelryVisible(bool Visible);
	void BP_SetCleanEFXAlpha(bool isNeedHide, double DeltaTime);
	void BP_ServerSyncFakePosition(const struct FVector& FakePosition);
	void BP_RequestDestroyOwner();
	void BP_GetSlotRotation(int32 SlotIndex, struct FVector* rotateForwardVector);
	void BP_GetSlotLS(int32 NewParam, class FString* NewParam1);
	void BP_GetSlotLocation(int32 SlotIndex, struct FVector* slotLocation);
	void BP_GetNearestSlotIndex(int32* nearestSlotIndex);
	void BP_GetIsClean(bool* bClean);
	void BP_GetAnimalConfigId(int32* animalCfgId);
	void BP_EventTick(double DeltaSeconds);
	void BP_CheckInCleanRange(bool* bInRange);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CleanableAnimalComponent_V2_C">();
	}
	static class UBP_CleanableAnimalComponent_V2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CleanableAnimalComponent_V2_C>();
	}
};
static_assert(alignof(UBP_CleanableAnimalComponent_V2_C) == 0x000008, "Wrong alignment on UBP_CleanableAnimalComponent_V2_C");
static_assert(sizeof(UBP_CleanableAnimalComponent_V2_C) == 0x000188, "Wrong size on UBP_CleanableAnimalComponent_V2_C");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, UberGraphFrame) == 0x0000A8, "Member 'UBP_CleanableAnimalComponent_V2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, animalSize) == 0x0000B0, "Member 'UBP_CleanableAnimalComponent_V2_C::animalSize' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, slotsTransform) == 0x0000B8, "Member 'UBP_CleanableAnimalComponent_V2_C::slotsTransform' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, CleanRange) == 0x0000C8, "Member 'UBP_CleanableAnimalComponent_V2_C::CleanRange' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, slotsLS) == 0x0000D0, "Member 'UBP_CleanableAnimalComponent_V2_C::slotsLS' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, OnCleanStateChanged) == 0x0000E0, "Member 'UBP_CleanableAnimalComponent_V2_C::OnCleanStateChanged' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, BP_CleanEffctSize) == 0x0000F0, "Member 'UBP_CleanableAnimalComponent_V2_C::BP_CleanEffctSize' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, OnBecomeCleanSkillTarget) == 0x0000F8, "Member 'UBP_CleanableAnimalComponent_V2_C::OnBecomeCleanSkillTarget' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, OnAfterCleanedAnimStarted) == 0x000108, "Member 'UBP_CleanableAnimalComponent_V2_C::OnAfterCleanedAnimStarted' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, OnCleaningAnimalFinished) == 0x000118, "Member 'UBP_CleanableAnimalComponent_V2_C::OnCleaningAnimalFinished' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, BP_DebugCameraSelection) == 0x000128, "Member 'UBP_CleanableAnimalComponent_V2_C::BP_DebugCameraSelection' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, BP_EnableTwoWaySync) == 0x000129, "Member 'UBP_CleanableAnimalComponent_V2_C::BP_EnableTwoWaySync' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, BP_PrepareCameraWithPlayerActorLocation) == 0x00012A, "Member 'UBP_CleanableAnimalComponent_V2_C::BP_PrepareCameraWithPlayerActorLocation' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, BP_LookAtTargetLocationOffset) == 0x000130, "Member 'UBP_CleanableAnimalComponent_V2_C::BP_LookAtTargetLocationOffset' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, BP_AfterCleanFaceToNikki) == 0x000148, "Member 'UBP_CleanableAnimalComponent_V2_C::BP_AfterCleanFaceToNikki' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, PostCleaningAnimalFinished) == 0x000150, "Member 'UBP_CleanableAnimalComponent_V2_C::PostCleaningAnimalFinished' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, BP_TagList) == 0x000160, "Member 'UBP_CleanableAnimalComponent_V2_C::BP_TagList' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, JewelrySystemComponent) == 0x000170, "Member 'UBP_CleanableAnimalComponent_V2_C::JewelrySystemComponent' has a wrong offset!");
static_assert(offsetof(UBP_CleanableAnimalComponent_V2_C, BP_TagStringList) == 0x000178, "Member 'UBP_CleanableAnimalComponent_V2_C::BP_TagStringList' has a wrong offset!");

}

