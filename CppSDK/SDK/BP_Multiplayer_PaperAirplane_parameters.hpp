#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Multiplayer_PaperAirplane

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Multiplayer_PaperAirplane.BP_Multiplayer_PaperAirplane_C.AdjustRotation
// 0x0278 (0x0278 - 0x0000)
struct BP_Multiplayer_PaperAirplane_C_AdjustRotation final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetRollAngle;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue; // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue; // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x00F0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue_1; // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue_1; // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTangentAtDistanceAlongSpline_ReturnValue; // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue_1;            // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26A[0x2];                                      // 0x026A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_InterpSpeed_ImplicitCast;       // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Multiplayer_PaperAirplane_C_AdjustRotation) == 0x000008, "Wrong alignment on BP_Multiplayer_PaperAirplane_C_AdjustRotation");
static_assert(sizeof(BP_Multiplayer_PaperAirplane_C_AdjustRotation) == 0x000278, "Wrong size on BP_Multiplayer_PaperAirplane_C_AdjustRotation");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, DeltaTime) == 0x000000, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, TargetRollAngle) == 0x000008, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::TargetRollAngle' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_GetForwardVector_ReturnValue) == 0x000010, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_Vector_Normal2D_ReturnValue) == 0x000028, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000040, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000058, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue) == 0x000070, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue) == 0x000074, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue) == 0x000080, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_BreakRotator_Roll) == 0x000098, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_BreakRotator_Pitch) == 0x00009C, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_BreakRotator_Yaw) == 0x0000A0, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_MakeRotator_ReturnValue) == 0x0000A8, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_RInterpTo_ReturnValue) == 0x0000C0, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0000D8, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0000F0, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue_1) == 0x0001E8, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue_1) == 0x0001EC, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_GetTangentAtDistanceAlongSpline_ReturnValue) == 0x0001F0, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_GetTangentAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_Vector_Normal2D_ReturnValue_1) == 0x000208, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_Vector_Normal2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_Dot_VectorVector_ReturnValue) == 0x000220, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_Cross_VectorVector_ReturnValue) == 0x000228, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_DegAcos_ReturnValue) == 0x000240, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_BreakVector_X) == 0x000248, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_BreakVector_Y) == 0x000250, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_BreakVector_Z) == 0x000258, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000260, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000268, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000269, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x00026C, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000270, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_AdjustRotation, CallFunc_RInterpTo_InterpSpeed_ImplicitCast) == 0x000274, "Member 'BP_Multiplayer_PaperAirplane_C_AdjustRotation::CallFunc_RInterpTo_InterpSpeed_ImplicitCast' has a wrong offset!");

// Function BP_Multiplayer_PaperAirplane.BP_Multiplayer_PaperAirplane_C.BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Multiplayer_PaperAirplane.BP_Multiplayer_PaperAirplane_C.BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Back_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_Multiplayer_PaperAirplane.BP_Multiplayer_PaperAirplane_C.BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_15_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Multiplayer_PaperAirplane.BP_Multiplayer_PaperAirplane_C.BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Left_K2Node_ComponentBoundEvent_16_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_Multiplayer_PaperAirplane.BP_Multiplayer_PaperAirplane_C.BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Multiplayer_PaperAirplane.BP_Multiplayer_PaperAirplane_C.BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Multiplayer_PaperAirplane_C_BndEvt__BP_Multiplayer_PaperAirplane_Trigger_Right_K2Node_ComponentBoundEvent_12_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_Multiplayer_PaperAirplane.BP_Multiplayer_PaperAirplane_C.ExecuteUbergraph_BP_Multiplayer_PaperAirplane
// 0x03F8 (0x03F8 - 0x0000)
struct BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetX6GameNikkiPawn_NikkiPawn;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetX6GameNikkiPawn_NikkiPawn_1;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetX6GameNikkiPawn_NikkiPawn_2;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetX6GameNikkiPawn_NikkiPawn_3;           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetX6GameNikkiPawn_NikkiPawn_4;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetX6GameNikkiPawn_NikkiPawn_5;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_5;  // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_5;           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_5;            // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_5;       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_2;           // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_2;          // 0x0070(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_4;  // 0x0168(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_4;           // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_4;            // 0x0178(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_4;       // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_186[0x2];                                      // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_3;  // 0x0188(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_3;           // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_3;            // 0x0198(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_3;       // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x01A8(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x02BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BE[0x2];                                      // 0x02BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x02C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x02D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x02E0(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x03D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x03E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x03E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_4;    // 0x03F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_5;    // 0x03F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane) == 0x000008, "Wrong alignment on BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane");
static_assert(sizeof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane) == 0x0003F8, "Wrong size on BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, EntryPoint) == 0x000000, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_GetX6GameNikkiPawn_NikkiPawn) == 0x000020, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_GetX6GameNikkiPawn_NikkiPawn' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_GetX6GameNikkiPawn_NikkiPawn_1) == 0x000028, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_GetX6GameNikkiPawn_NikkiPawn_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_GetX6GameNikkiPawn_NikkiPawn_2) == 0x000030, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_GetX6GameNikkiPawn_NikkiPawn_2' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_GetX6GameNikkiPawn_NikkiPawn_3) == 0x000038, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_GetX6GameNikkiPawn_NikkiPawn_3' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_GetX6GameNikkiPawn_NikkiPawn_4) == 0x000040, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_GetX6GameNikkiPawn_NikkiPawn_4' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_GetX6GameNikkiPawn_NikkiPawn_5) == 0x000048, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_GetX6GameNikkiPawn_NikkiPawn_5' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OverlappedComponent_5) == 0x000050, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OverlappedComponent_5' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherActor_5) == 0x000058, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherActor_5' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherComp_5) == 0x000060, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherComp_5' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherBodyIndex_5) == 0x000068, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherBodyIndex_5' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_bFromSweep_2) == 0x00006C, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_bFromSweep_2' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_SweepResult_2) == 0x000070, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_SweepResult_2' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OverlappedComponent_4) == 0x000168, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OverlappedComponent_4' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherActor_4) == 0x000170, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherActor_4' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherComp_4) == 0x000178, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherComp_4' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherBodyIndex_4) == 0x000180, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherBodyIndex_4' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000184, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000185, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OverlappedComponent_3) == 0x000188, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OverlappedComponent_3' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherActor_3) == 0x000190, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherActor_3' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherComp_3) == 0x000198, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherComp_3' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherBodyIndex_3) == 0x0001A0, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherBodyIndex_3' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x0001A4, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_SweepResult_1) == 0x0001A8, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x0002A0, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherActor_2) == 0x0002A8, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherComp_2) == 0x0002B0, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x0002B8, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x0002BC, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x0002BD, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0002C0, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0002C8, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0002D0, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x0002D8, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_bFromSweep) == 0x0002DC, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_SweepResult) == 0x0002E0, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0003D8, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherActor) == 0x0003E0, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherComp) == 0x0003E8, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0003F0, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_EqualEqual_ObjectObject_ReturnValue_4) == 0x0003F4, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_EqualEqual_ObjectObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane, CallFunc_EqualEqual_ObjectObject_ReturnValue_5) == 0x0003F5, "Member 'BP_Multiplayer_PaperAirplane_C_ExecuteUbergraph_BP_Multiplayer_PaperAirplane::CallFunc_EqualEqual_ObjectObject_ReturnValue_5' has a wrong offset!");

// Function BP_Multiplayer_PaperAirplane.BP_Multiplayer_PaperAirplane_C.SetInvisibleWall
// 0x0001 (0x0001 - 0x0000)
struct BP_Multiplayer_PaperAirplane_C_SetInvisibleWall final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Multiplayer_PaperAirplane_C_SetInvisibleWall) == 0x000001, "Wrong alignment on BP_Multiplayer_PaperAirplane_C_SetInvisibleWall");
static_assert(sizeof(BP_Multiplayer_PaperAirplane_C_SetInvisibleWall) == 0x000001, "Wrong size on BP_Multiplayer_PaperAirplane_C_SetInvisibleWall");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_SetInvisibleWall, bEnable) == 0x000000, "Member 'BP_Multiplayer_PaperAirplane_C_SetInvisibleWall::bEnable' has a wrong offset!");

// Function BP_Multiplayer_PaperAirplane.BP_Multiplayer_PaperAirplane_C.TriggerWallFX
// 0x000C (0x000C - 0x0000)
struct BP_Multiplayer_PaperAirplane_C_TriggerWallFX final
{
public:
	bool                                          bEnter;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Multiplayer_PaperAirplane_C_TriggerWallFX) == 0x000004, "Wrong alignment on BP_Multiplayer_PaperAirplane_C_TriggerWallFX");
static_assert(sizeof(BP_Multiplayer_PaperAirplane_C_TriggerWallFX) == 0x00000C, "Wrong size on BP_Multiplayer_PaperAirplane_C_TriggerWallFX");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_TriggerWallFX, bEnter) == 0x000000, "Member 'BP_Multiplayer_PaperAirplane_C_TriggerWallFX::bEnter' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_TriggerWallFX, CallFunc_Greater_IntInt_ReturnValue) == 0x000001, "Member 'BP_Multiplayer_PaperAirplane_C_TriggerWallFX::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_TriggerWallFX, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'BP_Multiplayer_PaperAirplane_C_TriggerWallFX::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Multiplayer_PaperAirplane_C_TriggerWallFX, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_Multiplayer_PaperAirplane_C_TriggerWallFX::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

