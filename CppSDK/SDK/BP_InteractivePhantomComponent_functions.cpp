#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractivePhantomComponent

#include "Basic.hpp"

#include "BP_InteractivePhantomComponent_classes.hpp"
#include "BP_InteractivePhantomComponent_parameters.hpp"


namespace SDK
{

// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_CanOtherPlayerShareRewardWithMe
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           OtherPlayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   bCanShare                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractivePhantomComponent_C::BP_CanOtherPlayerShareRewardWithMe(class AActor* OtherPlayer, bool* bCanShare)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "BP_CanOtherPlayerShareRewardWithMe");

	Params::BP_InteractivePhantomComponent_C_BP_CanOtherPlayerShareRewardWithMe Parms{};

	Parms.OtherPlayer = OtherPlayer;

	UObject::ProcessEvent(Func, &Parms);

	if (bCanShare != nullptr)
		*bCanShare = Parms.bCanShare;
}


// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_CanShareRewardWithOtherPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bCanShare                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractivePhantomComponent_C::BP_CanShareRewardWithOtherPlayer(bool* bCanShare)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "BP_CanShareRewardWithOtherPlayer");

	Params::BP_InteractivePhantomComponent_C_BP_CanShareRewardWithOtherPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCanShare != nullptr)
		*bCanShare = Parms.bCanShare;
}


// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_DisableStateUpdate
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InteractivePhantomComponent_C::BP_DisableStateUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "BP_DisableStateUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_EnableStateUpdate
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InteractivePhantomComponent_C::BP_EnableStateUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "BP_EnableStateUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_ForceSetPhantomState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InteractiveObjPhantomState            NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractivePhantomComponent_C::BP_ForceSetPhantomState(E_InteractiveObjPhantomState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "BP_ForceSetPhantomState");

	Params::BP_InteractivePhantomComponent_C_BP_ForceSetPhantomState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_GetHoldingHandsPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ACharacter**                      HoldingHandsPlayer                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InteractivePhantomComponent_C::BP_GetHoldingHandsPlayer(class ACharacter** HoldingHandsPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "BP_GetHoldingHandsPlayer");

	Params::BP_InteractivePhantomComponent_C_BP_GetHoldingHandsPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HoldingHandsPlayer != nullptr)
		*HoldingHandsPlayer = Parms.HoldingHandsPlayer;
}


// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_GetOtherPlayerToShareReward
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ACharacter**                      OtherPlayer                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InteractivePhantomComponent_C::BP_GetOtherPlayerToShareReward(class ACharacter** OtherPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "BP_GetOtherPlayerToShareReward");

	Params::BP_InteractivePhantomComponent_C_BP_GetOtherPlayerToShareReward Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OtherPlayer != nullptr)
		*OtherPlayer = Parms.OtherPlayer;
}


// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_GetPhantomState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_InteractiveObjPhantomState*           PhantomState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractivePhantomComponent_C::BP_GetPhantomState(E_InteractiveObjPhantomState* PhantomState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "BP_GetPhantomState");

	Params::BP_InteractivePhantomComponent_C_BP_GetPhantomState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PhantomState != nullptr)
		*PhantomState = Parms.PhantomState;
}


// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_IsHoldingHands
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bHoldingHands                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractivePhantomComponent_C::BP_IsHoldingHands(bool* bHoldingHands)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "BP_IsHoldingHands");

	Params::BP_InteractivePhantomComponent_C_BP_IsHoldingHands Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bHoldingHands != nullptr)
		*bHoldingHands = Parms.bHoldingHands;
}


// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.ExecuteUbergraph_BP_InteractivePhantomComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractivePhantomComponent_C::ExecuteUbergraph_BP_InteractivePhantomComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "ExecuteUbergraph_BP_InteractivePhantomComponent");

	Params::BP_InteractivePhantomComponent_C_ExecuteUbergraph_BP_InteractivePhantomComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_InteractivePhantomComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_InteractivePhantomComponent_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractivePhantomComponent_C", "GetModuleName");

	Params::BP_InteractivePhantomComponent_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

