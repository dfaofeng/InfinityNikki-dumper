#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SubstanceCore

#include "Basic.hpp"

#include "SubstanceCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SubstanceCore.SubstanceGraphInstance
// 0x0170 (0x0198 - 0x0028)
class USubstanceGraphInstance final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PackageURL;                                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USubstanceInstanceFactory*              ParentFactory;                                     // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<uint32, class UTexture2D*>               ImageSources;                                      // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	class UMaterial*                              CreatedMaterial;                                   // 0x00A0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSubstancePreset>               Presets;                                           // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceConstant*              ConstantCreatedMaterial;                           // 0x00C8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicCreatedMaterial;                            // 0x00D0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FGuid>                     OutputTextureLinkData;                             // 0x00D8(0x0050)(NativeAccessSpecifierPublic)
	TMap<uint32, class USubstanceOutputData*>     OutputInstances;                                   // 0x0128(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bIsFrozen;                                         // 0x0178(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x1F];                                     // 0x0179(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateMaterial(const class FString& PackageName, class UMaterial* ParentMaterial);
	void CreateOutputs();
	class USubstanceGraphInstance* Duplicate();
	void EnableOutput(const class FString& Identifier, bool Value);
	class UMaterialInstanceConstant* GetConstantMaterial();
	class UMaterialInstanceDynamic* GetDynamicMaterialInstance(class FName Name_0, class UMaterial* InParentMaterial);
	struct FSubstanceFloatInputDesc GetFloatInputDesc(const class FString& Identifier);
	bool GetInputBool(const class FString& Identifier);
	struct FLinearColor GetInputColor(const class FString& Identifier);
	TArray<float> GetInputFloat(const class FString& Identifier);
	TArray<int32> GetInputInt(const class FString& Identifier);
	TArray<class FString> GetInputNames();
	class FString GetInputString(const class FString& Identifier);
	ESubstanceInputType GetInputType(const class FString& InputName);
	struct FSubstanceInstanceDesc GetInstanceDesc();
	struct FSubstanceIntInputDesc GetIntInputDesc(const class FString& Identifier);
	TArray<class FString> GetOutputNames();
	void RenderSync();
	void SetInputBool(const class FString& Identifier, bool Bool);
	void SetInputColor(const class FString& Identifier, const struct FLinearColor& Color);
	void SetInputFloat(const class FString& Identifier, const TArray<float>& InputValues);
	bool SetInputImg(const class FString& InputName, class UObject* Value);
	void SetInputInt(const class FString& Identifier, const TArray<int32>& InputValues);
	void SetInputString(const class FString& Identifier, const class FString& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceGraphInstance">();
	}
	static class USubstanceGraphInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceGraphInstance>();
	}
};
static_assert(alignof(USubstanceGraphInstance) == 0x000008, "Wrong alignment on USubstanceGraphInstance");
static_assert(sizeof(USubstanceGraphInstance) == 0x000198, "Wrong size on USubstanceGraphInstance");
static_assert(offsetof(USubstanceGraphInstance, PackageURL) == 0x000038, "Member 'USubstanceGraphInstance::PackageURL' has a wrong offset!");
static_assert(offsetof(USubstanceGraphInstance, ParentFactory) == 0x000048, "Member 'USubstanceGraphInstance::ParentFactory' has a wrong offset!");
static_assert(offsetof(USubstanceGraphInstance, ImageSources) == 0x000050, "Member 'USubstanceGraphInstance::ImageSources' has a wrong offset!");
static_assert(offsetof(USubstanceGraphInstance, CreatedMaterial) == 0x0000A0, "Member 'USubstanceGraphInstance::CreatedMaterial' has a wrong offset!");
static_assert(offsetof(USubstanceGraphInstance, Presets) == 0x0000A8, "Member 'USubstanceGraphInstance::Presets' has a wrong offset!");
static_assert(offsetof(USubstanceGraphInstance, ConstantCreatedMaterial) == 0x0000C8, "Member 'USubstanceGraphInstance::ConstantCreatedMaterial' has a wrong offset!");
static_assert(offsetof(USubstanceGraphInstance, DynamicCreatedMaterial) == 0x0000D0, "Member 'USubstanceGraphInstance::DynamicCreatedMaterial' has a wrong offset!");
static_assert(offsetof(USubstanceGraphInstance, OutputTextureLinkData) == 0x0000D8, "Member 'USubstanceGraphInstance::OutputTextureLinkData' has a wrong offset!");
static_assert(offsetof(USubstanceGraphInstance, OutputInstances) == 0x000128, "Member 'USubstanceGraphInstance::OutputInstances' has a wrong offset!");
static_assert(offsetof(USubstanceGraphInstance, bIsFrozen) == 0x000178, "Member 'USubstanceGraphInstance::bIsFrozen' has a wrong offset!");

// Class SubstanceCore.SubstanceInstanceFactory
// 0x0070 (0x0098 - 0x0028)
class USubstanceInstanceFactory final : public UObject
{
public:
	TArray<class USubstanceGraphInstance*>        mGraphInstances;                                   // 0x0028(0x0010)(ZeroConstructor, DuplicateTransient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RelativeSourceFilePath;                            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AbsoluteSourceFilePath;                            // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceFileTimestamp;                               // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubstanceGenerationMode                      GenerationMode;                                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USubstanceGraphInstance* CreateGraphInstance(const struct FSubstanceGraphDesc& GraphDesc, const class FString& PackageName);
	const TArray<struct FSubstanceGraphDesc> GetGraphDescs();
	const TArray<class USubstanceGraphInstance*> GetGraphInstances();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceInstanceFactory">();
	}
	static class USubstanceInstanceFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceInstanceFactory>();
	}
};
static_assert(alignof(USubstanceInstanceFactory) == 0x000008, "Wrong alignment on USubstanceInstanceFactory");
static_assert(sizeof(USubstanceInstanceFactory) == 0x000098, "Wrong size on USubstanceInstanceFactory");
static_assert(offsetof(USubstanceInstanceFactory, mGraphInstances) == 0x000028, "Member 'USubstanceInstanceFactory::mGraphInstances' has a wrong offset!");
static_assert(offsetof(USubstanceInstanceFactory, RelativeSourceFilePath) == 0x000060, "Member 'USubstanceInstanceFactory::RelativeSourceFilePath' has a wrong offset!");
static_assert(offsetof(USubstanceInstanceFactory, AbsoluteSourceFilePath) == 0x000070, "Member 'USubstanceInstanceFactory::AbsoluteSourceFilePath' has a wrong offset!");
static_assert(offsetof(USubstanceInstanceFactory, SourceFileTimestamp) == 0x000080, "Member 'USubstanceInstanceFactory::SourceFileTimestamp' has a wrong offset!");
static_assert(offsetof(USubstanceInstanceFactory, GenerationMode) == 0x000090, "Member 'USubstanceInstanceFactory::GenerationMode' has a wrong offset!");

// Class SubstanceCore.SubstanceOutputData
// 0x0030 (0x0058 - 0x0028)
class USubstanceOutputData final : public UObject
{
public:
	class UObject*                                ConnectedObject;                                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialParameterInfo                 ParamInfo;                                         // 0x0030(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USubstanceGraphInstance*                ParentInstance;                                    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CacheGuid;                                         // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceOutputData">();
	}
	static class USubstanceOutputData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceOutputData>();
	}
};
static_assert(alignof(USubstanceOutputData) == 0x000008, "Wrong alignment on USubstanceOutputData");
static_assert(sizeof(USubstanceOutputData) == 0x000058, "Wrong size on USubstanceOutputData");
static_assert(offsetof(USubstanceOutputData, ConnectedObject) == 0x000028, "Member 'USubstanceOutputData::ConnectedObject' has a wrong offset!");
static_assert(offsetof(USubstanceOutputData, ParamInfo) == 0x000030, "Member 'USubstanceOutputData::ParamInfo' has a wrong offset!");
static_assert(offsetof(USubstanceOutputData, ParentInstance) == 0x000040, "Member 'USubstanceOutputData::ParentInstance' has a wrong offset!");
static_assert(offsetof(USubstanceOutputData, CacheGuid) == 0x000048, "Member 'USubstanceOutputData::CacheGuid' has a wrong offset!");

// Class SubstanceCore.SubstanceSettings
// 0x0040 (0x0068 - 0x0028)
class USubstanceSettings final : public UObject
{
public:
	int32                                         MemoryBudgetMb;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CPUCores;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AsyncLoadMipClip;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAsyncSubstancesRenderedPerFrame;                // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubstanceEngineType                          SubstanceEngine;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDefaultSubstanceTextureSize                  DefaultSubstanceOutputSizeX;                       // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDefaultSubstanceTextureSize                  DefaultSubstanceOutputSizeY;                       // 0x003A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      DefaultTemplateMaterial;                           // 0x0040(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceSettings">();
	}
	static class USubstanceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceSettings>();
	}
};
static_assert(alignof(USubstanceSettings) == 0x000008, "Wrong alignment on USubstanceSettings");
static_assert(sizeof(USubstanceSettings) == 0x000068, "Wrong size on USubstanceSettings");
static_assert(offsetof(USubstanceSettings, MemoryBudgetMb) == 0x000028, "Member 'USubstanceSettings::MemoryBudgetMb' has a wrong offset!");
static_assert(offsetof(USubstanceSettings, CPUCores) == 0x00002C, "Member 'USubstanceSettings::CPUCores' has a wrong offset!");
static_assert(offsetof(USubstanceSettings, AsyncLoadMipClip) == 0x000030, "Member 'USubstanceSettings::AsyncLoadMipClip' has a wrong offset!");
static_assert(offsetof(USubstanceSettings, MaxAsyncSubstancesRenderedPerFrame) == 0x000034, "Member 'USubstanceSettings::MaxAsyncSubstancesRenderedPerFrame' has a wrong offset!");
static_assert(offsetof(USubstanceSettings, SubstanceEngine) == 0x000038, "Member 'USubstanceSettings::SubstanceEngine' has a wrong offset!");
static_assert(offsetof(USubstanceSettings, DefaultSubstanceOutputSizeX) == 0x000039, "Member 'USubstanceSettings::DefaultSubstanceOutputSizeX' has a wrong offset!");
static_assert(offsetof(USubstanceSettings, DefaultSubstanceOutputSizeY) == 0x00003A, "Member 'USubstanceSettings::DefaultSubstanceOutputSizeY' has a wrong offset!");
static_assert(offsetof(USubstanceSettings, DefaultTemplateMaterial) == 0x000040, "Member 'USubstanceSettings::DefaultTemplateMaterial' has a wrong offset!");

// Class SubstanceCore.SubstanceTexture2D
// 0x0058 (0x01A8 - 0x0150)
class USubstanceTexture2D final : public UTexture2DDynamic
{
public:
	uint8                                         Pad_150[0x30];                                     // 0x0150(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class USubstanceGraphInstance*                ParentInstance;                                    // 0x0180(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressX;                                          // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x0189(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCooked;                                           // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18B[0x1D];                                     // 0x018B(0x001D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceTexture2D">();
	}
	static class USubstanceTexture2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceTexture2D>();
	}
};
static_assert(alignof(USubstanceTexture2D) == 0x000008, "Wrong alignment on USubstanceTexture2D");
static_assert(sizeof(USubstanceTexture2D) == 0x0001A8, "Wrong size on USubstanceTexture2D");
static_assert(offsetof(USubstanceTexture2D, ParentInstance) == 0x000180, "Member 'USubstanceTexture2D::ParentInstance' has a wrong offset!");
static_assert(offsetof(USubstanceTexture2D, AddressX) == 0x000188, "Member 'USubstanceTexture2D::AddressX' has a wrong offset!");
static_assert(offsetof(USubstanceTexture2D, AddressY) == 0x000189, "Member 'USubstanceTexture2D::AddressY' has a wrong offset!");
static_assert(offsetof(USubstanceTexture2D, bCooked) == 0x00018A, "Member 'USubstanceTexture2D::bCooked' has a wrong offset!");

// Class SubstanceCore.SubstanceUtility
// 0x0000 (0x0028 - 0x0028)
class USubstanceUtility final : public UBlueprintFunctionLibrary
{
public:
	static void AsyncRendering(class USubstanceGraphInstance* InstancesToRender);
	static void ClearCache();
	static void CopyInputParameters(class USubstanceGraphInstance* SourceGraphInstance, class USubstanceGraphInstance* DestGraphInstance);
	static class USubstanceInstanceFactory* CreateAggregateSubstanceFactory(class USubstanceInstanceFactory* OutputFactory, int32 OutputFactoryGraphIndex, class USubstanceInstanceFactory* InputFactory, int32 InputFactoryGraphIndex, const TArray<struct FSubstanceConnection>& Connections);
	static class USubstanceGraphInstance* CreateGraphInstance(class UObject* WorldContextObject, class USubstanceInstanceFactory* Factory, int32 GraphDescIndex, class UMaterial* ParentMaterial, const class FString& InstanceName);
	static void DisableInstanceOutputs(class UObject* WorldContextObject, class USubstanceGraphInstance* GraphInstance, const TArray<int32>& OutputIndices);
	static class USubstanceGraphInstance* DuplicateGraphInstance(class UObject* WorldContextObject, class USubstanceGraphInstance* GraphInstance);
	static void EnableInstanceOutputs(class UObject* WorldContextObject, class USubstanceGraphInstance* GraphInstance, const TArray<int32>& OutputIndices);
	static class FString GetFactoryName(class USubstanceGraphInstance* GraphInstance);
	static class FString GetGraphName(class USubstanceGraphInstance* GraphInstance);
	static TArray<class UMaterial*> GetSubstanceIncludedMaterials();
	static float GetSubstanceLoadingProgress();
	static TArray<class USubstanceGraphInstance*> GetSubstances(class UMaterialInterface* Material);
	static TArray<class UTexture2D*> GetSubstanceTextures(class USubstanceGraphInstance* GraphInstance);
	static void ResetInputParameters(class USubstanceGraphInstance* GraphInstance);
	static void SetGraphInstanceOutputSize(class USubstanceGraphInstance* GraphInstance, ESubstanceTextureSize Width, ESubstanceTextureSize Height);
	static void SetGraphInstanceOutputSizeInt(class USubstanceGraphInstance* GraphInstance, int32 Width, int32 Height);
	static void SyncRendering(class USubstanceGraphInstance* InstancesToRender);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubstanceUtility">();
	}
	static class USubstanceUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubstanceUtility>();
	}
};
static_assert(alignof(USubstanceUtility) == 0x000008, "Wrong alignment on USubstanceUtility");
static_assert(sizeof(USubstanceUtility) == 0x000028, "Wrong size on USubstanceUtility");

}

