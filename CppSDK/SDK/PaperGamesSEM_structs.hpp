#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperGamesSEM

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum PaperGamesSEM.EPaperDataSetType
// NumValues: 0x0005
enum class EPaperDataSetType : uint8
{
	DT                                       = 0,
	Excel                                    = 1,
	Spawner                                  = 2,
	LinkDT                                   = 3,
	EPaperDataSetType_MAX                    = 4,
};

// Enum PaperGamesSEM.EProjectType
// NumValues: 0x0004
enum class EProjectType : uint8
{
	X6                                       = 1,
	X7                                       = 2,
	X12                                      = 3,
	EProjectType_MAX                         = 4,
};

// Enum PaperGamesSEM.ESnapToTerrainType
// NumValues: 0x0004
enum class ESnapToTerrainType : uint8
{
	Snap_Landsscape                          = 0,
	Snap_StaticMesh                          = 1,
	Snap_All                                 = 2,
	Snap_MAX                                 = 3,
};

// ScriptStruct PaperGamesSEM.ExcelExtraData
// 0x0010 (0x0010 - 0x0000)
struct FExcelExtraData final
{
public:
	class FString                                 Sheets;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExcelExtraData) == 0x000008, "Wrong alignment on FExcelExtraData");
static_assert(sizeof(FExcelExtraData) == 0x000010, "Wrong size on FExcelExtraData");
static_assert(offsetof(FExcelExtraData, Sheets) == 0x000000, "Member 'FExcelExtraData::Sheets' has a wrong offset!");

// ScriptStruct PaperGamesSEM.ExcelWarperData
// 0x0020 (0x0020 - 0x0000)
struct FExcelWarperData final
{
public:
	class FString                                 ExcelPath;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExcelSheets;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExcelWarperData) == 0x000008, "Wrong alignment on FExcelWarperData");
static_assert(sizeof(FExcelWarperData) == 0x000020, "Wrong size on FExcelWarperData");
static_assert(offsetof(FExcelWarperData, ExcelPath) == 0x000000, "Member 'FExcelWarperData::ExcelPath' has a wrong offset!");
static_assert(offsetof(FExcelWarperData, ExcelSheets) == 0x000010, "Member 'FExcelWarperData::ExcelSheets' has a wrong offset!");

// ScriptStruct PaperGamesSEM.LinkDtData
// 0x0010 (0x0010 - 0x0000)
struct FLinkDtData final
{
public:
	class FString                                 RowName;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FLinkDtData) == 0x000008, "Wrong alignment on FLinkDtData");
static_assert(sizeof(FLinkDtData) == 0x000010, "Wrong size on FLinkDtData");
static_assert(offsetof(FLinkDtData, RowName) == 0x000000, "Member 'FLinkDtData::RowName' has a wrong offset!");

// ScriptStruct PaperGamesSEM.PaperSEMMacroNodePinData
// 0x0090 (0x0090 - 0x0000)
struct FPaperSEMMacroNodePinData final
{
public:
	class FString                                 PinDesc;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPaperDataSetType                             DataSetType;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                DataSetList;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         ExcelPathList;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FExcelExtraData>                ExcelExtraDataList;                                // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FLinkDtData                            LinkDt;                                            // 0x0048(0x0010)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	class FString                                 ExcelDataType;                                     // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 DataRowID;                                         // 0x0068(0x0010)(Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 DescriptionRowID;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         SpawnerSetType;                                    // 0x0088(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperSEMMacroNodePinData) == 0x000008, "Wrong alignment on FPaperSEMMacroNodePinData");
static_assert(sizeof(FPaperSEMMacroNodePinData) == 0x000090, "Wrong size on FPaperSEMMacroNodePinData");
static_assert(offsetof(FPaperSEMMacroNodePinData, PinDesc) == 0x000000, "Member 'FPaperSEMMacroNodePinData::PinDesc' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodePinData, DataSetType) == 0x000010, "Member 'FPaperSEMMacroNodePinData::DataSetType' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodePinData, DataSetList) == 0x000018, "Member 'FPaperSEMMacroNodePinData::DataSetList' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodePinData, ExcelPathList) == 0x000028, "Member 'FPaperSEMMacroNodePinData::ExcelPathList' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodePinData, ExcelExtraDataList) == 0x000038, "Member 'FPaperSEMMacroNodePinData::ExcelExtraDataList' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodePinData, LinkDt) == 0x000048, "Member 'FPaperSEMMacroNodePinData::LinkDt' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodePinData, ExcelDataType) == 0x000058, "Member 'FPaperSEMMacroNodePinData::ExcelDataType' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodePinData, DataRowID) == 0x000068, "Member 'FPaperSEMMacroNodePinData::DataRowID' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodePinData, DescriptionRowID) == 0x000078, "Member 'FPaperSEMMacroNodePinData::DescriptionRowID' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodePinData, SpawnerSetType) == 0x000088, "Member 'FPaperSEMMacroNodePinData::SpawnerSetType' has a wrong offset!");

// ScriptStruct PaperGamesSEM.PaperSEMMacroNodeData
// 0x0070 (0x0070 - 0x0000)
struct FPaperSEMMacroNodeData final
{
public:
	TMap<class FName, struct FPaperSEMMacroNodePinData> PinDataMap;                                  // 0x0000(0x0050)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                          bEnableCustomColor;                                // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PaperSEMNodeFunctionType;                          // 0x0054(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableMarcoGraphNodeConditions;                   // 0x0058(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Keywords;                                          // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPaperSEMMacroNodeData) == 0x000008, "Wrong alignment on FPaperSEMMacroNodeData");
static_assert(sizeof(FPaperSEMMacroNodeData) == 0x000070, "Wrong size on FPaperSEMMacroNodeData");
static_assert(offsetof(FPaperSEMMacroNodeData, PinDataMap) == 0x000000, "Member 'FPaperSEMMacroNodeData::PinDataMap' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodeData, bEnableCustomColor) == 0x000050, "Member 'FPaperSEMMacroNodeData::bEnableCustomColor' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodeData, PaperSEMNodeFunctionType) == 0x000054, "Member 'FPaperSEMMacroNodeData::PaperSEMNodeFunctionType' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodeData, bEnableMarcoGraphNodeConditions) == 0x000058, "Member 'FPaperSEMMacroNodeData::bEnableMarcoGraphNodeConditions' has a wrong offset!");
static_assert(offsetof(FPaperSEMMacroNodeData, Keywords) == 0x000060, "Member 'FPaperSEMMacroNodeData::Keywords' has a wrong offset!");

// ScriptStruct PaperGamesSEM.ConditionStruct
// 0x0010 (0x0010 - 0x0000)
struct FConditionStruct final
{
public:
	int32                                         ConditionIndex;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserDefinedStruct*                     ConditionUserStruct;                               // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConditionStruct) == 0x000008, "Wrong alignment on FConditionStruct");
static_assert(sizeof(FConditionStruct) == 0x000010, "Wrong size on FConditionStruct");
static_assert(offsetof(FConditionStruct, ConditionIndex) == 0x000000, "Member 'FConditionStruct::ConditionIndex' has a wrong offset!");
static_assert(offsetof(FConditionStruct, ConditionUserStruct) == 0x000008, "Member 'FConditionStruct::ConditionUserStruct' has a wrong offset!");

// ScriptStruct PaperGamesSEM.SEMSplineData
// 0x0088 (0x0088 - 0x0000)
struct FSEMSplineData final
{
public:
	bool                                          bClosedLoop;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Width;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLimit;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               BaseRotation;                                      // 0x0010(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int64>                                 PointIDAry;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PositionAry;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<float>                                 PositionTerrainDisAry;                             // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       RotationAry;                                       // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ArriveTangentAry;                                  // 0x0068(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        LeaveTangentAry;                                   // 0x0078(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSEMSplineData) == 0x000008, "Wrong alignment on FSEMSplineData");
static_assert(sizeof(FSEMSplineData) == 0x000088, "Wrong size on FSEMSplineData");
static_assert(offsetof(FSEMSplineData, bClosedLoop) == 0x000000, "Member 'FSEMSplineData::bClosedLoop' has a wrong offset!");
static_assert(offsetof(FSEMSplineData, Width) == 0x000004, "Member 'FSEMSplineData::Width' has a wrong offset!");
static_assert(offsetof(FSEMSplineData, SpeedLimit) == 0x000008, "Member 'FSEMSplineData::SpeedLimit' has a wrong offset!");
static_assert(offsetof(FSEMSplineData, BaseRotation) == 0x000010, "Member 'FSEMSplineData::BaseRotation' has a wrong offset!");
static_assert(offsetof(FSEMSplineData, PointIDAry) == 0x000028, "Member 'FSEMSplineData::PointIDAry' has a wrong offset!");
static_assert(offsetof(FSEMSplineData, PositionAry) == 0x000038, "Member 'FSEMSplineData::PositionAry' has a wrong offset!");
static_assert(offsetof(FSEMSplineData, PositionTerrainDisAry) == 0x000048, "Member 'FSEMSplineData::PositionTerrainDisAry' has a wrong offset!");
static_assert(offsetof(FSEMSplineData, RotationAry) == 0x000058, "Member 'FSEMSplineData::RotationAry' has a wrong offset!");
static_assert(offsetof(FSEMSplineData, ArriveTangentAry) == 0x000068, "Member 'FSEMSplineData::ArriveTangentAry' has a wrong offset!");
static_assert(offsetof(FSEMSplineData, LeaveTangentAry) == 0x000078, "Member 'FSEMSplineData::LeaveTangentAry' has a wrong offset!");

// ScriptStruct PaperGamesSEM.DatalayerRequireTagsData
// 0x0010 (0x0010 - 0x0000)
struct FDatalayerRequireTagsData final
{
public:
	TArray<class FString>                         RequireTags;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatalayerRequireTagsData) == 0x000008, "Wrong alignment on FDatalayerRequireTagsData");
static_assert(sizeof(FDatalayerRequireTagsData) == 0x000010, "Wrong size on FDatalayerRequireTagsData");
static_assert(offsetof(FDatalayerRequireTagsData, RequireTags) == 0x000000, "Member 'FDatalayerRequireTagsData::RequireTags' has a wrong offset!");

// ScriptStruct PaperGamesSEM.GraphDefaultCreateNodeInfo
// 0x0030 (0x0030 - 0x0000)
struct FGraphDefaultCreateNodeInfo final
{
public:
	class FString                                 MarcoName;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPin;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutPin;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGraphDefaultCreateNodeInfo) == 0x000008, "Wrong alignment on FGraphDefaultCreateNodeInfo");
static_assert(sizeof(FGraphDefaultCreateNodeInfo) == 0x000030, "Wrong size on FGraphDefaultCreateNodeInfo");
static_assert(offsetof(FGraphDefaultCreateNodeInfo, MarcoName) == 0x000000, "Member 'FGraphDefaultCreateNodeInfo::MarcoName' has a wrong offset!");
static_assert(offsetof(FGraphDefaultCreateNodeInfo, InPin) == 0x000010, "Member 'FGraphDefaultCreateNodeInfo::InPin' has a wrong offset!");
static_assert(offsetof(FGraphDefaultCreateNodeInfo, OutPin) == 0x000020, "Member 'FGraphDefaultCreateNodeInfo::OutPin' has a wrong offset!");

}

