#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UIPinchHelper

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UIPinchHelper.BP_UIPinchHelper_C
// 0x0088 (0x00B0 - 0x0028)
class UBP_UIPinchHelper_C final : public UObject
{
public:
	TMulticastInlineDelegate<void(double ScaleStep)> OnZoom;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<int32>                                 pointerIndexArray;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        pointerDistance;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, struct FVector2D>                 pointerPosMap;                                     // 0x0050(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          banMouse;                                          // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        lastDistanceDelta;                                 // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateDistance(double* Distance);
	void HandleMouseMove(const struct FPointerEvent& MouseEvent);
	void HandleMousePress(const struct FPointerEvent& MouseEvent);
	void HandleMouseRelease(const struct FPointerEvent& MouseEvent);
	void HasOnePointerPressed(bool* bHas);
	void HasTwoPointerPressed(bool* bHas);
	void IsPointerIndexInArray(int32 PointerIndex, bool* bContain);
	void SetBanMouse(bool bBanMouse);
	void ShouldBanPointer(int32 PointerIndex, bool* shouldBan);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UIPinchHelper_C">();
	}
	static class UBP_UIPinchHelper_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UIPinchHelper_C>();
	}
};
static_assert(alignof(UBP_UIPinchHelper_C) == 0x000008, "Wrong alignment on UBP_UIPinchHelper_C");
static_assert(sizeof(UBP_UIPinchHelper_C) == 0x0000B0, "Wrong size on UBP_UIPinchHelper_C");
static_assert(offsetof(UBP_UIPinchHelper_C, OnZoom) == 0x000028, "Member 'UBP_UIPinchHelper_C::OnZoom' has a wrong offset!");
static_assert(offsetof(UBP_UIPinchHelper_C, pointerIndexArray) == 0x000038, "Member 'UBP_UIPinchHelper_C::pointerIndexArray' has a wrong offset!");
static_assert(offsetof(UBP_UIPinchHelper_C, pointerDistance) == 0x000048, "Member 'UBP_UIPinchHelper_C::pointerDistance' has a wrong offset!");
static_assert(offsetof(UBP_UIPinchHelper_C, pointerPosMap) == 0x000050, "Member 'UBP_UIPinchHelper_C::pointerPosMap' has a wrong offset!");
static_assert(offsetof(UBP_UIPinchHelper_C, banMouse) == 0x0000A0, "Member 'UBP_UIPinchHelper_C::banMouse' has a wrong offset!");
static_assert(offsetof(UBP_UIPinchHelper_C, lastDistanceDelta) == 0x0000A8, "Member 'UBP_UIPinchHelper_C::lastDistanceDelta' has a wrong offset!");

}

