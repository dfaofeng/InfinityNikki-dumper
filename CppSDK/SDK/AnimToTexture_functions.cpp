#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimToTexture

#include "Basic.hpp"

#include "AnimToTexture_classes.hpp"
#include "AnimToTexture_parameters.hpp"


namespace SDK
{

// Function AnimToTexture.AnimToTextureDataAsset.BP_GetBonePositionTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UAnimToTextureDataAsset::BP_GetBonePositionTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "BP_GetBonePositionTexture");

	Params::AnimToTextureDataAsset_BP_GetBonePositionTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.BP_GetBoneRotationTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UAnimToTextureDataAsset::BP_GetBoneRotationTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "BP_GetBoneRotationTexture");

	Params::AnimToTextureDataAsset_BP_GetBoneRotationTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.BP_GetBoneWeightTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UAnimToTextureDataAsset::BP_GetBoneWeightTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "BP_GetBoneWeightTexture");

	Params::AnimToTextureDataAsset_BP_GetBoneWeightTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.BP_GetSkeletalMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMesh*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMesh* UAnimToTextureDataAsset::BP_GetSkeletalMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "BP_GetSkeletalMesh");

	Params::AnimToTextureDataAsset_BP_GetSkeletalMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.BP_GetStaticMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UAnimToTextureDataAsset::BP_GetStaticMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "BP_GetStaticMesh");

	Params::AnimToTextureDataAsset_BP_GetStaticMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.GetIndexFromAnimSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UAnimSequence*              Sequence                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAnimToTextureDataAsset::GetIndexFromAnimSequence(const class UAnimSequence* Sequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "GetIndexFromAnimSequence");

	Params::AnimToTextureDataAsset_GetIndexFromAnimSequence Parms{};

	Parms.Sequence = Sequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.ResetInfo
// (Final, Native, Public)

void UAnimToTextureDataAsset::ResetInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "ResetInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.BatchUpdateInstancesAutoPlayData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInstancedStaticMeshComponent*    InstancedMeshComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FAnimToTextureAutoPlayData>&AutoPlayData                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FMatrix>&           Transforms                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bMarkRenderStateDirty                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimToTextureInstancePlaybackLibrary::BatchUpdateInstancesAutoPlayData(class UInstancedStaticMeshComponent* InstancedMeshComponent, const TArray<struct FAnimToTextureAutoPlayData>& AutoPlayData, const TArray<struct FMatrix>& Transforms, bool bMarkRenderStateDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "BatchUpdateInstancesAutoPlayData");

	Params::AnimToTextureInstancePlaybackLibrary_BatchUpdateInstancesAutoPlayData Parms{};

	Parms.InstancedMeshComponent = InstancedMeshComponent;
	Parms.AutoPlayData = std::move(AutoPlayData);
	Parms.Transforms = std::move(Transforms);
	Parms.bMarkRenderStateDirty = bMarkRenderStateDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.BatchUpdateInstancesFrameData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInstancedStaticMeshComponent*    InstancedMeshComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FAnimToTextureFrameData>&FrameData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FMatrix>&           Transforms                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bMarkRenderStateDirty                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimToTextureInstancePlaybackLibrary::BatchUpdateInstancesFrameData(class UInstancedStaticMeshComponent* InstancedMeshComponent, const TArray<struct FAnimToTextureFrameData>& FrameData, const TArray<struct FMatrix>& Transforms, bool bMarkRenderStateDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "BatchUpdateInstancesFrameData");

	Params::AnimToTextureInstancePlaybackLibrary_BatchUpdateInstancesFrameData Parms{};

	Parms.InstancedMeshComponent = InstancedMeshComponent;
	Parms.FrameData = std::move(FrameData);
	Parms.Transforms = std::move(Transforms);
	Parms.bMarkRenderStateDirty = bMarkRenderStateDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.GetAutoPlayDataFromDataAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UAnimToTextureDataAsset*    DataAsset                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnimationIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimToTextureAutoPlayData*      AutoPlayData                                           (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimToTextureInstancePlaybackLibrary::GetAutoPlayDataFromDataAsset(const class UAnimToTextureDataAsset* DataAsset, int32 AnimationIndex, struct FAnimToTextureAutoPlayData* AutoPlayData, float TimeOffset, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "GetAutoPlayDataFromDataAsset");

	Params::AnimToTextureInstancePlaybackLibrary_GetAutoPlayDataFromDataAsset Parms{};

	Parms.DataAsset = DataAsset;
	Parms.AnimationIndex = AnimationIndex;
	Parms.TimeOffset = TimeOffset;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AutoPlayData != nullptr)
		*AutoPlayData = std::move(Parms.AutoPlayData);

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.GetFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SampleRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAnimToTextureInstancePlaybackLibrary::GetFrame(float Time, float StartFrame, float EndFrame, float TimeOffset, float PlayRate, float SampleRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "GetFrame");

	Params::AnimToTextureInstancePlaybackLibrary_GetFrame Parms{};

	Parms.Time = Time;
	Parms.StartFrame = StartFrame;
	Parms.EndFrame = EndFrame;
	Parms.TimeOffset = TimeOffset;
	Parms.PlayRate = PlayRate;
	Parms.SampleRate = SampleRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.GetFrameDataFromDataAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UAnimToTextureDataAsset*    DataAsset                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnimationIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimToTextureFrameData*         AutoPlayData                                           (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimToTextureInstancePlaybackLibrary::GetFrameDataFromDataAsset(const class UAnimToTextureDataAsset* DataAsset, int32 AnimationIndex, float Time, struct FAnimToTextureFrameData* AutoPlayData, float TimeOffset, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "GetFrameDataFromDataAsset");

	Params::AnimToTextureInstancePlaybackLibrary_GetFrameDataFromDataAsset Parms{};

	Parms.DataAsset = DataAsset;
	Parms.AnimationIndex = AnimationIndex;
	Parms.Time = Time;
	Parms.TimeOffset = TimeOffset;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AutoPlayData != nullptr)
		*AutoPlayData = std::move(Parms.AutoPlayData);

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.SetupInstancedMeshComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInstancedStaticMeshComponent*    InstancedMeshComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumInstances                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoPlay                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimToTextureInstancePlaybackLibrary::SetupInstancedMeshComponent(class UInstancedStaticMeshComponent* InstancedMeshComponent, int32 NumInstances, bool bAutoPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "SetupInstancedMeshComponent");

	Params::AnimToTextureInstancePlaybackLibrary_SetupInstancedMeshComponent Parms{};

	Parms.InstancedMeshComponent = InstancedMeshComponent;
	Parms.NumInstances = NumInstances;
	Parms.bAutoPlay = bAutoPlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.UpdateInstanceAutoPlayData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInstancedStaticMeshComponent*    InstancedMeshComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimToTextureAutoPlayData&AutoPlayData                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bMarkRenderStateDirty                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimToTextureInstancePlaybackLibrary::UpdateInstanceAutoPlayData(class UInstancedStaticMeshComponent* InstancedMeshComponent, int32 InstanceIndex, const struct FAnimToTextureAutoPlayData& AutoPlayData, bool bMarkRenderStateDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "UpdateInstanceAutoPlayData");

	Params::AnimToTextureInstancePlaybackLibrary_UpdateInstanceAutoPlayData Parms{};

	Parms.InstancedMeshComponent = InstancedMeshComponent;
	Parms.InstanceIndex = InstanceIndex;
	Parms.AutoPlayData = std::move(AutoPlayData);
	Parms.bMarkRenderStateDirty = bMarkRenderStateDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.UpdateInstanceFrameData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInstancedStaticMeshComponent*    InstancedMeshComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAnimToTextureFrameData&   FrameData                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bMarkRenderStateDirty                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimToTextureInstancePlaybackLibrary::UpdateInstanceFrameData(class UInstancedStaticMeshComponent* InstancedMeshComponent, int32 InstanceIndex, const struct FAnimToTextureFrameData& FrameData, bool bMarkRenderStateDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "UpdateInstanceFrameData");

	Params::AnimToTextureInstancePlaybackLibrary_UpdateInstanceFrameData Parms{};

	Parms.InstancedMeshComponent = InstancedMeshComponent;
	Parms.InstanceIndex = InstanceIndex;
	Parms.FrameData = std::move(FrameData);
	Parms.bMarkRenderStateDirty = bMarkRenderStateDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

