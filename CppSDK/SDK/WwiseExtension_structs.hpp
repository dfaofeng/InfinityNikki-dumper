#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WwiseExtension

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum WwiseExtension.EAkEventDebugType
// NumValues: 0x0006
enum class EAkEventDebugType : uint8
{
	None                                     = 0,
	RefreshAll                               = 1,
	AddEvent                                 = 2,
	RemoveEvent                              = 3,
	ModifyEvent                              = 4,
	EAkEventDebugType_MAX                    = 5,
};

// Enum WwiseExtension.EAkActionEventDebugType
// NumValues: 0x0010
enum class EAkActionEventDebugType : uint8
{
	None                                     = 0,
	PostEvent                                = 1,
	PostEventCompleted                       = 2,
	PostEventEnd                             = 3,
	CancelCallback                           = 4,
	Warn_TooFastOneActor                     = 5,
	Warn_TooFastOneEvent                     = 6,
	Warn_Distance                            = 7,
	Error_Failed                             = 8,
	Error_Wwise                              = 9,
	Error_AkEvent                            = 10,
	Error_AkComponent                        = 11,
	Error_World                              = 12,
	Error_Device                             = 13,
	Error_Proxy                              = 14,
	EAkActionEventDebugType_MAX              = 15,
};

// Enum WwiseExtension.EAkJobType
// NumValues: 0x0004
enum class EAkJobType : uint8
{
	Generic                                  = 0,
	AudioProcessing                          = 1,
	SpatialAudio                             = 2,
	MAX                                      = 3,
};

// Enum WwiseExtension.EX6AkAudioContext
// NumValues: 0x0005
enum class EX6AkAudioContext : uint8
{
	Default                                  = 0,
	Animation                                = 1,
	Ambient                                  = 2,
	Niagara                                  = 3,
	EX6AkAudioContext_MAX                    = 4,
};

// ScriptStruct WwiseExtension.AkEventDebugInfo
// 0x0010 (0x0010 - 0x0000)
struct FAkEventDebugInfo final
{
public:
	EAkEventDebugType                             EventDebugType;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkEventProxy*                          EventDebugProxy;                                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkEventDebugInfo) == 0x000008, "Wrong alignment on FAkEventDebugInfo");
static_assert(sizeof(FAkEventDebugInfo) == 0x000010, "Wrong size on FAkEventDebugInfo");
static_assert(offsetof(FAkEventDebugInfo, EventDebugType) == 0x000000, "Member 'FAkEventDebugInfo::EventDebugType' has a wrong offset!");
static_assert(offsetof(FAkEventDebugInfo, EventDebugProxy) == 0x000008, "Member 'FAkEventDebugInfo::EventDebugProxy' has a wrong offset!");

// ScriptStruct WwiseExtension.AkParameters
// 0x0098 (0x0098 - 0x0000)
struct FAkParameters final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x28];                                       // 0x0008(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAtLocation : 1;                                   // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x2F];                                      // 0x0069(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAkParameters) == 0x000008, "Wrong alignment on FAkParameters");
static_assert(sizeof(FAkParameters) == 0x000098, "Wrong size on FAkParameters");
static_assert(offsetof(FAkParameters, WorldContextObject) == 0x000000, "Member 'FAkParameters::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FAkParameters, ExternalSources) == 0x000030, "Member 'FAkParameters::ExternalSources' has a wrong offset!");
static_assert(offsetof(FAkParameters, AkComponent) == 0x000040, "Member 'FAkParameters::AkComponent' has a wrong offset!");
static_assert(offsetof(FAkParameters, Location) == 0x000050, "Member 'FAkParameters::Location' has a wrong offset!");
static_assert(offsetof(FAkParameters, AudioContext) == 0x000068, "Member 'FAkParameters::AudioContext' has a wrong offset!");

// ScriptStruct WwiseExtension.ManagedAkEventInfo
// 0x00B8 (0x00B8 - 0x0000)
struct FManagedAkEventInfo final
{
public:
	struct FAkParameters                          AkParameters;                                      // 0x0000(0x0098)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x20];                                      // 0x0098(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FManagedAkEventInfo) == 0x000008, "Wrong alignment on FManagedAkEventInfo");
static_assert(sizeof(FManagedAkEventInfo) == 0x0000B8, "Wrong size on FManagedAkEventInfo");
static_assert(offsetof(FManagedAkEventInfo, AkParameters) == 0x000000, "Member 'FManagedAkEventInfo::AkParameters' has a wrong offset!");

// ScriptStruct WwiseExtension.AkEventActionDebugInfo
// 0x0028 (0x0028 - 0x0000)
struct FAkEventActionDebugInfo final
{
public:
	EAkActionEventDebugType                       ActionDebugType;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EventActor;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          Event;                                             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DescribeString;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkEventActionDebugInfo) == 0x000008, "Wrong alignment on FAkEventActionDebugInfo");
static_assert(sizeof(FAkEventActionDebugInfo) == 0x000028, "Wrong size on FAkEventActionDebugInfo");
static_assert(offsetof(FAkEventActionDebugInfo, ActionDebugType) == 0x000000, "Member 'FAkEventActionDebugInfo::ActionDebugType' has a wrong offset!");
static_assert(offsetof(FAkEventActionDebugInfo, EventActor) == 0x000008, "Member 'FAkEventActionDebugInfo::EventActor' has a wrong offset!");
static_assert(offsetof(FAkEventActionDebugInfo, Event) == 0x000010, "Member 'FAkEventActionDebugInfo::Event' has a wrong offset!");
static_assert(offsetof(FAkEventActionDebugInfo, DescribeString) == 0x000018, "Member 'FAkEventActionDebugInfo::DescribeString' has a wrong offset!");

// ScriptStruct WwiseExtension.AkImageSourceSettings
// 0x0040 (0x0040 - 0x0000)
struct FAkImageSourceSettings final
{
public:
	struct FVector                                SourcePosition;                                    // 0x0000(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceScalingFactor;                             // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Diffraction;                                       // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiffractionEmitterSide;                            // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiffractionListenerSide;                           // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SourceTextures;                                    // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkImageSourceSettings) == 0x000008, "Wrong alignment on FAkImageSourceSettings");
static_assert(sizeof(FAkImageSourceSettings) == 0x000040, "Wrong size on FAkImageSourceSettings");
static_assert(offsetof(FAkImageSourceSettings, SourcePosition) == 0x000000, "Member 'FAkImageSourceSettings::SourcePosition' has a wrong offset!");
static_assert(offsetof(FAkImageSourceSettings, DistanceScalingFactor) == 0x000018, "Member 'FAkImageSourceSettings::DistanceScalingFactor' has a wrong offset!");
static_assert(offsetof(FAkImageSourceSettings, Level) == 0x00001C, "Member 'FAkImageSourceSettings::Level' has a wrong offset!");
static_assert(offsetof(FAkImageSourceSettings, Diffraction) == 0x000020, "Member 'FAkImageSourceSettings::Diffraction' has a wrong offset!");
static_assert(offsetof(FAkImageSourceSettings, DiffractionEmitterSide) == 0x000024, "Member 'FAkImageSourceSettings::DiffractionEmitterSide' has a wrong offset!");
static_assert(offsetof(FAkImageSourceSettings, DiffractionListenerSide) == 0x000028, "Member 'FAkImageSourceSettings::DiffractionListenerSide' has a wrong offset!");
static_assert(offsetof(FAkImageSourceSettings, SourceTextures) == 0x000030, "Member 'FAkImageSourceSettings::SourceTextures' has a wrong offset!");

// ScriptStruct WwiseExtension.ManagedAkGroupInfo
// 0x0060 (0x0060 - 0x0000)
struct FManagedAkGroupInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint32, class UAkGroupValue*>            AkGroupValueMap;                                   // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FManagedAkGroupInfo) == 0x000008, "Wrong alignment on FManagedAkGroupInfo");
static_assert(sizeof(FManagedAkGroupInfo) == 0x000060, "Wrong size on FManagedAkGroupInfo");
static_assert(offsetof(FManagedAkGroupInfo, AkGroupValueMap) == 0x000010, "Member 'FManagedAkGroupInfo::AkGroupValueMap' has a wrong offset!");

// ScriptStruct WwiseExtension.FootstepSoundShoesTypeTableRowStruct
// 0x0030 (0x0038 - 0x0008)
struct FFootstepSoundShoesTypeTableRowStruct final : public FTableRowBase
{
public:
	uint8                                         ShoeTypeAsByte;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkSwitchValue>          AkSwitchValue;                                     // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootstepSoundShoesTypeTableRowStruct) == 0x000008, "Wrong alignment on FFootstepSoundShoesTypeTableRowStruct");
static_assert(sizeof(FFootstepSoundShoesTypeTableRowStruct) == 0x000038, "Wrong size on FFootstepSoundShoesTypeTableRowStruct");
static_assert(offsetof(FFootstepSoundShoesTypeTableRowStruct, ShoeTypeAsByte) == 0x000008, "Member 'FFootstepSoundShoesTypeTableRowStruct::ShoeTypeAsByte' has a wrong offset!");
static_assert(offsetof(FFootstepSoundShoesTypeTableRowStruct, AkSwitchValue) == 0x000010, "Member 'FFootstepSoundShoesTypeTableRowStruct::AkSwitchValue' has a wrong offset!");

// ScriptStruct WwiseExtension.FootstepSoundSurfaceTypeTableRowStruct
// 0x0030 (0x0038 - 0x0008)
struct FFootstepSoundSurfaceTypeTableRowStruct final : public FTableRowBase
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkSwitchValue>          AkSwitchValue;                                     // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootstepSoundSurfaceTypeTableRowStruct) == 0x000008, "Wrong alignment on FFootstepSoundSurfaceTypeTableRowStruct");
static_assert(sizeof(FFootstepSoundSurfaceTypeTableRowStruct) == 0x000038, "Wrong size on FFootstepSoundSurfaceTypeTableRowStruct");
static_assert(offsetof(FFootstepSoundSurfaceTypeTableRowStruct, SurfaceType) == 0x000008, "Member 'FFootstepSoundSurfaceTypeTableRowStruct::SurfaceType' has a wrong offset!");
static_assert(offsetof(FFootstepSoundSurfaceTypeTableRowStruct, AkSwitchValue) == 0x000010, "Member 'FFootstepSoundSurfaceTypeTableRowStruct::AkSwitchValue' has a wrong offset!");

}

