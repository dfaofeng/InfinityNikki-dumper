#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VirtualHeightfieldMesh

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class VirtualHeightfieldMesh.VirtualHeightFieldMaskAreaMarkerVolume
// 0x0020 (0x0400 - 0x03E0)
class AVirtualHeightFieldMaskAreaMarkerVolume final : public AVolume
{
public:
	struct FBoxSphereBounds3f                     CachedVolumeLocalBound;                            // 0x03E0(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualHeightFieldMaskAreaMarkerVolume">();
	}
	static class AVirtualHeightFieldMaskAreaMarkerVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVirtualHeightFieldMaskAreaMarkerVolume>();
	}
};
static_assert(alignof(AVirtualHeightFieldMaskAreaMarkerVolume) == 0x000008, "Wrong alignment on AVirtualHeightFieldMaskAreaMarkerVolume");
static_assert(sizeof(AVirtualHeightFieldMaskAreaMarkerVolume) == 0x000400, "Wrong size on AVirtualHeightFieldMaskAreaMarkerVolume");
static_assert(offsetof(AVirtualHeightFieldMaskAreaMarkerVolume, CachedVolumeLocalBound) == 0x0003E0, "Member 'AVirtualHeightFieldMaskAreaMarkerVolume::CachedVolumeLocalBound' has a wrong offset!");

// Class VirtualHeightfieldMesh.HeightfieldMinMaxTexture
// 0x0048 (0x0070 - 0x0028)
class UHeightfieldMinMaxTexture final : public UObject
{
public:
	class UTexture2D*                             Texture;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LodBiasTexture;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LodBiasMinMaxTexture;                              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCPULevels;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      TextureData;                                       // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FIntPoint                              TextureDataSize;                                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TextureDataMips;                                   // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeightfieldMinMaxTexture">();
	}
	static class UHeightfieldMinMaxTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeightfieldMinMaxTexture>();
	}
};
static_assert(alignof(UHeightfieldMinMaxTexture) == 0x000008, "Wrong alignment on UHeightfieldMinMaxTexture");
static_assert(sizeof(UHeightfieldMinMaxTexture) == 0x000070, "Wrong size on UHeightfieldMinMaxTexture");
static_assert(offsetof(UHeightfieldMinMaxTexture, Texture) == 0x000028, "Member 'UHeightfieldMinMaxTexture::Texture' has a wrong offset!");
static_assert(offsetof(UHeightfieldMinMaxTexture, LodBiasTexture) == 0x000030, "Member 'UHeightfieldMinMaxTexture::LodBiasTexture' has a wrong offset!");
static_assert(offsetof(UHeightfieldMinMaxTexture, LodBiasMinMaxTexture) == 0x000038, "Member 'UHeightfieldMinMaxTexture::LodBiasMinMaxTexture' has a wrong offset!");
static_assert(offsetof(UHeightfieldMinMaxTexture, MaxCPULevels) == 0x000040, "Member 'UHeightfieldMinMaxTexture::MaxCPULevels' has a wrong offset!");
static_assert(offsetof(UHeightfieldMinMaxTexture, TextureData) == 0x000048, "Member 'UHeightfieldMinMaxTexture::TextureData' has a wrong offset!");
static_assert(offsetof(UHeightfieldMinMaxTexture, TextureDataSize) == 0x000058, "Member 'UHeightfieldMinMaxTexture::TextureDataSize' has a wrong offset!");
static_assert(offsetof(UHeightfieldMinMaxTexture, TextureDataMips) == 0x000060, "Member 'UHeightfieldMinMaxTexture::TextureDataMips' has a wrong offset!");

// Class VirtualHeightfieldMesh.MaterialExpressionHeightfieldMinMaxTexture
// 0x0010 (0x00D0 - 0x00C0)
class UMaterialExpressionHeightfieldMinMaxTexture final : public UMaterialExpression
{
public:
	class UHeightfieldMinMaxTexture*              MinMaxTexture;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialSamplerType                          SamplerType;                                       // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionHeightfieldMinMaxTexture">();
	}
	static class UMaterialExpressionHeightfieldMinMaxTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionHeightfieldMinMaxTexture>();
	}
};
static_assert(alignof(UMaterialExpressionHeightfieldMinMaxTexture) == 0x000008, "Wrong alignment on UMaterialExpressionHeightfieldMinMaxTexture");
static_assert(sizeof(UMaterialExpressionHeightfieldMinMaxTexture) == 0x0000D0, "Wrong size on UMaterialExpressionHeightfieldMinMaxTexture");
static_assert(offsetof(UMaterialExpressionHeightfieldMinMaxTexture, MinMaxTexture) == 0x0000C0, "Member 'UMaterialExpressionHeightfieldMinMaxTexture::MinMaxTexture' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionHeightfieldMinMaxTexture, SamplerType) == 0x0000C8, "Member 'UMaterialExpressionHeightfieldMinMaxTexture::SamplerType' has a wrong offset!");

// Class VirtualHeightfieldMesh.VirtualHeightfieldMesh
// 0x0008 (0x03B0 - 0x03A8)
class AVirtualHeightfieldMesh final : public AActor
{
public:
	class UVirtualHeightfieldMeshComponent*       VirtualHeightfieldMeshComponent;                   // 0x03A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualHeightfieldMesh">();
	}
	static class AVirtualHeightfieldMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVirtualHeightfieldMesh>();
	}
};
static_assert(alignof(AVirtualHeightfieldMesh) == 0x000008, "Wrong alignment on AVirtualHeightfieldMesh");
static_assert(sizeof(AVirtualHeightfieldMesh) == 0x0003B0, "Wrong size on AVirtualHeightfieldMesh");
static_assert(offsetof(AVirtualHeightfieldMesh, VirtualHeightfieldMeshComponent) == 0x0003A8, "Member 'AVirtualHeightfieldMesh::VirtualHeightfieldMeshComponent' has a wrong offset!");

// Class VirtualHeightfieldMesh.VirtualHeightfieldMeshComponent
// 0x0080 (0x0640 - 0x05C0)
class UVirtualHeightfieldMeshComponent final : public UPrimitiveComponent
{
public:
	TSoftObjectPtr<class ARuntimeVirtualTextureVolume> VirtualTexture;                               // 0x05B8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ARuntimeVirtualTextureVolume*           VirtualTextureRef;                                 // 0x05E0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                VirtualTextureThumbnail;                           // 0x05E8(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCopyBoundsButton;                                 // 0x05F0(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHeightfieldMinMaxTexture*              MinMaxTexture;                                     // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumMinMaxTextureBuildLevels;                       // 0x0600(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBuildMinMaxTextureButton;                         // 0x0604(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_605[0x3];                                      // 0x0605(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0608(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     MaskAreaMaterial;                                  // 0x0610(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPerPlatformFloat                      LOD0ScreenSize;                                    // 0x0618(0x0004)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPerPlatformFloat                      Lod0Distribution;                                  // 0x061C(0x0004)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         LodDistribution;                                   // 0x0620(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LodBiasScale;                                      // 0x0624(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumForceLoadLods;                                  // 0x0628(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumOcclusionLods;                                  // 0x062C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHiddenInEditor;                                   // 0x0630(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWorldPositionOffsetVelocity;                      // 0x0631(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_632[0xE];                                      // 0x0632(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GatherHideFlags(bool* InOutHidePrimitivesInEditor, bool* InOutHidePrimitivesInGame) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualHeightfieldMeshComponent">();
	}
	static class UVirtualHeightfieldMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualHeightfieldMeshComponent>();
	}
};
static_assert(alignof(UVirtualHeightfieldMeshComponent) == 0x000010, "Wrong alignment on UVirtualHeightfieldMeshComponent");
static_assert(sizeof(UVirtualHeightfieldMeshComponent) == 0x000640, "Wrong size on UVirtualHeightfieldMeshComponent");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, VirtualTexture) == 0x0005B8, "Member 'UVirtualHeightfieldMeshComponent::VirtualTexture' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, VirtualTextureRef) == 0x0005E0, "Member 'UVirtualHeightfieldMeshComponent::VirtualTextureRef' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, VirtualTextureThumbnail) == 0x0005E8, "Member 'UVirtualHeightfieldMeshComponent::VirtualTextureThumbnail' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, bCopyBoundsButton) == 0x0005F0, "Member 'UVirtualHeightfieldMeshComponent::bCopyBoundsButton' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, MinMaxTexture) == 0x0005F8, "Member 'UVirtualHeightfieldMeshComponent::MinMaxTexture' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, NumMinMaxTextureBuildLevels) == 0x000600, "Member 'UVirtualHeightfieldMeshComponent::NumMinMaxTextureBuildLevels' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, bBuildMinMaxTextureButton) == 0x000604, "Member 'UVirtualHeightfieldMeshComponent::bBuildMinMaxTextureButton' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, Material) == 0x000608, "Member 'UVirtualHeightfieldMeshComponent::Material' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, MaskAreaMaterial) == 0x000610, "Member 'UVirtualHeightfieldMeshComponent::MaskAreaMaterial' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, LOD0ScreenSize) == 0x000618, "Member 'UVirtualHeightfieldMeshComponent::LOD0ScreenSize' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, Lod0Distribution) == 0x00061C, "Member 'UVirtualHeightfieldMeshComponent::Lod0Distribution' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, LodDistribution) == 0x000620, "Member 'UVirtualHeightfieldMeshComponent::LodDistribution' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, LodBiasScale) == 0x000624, "Member 'UVirtualHeightfieldMeshComponent::LodBiasScale' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, NumForceLoadLods) == 0x000628, "Member 'UVirtualHeightfieldMeshComponent::NumForceLoadLods' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, NumOcclusionLods) == 0x00062C, "Member 'UVirtualHeightfieldMeshComponent::NumOcclusionLods' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, bHiddenInEditor) == 0x000630, "Member 'UVirtualHeightfieldMeshComponent::bHiddenInEditor' has a wrong offset!");
static_assert(offsetof(UVirtualHeightfieldMeshComponent, bWorldPositionOffsetVelocity) == 0x000631, "Member 'UVirtualHeightfieldMeshComponent::bWorldPositionOffsetVelocity' has a wrong offset!");

}

