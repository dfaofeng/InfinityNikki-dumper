#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_PlayerCombatMovement

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "X6Game_structs.hpp"


namespace SDK::Params
{

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimGraph");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimGraph) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_AnimGraph");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_AimOffset
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_AimOffset final
{
public:
	struct FPoseLink                              InPoseForAimOffset;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_AimOffset_0;                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_AimOffset) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_AimOffset");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_AimOffset) == 0x000020, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_AimOffset");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_AimOffset, InPoseForAimOffset) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_AimOffset::InPoseForAimOffset' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_AimOffset, AnimLayer_AimOffset_0) == 0x000010, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_AimOffset::AnimLayer_AimOffset_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_BehaviorAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_BehaviorAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForPlayerBehavior;                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorAdditiveMode_0;                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_BehaviorAdditiveMode) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_BehaviorAdditiveMode");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_BehaviorAdditiveMode) == 0x000020, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_BehaviorAdditiveMode");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_BehaviorAdditiveMode, InPoseForPlayerBehavior) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_BehaviorAdditiveMode::InPoseForPlayerBehavior' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_BehaviorAdditiveMode, AnimLayer_BehaviorAdditiveMode_0) == 0x000010, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_BehaviorAdditiveMode::AnimLayer_BehaviorAdditiveMode_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_CombatMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_CombatMovement final
{
public:
	struct FPoseLink                              AnimLayer_CombatMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_CombatMovement) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_CombatMovement");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_CombatMovement) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_CombatMovement");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_CombatMovement, AnimLayer_CombatMovement_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_CombatMovement::AnimLayer_CombatMovement_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_EquipmentAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_EquipmentAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForEquipment;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_EquipmentAdditiveMode_0;                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_EquipmentAdditiveMode) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_EquipmentAdditiveMode");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_EquipmentAdditiveMode) == 0x000020, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_EquipmentAdditiveMode");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_EquipmentAdditiveMode, InPoseForEquipment) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_EquipmentAdditiveMode::InPoseForEquipment' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_EquipmentAdditiveMode, AnimLayer_EquipmentAdditiveMode_0) == 0x000010, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_EquipmentAdditiveMode::AnimLayer_EquipmentAdditiveMode_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_Jump
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_Jump final
{
public:
	struct FPoseLink                              AnimLayer_Jump_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_Jump) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_Jump");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_Jump) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_Jump");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_Jump, AnimLayer_Jump_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_Jump::AnimLayer_Jump_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_Land
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_Land final
{
public:
	struct FPoseLink                              AnimLayer_Land_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_Land) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_Land");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_Land) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_Land");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_Land, AnimLayer_Land_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_Land::AnimLayer_Land_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_MovementDependObject
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_MovementDependObject final
{
public:
	struct FPoseLink                              AnimLayer_MovementDependObject_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_MovementDependObject) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_MovementDependObject");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_MovementDependObject) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_MovementDependObject");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_MovementDependObject, AnimLayer_MovementDependObject_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_MovementDependObject::AnimLayer_MovementDependObject_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_NPCAdditiveBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_NPCAdditiveBehavior final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCAdditiveBehavior_0;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_NPCAdditiveBehavior) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_NPCAdditiveBehavior");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_NPCAdditiveBehavior) == 0x000020, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_NPCAdditiveBehavior");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_NPCAdditiveBehavior, InPose) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_NPCAdditiveBehavior::InPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_NPCAdditiveBehavior, AnimLayer_NPCAdditiveBehavior_0) == 0x000010, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_NPCAdditiveBehavior::AnimLayer_NPCAdditiveBehavior_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_NPCBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_NPCBehavior final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCBehavior_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_NPCBehavior) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_NPCBehavior");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_NPCBehavior) == 0x000020, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_NPCBehavior");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_NPCBehavior, InPose_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_NPCBehavior::InPose_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_NPCBehavior, AnimLayer_NPCBehavior_0) == 0x000010, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_NPCBehavior::AnimLayer_NPCBehavior_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_PlayerControllingTool
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_PlayerControllingTool final
{
public:
	struct FPoseLink                              AnimLayer_PlayerControllingTool_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_PlayerControllingTool) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_PlayerControllingTool");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_PlayerControllingTool) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_PlayerControllingTool");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_PlayerControllingTool, AnimLayer_PlayerControllingTool_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_PlayerControllingTool::AnimLayer_PlayerControllingTool_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_PlayerRegularMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_PlayerRegularMovement final
{
public:
	struct FPoseLink                              AnimLayer_PlayerRegularMovement_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_PlayerRegularMovement) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_PlayerRegularMovement");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_PlayerRegularMovement) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_PlayerRegularMovement");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_PlayerRegularMovement, AnimLayer_PlayerRegularMovement_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_PlayerRegularMovement::AnimLayer_PlayerRegularMovement_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_SpecialSurfaceMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_SpecialSurfaceMovement final
{
public:
	struct FPoseLink                              AnimLayer_SpecialSurfaceMovement_0;                // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_SpecialSurfaceMovement) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_SpecialSurfaceMovement");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_SpecialSurfaceMovement) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_SpecialSurfaceMovement");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_SpecialSurfaceMovement, AnimLayer_SpecialSurfaceMovement_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_SpecialSurfaceMovement::AnimLayer_SpecialSurfaceMovement_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_StrafeMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_StrafeMovement final
{
public:
	struct FPoseLink                              AnimLayer_StrafeMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_StrafeMovement) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_StrafeMovement");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_StrafeMovement) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_StrafeMovement");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_StrafeMovement, AnimLayer_StrafeMovement_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_StrafeMovement::AnimLayer_StrafeMovement_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_UsingCarrierMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_UsingCarrierMovement final
{
public:
	struct FPoseLink                              AnimLayer_UsingCarrierMovement_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_UsingCarrierMovement) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_UsingCarrierMovement");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_UsingCarrierMovement) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_UsingCarrierMovement");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_UsingCarrierMovement, AnimLayer_UsingCarrierMovement_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_UsingCarrierMovement::AnimLayer_UsingCarrierMovement_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.AnimLayer_WhiteBoxMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_AnimLayer_WhiteBoxMovement final
{
public:
	struct FPoseLink                              AnimLayer_WhiteBoxMovement_0;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_AnimLayer_WhiteBoxMovement) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_AnimLayer_WhiteBoxMovement");
static_assert(sizeof(ABP_PlayerCombatMovement_C_AnimLayer_WhiteBoxMovement) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_AnimLayer_WhiteBoxMovement");
static_assert(offsetof(ABP_PlayerCombatMovement_C_AnimLayer_WhiteBoxMovement, AnimLayer_WhiteBoxMovement_0) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_AnimLayer_WhiteBoxMovement::AnimLayer_WhiteBoxMovement_0' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.BlueprintThreadSafeUpdateAnimation
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCombatMovement_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_UpdateLocationData_InDeltaTime_ImplicitCast; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_BlueprintThreadSafeUpdateAnimation) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_PlayerCombatMovement_C_BlueprintThreadSafeUpdateAnimation) == 0x000010, "Wrong size on ABP_PlayerCombatMovement_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_PlayerCombatMovement_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_BlueprintThreadSafeUpdateAnimation, CallFunc_UpdateLocationData_InDeltaTime_ImplicitCast) == 0x000008, "Member 'ABP_PlayerCombatMovement_C_BlueprintThreadSafeUpdateAnimation::CallFunc_UpdateLocationData_InDeltaTime_ImplicitCast' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.DetermineLandingAnimSequence
// 0x00A0 (0x00A0 - 0x0000)
struct ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence final
{
public:
	bool                                          IsHeavy;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_2;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Temp_object_Variable_3;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_4;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Temp_object_Variable_5;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_2;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_3;                           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence");
static_assert(sizeof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence) == 0x0000A0, "Wrong size on ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, IsHeavy) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::IsHeavy' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, Temp_object_Variable) == 0x000008, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, Temp_bool_Variable) == 0x000010, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, Temp_object_Variable_1) == 0x000018, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, Temp_bool_Variable_1) == 0x000020, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, Temp_object_Variable_2) == 0x000028, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, Temp_object_Variable_3) == 0x000030, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, Temp_bool_Variable_2) == 0x000038, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, Temp_object_Variable_4) == 0x000040, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, Temp_object_Variable_5) == 0x000048, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, Temp_bool_Variable_3) == 0x000050, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000051, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000052, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, CallFunc_BreakVector_X) == 0x000058, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, CallFunc_BreakVector_Y) == 0x000060, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, CallFunc_BreakVector_Z) == 0x000068, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, CallFunc_Abs_ReturnValue) == 0x000070, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, K2Node_Select_Default) == 0x000078, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, K2Node_Select_Default_1) == 0x000080, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, K2Node_Select_Default_2) == 0x000088, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, K2Node_Select_Default_3) == 0x000090, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000098, "Member 'ABP_PlayerCombatMovement_C_DetermineLandingAnimSequence::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.Event_OnPlayerFloatingJumpStageChanged_Event
// 0x0002 (0x0002 - 0x0000)
struct ABP_PlayerCombatMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event final
{
public:
	ERegularFloatingJumpStage                     NewStage;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     OldStage;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event) == 0x000001, "Wrong alignment on ABP_PlayerCombatMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event");
static_assert(sizeof(ABP_PlayerCombatMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event) == 0x000002, "Wrong size on ABP_PlayerCombatMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event");
static_assert(offsetof(ABP_PlayerCombatMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event, NewStage) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event::NewStage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event, OldStage) == 0x000001, "Member 'ABP_PlayerCombatMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event::OldStage' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.ExecuteUbergraph_ABP_PlayerCombatMovement
// 0x00A0 (0x00A0 - 0x0000)
struct ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERegularFloatingJumpStage NewStage, ERegularFloatingJumpStage OldStage)> K2Node_CreateDelegate_OutputDelegate; // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue_2;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_CustomEvent_Mode;                           // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_CustomEvent_PreMode;                        // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeterminTransToRightFoot_bTranstoRight;   // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerRegularInAirMovementComp_C*   CallFunc_GetComponentByClass_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerCombatMovementComponent_C*    CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerMoveableComponent_C*          CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     K2Node_CustomEvent_NewStage;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     K2Node_CustomEvent_OldStage;                       // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EMovementMode PrevMode, EMovementMode NewMode)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0074(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_1;    // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_2;    // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement");
static_assert(sizeof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement) == 0x0000A0, "Wrong size on ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, EntryPoint) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_GetRelevantAnimTime_ReturnValue) == 0x000008, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_GetRelevantAnimTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00000D, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000E, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_BooleanAND_ReturnValue_1) == 0x00000F, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_BooleanAND_ReturnValue_2) == 0x000020, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_GetRelevantAnimTime_ReturnValue_1) == 0x000024, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_GetRelevantAnimTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_BooleanAND_ReturnValue_3) == 0x000029, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_GetRelevantAnimTime_ReturnValue_2) == 0x00002C, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_GetRelevantAnimTime_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_BooleanAND_ReturnValue_4) == 0x000030, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000031, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, K2Node_CustomEvent_Mode) == 0x000032, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::K2Node_CustomEvent_Mode' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, K2Node_CustomEvent_PreMode) == 0x000033, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::K2Node_CustomEvent_PreMode' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000034, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000035, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000036, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000037, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_BooleanAND_ReturnValue_5) == 0x000038, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_BooleanAND_ReturnValue_6) == 0x000039, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_BooleanOR_ReturnValue) == 0x00003A, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Not_PreBool_ReturnValue_2) == 0x00003B, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Not_PreBool_ReturnValue_3) == 0x00003C, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Not_PreBool_ReturnValue_4) == 0x00003D, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_BooleanAND_ReturnValue_7) == 0x00003E, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_DeterminTransToRightFoot_bTranstoRight) == 0x00003F, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_DeterminTransToRightFoot_bTranstoRight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Not_PreBool_ReturnValue_5) == 0x000040, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_BooleanAND_ReturnValue_8) == 0x000041, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000048, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_BooleanAND_ReturnValue_9) == 0x000050, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_IsValid_ReturnValue) == 0x000051, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_GetComponentByClass_ReturnValue) == 0x000058, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000060, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000068, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, K2Node_CustomEvent_NewStage) == 0x000070, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::K2Node_CustomEvent_NewStage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, K2Node_CustomEvent_OldStage) == 0x000071, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::K2Node_CustomEvent_OldStage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000072, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000073, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, K2Node_CreateDelegate_OutputDelegate_1) == 0x000074, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000088, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Greater_DoubleDouble_A_ImplicitCast_1) == 0x000090, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Greater_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement, CallFunc_Greater_DoubleDouble_A_ImplicitCast_2) == 0x000098, "Member 'ABP_PlayerCombatMovement_C_ExecuteUbergraph_ABP_PlayerCombatMovement::CallFunc_Greater_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.On Movement Mode Changed
// 0x0002 (0x0002 - 0x0000)
struct ABP_PlayerCombatMovement_C_On_Movement_Mode_Changed final
{
public:
	EMovementMode                                 Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 PreMode;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_On_Movement_Mode_Changed) == 0x000001, "Wrong alignment on ABP_PlayerCombatMovement_C_On_Movement_Mode_Changed");
static_assert(sizeof(ABP_PlayerCombatMovement_C_On_Movement_Mode_Changed) == 0x000002, "Wrong size on ABP_PlayerCombatMovement_C_On_Movement_Mode_Changed");
static_assert(offsetof(ABP_PlayerCombatMovement_C_On_Movement_Mode_Changed, Mode) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_On_Movement_Mode_Changed::Mode' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_On_Movement_Mode_Changed, PreMode) == 0x000001, "Member 'ABP_PlayerCombatMovement_C_On_Movement_Mode_Changed::PreMode' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.UpdateCycleAnim
// 0x0050 (0x0050 - 0x0000)
struct ABP_PlayerCombatMovement_C_UpdateCycleAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetPlayrateToMatchSpeed_ReturnValue;      // 0x0038(0x0010)(NoDestructor)
	float                                         CallFunc_SetPlayrateToMatchSpeed_SpeedToMatch_ImplicitCast; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_UpdateCycleAnim) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_UpdateCycleAnim");
static_assert(sizeof(ABP_PlayerCombatMovement_C_UpdateCycleAnim) == 0x000050, "Wrong size on ABP_PlayerCombatMovement_C_UpdateCycleAnim");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateCycleAnim, Context) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_UpdateCycleAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateCycleAnim, Node) == 0x000010, "Member 'ABP_PlayerCombatMovement_C_UpdateCycleAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateCycleAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ABP_PlayerCombatMovement_C_UpdateCycleAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateCycleAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ABP_PlayerCombatMovement_C_UpdateCycleAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateCycleAnim, CallFunc_SetPlayrateToMatchSpeed_ReturnValue) == 0x000038, "Member 'ABP_PlayerCombatMovement_C_UpdateCycleAnim::CallFunc_SetPlayrateToMatchSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateCycleAnim, CallFunc_SetPlayrateToMatchSpeed_SpeedToMatch_ImplicitCast) == 0x000048, "Member 'ABP_PlayerCombatMovement_C_UpdateCycleAnim::CallFunc_SetPlayrateToMatchSpeed_SpeedToMatch_ImplicitCast' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.UpdateLocationData
// 0x0030 (0x0030 - 0x0000)
struct ABP_PlayerCombatMovement_C_UpdateLocationData final
{
public:
	double                                        InDeltaTime;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_UpdateLocationData) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_UpdateLocationData");
static_assert(sizeof(ABP_PlayerCombatMovement_C_UpdateLocationData) == 0x000030, "Wrong size on ABP_PlayerCombatMovement_C_UpdateLocationData");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateLocationData, InDeltaTime) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_UpdateLocationData::InDeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateLocationData, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000008, "Member 'ABP_PlayerCombatMovement_C_UpdateLocationData::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateLocationData, CallFunc_VSizeXY_ReturnValue) == 0x000020, "Member 'ABP_PlayerCombatMovement_C_UpdateLocationData::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateLocationData, CallFunc_SafeDivide_ReturnValue) == 0x000028, "Member 'ABP_PlayerCombatMovement_C_UpdateLocationData::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");

// Function ABP_PlayerCombatMovement.ABP_PlayerCombatMovement_C.UpdateMovementData
// 0x0040 (0x0040 - 0x0000)
struct ABP_PlayerCombatMovement_C_UpdateMovementData final
{
public:
	TScriptInterface<class IBPI_Locomotion_GroundState_C> K2Node_DynamicCast_AsBPI_Locomotion_Ground_State; // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BPI_Get_ConfigData_WalkSpeed;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BPI_Get_ConfigData_RunSpeed;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BPI_Get_ConfigData_SprintSpeed;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAllowSpeed_InAllowWalkSpeed_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAllowSpeed_InAllowRunSpeed_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAllowSpeed_InAllowSprintSpeed_ImplicitCast; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCombatMovement_C_UpdateMovementData) == 0x000008, "Wrong alignment on ABP_PlayerCombatMovement_C_UpdateMovementData");
static_assert(sizeof(ABP_PlayerCombatMovement_C_UpdateMovementData) == 0x000040, "Wrong size on ABP_PlayerCombatMovement_C_UpdateMovementData");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateMovementData, K2Node_DynamicCast_AsBPI_Locomotion_Ground_State) == 0x000000, "Member 'ABP_PlayerCombatMovement_C_UpdateMovementData::K2Node_DynamicCast_AsBPI_Locomotion_Ground_State' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateMovementData, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_PlayerCombatMovement_C_UpdateMovementData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateMovementData, CallFunc_BPI_Get_ConfigData_WalkSpeed) == 0x000018, "Member 'ABP_PlayerCombatMovement_C_UpdateMovementData::CallFunc_BPI_Get_ConfigData_WalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateMovementData, CallFunc_BPI_Get_ConfigData_RunSpeed) == 0x000020, "Member 'ABP_PlayerCombatMovement_C_UpdateMovementData::CallFunc_BPI_Get_ConfigData_RunSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateMovementData, CallFunc_BPI_Get_ConfigData_SprintSpeed) == 0x000028, "Member 'ABP_PlayerCombatMovement_C_UpdateMovementData::CallFunc_BPI_Get_ConfigData_SprintSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateMovementData, CallFunc_SetAllowSpeed_InAllowWalkSpeed_ImplicitCast) == 0x000030, "Member 'ABP_PlayerCombatMovement_C_UpdateMovementData::CallFunc_SetAllowSpeed_InAllowWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateMovementData, CallFunc_SetAllowSpeed_InAllowRunSpeed_ImplicitCast) == 0x000034, "Member 'ABP_PlayerCombatMovement_C_UpdateMovementData::CallFunc_SetAllowSpeed_InAllowRunSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCombatMovement_C_UpdateMovementData, CallFunc_SetAllowSpeed_InAllowSprintSpeed_ImplicitCast) == 0x000038, "Member 'ABP_PlayerCombatMovement_C_UpdateMovementData::CallFunc_SetAllowSpeed_InAllowSprintSpeed_ImplicitCast' has a wrong offset!");

}

