#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlendStack

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct BlendStack.BlendStackAnimNodeReference
// 0x0000 (0x0010 - 0x0010)
struct FBlendStackAnimNodeReference final : public FAnimNodeReference
{
};
static_assert(alignof(FBlendStackAnimNodeReference) == 0x000008, "Wrong alignment on FBlendStackAnimNodeReference");
static_assert(sizeof(FBlendStackAnimNodeReference) == 0x000010, "Wrong size on FBlendStackAnimNodeReference");

// ScriptStruct BlendStack.BlendStackInputAnimNodeReference
// 0x0000 (0x0010 - 0x0010)
struct FBlendStackInputAnimNodeReference final : public FAnimNodeReference
{
};
static_assert(alignof(FBlendStackInputAnimNodeReference) == 0x000008, "Wrong alignment on FBlendStackInputAnimNodeReference");
static_assert(sizeof(FBlendStackInputAnimNodeReference) == 0x000010, "Wrong size on FBlendStackInputAnimNodeReference");

// ScriptStruct BlendStack.BlendStackAnimPlayer
// 0x0398 (0x0398 - 0x0000)
struct FBlendStackAnimPlayer final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_SequencePlayer_Standalone    SequencePlayerNode;                                // 0x0020(0x0098)(Transient, NativeAccessSpecifierPrivate)
	struct FAnimNode_BlendSpacePlayer_Standalone  BlendSpacePlayerNode;                              // 0x00B8(0x0098)(Transient, NativeAccessSpecifierPrivate)
	struct FAnimNode_Mirror_Standalone            MirrorNode;                                        // 0x0150(0x0060)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B0[0x1E8];                                    // 0x01B0(0x01E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlendStackAnimPlayer) == 0x000008, "Wrong alignment on FBlendStackAnimPlayer");
static_assert(sizeof(FBlendStackAnimPlayer) == 0x000398, "Wrong size on FBlendStackAnimPlayer");
static_assert(offsetof(FBlendStackAnimPlayer, SequencePlayerNode) == 0x000020, "Member 'FBlendStackAnimPlayer::SequencePlayerNode' has a wrong offset!");
static_assert(offsetof(FBlendStackAnimPlayer, BlendSpacePlayerNode) == 0x0000B8, "Member 'FBlendStackAnimPlayer::BlendSpacePlayerNode' has a wrong offset!");
static_assert(offsetof(FBlendStackAnimPlayer, MirrorNode) == 0x000150, "Member 'FBlendStackAnimPlayer::MirrorNode' has a wrong offset!");

// ScriptStruct BlendStack.AnimNode_BlendStack_Standalone
// 0x0078 (0x00B0 - 0x0038)
struct FAnimNode_BlendStack_Standalone : public FAnimNode_AssetPlayerBase
{
public:
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPoseLink>                      PerSampleGraphPoseLinks;                           // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBlendStackAnimPlayer>          AnimPlayers;                                       // 0x0060(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          bShouldFilterNotifies;                             // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxActiveBlends;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStoreBlendedPose;                                 // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_79[0x27];                                      // 0x0079(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NotifyRecencyTimeOut;                              // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxBlendInTimeToOverrideAnimation;                 // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PlayerDepthBlendInTimeMultiplier;                  // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendStack_Standalone) == 0x000008, "Wrong alignment on FAnimNode_BlendStack_Standalone");
static_assert(sizeof(FAnimNode_BlendStack_Standalone) == 0x0000B0, "Wrong size on FAnimNode_BlendStack_Standalone");
static_assert(offsetof(FAnimNode_BlendStack_Standalone, PerSampleGraphPoseLinks) == 0x000048, "Member 'FAnimNode_BlendStack_Standalone::PerSampleGraphPoseLinks' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack_Standalone, AnimPlayers) == 0x000060, "Member 'FAnimNode_BlendStack_Standalone::AnimPlayers' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack_Standalone, bShouldFilterNotifies) == 0x000070, "Member 'FAnimNode_BlendStack_Standalone::bShouldFilterNotifies' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack_Standalone, MaxActiveBlends) == 0x000074, "Member 'FAnimNode_BlendStack_Standalone::MaxActiveBlends' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack_Standalone, bStoreBlendedPose) == 0x000078, "Member 'FAnimNode_BlendStack_Standalone::bStoreBlendedPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack_Standalone, NotifyRecencyTimeOut) == 0x0000A0, "Member 'FAnimNode_BlendStack_Standalone::NotifyRecencyTimeOut' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack_Standalone, MaxBlendInTimeToOverrideAnimation) == 0x0000A4, "Member 'FAnimNode_BlendStack_Standalone::MaxBlendInTimeToOverrideAnimation' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack_Standalone, PlayerDepthBlendInTimeMultiplier) == 0x0000A8, "Member 'FAnimNode_BlendStack_Standalone::PlayerDepthBlendInTimeMultiplier' has a wrong offset!");

// ScriptStruct BlendStack.AnimNode_BlendStack
// 0x0070 (0x0120 - 0x00B0)
struct FAnimNode_BlendStack final : public FAnimNode_BlendStack_Standalone
{
public:
	class UAnimationAsset*                        AnimationAsset;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationTime;                                     // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WantedPlayRate;                                    // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAnimationDeltaTime;                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendProfile*                          BlendProfile;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlendParameters;                                   // 0x00E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMirrorDataTable*                       MirrorDataTable;                                   // 0x00F8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInertialBlend;                                 // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetOnBecomingRelevant;                          // 0x0101(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x1E];                                     // 0x0102(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendStack) == 0x000008, "Wrong alignment on FAnimNode_BlendStack");
static_assert(sizeof(FAnimNode_BlendStack) == 0x000120, "Wrong size on FAnimNode_BlendStack");
static_assert(offsetof(FAnimNode_BlendStack, AnimationAsset) == 0x0000B0, "Member 'FAnimNode_BlendStack::AnimationAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, AnimationTime) == 0x0000B8, "Member 'FAnimNode_BlendStack::AnimationTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, bLoop) == 0x0000BC, "Member 'FAnimNode_BlendStack::bLoop' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, bMirrored) == 0x0000BD, "Member 'FAnimNode_BlendStack::bMirrored' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, WantedPlayRate) == 0x0000C0, "Member 'FAnimNode_BlendStack::WantedPlayRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, BlendTime) == 0x0000C4, "Member 'FAnimNode_BlendStack::BlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, MaxAnimationDeltaTime) == 0x0000C8, "Member 'FAnimNode_BlendStack::MaxAnimationDeltaTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, BlendProfile) == 0x0000D0, "Member 'FAnimNode_BlendStack::BlendProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, BlendOption) == 0x0000D8, "Member 'FAnimNode_BlendStack::BlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, BlendParameters) == 0x0000E0, "Member 'FAnimNode_BlendStack::BlendParameters' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, MirrorDataTable) == 0x0000F8, "Member 'FAnimNode_BlendStack::MirrorDataTable' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, bUseInertialBlend) == 0x000100, "Member 'FAnimNode_BlendStack::bUseInertialBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStack, bResetOnBecomingRelevant) == 0x000101, "Member 'FAnimNode_BlendStack::bResetOnBecomingRelevant' has a wrong offset!");

// ScriptStruct BlendStack.AnimNode_BlendStackInput
// 0x0018 (0x0028 - 0x0010)
struct FAnimNode_BlendStackInput final : public FAnimNode_Base
{
public:
	int32                                         SampleIndex;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlendStackAllocationIndex;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridePlayRate;                                 // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendStackInput) == 0x000008, "Wrong alignment on FAnimNode_BlendStackInput");
static_assert(sizeof(FAnimNode_BlendStackInput) == 0x000028, "Wrong size on FAnimNode_BlendStackInput");
static_assert(offsetof(FAnimNode_BlendStackInput, SampleIndex) == 0x000010, "Member 'FAnimNode_BlendStackInput::SampleIndex' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStackInput, BlendStackAllocationIndex) == 0x000014, "Member 'FAnimNode_BlendStackInput::BlendStackAllocationIndex' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStackInput, bOverridePlayRate) == 0x000018, "Member 'FAnimNode_BlendStackInput::bOverridePlayRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendStackInput, PlayRate) == 0x00001C, "Member 'FAnimNode_BlendStackInput::PlayRate' has a wrong offset!");

}

