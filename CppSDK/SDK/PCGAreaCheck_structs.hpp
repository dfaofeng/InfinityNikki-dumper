#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PCGAreaCheck

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum PCGAreaCheck.EPCGAreaFlag
// NumValues: 0x0004
enum class EPCGAreaFlag : uint8
{
	LandScape                                = 0,
	Meshes                                   = 1,
	LandScapeWithoutShield                   = 2,
	EPCGAreaFlag_MAX                         = 3,
};

// Enum PCGAreaCheck.EPCGAreaDrawType
// NumValues: 0x0008
enum class EPCGAreaDrawType : uint8
{
	LineTrace                                = 0,
	Capture                                  = 1,
	Canvas                                   = 2,
	LineTraceWithVertexColorR                = 3,
	LineTraceWithVertexColorG                = 4,
	LineTraceWithVertexColorB                = 5,
	LineTraceWithVertexColorNone             = 6,
	EPCGAreaDrawType_MAX                     = 7,
};

// Enum PCGAreaCheck.EPCGAreaBuffType
// NumValues: 0x0003
enum class EPCGAreaBuffType : uint8
{
	BitMode                                  = 0,
	IDMode                                   = 1,
	EPCGAreaBuffType_MAX                     = 2,
};

// ScriptStruct PCGAreaCheck.PCGAreaColorMap
// 0x0018 (0x0020 - 0x0008)
struct FPCGAreaColorMap final : public FTableRowBase
{
public:
	TArray<class FString>                         NameContainsKeys;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FColor                                 AreaColor;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CheckFlags;                                        // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGAreaDrawType                              DrawType;                                          // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPCGAreaColorMap) == 0x000008, "Wrong alignment on FPCGAreaColorMap");
static_assert(sizeof(FPCGAreaColorMap) == 0x000020, "Wrong size on FPCGAreaColorMap");
static_assert(offsetof(FPCGAreaColorMap, NameContainsKeys) == 0x000008, "Member 'FPCGAreaColorMap::NameContainsKeys' has a wrong offset!");
static_assert(offsetof(FPCGAreaColorMap, AreaColor) == 0x000018, "Member 'FPCGAreaColorMap::AreaColor' has a wrong offset!");
static_assert(offsetof(FPCGAreaColorMap, CheckFlags) == 0x00001C, "Member 'FPCGAreaColorMap::CheckFlags' has a wrong offset!");
static_assert(offsetof(FPCGAreaColorMap, DrawType) == 0x00001D, "Member 'FPCGAreaColorMap::DrawType' has a wrong offset!");

// ScriptStruct PCGAreaCheck.PCGAreaCheckPointInfo
// 0x0040 (0x0040 - 0x0000)
struct FPCGAreaCheckPointInfo final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             CheckDir;                                          // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPCGAreaCheckPointInfo) == 0x000008, "Wrong alignment on FPCGAreaCheckPointInfo");
static_assert(sizeof(FPCGAreaCheckPointInfo) == 0x000040, "Wrong size on FPCGAreaCheckPointInfo");
static_assert(offsetof(FPCGAreaCheckPointInfo, HitLocation) == 0x000000, "Member 'FPCGAreaCheckPointInfo::HitLocation' has a wrong offset!");
static_assert(offsetof(FPCGAreaCheckPointInfo, HitNormal) == 0x000018, "Member 'FPCGAreaCheckPointInfo::HitNormal' has a wrong offset!");
static_assert(offsetof(FPCGAreaCheckPointInfo, CheckDir) == 0x000030, "Member 'FPCGAreaCheckPointInfo::CheckDir' has a wrong offset!");

}

