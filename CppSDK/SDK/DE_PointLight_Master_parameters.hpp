#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DE_PointLight_Master

#include "Basic.hpp"


namespace SDK::Params
{

// Function DE_PointLight_Master.DE_PointLight_Master_C.UserConstructionScript
// 0x0002 (0x0002 - 0x0000)
struct DE_PointLight_Master_C_UserConstructionScript final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEditor_Mode_inEditor;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DE_PointLight_Master_C_UserConstructionScript) == 0x000001, "Wrong alignment on DE_PointLight_Master_C_UserConstructionScript");
static_assert(sizeof(DE_PointLight_Master_C_UserConstructionScript) == 0x000002, "Wrong size on DE_PointLight_Master_C_UserConstructionScript");
static_assert(offsetof(DE_PointLight_Master_C_UserConstructionScript, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'DE_PointLight_Master_C_UserConstructionScript::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UserConstructionScript, CallFunc_IsEditor_Mode_inEditor) == 0x000001, "Member 'DE_PointLight_Master_C_UserConstructionScript::CallFunc_IsEditor_Mode_inEditor' has a wrong offset!");

// Function DE_PointLight_Master.DE_PointLight_Master_C.UseMultiplyParam
// 0x0030 (0x0030 - 0x0000)
struct DE_PointLight_Master_C_UseMultiplyParam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlatformNameInEditorPreviewAndRuntime_ReturnValue; // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DE_PointLight_Master_C_UseMultiplyParam) == 0x000008, "Wrong alignment on DE_PointLight_Master_C_UseMultiplyParam");
static_assert(sizeof(DE_PointLight_Master_C_UseMultiplyParam) == 0x000030, "Wrong size on DE_PointLight_Master_C_UseMultiplyParam");
static_assert(offsetof(DE_PointLight_Master_C_UseMultiplyParam, ReturnValue) == 0x000000, "Member 'DE_PointLight_Master_C_UseMultiplyParam::ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UseMultiplyParam, CallFunc_GetPlatformNameInEditorPreviewAndRuntime_ReturnValue) == 0x000008, "Member 'DE_PointLight_Master_C_UseMultiplyParam::CallFunc_GetPlatformNameInEditorPreviewAndRuntime_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UseMultiplyParam, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000018, "Member 'DE_PointLight_Master_C_UseMultiplyParam::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UseMultiplyParam, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000019, "Member 'DE_PointLight_Master_C_UseMultiplyParam::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UseMultiplyParam, CallFunc_BooleanOR_ReturnValue) == 0x00001A, "Member 'DE_PointLight_Master_C_UseMultiplyParam::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UseMultiplyParam, CallFunc_SelectFloat_ReturnValue) == 0x000020, "Member 'DE_PointLight_Master_C_UseMultiplyParam::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UseMultiplyParam, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000028, "Member 'DE_PointLight_Master_C_UseMultiplyParam::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function DE_PointLight_Master.DE_PointLight_Master_C.UpdateDELight
// 0x0038 (0x0038 - 0x0000)
struct DE_PointLight_Master_C_UpdateDELight final
{
public:
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingInEditor_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFinalIntensity_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEditor_Mode_inEditor;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScalarParameterValue_ReturnValue;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScalarParameterValue_ReturnValue_1;    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEditor_Mode_inEditor_1;                 // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DE_PointLight_Master_C_UpdateDELight) == 0x000008, "Wrong alignment on DE_PointLight_Master_C_UpdateDELight");
static_assert(sizeof(DE_PointLight_Master_C_UpdateDELight) == 0x000038, "Wrong size on DE_PointLight_Master_C_UpdateDELight");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, Temp_bool_Has_Been_Initd_Variable) == 0x000000, "Member 'DE_PointLight_Master_C_UpdateDELight::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, Temp_bool_IsClosed_Variable) == 0x000001, "Member 'DE_PointLight_Master_C_UpdateDELight::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000002, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_IsPlayingInEditor_ReturnValue) == 0x000003, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_IsPlayingInEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_GetFinalIntensity_ReturnValue) == 0x000004, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_GetFinalIntensity_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_IsEditor_Mode_inEditor) == 0x000008, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_IsEditor_Mode_inEditor' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_GetScalarParameterValue_ReturnValue) == 0x00000C, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_GetScalarParameterValue_ReturnValue_1) == 0x000010, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_GetScalarParameterValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000014, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000015, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_IsEditor_Mode_inEditor_1) == 0x000016, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_IsEditor_Mode_inEditor_1' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_BooleanOR_ReturnValue) == 0x000017, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'DE_PointLight_Master_C_UpdateDELight::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x000020, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000028, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_UpdateDELight, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000030, "Member 'DE_PointLight_Master_C_UpdateDELight::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function DE_PointLight_Master.DE_PointLight_Master_C.GetFinalIntensity
// 0x0030 (0x0030 - 0x0000)
struct DE_PointLight_Master_C_GetFinalIntensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UseMultiplyParam_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DE_PointLight_Master_C_GetFinalIntensity) == 0x000008, "Wrong alignment on DE_PointLight_Master_C_GetFinalIntensity");
static_assert(sizeof(DE_PointLight_Master_C_GetFinalIntensity) == 0x000030, "Wrong size on DE_PointLight_Master_C_GetFinalIntensity");
static_assert(offsetof(DE_PointLight_Master_C_GetFinalIntensity, ReturnValue) == 0x000000, "Member 'DE_PointLight_Master_C_GetFinalIntensity::ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_GetFinalIntensity, CallFunc_UseMultiplyParam_ReturnValue) == 0x000004, "Member 'DE_PointLight_Master_C_GetFinalIntensity::CallFunc_UseMultiplyParam_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_GetFinalIntensity, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'DE_PointLight_Master_C_GetFinalIntensity::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_GetFinalIntensity, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'DE_PointLight_Master_C_GetFinalIntensity::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_GetFinalIntensity, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000018, "Member 'DE_PointLight_Master_C_GetFinalIntensity::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_GetFinalIntensity, CallFunc_SelectFloat_B_ImplicitCast) == 0x000020, "Member 'DE_PointLight_Master_C_GetFinalIntensity::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_GetFinalIntensity, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000028, "Member 'DE_PointLight_Master_C_GetFinalIntensity::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function DE_PointLight_Master.DE_PointLight_Master_C.ExecuteUbergraph_DE_PointLight_Master
// 0x0004 (0x0004 - 0x0000)
struct DE_PointLight_Master_C_ExecuteUbergraph_DE_PointLight_Master final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DE_PointLight_Master_C_ExecuteUbergraph_DE_PointLight_Master) == 0x000004, "Wrong alignment on DE_PointLight_Master_C_ExecuteUbergraph_DE_PointLight_Master");
static_assert(sizeof(DE_PointLight_Master_C_ExecuteUbergraph_DE_PointLight_Master) == 0x000004, "Wrong size on DE_PointLight_Master_C_ExecuteUbergraph_DE_PointLight_Master");
static_assert(offsetof(DE_PointLight_Master_C_ExecuteUbergraph_DE_PointLight_Master, EntryPoint) == 0x000000, "Member 'DE_PointLight_Master_C_ExecuteUbergraph_DE_PointLight_Master::EntryPoint' has a wrong offset!");

// Function DE_PointLight_Master.DE_PointLight_Master_C.Disable LightFuncton and IES
// 0x0028 (0x0028 - 0x0000)
struct DE_PointLight_Master_C_Disable_LightFuncton_and_IES final
{
public:
	class ULightComponent*                        InputPin;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEditor_Mode_inEditor;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlatformNameInEditorPreviewAndRuntime_ReturnValue; // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DE_PointLight_Master_C_Disable_LightFuncton_and_IES) == 0x000008, "Wrong alignment on DE_PointLight_Master_C_Disable_LightFuncton_and_IES");
static_assert(sizeof(DE_PointLight_Master_C_Disable_LightFuncton_and_IES) == 0x000028, "Wrong size on DE_PointLight_Master_C_Disable_LightFuncton_and_IES");
static_assert(offsetof(DE_PointLight_Master_C_Disable_LightFuncton_and_IES, InputPin) == 0x000000, "Member 'DE_PointLight_Master_C_Disable_LightFuncton_and_IES::InputPin' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_Disable_LightFuncton_and_IES, CallFunc_IsEditor_Mode_inEditor) == 0x000008, "Member 'DE_PointLight_Master_C_Disable_LightFuncton_and_IES::CallFunc_IsEditor_Mode_inEditor' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_Disable_LightFuncton_and_IES, CallFunc_GetPlatformNameInEditorPreviewAndRuntime_ReturnValue) == 0x000010, "Member 'DE_PointLight_Master_C_Disable_LightFuncton_and_IES::CallFunc_GetPlatformNameInEditorPreviewAndRuntime_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_Disable_LightFuncton_and_IES, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000020, "Member 'DE_PointLight_Master_C_Disable_LightFuncton_and_IES::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_Disable_LightFuncton_and_IES, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000021, "Member 'DE_PointLight_Master_C_Disable_LightFuncton_and_IES::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_Disable_LightFuncton_and_IES, CallFunc_BooleanOR_ReturnValue) == 0x000022, "Member 'DE_PointLight_Master_C_Disable_LightFuncton_and_IES::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_Disable_LightFuncton_and_IES, CallFunc_BooleanAND_ReturnValue) == 0x000023, "Member 'DE_PointLight_Master_C_Disable_LightFuncton_and_IES::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function DE_PointLight_Master.DE_PointLight_Master_C.CheckIES
// 0x0018 (0x0018 - 0x0000)
struct DE_PointLight_Master_C_CheckIES final
{
public:
	class FString                                 CallFunc_GetPlatformNameInEditorPreviewAndRuntime_ReturnValue; // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DE_PointLight_Master_C_CheckIES) == 0x000008, "Wrong alignment on DE_PointLight_Master_C_CheckIES");
static_assert(sizeof(DE_PointLight_Master_C_CheckIES) == 0x000018, "Wrong size on DE_PointLight_Master_C_CheckIES");
static_assert(offsetof(DE_PointLight_Master_C_CheckIES, CallFunc_GetPlatformNameInEditorPreviewAndRuntime_ReturnValue) == 0x000000, "Member 'DE_PointLight_Master_C_CheckIES::CallFunc_GetPlatformNameInEditorPreviewAndRuntime_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_CheckIES, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'DE_PointLight_Master_C_CheckIES::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_CheckIES, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000011, "Member 'DE_PointLight_Master_C_CheckIES::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_CheckIES, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000012, "Member 'DE_PointLight_Master_C_CheckIES::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_CheckIES, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'DE_PointLight_Master_C_CheckIES::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_CheckIES, CallFunc_IsValid_ReturnValue_1) == 0x000014, "Member 'DE_PointLight_Master_C_CheckIES::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function DE_PointLight_Master.DE_PointLight_Master_C.CheckerMultiplyRenderState
// 0x0010 (0x0010 - 0x0000)
struct DE_PointLight_Master_C_CheckerMultiplyRenderState final
{
public:
	class UPointLightComponent*                   InputPin;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_UseMultiplyParam_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFinalIntensity_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DE_PointLight_Master_C_CheckerMultiplyRenderState) == 0x000008, "Wrong alignment on DE_PointLight_Master_C_CheckerMultiplyRenderState");
static_assert(sizeof(DE_PointLight_Master_C_CheckerMultiplyRenderState) == 0x000010, "Wrong size on DE_PointLight_Master_C_CheckerMultiplyRenderState");
static_assert(offsetof(DE_PointLight_Master_C_CheckerMultiplyRenderState, InputPin) == 0x000000, "Member 'DE_PointLight_Master_C_CheckerMultiplyRenderState::InputPin' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_CheckerMultiplyRenderState, CallFunc_UseMultiplyParam_ReturnValue) == 0x000008, "Member 'DE_PointLight_Master_C_CheckerMultiplyRenderState::CallFunc_UseMultiplyParam_ReturnValue' has a wrong offset!");
static_assert(offsetof(DE_PointLight_Master_C_CheckerMultiplyRenderState, CallFunc_GetFinalIntensity_ReturnValue) == 0x00000C, "Member 'DE_PointLight_Master_C_CheckerMultiplyRenderState::CallFunc_GetFinalIntensity_ReturnValue' has a wrong offset!");

// Function DE_PointLight_Master.DE_PointLight_Master_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct DE_PointLight_Master_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(DE_PointLight_Master_C_GetModuleName) == 0x000008, "Wrong alignment on DE_PointLight_Master_C_GetModuleName");
static_assert(sizeof(DE_PointLight_Master_C_GetModuleName) == 0x000010, "Wrong size on DE_PointLight_Master_C_GetModuleName");
static_assert(offsetof(DE_PointLight_Master_C_GetModuleName, ReturnValue) == 0x000000, "Member 'DE_PointLight_Master_C_GetModuleName::ReturnValue' has a wrong offset!");

}

