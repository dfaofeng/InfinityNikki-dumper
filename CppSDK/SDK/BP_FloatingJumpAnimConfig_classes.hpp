#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FloatingJumpAnimConfig

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FloatingJumpAnimConfig.BP_FloatingJumpAnimConfig_C
// 0x0078 (0x00A8 - 0x0030)
class UBP_FloatingJumpAnimConfig_C final : public UPrimaryDataAsset
{
public:
	class UAnimSequence*                          FloatLoopMiddleRFoot;                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          FloatLoopMiddleLFoot;                              // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace*                            FloatShiftRFoot;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace*                            FloatShiftLFoot;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace*                            FloatBankRFoot;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace*                            FloatBankLFoot;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace*                            FloatPitchRFoot;                                   // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace*                            FloatPitchLFoot;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          FloatLoop;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          JumpInAirToFloat;                                  // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace*                            JumpToFloat;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace*                            FallToFloat;                                       // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace1D*                          FloatToFall;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace1D*                          FloatLandMovement;                                 // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          FloatLandStatic;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FloatingJumpAnimConfig_C">();
	}
	static class UBP_FloatingJumpAnimConfig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FloatingJumpAnimConfig_C>();
	}
};
static_assert(alignof(UBP_FloatingJumpAnimConfig_C) == 0x000008, "Wrong alignment on UBP_FloatingJumpAnimConfig_C");
static_assert(sizeof(UBP_FloatingJumpAnimConfig_C) == 0x0000A8, "Wrong size on UBP_FloatingJumpAnimConfig_C");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatLoopMiddleRFoot) == 0x000030, "Member 'UBP_FloatingJumpAnimConfig_C::FloatLoopMiddleRFoot' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatLoopMiddleLFoot) == 0x000038, "Member 'UBP_FloatingJumpAnimConfig_C::FloatLoopMiddleLFoot' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatShiftRFoot) == 0x000040, "Member 'UBP_FloatingJumpAnimConfig_C::FloatShiftRFoot' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatShiftLFoot) == 0x000048, "Member 'UBP_FloatingJumpAnimConfig_C::FloatShiftLFoot' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatBankRFoot) == 0x000050, "Member 'UBP_FloatingJumpAnimConfig_C::FloatBankRFoot' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatBankLFoot) == 0x000058, "Member 'UBP_FloatingJumpAnimConfig_C::FloatBankLFoot' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatPitchRFoot) == 0x000060, "Member 'UBP_FloatingJumpAnimConfig_C::FloatPitchRFoot' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatPitchLFoot) == 0x000068, "Member 'UBP_FloatingJumpAnimConfig_C::FloatPitchLFoot' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatLoop) == 0x000070, "Member 'UBP_FloatingJumpAnimConfig_C::FloatLoop' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, JumpInAirToFloat) == 0x000078, "Member 'UBP_FloatingJumpAnimConfig_C::JumpInAirToFloat' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, JumpToFloat) == 0x000080, "Member 'UBP_FloatingJumpAnimConfig_C::JumpToFloat' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FallToFloat) == 0x000088, "Member 'UBP_FloatingJumpAnimConfig_C::FallToFloat' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatToFall) == 0x000090, "Member 'UBP_FloatingJumpAnimConfig_C::FloatToFall' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatLandMovement) == 0x000098, "Member 'UBP_FloatingJumpAnimConfig_C::FloatLandMovement' has a wrong offset!");
static_assert(offsetof(UBP_FloatingJumpAnimConfig_C, FloatLandStatic) == 0x0000A0, "Member 'UBP_FloatingJumpAnimConfig_C::FloatLandStatic' has a wrong offset!");

}

