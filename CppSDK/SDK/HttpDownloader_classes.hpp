#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HttpDownloader

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "HttpDownloader_structs.hpp"


namespace SDK
{

// Class HttpDownloader.DownloadTaskInfoMgr
// 0x01C0 (0x01E8 - 0x0028)
class UDownloadTaskInfoMgr final : public UObject
{
public:
	uint8                                         Pad_28[0x1C0];                                     // 0x0028(0x01C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginTransaction();
	void ClearAllCache();
	void CloseDB();
	void EndTransaction();
	void Init(const class FString& CacheDir, const class FString& InDBName, const class FString& InTableName);
	bool SyncDownloadTasks(const TArray<struct FSimpleHttpDownloadTaskInfo>& newlyCreatedTask);
	bool UpdateDownloadTaskStatus(const class FString& URL, EDownloadTaskInfoStatus Status, int32 Size);

	const TMap<class FString, struct FSimpleHttpDownloadTaskInfo> GetFinalDownloadedTasks() const;
	const TMap<class FString, struct FSimpleHttpDownloadTaskInfo> GetFinalShouldDownloadTasks() const;
	const TMap<class FString, struct FSimpleHttpDownloadTaskInfo> GetPreDownloadedTasks() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DownloadTaskInfoMgr">();
	}
	static class UDownloadTaskInfoMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDownloadTaskInfoMgr>();
	}
};
static_assert(alignof(UDownloadTaskInfoMgr) == 0x000008, "Wrong alignment on UDownloadTaskInfoMgr");
static_assert(sizeof(UDownloadTaskInfoMgr) == 0x0001E8, "Wrong size on UDownloadTaskInfoMgr");

// Class HttpDownloader.SimpleDownloader
// 0x0520 (0x0548 - 0x0028)
class USimpleDownloader final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 bytesSent, int32 bytesReceived, int32 RequestID, const class FString& CurrentDownloadFileName)> OnDownLoaderProgress; // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, int32 ResponseCode, int32 Size, int32 RequestID, const class FString& CurrentDownloadFileName)> OnDownLoaderComplete; // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<struct FSimpleHttpDownloadTaskInfo>& DownloadedSuccess, const TArray<struct FSimpleHttpDownloadTaskInfo>& DownloadedFailed)> OnDownLoaderAllComplete; // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x4E8];                                     // 0x0060(0x04E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<int32> AddFilesToDownload(const TArray<struct FSimpleHttpDownloadTaskInfo>& DownloadTasks);
	bool GetDownloadTaskInfoByID(int32 RequestID, struct FSimpleHttpDownloadTaskInfo* OutTaskInfo);
	bool GetResponseContentByID(int32 RequestID, TArray<uint8>* Content);
	bool IsDownloadTaskUsingStreamMode(struct FSimpleHttpDownloadTaskInfo* InTaskInfo);
	bool IsFinishDownload(int32* SuccessCount, int32* FailedCount);
	void SetMaxRequestCount(int32 MaxCount);
	void SetMaxRetryCount(int32 MaxCount);
	void SetStreamingModeFileExt(const TArray<class FString>& Exts);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleDownloader">();
	}
	static class USimpleDownloader* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleDownloader>();
	}
};
static_assert(alignof(USimpleDownloader) == 0x000008, "Wrong alignment on USimpleDownloader");
static_assert(sizeof(USimpleDownloader) == 0x000548, "Wrong size on USimpleDownloader");
static_assert(offsetof(USimpleDownloader, OnDownLoaderProgress) == 0x000030, "Member 'USimpleDownloader::OnDownLoaderProgress' has a wrong offset!");
static_assert(offsetof(USimpleDownloader, OnDownLoaderComplete) == 0x000040, "Member 'USimpleDownloader::OnDownLoaderComplete' has a wrong offset!");
static_assert(offsetof(USimpleDownloader, OnDownLoaderAllComplete) == 0x000050, "Member 'USimpleDownloader::OnDownLoaderAllComplete' has a wrong offset!");

// Class HttpDownloader.SimpleHashChecker
// 0x0060 (0x0088 - 0x0028)
class USimpleHashChecker final : public UObject
{
public:
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddTasksToCheck(const TArray<struct FSimpleHttpDownloadTaskInfo>& Tasks);
	bool StartCheck(TDelegate<void(const TArray<struct FSimpleHttpDownloadTaskInfo>& CurrentSuccessTask, const TArray<struct FSimpleHttpDownloadTaskInfo>& CurrentFailedTask)> Progress, TDelegate<void(const TArray<struct FSimpleHttpDownloadTaskInfo>& AllFailedFileName)> AllComplete);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleHashChecker">();
	}
	static class USimpleHashChecker* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleHashChecker>();
	}
};
static_assert(alignof(USimpleHashChecker) == 0x000008, "Wrong alignment on USimpleHashChecker");
static_assert(sizeof(USimpleHashChecker) == 0x000088, "Wrong size on USimpleHashChecker");

}

