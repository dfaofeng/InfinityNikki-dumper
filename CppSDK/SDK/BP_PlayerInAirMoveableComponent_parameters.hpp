#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerInAirMoveableComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "X6Game_structs.hpp"
#include "EPlayerGameplayInAirMovementMode_structs.hpp"
#include "EInputDeviceKeyType_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_OnCharacterMovementModeChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BP_OnCharacterMovementModeChanged final
{
public:
	EMovementMode                                 PrevMovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PreviousCustomMode;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BP_OnCharacterMovementModeChanged) == 0x000001, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BP_OnCharacterMovementModeChanged");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BP_OnCharacterMovementModeChanged) == 0x000002, "Wrong size on BP_PlayerInAirMoveableComponent_C_BP_OnCharacterMovementModeChanged");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BP_OnCharacterMovementModeChanged, PrevMovementMode) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BP_OnCharacterMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BP_OnCharacterMovementModeChanged, PreviousCustomMode) == 0x000001, "Member 'BP_PlayerInAirMoveableComponent_C_BP_OnCharacterMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_OnX6CharacterPossessed
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterPossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterPossessed) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterPossessed");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterPossessed) == 0x000008, "Wrong size on BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterPossessed");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterPossessed, NewController) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterPossessed::NewController' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_OnX6CharacterUnPossessed
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterUnPossessed final
{
public:
	class AController*                            PreviousController;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterUnPossessed) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterUnPossessed");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterUnPossessed) == 0x000008, "Wrong size on BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterUnPossessed");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterUnPossessed, PreviousController) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterUnPossessed::PreviousController' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_Public_ExitGamePlayInAirMovementMode
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BP_Public_ExitGamePlayInAirMovementMode final
{
public:
	EPlayerGameplayInAirMovementMode              MovementModeToExit;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BP_Public_ExitGamePlayInAirMovementMode) == 0x000001, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BP_Public_ExitGamePlayInAirMovementMode");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BP_Public_ExitGamePlayInAirMovementMode) == 0x000001, "Wrong size on BP_PlayerInAirMoveableComponent_C_BP_Public_ExitGamePlayInAirMovementMode");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BP_Public_ExitGamePlayInAirMovementMode, MovementModeToExit) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BP_Public_ExitGamePlayInAirMovementMode::MovementModeToExit' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_Public_SetZAxisBrakingDeceleartionOverride
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BP_Public_SetZAxisBrakingDeceleartionOverride final
{
public:
	double                                        NewZAxisBrakingDeceleration;                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BP_Public_SetZAxisBrakingDeceleartionOverride) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BP_Public_SetZAxisBrakingDeceleartionOverride");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BP_Public_SetZAxisBrakingDeceleartionOverride) == 0x000008, "Wrong size on BP_PlayerInAirMoveableComponent_C_BP_Public_SetZAxisBrakingDeceleartionOverride");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BP_Public_SetZAxisBrakingDeceleartionOverride, NewZAxisBrakingDeceleration) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BP_Public_SetZAxisBrakingDeceleartionOverride::NewZAxisBrakingDeceleration' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_Public_SwitchCharacterGamePlayInAirMovementMode
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode final
{
public:
	EPlayerGameplayInAirMovementMode              NewMovementMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode) == 0x000001, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode) == 0x000001, "Wrong size on BP_PlayerInAirMoveableComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode, NewMovementMode) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode::NewMovementMode' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_Get_CurrentInAirStates
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates final
{
public:
	ERegularFloatingJumpStage                     FallStage;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInSpecialJumpAnim;                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularJumpMode                              RegularJumpMode;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumpingInAir;                                    // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates) == 0x000001, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates) == 0x000004, "Wrong size on BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates, FallStage) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates::FallStage' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates, IsInSpecialJumpAnim) == 0x000001, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates::IsInSpecialJumpAnim' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates, RegularJumpMode) == 0x000002, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates::RegularJumpMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates, IsJumpingInAir) == 0x000003, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates::IsJumpingInAir' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_Get_CurrentInAirValues
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirValues final
{
public:
	double                                        InCurrentHeight;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimaryDataAsset*                      SpecialJumpDA;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirValues) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirValues");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirValues) == 0x000010, "Wrong size on BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirValues");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirValues, InCurrentHeight) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirValues::InCurrentHeight' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirValues, SpecialJumpDA) == 0x000008, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirValues::SpecialJumpDA' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_Get_EssentialValues
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InCurrentAcceleration;                             // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InMaxAcceleration;                                 // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InTurnAroundAngle;                                 // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues) == 0x000040, "Wrong size on BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues, InVelocity) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues::InVelocity' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues, InCurrentAcceleration) == 0x000018, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues::InCurrentAcceleration' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues, InMaxAcceleration) == 0x000030, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues::InMaxAcceleration' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues, InTurnAroundAngle) == 0x000038, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues::InTurnAroundAngle' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_Get_MaxSpeedValues
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues final
{
public:
	double                                        CurMinAnalogWalkSpeed;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurConfigMaxSpeed;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurActualMaxSpeed;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues) == 0x000018, "Wrong size on BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues, CurMinAnalogWalkSpeed) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues::CurMinAnalogWalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues, CurConfigMaxSpeed) == 0x000008, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues::CurConfigMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues, CurActualMaxSpeed) == 0x000010, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues::CurActualMaxSpeed' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_Get_RegularFlyingConfigData
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData final
{
public:
	double                                        LowFlyingSpeed;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NormalFlyingSpeed;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TopFlyingSpeed;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData) == 0x000018, "Wrong size on BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData, LowFlyingSpeed) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData::LowFlyingSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData, NormalFlyingSpeed) == 0x000008, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData::NormalFlyingSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData, TopFlyingSpeed) == 0x000010, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData::TopFlyingSpeed' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_OnCharacterMovementModeChanged
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged final
{
public:
	EMovementMode                                 PrevMovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 NewMovementMode;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PrevCustomMode;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewCustomMode;                                     // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged) == 0x000001, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged) == 0x000004, "Wrong size on BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged, PrevMovementMode) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged, NewMovementMode) == 0x000001, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged::NewMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged, PrevCustomMode) == 0x000002, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged::PrevCustomMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged, NewCustomMode) == 0x000003, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged::NewCustomMode' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_OnRotateCameraInput
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BPI_OnRotateCameraInput final
{
public:
	struct FVector                                InputVector;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDeviceKeyType                           DeviceType;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BPI_OnRotateCameraInput) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BPI_OnRotateCameraInput");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BPI_OnRotateCameraInput) == 0x000020, "Wrong size on BP_PlayerInAirMoveableComponent_C_BPI_OnRotateCameraInput");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_OnRotateCameraInput, InputVector) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_OnRotateCameraInput::InputVector' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_OnRotateCameraInput, DeviceType) == 0x000018, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_OnRotateCameraInput::DeviceType' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_OnSelfControlledByPlayer
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BPI_OnSelfControlledByPlayer final
{
public:
	class APawn*                                  PlayerPawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BPI_OnSelfControlledByPlayer) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BPI_OnSelfControlledByPlayer");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BPI_OnSelfControlledByPlayer) == 0x000008, "Wrong size on BP_PlayerInAirMoveableComponent_C_BPI_OnSelfControlledByPlayer");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_OnSelfControlledByPlayer, PlayerPawn) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_OnSelfControlledByPlayer::PlayerPawn' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_SetPlayerToControlActor
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_BPI_SetPlayerToControlActor final
{
public:
	class AActor*                                 ActorToControl;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Controlled;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_BPI_SetPlayerToControlActor) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_BPI_SetPlayerToControlActor");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_BPI_SetPlayerToControlActor) == 0x000010, "Wrong size on BP_PlayerInAirMoveableComponent_C_BPI_SetPlayerToControlActor");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_SetPlayerToControlActor, ActorToControl) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_SetPlayerToControlActor::ActorToControl' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_BPI_SetPlayerToControlActor, Controlled) == 0x000008, "Member 'BP_PlayerInAirMoveableComponent_C_BPI_SetPlayerToControlActor::Controlled' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.ExecuteUbergraph_BP_PlayerInAirMoveableComponent
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     K2Node_Event_FallStage;                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsSlide;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PressedOrRelease_2;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PressedOrRelease_1;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_Event_PrevMovementMode;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_Event_NewMovementMode;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_PrevCustomMode;                       // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_NewCustomMode;                        // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_InputVector;                          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDeviceKeyType                           K2Node_Event_DeviceType;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PressOrRelease;                       // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PressedOrRelease;                     // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_AxisValue_1;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_AxisValue;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_PlayerPawn;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent) == 0x000050, "Wrong size on BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_FallStage) == 0x000004, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_FallStage' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_IsSlide) == 0x000005, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_IsSlide' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_PressedOrRelease_2) == 0x000006, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_PressedOrRelease_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_PressedOrRelease_1) == 0x000007, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_PressedOrRelease_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_PrevMovementMode) == 0x000008, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_NewMovementMode) == 0x000009, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_NewMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_PrevCustomMode) == 0x00000A, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_PrevCustomMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_NewCustomMode) == 0x00000B, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_NewCustomMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_InputVector) == 0x000010, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_InputVector' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_DeviceType) == 0x000028, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_DeviceType' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_PressOrRelease) == 0x000029, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_PressOrRelease' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_PressedOrRelease) == 0x00002A, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_PressedOrRelease' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_AxisValue_1) == 0x000030, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_AxisValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_AxisValue) == 0x000038, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_PlayerPawn) == 0x000040, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_PlayerPawn' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent, K2Node_Event_DeltaSeconds) == 0x000048, "Member 'BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.InputAction_Crash
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_InputAction_Crash final
{
public:
	bool                                          PressedOrRelease;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_InputAction_Crash) == 0x000001, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_InputAction_Crash");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_InputAction_Crash) == 0x000001, "Wrong size on BP_PlayerInAirMoveableComponent_C_InputAction_Crash");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_InputAction_Crash, PressedOrRelease) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_InputAction_Crash::PressedOrRelease' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.InputAction_Jump
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_InputAction_Jump final
{
public:
	bool                                          PressedOrRelease;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_InputAction_Jump) == 0x000001, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_InputAction_Jump");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_InputAction_Jump) == 0x000001, "Wrong size on BP_PlayerInAirMoveableComponent_C_InputAction_Jump");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_InputAction_Jump, PressedOrRelease) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_InputAction_Jump::PressedOrRelease' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.InputAction_Sprint
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_InputAction_Sprint final
{
public:
	bool                                          PressedOrRelease;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_InputAction_Sprint) == 0x000001, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_InputAction_Sprint");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_InputAction_Sprint) == 0x000001, "Wrong size on BP_PlayerInAirMoveableComponent_C_InputAction_Sprint");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_InputAction_Sprint, PressedOrRelease) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_InputAction_Sprint::PressedOrRelease' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.InputAction_Walk
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_InputAction_Walk final
{
public:
	bool                                          PressOrRelease;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_InputAction_Walk) == 0x000001, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_InputAction_Walk");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_InputAction_Walk) == 0x000001, "Wrong size on BP_PlayerInAirMoveableComponent_C_InputAction_Walk");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_InputAction_Walk, PressOrRelease) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_InputAction_Walk::PressOrRelease' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.OnMovementMoveXAxisAction
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_OnMovementMoveXAxisAction final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_OnMovementMoveXAxisAction) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_OnMovementMoveXAxisAction");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_OnMovementMoveXAxisAction) == 0x000008, "Wrong size on BP_PlayerInAirMoveableComponent_C_OnMovementMoveXAxisAction");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_OnMovementMoveXAxisAction, AxisValue) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_OnMovementMoveXAxisAction::AxisValue' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.OnMovementMoveYAxisAction
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_OnMovementMoveYAxisAction final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_OnMovementMoveYAxisAction) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_OnMovementMoveYAxisAction");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_OnMovementMoveYAxisAction) == 0x000008, "Wrong size on BP_PlayerInAirMoveableComponent_C_OnMovementMoveYAxisAction");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_OnMovementMoveYAxisAction, AxisValue) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_OnMovementMoveYAxisAction::AxisValue' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_ReceiveTick");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerInAirMoveableComponent_C_ReceiveTick");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.UpdateFallState
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_UpdateFallState final
{
public:
	ERegularFloatingJumpStage                     FallStage;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSlide;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_UpdateFallState) == 0x000001, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_UpdateFallState");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_UpdateFallState) == 0x000002, "Wrong size on BP_PlayerInAirMoveableComponent_C_UpdateFallState");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_UpdateFallState, FallStage) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_UpdateFallState::FallStage' has a wrong offset!");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_UpdateFallState, IsSlide) == 0x000001, "Member 'BP_PlayerInAirMoveableComponent_C_UpdateFallState::IsSlide' has a wrong offset!");

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerInAirMoveableComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerInAirMoveableComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_PlayerInAirMoveableComponent_C_GetModuleName");
static_assert(sizeof(BP_PlayerInAirMoveableComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_PlayerInAirMoveableComponent_C_GetModuleName");
static_assert(offsetof(BP_PlayerInAirMoveableComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_PlayerInAirMoveableComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

