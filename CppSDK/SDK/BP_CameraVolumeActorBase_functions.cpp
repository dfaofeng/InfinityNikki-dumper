#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraVolumeActorBase

#include "Basic.hpp"

#include "BP_CameraVolumeActorBase_classes.hpp"
#include "BP_CameraVolumeActorBase_parameters.hpp"


namespace SDK
{

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.EventOnProcessActorDestroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::EventOnProcessActorDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "EventOnProcessActorDestroyed");

	Params::BP_CameraVolumeActorBase_C_EventOnProcessActorDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.EventSetProcessActorDestroyBinding
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ProcessActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Bind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::EventSetProcessActorDestroyBinding(class AActor* ProcessActor, bool Bind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "EventSetProcessActorDestroyBinding");

	Params::BP_CameraVolumeActorBase_C_EventSetProcessActorDestroyBinding Parms{};

	Parms.ProcessActor = ProcessActor;
	Parms.Bind = Bind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "ReceiveEndPlay");

	Params::BP_CameraVolumeActorBase_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.EventOnControlledActorChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ControlledActor_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           LastControlledActor                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::EventOnControlledActorChanged(class AActor* ControlledActor_0, class AActor* LastControlledActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "EventOnControlledActorChanged");

	Params::BP_CameraVolumeActorBase_C_EventOnControlledActorChanged Parms{};

	Parms.ControlledActor_0 = ControlledActor_0;
	Parms.LastControlledActor = LastControlledActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ServerInit
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bServer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::ServerInit(bool bServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "ServerInit");

	Params::BP_CameraVolumeActorBase_C_ServerInit Parms{};

	Parms.bServer = bServer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "ReceiveTick");

	Params::BP_CameraVolumeActorBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_CameraVolumeActorBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ConstructCollisionComponent
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CameraVolumeActorBase_C::ConstructCollisionComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "ConstructCollisionComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.DestroyOldCollisionComponent
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_CameraVolumeActorBase_C::DestroyOldCollisionComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "DestroyOldCollisionComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.AddCollisionComponent
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CameraVolumeActorBase_C::AddCollisionComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "AddCollisionComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.AddDebugDraw
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CameraVolumeActorBase_C::AddDebugDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "AddDebugDraw");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.CleanDebugDraw
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CameraVolumeActorBase_C::CleanDebugDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "CleanDebugDraw");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.GetProcessActorsByOverlappingActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           OverlappingActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>*                  Actors                                                 (Parm, OutParm)

void ABP_CameraVolumeActorBase_C::GetProcessActorsByOverlappingActor(class AActor* OverlappingActor, TArray<class AActor*>* Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "GetProcessActorsByOverlappingActor");

	Params::BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor Parms{};

	Parms.OverlappingActor = OverlappingActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Actors != nullptr)
		*Actors = std::move(Parms.Actors);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.GetOverlappingActorByProcessActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor**                          OverlappingActor                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::GetOverlappingActorByProcessActor(class AActor* InActor, class AActor** OverlappingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "GetOverlappingActorByProcessActor");

	Params::BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);

	if (OverlappingActor != nullptr)
		*OverlappingActor = Parms.OverlappingActor;
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.GetAttachedActorWithCollisionTag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor**                          ChildActor                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::GetAttachedActorWithCollisionTag(class AActor* InActor, class AActor** ChildActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "GetAttachedActorWithCollisionTag");

	Params::BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);

	if (ChildActor != nullptr)
		*ChildActor = Parms.ChildActor;
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.GetProcessActorEnableCollision
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::GetProcessActorEnableCollision(class AActor* Actor, bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "GetProcessActorEnableCollision");

	Params::BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.CheckProcessActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           ProcessActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   bActorIsValid                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::CheckProcessActor(class AActor* ProcessActor, bool* bActorIsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "CheckProcessActor");

	Params::BP_CameraVolumeActorBase_C_CheckProcessActor Parms{};

	Parms.ProcessActor = ProcessActor;

	UObject::ProcessEvent(Func, &Parms);

	if (bActorIsValid != nullptr)
		*bActorIsValid = Parms.bActorIsValid;
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.CheckProcessActorAndOverlapping
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           ProcessActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   bActorIsValid                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::CheckProcessActorAndOverlapping(class AActor* ProcessActor, bool* bActorIsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "CheckProcessActorAndOverlapping");

	Params::BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping Parms{};

	Parms.ProcessActor = ProcessActor;

	UObject::ProcessEvent(Func, &Parms);

	if (bActorIsValid != nullptr)
		*bActorIsValid = Parms.bActorIsValid;
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.UpdateProcessActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CameraVolumeActorBase_C::UpdateProcessActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "UpdateProcessActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.UpdateControlledActorInVolume
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CameraVolumeActorBase_C::UpdateControlledActorInVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "UpdateControlledActorInVolume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ProcessActorOverlapping
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bOverlapping                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::ProcessActorOverlapping(class AActor* InActor, bool bOverlapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "ProcessActorOverlapping");

	Params::BP_CameraVolumeActorBase_C_ProcessActorOverlapping Parms{};

	Parms.InActor = InActor;
	Parms.bOverlapping = bOverlapping;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnControlledActorChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ControlledActor_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           LastControlledActor                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::OnControlledActorChanged(class AActor* ControlledActor_0, class AActor* LastControlledActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "OnControlledActorChanged");

	Params::BP_CameraVolumeActorBase_C_OnControlledActorChanged Parms{};

	Parms.ControlledActor_0 = ControlledActor_0;
	Parms.LastControlledActor = LastControlledActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnControlledActorInVolumeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InLastActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InCurrentActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::OnControlledActorInVolumeChanged(class AActor* InLastActor, class AActor* InCurrentActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "OnControlledActorInVolumeChanged");

	Params::BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged Parms{};

	Parms.InLastActor = InLastActor;
	Parms.InCurrentActor = InCurrentActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnControlledActorBeginOverlap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::OnControlledActorBeginOverlap(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "OnControlledActorBeginOverlap");

	Params::BP_CameraVolumeActorBase_C_OnControlledActorBeginOverlap Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnControlledActorEndOverlap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::OnControlledActorEndOverlap(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "OnControlledActorEndOverlap");

	Params::BP_CameraVolumeActorBase_C_OnControlledActorEndOverlap Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ExecuteUbergraph_BP_CameraVolumeActorBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::ExecuteUbergraph_BP_CameraVolumeActorBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "ExecuteUbergraph_BP_CameraVolumeActorBase");

	Params::BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_CameraVolumeActorBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ReceiveActorEndOverlap
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "ReceiveActorEndOverlap");

	Params::BP_CameraVolumeActorBase_C_ReceiveActorEndOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ReceiveActorBeginOverlap
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "ReceiveActorBeginOverlap");

	Params::BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnTargetActorEndOverlap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::OnTargetActorEndOverlap(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "OnTargetActorEndOverlap");

	Params::BP_CameraVolumeActorBase_C_OnTargetActorEndOverlap Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnTargetActorBeginOverlap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_CameraVolumeActorBase_C::OnTargetActorBeginOverlap(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraVolumeActorBase_C", "OnTargetActorBeginOverlap");

	Params::BP_CameraVolumeActorBase_C_OnTargetActorBeginOverlap Parms{};

	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);
}

}

