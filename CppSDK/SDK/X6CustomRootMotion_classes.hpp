#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6CustomRootMotion

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class X6CustomRootMotion.AnimNotifyState_RootMotionMatch
// 0x0028 (0x0058 - 0x0030)
class UAnimNotifyState_RootMotionMatch final : public UAnimNotifyState
{
public:
	class FName                                   BoneName;                                          // 0x0030(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MatchScale;                                        // 0x0038(0x0018)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSign;                                       // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_RootMotionMatch">();
	}
	static class UAnimNotifyState_RootMotionMatch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_RootMotionMatch>();
	}
};
static_assert(alignof(UAnimNotifyState_RootMotionMatch) == 0x000008, "Wrong alignment on UAnimNotifyState_RootMotionMatch");
static_assert(sizeof(UAnimNotifyState_RootMotionMatch) == 0x000058, "Wrong size on UAnimNotifyState_RootMotionMatch");
static_assert(offsetof(UAnimNotifyState_RootMotionMatch, BoneName) == 0x000030, "Member 'UAnimNotifyState_RootMotionMatch::BoneName' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_RootMotionMatch, MatchScale) == 0x000038, "Member 'UAnimNotifyState_RootMotionMatch::MatchScale' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_RootMotionMatch, bIgnoreSign) == 0x000050, "Member 'UAnimNotifyState_RootMotionMatch::bIgnoreSign' has a wrong offset!");

// Class X6CustomRootMotion.X6CustomRootMotionComponent
// 0x00B8 (0x0160 - 0x00A8)
class UX6CustomRootMotionComponent final : public UActorComponent
{
public:
	TMap<class FName, struct FTransform>          LastBonesTF;                                       // 0x00A8(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FTransform>          CurrentBonesTF;                                    // 0x00F8(0x0050)(NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ACharacter>              CharacterOwner;                                    // 0x0148(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 ApplyCustomRootMotionBySourceCls(TSubclassOf<class UX6CustomRootMotionCommandBase> CommandClass);
	int32 ApplyCustomRootMotionBySourceObj(class UX6CustomRootMotionCommandBase* CommandObj);
	void RemoveCustomRootMotionBySourceID(int32 SourceId);
	void UpdateCustomRootMotionBySourceID(int32 SourceId, const struct FVector& NewDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6CustomRootMotionComponent">();
	}
	static class UX6CustomRootMotionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6CustomRootMotionComponent>();
	}
};
static_assert(alignof(UX6CustomRootMotionComponent) == 0x000008, "Wrong alignment on UX6CustomRootMotionComponent");
static_assert(sizeof(UX6CustomRootMotionComponent) == 0x000160, "Wrong size on UX6CustomRootMotionComponent");
static_assert(offsetof(UX6CustomRootMotionComponent, LastBonesTF) == 0x0000A8, "Member 'UX6CustomRootMotionComponent::LastBonesTF' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionComponent, CurrentBonesTF) == 0x0000F8, "Member 'UX6CustomRootMotionComponent::CurrentBonesTF' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionComponent, CharacterOwner) == 0x000148, "Member 'UX6CustomRootMotionComponent::CharacterOwner' has a wrong offset!");

// Class X6CustomRootMotion.X6CustomRootMotionCommandBase
// 0x0030 (0x0058 - 0x0028)
class UX6CustomRootMotionCommandBase : public UObject
{
public:
	float                                         Duration;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLocalSpace;                                     // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGravity;                                    // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisablePartialEndTick;                            // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSensitiveLiftoffCheck;                         // 0x002F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 Mode;                                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocity;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionAccumulateMode                     AccumulateMode;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampVelocity;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6CustomRootMotionCommandBase">();
	}
	static class UX6CustomRootMotionCommandBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6CustomRootMotionCommandBase>();
	}
};
static_assert(alignof(UX6CustomRootMotionCommandBase) == 0x000008, "Wrong alignment on UX6CustomRootMotionCommandBase");
static_assert(sizeof(UX6CustomRootMotionCommandBase) == 0x000058, "Wrong size on UX6CustomRootMotionCommandBase");
static_assert(offsetof(UX6CustomRootMotionCommandBase, Duration) == 0x000028, "Member 'UX6CustomRootMotionCommandBase::Duration' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommandBase, bInLocalSpace) == 0x00002C, "Member 'UX6CustomRootMotionCommandBase::bInLocalSpace' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommandBase, bEnableGravity) == 0x00002D, "Member 'UX6CustomRootMotionCommandBase::bEnableGravity' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommandBase, bDisablePartialEndTick) == 0x00002E, "Member 'UX6CustomRootMotionCommandBase::bDisablePartialEndTick' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommandBase, bUseSensitiveLiftoffCheck) == 0x00002F, "Member 'UX6CustomRootMotionCommandBase::bUseSensitiveLiftoffCheck' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommandBase, Mode) == 0x000030, "Member 'UX6CustomRootMotionCommandBase::Mode' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommandBase, SetVelocity) == 0x000038, "Member 'UX6CustomRootMotionCommandBase::SetVelocity' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommandBase, AccumulateMode) == 0x000050, "Member 'UX6CustomRootMotionCommandBase::AccumulateMode' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommandBase, ClampVelocity) == 0x000054, "Member 'UX6CustomRootMotionCommandBase::ClampVelocity' has a wrong offset!");

// Class X6CustomRootMotion.X6CustomRootMotionCommand_MoveByCurve
// 0x0040 (0x0098 - 0x0058)
class UX6CustomRootMotionCommand_MoveByCurve final : public UX6CustomRootMotionCommandBase
{
public:
	class UCurveVector*                           RootMotionLocationCurve;                           // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           RootMotionRotationCurve;                           // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AxisRotation;                                      // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AxisScale;                                         // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6CustomRootMotionCommand_MoveByCurve">();
	}
	static class UX6CustomRootMotionCommand_MoveByCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6CustomRootMotionCommand_MoveByCurve>();
	}
};
static_assert(alignof(UX6CustomRootMotionCommand_MoveByCurve) == 0x000008, "Wrong alignment on UX6CustomRootMotionCommand_MoveByCurve");
static_assert(sizeof(UX6CustomRootMotionCommand_MoveByCurve) == 0x000098, "Wrong size on UX6CustomRootMotionCommand_MoveByCurve");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByCurve, RootMotionLocationCurve) == 0x000058, "Member 'UX6CustomRootMotionCommand_MoveByCurve::RootMotionLocationCurve' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByCurve, RootMotionRotationCurve) == 0x000060, "Member 'UX6CustomRootMotionCommand_MoveByCurve::RootMotionRotationCurve' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByCurve, AxisRotation) == 0x000068, "Member 'UX6CustomRootMotionCommand_MoveByCurve::AxisRotation' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByCurve, AxisScale) == 0x000080, "Member 'UX6CustomRootMotionCommand_MoveByCurve::AxisScale' has a wrong offset!");

// Class X6CustomRootMotion.X6CustomRootMotionCommand_FixedDirectionMove
// 0x0020 (0x0078 - 0x0058)
class UX6CustomRootMotionCommand_FixedDirectionMove final : public UX6CustomRootMotionCommandBase
{
public:
	float                                         Speed;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6CustomRootMotionCommand_FixedDirectionMove">();
	}
	static class UX6CustomRootMotionCommand_FixedDirectionMove* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6CustomRootMotionCommand_FixedDirectionMove>();
	}
};
static_assert(alignof(UX6CustomRootMotionCommand_FixedDirectionMove) == 0x000008, "Wrong alignment on UX6CustomRootMotionCommand_FixedDirectionMove");
static_assert(sizeof(UX6CustomRootMotionCommand_FixedDirectionMove) == 0x000078, "Wrong size on UX6CustomRootMotionCommand_FixedDirectionMove");
static_assert(offsetof(UX6CustomRootMotionCommand_FixedDirectionMove, Speed) == 0x000058, "Member 'UX6CustomRootMotionCommand_FixedDirectionMove::Speed' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_FixedDirectionMove, Direction) == 0x000060, "Member 'UX6CustomRootMotionCommand_FixedDirectionMove::Direction' has a wrong offset!");

// Class X6CustomRootMotion.X6CustomRootMotionCommand_MoveByAnimCurve
// 0x0068 (0x00C0 - 0x0058)
class UX6CustomRootMotionCommand_MoveByAnimCurve final : public UX6CustomRootMotionCommandBase
{
public:
	class FName                                   XAxisName;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   YAxisName;                                         // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ZAxisName;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PitchAxisName;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   YawAxisName;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RollAxisName;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AxisRotation;                                      // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AxisScale;                                         // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Sequence;                                          // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6CustomRootMotionCommand_MoveByAnimCurve">();
	}
	static class UX6CustomRootMotionCommand_MoveByAnimCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6CustomRootMotionCommand_MoveByAnimCurve>();
	}
};
static_assert(alignof(UX6CustomRootMotionCommand_MoveByAnimCurve) == 0x000008, "Wrong alignment on UX6CustomRootMotionCommand_MoveByAnimCurve");
static_assert(sizeof(UX6CustomRootMotionCommand_MoveByAnimCurve) == 0x0000C0, "Wrong size on UX6CustomRootMotionCommand_MoveByAnimCurve");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByAnimCurve, XAxisName) == 0x000058, "Member 'UX6CustomRootMotionCommand_MoveByAnimCurve::XAxisName' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByAnimCurve, YAxisName) == 0x000060, "Member 'UX6CustomRootMotionCommand_MoveByAnimCurve::YAxisName' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByAnimCurve, ZAxisName) == 0x000068, "Member 'UX6CustomRootMotionCommand_MoveByAnimCurve::ZAxisName' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByAnimCurve, PitchAxisName) == 0x000070, "Member 'UX6CustomRootMotionCommand_MoveByAnimCurve::PitchAxisName' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByAnimCurve, YawAxisName) == 0x000078, "Member 'UX6CustomRootMotionCommand_MoveByAnimCurve::YawAxisName' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByAnimCurve, RollAxisName) == 0x000080, "Member 'UX6CustomRootMotionCommand_MoveByAnimCurve::RollAxisName' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByAnimCurve, AxisRotation) == 0x000088, "Member 'UX6CustomRootMotionCommand_MoveByAnimCurve::AxisRotation' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByAnimCurve, AxisScale) == 0x0000A0, "Member 'UX6CustomRootMotionCommand_MoveByAnimCurve::AxisScale' has a wrong offset!");
static_assert(offsetof(UX6CustomRootMotionCommand_MoveByAnimCurve, Sequence) == 0x0000B8, "Member 'UX6CustomRootMotionCommand_MoveByAnimCurve::Sequence' has a wrong offset!");

}

