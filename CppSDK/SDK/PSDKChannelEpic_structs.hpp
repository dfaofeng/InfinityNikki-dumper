#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PSDKChannelEpic

#include "Basic.hpp"

#include "PSDKBasic_structs.hpp"


namespace SDK
{

// ScriptStruct PSDKChannelEpic.PSDKBackendPaymentCancel
// 0x0048 (0x0100 - 0x00B8)
struct FPSDKBackendPaymentCancel final : public FJsonData
{
public:
	class FString                                 Nid;                                               // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Token;                                             // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 order_id;                                          // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKBackendPaymentCancel) == 0x000008, "Wrong alignment on FPSDKBackendPaymentCancel");
static_assert(sizeof(FPSDKBackendPaymentCancel) == 0x000100, "Wrong size on FPSDKBackendPaymentCancel");
static_assert(offsetof(FPSDKBackendPaymentCancel, Nid) == 0x0000B8, "Member 'FPSDKBackendPaymentCancel::Nid' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCancel, Token) == 0x0000D0, "Member 'FPSDKBackendPaymentCancel::Token' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCancel, order_id) == 0x0000E8, "Member 'FPSDKBackendPaymentCancel::order_id' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKBackendPaymentCancelResponse
// 0x0000 (0x00E0 - 0x00E0)
struct FPSDKBackendPaymentCancelResponse final : public FPSDKBackendResponseBase
{
};
static_assert(alignof(FPSDKBackendPaymentCancelResponse) == 0x000008, "Wrong alignment on FPSDKBackendPaymentCancelResponse");
static_assert(sizeof(FPSDKBackendPaymentCancelResponse) == 0x0000E0, "Wrong size on FPSDKBackendPaymentCancelResponse");

// ScriptStruct PSDKChannelEpic.PSDKBackendPaymentEpicData
// 0x0090 (0x0148 - 0x00B8)
struct FPSDKBackendPaymentEpicData final : public FJsonData
{
public:
	class FString                                 epic_id;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 jwt;                                               // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 catalog_offer_id;                                  // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 entitlement_name;                                  // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 catalog_item_id;                                   // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 entitlement_id;                                    // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x8];                                      // 0x0140(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKBackendPaymentEpicData) == 0x000008, "Wrong alignment on FPSDKBackendPaymentEpicData");
static_assert(sizeof(FPSDKBackendPaymentEpicData) == 0x000148, "Wrong size on FPSDKBackendPaymentEpicData");
static_assert(offsetof(FPSDKBackendPaymentEpicData, epic_id) == 0x0000B8, "Member 'FPSDKBackendPaymentEpicData::epic_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentEpicData, jwt) == 0x0000D0, "Member 'FPSDKBackendPaymentEpicData::jwt' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentEpicData, catalog_offer_id) == 0x0000E8, "Member 'FPSDKBackendPaymentEpicData::catalog_offer_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentEpicData, entitlement_name) == 0x000100, "Member 'FPSDKBackendPaymentEpicData::entitlement_name' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentEpicData, catalog_item_id) == 0x000118, "Member 'FPSDKBackendPaymentEpicData::catalog_item_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentEpicData, entitlement_id) == 0x000130, "Member 'FPSDKBackendPaymentEpicData::entitlement_id' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKBackendPaymentCreate
// 0x02A8 (0x0360 - 0x00B8)
struct FPSDKBackendPaymentCreate final : public FJsonData
{
public:
	class FString                                 Token;                                             // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 role_id;                                           // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x4];                                       // 0x00E0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         charge_type;                                       // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 zone_id;                                           // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 server_id;                                         // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 product_id;                                        // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 channel_product_id;                                // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x4];                                      // 0x0148(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         money;                                             // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 currency;                                          // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKBackendPaymentEpicData            Extra;                                             // 0x0170(0x0148)(NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Nid;                                               // 0x02C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 attachment;                                        // 0x02D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x8];                                      // 0x02E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 game_extra;                                        // 0x02F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_300[0x8];                                      // 0x0300(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 shelf_id;                                          // 0x0308(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Area;                                              // 0x0320(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 store_area;                                        // 0x0338(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        Num;                                               // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKBackendPaymentCreate) == 0x000008, "Wrong alignment on FPSDKBackendPaymentCreate");
static_assert(sizeof(FPSDKBackendPaymentCreate) == 0x000360, "Wrong size on FPSDKBackendPaymentCreate");
static_assert(offsetof(FPSDKBackendPaymentCreate, Token) == 0x0000B8, "Member 'FPSDKBackendPaymentCreate::Token' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, role_id) == 0x0000D0, "Member 'FPSDKBackendPaymentCreate::role_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, charge_type) == 0x0000E4, "Member 'FPSDKBackendPaymentCreate::charge_type' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, zone_id) == 0x0000F0, "Member 'FPSDKBackendPaymentCreate::zone_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, server_id) == 0x000108, "Member 'FPSDKBackendPaymentCreate::server_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, product_id) == 0x000120, "Member 'FPSDKBackendPaymentCreate::product_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, channel_product_id) == 0x000138, "Member 'FPSDKBackendPaymentCreate::channel_product_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, money) == 0x00014C, "Member 'FPSDKBackendPaymentCreate::money' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, currency) == 0x000158, "Member 'FPSDKBackendPaymentCreate::currency' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, Extra) == 0x000170, "Member 'FPSDKBackendPaymentCreate::Extra' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, Nid) == 0x0002C0, "Member 'FPSDKBackendPaymentCreate::Nid' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, attachment) == 0x0002D8, "Member 'FPSDKBackendPaymentCreate::attachment' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, game_extra) == 0x0002F0, "Member 'FPSDKBackendPaymentCreate::game_extra' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, shelf_id) == 0x000308, "Member 'FPSDKBackendPaymentCreate::shelf_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, Area) == 0x000320, "Member 'FPSDKBackendPaymentCreate::Area' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, store_area) == 0x000338, "Member 'FPSDKBackendPaymentCreate::store_area' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentCreate, Num) == 0x000350, "Member 'FPSDKBackendPaymentCreate::Num' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKBackendPaymentOrderInfo
// 0x0110 (0x01C8 - 0x00B8)
struct FPSDKBackendPaymentOrderInfo final : public FJsonData
{
public:
	class FString                                 accnt_id;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Amount;                                            // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 catalog_item_id;                                   // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 catalog_offer_id;                                  // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 channelOrderID;                                    // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 charge_type;                                       // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 entitlement_name;                                  // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 epic_id;                                           // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Image;                                             // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nid;                                               // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Num;                                               // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 order_extra;                                       // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 order_id;                                          // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 order_ip;                                          // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 product_id;                                        // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 shelf_chann_id;                                    // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSDKBackendPaymentOrderInfo) == 0x000008, "Wrong alignment on FPSDKBackendPaymentOrderInfo");
static_assert(sizeof(FPSDKBackendPaymentOrderInfo) == 0x0001C8, "Wrong size on FPSDKBackendPaymentOrderInfo");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, accnt_id) == 0x0000B8, "Member 'FPSDKBackendPaymentOrderInfo::accnt_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, Amount) == 0x0000C8, "Member 'FPSDKBackendPaymentOrderInfo::Amount' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, catalog_item_id) == 0x0000D8, "Member 'FPSDKBackendPaymentOrderInfo::catalog_item_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, catalog_offer_id) == 0x0000E8, "Member 'FPSDKBackendPaymentOrderInfo::catalog_offer_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, channelOrderID) == 0x0000F8, "Member 'FPSDKBackendPaymentOrderInfo::channelOrderID' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, charge_type) == 0x000108, "Member 'FPSDKBackendPaymentOrderInfo::charge_type' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, entitlement_name) == 0x000118, "Member 'FPSDKBackendPaymentOrderInfo::entitlement_name' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, epic_id) == 0x000128, "Member 'FPSDKBackendPaymentOrderInfo::epic_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, Image) == 0x000138, "Member 'FPSDKBackendPaymentOrderInfo::Image' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, Nid) == 0x000148, "Member 'FPSDKBackendPaymentOrderInfo::Nid' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, Num) == 0x000158, "Member 'FPSDKBackendPaymentOrderInfo::Num' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, order_extra) == 0x000168, "Member 'FPSDKBackendPaymentOrderInfo::order_extra' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, order_id) == 0x000178, "Member 'FPSDKBackendPaymentOrderInfo::order_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, order_ip) == 0x000188, "Member 'FPSDKBackendPaymentOrderInfo::order_ip' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, Platform) == 0x000198, "Member 'FPSDKBackendPaymentOrderInfo::Platform' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, product_id) == 0x0001A8, "Member 'FPSDKBackendPaymentOrderInfo::product_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderInfo, shelf_chann_id) == 0x0001B8, "Member 'FPSDKBackendPaymentOrderInfo::shelf_chann_id' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKBackendPaymentCreateResponseData
// 0x01C8 (0x0280 - 0x00B8)
struct FPSDKBackendPaymentCreateResponseData final : public FJsonData
{
public:
	struct FPSDKBackendPaymentOrderInfo           Order_Info;                                        // 0x00B8(0x01C8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSDKBackendPaymentCreateResponseData) == 0x000008, "Wrong alignment on FPSDKBackendPaymentCreateResponseData");
static_assert(sizeof(FPSDKBackendPaymentCreateResponseData) == 0x000280, "Wrong size on FPSDKBackendPaymentCreateResponseData");
static_assert(offsetof(FPSDKBackendPaymentCreateResponseData, Order_Info) == 0x0000B8, "Member 'FPSDKBackendPaymentCreateResponseData::Order_Info' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKBackendPaymentCreateResponse
// 0x0280 (0x0360 - 0x00E0)
struct FPSDKBackendPaymentCreateResponse final : public FPSDKBackendResponseBase
{
public:
	struct FPSDKBackendPaymentCreateResponseData  Data;                                              // 0x00E0(0x0280)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSDKBackendPaymentCreateResponse) == 0x000008, "Wrong alignment on FPSDKBackendPaymentCreateResponse");
static_assert(sizeof(FPSDKBackendPaymentCreateResponse) == 0x000360, "Wrong size on FPSDKBackendPaymentCreateResponse");
static_assert(offsetof(FPSDKBackendPaymentCreateResponse, Data) == 0x0000E0, "Member 'FPSDKBackendPaymentCreateResponse::Data' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKBackendPaymentOrderDeliverRequest
// 0x0228 (0x02E0 - 0x00B8)
struct FPSDKBackendPaymentOrderDeliverRequest final : public FJsonData
{
public:
	int32                                         charge_type;                                       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 role_id;                                           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Nid;                                               // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Token;                                             // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x4];                                      // 0x0100(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         account_type;                                      // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 zone_id;                                           // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 server_id;                                         // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKBackendPaymentEpicData            Extra;                                             // 0x0140(0x0148)(NativeAccessSpecifierPublic)
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 channel_product_id;                                // 0x0290(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 order_id;                                          // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 transaction_id;                                    // 0x02C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0x4];                                      // 0x02D0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         money;                                             // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKBackendPaymentOrderDeliverRequest) == 0x000008, "Wrong alignment on FPSDKBackendPaymentOrderDeliverRequest");
static_assert(sizeof(FPSDKBackendPaymentOrderDeliverRequest) == 0x0002E0, "Wrong size on FPSDKBackendPaymentOrderDeliverRequest");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, charge_type) == 0x0000B8, "Member 'FPSDKBackendPaymentOrderDeliverRequest::charge_type' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, role_id) == 0x0000C0, "Member 'FPSDKBackendPaymentOrderDeliverRequest::role_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, Nid) == 0x0000D8, "Member 'FPSDKBackendPaymentOrderDeliverRequest::Nid' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, Token) == 0x0000F0, "Member 'FPSDKBackendPaymentOrderDeliverRequest::Token' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, account_type) == 0x000104, "Member 'FPSDKBackendPaymentOrderDeliverRequest::account_type' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, zone_id) == 0x000110, "Member 'FPSDKBackendPaymentOrderDeliverRequest::zone_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, server_id) == 0x000128, "Member 'FPSDKBackendPaymentOrderDeliverRequest::server_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, Extra) == 0x000140, "Member 'FPSDKBackendPaymentOrderDeliverRequest::Extra' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, channel_product_id) == 0x000290, "Member 'FPSDKBackendPaymentOrderDeliverRequest::channel_product_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, order_id) == 0x0002A8, "Member 'FPSDKBackendPaymentOrderDeliverRequest::order_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, transaction_id) == 0x0002C0, "Member 'FPSDKBackendPaymentOrderDeliverRequest::transaction_id' has a wrong offset!");
static_assert(offsetof(FPSDKBackendPaymentOrderDeliverRequest, money) == 0x0002D4, "Member 'FPSDKBackendPaymentOrderDeliverRequest::money' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKBackendPaymentOrderDeliverResponse
// 0x0000 (0x00E0 - 0x00E0)
struct FPSDKBackendPaymentOrderDeliverResponse final : public FPSDKBackendResponseBase
{
};
static_assert(alignof(FPSDKBackendPaymentOrderDeliverResponse) == 0x000008, "Wrong alignment on FPSDKBackendPaymentOrderDeliverResponse");
static_assert(sizeof(FPSDKBackendPaymentOrderDeliverResponse) == 0x0000E0, "Wrong size on FPSDKBackendPaymentOrderDeliverResponse");

// ScriptStruct PSDKChannelEpic.PSDKEpicConsumeRequest
// 0x0078 (0x0130 - 0x00B8)
struct FPSDKEpicConsumeRequest final : public FJsonData
{
public:
	class FString                                 openId;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoleId;                                            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 zoneId;                                            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 serverId;                                          // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 productID;                                         // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKEpicConsumeRequest) == 0x000008, "Wrong alignment on FPSDKEpicConsumeRequest");
static_assert(sizeof(FPSDKEpicConsumeRequest) == 0x000130, "Wrong size on FPSDKEpicConsumeRequest");
static_assert(offsetof(FPSDKEpicConsumeRequest, openId) == 0x0000B8, "Member 'FPSDKEpicConsumeRequest::openId' has a wrong offset!");
static_assert(offsetof(FPSDKEpicConsumeRequest, RoleId) == 0x0000D0, "Member 'FPSDKEpicConsumeRequest::RoleId' has a wrong offset!");
static_assert(offsetof(FPSDKEpicConsumeRequest, zoneId) == 0x0000E8, "Member 'FPSDKEpicConsumeRequest::zoneId' has a wrong offset!");
static_assert(offsetof(FPSDKEpicConsumeRequest, serverId) == 0x000100, "Member 'FPSDKEpicConsumeRequest::serverId' has a wrong offset!");
static_assert(offsetof(FPSDKEpicConsumeRequest, productID) == 0x000118, "Member 'FPSDKEpicConsumeRequest::productID' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKEpicPreCheckExtraDataRequest
// 0x0018 (0x00D0 - 0x00B8)
struct FPSDKEpicPreCheckExtraDataRequest final : public FJsonData
{
public:
	class FString                                 ItemId;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKEpicPreCheckExtraDataRequest) == 0x000008, "Wrong alignment on FPSDKEpicPreCheckExtraDataRequest");
static_assert(sizeof(FPSDKEpicPreCheckExtraDataRequest) == 0x0000D0, "Wrong size on FPSDKEpicPreCheckExtraDataRequest");
static_assert(offsetof(FPSDKEpicPreCheckExtraDataRequest, ItemId) == 0x0000B8, "Member 'FPSDKEpicPreCheckExtraDataRequest::ItemId' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKEpicProductInfoRequest
// 0x0028 (0x00E0 - 0x00B8)
struct FPSDKEpicProductInfoRequest final : public FJsonData
{
public:
	TArray<class FString>                         itemSkus;                                          // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         subsSkus;                                          // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKEpicProductInfoRequest) == 0x000008, "Wrong alignment on FPSDKEpicProductInfoRequest");
static_assert(sizeof(FPSDKEpicProductInfoRequest) == 0x0000E0, "Wrong size on FPSDKEpicProductInfoRequest");
static_assert(offsetof(FPSDKEpicProductInfoRequest, itemSkus) == 0x0000B8, "Member 'FPSDKEpicProductInfoRequest::itemSkus' has a wrong offset!");
static_assert(offsetof(FPSDKEpicProductInfoRequest, subsSkus) == 0x0000C8, "Member 'FPSDKEpicProductInfoRequest::subsSkus' has a wrong offset!");
static_assert(offsetof(FPSDKEpicProductInfoRequest, Type) == 0x0000D8, "Member 'FPSDKEpicProductInfoRequest::Type' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKEpicCurrencyDetail
// 0x0050 (0x0108 - 0x00B8)
struct FPSDKEpicCurrencyDetail final : public FJsonData
{
public:
	class FString                                 Amount;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x4];                                       // 0x00C8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         align;                                             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 symbol;                                            // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pattern;                                           // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKEpicCurrencyDetail) == 0x000008, "Wrong alignment on FPSDKEpicCurrencyDetail");
static_assert(sizeof(FPSDKEpicCurrencyDetail) == 0x000108, "Wrong size on FPSDKEpicCurrencyDetail");
static_assert(offsetof(FPSDKEpicCurrencyDetail, Amount) == 0x0000B8, "Member 'FPSDKEpicCurrencyDetail::Amount' has a wrong offset!");
static_assert(offsetof(FPSDKEpicCurrencyDetail, align) == 0x0000CC, "Member 'FPSDKEpicCurrencyDetail::align' has a wrong offset!");
static_assert(offsetof(FPSDKEpicCurrencyDetail, symbol) == 0x0000D8, "Member 'FPSDKEpicCurrencyDetail::symbol' has a wrong offset!");
static_assert(offsetof(FPSDKEpicCurrencyDetail, Pattern) == 0x0000F0, "Member 'FPSDKEpicCurrencyDetail::Pattern' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKEpicProductData
// 0x0188 (0x0240 - 0x00B8)
struct FPSDKEpicProductData final : public FJsonData
{
public:
	class FString                                 Name;                                              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Desc;                                              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 price;                                             // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 currency;                                          // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKEpicCurrencyDetail                currency_detail;                                   // 0x0130(0x0108)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKEpicProductData) == 0x000008, "Wrong alignment on FPSDKEpicProductData");
static_assert(sizeof(FPSDKEpicProductData) == 0x000240, "Wrong size on FPSDKEpicProductData");
static_assert(offsetof(FPSDKEpicProductData, Name) == 0x0000B8, "Member 'FPSDKEpicProductData::Name' has a wrong offset!");
static_assert(offsetof(FPSDKEpicProductData, Desc) == 0x0000D0, "Member 'FPSDKEpicProductData::Desc' has a wrong offset!");
static_assert(offsetof(FPSDKEpicProductData, ID) == 0x0000E8, "Member 'FPSDKEpicProductData::ID' has a wrong offset!");
static_assert(offsetof(FPSDKEpicProductData, price) == 0x000100, "Member 'FPSDKEpicProductData::price' has a wrong offset!");
static_assert(offsetof(FPSDKEpicProductData, currency) == 0x000118, "Member 'FPSDKEpicProductData::currency' has a wrong offset!");
static_assert(offsetof(FPSDKEpicProductData, currency_detail) == 0x000130, "Member 'FPSDKEpicProductData::currency_detail' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKEpicProductInfoResponse
// 0x0038 (0x00F0 - 0x00B8)
struct FPSDKEpicProductInfoResponse final : public FJsonData
{
public:
	int32                                         Ret;                                               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 msg;                                               // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKEpicProductData>           Data;                                              // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKEpicProductInfoResponse) == 0x000008, "Wrong alignment on FPSDKEpicProductInfoResponse");
static_assert(sizeof(FPSDKEpicProductInfoResponse) == 0x0000F0, "Wrong size on FPSDKEpicProductInfoResponse");
static_assert(offsetof(FPSDKEpicProductInfoResponse, Ret) == 0x0000B8, "Member 'FPSDKEpicProductInfoResponse::Ret' has a wrong offset!");
static_assert(offsetof(FPSDKEpicProductInfoResponse, msg) == 0x0000C0, "Member 'FPSDKEpicProductInfoResponse::msg' has a wrong offset!");
static_assert(offsetof(FPSDKEpicProductInfoResponse, Data) == 0x0000D8, "Member 'FPSDKEpicProductInfoResponse::Data' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKEpicCatalogItemDetail
// 0x0048 (0x0048 - 0x0000)
struct FPSDKEpicCatalogItemDetail final
{
public:
	class FString                                 CatalogItemId;                                     // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntitlementName;                                   // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleText;                                         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DescriptionText;                                   // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Consumable;                                        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKEpicCatalogItemDetail) == 0x000008, "Wrong alignment on FPSDKEpicCatalogItemDetail");
static_assert(sizeof(FPSDKEpicCatalogItemDetail) == 0x000048, "Wrong size on FPSDKEpicCatalogItemDetail");
static_assert(offsetof(FPSDKEpicCatalogItemDetail, CatalogItemId) == 0x000000, "Member 'FPSDKEpicCatalogItemDetail::CatalogItemId' has a wrong offset!");
static_assert(offsetof(FPSDKEpicCatalogItemDetail, EntitlementName) == 0x000010, "Member 'FPSDKEpicCatalogItemDetail::EntitlementName' has a wrong offset!");
static_assert(offsetof(FPSDKEpicCatalogItemDetail, TitleText) == 0x000020, "Member 'FPSDKEpicCatalogItemDetail::TitleText' has a wrong offset!");
static_assert(offsetof(FPSDKEpicCatalogItemDetail, DescriptionText) == 0x000030, "Member 'FPSDKEpicCatalogItemDetail::DescriptionText' has a wrong offset!");
static_assert(offsetof(FPSDKEpicCatalogItemDetail, Consumable) == 0x000040, "Member 'FPSDKEpicCatalogItemDetail::Consumable' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKEpicEntitlementDetail
// 0x0040 (0x0040 - 0x0000)
struct FPSDKEpicEntitlementDetail final
{
public:
	class FString                                 EntitlementName;                                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntitlementId;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CatalogItemId;                                     // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferId;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSDKEpicEntitlementDetail) == 0x000008, "Wrong alignment on FPSDKEpicEntitlementDetail");
static_assert(sizeof(FPSDKEpicEntitlementDetail) == 0x000040, "Wrong size on FPSDKEpicEntitlementDetail");
static_assert(offsetof(FPSDKEpicEntitlementDetail, EntitlementName) == 0x000000, "Member 'FPSDKEpicEntitlementDetail::EntitlementName' has a wrong offset!");
static_assert(offsetof(FPSDKEpicEntitlementDetail, EntitlementId) == 0x000010, "Member 'FPSDKEpicEntitlementDetail::EntitlementId' has a wrong offset!");
static_assert(offsetof(FPSDKEpicEntitlementDetail, CatalogItemId) == 0x000020, "Member 'FPSDKEpicEntitlementDetail::CatalogItemId' has a wrong offset!");
static_assert(offsetof(FPSDKEpicEntitlementDetail, OfferId) == 0x000030, "Member 'FPSDKEpicEntitlementDetail::OfferId' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKEpicAccountInfo
// 0x0040 (0x00F8 - 0x00B8)
struct FPSDKEpicAccountInfo final : public FJsonData
{
public:
	bool                                          IsLogined;                                         // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AccessToken;                                       // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JsonWebToken;                                      // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreArea;                                         // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKEpicAccountInfo) == 0x000008, "Wrong alignment on FPSDKEpicAccountInfo");
static_assert(sizeof(FPSDKEpicAccountInfo) == 0x0000F8, "Wrong size on FPSDKEpicAccountInfo");
static_assert(offsetof(FPSDKEpicAccountInfo, IsLogined) == 0x0000B8, "Member 'FPSDKEpicAccountInfo::IsLogined' has a wrong offset!");
static_assert(offsetof(FPSDKEpicAccountInfo, AccessToken) == 0x0000C0, "Member 'FPSDKEpicAccountInfo::AccessToken' has a wrong offset!");
static_assert(offsetof(FPSDKEpicAccountInfo, JsonWebToken) == 0x0000D0, "Member 'FPSDKEpicAccountInfo::JsonWebToken' has a wrong offset!");
static_assert(offsetof(FPSDKEpicAccountInfo, StoreArea) == 0x0000E0, "Member 'FPSDKEpicAccountInfo::StoreArea' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKEpicIPCGetRefreshTokenRequest
// 0x0038 (0x00F0 - 0x00B8)
struct FPSDKEpicIPCGetRefreshTokenRequest final : public FJsonData
{
public:
	class FString                                 Type;                                              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 subtype;                                           // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x4];                                       // 0x00E0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         platformId;                                        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKEpicIPCGetRefreshTokenRequest) == 0x000008, "Wrong alignment on FPSDKEpicIPCGetRefreshTokenRequest");
static_assert(sizeof(FPSDKEpicIPCGetRefreshTokenRequest) == 0x0000F0, "Wrong size on FPSDKEpicIPCGetRefreshTokenRequest");
static_assert(offsetof(FPSDKEpicIPCGetRefreshTokenRequest, Type) == 0x0000B8, "Member 'FPSDKEpicIPCGetRefreshTokenRequest::Type' has a wrong offset!");
static_assert(offsetof(FPSDKEpicIPCGetRefreshTokenRequest, subtype) == 0x0000D0, "Member 'FPSDKEpicIPCGetRefreshTokenRequest::subtype' has a wrong offset!");
static_assert(offsetof(FPSDKEpicIPCGetRefreshTokenRequest, platformId) == 0x0000E4, "Member 'FPSDKEpicIPCGetRefreshTokenRequest::platformId' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKEpicIPCSendRefreshTokenRequest
// 0x0050 (0x0108 - 0x00B8)
struct FPSDKEpicIPCSendRefreshTokenRequest final : public FJsonData
{
public:
	class FString                                 Type;                                              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 subtype;                                           // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x1];                                       // 0x00E0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          internal;                                          // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         platformId;                                        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RefreshToken;                                      // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKEpicIPCSendRefreshTokenRequest) == 0x000008, "Wrong alignment on FPSDKEpicIPCSendRefreshTokenRequest");
static_assert(sizeof(FPSDKEpicIPCSendRefreshTokenRequest) == 0x000108, "Wrong size on FPSDKEpicIPCSendRefreshTokenRequest");
static_assert(offsetof(FPSDKEpicIPCSendRefreshTokenRequest, Type) == 0x0000B8, "Member 'FPSDKEpicIPCSendRefreshTokenRequest::Type' has a wrong offset!");
static_assert(offsetof(FPSDKEpicIPCSendRefreshTokenRequest, subtype) == 0x0000D0, "Member 'FPSDKEpicIPCSendRefreshTokenRequest::subtype' has a wrong offset!");
static_assert(offsetof(FPSDKEpicIPCSendRefreshTokenRequest, internal) == 0x0000E1, "Member 'FPSDKEpicIPCSendRefreshTokenRequest::internal' has a wrong offset!");
static_assert(offsetof(FPSDKEpicIPCSendRefreshTokenRequest, platformId) == 0x0000E4, "Member 'FPSDKEpicIPCSendRefreshTokenRequest::platformId' has a wrong offset!");
static_assert(offsetof(FPSDKEpicIPCSendRefreshTokenRequest, RefreshToken) == 0x0000F0, "Member 'FPSDKEpicIPCSendRefreshTokenRequest::RefreshToken' has a wrong offset!");

// ScriptStruct PSDKChannelEpic.PSDKEpicIPCGetRefreshTokenResponse
// 0x0050 (0x0108 - 0x00B8)
struct FPSDKEpicIPCGetRefreshTokenResponse final : public FJsonData
{
public:
	class FString                                 Type;                                              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 subtype;                                           // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x1];                                       // 0x00E0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          internal;                                          // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         platformId;                                        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RefreshToken;                                      // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKEpicIPCGetRefreshTokenResponse) == 0x000008, "Wrong alignment on FPSDKEpicIPCGetRefreshTokenResponse");
static_assert(sizeof(FPSDKEpicIPCGetRefreshTokenResponse) == 0x000108, "Wrong size on FPSDKEpicIPCGetRefreshTokenResponse");
static_assert(offsetof(FPSDKEpicIPCGetRefreshTokenResponse, Type) == 0x0000B8, "Member 'FPSDKEpicIPCGetRefreshTokenResponse::Type' has a wrong offset!");
static_assert(offsetof(FPSDKEpicIPCGetRefreshTokenResponse, subtype) == 0x0000D0, "Member 'FPSDKEpicIPCGetRefreshTokenResponse::subtype' has a wrong offset!");
static_assert(offsetof(FPSDKEpicIPCGetRefreshTokenResponse, internal) == 0x0000E1, "Member 'FPSDKEpicIPCGetRefreshTokenResponse::internal' has a wrong offset!");
static_assert(offsetof(FPSDKEpicIPCGetRefreshTokenResponse, platformId) == 0x0000E4, "Member 'FPSDKEpicIPCGetRefreshTokenResponse::platformId' has a wrong offset!");
static_assert(offsetof(FPSDKEpicIPCGetRefreshTokenResponse, RefreshToken) == 0x0000F0, "Member 'FPSDKEpicIPCGetRefreshTokenResponse::RefreshToken' has a wrong offset!");

}

