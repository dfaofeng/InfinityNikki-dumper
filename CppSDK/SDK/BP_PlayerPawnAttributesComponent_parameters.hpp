#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerPawnAttributesComponent

#include "Basic.hpp"

#include "EPlayerGamePlayMovementMode_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerPawnAttributesComponent.BP_PlayerPawnAttributesComponent_C.BP_SetPlayerToUsingCarrier
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToUsingCarrier final
{
public:
	class AActor*                                 CarrierActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToUsingCarrier) == 0x000008, "Wrong alignment on BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToUsingCarrier");
static_assert(sizeof(BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToUsingCarrier) == 0x000008, "Wrong size on BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToUsingCarrier");
static_assert(offsetof(BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToUsingCarrier, CarrierActor) == 0x000000, "Member 'BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToUsingCarrier::CarrierActor' has a wrong offset!");

// Function BP_PlayerPawnAttributesComponent.BP_PlayerPawnAttributesComponent_C.BP_SetPlayerToControlActor
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToControlActor final
{
public:
	class AActor*                                 ActorToControl;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToControlActor) == 0x000008, "Wrong alignment on BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToControlActor");
static_assert(sizeof(BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToControlActor) == 0x000008, "Wrong size on BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToControlActor");
static_assert(offsetof(BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToControlActor, ActorToControl) == 0x000000, "Member 'BP_PlayerPawnAttributesComponent_C_BP_SetPlayerToControlActor::ActorToControl' has a wrong offset!");

// Function BP_PlayerPawnAttributesComponent.BP_PlayerPawnAttributesComponent_C.BP_Public_SwitchNikkiGamePlayMovementMode
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode final
{
public:
	EPlayerGamePlayMovementMode                   NewGamePlayMovementMode;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchSucessful;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode) == 0x000001, "Wrong alignment on BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode");
static_assert(sizeof(BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode) == 0x000002, "Wrong size on BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode");
static_assert(offsetof(BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode, NewGamePlayMovementMode) == 0x000000, "Member 'BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode::NewGamePlayMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode, SwitchSucessful) == 0x000001, "Member 'BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode::SwitchSucessful' has a wrong offset!");

// Function BP_PlayerPawnAttributesComponent.BP_PlayerPawnAttributesComponent_C.BP_Public_SwitchCharacterGamePlayInAirMovementMode
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode final
{
public:
	EPlayerGamePlayMovementMode                   NewGamePlayMovementMode;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode) == 0x000001, "Wrong alignment on BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode");
static_assert(sizeof(BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode) == 0x000002, "Wrong size on BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode");
static_assert(offsetof(BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode, NewGamePlayMovementMode) == 0x000000, "Member 'BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode::NewGamePlayMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode, Ret) == 0x000001, "Member 'BP_PlayerPawnAttributesComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode::Ret' has a wrong offset!");

// Function BP_PlayerPawnAttributesComponent.BP_PlayerPawnAttributesComponent_C.BP_Public_ExitGamePlayMovementMode
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayMovementMode final
{
public:
	EPlayerGamePlayMovementMode                   NewGamePlayMovementMode;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchSucessful;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayMovementMode) == 0x000001, "Wrong alignment on BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayMovementMode");
static_assert(sizeof(BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayMovementMode) == 0x000002, "Wrong size on BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayMovementMode");
static_assert(offsetof(BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayMovementMode, NewGamePlayMovementMode) == 0x000000, "Member 'BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayMovementMode::NewGamePlayMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayMovementMode, SwitchSucessful) == 0x000001, "Member 'BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayMovementMode::SwitchSucessful' has a wrong offset!");

// Function BP_PlayerPawnAttributesComponent.BP_PlayerPawnAttributesComponent_C.BP_Public_ExitGamePlayInAirMovementMode
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayInAirMovementMode final
{
public:
	EPlayerGamePlayMovementMode                   NewGamePlayMovementMode;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayInAirMovementMode) == 0x000001, "Wrong alignment on BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayInAirMovementMode");
static_assert(sizeof(BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayInAirMovementMode) == 0x000002, "Wrong size on BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayInAirMovementMode");
static_assert(offsetof(BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayInAirMovementMode, NewGamePlayMovementMode) == 0x000000, "Member 'BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayInAirMovementMode::NewGamePlayMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayInAirMovementMode, Ret) == 0x000001, "Member 'BP_PlayerPawnAttributesComponent_C_BP_Public_ExitGamePlayInAirMovementMode::Ret' has a wrong offset!");

// Function BP_PlayerPawnAttributesComponent.BP_PlayerPawnAttributesComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerPawnAttributesComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerPawnAttributesComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_PlayerPawnAttributesComponent_C_GetModuleName");
static_assert(sizeof(BP_PlayerPawnAttributesComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_PlayerPawnAttributesComponent_C_GetModuleName");
static_assert(offsetof(BP_PlayerPawnAttributesComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_PlayerPawnAttributesComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

