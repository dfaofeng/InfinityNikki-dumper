#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6SplineRoad

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Class X6SplineRoad.X6SplineRoad
// 0x00A8 (0x00D0 - 0x0028)
class UX6SplineRoad final : public UObject
{
public:
	bool                                          bClosedLoop;                                       // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoadWidth;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RoadID;                                            // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               BaseRotation;                                      // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSplineCurves                          SplineCurves;                                      // 0x0050(0x0070)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<int64>                                 RoadNodeArray;                                     // 0x00C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void SetRoadData(int64 ID, const struct FSEMSplineData& InRoadData);

	float GetDistanceAlongSplineAtSplinePoint(int32 PointIndex) const;
	struct FVector GetLocationAtDistanceAlongSpline(float Distance) const;
	struct FVector GetLocationAtSplineInputKey(float InKey) const;
	struct FVector GetLocationAtSplinePoint(int32 PointIndex) const;
	int64 GetRoadID() const;
	int32 GetRoadNodeNum() const;
	const TArray<int64> GetRoadNodes() const;
	float GetSplineLength() const;
	struct FVector GetTangentAtSplineInputKey(float InKey) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6SplineRoad">();
	}
	static class UX6SplineRoad* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6SplineRoad>();
	}
};
static_assert(alignof(UX6SplineRoad) == 0x000008, "Wrong alignment on UX6SplineRoad");
static_assert(sizeof(UX6SplineRoad) == 0x0000D0, "Wrong size on UX6SplineRoad");
static_assert(offsetof(UX6SplineRoad, bClosedLoop) == 0x000028, "Member 'UX6SplineRoad::bClosedLoop' has a wrong offset!");
static_assert(offsetof(UX6SplineRoad, RoadWidth) == 0x00002C, "Member 'UX6SplineRoad::RoadWidth' has a wrong offset!");
static_assert(offsetof(UX6SplineRoad, RoadID) == 0x000030, "Member 'UX6SplineRoad::RoadID' has a wrong offset!");
static_assert(offsetof(UX6SplineRoad, BaseRotation) == 0x000038, "Member 'UX6SplineRoad::BaseRotation' has a wrong offset!");
static_assert(offsetof(UX6SplineRoad, SplineCurves) == 0x000050, "Member 'UX6SplineRoad::SplineCurves' has a wrong offset!");
static_assert(offsetof(UX6SplineRoad, RoadNodeArray) == 0x0000C0, "Member 'UX6SplineRoad::RoadNodeArray' has a wrong offset!");

}

