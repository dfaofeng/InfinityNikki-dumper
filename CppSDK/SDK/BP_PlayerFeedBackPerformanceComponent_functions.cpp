#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerFeedBackPerformanceComponent

#include "Basic.hpp"

#include "BP_PlayerFeedBackPerformanceComponent_classes.hpp"
#include "BP_PlayerFeedBackPerformanceComponent_parameters.hpp"


namespace SDK
{

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_ActionPoint_InterruptActionPoint
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerFeedBackPerformanceComponent_C::BP_ActionPoint_InterruptActionPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "BP_ActionPoint_InterruptActionPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_ActionPoint_PauseActionPoint
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerFeedBackPerformanceComponent_C::BP_ActionPoint_PauseActionPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "BP_ActionPoint_PauseActionPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_ActionPoint_ResumeActionPoint
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerFeedBackPerformanceComponent_C::BP_ActionPoint_ResumeActionPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "BP_ActionPoint_ResumeActionPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_ActionPoint_StartActionPoint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_ActionPoint_TaskAnime_Template_C*InActionPointDA                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  inDuration                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::BP_ActionPoint_StartActionPoint(class UBP_ActionPoint_TaskAnime_Template_C* InActionPointDA, double inDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "BP_ActionPoint_StartActionPoint");

	Params::BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartActionPoint Parms{};

	Parms.InActionPointDA = InActionPointDA;
	Parms.inDuration = inDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_ActionPoint_StartGesture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              InGestureTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bFullBodyGesture                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::BP_ActionPoint_StartGesture(const struct FGameplayTag& InGestureTag, bool bFullBodyGesture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "BP_ActionPoint_StartGesture");

	Params::BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartGesture Parms{};

	Parms.InGestureTag = std::move(InGestureTag);
	Parms.bFullBodyGesture = bFullBodyGesture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_ActionPoint_StartStance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              InStanceTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::BP_ActionPoint_StartStance(const struct FGameplayTag& InStanceTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "BP_ActionPoint_StartStance");

	Params::BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartStance Parms{};

	Parms.InStanceTag = std::move(InStanceTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_ActionPoint_StopActionPoint
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerFeedBackPerformanceComponent_C::BP_ActionPoint_StopActionPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "BP_ActionPoint_StopActionPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_DodgeMoveTo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   TargetDir                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::BP_DodgeMoveTo(const struct FVector& TargetDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "BP_DodgeMoveTo");

	Params::BP_PlayerFeedBackPerformanceComponent_C_BP_DodgeMoveTo Parms{};

	Parms.TargetDir = std::move(TargetDir);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_RequestStartPerformance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              StanceTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::BP_RequestStartPerformance(const struct FGameplayTag& StanceTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "BP_RequestStartPerformance");

	Params::BP_PlayerFeedBackPerformanceComponent_C_BP_RequestStartPerformance Parms{};

	Parms.StanceTag = std::move(StanceTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent");

	Params::BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.GetPendingKillTimeAfterUnbind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Pendingking                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::GetPendingKillTimeAfterUnbind(double* Pendingking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "GetPendingKillTimeAfterUnbind");

	Params::BP_PlayerFeedBackPerformanceComponent_C_GetPendingKillTimeAfterUnbind Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pendingking != nullptr)
		*Pendingking = Parms.Pendingking;
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_PlayerFeedBackPerformanceComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "ReceiveEndPlay");

	Params::BP_PlayerFeedBackPerformanceComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "ReceiveTick");

	Params::BP_PlayerFeedBackPerformanceComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.RequestStartGesture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              GestureTag                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bFullBodyGesture                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::RequestStartGesture(const struct FGameplayTag& GestureTag, bool bFullBodyGesture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "RequestStartGesture");

	Params::BP_PlayerFeedBackPerformanceComponent_C_RequestStartGesture Parms{};

	Parms.GestureTag = std::move(GestureTag);
	Parms.bFullBodyGesture = bFullBodyGesture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.RequestStopGesture
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerFeedBackPerformanceComponent_C::RequestStopGesture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "RequestStopGesture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.RequestStopPerformance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIgnoreCollision                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFastTransition                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::RequestStopPerformance(bool bIgnoreCollision, bool bFastTransition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "RequestStopPerformance");

	Params::BP_PlayerFeedBackPerformanceComponent_C_RequestStopPerformance Parms{};

	Parms.bIgnoreCollision = bIgnoreCollision;
	Parms.bFastTransition = bFastTransition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.SetActorPushPlayerEnable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::SetActorPushPlayerEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "SetActorPushPlayerEnable");

	Params::BP_PlayerFeedBackPerformanceComponent_C_SetActorPushPlayerEnable Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.TraceGroundDistance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerFeedBackPerformanceComponent_C::TraceGroundDistance(double* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "TraceGroundDistance");

	Params::BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.UpdatePositionShadowWithoutCapture
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerFeedBackPerformanceComponent_C::UpdatePositionShadowWithoutCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "UpdatePositionShadowWithoutCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_PlayerFeedBackPerformanceComponent_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerFeedBackPerformanceComponent_C", "GetModuleName");

	Params::BP_PlayerFeedBackPerformanceComponent_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

