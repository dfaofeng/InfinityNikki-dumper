#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Nikki_HandIK_CtrlRig

#include "Basic.hpp"

#include "ControlRig_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass Nikki_HandIK_CtrlRig.Nikki_HandIK_CtrlRig_C
// 0x0100 (0x0BA8 - 0x0AA8)
class UNikki_HandIK_CtrlRig_C final : public UControlRig
{
public:
	bool                                          isOffset_L_Hand_IK_Position;                       // 0x0AA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA9[0x7];                                      // 0x0AA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset_L_Hand_IK_Position;                         // 0x0AB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isOffset_R_Hand_IK_Position;                       // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC9[0x7];                                      // 0x0AC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset_R_Hand_IK_Position;                         // 0x0AD0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isOffset_L_Hand_IK_Rotation;                       // 0x0AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE9[0x7];                                      // 0x0AE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Offset_L_Hand_IK_Rotation;                         // 0x0AF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          isOffset_R_Hand_IK_Rotation;                       // 0x0B08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B09[0x7];                                      // 0x0B09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Offset_R_Hand_IK_Rotation;                         // 0x0B10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          isLock_L_Hand_IK_Position;                         // 0x0B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B29[0x7];                                      // 0x0B29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Lock_L_Hand_IK_Position;                           // 0x0B30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isLock_L_Hand_IK_Rotation;                         // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B49[0x7];                                      // 0x0B49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Lock_L_Hand_IK_Rotation;                           // 0x0B50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          isLock_R_Hand_IK_Position;                         // 0x0B68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B69[0x7];                                      // 0x0B69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Lock_R_Hand_IK_Position;                           // 0x0B70(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isLock_R_Hand_IK_Rotation;                         // 0x0B88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B89[0x7];                                      // 0x0B89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Lock_R_Hand_IK_Rotation;                           // 0x0B90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Nikki_HandIK_CtrlRig_C">();
	}
	static class UNikki_HandIK_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNikki_HandIK_CtrlRig_C>();
	}
};
static_assert(alignof(UNikki_HandIK_CtrlRig_C) == 0x000008, "Wrong alignment on UNikki_HandIK_CtrlRig_C");
static_assert(sizeof(UNikki_HandIK_CtrlRig_C) == 0x000BA8, "Wrong size on UNikki_HandIK_CtrlRig_C");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, isOffset_L_Hand_IK_Position) == 0x000AA8, "Member 'UNikki_HandIK_CtrlRig_C::isOffset_L_Hand_IK_Position' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, Offset_L_Hand_IK_Position) == 0x000AB0, "Member 'UNikki_HandIK_CtrlRig_C::Offset_L_Hand_IK_Position' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, isOffset_R_Hand_IK_Position) == 0x000AC8, "Member 'UNikki_HandIK_CtrlRig_C::isOffset_R_Hand_IK_Position' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, Offset_R_Hand_IK_Position) == 0x000AD0, "Member 'UNikki_HandIK_CtrlRig_C::Offset_R_Hand_IK_Position' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, isOffset_L_Hand_IK_Rotation) == 0x000AE8, "Member 'UNikki_HandIK_CtrlRig_C::isOffset_L_Hand_IK_Rotation' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, Offset_L_Hand_IK_Rotation) == 0x000AF0, "Member 'UNikki_HandIK_CtrlRig_C::Offset_L_Hand_IK_Rotation' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, isOffset_R_Hand_IK_Rotation) == 0x000B08, "Member 'UNikki_HandIK_CtrlRig_C::isOffset_R_Hand_IK_Rotation' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, Offset_R_Hand_IK_Rotation) == 0x000B10, "Member 'UNikki_HandIK_CtrlRig_C::Offset_R_Hand_IK_Rotation' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, isLock_L_Hand_IK_Position) == 0x000B28, "Member 'UNikki_HandIK_CtrlRig_C::isLock_L_Hand_IK_Position' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, Lock_L_Hand_IK_Position) == 0x000B30, "Member 'UNikki_HandIK_CtrlRig_C::Lock_L_Hand_IK_Position' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, isLock_L_Hand_IK_Rotation) == 0x000B48, "Member 'UNikki_HandIK_CtrlRig_C::isLock_L_Hand_IK_Rotation' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, Lock_L_Hand_IK_Rotation) == 0x000B50, "Member 'UNikki_HandIK_CtrlRig_C::Lock_L_Hand_IK_Rotation' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, isLock_R_Hand_IK_Position) == 0x000B68, "Member 'UNikki_HandIK_CtrlRig_C::isLock_R_Hand_IK_Position' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, Lock_R_Hand_IK_Position) == 0x000B70, "Member 'UNikki_HandIK_CtrlRig_C::Lock_R_Hand_IK_Position' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, isLock_R_Hand_IK_Rotation) == 0x000B88, "Member 'UNikki_HandIK_CtrlRig_C::isLock_R_Hand_IK_Rotation' has a wrong offset!");
static_assert(offsetof(UNikki_HandIK_CtrlRig_C, Lock_R_Hand_IK_Rotation) == 0x000B90, "Member 'UNikki_HandIK_CtrlRig_C::Lock_R_Hand_IK_Rotation' has a wrong offset!");

}

