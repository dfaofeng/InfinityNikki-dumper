#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EasyFog

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EasyFog.BP_EasyFog_C
// 0x00A8 (0x0450 - 0x03A8)
class ABP_EasyFog_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   FogCard;                                           // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Base_Color_Map;                                    // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Opacity_Map;                                       // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Fog_Material_Instance;                             // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Base_Color_Tint;                                   // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         BaseColorContrast;                                 // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Base_Color_Intensity;                              // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Emissive_Intensity;                                // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Normal_Map_Intensity;                              // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Density;                                       // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         _ShadowOffset_;                                    // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _ShadowExp_;                                       // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RImLightInt;                                       // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RimLightFalloff;                                   // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Geometry_Fading_Distance;                          // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Camera_Fading_Distance;                            // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         No;                                                // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Speed_Y;                                      // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Speed_X;                                      // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         FadeDistanceOffset;                                // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         View_Angle_Fade;                                   // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Noise_Tiling;                                 // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Noise_Contrast;                               // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     BillboardMat;                                      // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FacingCamera;                                      // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlipX;                                             // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlipY;                                             // 0x043A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotate;                                            // 0x043B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewCullDistance;                                   // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDetailMode                                   InDetailMode;                                      // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MobileForceEnable;                                 // 0x0441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_442[0x6];                                      // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Source_Material;                                   // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_EasyFog(int32 EntryPoint);
	void GetFogMaterialInstance(class UMaterialInstanceDynamic** FogMaterial);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EasyFog_C">();
	}
	static class ABP_EasyFog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EasyFog_C>();
	}
};
static_assert(alignof(ABP_EasyFog_C) == 0x000008, "Wrong alignment on ABP_EasyFog_C");
static_assert(sizeof(ABP_EasyFog_C) == 0x000450, "Wrong size on ABP_EasyFog_C");
static_assert(offsetof(ABP_EasyFog_C, UberGraphFrame) == 0x0003A8, "Member 'ABP_EasyFog_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, FogCard) == 0x0003B0, "Member 'ABP_EasyFog_C::FogCard' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, DefaultSceneRoot) == 0x0003B8, "Member 'ABP_EasyFog_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Base_Color_Map) == 0x0003C0, "Member 'ABP_EasyFog_C::Base_Color_Map' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Opacity_Map) == 0x0003C8, "Member 'ABP_EasyFog_C::Opacity_Map' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Fog_Material_Instance) == 0x0003D0, "Member 'ABP_EasyFog_C::Fog_Material_Instance' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Base_Color_Tint) == 0x0003D8, "Member 'ABP_EasyFog_C::Base_Color_Tint' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, BaseColorContrast) == 0x0003E8, "Member 'ABP_EasyFog_C::BaseColorContrast' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Base_Color_Intensity) == 0x0003EC, "Member 'ABP_EasyFog_C::Base_Color_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Emissive_Intensity) == 0x0003F0, "Member 'ABP_EasyFog_C::Emissive_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Normal_Map_Intensity) == 0x0003F4, "Member 'ABP_EasyFog_C::Normal_Map_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Fog_Density) == 0x0003F8, "Member 'ABP_EasyFog_C::Fog_Density' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, _ShadowOffset_) == 0x0003FC, "Member 'ABP_EasyFog_C::_ShadowOffset_' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, _ShadowExp_) == 0x000400, "Member 'ABP_EasyFog_C::_ShadowExp_' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, RImLightInt) == 0x000404, "Member 'ABP_EasyFog_C::RImLightInt' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, RimLightFalloff) == 0x000408, "Member 'ABP_EasyFog_C::RimLightFalloff' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Geometry_Fading_Distance) == 0x00040C, "Member 'ABP_EasyFog_C::Geometry_Fading_Distance' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Camera_Fading_Distance) == 0x000410, "Member 'ABP_EasyFog_C::Camera_Fading_Distance' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, No) == 0x000414, "Member 'ABP_EasyFog_C::No' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Wind_Speed_Y) == 0x000418, "Member 'ABP_EasyFog_C::Wind_Speed_Y' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Wind_Speed_X) == 0x00041C, "Member 'ABP_EasyFog_C::Wind_Speed_X' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, FadeDistanceOffset) == 0x000420, "Member 'ABP_EasyFog_C::FadeDistanceOffset' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, View_Angle_Fade) == 0x000424, "Member 'ABP_EasyFog_C::View_Angle_Fade' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Wind_Noise_Tiling) == 0x000428, "Member 'ABP_EasyFog_C::Wind_Noise_Tiling' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Wind_Noise_Contrast) == 0x00042C, "Member 'ABP_EasyFog_C::Wind_Noise_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, BillboardMat) == 0x000430, "Member 'ABP_EasyFog_C::BillboardMat' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, FacingCamera) == 0x000438, "Member 'ABP_EasyFog_C::FacingCamera' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, FlipX) == 0x000439, "Member 'ABP_EasyFog_C::FlipX' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, FlipY) == 0x00043A, "Member 'ABP_EasyFog_C::FlipY' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Rotate) == 0x00043B, "Member 'ABP_EasyFog_C::Rotate' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, NewCullDistance) == 0x00043C, "Member 'ABP_EasyFog_C::NewCullDistance' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, InDetailMode) == 0x000440, "Member 'ABP_EasyFog_C::InDetailMode' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, MobileForceEnable) == 0x000441, "Member 'ABP_EasyFog_C::MobileForceEnable' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Source_Material) == 0x000448, "Member 'ABP_EasyFog_C::Source_Material' has a wrong offset!");

}

