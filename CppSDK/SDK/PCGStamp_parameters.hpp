#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PCGStamp

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PCGStamp.PCGStampBlueprintLibrary.AddInstancedComponent
// 0x0010 (0x0010 - 0x0000)
struct PCGStampBlueprintLibrary_AddInstancedComponent final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGStampBlueprintLibrary_AddInstancedComponent) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_AddInstancedComponent");
static_assert(sizeof(PCGStampBlueprintLibrary_AddInstancedComponent) == 0x000010, "Wrong size on PCGStampBlueprintLibrary_AddInstancedComponent");
static_assert(offsetof(PCGStampBlueprintLibrary_AddInstancedComponent, Component) == 0x000000, "Member 'PCGStampBlueprintLibrary_AddInstancedComponent::Component' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_AddInstancedComponent, ReturnValue) == 0x000008, "Member 'PCGStampBlueprintLibrary_AddInstancedComponent::ReturnValue' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.AddProceduralMesh
// 0x0028 (0x0028 - 0x0000)
struct PCGStampBlueprintLibrary_AddProceduralMesh final
{
public:
	class UProceduralMeshComponent*               proceduraMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      polygonPoints;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseHeight;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCollision;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGStampBlueprintLibrary_AddProceduralMesh) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_AddProceduralMesh");
static_assert(sizeof(PCGStampBlueprintLibrary_AddProceduralMesh) == 0x000028, "Wrong size on PCGStampBlueprintLibrary_AddProceduralMesh");
static_assert(offsetof(PCGStampBlueprintLibrary_AddProceduralMesh, proceduraMesh) == 0x000000, "Member 'PCGStampBlueprintLibrary_AddProceduralMesh::proceduraMesh' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_AddProceduralMesh, polygonPoints) == 0x000008, "Member 'PCGStampBlueprintLibrary_AddProceduralMesh::polygonPoints' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_AddProceduralMesh, Height) == 0x000018, "Member 'PCGStampBlueprintLibrary_AddProceduralMesh::Height' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_AddProceduralMesh, BaseHeight) == 0x00001C, "Member 'PCGStampBlueprintLibrary_AddProceduralMesh::BaseHeight' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_AddProceduralMesh, bEnableCollision) == 0x000020, "Member 'PCGStampBlueprintLibrary_AddProceduralMesh::bEnableCollision' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.AddToBrush
// 0x0020 (0x0020 - 0x0000)
struct PCGStampBlueprintLibrary_AddToBrush final
{
public:
	class ABrush*                                 Brush;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      polygonPoints;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseHeight;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_AddToBrush) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_AddToBrush");
static_assert(sizeof(PCGStampBlueprintLibrary_AddToBrush) == 0x000020, "Wrong size on PCGStampBlueprintLibrary_AddToBrush");
static_assert(offsetof(PCGStampBlueprintLibrary_AddToBrush, Brush) == 0x000000, "Member 'PCGStampBlueprintLibrary_AddToBrush::Brush' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_AddToBrush, polygonPoints) == 0x000008, "Member 'PCGStampBlueprintLibrary_AddToBrush::polygonPoints' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_AddToBrush, Height) == 0x000018, "Member 'PCGStampBlueprintLibrary_AddToBrush::Height' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_AddToBrush, BaseHeight) == 0x00001C, "Member 'PCGStampBlueprintLibrary_AddToBrush::BaseHeight' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.BuildProceduralMeshFromSpline
// 0x0028 (0x0028 - 0x0000)
struct PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildMeshStep;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OffsetRange;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProceduralMeshComponent*               ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline");
static_assert(sizeof(PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline) == 0x000028, "Wrong size on PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline");
static_assert(offsetof(PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline, Spline) == 0x000000, "Member 'PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline::Spline' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline, BuildMeshStep) == 0x000008, "Member 'PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline::BuildMeshStep' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline, OffsetRange) == 0x000010, "Member 'PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline::OffsetRange' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline, ReturnValue) == 0x000020, "Member 'PCGStampBlueprintLibrary_BuildProceduralMeshFromSpline::ReturnValue' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.CheckInside
// 0x0068 (0x0068 - 0x0000)
struct PCGStampBlueprintLibrary_CheckInside final
{
public:
	struct FVector                                V;                                                 // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                v0;                                                // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                v1;                                                // 0x0030(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                v2;                                                // 0x0048(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGStampBlueprintLibrary_CheckInside) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_CheckInside");
static_assert(sizeof(PCGStampBlueprintLibrary_CheckInside) == 0x000068, "Wrong size on PCGStampBlueprintLibrary_CheckInside");
static_assert(offsetof(PCGStampBlueprintLibrary_CheckInside, V) == 0x000000, "Member 'PCGStampBlueprintLibrary_CheckInside::V' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_CheckInside, v0) == 0x000018, "Member 'PCGStampBlueprintLibrary_CheckInside::v0' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_CheckInside, v1) == 0x000030, "Member 'PCGStampBlueprintLibrary_CheckInside::v1' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_CheckInside, v2) == 0x000048, "Member 'PCGStampBlueprintLibrary_CheckInside::v2' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_CheckInside, ReturnValue) == 0x000060, "Member 'PCGStampBlueprintLibrary_CheckInside::ReturnValue' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.CheckInside2D
// 0x0048 (0x0048 - 0x0000)
struct PCGStampBlueprintLibrary_CheckInside2D final
{
public:
	struct FVector2D                              Point;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              A;                                                 // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              B;                                                 // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              C;                                                 // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGStampBlueprintLibrary_CheckInside2D) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_CheckInside2D");
static_assert(sizeof(PCGStampBlueprintLibrary_CheckInside2D) == 0x000048, "Wrong size on PCGStampBlueprintLibrary_CheckInside2D");
static_assert(offsetof(PCGStampBlueprintLibrary_CheckInside2D, Point) == 0x000000, "Member 'PCGStampBlueprintLibrary_CheckInside2D::Point' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_CheckInside2D, A) == 0x000010, "Member 'PCGStampBlueprintLibrary_CheckInside2D::A' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_CheckInside2D, B) == 0x000020, "Member 'PCGStampBlueprintLibrary_CheckInside2D::B' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_CheckInside2D, C) == 0x000030, "Member 'PCGStampBlueprintLibrary_CheckInside2D::C' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_CheckInside2D, ReturnValue) == 0x000040, "Member 'PCGStampBlueprintLibrary_CheckInside2D::ReturnValue' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.EditorSelectorActorsTo
// 0x0010 (0x0010 - 0x0000)
struct PCGStampBlueprintLibrary_EditorSelectorActorsTo final
{
public:
	TArray<class AActor*>                         InActors;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_EditorSelectorActorsTo) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_EditorSelectorActorsTo");
static_assert(sizeof(PCGStampBlueprintLibrary_EditorSelectorActorsTo) == 0x000010, "Wrong size on PCGStampBlueprintLibrary_EditorSelectorActorsTo");
static_assert(offsetof(PCGStampBlueprintLibrary_EditorSelectorActorsTo, InActors) == 0x000000, "Member 'PCGStampBlueprintLibrary_EditorSelectorActorsTo::InActors' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.EditorSelectorActorTo
// 0x0008 (0x0008 - 0x0000)
struct PCGStampBlueprintLibrary_EditorSelectorActorTo final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_EditorSelectorActorTo) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_EditorSelectorActorTo");
static_assert(sizeof(PCGStampBlueprintLibrary_EditorSelectorActorTo) == 0x000008, "Wrong size on PCGStampBlueprintLibrary_EditorSelectorActorTo");
static_assert(offsetof(PCGStampBlueprintLibrary_EditorSelectorActorTo, InActor) == 0x000000, "Member 'PCGStampBlueprintLibrary_EditorSelectorActorTo::InActor' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.EditorSelectorComponentTo
// 0x0008 (0x0008 - 0x0000)
struct PCGStampBlueprintLibrary_EditorSelectorComponentTo final
{
public:
	class UActorComponent*                        InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_EditorSelectorComponentTo) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_EditorSelectorComponentTo");
static_assert(sizeof(PCGStampBlueprintLibrary_EditorSelectorComponentTo) == 0x000008, "Wrong size on PCGStampBlueprintLibrary_EditorSelectorComponentTo");
static_assert(offsetof(PCGStampBlueprintLibrary_EditorSelectorComponentTo, InComponent) == 0x000000, "Member 'PCGStampBlueprintLibrary_EditorSelectorComponentTo::InComponent' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.GetMeshTransfromFrom2DPoint
// 0x0090 (0x0090 - 0x0000)
struct PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint final
{
public:
	class UStaticMesh*                            mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      polygonPoints;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTransform;                                      // 0x0020(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         FrontDirect;                                       // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBack;                                             // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0xD];                                       // 0x0083(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint) == 0x000010, "Wrong alignment on PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint");
static_assert(sizeof(PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint) == 0x000090, "Wrong size on PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint");
static_assert(offsetof(PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint, mesh) == 0x000000, "Member 'PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint::mesh' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint, polygonPoints) == 0x000008, "Member 'PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint::polygonPoints' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint, OutTransform) == 0x000020, "Member 'PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint::OutTransform' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint, FrontDirect) == 0x000080, "Member 'PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint::FrontDirect' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint, bBack) == 0x000081, "Member 'PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint::bBack' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint, ReturnValue) == 0x000082, "Member 'PCGStampBlueprintLibrary_GetMeshTransfromFrom2DPoint::ReturnValue' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.GetNextPositionAlongSpline
// 0x0060 (0x0060 - 0x0000)
struct PCGStampBlueprintLibrary_GetNextPositionAlongSpline final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      CheckPolygon;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         LastDistance;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        NewSizes;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      OutPosition;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OutIdx;                                            // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Step;                                              // 0x0044(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProceduralMeshComponent*               proceduralMesh;                                    // 0x0050(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_GetNextPositionAlongSpline");
static_assert(sizeof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline) == 0x000060, "Wrong size on PCGStampBlueprintLibrary_GetNextPositionAlongSpline");
static_assert(offsetof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline, Spline) == 0x000000, "Member 'PCGStampBlueprintLibrary_GetNextPositionAlongSpline::Spline' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline, CheckPolygon) == 0x000008, "Member 'PCGStampBlueprintLibrary_GetNextPositionAlongSpline::CheckPolygon' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline, LastDistance) == 0x000018, "Member 'PCGStampBlueprintLibrary_GetNextPositionAlongSpline::LastDistance' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline, NewSizes) == 0x000020, "Member 'PCGStampBlueprintLibrary_GetNextPositionAlongSpline::NewSizes' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline, OutPosition) == 0x000030, "Member 'PCGStampBlueprintLibrary_GetNextPositionAlongSpline::OutPosition' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline, OutIdx) == 0x000040, "Member 'PCGStampBlueprintLibrary_GetNextPositionAlongSpline::OutIdx' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline, Step) == 0x000044, "Member 'PCGStampBlueprintLibrary_GetNextPositionAlongSpline::Step' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline, OutDistance) == 0x000048, "Member 'PCGStampBlueprintLibrary_GetNextPositionAlongSpline::OutDistance' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline, proceduralMesh) == 0x000050, "Member 'PCGStampBlueprintLibrary_GetNextPositionAlongSpline::proceduralMesh' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetNextPositionAlongSpline, ReturnValue) == 0x000058, "Member 'PCGStampBlueprintLibrary_GetNextPositionAlongSpline::ReturnValue' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.GetSplineArea
// 0x0040 (0x0040 - 0x0000)
struct PCGStampBlueprintLibrary_GetSplineArea final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      InsideCells;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              StartPoint;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CellSize;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveStep;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_GetSplineArea) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_GetSplineArea");
static_assert(sizeof(PCGStampBlueprintLibrary_GetSplineArea) == 0x000040, "Wrong size on PCGStampBlueprintLibrary_GetSplineArea");
static_assert(offsetof(PCGStampBlueprintLibrary_GetSplineArea, Spline) == 0x000000, "Member 'PCGStampBlueprintLibrary_GetSplineArea::Spline' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetSplineArea, InsideCells) == 0x000008, "Member 'PCGStampBlueprintLibrary_GetSplineArea::InsideCells' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetSplineArea, StartPoint) == 0x000018, "Member 'PCGStampBlueprintLibrary_GetSplineArea::StartPoint' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetSplineArea, CellSize) == 0x000028, "Member 'PCGStampBlueprintLibrary_GetSplineArea::CellSize' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetSplineArea, CurveStep) == 0x000038, "Member 'PCGStampBlueprintLibrary_GetSplineArea::CurveStep' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_GetSplineArea, ReturnValue) == 0x00003C, "Member 'PCGStampBlueprintLibrary_GetSplineArea::ReturnValue' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.SelectSplineAreaObjects
// 0x0020 (0x0020 - 0x0000)
struct PCGStampBlueprintLibrary_SelectSplineAreaObjects final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FilterKeys;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         MinSize;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveStep;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_SelectSplineAreaObjects) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_SelectSplineAreaObjects");
static_assert(sizeof(PCGStampBlueprintLibrary_SelectSplineAreaObjects) == 0x000020, "Wrong size on PCGStampBlueprintLibrary_SelectSplineAreaObjects");
static_assert(offsetof(PCGStampBlueprintLibrary_SelectSplineAreaObjects, Spline) == 0x000000, "Member 'PCGStampBlueprintLibrary_SelectSplineAreaObjects::Spline' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SelectSplineAreaObjects, FilterKeys) == 0x000008, "Member 'PCGStampBlueprintLibrary_SelectSplineAreaObjects::FilterKeys' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SelectSplineAreaObjects, MinSize) == 0x000018, "Member 'PCGStampBlueprintLibrary_SelectSplineAreaObjects::MinSize' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SelectSplineAreaObjects, CurveStep) == 0x00001C, "Member 'PCGStampBlueprintLibrary_SelectSplineAreaObjects::CurveStep' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.SetBuildingProceduralMesh
// 0x0028 (0x0028 - 0x0000)
struct PCGStampBlueprintLibrary_SetBuildingProceduralMesh final
{
public:
	class UProceduralMeshComponent*               proceduraMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      polygonPoints;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseHeight;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCollision;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGStampBlueprintLibrary_SetBuildingProceduralMesh) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_SetBuildingProceduralMesh");
static_assert(sizeof(PCGStampBlueprintLibrary_SetBuildingProceduralMesh) == 0x000028, "Wrong size on PCGStampBlueprintLibrary_SetBuildingProceduralMesh");
static_assert(offsetof(PCGStampBlueprintLibrary_SetBuildingProceduralMesh, proceduraMesh) == 0x000000, "Member 'PCGStampBlueprintLibrary_SetBuildingProceduralMesh::proceduraMesh' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SetBuildingProceduralMesh, polygonPoints) == 0x000008, "Member 'PCGStampBlueprintLibrary_SetBuildingProceduralMesh::polygonPoints' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SetBuildingProceduralMesh, Height) == 0x000018, "Member 'PCGStampBlueprintLibrary_SetBuildingProceduralMesh::Height' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SetBuildingProceduralMesh, BaseHeight) == 0x00001C, "Member 'PCGStampBlueprintLibrary_SetBuildingProceduralMesh::BaseHeight' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SetBuildingProceduralMesh, bEnableCollision) == 0x000020, "Member 'PCGStampBlueprintLibrary_SetBuildingProceduralMesh::bEnableCollision' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.SpawnActorFromAsset
// 0x0080 (0x0080 - 0x0000)
struct PCGStampBlueprintLibrary_SpawnActorFromAsset final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                PrefabAsset;                                       // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_SpawnActorFromAsset) == 0x000010, "Wrong alignment on PCGStampBlueprintLibrary_SpawnActorFromAsset");
static_assert(sizeof(PCGStampBlueprintLibrary_SpawnActorFromAsset) == 0x000080, "Wrong size on PCGStampBlueprintLibrary_SpawnActorFromAsset");
static_assert(offsetof(PCGStampBlueprintLibrary_SpawnActorFromAsset, WorldContextObject) == 0x000000, "Member 'PCGStampBlueprintLibrary_SpawnActorFromAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SpawnActorFromAsset, Transform) == 0x000010, "Member 'PCGStampBlueprintLibrary_SpawnActorFromAsset::Transform' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SpawnActorFromAsset, PrefabAsset) == 0x000070, "Member 'PCGStampBlueprintLibrary_SpawnActorFromAsset::PrefabAsset' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SpawnActorFromAsset, ReturnValue) == 0x000078, "Member 'PCGStampBlueprintLibrary_SpawnActorFromAsset::ReturnValue' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.SplineToProceduralMesh
// 0x0018 (0x0018 - 0x0000)
struct PCGStampBlueprintLibrary_SplineToProceduralMesh final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildMeshStep;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProceduralMeshComponent*               ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_SplineToProceduralMesh) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_SplineToProceduralMesh");
static_assert(sizeof(PCGStampBlueprintLibrary_SplineToProceduralMesh) == 0x000018, "Wrong size on PCGStampBlueprintLibrary_SplineToProceduralMesh");
static_assert(offsetof(PCGStampBlueprintLibrary_SplineToProceduralMesh, Spline) == 0x000000, "Member 'PCGStampBlueprintLibrary_SplineToProceduralMesh::Spline' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SplineToProceduralMesh, BuildMeshStep) == 0x000008, "Member 'PCGStampBlueprintLibrary_SplineToProceduralMesh::BuildMeshStep' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SplineToProceduralMesh, ReturnValue) == 0x000010, "Member 'PCGStampBlueprintLibrary_SplineToProceduralMesh::ReturnValue' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.SplineToProceduralMeshWithHeight
// 0x0020 (0x0020 - 0x0000)
struct PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight final
{
public:
	class UProceduralMeshComponent*               proceduraMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildMeshStep;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProceduralMeshComponent*               ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight");
static_assert(sizeof(PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight) == 0x000020, "Wrong size on PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight");
static_assert(offsetof(PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight, proceduraMesh) == 0x000000, "Member 'PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight::proceduraMesh' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight, Spline) == 0x000008, "Member 'PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight::Spline' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight, BuildMeshStep) == 0x000010, "Member 'PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight::BuildMeshStep' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight, Height) == 0x000014, "Member 'PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight::Height' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight, ReturnValue) == 0x000018, "Member 'PCGStampBlueprintLibrary_SplineToProceduralMeshWithHeight::ReturnValue' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.TryGetSubBoxes
// 0x0048 (0x0048 - 0x0000)
struct PCGStampBlueprintLibrary_TryGetSubBoxes final
{
public:
	struct FVector2D                              BaseSize;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      SubSize;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         MaxDisFromEdge;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDisFromOthers;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSubCount;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTryTimes;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanRotateSubSize;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBox2D>                         ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_TryGetSubBoxes) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_TryGetSubBoxes");
static_assert(sizeof(PCGStampBlueprintLibrary_TryGetSubBoxes) == 0x000048, "Wrong size on PCGStampBlueprintLibrary_TryGetSubBoxes");
static_assert(offsetof(PCGStampBlueprintLibrary_TryGetSubBoxes, BaseSize) == 0x000000, "Member 'PCGStampBlueprintLibrary_TryGetSubBoxes::BaseSize' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_TryGetSubBoxes, SubSize) == 0x000010, "Member 'PCGStampBlueprintLibrary_TryGetSubBoxes::SubSize' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_TryGetSubBoxes, MaxDisFromEdge) == 0x000020, "Member 'PCGStampBlueprintLibrary_TryGetSubBoxes::MaxDisFromEdge' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_TryGetSubBoxes, MinDisFromOthers) == 0x000024, "Member 'PCGStampBlueprintLibrary_TryGetSubBoxes::MinDisFromOthers' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_TryGetSubBoxes, MaxSubCount) == 0x000028, "Member 'PCGStampBlueprintLibrary_TryGetSubBoxes::MaxSubCount' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_TryGetSubBoxes, MaxTryTimes) == 0x00002C, "Member 'PCGStampBlueprintLibrary_TryGetSubBoxes::MaxTryTimes' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_TryGetSubBoxes, bCanRotateSubSize) == 0x000030, "Member 'PCGStampBlueprintLibrary_TryGetSubBoxes::bCanRotateSubSize' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_TryGetSubBoxes, ReturnValue) == 0x000038, "Member 'PCGStampBlueprintLibrary_TryGetSubBoxes::ReturnValue' has a wrong offset!");

// Function PCGStamp.PCGStampBlueprintLibrary.TryReArrangeTransform
// 0x0040 (0x0040 - 0x0000)
struct PCGStampBlueprintLibrary_TryReArrangeTransform final
{
public:
	TArray<struct FTransform>                     InOutArray;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Dis;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox2D                                 Range;                                             // 0x0018(0x0028)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStampBlueprintLibrary_TryReArrangeTransform) == 0x000008, "Wrong alignment on PCGStampBlueprintLibrary_TryReArrangeTransform");
static_assert(sizeof(PCGStampBlueprintLibrary_TryReArrangeTransform) == 0x000040, "Wrong size on PCGStampBlueprintLibrary_TryReArrangeTransform");
static_assert(offsetof(PCGStampBlueprintLibrary_TryReArrangeTransform, InOutArray) == 0x000000, "Member 'PCGStampBlueprintLibrary_TryReArrangeTransform::InOutArray' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_TryReArrangeTransform, Dis) == 0x000010, "Member 'PCGStampBlueprintLibrary_TryReArrangeTransform::Dis' has a wrong offset!");
static_assert(offsetof(PCGStampBlueprintLibrary_TryReArrangeTransform, Range) == 0x000018, "Member 'PCGStampBlueprintLibrary_TryReArrangeTransform::Range' has a wrong offset!");

}

