#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NikkiFitCloth

#include "Basic.hpp"

#include "NikkiFitCloth_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function NikkiFitCloth.MatchTwoClothEvent.CheckPrebuildClothData
// 0x0018 (0x0018 - 0x0000)
struct MatchTwoClothEvent_CheckPrebuildClothData final
{
public:
	class USkeletalMesh*                          ClothSkelMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          BodySkelMesh;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchTwoClothEvent_CheckPrebuildClothData) == 0x000008, "Wrong alignment on MatchTwoClothEvent_CheckPrebuildClothData");
static_assert(sizeof(MatchTwoClothEvent_CheckPrebuildClothData) == 0x000018, "Wrong size on MatchTwoClothEvent_CheckPrebuildClothData");
static_assert(offsetof(MatchTwoClothEvent_CheckPrebuildClothData, ClothSkelMesh) == 0x000000, "Member 'MatchTwoClothEvent_CheckPrebuildClothData::ClothSkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_CheckPrebuildClothData, BodySkelMesh) == 0x000008, "Member 'MatchTwoClothEvent_CheckPrebuildClothData::BodySkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_CheckPrebuildClothData, ReturnValue) == 0x000010, "Member 'MatchTwoClothEvent_CheckPrebuildClothData::ReturnValue' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.CheckSkeletalMeshBone
// 0x0010 (0x0010 - 0x0000)
struct MatchTwoClothEvent_CheckSkeletalMeshBone final
{
public:
	const class USkeletalMesh*                    SkeletalMesh;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchTwoClothEvent_CheckSkeletalMeshBone) == 0x000008, "Wrong alignment on MatchTwoClothEvent_CheckSkeletalMeshBone");
static_assert(sizeof(MatchTwoClothEvent_CheckSkeletalMeshBone) == 0x000010, "Wrong size on MatchTwoClothEvent_CheckSkeletalMeshBone");
static_assert(offsetof(MatchTwoClothEvent_CheckSkeletalMeshBone, SkeletalMesh) == 0x000000, "Member 'MatchTwoClothEvent_CheckSkeletalMeshBone::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_CheckSkeletalMeshBone, ReturnValue) == 0x000008, "Member 'MatchTwoClothEvent_CheckSkeletalMeshBone::ReturnValue' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.ClearPrebuildClothData
// 0x0008 (0x0008 - 0x0000)
struct MatchTwoClothEvent_ClearPrebuildClothData final
{
public:
	class USkeletalMesh*                          ClothSkelMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_ClearPrebuildClothData) == 0x000008, "Wrong alignment on MatchTwoClothEvent_ClearPrebuildClothData");
static_assert(sizeof(MatchTwoClothEvent_ClearPrebuildClothData) == 0x000008, "Wrong size on MatchTwoClothEvent_ClearPrebuildClothData");
static_assert(offsetof(MatchTwoClothEvent_ClearPrebuildClothData, ClothSkelMesh) == 0x000000, "Member 'MatchTwoClothEvent_ClearPrebuildClothData::ClothSkelMesh' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.ExtractCPUSkinVertexPositionsToFitChache
// 0x0038 (0x0038 - 0x0000)
struct MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 DisabledLODIndices;                                // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           InBoneNames;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     InBoneTransforms;                                  // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache) == 0x000008, "Wrong alignment on MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache");
static_assert(sizeof(MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache) == 0x000038, "Wrong size on MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache");
static_assert(offsetof(MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache, SkeletalMesh) == 0x000000, "Member 'MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache, DisabledLODIndices) == 0x000008, "Member 'MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache::DisabledLODIndices' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache, InBoneNames) == 0x000018, "Member 'MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache::InBoneNames' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache, InBoneTransforms) == 0x000028, "Member 'MatchTwoClothEvent_ExtractCPUSkinVertexPositionsToFitChache::InBoneTransforms' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.FindBestMatchBetweenClothOfBody
// 0x0040 (0x0040 - 0x0000)
struct MatchTwoClothEvent_FindBestMatchBetweenClothOfBody final
{
public:
	class USkeletalMesh*                          InnerSkeletalMesh;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          OuterSkeletalMesh;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFitClothCacheAsset*                    BodyCacheAsset;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchClothParameter                   MatchParam;                                        // 0x0018(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_FindBestMatchBetweenClothOfBody) == 0x000008, "Wrong alignment on MatchTwoClothEvent_FindBestMatchBetweenClothOfBody");
static_assert(sizeof(MatchTwoClothEvent_FindBestMatchBetweenClothOfBody) == 0x000040, "Wrong size on MatchTwoClothEvent_FindBestMatchBetweenClothOfBody");
static_assert(offsetof(MatchTwoClothEvent_FindBestMatchBetweenClothOfBody, InnerSkeletalMesh) == 0x000000, "Member 'MatchTwoClothEvent_FindBestMatchBetweenClothOfBody::InnerSkeletalMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_FindBestMatchBetweenClothOfBody, OuterSkeletalMesh) == 0x000008, "Member 'MatchTwoClothEvent_FindBestMatchBetweenClothOfBody::OuterSkeletalMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_FindBestMatchBetweenClothOfBody, BodyCacheAsset) == 0x000010, "Member 'MatchTwoClothEvent_FindBestMatchBetweenClothOfBody::BodyCacheAsset' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_FindBestMatchBetweenClothOfBody, MatchParam) == 0x000018, "Member 'MatchTwoClothEvent_FindBestMatchBetweenClothOfBody::MatchParam' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.FindValidPairData
// 0x0018 (0x0018 - 0x0000)
struct MatchTwoClothEvent_FindValidPairData final
{
public:
	class USkeletalMesh*                          InnerSkelMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          OuterSkelMesh;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchTwoClothEvent_FindValidPairData) == 0x000008, "Wrong alignment on MatchTwoClothEvent_FindValidPairData");
static_assert(sizeof(MatchTwoClothEvent_FindValidPairData) == 0x000018, "Wrong size on MatchTwoClothEvent_FindValidPairData");
static_assert(offsetof(MatchTwoClothEvent_FindValidPairData, InnerSkelMesh) == 0x000000, "Member 'MatchTwoClothEvent_FindValidPairData::InnerSkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_FindValidPairData, OuterSkelMesh) == 0x000008, "Member 'MatchTwoClothEvent_FindValidPairData::OuterSkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_FindValidPairData, ReturnValue) == 0x000010, "Member 'MatchTwoClothEvent_FindValidPairData::ReturnValue' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.GeneratePrebuildBodyData
// 0x0098 (0x0098 - 0x0000)
struct MatchTwoClothEvent_GeneratePrebuildBodyData final
{
public:
	class USkeletalMesh*                          BodySkelMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchClothEditorParameter             MatchParam;                                        // 0x0008(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_GeneratePrebuildBodyData) == 0x000008, "Wrong alignment on MatchTwoClothEvent_GeneratePrebuildBodyData");
static_assert(sizeof(MatchTwoClothEvent_GeneratePrebuildBodyData) == 0x000098, "Wrong size on MatchTwoClothEvent_GeneratePrebuildBodyData");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildBodyData, BodySkelMesh) == 0x000000, "Member 'MatchTwoClothEvent_GeneratePrebuildBodyData::BodySkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildBodyData, MatchParam) == 0x000008, "Member 'MatchTwoClothEvent_GeneratePrebuildBodyData::MatchParam' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.GeneratePrebuildClothData
// 0x00A8 (0x00A8 - 0x0000)
struct MatchTwoClothEvent_GeneratePrebuildClothData final
{
public:
	class USkeletalMesh*                          ClothSkelMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          BodySkelMesh;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          RenderBodySkelMesh;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchClothEditorParameter             MatchParam;                                        // 0x0018(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_GeneratePrebuildClothData) == 0x000008, "Wrong alignment on MatchTwoClothEvent_GeneratePrebuildClothData");
static_assert(sizeof(MatchTwoClothEvent_GeneratePrebuildClothData) == 0x0000A8, "Wrong size on MatchTwoClothEvent_GeneratePrebuildClothData");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildClothData, ClothSkelMesh) == 0x000000, "Member 'MatchTwoClothEvent_GeneratePrebuildClothData::ClothSkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildClothData, BodySkelMesh) == 0x000008, "Member 'MatchTwoClothEvent_GeneratePrebuildClothData::BodySkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildClothData, RenderBodySkelMesh) == 0x000010, "Member 'MatchTwoClothEvent_GeneratePrebuildClothData::RenderBodySkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildClothData, MatchParam) == 0x000018, "Member 'MatchTwoClothEvent_GeneratePrebuildClothData::MatchParam' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.GeneratePrebuildClothSkirtData
// 0x00A8 (0x00A8 - 0x0000)
struct MatchTwoClothEvent_GeneratePrebuildClothSkirtData final
{
public:
	class USkeletalMesh*                          ClothSkelMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          BodySkelMesh;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          RenderBodySkelMesh;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchClothEditorParameter             MatchParam;                                        // 0x0018(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_GeneratePrebuildClothSkirtData) == 0x000008, "Wrong alignment on MatchTwoClothEvent_GeneratePrebuildClothSkirtData");
static_assert(sizeof(MatchTwoClothEvent_GeneratePrebuildClothSkirtData) == 0x0000A8, "Wrong size on MatchTwoClothEvent_GeneratePrebuildClothSkirtData");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildClothSkirtData, ClothSkelMesh) == 0x000000, "Member 'MatchTwoClothEvent_GeneratePrebuildClothSkirtData::ClothSkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildClothSkirtData, BodySkelMesh) == 0x000008, "Member 'MatchTwoClothEvent_GeneratePrebuildClothSkirtData::BodySkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildClothSkirtData, RenderBodySkelMesh) == 0x000010, "Member 'MatchTwoClothEvent_GeneratePrebuildClothSkirtData::RenderBodySkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildClothSkirtData, MatchParam) == 0x000018, "Member 'MatchTwoClothEvent_GeneratePrebuildClothSkirtData::MatchParam' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.GeneratePrebuildSkinClothData
// 0x00D0 (0x00D0 - 0x0000)
struct MatchTwoClothEvent_GeneratePrebuildSkinClothData final
{
public:
	class USkeletalMesh*                          ClothSkelMesh;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          BodySkelMesh;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          RenderBodySkelMesh;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchClothEditorParameter             MatchParam;                                        // 0x0018(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           InBoneNames;                                       // 0x00A8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     InBoneTransforms;                                  // 0x00B8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMultiplyBoneTransform;                            // 0x00C8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchTwoClothEvent_GeneratePrebuildSkinClothData) == 0x000008, "Wrong alignment on MatchTwoClothEvent_GeneratePrebuildSkinClothData");
static_assert(sizeof(MatchTwoClothEvent_GeneratePrebuildSkinClothData) == 0x0000D0, "Wrong size on MatchTwoClothEvent_GeneratePrebuildSkinClothData");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildSkinClothData, ClothSkelMesh) == 0x000000, "Member 'MatchTwoClothEvent_GeneratePrebuildSkinClothData::ClothSkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildSkinClothData, BodySkelMesh) == 0x000008, "Member 'MatchTwoClothEvent_GeneratePrebuildSkinClothData::BodySkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildSkinClothData, RenderBodySkelMesh) == 0x000010, "Member 'MatchTwoClothEvent_GeneratePrebuildSkinClothData::RenderBodySkelMesh' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildSkinClothData, MatchParam) == 0x000018, "Member 'MatchTwoClothEvent_GeneratePrebuildSkinClothData::MatchParam' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildSkinClothData, InBoneNames) == 0x0000A8, "Member 'MatchTwoClothEvent_GeneratePrebuildSkinClothData::InBoneNames' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildSkinClothData, InBoneTransforms) == 0x0000B8, "Member 'MatchTwoClothEvent_GeneratePrebuildSkinClothData::InBoneTransforms' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_GeneratePrebuildSkinClothData, bMultiplyBoneTransform) == 0x0000C8, "Member 'MatchTwoClothEvent_GeneratePrebuildSkinClothData::bMultiplyBoneTransform' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.GetMaxPairCacheNum
// 0x0004 (0x0004 - 0x0000)
struct MatchTwoClothEvent_GetMaxPairCacheNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_GetMaxPairCacheNum) == 0x000004, "Wrong alignment on MatchTwoClothEvent_GetMaxPairCacheNum");
static_assert(sizeof(MatchTwoClothEvent_GetMaxPairCacheNum) == 0x000004, "Wrong size on MatchTwoClothEvent_GetMaxPairCacheNum");
static_assert(offsetof(MatchTwoClothEvent_GetMaxPairCacheNum, ReturnValue) == 0x000000, "Member 'MatchTwoClothEvent_GetMaxPairCacheNum::ReturnValue' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.GetPairCacheNum
// 0x0004 (0x0004 - 0x0000)
struct MatchTwoClothEvent_GetPairCacheNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_GetPairCacheNum) == 0x000004, "Wrong alignment on MatchTwoClothEvent_GetPairCacheNum");
static_assert(sizeof(MatchTwoClothEvent_GetPairCacheNum) == 0x000004, "Wrong size on MatchTwoClothEvent_GetPairCacheNum");
static_assert(offsetof(MatchTwoClothEvent_GetPairCacheNum, ReturnValue) == 0x000000, "Member 'MatchTwoClothEvent_GetPairCacheNum::ReturnValue' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.ReleasePairCacheDataExceptInput
// 0x0020 (0x0020 - 0x0000)
struct MatchTwoClothEvent_ReleasePairCacheDataExceptInput final
{
public:
	TArray<class FString>                         InMeshNames;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutMeshNames;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_ReleasePairCacheDataExceptInput) == 0x000008, "Wrong alignment on MatchTwoClothEvent_ReleasePairCacheDataExceptInput");
static_assert(sizeof(MatchTwoClothEvent_ReleasePairCacheDataExceptInput) == 0x000020, "Wrong size on MatchTwoClothEvent_ReleasePairCacheDataExceptInput");
static_assert(offsetof(MatchTwoClothEvent_ReleasePairCacheDataExceptInput, InMeshNames) == 0x000000, "Member 'MatchTwoClothEvent_ReleasePairCacheDataExceptInput::InMeshNames' has a wrong offset!");
static_assert(offsetof(MatchTwoClothEvent_ReleasePairCacheDataExceptInput, OutMeshNames) == 0x000010, "Member 'MatchTwoClothEvent_ReleasePairCacheDataExceptInput::OutMeshNames' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.ReleaseReferenceArray
// 0x0010 (0x0010 - 0x0000)
struct MatchTwoClothEvent_ReleaseReferenceArray final
{
public:
	TArray<class USkeletalMesh*>                  InSkelMeshArray;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_ReleaseReferenceArray) == 0x000008, "Wrong alignment on MatchTwoClothEvent_ReleaseReferenceArray");
static_assert(sizeof(MatchTwoClothEvent_ReleaseReferenceArray) == 0x000010, "Wrong size on MatchTwoClothEvent_ReleaseReferenceArray");
static_assert(offsetof(MatchTwoClothEvent_ReleaseReferenceArray, InSkelMeshArray) == 0x000000, "Member 'MatchTwoClothEvent_ReleaseReferenceArray::InSkelMeshArray' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.ReleaseReferenceData
// 0x0008 (0x0008 - 0x0000)
struct MatchTwoClothEvent_ReleaseReferenceData final
{
public:
	class USkeletalMesh*                          InSkelMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_ReleaseReferenceData) == 0x000008, "Wrong alignment on MatchTwoClothEvent_ReleaseReferenceData");
static_assert(sizeof(MatchTwoClothEvent_ReleaseReferenceData) == 0x000008, "Wrong size on MatchTwoClothEvent_ReleaseReferenceData");
static_assert(offsetof(MatchTwoClothEvent_ReleaseReferenceData, InSkelMesh) == 0x000000, "Member 'MatchTwoClothEvent_ReleaseReferenceData::InSkelMesh' has a wrong offset!");

// Function NikkiFitCloth.MatchTwoClothEvent.SetMaxPairCacheNum
// 0x0004 (0x0004 - 0x0000)
struct MatchTwoClothEvent_SetMaxPairCacheNum final
{
public:
	int32                                         InMaxPairCacheNum;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchTwoClothEvent_SetMaxPairCacheNum) == 0x000004, "Wrong alignment on MatchTwoClothEvent_SetMaxPairCacheNum");
static_assert(sizeof(MatchTwoClothEvent_SetMaxPairCacheNum) == 0x000004, "Wrong size on MatchTwoClothEvent_SetMaxPairCacheNum");
static_assert(offsetof(MatchTwoClothEvent_SetMaxPairCacheNum, InMaxPairCacheNum) == 0x000000, "Member 'MatchTwoClothEvent_SetMaxPairCacheNum::InMaxPairCacheNum' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.AddAssetUserData
// 0x0020 (0x0020 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData final
{
public:
	class UFitClothCacheAsset*                    FitCacheAsset;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAssetUserData>             InUserDataClass;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEditorOnly;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAssetUserData*                         ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData) == 0x000020, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData, FitCacheAsset) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData::FitCacheAsset' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData, InUserDataClass) == 0x000008, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData::InUserDataClass' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData, bEditorOnly) == 0x000010, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData::bEditorOnly' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData, ReturnValue) == 0x000018, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_AddAssetUserData::ReturnValue' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.AddClothVisibilityAndOffsetProperty
// 0x0010 (0x0010 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_AddClothVisibilityAndOffsetProperty final
{
public:
	class USkeletalMeshComponent*                 InnerComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 OuterComponent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_AddClothVisibilityAndOffsetProperty) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_AddClothVisibilityAndOffsetProperty");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_AddClothVisibilityAndOffsetProperty) == 0x000010, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_AddClothVisibilityAndOffsetProperty");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_AddClothVisibilityAndOffsetProperty, InnerComponent) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_AddClothVisibilityAndOffsetProperty::InnerComponent' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_AddClothVisibilityAndOffsetProperty, OuterComponent) == 0x000008, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_AddClothVisibilityAndOffsetProperty::OuterComponent' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.ApplyClothVisibilityAndOffsetProperty
// 0x0010 (0x0010 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityAndOffsetProperty final
{
public:
	class USkeletalMeshComponent*                 InnerComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 OuterComponent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityAndOffsetProperty) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityAndOffsetProperty");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityAndOffsetProperty) == 0x000010, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityAndOffsetProperty");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityAndOffsetProperty, InnerComponent) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityAndOffsetProperty::InnerComponent' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityAndOffsetProperty, OuterComponent) == 0x000008, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityAndOffsetProperty::OuterComponent' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.ApplyClothVisibilityByColor
// 0x0018 (0x0018 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityByColor final
{
public:
	class USkeletalMeshComponent*                 InnerComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 VertexColors;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityByColor) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityByColor");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityByColor) == 0x000018, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityByColor");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityByColor, InnerComponent) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityByColor::InnerComponent' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityByColor, VertexColors) == 0x000008, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_ApplyClothVisibilityByColor::VertexColors' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.ClearClothRuntimeCache
// 0x0008 (0x0008 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothRuntimeCache final
{
public:
	class USkeletalMesh*                          ClothSkeletalMesh;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothRuntimeCache) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothRuntimeCache");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothRuntimeCache) == 0x000008, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothRuntimeCache");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothRuntimeCache, ClothSkeletalMesh) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothRuntimeCache::ClothSkeletalMesh' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.ClearClothVisibilityAndOffsetProperty
// 0x0008 (0x0008 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothVisibilityAndOffsetProperty final
{
public:
	class USkeletalMeshComponent*                 InnerComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothVisibilityAndOffsetProperty) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothVisibilityAndOffsetProperty");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothVisibilityAndOffsetProperty) == 0x000008, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothVisibilityAndOffsetProperty");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothVisibilityAndOffsetProperty, InnerComponent) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_ClearClothVisibilityAndOffsetProperty::InnerComponent' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.CollectVisibilityData
// 0x0008 (0x0008 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_CollectVisibilityData final
{
public:
	const class USkeletalMesh*                    SkeletalMesh;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_CollectVisibilityData) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_CollectVisibilityData");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_CollectVisibilityData) == 0x000008, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_CollectVisibilityData");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_CollectVisibilityData, SkeletalMesh) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_CollectVisibilityData::SkeletalMesh' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.GetAssetUserDataOfClass
// 0x0018 (0x0018 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_GetAssetUserDataOfClass final
{
public:
	class UFitClothCacheAsset*                    FitCacheAsset;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAssetUserData>             InUserDataClass;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAssetUserData*                         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_GetAssetUserDataOfClass) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_GetAssetUserDataOfClass");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_GetAssetUserDataOfClass) == 0x000018, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_GetAssetUserDataOfClass");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetAssetUserDataOfClass, FitCacheAsset) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetAssetUserDataOfClass::FitCacheAsset' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetAssetUserDataOfClass, InUserDataClass) == 0x000008, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetAssetUserDataOfClass::InUserDataClass' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetAssetUserDataOfClass, ReturnValue) == 0x000010, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetAssetUserDataOfClass::ReturnValue' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.GetNameFromBoneNamePair
// 0x0030 (0x0030 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_GetNameFromBoneNamePair final
{
public:
	class FName                                   OutClothBoneName;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutBodyBoneName;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClothBodyBoneNamePair                 BoneNamePair;                                      // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNameFromBoneNamePair) == 0x000004, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_GetNameFromBoneNamePair");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNameFromBoneNamePair) == 0x000030, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_GetNameFromBoneNamePair");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNameFromBoneNamePair, OutClothBoneName) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetNameFromBoneNamePair::OutClothBoneName' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNameFromBoneNamePair, OutBodyBoneName) == 0x000008, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetNameFromBoneNamePair::OutBodyBoneName' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNameFromBoneNamePair, BoneNamePair) == 0x000010, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetNameFromBoneNamePair::BoneNamePair' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.GetNikkiPhysicsBoneWeights
// 0x0038 (0x0038 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights final
{
public:
	TArray<class FName>                           OutColliderBones;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutAnimBones;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          InnerSkeletalMesh;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimMaskRatioThrshold;                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColliderMaskRatioThrshold;                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights) == 0x000038, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights, OutColliderBones) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights::OutColliderBones' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights, OutAnimBones) == 0x000010, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights::OutAnimBones' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights, InnerSkeletalMesh) == 0x000020, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights::InnerSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights, AnimMaskRatioThrshold) == 0x000028, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights::AnimMaskRatioThrshold' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights, ColliderMaskRatioThrshold) == 0x00002C, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights::ColliderMaskRatioThrshold' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights, ReturnValue) == 0x000030, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetNikkiPhysicsBoneWeights::ReturnValue' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.GetSkeletalMeshVisibilityProperty
// 0x0040 (0x0040 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty final
{
public:
	TArray<int32>                                 ColorNumVertices;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ColorNumHidedVertices;                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ColorValues;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class USkeletalMesh*                    ClothSkeletalMesh;                                 // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODIndex;                                          // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty) == 0x000040, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty, ColorNumVertices) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty::ColorNumVertices' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty, ColorNumHidedVertices) == 0x000010, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty::ColorNumHidedVertices' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty, ColorValues) == 0x000020, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty::ColorValues' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty, ClothSkeletalMesh) == 0x000030, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty::ClothSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty, LODIndex) == 0x000038, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_GetSkeletalMeshVisibilityProperty::LODIndex' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.PrintVisibilityData
// 0x0008 (0x0008 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_PrintVisibilityData final
{
public:
	const class USkeletalMesh*                    SkeletalMesh;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_PrintVisibilityData) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_PrintVisibilityData");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_PrintVisibilityData) == 0x000008, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_PrintVisibilityData");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_PrintVisibilityData, SkeletalMesh) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_PrintVisibilityData::SkeletalMesh' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.PrintWholeBodyVisibilityData
// 0x0010 (0x0010 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_PrintWholeBodyVisibilityData final
{
public:
	TArray<class USkeletalMesh*>                  WholeSkeletalMeshes;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_PrintWholeBodyVisibilityData) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_PrintWholeBodyVisibilityData");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_PrintWholeBodyVisibilityData) == 0x000010, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_PrintWholeBodyVisibilityData");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_PrintWholeBodyVisibilityData, WholeSkeletalMeshes) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_PrintWholeBodyVisibilityData::WholeSkeletalMeshes' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.RemoveUserDataOfClass
// 0x0018 (0x0018 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_RemoveUserDataOfClass final
{
public:
	class UFitClothCacheAsset*                    FitCacheAsset;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAssetUserData>             InUserDataClass;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_RemoveUserDataOfClass) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_RemoveUserDataOfClass");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_RemoveUserDataOfClass) == 0x000018, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_RemoveUserDataOfClass");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_RemoveUserDataOfClass, FitCacheAsset) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_RemoveUserDataOfClass::FitCacheAsset' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_RemoveUserDataOfClass, InUserDataClass) == 0x000008, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_RemoveUserDataOfClass::InUserDataClass' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_RemoveUserDataOfClass, ReturnValue) == 0x000010, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_RemoveUserDataOfClass::ReturnValue' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.SaveCurrentClothVisibilityAndOffsetProperty
// 0x0020 (0x0020 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty final
{
public:
	class USkeletalMeshComponent*                 InnerComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveFilePath;                                      // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODIndex;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepDisable;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty) == 0x000020, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty, InnerComponent) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty::InnerComponent' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty, SaveFilePath) == 0x000008, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty::SaveFilePath' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty, LODIndex) == 0x000018, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty::LODIndex' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty, bKeepDisable) == 0x00001C, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SaveCurrentClothVisibilityAndOffsetProperty::bKeepDisable' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.SetChaosClothFixedVertices
// 0x0030 (0x0030 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices final
{
public:
	TArray<class FString>                         OutAssetNames;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLODVertexIndices>              OutLODFixedIndices;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 InnerComponent;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FixedRatioThrshold;                                // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices) == 0x000030, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices, OutAssetNames) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices::OutAssetNames' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices, OutLODFixedIndices) == 0x000010, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices::OutLODFixedIndices' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices, InnerComponent) == 0x000020, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices::InnerComponent' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices, FixedRatioThrshold) == 0x000028, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SetChaosClothFixedVertices::FixedRatioThrshold' has a wrong offset!");

// Function NikkiFitCloth.ClothVisibilityAndOffsetBlueprintLiabrary.SetNameToBoneNamePair
// 0x0040 (0x0040 - 0x0000)
struct ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair final
{
public:
	struct FClothBodyBoneNamePair                 BoneNamePair;                                      // 0x0000(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   InClothBoneName;                                   // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBodyBoneName;                                    // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMesh*                    InSkeletalMesh;                                    // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair) == 0x000008, "Wrong alignment on ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair");
static_assert(sizeof(ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair) == 0x000040, "Wrong size on ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair, BoneNamePair) == 0x000000, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair::BoneNamePair' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair, InClothBoneName) == 0x000020, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair::InClothBoneName' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair, InBodyBoneName) == 0x000028, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair::InBodyBoneName' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair, InSkeletalMesh) == 0x000030, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair::InSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair, ReturnValue) == 0x000038, "Member 'ClothVisibilityAndOffsetBlueprintLiabrary_SetNameToBoneNamePair::ReturnValue' has a wrong offset!");

}

