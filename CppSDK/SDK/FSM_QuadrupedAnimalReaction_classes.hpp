#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FSM_QuadrupedAnimalReaction

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SMSystem_structs.hpp"
#include "SMSystem_classes.hpp"
#include "EQuadrupedAnimalReactionState_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// SMBlueprintGeneratedClass FSM_QuadrupedAnimalReaction.FSM_QuadrupedAnimalReaction_C
// 0x1B18 (0x2110 - 0x05F8)
class UFSM_QuadrupedAnimalReaction_C final : public USMInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_3; // 0x0600(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_2; // 0x0740(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_1; // 0x0880(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop; // 0x09C0(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_10; // 0x0B00(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_9; // 0x0C40(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_8; // 0x0D80(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_7; // 0x0EC0(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_6; // 0x1000(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_5; // 0x1140(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_4; // 0x1280(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_3; // 0x13C0(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_2; // 0x1500(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_1; // 0x1640(0x0140)()
	struct FSMTransition                          SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop; // 0x1780(0x0140)()
	struct FSMState                               SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_5; // 0x18C0(0x0100)()
	struct FSMState                               SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_4; // 0x19C0(0x0100)()
	struct FSMState                               SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_3; // 0x1AC0(0x0100)()
	struct FSMState                               SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_2; // 0x1BC0(0x0100)()
	struct FSMState                               SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_1; // 0x1CC0(0x0100)()
	struct FSMState                               SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop; // 0x1DC0(0x0100)()
	EQuadrupedAnimalReactionState                 LastState;                                         // 0x1EC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC1[0x7];                                     // 0x1EC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, EQuadrupedAnimalReactionState> Name2StateMap;                                  // 0x1EC8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EQuadrupedAnimalReactionState                 DesiredState;                                      // 0x1F18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQuadrupedAnimalReactionState                 CurrentState;                                      // 0x1F19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTransitionStateDirty;                             // 0x1F1A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1B[0x5];                                     // 0x1F1B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       EnterAlertCollision;                               // 0x1F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bMoveFinish;                                       // 0x1F28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F29[0x7];                                     // 0x1F29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OwnerActor;                                        // 0x1F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             OwnerAsCharacter;                                  // 0x1F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_QuadrupedAnimalReactionDefinition_C* DataAsset;                                        // 0x1F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsNikkiInLeaveAlertRange;                         // 0x1F48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsNikkiInEnterAlertRange;                         // 0x1F49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsTurningByCurve;                                 // 0x1F4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4B[0x5];                                     // 0x1F4B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CurrentTurnCurve;                                  // 0x1F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TurnAngle;                                         // 0x1F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentTurnByCurveTime;                            // 0x1F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TurnStartYaw;                                      // 0x1F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInTurnCoolDown;                                 // 0x1F70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F71[0x7];                                     // 0x1F71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TurnCoolDownFinishTimerHandle;                     // 0x1F78(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(EQuadrupedAnimalReactionState NewState)> OnReactionStateChange;    // 0x1F80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class USphereComponent*                       LeaveAlertCollision;                               // 0x1F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertStanceTag;                                    // 0x1F98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CuriousStanceTag;                                  // 0x1FA0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           DesiredStanceTag;                                  // 0x1FA8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           RequestedStanceTag;                                // 0x1FB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentTurnAnimPosition;                           // 0x1FB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentTurnByAnimScale;                            // 0x1FC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimSequenceBase>       CurrentTurnAnimSoftRef;                            // 0x1FC8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         PlayerState_Moving;                                // 0x1FF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FF4[0x4];                                     // 0x1FF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FGameplayTag& StanceTag)> OnAnimTransitionEnd;        // 0x1FF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           ReachAlertMaxDurationTimer;                        // 0x2008(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AX6AIController*                        X6AIController;                                    // 0x2010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 StimuliSourceActor;                                // 0x2018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorOrigin;                                       // 0x2020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsNikkiInFleeRange;                               // 0x2038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2039[0x7];                                     // 0x2039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       FleeCollision;                                     // 0x2040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UX6TaskAsyncBase*                       StartStanceTask;                                   // 0x2048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       CuriousCollision;                                  // 0x2050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bWantsToCurious;                                   // 0x2058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2059[0x7];                                     // 0x2059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bTurnByCurve)> OnTurnFinish;                                  // 0x2060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsTurningByAnim;                                  // 0x2070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2071[0x7];                                     // 0x2071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          AnimInstance;                                      // 0x2078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bReachAlertMaxDuration;                            // 0x2080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2081[0x3];                                     // 0x2081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AlertTurn90LTag;                                   // 0x2084(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertTurn90RTag;                                   // 0x208C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertTurn180LTag;                                  // 0x2094(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertTurn180RTag;                                  // 0x209C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20A4[0x4];                                     // 0x20A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bInterrupt, const struct FGameplayTag& Tag)> OnGestureEnd;    // 0x20A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTag                           CurrentTurnTag;                                    // 0x20B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimSequenceBase*>              PreloadAnimSequences;                              // 0x20C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           CuriousTurn90LTag;                                 // 0x20D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CuriousTurn90RTag;                                 // 0x20D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CuriousTurn180LTag;                                // 0x20E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CuriousTurn180RTag;                                // 0x20E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TurnNearlyFinishTimer;                             // 0x20F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UpdateTransitionTimer;                             // 0x20F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          AfterFleeBT;                                       // 0x2100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          FleeBT;                                            // 0x2108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void WantedStanceTransitonStart_B2F1FD674D016BAA6C715DA17E929405();
	void WantedStanceTransitonStart_51B4524846EAD7E8757D4D8F3326AF1B();
	void WantedStanceTransitonEnd_B2F1FD674D016BAA6C715DA17E929405();
	void WantedStanceTransitonEnd_51B4524846EAD7E8757D4D8F3326AF1B();
	void UpdateTurnByMontage(double DeltaTime);
	void UpdateTurnByCurve(double DeltaTime);
	void UpdateTransitionState();
	void TryStartInitTurn_Curious();
	void TryStartInitTurn_Alert();
	void TryStartCuriousTurn(bool* bTurnStarted);
	void TryStartAlertTurn(bool* bTurnStarted);
	void TryFleeForReachMaxAlertDuration_OnTurnFinish(bool bTurnByCurve);
	void TryFleeForReachMaxAlertDuration_OnAnimTransitionEnd(const struct FGameplayTag& StanceTag);
	void TryEnterState(EQuadrupedAnimalReactionState NewState, bool* bSuccess);
	void TaskFail_B2F1FD674D016BAA6C715DA17E929405();
	void TaskFail_51B4524846EAD7E8757D4D8F3326AF1B();
	void TaskBegin_B2F1FD674D016BAA6C715DA17E929405(class UX6TaskAsyncBase* Task);
	void TaskBegin_51B4524846EAD7E8757D4D8F3326AF1B(class UX6TaskAsyncBase* Task);
	void StartTurnCoolDown(double CoolDown);
	void StartFleeTask();
	void StartCuriousStance(bool bFastTransition);
	void StartAlertStance(bool bFastTransition);
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_ReturningNormal_to_Normal_2333D4CF416FFA32CA55A09AA36F63CE();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_Normal_to_Curious_8AD203EB4DA13BC9F633BF99578E4391();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_Normal_to_Alert_0D3380DE45930652F23E9D8176135DAE();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_Flee_to_AfterFlee_032A05F646E8A1F5B9A86FB959F0B949();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_Curious_to_ReturningNormal_34D3F87C40BA38B3A8C37E92FB51EED9();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_Curious_to_Alert_6CE0A53C470998626B9F9A8709C6E53E();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_Normal_to_Flee_0CE9B474482F64AC27C471A5B83E06B9();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_Curious_to_Flee_56248172D8C6F264BC49C29FA24E0FBB();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_Alert_to_Flee_3D1AA4AD9523C1D4D2BF5CE8B6ACE754();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_AfterFlee_to_Flee_77566BBF3FAFBFD0936A68F9DE3DB5CF();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_Alert_to_ReturningNormal_052BAE594ED796D86373A7ADD4B7B034();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_Alert_to_Curious_666C5E2C4875220B448A139C63DE43A1();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AfterFlee_to_Normal_EE22567A40B0FDF01DA12894CBBD7ED7();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AfterFlee_to_Curious_C2DB55C64C132EE3BB6E8EA37101F00A();
	void SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AfterFlee_to_Alert_6D888D8D49B627AA1117F98C0476B0ED();
	void SMGraphK2Node_StateUpdateNode_DBF695D848A31221905EBE8EEA8A25FB_Curious_EA5D754F46FCB72AEA1264B0593EA4EF(float DeltaSeconds);
	void SMGraphK2Node_StateUpdateNode_DBF695D848A31221905EBE8EEA8A25FB_Alert_B03E0BFC4F2299D81B147ABF5ED89194(float DeltaSeconds);
	void SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_ReturningNormal_F10DAF664E9529EC9214C8A811F3AE3A();
	void SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_Normal_512F351543C5CD9D2C35FAB99C406FF7();
	void SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_Flee_8822E59F42464D6E89CE1AB018B93817();
	void SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_Curious_EA5D754F46FCB72AEA1264B0593EA4EF();
	void SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_Alert_B03E0BFC4F2299D81B147ABF5ED89194();
	void SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_AfterFlee_42D3822F4E6D19707C73B391A5AFDBF5();
	void SMGraphK2Node_StateEndNode_DBF695D848A31221905EBE8EEA8A25FB_ReturningNormal_F10DAF664E9529EC9214C8A811F3AE3A();
	void SMGraphK2Node_StateEndNode_DBF695D848A31221905EBE8EEA8A25FB_Normal_512F351543C5CD9D2C35FAB99C406FF7();
	void SMGraphK2Node_StateEndNode_DBF695D848A31221905EBE8EEA8A25FB_Flee_8822E59F42464D6E89CE1AB018B93817();
	void SMGraphK2Node_StateEndNode_DBF695D848A31221905EBE8EEA8A25FB_Curious_EA5D754F46FCB72AEA1264B0593EA4EF();
	void SMGraphK2Node_StateEndNode_DBF695D848A31221905EBE8EEA8A25FB_Alert_B03E0BFC4F2299D81B147ABF5ED89194();
	void SMGraphK2Node_StateEndNode_DBF695D848A31221905EBE8EEA8A25FB_AfterFlee_42D3822F4E6D19707C73B391A5AFDBF5();
	void SetDataAsset(class UBP_QuadrupedAnimalReactionDefinition_C* DataAsset_0);
	void PreloadAnimations();
	void PostAIObjectInit_Flee();
	void PostAIObjectInit();
	void OtherTransitionEnd_B2F1FD674D016BAA6C715DA17E929405();
	void OtherTransitionEnd_51B4524846EAD7E8757D4D8F3326AF1B();
	void OnTurnNearlyFinish_Curious();
	void OnTurnNearlyFinish_Alert();
	void OnTurnCoolDownFinished();
	void OnStateMachineStop();
	void OnStateMachineStateChanged(const struct FSMStateInfo& ToState, const struct FSMStateInfo& FromState);
	void OnStateMachineShutdown();
	void OnStanceStop_Curious(const struct FGameplayTag& StanceTag);
	void OnStanceStop_Alert(const struct FGameplayTag& StanceTag);
	void OnReachAlertMaxDuration();
	void OnLoaded_FEB03CB44437EDB029A7E590C7692481(class UObject* Loaded);
	void OnLoaded_A0C6596B46C0C8B8859ACEBEC7094AB5(class UObject* Loaded);
	void OnLeaveAlertRangeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnLeaveAlertRangeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnInRangeActorStopHoldingBrush(class AActor* Actor);
	void OnInRangeActorStartHoldingBrush(class AActor* Actor);
	void OnGestureEnd_HandleTurn(bool bInterrupt, const struct FGameplayTag& Tag);
	void OnFleeCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnFleeCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnEnterAlertRangeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnEnterAlertRangeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnCuriousCollisionEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnCuriousCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnAnimTransitionEnd_ReturningNormal(const struct FGameplayTag& StanceTag);
	void OnAnimTransitionEnd_Normal(const struct FGameplayTag& StanceTag);
	void OnAnimTransitionEnd_HandleStopStance(const struct FGameplayTag& StanceTag);
	void MarkTransitionStateDirty();
	void IsTurning(bool* bIsTurning);
	void IsCanTrigger(class AActor* Actor, class UActorComponent* Comp, bool* IsCanTrigger_0);
	void InternalStartTurnByCurve(double TurnAngle_0, class UCurveFloat* TurnCurve);
	void InternalStartTurnByAnim(const struct FGameplayTag& GestureTag, double TurnScale);
	void InitCollisions();
	void Init();
	void GetTurnTime(double* TurnTime);
	void GetStimuliSourceActor(class AActor** StimuliSourceActor_0);
	void GetLookAtTargetTurnAngle(double* TurnAngle_0);
	void GetHorizontalRotation(const struct FRotator& Rotator, struct FRotator* AdjustedRotator);
	void GetFleeSucceedDistance(double* FleeSucceedDistance);
	void GetFleeQueryParams(struct FVector* Center, double* FleeRadius, double* FleeStepDistMin, double* FleeStepDistMax);
	void GetCurrentState(EQuadrupedAnimalReactionState* State);
	void ExecuteUbergraph_FSM_QuadrupedAnimalReaction(int32 EntryPoint);
	void EvalTransitionsWithResult(bool* bStateChanged);
	void ClearAllTimers();
	void BP_RequestStopStance();
	void BP_RequestStartStance(const struct FGameplayTag& StanceTag);
	void BP_RequestStartGesture(const struct FGameplayTag& GestureTag);
	void BP_IsPlayingStance(bool* bIsPlayingStance);
	void BP_IsInTransition(bool* bInTransition);
	void BP_GetStanceSoftRef(const struct FGameplayTag& Tag, TSoftObjectPtr<class UAnimSequenceBase>* StanceSoftRef);
	void BP_GetGestureSoftRef(const struct FGameplayTag& Tag, TSoftObjectPtr<class UAnimSequenceBase>* GestureSoftRef);
	void BP_ForceDestroyComponent(class USphereComponent* Comp);
	void BP_CanCurStanceTransitionToThisStance(const struct FGameplayTag& StanceTag, bool* bCanTransition);
	void BP_AddReactionCollision(class USphereComponent* Comp);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FSM_QuadrupedAnimalReaction_C">();
	}
	static class UFSM_QuadrupedAnimalReaction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFSM_QuadrupedAnimalReaction_C>();
	}
};
static_assert(alignof(UFSM_QuadrupedAnimalReaction_C) == 0x000008, "Wrong alignment on UFSM_QuadrupedAnimalReaction_C");
static_assert(sizeof(UFSM_QuadrupedAnimalReaction_C) == 0x002110, "Wrong size on UFSM_QuadrupedAnimalReaction_C");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, UberGraphFrame) == 0x0005F8, "Member 'UFSM_QuadrupedAnimalReaction_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_3) == 0x000600, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_3' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_2) == 0x000740, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_2' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_1) == 0x000880, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_1' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop) == 0x0009C0, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_AnyState_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_10) == 0x000B00, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_10' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_9) == 0x000C40, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_9' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_8) == 0x000D80, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_8' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_7) == 0x000EC0, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_7' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_6) == 0x001000, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_6' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_5) == 0x001140, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_5' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_4) == 0x001280, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_4' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_3) == 0x0013C0, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_3' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_2) == 0x001500, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_2' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_1) == 0x001640, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_1' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop) == 0x001780, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_TransitionResultNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_5) == 0x0018C0, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_5' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_4) == 0x0019C0, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_4' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_3) == 0x001AC0, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_3' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_2) == 0x001BC0, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_2' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_1) == 0x001CC0, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop_1' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop) == 0x001DC0, "Member 'UFSM_QuadrupedAnimalReaction_C::SMGraphK2Node_StateEntryNode_DBF695D848A31221905EBE8EEA8A25FB_LD_Prop' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, LastState) == 0x001EC0, "Member 'UFSM_QuadrupedAnimalReaction_C::LastState' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, Name2StateMap) == 0x001EC8, "Member 'UFSM_QuadrupedAnimalReaction_C::Name2StateMap' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, DesiredState) == 0x001F18, "Member 'UFSM_QuadrupedAnimalReaction_C::DesiredState' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CurrentState) == 0x001F19, "Member 'UFSM_QuadrupedAnimalReaction_C::CurrentState' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, bTransitionStateDirty) == 0x001F1A, "Member 'UFSM_QuadrupedAnimalReaction_C::bTransitionStateDirty' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, EnterAlertCollision) == 0x001F20, "Member 'UFSM_QuadrupedAnimalReaction_C::EnterAlertCollision' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, bMoveFinish) == 0x001F28, "Member 'UFSM_QuadrupedAnimalReaction_C::bMoveFinish' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, OwnerActor) == 0x001F30, "Member 'UFSM_QuadrupedAnimalReaction_C::OwnerActor' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, OwnerAsCharacter) == 0x001F38, "Member 'UFSM_QuadrupedAnimalReaction_C::OwnerAsCharacter' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, DataAsset) == 0x001F40, "Member 'UFSM_QuadrupedAnimalReaction_C::DataAsset' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, bIsNikkiInLeaveAlertRange) == 0x001F48, "Member 'UFSM_QuadrupedAnimalReaction_C::bIsNikkiInLeaveAlertRange' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, bIsNikkiInEnterAlertRange) == 0x001F49, "Member 'UFSM_QuadrupedAnimalReaction_C::bIsNikkiInEnterAlertRange' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, bIsTurningByCurve) == 0x001F4A, "Member 'UFSM_QuadrupedAnimalReaction_C::bIsTurningByCurve' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CurrentTurnCurve) == 0x001F50, "Member 'UFSM_QuadrupedAnimalReaction_C::CurrentTurnCurve' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, TurnAngle) == 0x001F58, "Member 'UFSM_QuadrupedAnimalReaction_C::TurnAngle' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CurrentTurnByCurveTime) == 0x001F60, "Member 'UFSM_QuadrupedAnimalReaction_C::CurrentTurnByCurveTime' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, TurnStartYaw) == 0x001F68, "Member 'UFSM_QuadrupedAnimalReaction_C::TurnStartYaw' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, bIsInTurnCoolDown) == 0x001F70, "Member 'UFSM_QuadrupedAnimalReaction_C::bIsInTurnCoolDown' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, TurnCoolDownFinishTimerHandle) == 0x001F78, "Member 'UFSM_QuadrupedAnimalReaction_C::TurnCoolDownFinishTimerHandle' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, OnReactionStateChange) == 0x001F80, "Member 'UFSM_QuadrupedAnimalReaction_C::OnReactionStateChange' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, LeaveAlertCollision) == 0x001F90, "Member 'UFSM_QuadrupedAnimalReaction_C::LeaveAlertCollision' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, AlertStanceTag) == 0x001F98, "Member 'UFSM_QuadrupedAnimalReaction_C::AlertStanceTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CuriousStanceTag) == 0x001FA0, "Member 'UFSM_QuadrupedAnimalReaction_C::CuriousStanceTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, DesiredStanceTag) == 0x001FA8, "Member 'UFSM_QuadrupedAnimalReaction_C::DesiredStanceTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, RequestedStanceTag) == 0x001FB0, "Member 'UFSM_QuadrupedAnimalReaction_C::RequestedStanceTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CurrentTurnAnimPosition) == 0x001FB8, "Member 'UFSM_QuadrupedAnimalReaction_C::CurrentTurnAnimPosition' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CurrentTurnByAnimScale) == 0x001FC0, "Member 'UFSM_QuadrupedAnimalReaction_C::CurrentTurnByAnimScale' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CurrentTurnAnimSoftRef) == 0x001FC8, "Member 'UFSM_QuadrupedAnimalReaction_C::CurrentTurnAnimSoftRef' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, PlayerState_Moving) == 0x001FF0, "Member 'UFSM_QuadrupedAnimalReaction_C::PlayerState_Moving' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, OnAnimTransitionEnd) == 0x001FF8, "Member 'UFSM_QuadrupedAnimalReaction_C::OnAnimTransitionEnd' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, ReachAlertMaxDurationTimer) == 0x002008, "Member 'UFSM_QuadrupedAnimalReaction_C::ReachAlertMaxDurationTimer' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, X6AIController) == 0x002010, "Member 'UFSM_QuadrupedAnimalReaction_C::X6AIController' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, StimuliSourceActor) == 0x002018, "Member 'UFSM_QuadrupedAnimalReaction_C::StimuliSourceActor' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, ActorOrigin) == 0x002020, "Member 'UFSM_QuadrupedAnimalReaction_C::ActorOrigin' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, bIsNikkiInFleeRange) == 0x002038, "Member 'UFSM_QuadrupedAnimalReaction_C::bIsNikkiInFleeRange' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, FleeCollision) == 0x002040, "Member 'UFSM_QuadrupedAnimalReaction_C::FleeCollision' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, StartStanceTask) == 0x002048, "Member 'UFSM_QuadrupedAnimalReaction_C::StartStanceTask' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CuriousCollision) == 0x002050, "Member 'UFSM_QuadrupedAnimalReaction_C::CuriousCollision' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, bWantsToCurious) == 0x002058, "Member 'UFSM_QuadrupedAnimalReaction_C::bWantsToCurious' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, OnTurnFinish) == 0x002060, "Member 'UFSM_QuadrupedAnimalReaction_C::OnTurnFinish' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, bIsTurningByAnim) == 0x002070, "Member 'UFSM_QuadrupedAnimalReaction_C::bIsTurningByAnim' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, AnimInstance) == 0x002078, "Member 'UFSM_QuadrupedAnimalReaction_C::AnimInstance' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, bReachAlertMaxDuration) == 0x002080, "Member 'UFSM_QuadrupedAnimalReaction_C::bReachAlertMaxDuration' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, AlertTurn90LTag) == 0x002084, "Member 'UFSM_QuadrupedAnimalReaction_C::AlertTurn90LTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, AlertTurn90RTag) == 0x00208C, "Member 'UFSM_QuadrupedAnimalReaction_C::AlertTurn90RTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, AlertTurn180LTag) == 0x002094, "Member 'UFSM_QuadrupedAnimalReaction_C::AlertTurn180LTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, AlertTurn180RTag) == 0x00209C, "Member 'UFSM_QuadrupedAnimalReaction_C::AlertTurn180RTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, OnGestureEnd) == 0x0020A8, "Member 'UFSM_QuadrupedAnimalReaction_C::OnGestureEnd' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CurrentTurnTag) == 0x0020B8, "Member 'UFSM_QuadrupedAnimalReaction_C::CurrentTurnTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, PreloadAnimSequences) == 0x0020C0, "Member 'UFSM_QuadrupedAnimalReaction_C::PreloadAnimSequences' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CuriousTurn90LTag) == 0x0020D0, "Member 'UFSM_QuadrupedAnimalReaction_C::CuriousTurn90LTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CuriousTurn90RTag) == 0x0020D8, "Member 'UFSM_QuadrupedAnimalReaction_C::CuriousTurn90RTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CuriousTurn180LTag) == 0x0020E0, "Member 'UFSM_QuadrupedAnimalReaction_C::CuriousTurn180LTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, CuriousTurn180RTag) == 0x0020E8, "Member 'UFSM_QuadrupedAnimalReaction_C::CuriousTurn180RTag' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, TurnNearlyFinishTimer) == 0x0020F0, "Member 'UFSM_QuadrupedAnimalReaction_C::TurnNearlyFinishTimer' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, UpdateTransitionTimer) == 0x0020F8, "Member 'UFSM_QuadrupedAnimalReaction_C::UpdateTransitionTimer' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, AfterFleeBT) == 0x002100, "Member 'UFSM_QuadrupedAnimalReaction_C::AfterFleeBT' has a wrong offset!");
static_assert(offsetof(UFSM_QuadrupedAnimalReaction_C, FleeBT) == 0x002108, "Member 'UFSM_QuadrupedAnimalReaction_C::FleeBT' has a wrong offset!");

}

