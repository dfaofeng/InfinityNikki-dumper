#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MapHud

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "X6Game_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MapHud.WBP_MapHud_C
// 0x01B8 (0x0510 - 0x0358)
class UWBP_MapHud_C final : public UX6MapHudBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0358(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           Layer_LowerObj;                                    // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Layer_MiddleObj;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Layer_Terrain;                                     // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              offsetPos;                                         // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isDragging;                                        // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              lastMouseDirection;                                // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      lastMouseDistanceArray;                            // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector2D                              lastMouseWidgetPos;                                // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        minMapRootX;                                       // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        minMapRootY;                                       // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        maxMapRootX;                                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        maxMapRootY;                                       // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              inertiaForce;                                      // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isInertiaMoving;                                   // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F1[0x3];                                      // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConstraintType;                                    // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InertiaFactor;                                     // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InertiaReduction;                                  // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InertiaDistance;                                   // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableSpringBack;                                  // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              scrollTargetMapPos;                                // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isScrollingToTarget;                               // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              scrollStartMapPos;                                 // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        scrollToTargetSpeed;                               // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        scrollToTargetTime;                                // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isMoved;                                           // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MapContentSize;                                    // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              lastUpdatePos;                                     // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          canDrag;                                           // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          hasInited;                                         // 0x0479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47A[0x2];                                      // 0x047A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TickCount;                                         // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          hasMovedDuringTap;                                 // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isMouseDistanceRecord;                             // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_482[0x6];                                      // 0x0482(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TScriptInterface<class IBP_MapFollower_C>> followMapHudArray;                             // 0x0488(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          useCustomConstrain;                                // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        customConstrainOffsetLeft;                         // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        customConstrainOffsetTop;                          // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        customConstrainOffsetRight;                        // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        customConstrainOffsetBottom;                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        cDeltaTime;                                        // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastTime;                                          // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          canTick;                                           // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              ED_OnDragStart;                                    // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              ED_OnDragEnd;                                      // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          banMouseInput;                                     // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UIPinchHelper_C*                    pinchHelper;                                       // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          isPinchInited;                                     // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x3];                                      // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         firstPressPointerIndex;                            // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddFollowMapHud(TScriptInterface<class IBP_MapFollower_C> HUD);
	void BeginInertiaMove(const struct FVector2D& inertiaForce_0);
	void CalculateTime();
	void CheckIfClick(const struct FPointerEvent& Event);
	void ClearMouseEvent();
	void ConstraintMoveRootPos(const struct FVector2D& originPos, struct FVector2D* Pos);
	void Construct();
	void ConvertMapPosToWindowPos(const struct FVector2D& mapPos, struct FVector2D* windowPos);
	void ConvertScreenPosToWidgetPos(const struct FVector2D& screenPos, const struct FGeometry& widgetGeometry, struct FVector2D* widgetPos);
	void ConvertWidgetPosToScreenPos(const struct FGeometry& widgetGeometry, const struct FVector2D& widgetPos, struct FVector2D* screenPos);
	void ConvertWindowPosToMapPos(const struct FVector2D& windowPos, struct FVector2D* mapPos);
	void Destruct();
	void EndDrag();
	void ExecuteUbergraph_WBP_MapHud(int32 EntryPoint);
	void GetIsDragging(bool* isDragging_0);
	void GetMapPos(struct FVector2D* Pos);
	void GetMapScale(double* Scale);
	void GetMovePos(struct FVector2D* Pos);
	void GetWindowSize(struct FVector2D* Size);
	bool HandleMouseButtonUp(const struct FPointerEvent& MouseEvent);
	bool HandleMouseMove(const struct FPointerEvent& MouseEvent);
	bool HandlePinchRelease(const struct FPointerEvent& MouseEvent);
	void InitMouseEvent();
	void InitPinch();
	void InvalidMapWindow();
	void IsMousePointer(const struct FPointerEvent& MouseEvent, bool* IsMouse);
	void IsMoveRootPosOutOfRange(const struct FVector2D& Pos, bool* isOut, bool* isOutMinX, bool* isOutMaxX, bool* isOutMinY, bool* isOutMaxY);
	void NT_OnPostMoveContentPosition(const struct FVector2D& Pos);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void OnMapClick(const struct FVector2D& mapPos, const struct FKey& Key);
	void OnMapHudInitFinish();
	void OnMapPinchZoom(double scaleDelta);
	void OnMapWheel(double Step, const struct FVector2D& screenPos);
	void OnMapWindowChanged(double mapMinX, double mapMaxX, double mapMnY, double mapMaxY, const struct FVector2D& MoveDiff);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUpCustom(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMoveCustom(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void PostProcessMapMove();
	void ResetInertia();
	void ScrollToMapPos(const struct FVector2D& mapPos, double Speed);
	void SetClipRange(const struct FVector2D& Size);
	void SetContentSize(const struct FVector2D& NewSize);
	void SetCustomConstrain(double Left, double Top, double Right, double Bottom);
	void SetFollowMapClipRange(const struct FVector2D& Size);
	void SetFollowMapContentPosition(const struct FVector2D& Pos);
	void SetFollowMapContentScale(const struct FVector2D& Scale);
	void SetFollowMapContentSize(const struct FVector2D& Size);
	void SetMoveContentPosition(const struct FVector2D& Pos);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void ToggleTick(bool Enable);
	void UpdateContentSize();
	void UpdateInertiaMoving(double DeltaTime);
	void UpdateMapRootConstraintInfo(const struct FGeometry& Geometry);
	void UpdateMapWindowRange(const struct FGeometry& MyGeometry, const struct FVector2D& MoveDiff);
	void UpdateScrollToTarget(double DeltaTime);
	void ZoomMap(double Scale, const struct FVector2D& windowPos);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MapHud_C">();
	}
	static class UWBP_MapHud_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MapHud_C>();
	}
};
static_assert(alignof(UWBP_MapHud_C) == 0x000008, "Wrong alignment on UWBP_MapHud_C");
static_assert(sizeof(UWBP_MapHud_C) == 0x000510, "Wrong size on UWBP_MapHud_C");
static_assert(offsetof(UWBP_MapHud_C, UberGraphFrame) == 0x000358, "Member 'UWBP_MapHud_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, Layer_LowerObj) == 0x000360, "Member 'UWBP_MapHud_C::Layer_LowerObj' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, Layer_MiddleObj) == 0x000368, "Member 'UWBP_MapHud_C::Layer_MiddleObj' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, Layer_Terrain) == 0x000370, "Member 'UWBP_MapHud_C::Layer_Terrain' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, offsetPos) == 0x000378, "Member 'UWBP_MapHud_C::offsetPos' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, isDragging) == 0x000388, "Member 'UWBP_MapHud_C::isDragging' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, lastMouseDirection) == 0x000390, "Member 'UWBP_MapHud_C::lastMouseDirection' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, lastMouseDistanceArray) == 0x0003A0, "Member 'UWBP_MapHud_C::lastMouseDistanceArray' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, lastMouseWidgetPos) == 0x0003B0, "Member 'UWBP_MapHud_C::lastMouseWidgetPos' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, minMapRootX) == 0x0003C0, "Member 'UWBP_MapHud_C::minMapRootX' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, minMapRootY) == 0x0003C8, "Member 'UWBP_MapHud_C::minMapRootY' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, maxMapRootX) == 0x0003D0, "Member 'UWBP_MapHud_C::maxMapRootX' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, maxMapRootY) == 0x0003D8, "Member 'UWBP_MapHud_C::maxMapRootY' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, inertiaForce) == 0x0003E0, "Member 'UWBP_MapHud_C::inertiaForce' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, isInertiaMoving) == 0x0003F0, "Member 'UWBP_MapHud_C::isInertiaMoving' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, ConstraintType) == 0x0003F4, "Member 'UWBP_MapHud_C::ConstraintType' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, InertiaFactor) == 0x0003F8, "Member 'UWBP_MapHud_C::InertiaFactor' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, InertiaReduction) == 0x000400, "Member 'UWBP_MapHud_C::InertiaReduction' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, InertiaDistance) == 0x000408, "Member 'UWBP_MapHud_C::InertiaDistance' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, EnableSpringBack) == 0x000410, "Member 'UWBP_MapHud_C::EnableSpringBack' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, scrollTargetMapPos) == 0x000418, "Member 'UWBP_MapHud_C::scrollTargetMapPos' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, isScrollingToTarget) == 0x000428, "Member 'UWBP_MapHud_C::isScrollingToTarget' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, scrollStartMapPos) == 0x000430, "Member 'UWBP_MapHud_C::scrollStartMapPos' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, scrollToTargetSpeed) == 0x000440, "Member 'UWBP_MapHud_C::scrollToTargetSpeed' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, scrollToTargetTime) == 0x000448, "Member 'UWBP_MapHud_C::scrollToTargetTime' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, isMoved) == 0x000450, "Member 'UWBP_MapHud_C::isMoved' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, MapContentSize) == 0x000458, "Member 'UWBP_MapHud_C::MapContentSize' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, lastUpdatePos) == 0x000468, "Member 'UWBP_MapHud_C::lastUpdatePos' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, canDrag) == 0x000478, "Member 'UWBP_MapHud_C::canDrag' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, hasInited) == 0x000479, "Member 'UWBP_MapHud_C::hasInited' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, TickCount) == 0x00047C, "Member 'UWBP_MapHud_C::TickCount' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, hasMovedDuringTap) == 0x000480, "Member 'UWBP_MapHud_C::hasMovedDuringTap' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, isMouseDistanceRecord) == 0x000481, "Member 'UWBP_MapHud_C::isMouseDistanceRecord' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, followMapHudArray) == 0x000488, "Member 'UWBP_MapHud_C::followMapHudArray' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, useCustomConstrain) == 0x000498, "Member 'UWBP_MapHud_C::useCustomConstrain' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, customConstrainOffsetLeft) == 0x0004A0, "Member 'UWBP_MapHud_C::customConstrainOffsetLeft' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, customConstrainOffsetTop) == 0x0004A8, "Member 'UWBP_MapHud_C::customConstrainOffsetTop' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, customConstrainOffsetRight) == 0x0004B0, "Member 'UWBP_MapHud_C::customConstrainOffsetRight' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, customConstrainOffsetBottom) == 0x0004B8, "Member 'UWBP_MapHud_C::customConstrainOffsetBottom' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, cDeltaTime) == 0x0004C0, "Member 'UWBP_MapHud_C::cDeltaTime' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, LastTime) == 0x0004C8, "Member 'UWBP_MapHud_C::LastTime' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, canTick) == 0x0004D0, "Member 'UWBP_MapHud_C::canTick' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, ED_OnDragStart) == 0x0004D8, "Member 'UWBP_MapHud_C::ED_OnDragStart' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, ED_OnDragEnd) == 0x0004E8, "Member 'UWBP_MapHud_C::ED_OnDragEnd' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, banMouseInput) == 0x0004F8, "Member 'UWBP_MapHud_C::banMouseInput' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, pinchHelper) == 0x000500, "Member 'UWBP_MapHud_C::pinchHelper' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, isPinchInited) == 0x000508, "Member 'UWBP_MapHud_C::isPinchInited' has a wrong offset!");
static_assert(offsetof(UWBP_MapHud_C, firstPressPointerIndex) == 0x00050C, "Member 'UWBP_MapHud_C::firstPressPointerIndex' has a wrong offset!");

}

