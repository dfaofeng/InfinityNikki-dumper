#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerInAirMoveableComponent

#include "Basic.hpp"

#include "BP_PlayerInAirMoveableComponent_classes.hpp"
#include "BP_PlayerInAirMoveableComponent_parameters.hpp"


namespace SDK
{

// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_OnCharacterMovementModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PreviousCustomMode                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BP_OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BP_OnCharacterMovementModeChanged");

	Params::BP_PlayerInAirMoveableComponent_C_BP_OnCharacterMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_OnX6CharacterPossessed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BP_OnX6CharacterPossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BP_OnX6CharacterPossessed");

	Params::BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterPossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_OnX6CharacterUnPossessed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      PreviousController                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BP_OnX6CharacterUnPossessed(class AController* PreviousController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BP_OnX6CharacterUnPossessed");

	Params::BP_PlayerInAirMoveableComponent_C_BP_OnX6CharacterUnPossessed Parms{};

	Parms.PreviousController = PreviousController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_Public_ClearZAxisBrakingDecelerationOverride
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerInAirMoveableComponent_C::BP_Public_ClearZAxisBrakingDecelerationOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BP_Public_ClearZAxisBrakingDecelerationOverride");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_Public_ExitGamePlayInAirMovementMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerGameplayInAirMovementMode        MovementModeToExit                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BP_Public_ExitGamePlayInAirMovementMode(EPlayerGameplayInAirMovementMode MovementModeToExit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BP_Public_ExitGamePlayInAirMovementMode");

	Params::BP_PlayerInAirMoveableComponent_C_BP_Public_ExitGamePlayInAirMovementMode Parms{};

	Parms.MovementModeToExit = MovementModeToExit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_Public_SetZAxisBrakingDeceleartionOverride
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewZAxisBrakingDeceleration                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BP_Public_SetZAxisBrakingDeceleartionOverride(double NewZAxisBrakingDeceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BP_Public_SetZAxisBrakingDeceleartionOverride");

	Params::BP_PlayerInAirMoveableComponent_C_BP_Public_SetZAxisBrakingDeceleartionOverride Parms{};

	Parms.NewZAxisBrakingDeceleration = NewZAxisBrakingDeceleration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BP_Public_SwitchCharacterGamePlayInAirMovementMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerGameplayInAirMovementMode        NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BP_Public_SwitchCharacterGamePlayInAirMovementMode(EPlayerGameplayInAirMovementMode NewMovementMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BP_Public_SwitchCharacterGamePlayInAirMovementMode");

	Params::BP_PlayerInAirMoveableComponent_C_BP_Public_SwitchCharacterGamePlayInAirMovementMode Parms{};

	Parms.NewMovementMode = NewMovementMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_Get_CurrentInAirStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularFloatingJumpStage*              FallStage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsInSpecialJumpAnim                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERegularJumpMode*                       RegularJumpMode                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsJumpingInAir                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BPI_Get_CurrentInAirStates(ERegularFloatingJumpStage* FallStage, bool* IsInSpecialJumpAnim, ERegularJumpMode* RegularJumpMode, bool* IsJumpingInAir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_Get_CurrentInAirStates");

	Params::BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FallStage != nullptr)
		*FallStage = Parms.FallStage;

	if (IsInSpecialJumpAnim != nullptr)
		*IsInSpecialJumpAnim = Parms.IsInSpecialJumpAnim;

	if (RegularJumpMode != nullptr)
		*RegularJumpMode = Parms.RegularJumpMode;

	if (IsJumpingInAir != nullptr)
		*IsJumpingInAir = Parms.IsJumpingInAir;
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_Get_CurrentInAirValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 InCurrentHeight                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimaryDataAsset**               SpecialJumpDA                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BPI_Get_CurrentInAirValues(double* InCurrentHeight, class UPrimaryDataAsset** SpecialJumpDA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_Get_CurrentInAirValues");

	Params::BP_PlayerInAirMoveableComponent_C_BPI_Get_CurrentInAirValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InCurrentHeight != nullptr)
		*InCurrentHeight = Parms.InCurrentHeight;

	if (SpecialJumpDA != nullptr)
		*SpecialJumpDA = Parms.SpecialJumpDA;
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_Get_EssentialValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         InVelocity                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         InCurrentAcceleration                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InMaxAcceleration                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InTurnAroundAngle                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BPI_Get_EssentialValues(struct FVector* InVelocity, struct FVector* InCurrentAcceleration, double* InMaxAcceleration, double* InTurnAroundAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_Get_EssentialValues");

	Params::BP_PlayerInAirMoveableComponent_C_BPI_Get_EssentialValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InVelocity != nullptr)
		*InVelocity = std::move(Parms.InVelocity);

	if (InCurrentAcceleration != nullptr)
		*InCurrentAcceleration = std::move(Parms.InCurrentAcceleration);

	if (InMaxAcceleration != nullptr)
		*InMaxAcceleration = Parms.InMaxAcceleration;

	if (InTurnAroundAngle != nullptr)
		*InTurnAroundAngle = Parms.InTurnAroundAngle;
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_Get_MaxSpeedValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 CurMinAnalogWalkSpeed                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CurConfigMaxSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CurActualMaxSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BPI_Get_MaxSpeedValues(double* CurMinAnalogWalkSpeed, double* CurConfigMaxSpeed, double* CurActualMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_Get_MaxSpeedValues");

	Params::BP_PlayerInAirMoveableComponent_C_BPI_Get_MaxSpeedValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurMinAnalogWalkSpeed != nullptr)
		*CurMinAnalogWalkSpeed = Parms.CurMinAnalogWalkSpeed;

	if (CurConfigMaxSpeed != nullptr)
		*CurConfigMaxSpeed = Parms.CurConfigMaxSpeed;

	if (CurActualMaxSpeed != nullptr)
		*CurActualMaxSpeed = Parms.CurActualMaxSpeed;
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_Get_RegularFlyingConfigData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 LowFlyingSpeed                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 NormalFlyingSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 TopFlyingSpeed                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BPI_Get_RegularFlyingConfigData(double* LowFlyingSpeed, double* NormalFlyingSpeed, double* TopFlyingSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_Get_RegularFlyingConfigData");

	Params::BP_PlayerInAirMoveableComponent_C_BPI_Get_RegularFlyingConfigData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LowFlyingSpeed != nullptr)
		*LowFlyingSpeed = Parms.LowFlyingSpeed;

	if (NormalFlyingSpeed != nullptr)
		*NormalFlyingSpeed = Parms.NormalFlyingSpeed;

	if (TopFlyingSpeed != nullptr)
		*TopFlyingSpeed = Parms.TopFlyingSpeed;
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_OnCharacterMovementModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BPI_OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_OnCharacterMovementModeChanged");

	Params::BP_PlayerInAirMoveableComponent_C_BPI_OnCharacterMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_OnMovementModeDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerInAirMoveableComponent_C::BPI_OnMovementModeDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_OnMovementModeDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_OnMovementModeEnabled
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerInAirMoveableComponent_C::BPI_OnMovementModeEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_OnMovementModeEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_OnRotateCameraInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InputVector                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputDeviceKeyType                     DeviceType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BPI_OnRotateCameraInput(const struct FVector& InputVector, EInputDeviceKeyType DeviceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_OnRotateCameraInput");

	Params::BP_PlayerInAirMoveableComponent_C_BPI_OnRotateCameraInput Parms{};

	Parms.InputVector = std::move(InputVector);
	Parms.DeviceType = DeviceType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_OnSelfControlledByPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BPI_OnSelfControlledByPlayer(class APawn* PlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_OnSelfControlledByPlayer");

	Params::BP_PlayerInAirMoveableComponent_C_BPI_OnSelfControlledByPlayer Parms{};

	Parms.PlayerPawn = PlayerPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_OnSelfLoseControlledByPlayer
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerInAirMoveableComponent_C::BPI_OnSelfLoseControlledByPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_OnSelfLoseControlledByPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.BPI_SetPlayerToControlActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorToControl                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Controlled                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::BPI_SetPlayerToControlActor(class AActor* ActorToControl, bool* Controlled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "BPI_SetPlayerToControlActor");

	Params::BP_PlayerInAirMoveableComponent_C_BPI_SetPlayerToControlActor Parms{};

	Parms.ActorToControl = ActorToControl;

	UObject::ProcessEvent(Func, &Parms);

	if (Controlled != nullptr)
		*Controlled = Parms.Controlled;
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.ExecuteUbergraph_BP_PlayerInAirMoveableComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::ExecuteUbergraph_BP_PlayerInAirMoveableComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "ExecuteUbergraph_BP_PlayerInAirMoveableComponent");

	Params::BP_PlayerInAirMoveableComponent_C_ExecuteUbergraph_BP_PlayerInAirMoveableComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.InputAction_Crash
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressedOrRelease                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::InputAction_Crash(bool PressedOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "InputAction_Crash");

	Params::BP_PlayerInAirMoveableComponent_C_InputAction_Crash Parms{};

	Parms.PressedOrRelease = PressedOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.InputAction_Jump
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressedOrRelease                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::InputAction_Jump(bool PressedOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "InputAction_Jump");

	Params::BP_PlayerInAirMoveableComponent_C_InputAction_Jump Parms{};

	Parms.PressedOrRelease = PressedOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.InputAction_Sprint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressedOrRelease                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::InputAction_Sprint(bool PressedOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "InputAction_Sprint");

	Params::BP_PlayerInAirMoveableComponent_C_InputAction_Sprint Parms{};

	Parms.PressedOrRelease = PressedOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.InputAction_Walk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressOrRelease                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::InputAction_Walk(bool PressOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "InputAction_Walk");

	Params::BP_PlayerInAirMoveableComponent_C_InputAction_Walk Parms{};

	Parms.PressOrRelease = PressOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.OnMovementMoveXAxisAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::OnMovementMoveXAxisAction(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "OnMovementMoveXAxisAction");

	Params::BP_PlayerInAirMoveableComponent_C_OnMovementMoveXAxisAction Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.OnMovementMoveYAxisAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::OnMovementMoveYAxisAction(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "OnMovementMoveYAxisAction");

	Params::BP_PlayerInAirMoveableComponent_C_OnMovementMoveYAxisAction Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_PlayerInAirMoveableComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "ReceiveTick");

	Params::BP_PlayerInAirMoveableComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.UpdateFallState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularFloatingJumpStage               FallStage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSlide                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerInAirMoveableComponent_C::UpdateFallState(ERegularFloatingJumpStage FallStage, bool IsSlide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "UpdateFallState");

	Params::BP_PlayerInAirMoveableComponent_C_UpdateFallState Parms{};

	Parms.FallStage = FallStage;
	Parms.IsSlide = IsSlide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_PlayerInAirMoveableComponent_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerInAirMoveableComponent_C", "GetModuleName");

	Params::BP_PlayerInAirMoveableComponent_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

