#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperLuaFrameworkApp

#include "Basic.hpp"

#include "PaperLuaFrameworkApp_structs.hpp"


namespace SDK::Params
{

// Function PaperLuaFrameworkApp.PaperDeviceFilterManager.SetDeviceMatchingRulesByJson
// 0x0010 (0x0010 - 0x0000)
struct PaperDeviceFilterManager_SetDeviceMatchingRulesByJson final
{
public:
	class FString                                 JsonString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperDeviceFilterManager_SetDeviceMatchingRulesByJson) == 0x000008, "Wrong alignment on PaperDeviceFilterManager_SetDeviceMatchingRulesByJson");
static_assert(sizeof(PaperDeviceFilterManager_SetDeviceMatchingRulesByJson) == 0x000010, "Wrong size on PaperDeviceFilterManager_SetDeviceMatchingRulesByJson");
static_assert(offsetof(PaperDeviceFilterManager_SetDeviceMatchingRulesByJson, JsonString) == 0x000000, "Member 'PaperDeviceFilterManager_SetDeviceMatchingRulesByJson::JsonString' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperDeviceFilterManager.ShouldFilter
// 0x0001 (0x0001 - 0x0000)
struct PaperDeviceFilterManager_ShouldFilter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperDeviceFilterManager_ShouldFilter) == 0x000001, "Wrong alignment on PaperDeviceFilterManager_ShouldFilter");
static_assert(sizeof(PaperDeviceFilterManager_ShouldFilter) == 0x000001, "Wrong size on PaperDeviceFilterManager_ShouldFilter");
static_assert(offsetof(PaperDeviceFilterManager_ShouldFilter, ReturnValue) == 0x000000, "Member 'PaperDeviceFilterManager_ShouldFilter::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperDeviceFilterManager.ShouldForceQuit
// 0x0001 (0x0001 - 0x0000)
struct PaperDeviceFilterManager_ShouldForceQuit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperDeviceFilterManager_ShouldForceQuit) == 0x000001, "Wrong alignment on PaperDeviceFilterManager_ShouldForceQuit");
static_assert(sizeof(PaperDeviceFilterManager_ShouldForceQuit) == 0x000001, "Wrong size on PaperDeviceFilterManager_ShouldForceQuit");
static_assert(offsetof(PaperDeviceFilterManager_ShouldForceQuit, ReturnValue) == 0x000000, "Member 'PaperDeviceFilterManager_ShouldForceQuit::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotFixMgr.ApplyHotFix
// 0x0010 (0x0010 - 0x0000)
struct PaperHotFixMgr_ApplyHotFix final
{
public:
	TArray<class FString>                         PakFiles;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotFixMgr_ApplyHotFix) == 0x000008, "Wrong alignment on PaperHotFixMgr_ApplyHotFix");
static_assert(sizeof(PaperHotFixMgr_ApplyHotFix) == 0x000010, "Wrong size on PaperHotFixMgr_ApplyHotFix");
static_assert(offsetof(PaperHotFixMgr_ApplyHotFix, PakFiles) == 0x000000, "Member 'PaperHotFixMgr_ApplyHotFix::PakFiles' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CopyPaksTo
// 0x0038 (0x0038 - 0x0000)
struct PaperHotUpdateMgr_CopyPaksTo final
{
public:
	class FString                                 SrcDir;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SrcPakPattern;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DstDir;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_CopyPaksTo) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_CopyPaksTo");
static_assert(sizeof(PaperHotUpdateMgr_CopyPaksTo) == 0x000038, "Wrong size on PaperHotUpdateMgr_CopyPaksTo");
static_assert(offsetof(PaperHotUpdateMgr_CopyPaksTo, SrcDir) == 0x000000, "Member 'PaperHotUpdateMgr_CopyPaksTo::SrcDir' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_CopyPaksTo, SrcPakPattern) == 0x000010, "Member 'PaperHotUpdateMgr_CopyPaksTo::SrcPakPattern' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_CopyPaksTo, DstDir) == 0x000020, "Member 'PaperHotUpdateMgr_CopyPaksTo::DstDir' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_CopyPaksTo, ReturnValue) == 0x000030, "Member 'PaperHotUpdateMgr_CopyPaksTo::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetHotUpdateCompleteMapName
// 0x0008 (0x0008 - 0x0000)
struct PaperHotUpdateMgr_GetHotUpdateCompleteMapName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetHotUpdateCompleteMapName) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_GetHotUpdateCompleteMapName");
static_assert(sizeof(PaperHotUpdateMgr_GetHotUpdateCompleteMapName) == 0x000008, "Wrong size on PaperHotUpdateMgr_GetHotUpdateCompleteMapName");
static_assert(offsetof(PaperHotUpdateMgr_GetHotUpdateCompleteMapName, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_GetHotUpdateCompleteMapName::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetPackageVersion
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_GetPackageVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetPackageVersion) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_GetPackageVersion");
static_assert(sizeof(PaperHotUpdateMgr_GetPackageVersion) == 0x000010, "Wrong size on PaperHotUpdateMgr_GetPackageVersion");
static_assert(offsetof(PaperHotUpdateMgr_GetPackageVersion, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_GetPackageVersion::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetStorePackageVersion
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_GetStorePackageVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetStorePackageVersion) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_GetStorePackageVersion");
static_assert(sizeof(PaperHotUpdateMgr_GetStorePackageVersion) == 0x000010, "Wrong size on PaperHotUpdateMgr_GetStorePackageVersion");
static_assert(offsetof(PaperHotUpdateMgr_GetStorePackageVersion, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_GetStorePackageVersion::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetUnZipProgress
// 0x0004 (0x0004 - 0x0000)
struct PaperHotUpdateMgr_GetUnZipProgress final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetUnZipProgress) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_GetUnZipProgress");
static_assert(sizeof(PaperHotUpdateMgr_GetUnZipProgress) == 0x000004, "Wrong size on PaperHotUpdateMgr_GetUnZipProgress");
static_assert(offsetof(PaperHotUpdateMgr_GetUnZipProgress, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_GetUnZipProgress::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.IsEncryptionEnabled
// 0x0001 (0x0001 - 0x0000)
struct PaperHotUpdateMgr_IsEncryptionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_IsEncryptionEnabled) == 0x000001, "Wrong alignment on PaperHotUpdateMgr_IsEncryptionEnabled");
static_assert(sizeof(PaperHotUpdateMgr_IsEncryptionEnabled) == 0x000001, "Wrong size on PaperHotUpdateMgr_IsEncryptionEnabled");
static_assert(offsetof(PaperHotUpdateMgr_IsEncryptionEnabled, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_IsEncryptionEnabled::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.IsPaperAccessContentEnabled
// 0x0001 (0x0001 - 0x0000)
struct PaperHotUpdateMgr_IsPaperAccessContentEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_IsPaperAccessContentEnabled) == 0x000001, "Wrong alignment on PaperHotUpdateMgr_IsPaperAccessContentEnabled");
static_assert(sizeof(PaperHotUpdateMgr_IsPaperAccessContentEnabled) == 0x000001, "Wrong size on PaperHotUpdateMgr_IsPaperAccessContentEnabled");
static_assert(offsetof(PaperHotUpdateMgr_IsPaperAccessContentEnabled, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_IsPaperAccessContentEnabled::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.IsPaperAccessContentInClient
// 0x0001 (0x0001 - 0x0000)
struct PaperHotUpdateMgr_IsPaperAccessContentInClient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_IsPaperAccessContentInClient) == 0x000001, "Wrong alignment on PaperHotUpdateMgr_IsPaperAccessContentInClient");
static_assert(sizeof(PaperHotUpdateMgr_IsPaperAccessContentInClient) == 0x000001, "Wrong size on PaperHotUpdateMgr_IsPaperAccessContentInClient");
static_assert(offsetof(PaperHotUpdateMgr_IsPaperAccessContentInClient, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_IsPaperAccessContentInClient::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.IsSigningEnabled
// 0x0001 (0x0001 - 0x0000)
struct PaperHotUpdateMgr_IsSigningEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_IsSigningEnabled) == 0x000001, "Wrong alignment on PaperHotUpdateMgr_IsSigningEnabled");
static_assert(sizeof(PaperHotUpdateMgr_IsSigningEnabled) == 0x000001, "Wrong size on PaperHotUpdateMgr_IsSigningEnabled");
static_assert(offsetof(PaperHotUpdateMgr_IsSigningEnabled, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_IsSigningEnabled::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.PaperAssetPathToFilePath
// 0x0028 (0x0028 - 0x0000)
struct PaperHotUpdateMgr_PaperAssetPathToFilePath final
{
public:
	class FString                                 InAssetPath;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMap;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_PaperAssetPathToFilePath) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_PaperAssetPathToFilePath");
static_assert(sizeof(PaperHotUpdateMgr_PaperAssetPathToFilePath) == 0x000028, "Wrong size on PaperHotUpdateMgr_PaperAssetPathToFilePath");
static_assert(offsetof(PaperHotUpdateMgr_PaperAssetPathToFilePath, InAssetPath) == 0x000000, "Member 'PaperHotUpdateMgr_PaperAssetPathToFilePath::InAssetPath' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_PaperAssetPathToFilePath, IsMap) == 0x000010, "Member 'PaperHotUpdateMgr_PaperAssetPathToFilePath::IsMap' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_PaperAssetPathToFilePath, ReturnValue) == 0x000018, "Member 'PaperHotUpdateMgr_PaperAssetPathToFilePath::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.UnZipFile
// 0x0038 (0x0038 - 0x0000)
struct PaperHotUpdateMgr_UnZipFile final
{
public:
	class FString                                 SrcZipPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DstDir;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success)>                 OnEnded;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_UnZipFile) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_UnZipFile");
static_assert(sizeof(PaperHotUpdateMgr_UnZipFile) == 0x000038, "Wrong size on PaperHotUpdateMgr_UnZipFile");
static_assert(offsetof(PaperHotUpdateMgr_UnZipFile, SrcZipPath) == 0x000000, "Member 'PaperHotUpdateMgr_UnZipFile::SrcZipPath' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_UnZipFile, DstDir) == 0x000010, "Member 'PaperHotUpdateMgr_UnZipFile::DstDir' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_UnZipFile, OnEnded) == 0x000020, "Member 'PaperHotUpdateMgr_UnZipFile::OnEnded' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_UnZipFile, ReturnValue) == 0x000030, "Member 'PaperHotUpdateMgr_UnZipFile::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.AsyncExtractPakTask
// 0x0020 (0x0020 - 0x0000)
struct PaperHotUpdateMgr_AsyncExtractPakTask final
{
public:
	class FString                                 DownloadDir;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_AsyncExtractPakTask) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_AsyncExtractPakTask");
static_assert(sizeof(PaperHotUpdateMgr_AsyncExtractPakTask) == 0x000020, "Wrong size on PaperHotUpdateMgr_AsyncExtractPakTask");
static_assert(offsetof(PaperHotUpdateMgr_AsyncExtractPakTask, DownloadDir) == 0x000000, "Member 'PaperHotUpdateMgr_AsyncExtractPakTask::DownloadDir' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_AsyncExtractPakTask, Version) == 0x000010, "Member 'PaperHotUpdateMgr_AsyncExtractPakTask::Version' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.AsyncExtractSoFilesInPakTask
// 0x0028 (0x0028 - 0x0000)
struct PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask final
{
public:
	class FString                                 DownloadDir;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask");
static_assert(sizeof(PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask) == 0x000028, "Wrong size on PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask");
static_assert(offsetof(PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask, DownloadDir) == 0x000000, "Member 'PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask::DownloadDir' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask, Version) == 0x000010, "Member 'PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask::Version' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask, ReturnValue) == 0x000020, "Member 'PaperHotUpdateMgr_AsyncExtractSoFilesInPakTask::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.BackGroundDeleteDir
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_BackGroundDeleteDir final
{
public:
	class FString                                 DeleteDir;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_BackGroundDeleteDir) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_BackGroundDeleteDir");
static_assert(sizeof(PaperHotUpdateMgr_BackGroundDeleteDir) == 0x000010, "Wrong size on PaperHotUpdateMgr_BackGroundDeleteDir");
static_assert(offsetof(PaperHotUpdateMgr_BackGroundDeleteDir, DeleteDir) == 0x000000, "Member 'PaperHotUpdateMgr_BackGroundDeleteDir::DeleteDir' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.BroadcastOnHotUpdateCompleted
// 0x0018 (0x0018 - 0x0000)
struct PaperHotUpdateMgr_BroadcastOnHotUpdateCompleted final
{
public:
	bool                                          IsSuccess;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatusString;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_BroadcastOnHotUpdateCompleted) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_BroadcastOnHotUpdateCompleted");
static_assert(sizeof(PaperHotUpdateMgr_BroadcastOnHotUpdateCompleted) == 0x000018, "Wrong size on PaperHotUpdateMgr_BroadcastOnHotUpdateCompleted");
static_assert(offsetof(PaperHotUpdateMgr_BroadcastOnHotUpdateCompleted, IsSuccess) == 0x000000, "Member 'PaperHotUpdateMgr_BroadcastOnHotUpdateCompleted::IsSuccess' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_BroadcastOnHotUpdateCompleted, StatusString) == 0x000008, "Member 'PaperHotUpdateMgr_BroadcastOnHotUpdateCompleted::StatusString' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CheckOldDownloadData
// 0x0020 (0x0020 - 0x0000)
struct PaperHotUpdateMgr_CheckOldDownloadData final
{
public:
	TArray<class FString>                         FlagFiles;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 VersionInfoFile;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_CheckOldDownloadData) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_CheckOldDownloadData");
static_assert(sizeof(PaperHotUpdateMgr_CheckOldDownloadData) == 0x000020, "Wrong size on PaperHotUpdateMgr_CheckOldDownloadData");
static_assert(offsetof(PaperHotUpdateMgr_CheckOldDownloadData, FlagFiles) == 0x000000, "Member 'PaperHotUpdateMgr_CheckOldDownloadData::FlagFiles' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_CheckOldDownloadData, VersionInfoFile) == 0x000010, "Member 'PaperHotUpdateMgr_CheckOldDownloadData::VersionInfoFile' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CloseShaderbytecode
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_CloseShaderbytecode final
{
public:
	class FString                                 LibraryName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_CloseShaderbytecode) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_CloseShaderbytecode");
static_assert(sizeof(PaperHotUpdateMgr_CloseShaderbytecode) == 0x000010, "Wrong size on PaperHotUpdateMgr_CloseShaderbytecode");
static_assert(offsetof(PaperHotUpdateMgr_CloseShaderbytecode, LibraryName) == 0x000000, "Member 'PaperHotUpdateMgr_CloseShaderbytecode::LibraryName' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CreateDeleteRecordPak
// 0x0038 (0x0038 - 0x0000)
struct PaperHotUpdateMgr_CreateDeleteRecordPak final
{
public:
	class FString                                 LocalVersion_0;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PatchVersion;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DeleteRecordPakContents;                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_CreateDeleteRecordPak) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_CreateDeleteRecordPak");
static_assert(sizeof(PaperHotUpdateMgr_CreateDeleteRecordPak) == 0x000038, "Wrong size on PaperHotUpdateMgr_CreateDeleteRecordPak");
static_assert(offsetof(PaperHotUpdateMgr_CreateDeleteRecordPak, LocalVersion_0) == 0x000000, "Member 'PaperHotUpdateMgr_CreateDeleteRecordPak::LocalVersion_0' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_CreateDeleteRecordPak, PatchVersion) == 0x000010, "Member 'PaperHotUpdateMgr_CreateDeleteRecordPak::PatchVersion' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_CreateDeleteRecordPak, DeleteRecordPakContents) == 0x000020, "Member 'PaperHotUpdateMgr_CreateDeleteRecordPak::DeleteRecordPakContents' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_CreateDeleteRecordPak, ReturnValue) == 0x000030, "Member 'PaperHotUpdateMgr_CreateDeleteRecordPak::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CreateDynamicKeyChain
// 0x0020 (0x0020 - 0x0000)
struct PaperHotUpdateMgr_CreateDynamicKeyChain final
{
public:
	class FString                                 InKeyChainName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 DataBuffer;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_CreateDynamicKeyChain) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_CreateDynamicKeyChain");
static_assert(sizeof(PaperHotUpdateMgr_CreateDynamicKeyChain) == 0x000020, "Wrong size on PaperHotUpdateMgr_CreateDynamicKeyChain");
static_assert(offsetof(PaperHotUpdateMgr_CreateDynamicKeyChain, InKeyChainName) == 0x000000, "Member 'PaperHotUpdateMgr_CreateDynamicKeyChain::InKeyChainName' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_CreateDynamicKeyChain, DataBuffer) == 0x000010, "Member 'PaperHotUpdateMgr_CreateDynamicKeyChain::DataBuffer' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.CreateDynamicKeyChainByBase64String
// 0x0020 (0x0020 - 0x0000)
struct PaperHotUpdateMgr_CreateDynamicKeyChainByBase64String final
{
public:
	class FString                                 InKeyChainName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Base64Data;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_CreateDynamicKeyChainByBase64String) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_CreateDynamicKeyChainByBase64String");
static_assert(sizeof(PaperHotUpdateMgr_CreateDynamicKeyChainByBase64String) == 0x000020, "Wrong size on PaperHotUpdateMgr_CreateDynamicKeyChainByBase64String");
static_assert(offsetof(PaperHotUpdateMgr_CreateDynamicKeyChainByBase64String, InKeyChainName) == 0x000000, "Member 'PaperHotUpdateMgr_CreateDynamicKeyChainByBase64String::InKeyChainName' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_CreateDynamicKeyChainByBase64String, Base64Data) == 0x000010, "Member 'PaperHotUpdateMgr_CreateDynamicKeyChainByBase64String::Base64Data' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.ExtractPakFile
// 0x0038 (0x0038 - 0x0000)
struct PaperHotUpdateMgr_ExtractPakFile final
{
public:
	class FString                                 SrcFilePath;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DstDir;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMountPoint;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPakExtractResult                             ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_ExtractPakFile) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_ExtractPakFile");
static_assert(sizeof(PaperHotUpdateMgr_ExtractPakFile) == 0x000038, "Wrong size on PaperHotUpdateMgr_ExtractPakFile");
static_assert(offsetof(PaperHotUpdateMgr_ExtractPakFile, SrcFilePath) == 0x000000, "Member 'PaperHotUpdateMgr_ExtractPakFile::SrcFilePath' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_ExtractPakFile, DstDir) == 0x000010, "Member 'PaperHotUpdateMgr_ExtractPakFile::DstDir' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_ExtractPakFile, Version) == 0x000020, "Member 'PaperHotUpdateMgr_ExtractPakFile::Version' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_ExtractPakFile, bUseMountPoint) == 0x000030, "Member 'PaperHotUpdateMgr_ExtractPakFile::bUseMountPoint' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_ExtractPakFile, ReturnValue) == 0x000031, "Member 'PaperHotUpdateMgr_ExtractPakFile::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetBaseHashDataTable
// 0x0008 (0x0008 - 0x0000)
struct PaperHotUpdateMgr_GetBaseHashDataTable final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResponseCode;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetBaseHashDataTable) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_GetBaseHashDataTable");
static_assert(sizeof(PaperHotUpdateMgr_GetBaseHashDataTable) == 0x000008, "Wrong size on PaperHotUpdateMgr_GetBaseHashDataTable");
static_assert(offsetof(PaperHotUpdateMgr_GetBaseHashDataTable, bSuccess) == 0x000000, "Member 'PaperHotUpdateMgr_GetBaseHashDataTable::bSuccess' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_GetBaseHashDataTable, ResponseCode) == 0x000004, "Member 'PaperHotUpdateMgr_GetBaseHashDataTable::ResponseCode' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetCheckRepairProgress
// 0x0004 (0x0004 - 0x0000)
struct PaperHotUpdateMgr_GetCheckRepairProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetCheckRepairProgress) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_GetCheckRepairProgress");
static_assert(sizeof(PaperHotUpdateMgr_GetCheckRepairProgress) == 0x000004, "Wrong size on PaperHotUpdateMgr_GetCheckRepairProgress");
static_assert(offsetof(PaperHotUpdateMgr_GetCheckRepairProgress, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_GetCheckRepairProgress::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetCmsURL
// 0x0020 (0x0020 - 0x0000)
struct PaperHotUpdateMgr_GetCmsURL final
{
public:
	class FString                                 Mode;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetCmsURL) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_GetCmsURL");
static_assert(sizeof(PaperHotUpdateMgr_GetCmsURL) == 0x000020, "Wrong size on PaperHotUpdateMgr_GetCmsURL");
static_assert(offsetof(PaperHotUpdateMgr_GetCmsURL, Mode) == 0x000000, "Member 'PaperHotUpdateMgr_GetCmsURL::Mode' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_GetCmsURL, URL) == 0x000010, "Member 'PaperHotUpdateMgr_GetCmsURL::URL' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetExtractPaksProgress
// 0x0004 (0x0004 - 0x0000)
struct PaperHotUpdateMgr_GetExtractPaksProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetExtractPaksProgress) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_GetExtractPaksProgress");
static_assert(sizeof(PaperHotUpdateMgr_GetExtractPaksProgress) == 0x000004, "Wrong size on PaperHotUpdateMgr_GetExtractPaksProgress");
static_assert(offsetof(PaperHotUpdateMgr_GetExtractPaksProgress, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_GetExtractPaksProgress::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetKeyChainNonDynamicGroups
// 0x0020 (0x0020 - 0x0000)
struct PaperHotUpdateMgr_GetKeyChainNonDynamicGroups final
{
public:
	class FString                                 InKeyChainName;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetKeyChainNonDynamicGroups) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_GetKeyChainNonDynamicGroups");
static_assert(sizeof(PaperHotUpdateMgr_GetKeyChainNonDynamicGroups) == 0x000020, "Wrong size on PaperHotUpdateMgr_GetKeyChainNonDynamicGroups");
static_assert(offsetof(PaperHotUpdateMgr_GetKeyChainNonDynamicGroups, InKeyChainName) == 0x000000, "Member 'PaperHotUpdateMgr_GetKeyChainNonDynamicGroups::InKeyChainName' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_GetKeyChainNonDynamicGroups, ReturnValue) == 0x000010, "Member 'PaperHotUpdateMgr_GetKeyChainNonDynamicGroups::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetMicroCodeVersion
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_GetMicroCodeVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetMicroCodeVersion) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_GetMicroCodeVersion");
static_assert(sizeof(PaperHotUpdateMgr_GetMicroCodeVersion) == 0x000010, "Wrong size on PaperHotUpdateMgr_GetMicroCodeVersion");
static_assert(offsetof(PaperHotUpdateMgr_GetMicroCodeVersion, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_GetMicroCodeVersion::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetMotherBoardInfo
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_GetMotherBoardInfo final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetMotherBoardInfo) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_GetMotherBoardInfo");
static_assert(sizeof(PaperHotUpdateMgr_GetMotherBoardInfo) == 0x000010, "Wrong size on PaperHotUpdateMgr_GetMotherBoardInfo");
static_assert(offsetof(PaperHotUpdateMgr_GetMotherBoardInfo, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_GetMotherBoardInfo::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetMovePaksProgress
// 0x0004 (0x0004 - 0x0000)
struct PaperHotUpdateMgr_GetMovePaksProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetMovePaksProgress) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_GetMovePaksProgress");
static_assert(sizeof(PaperHotUpdateMgr_GetMovePaksProgress) == 0x000004, "Wrong size on PaperHotUpdateMgr_GetMovePaksProgress");
static_assert(offsetof(PaperHotUpdateMgr_GetMovePaksProgress, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_GetMovePaksProgress::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetRemoteFilePakHashMapCacheAsync
// 0x0078 (0x0078 - 0x0000)
struct PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync final
{
public:
	class FString                                 RemoteVersion_0;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InRemoteUrl;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocalVersion_0;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InLocalUrl;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InVersionKey;                                      // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InPakStarts;                                       // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         InFilterPaks;                                      // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InbUseIoStore;                                     // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync");
static_assert(sizeof(PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync) == 0x000078, "Wrong size on PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync");
static_assert(offsetof(PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync, RemoteVersion_0) == 0x000000, "Member 'PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync::RemoteVersion_0' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync, InRemoteUrl) == 0x000010, "Member 'PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync::InRemoteUrl' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync, LocalVersion_0) == 0x000020, "Member 'PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync::LocalVersion_0' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync, InLocalUrl) == 0x000030, "Member 'PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync::InLocalUrl' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync, InVersionKey) == 0x000040, "Member 'PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync::InVersionKey' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync, InPakStarts) == 0x000050, "Member 'PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync::InPakStarts' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync, InFilterPaks) == 0x000060, "Member 'PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync::InFilterPaks' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync, InbUseIoStore) == 0x000070, "Member 'PaperHotUpdateMgr_GetRemoteFilePakHashMapCacheAsync::InbUseIoStore' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetRemoteHashDataTable
// 0x0008 (0x0008 - 0x0000)
struct PaperHotUpdateMgr_GetRemoteHashDataTable final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResponseCode;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetRemoteHashDataTable) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_GetRemoteHashDataTable");
static_assert(sizeof(PaperHotUpdateMgr_GetRemoteHashDataTable) == 0x000008, "Wrong size on PaperHotUpdateMgr_GetRemoteHashDataTable");
static_assert(offsetof(PaperHotUpdateMgr_GetRemoteHashDataTable, bSuccess) == 0x000000, "Member 'PaperHotUpdateMgr_GetRemoteHashDataTable::bSuccess' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_GetRemoteHashDataTable, ResponseCode) == 0x000004, "Member 'PaperHotUpdateMgr_GetRemoteHashDataTable::ResponseCode' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.GetSavedPaksInfo
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_GetSavedPaksInfo final
{
public:
	TArray<class FString>                         SavedPaksInfo;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_GetSavedPaksInfo) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_GetSavedPaksInfo");
static_assert(sizeof(PaperHotUpdateMgr_GetSavedPaksInfo) == 0x000010, "Wrong size on PaperHotUpdateMgr_GetSavedPaksInfo");
static_assert(offsetof(PaperHotUpdateMgr_GetSavedPaksInfo, SavedPaksInfo) == 0x000000, "Member 'PaperHotUpdateMgr_GetSavedPaksInfo::SavedPaksInfo' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.HotUpdateHashCheckCall
// 0x0050 (0x0050 - 0x0000)
struct PaperHotUpdateMgr_HotUpdateHashCheckCall final
{
public:
	class FString                                 Version;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InPaperHashStructData;                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InShaderHashData;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InFastPatchData;                                   // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         BlackList;                                         // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_HotUpdateHashCheckCall) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_HotUpdateHashCheckCall");
static_assert(sizeof(PaperHotUpdateMgr_HotUpdateHashCheckCall) == 0x000050, "Wrong size on PaperHotUpdateMgr_HotUpdateHashCheckCall");
static_assert(offsetof(PaperHotUpdateMgr_HotUpdateHashCheckCall, Version) == 0x000000, "Member 'PaperHotUpdateMgr_HotUpdateHashCheckCall::Version' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_HotUpdateHashCheckCall, InPaperHashStructData) == 0x000010, "Member 'PaperHotUpdateMgr_HotUpdateHashCheckCall::InPaperHashStructData' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_HotUpdateHashCheckCall, InShaderHashData) == 0x000020, "Member 'PaperHotUpdateMgr_HotUpdateHashCheckCall::InShaderHashData' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_HotUpdateHashCheckCall, InFastPatchData) == 0x000030, "Member 'PaperHotUpdateMgr_HotUpdateHashCheckCall::InFastPatchData' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_HotUpdateHashCheckCall, BlackList) == 0x000040, "Member 'PaperHotUpdateMgr_HotUpdateHashCheckCall::BlackList' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.IsLoadingScreenFinished
// 0x0001 (0x0001 - 0x0000)
struct PaperHotUpdateMgr_IsLoadingScreenFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_IsLoadingScreenFinished) == 0x000001, "Wrong alignment on PaperHotUpdateMgr_IsLoadingScreenFinished");
static_assert(sizeof(PaperHotUpdateMgr_IsLoadingScreenFinished) == 0x000001, "Wrong size on PaperHotUpdateMgr_IsLoadingScreenFinished");
static_assert(offsetof(PaperHotUpdateMgr_IsLoadingScreenFinished, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_IsLoadingScreenFinished::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.LoadShaderbytecode
// 0x0028 (0x0028 - 0x0000)
struct PaperHotUpdateMgr_LoadShaderbytecode final
{
public:
	class FString                                 LibraryName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LibraryDir;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_LoadShaderbytecode) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_LoadShaderbytecode");
static_assert(sizeof(PaperHotUpdateMgr_LoadShaderbytecode) == 0x000028, "Wrong size on PaperHotUpdateMgr_LoadShaderbytecode");
static_assert(offsetof(PaperHotUpdateMgr_LoadShaderbytecode, LibraryName) == 0x000000, "Member 'PaperHotUpdateMgr_LoadShaderbytecode::LibraryName' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_LoadShaderbytecode, LibraryDir) == 0x000010, "Member 'PaperHotUpdateMgr_LoadShaderbytecode::LibraryDir' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_LoadShaderbytecode, ReturnValue) == 0x000020, "Member 'PaperHotUpdateMgr_LoadShaderbytecode::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.LoadSinglePakMap
// 0x0050 (0x0050 - 0x0000)
struct PaperHotUpdateMgr_LoadSinglePakMap final
{
public:
	TMap<class FString, class FString>            SinglePakMap;                                      // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_LoadSinglePakMap) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_LoadSinglePakMap");
static_assert(sizeof(PaperHotUpdateMgr_LoadSinglePakMap) == 0x000050, "Wrong size on PaperHotUpdateMgr_LoadSinglePakMap");
static_assert(offsetof(PaperHotUpdateMgr_LoadSinglePakMap, SinglePakMap) == 0x000000, "Member 'PaperHotUpdateMgr_LoadSinglePakMap::SinglePakMap' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.MountAllPakFiles
// 0x0020 (0x0020 - 0x0000)
struct PaperHotUpdateMgr_MountAllPakFiles final
{
public:
	class FString                                 PakFolder;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentVersion;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_MountAllPakFiles) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_MountAllPakFiles");
static_assert(sizeof(PaperHotUpdateMgr_MountAllPakFiles) == 0x000020, "Wrong size on PaperHotUpdateMgr_MountAllPakFiles");
static_assert(offsetof(PaperHotUpdateMgr_MountAllPakFiles, PakFolder) == 0x000000, "Member 'PaperHotUpdateMgr_MountAllPakFiles::PakFolder' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_MountAllPakFiles, CurrentVersion) == 0x000010, "Member 'PaperHotUpdateMgr_MountAllPakFiles::CurrentVersion' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.MovePaksToMountDir
// 0x0058 (0x0058 - 0x0000)
struct PaperHotUpdateMgr_MovePaksToMountDir final
{
public:
	TMap<class FString, class FString>            MoveTaskTb;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bNeedReboot;                                       // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_MovePaksToMountDir) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_MovePaksToMountDir");
static_assert(sizeof(PaperHotUpdateMgr_MovePaksToMountDir) == 0x000058, "Wrong size on PaperHotUpdateMgr_MovePaksToMountDir");
static_assert(offsetof(PaperHotUpdateMgr_MovePaksToMountDir, MoveTaskTb) == 0x000000, "Member 'PaperHotUpdateMgr_MovePaksToMountDir::MoveTaskTb' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_MovePaksToMountDir, bNeedReboot) == 0x000050, "Member 'PaperHotUpdateMgr_MovePaksToMountDir::bNeedReboot' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.NeedRebootOrNot
// 0x0018 (0x0018 - 0x0000)
struct PaperHotUpdateMgr_NeedRebootOrNot final
{
public:
	TArray<class FString>                         InstallTags;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_NeedRebootOrNot) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_NeedRebootOrNot");
static_assert(sizeof(PaperHotUpdateMgr_NeedRebootOrNot) == 0x000018, "Wrong size on PaperHotUpdateMgr_NeedRebootOrNot");
static_assert(offsetof(PaperHotUpdateMgr_NeedRebootOrNot, InstallTags) == 0x000000, "Member 'PaperHotUpdateMgr_NeedRebootOrNot::InstallTags' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_NeedRebootOrNot, ReturnValue) == 0x000010, "Member 'PaperHotUpdateMgr_NeedRebootOrNot::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.NeedRebootOrNotWithFileName
// 0x0018 (0x0018 - 0x0000)
struct PaperHotUpdateMgr_NeedRebootOrNotWithFileName final
{
public:
	class FString                                 InstallFileName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_NeedRebootOrNotWithFileName) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_NeedRebootOrNotWithFileName");
static_assert(sizeof(PaperHotUpdateMgr_NeedRebootOrNotWithFileName) == 0x000018, "Wrong size on PaperHotUpdateMgr_NeedRebootOrNotWithFileName");
static_assert(offsetof(PaperHotUpdateMgr_NeedRebootOrNotWithFileName, InstallFileName) == 0x000000, "Member 'PaperHotUpdateMgr_NeedRebootOrNotWithFileName::InstallFileName' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_NeedRebootOrNotWithFileName, ReturnValue) == 0x000010, "Member 'PaperHotUpdateMgr_NeedRebootOrNotWithFileName::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.PatchAllBinaryDiffs
// 0x0028 (0x0028 - 0x0000)
struct PaperHotUpdateMgr_PatchAllBinaryDiffs final
{
public:
	class FString                                 PatchVersion;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         FailedFiles;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_PatchAllBinaryDiffs) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_PatchAllBinaryDiffs");
static_assert(sizeof(PaperHotUpdateMgr_PatchAllBinaryDiffs) == 0x000028, "Wrong size on PaperHotUpdateMgr_PatchAllBinaryDiffs");
static_assert(offsetof(PaperHotUpdateMgr_PatchAllBinaryDiffs, PatchVersion) == 0x000000, "Member 'PaperHotUpdateMgr_PatchAllBinaryDiffs::PatchVersion' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_PatchAllBinaryDiffs, FailedFiles) == 0x000010, "Member 'PaperHotUpdateMgr_PatchAllBinaryDiffs::FailedFiles' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_PatchAllBinaryDiffs, ReturnValue) == 0x000020, "Member 'PaperHotUpdateMgr_PatchAllBinaryDiffs::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.PatchFile
// 0x0098 (0x0098 - 0x0000)
struct PaperHotUpdateMgr_PatchFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PatchedFilename;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            SinglePakMap;                                      // 0x0020(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 LocalVersion_0;                                    // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PatchVersion;                                      // 0x0080(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_PatchFile) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_PatchFile");
static_assert(sizeof(PaperHotUpdateMgr_PatchFile) == 0x000098, "Wrong size on PaperHotUpdateMgr_PatchFile");
static_assert(offsetof(PaperHotUpdateMgr_PatchFile, FilePath) == 0x000000, "Member 'PaperHotUpdateMgr_PatchFile::FilePath' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_PatchFile, PatchedFilename) == 0x000010, "Member 'PaperHotUpdateMgr_PatchFile::PatchedFilename' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_PatchFile, SinglePakMap) == 0x000020, "Member 'PaperHotUpdateMgr_PatchFile::SinglePakMap' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_PatchFile, LocalVersion_0) == 0x000070, "Member 'PaperHotUpdateMgr_PatchFile::LocalVersion_0' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_PatchFile, PatchVersion) == 0x000080, "Member 'PaperHotUpdateMgr_PatchFile::PatchVersion' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_PatchFile, ReturnValue) == 0x000090, "Member 'PaperHotUpdateMgr_PatchFile::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.PreSerializeVersionInfo
// 0x0060 (0x0060 - 0x0000)
struct PaperHotUpdateMgr_PreSerializeVersionInfo final
{
public:
	TMap<class FString, class FString>            VersionStrMap;                                     // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 DownloadDir;                                       // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_PreSerializeVersionInfo) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_PreSerializeVersionInfo");
static_assert(sizeof(PaperHotUpdateMgr_PreSerializeVersionInfo) == 0x000060, "Wrong size on PaperHotUpdateMgr_PreSerializeVersionInfo");
static_assert(offsetof(PaperHotUpdateMgr_PreSerializeVersionInfo, VersionStrMap) == 0x000000, "Member 'PaperHotUpdateMgr_PreSerializeVersionInfo::VersionStrMap' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_PreSerializeVersionInfo, DownloadDir) == 0x000050, "Member 'PaperHotUpdateMgr_PreSerializeVersionInfo::DownloadDir' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.RefreshDynamicKeyWithGroupIDForAllVersion
// 0x0060 (0x0060 - 0x0000)
struct PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForAllVersion final
{
public:
	TArray<class FString>                         RequestGroupIDs;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            DelayGroups;                                       // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForAllVersion) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForAllVersion");
static_assert(sizeof(PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForAllVersion) == 0x000060, "Wrong size on PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForAllVersion");
static_assert(offsetof(PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForAllVersion, RequestGroupIDs) == 0x000000, "Member 'PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForAllVersion::RequestGroupIDs' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForAllVersion, DelayGroups) == 0x000010, "Member 'PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForAllVersion::DelayGroups' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.RefreshDynamicKeyWithGroupIDForCurVersion
// 0x0020 (0x0020 - 0x0000)
struct PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForCurVersion final
{
public:
	TArray<class FString>                         RequestGroupIDs;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 CurVersion;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForCurVersion) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForCurVersion");
static_assert(sizeof(PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForCurVersion) == 0x000020, "Wrong size on PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForCurVersion");
static_assert(offsetof(PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForCurVersion, RequestGroupIDs) == 0x000000, "Member 'PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForCurVersion::RequestGroupIDs' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForCurVersion, CurVersion) == 0x000010, "Member 'PaperHotUpdateMgr_RefreshDynamicKeyWithGroupIDForCurVersion::CurVersion' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.RegisterDynamicKeyChain
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_RegisterDynamicKeyChain final
{
public:
	class FString                                 InKeyChainName;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_RegisterDynamicKeyChain) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_RegisterDynamicKeyChain");
static_assert(sizeof(PaperHotUpdateMgr_RegisterDynamicKeyChain) == 0x000010, "Wrong size on PaperHotUpdateMgr_RegisterDynamicKeyChain");
static_assert(offsetof(PaperHotUpdateMgr_RegisterDynamicKeyChain, InKeyChainName) == 0x000000, "Member 'PaperHotUpdateMgr_RegisterDynamicKeyChain::InKeyChainName' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.RegularMoveFileTask
// 0x0050 (0x0050 - 0x0000)
struct PaperHotUpdateMgr_RegularMoveFileTask final
{
public:
	TMap<class FString, class FString>            MoveTaskTb;                                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_RegularMoveFileTask) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_RegularMoveFileTask");
static_assert(sizeof(PaperHotUpdateMgr_RegularMoveFileTask) == 0x000050, "Wrong size on PaperHotUpdateMgr_RegularMoveFileTask");
static_assert(offsetof(PaperHotUpdateMgr_RegularMoveFileTask, MoveTaskTb) == 0x000000, "Member 'PaperHotUpdateMgr_RegularMoveFileTask::MoveTaskTb' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.ReloadPakReaders
// 0x0001 (0x0001 - 0x0000)
struct PaperHotUpdateMgr_ReloadPakReaders final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_ReloadPakReaders) == 0x000001, "Wrong alignment on PaperHotUpdateMgr_ReloadPakReaders");
static_assert(sizeof(PaperHotUpdateMgr_ReloadPakReaders) == 0x000001, "Wrong size on PaperHotUpdateMgr_ReloadPakReaders");
static_assert(offsetof(PaperHotUpdateMgr_ReloadPakReaders, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_ReloadPakReaders::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.RequestDynamicKeysWithVersions
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_RequestDynamicKeysWithVersions final
{
public:
	TArray<class FString>                         Versions;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_RequestDynamicKeysWithVersions) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_RequestDynamicKeysWithVersions");
static_assert(sizeof(PaperHotUpdateMgr_RequestDynamicKeysWithVersions) == 0x000010, "Wrong size on PaperHotUpdateMgr_RequestDynamicKeysWithVersions");
static_assert(offsetof(PaperHotUpdateMgr_RequestDynamicKeysWithVersions, Versions) == 0x000000, "Member 'PaperHotUpdateMgr_RequestDynamicKeysWithVersions::Versions' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SaveSinglePakMap
// 0x0050 (0x0050 - 0x0000)
struct PaperHotUpdateMgr_SaveSinglePakMap final
{
public:
	TMap<class FString, class FString>            SinglePakMap;                                      // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SaveSinglePakMap) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_SaveSinglePakMap");
static_assert(sizeof(PaperHotUpdateMgr_SaveSinglePakMap) == 0x000050, "Wrong size on PaperHotUpdateMgr_SaveSinglePakMap");
static_assert(offsetof(PaperHotUpdateMgr_SaveSinglePakMap, SinglePakMap) == 0x000000, "Member 'PaperHotUpdateMgr_SaveSinglePakMap::SinglePakMap' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SerializeGroupFromBase64Data
// 0x0030 (0x0030 - 0x0000)
struct PaperHotUpdateMgr_SerializeGroupFromBase64Data final
{
public:
	class FString                                 InKeyChainName;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupID;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Base64Data;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SerializeGroupFromBase64Data) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_SerializeGroupFromBase64Data");
static_assert(sizeof(PaperHotUpdateMgr_SerializeGroupFromBase64Data) == 0x000030, "Wrong size on PaperHotUpdateMgr_SerializeGroupFromBase64Data");
static_assert(offsetof(PaperHotUpdateMgr_SerializeGroupFromBase64Data, InKeyChainName) == 0x000000, "Member 'PaperHotUpdateMgr_SerializeGroupFromBase64Data::InKeyChainName' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_SerializeGroupFromBase64Data, GroupID) == 0x000010, "Member 'PaperHotUpdateMgr_SerializeGroupFromBase64Data::GroupID' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_SerializeGroupFromBase64Data, Base64Data) == 0x000020, "Member 'PaperHotUpdateMgr_SerializeGroupFromBase64Data::Base64Data' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SerializeGroupFromDataBuffer
// 0x0030 (0x0030 - 0x0000)
struct PaperHotUpdateMgr_SerializeGroupFromDataBuffer final
{
public:
	class FString                                 InKeyChainName;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupID;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 GroupDataBuffer;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SerializeGroupFromDataBuffer) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_SerializeGroupFromDataBuffer");
static_assert(sizeof(PaperHotUpdateMgr_SerializeGroupFromDataBuffer) == 0x000030, "Wrong size on PaperHotUpdateMgr_SerializeGroupFromDataBuffer");
static_assert(offsetof(PaperHotUpdateMgr_SerializeGroupFromDataBuffer, InKeyChainName) == 0x000000, "Member 'PaperHotUpdateMgr_SerializeGroupFromDataBuffer::InKeyChainName' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_SerializeGroupFromDataBuffer, GroupID) == 0x000010, "Member 'PaperHotUpdateMgr_SerializeGroupFromDataBuffer::GroupID' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_SerializeGroupFromDataBuffer, GroupDataBuffer) == 0x000020, "Member 'PaperHotUpdateMgr_SerializeGroupFromDataBuffer::GroupDataBuffer' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetAbortAssetCheck
// 0x0001 (0x0001 - 0x0000)
struct PaperHotUpdateMgr_SetAbortAssetCheck final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SetAbortAssetCheck) == 0x000001, "Wrong alignment on PaperHotUpdateMgr_SetAbortAssetCheck");
static_assert(sizeof(PaperHotUpdateMgr_SetAbortAssetCheck) == 0x000001, "Wrong size on PaperHotUpdateMgr_SetAbortAssetCheck");
static_assert(offsetof(PaperHotUpdateMgr_SetAbortAssetCheck, InValue) == 0x000000, "Member 'PaperHotUpdateMgr_SetAbortAssetCheck::InValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetCheckRepairProgress
// 0x0004 (0x0004 - 0x0000)
struct PaperHotUpdateMgr_SetCheckRepairProgress final
{
public:
	float                                         InCheckRepairProgress;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SetCheckRepairProgress) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_SetCheckRepairProgress");
static_assert(sizeof(PaperHotUpdateMgr_SetCheckRepairProgress) == 0x000004, "Wrong size on PaperHotUpdateMgr_SetCheckRepairProgress");
static_assert(offsetof(PaperHotUpdateMgr_SetCheckRepairProgress, InCheckRepairProgress) == 0x000000, "Member 'PaperHotUpdateMgr_SetCheckRepairProgress::InCheckRepairProgress' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetDownloadMode
// 0x0004 (0x0004 - 0x0000)
struct PaperHotUpdateMgr_SetDownloadMode final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SetDownloadMode) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_SetDownloadMode");
static_assert(sizeof(PaperHotUpdateMgr_SetDownloadMode) == 0x000004, "Wrong size on PaperHotUpdateMgr_SetDownloadMode");
static_assert(offsetof(PaperHotUpdateMgr_SetDownloadMode, Value) == 0x000000, "Member 'PaperHotUpdateMgr_SetDownloadMode::Value' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetDynamicKeyChainHttpBaseURL
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_SetDynamicKeyChainHttpBaseURL final
{
public:
	class FString                                 InHttpBaseURL;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SetDynamicKeyChainHttpBaseURL) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_SetDynamicKeyChainHttpBaseURL");
static_assert(sizeof(PaperHotUpdateMgr_SetDynamicKeyChainHttpBaseURL) == 0x000010, "Wrong size on PaperHotUpdateMgr_SetDynamicKeyChainHttpBaseURL");
static_assert(offsetof(PaperHotUpdateMgr_SetDynamicKeyChainHttpBaseURL, InHttpBaseURL) == 0x000000, "Member 'PaperHotUpdateMgr_SetDynamicKeyChainHttpBaseURL::InHttpBaseURL' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile
// 0x0008 (0x0008 - 0x0000)
struct PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile final
{
public:
	int32                                         QualityLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelID;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile");
static_assert(sizeof(PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile) == 0x000008, "Wrong size on PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile");
static_assert(offsetof(PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile, QualityLevel) == 0x000000, "Member 'PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile::QualityLevel' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile, LevelID) == 0x000004, "Member 'PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelAndLevelIDMaskForMobile::LevelID' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetPSOCacheMaterialQualityLevelMaskForMobile
// 0x0004 (0x0004 - 0x0000)
struct PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelMaskForMobile final
{
public:
	int32                                         QualityLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelMaskForMobile) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelMaskForMobile");
static_assert(sizeof(PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelMaskForMobile) == 0x000004, "Wrong size on PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelMaskForMobile");
static_assert(offsetof(PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelMaskForMobile, QualityLevel) == 0x000000, "Member 'PaperHotUpdateMgr_SetPSOCacheMaterialQualityLevelMaskForMobile::QualityLevel' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SetUrlWithTimeStamp
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_SetUrlWithTimeStamp final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SetUrlWithTimeStamp) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_SetUrlWithTimeStamp");
static_assert(sizeof(PaperHotUpdateMgr_SetUrlWithTimeStamp) == 0x000010, "Wrong size on PaperHotUpdateMgr_SetUrlWithTimeStamp");
static_assert(offsetof(PaperHotUpdateMgr_SetUrlWithTimeStamp, URL) == 0x000000, "Member 'PaperHotUpdateMgr_SetUrlWithTimeStamp::URL' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SmallestPackageWithBasePak
// 0x0008 (0x0008 - 0x0000)
struct PaperHotUpdateMgr_SmallestPackageWithBasePak final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResponseCode;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SmallestPackageWithBasePak) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_SmallestPackageWithBasePak");
static_assert(sizeof(PaperHotUpdateMgr_SmallestPackageWithBasePak) == 0x000008, "Wrong size on PaperHotUpdateMgr_SmallestPackageWithBasePak");
static_assert(offsetof(PaperHotUpdateMgr_SmallestPackageWithBasePak, bSuccess) == 0x000000, "Member 'PaperHotUpdateMgr_SmallestPackageWithBasePak::bSuccess' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_SmallestPackageWithBasePak, ResponseCode) == 0x000004, "Member 'PaperHotUpdateMgr_SmallestPackageWithBasePak::ResponseCode' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SmallestPackageWithDelayPak
// 0x0008 (0x0008 - 0x0000)
struct PaperHotUpdateMgr_SmallestPackageWithDelayPak final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResponseCode;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SmallestPackageWithDelayPak) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_SmallestPackageWithDelayPak");
static_assert(sizeof(PaperHotUpdateMgr_SmallestPackageWithDelayPak) == 0x000008, "Wrong size on PaperHotUpdateMgr_SmallestPackageWithDelayPak");
static_assert(offsetof(PaperHotUpdateMgr_SmallestPackageWithDelayPak, bSuccess) == 0x000000, "Member 'PaperHotUpdateMgr_SmallestPackageWithDelayPak::bSuccess' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_SmallestPackageWithDelayPak, ResponseCode) == 0x000004, "Member 'PaperHotUpdateMgr_SmallestPackageWithDelayPak::ResponseCode' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.SwitchToDefaultGameInstance
// 0x0001 (0x0001 - 0x0000)
struct PaperHotUpdateMgr_SwitchToDefaultGameInstance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_SwitchToDefaultGameInstance) == 0x000001, "Wrong alignment on PaperHotUpdateMgr_SwitchToDefaultGameInstance");
static_assert(sizeof(PaperHotUpdateMgr_SwitchToDefaultGameInstance) == 0x000001, "Wrong size on PaperHotUpdateMgr_SwitchToDefaultGameInstance");
static_assert(offsetof(PaperHotUpdateMgr_SwitchToDefaultGameInstance, ReturnValue) == 0x000000, "Member 'PaperHotUpdateMgr_SwitchToDefaultGameInstance::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.UnMountAllPakFiles
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateMgr_UnMountAllPakFiles final
{
public:
	class FString                                 PakFolder;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_UnMountAllPakFiles) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_UnMountAllPakFiles");
static_assert(sizeof(PaperHotUpdateMgr_UnMountAllPakFiles) == 0x000010, "Wrong size on PaperHotUpdateMgr_UnMountAllPakFiles");
static_assert(offsetof(PaperHotUpdateMgr_UnMountAllPakFiles, PakFolder) == 0x000000, "Member 'PaperHotUpdateMgr_UnMountAllPakFiles::PakFolder' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.UnMountAndDeleteSavedPaks
// 0x0018 (0x0018 - 0x0000)
struct PaperHotUpdateMgr_UnMountAndDeleteSavedPaks final
{
public:
	TArray<class FString>                         PakNameList;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCleanFileName;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsyncExecute;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_UnMountAndDeleteSavedPaks) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_UnMountAndDeleteSavedPaks");
static_assert(sizeof(PaperHotUpdateMgr_UnMountAndDeleteSavedPaks) == 0x000018, "Wrong size on PaperHotUpdateMgr_UnMountAndDeleteSavedPaks");
static_assert(offsetof(PaperHotUpdateMgr_UnMountAndDeleteSavedPaks, PakNameList) == 0x000000, "Member 'PaperHotUpdateMgr_UnMountAndDeleteSavedPaks::PakNameList' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_UnMountAndDeleteSavedPaks, bCleanFileName) == 0x000010, "Member 'PaperHotUpdateMgr_UnMountAndDeleteSavedPaks::bCleanFileName' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_UnMountAndDeleteSavedPaks, bAsyncExecute) == 0x000011, "Member 'PaperHotUpdateMgr_UnMountAndDeleteSavedPaks::bAsyncExecute' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.UnMountAndDeleteSavedPaksByPakPrefix
// 0x0018 (0x0018 - 0x0000)
struct PaperHotUpdateMgr_UnMountAndDeleteSavedPaksByPakPrefix final
{
public:
	TArray<class FString>                         PakPrefixList;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperHotUpdateMgr_UnMountAndDeleteSavedPaksByPakPrefix) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_UnMountAndDeleteSavedPaksByPakPrefix");
static_assert(sizeof(PaperHotUpdateMgr_UnMountAndDeleteSavedPaksByPakPrefix) == 0x000018, "Wrong size on PaperHotUpdateMgr_UnMountAndDeleteSavedPaksByPakPrefix");
static_assert(offsetof(PaperHotUpdateMgr_UnMountAndDeleteSavedPaksByPakPrefix, PakPrefixList) == 0x000000, "Member 'PaperHotUpdateMgr_UnMountAndDeleteSavedPaksByPakPrefix::PakPrefixList' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_UnMountAndDeleteSavedPaksByPakPrefix, ReturnValue) == 0x000010, "Member 'PaperHotUpdateMgr_UnMountAndDeleteSavedPaksByPakPrefix::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.UpdateDelaySinglePakMap
// 0x0030 (0x0030 - 0x0000)
struct PaperHotUpdateMgr_UpdateDelaySinglePakMap final
{
public:
	TArray<class FString>                         OldSingleTags;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 LocalVersion_0;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RemoteVersion_0;                                   // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_UpdateDelaySinglePakMap) == 0x000008, "Wrong alignment on PaperHotUpdateMgr_UpdateDelaySinglePakMap");
static_assert(sizeof(PaperHotUpdateMgr_UpdateDelaySinglePakMap) == 0x000030, "Wrong size on PaperHotUpdateMgr_UpdateDelaySinglePakMap");
static_assert(offsetof(PaperHotUpdateMgr_UpdateDelaySinglePakMap, OldSingleTags) == 0x000000, "Member 'PaperHotUpdateMgr_UpdateDelaySinglePakMap::OldSingleTags' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_UpdateDelaySinglePakMap, LocalVersion_0) == 0x000010, "Member 'PaperHotUpdateMgr_UpdateDelaySinglePakMap::LocalVersion_0' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateMgr_UpdateDelaySinglePakMap, RemoteVersion_0) == 0x000020, "Member 'PaperHotUpdateMgr_UpdateDelaySinglePakMap::RemoteVersion_0' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateMgr.WaitForShaderCache
// 0x0004 (0x0004 - 0x0000)
struct PaperHotUpdateMgr_WaitForShaderCache final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateMgr_WaitForShaderCache) == 0x000004, "Wrong alignment on PaperHotUpdateMgr_WaitForShaderCache");
static_assert(sizeof(PaperHotUpdateMgr_WaitForShaderCache) == 0x000004, "Wrong size on PaperHotUpdateMgr_WaitForShaderCache");
static_assert(offsetof(PaperHotUpdateMgr_WaitForShaderCache, Progress) == 0x000000, "Member 'PaperHotUpdateMgr_WaitForShaderCache::Progress' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateRpc.GetServiceIPWithPort
// 0x0010 (0x0010 - 0x0000)
struct PaperHotUpdateRpc_GetServiceIPWithPort final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateRpc_GetServiceIPWithPort) == 0x000008, "Wrong alignment on PaperHotUpdateRpc_GetServiceIPWithPort");
static_assert(sizeof(PaperHotUpdateRpc_GetServiceIPWithPort) == 0x000010, "Wrong size on PaperHotUpdateRpc_GetServiceIPWithPort");
static_assert(offsetof(PaperHotUpdateRpc_GetServiceIPWithPort, ReturnValue) == 0x000000, "Member 'PaperHotUpdateRpc_GetServiceIPWithPort::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateRpc.StartListening
// 0x0001 (0x0001 - 0x0000)
struct PaperHotUpdateRpc_StartListening final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateRpc_StartListening) == 0x000001, "Wrong alignment on PaperHotUpdateRpc_StartListening");
static_assert(sizeof(PaperHotUpdateRpc_StartListening) == 0x000001, "Wrong size on PaperHotUpdateRpc_StartListening");
static_assert(offsetof(PaperHotUpdateRpc_StartListening, ReturnValue) == 0x000000, "Member 'PaperHotUpdateRpc_StartListening::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateRpc.StopListening
// 0x0001 (0x0001 - 0x0000)
struct PaperHotUpdateRpc_StopListening final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateRpc_StopListening) == 0x000001, "Wrong alignment on PaperHotUpdateRpc_StopListening");
static_assert(sizeof(PaperHotUpdateRpc_StopListening) == 0x000001, "Wrong size on PaperHotUpdateRpc_StopListening");
static_assert(offsetof(PaperHotUpdateRpc_StopListening, ReturnValue) == 0x000000, "Member 'PaperHotUpdateRpc_StopListening::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateRuntimeBGCommandlet.OnHotUpdateCompleted
// 0x0018 (0x0018 - 0x0000)
struct PaperHotUpdateRuntimeBGCommandlet_OnHotUpdateCompleted final
{
public:
	bool                                          IsSuccess;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatusString;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateRuntimeBGCommandlet_OnHotUpdateCompleted) == 0x000008, "Wrong alignment on PaperHotUpdateRuntimeBGCommandlet_OnHotUpdateCompleted");
static_assert(sizeof(PaperHotUpdateRuntimeBGCommandlet_OnHotUpdateCompleted) == 0x000018, "Wrong size on PaperHotUpdateRuntimeBGCommandlet_OnHotUpdateCompleted");
static_assert(offsetof(PaperHotUpdateRuntimeBGCommandlet_OnHotUpdateCompleted, IsSuccess) == 0x000000, "Member 'PaperHotUpdateRuntimeBGCommandlet_OnHotUpdateCompleted::IsSuccess' has a wrong offset!");
static_assert(offsetof(PaperHotUpdateRuntimeBGCommandlet_OnHotUpdateCompleted, StatusString) == 0x000008, "Member 'PaperHotUpdateRuntimeBGCommandlet_OnHotUpdateCompleted::StatusString' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateSubsystem.GetPaperDeviceFilterManager
// 0x0008 (0x0008 - 0x0000)
struct PaperHotUpdateSubsystem_GetPaperDeviceFilterManager final
{
public:
	class UPaperDeviceFilterManager*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateSubsystem_GetPaperDeviceFilterManager) == 0x000008, "Wrong alignment on PaperHotUpdateSubsystem_GetPaperDeviceFilterManager");
static_assert(sizeof(PaperHotUpdateSubsystem_GetPaperDeviceFilterManager) == 0x000008, "Wrong size on PaperHotUpdateSubsystem_GetPaperDeviceFilterManager");
static_assert(offsetof(PaperHotUpdateSubsystem_GetPaperDeviceFilterManager, ReturnValue) == 0x000000, "Member 'PaperHotUpdateSubsystem_GetPaperDeviceFilterManager::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateSubsystem.GetPaperHotUpdateMgr
// 0x0008 (0x0008 - 0x0000)
struct PaperHotUpdateSubsystem_GetPaperHotUpdateMgr final
{
public:
	class UPaperHotUpdateMgr*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateSubsystem_GetPaperHotUpdateMgr) == 0x000008, "Wrong alignment on PaperHotUpdateSubsystem_GetPaperHotUpdateMgr");
static_assert(sizeof(PaperHotUpdateSubsystem_GetPaperHotUpdateMgr) == 0x000008, "Wrong size on PaperHotUpdateSubsystem_GetPaperHotUpdateMgr");
static_assert(offsetof(PaperHotUpdateSubsystem_GetPaperHotUpdateMgr, ReturnValue) == 0x000000, "Member 'PaperHotUpdateSubsystem_GetPaperHotUpdateMgr::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperHotUpdateSubsystem.GetPaperHotUpdateRpc
// 0x0008 (0x0008 - 0x0000)
struct PaperHotUpdateSubsystem_GetPaperHotUpdateRpc final
{
public:
	class UPaperHotUpdateRpc*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperHotUpdateSubsystem_GetPaperHotUpdateRpc) == 0x000008, "Wrong alignment on PaperHotUpdateSubsystem_GetPaperHotUpdateRpc");
static_assert(sizeof(PaperHotUpdateSubsystem_GetPaperHotUpdateRpc) == 0x000008, "Wrong size on PaperHotUpdateSubsystem_GetPaperHotUpdateRpc");
static_assert(offsetof(PaperHotUpdateSubsystem_GetPaperHotUpdateRpc, ReturnValue) == 0x000000, "Member 'PaperHotUpdateSubsystem_GetPaperHotUpdateRpc::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkApp.PaperPrivacyManager.EnableMotionSensor
// 0x0001 (0x0001 - 0x0000)
struct PaperPrivacyManager_EnableMotionSensor final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperPrivacyManager_EnableMotionSensor) == 0x000001, "Wrong alignment on PaperPrivacyManager_EnableMotionSensor");
static_assert(sizeof(PaperPrivacyManager_EnableMotionSensor) == 0x000001, "Wrong size on PaperPrivacyManager_EnableMotionSensor");
static_assert(offsetof(PaperPrivacyManager_EnableMotionSensor, bEnable) == 0x000000, "Member 'PaperPrivacyManager_EnableMotionSensor::bEnable' has a wrong offset!");

}

