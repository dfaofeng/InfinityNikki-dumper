#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Locomotion_GroundState

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "EInputDeviceKeyType_structs.hpp"
#include "Engine_structs.hpp"
#include "EPlayerMovementScenarios_structs.hpp"
#include "X6Game_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_Locomotion_GroundState.BPI_Locomotion_GroundState_C
// 0x0000 (0x0000 - 0x0000)
class IBPI_Locomotion_GroundState_C final : public IInterface
{
public:
	void BPI_Get_PlayerStates(bool* IsInState_AimMode);
	void BPI_Get_MaxSpeedValues(double* CurMinAnalogWalkSpeed, double* CurConfigMaxSpeed, double* CurActualMaxSpeed);
	void BPI_Get_EssentialValues(struct FVector* InVelocity, struct FVector* InCurrentAcceleration, double* InMaxAcceleration, double* InTurnAroundAngle, double* InSlopeAngle, double* InStartTurnAroundAngle, double* InCurConfigMaxSpeed);
	void BPI_Get_CurrentGroundStates(EMovementMode* PawnMovementMode, ERegularLocomotionType* AllowedGait, EPlayerMovementScenarios* MovementScenario, EInputDeviceKeyType* CurInputDeviceKeyType);
	void BPI_Get_ConfigData(double* WalkSpeed, double* RunSpeed, double* SprintSpeed);
	void BPI_Get_BalanceBeamStates(bool* CanMoveOnValidInput, bool* IsEnterTowardSideOfBeam, bool* IsCurInputValid);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_Locomotion_GroundState_C">();
	}
	static class IBPI_Locomotion_GroundState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_Locomotion_GroundState_C>();
	}
};
static_assert(alignof(IBPI_Locomotion_GroundState_C) == 0x000001, "Wrong alignment on IBPI_Locomotion_GroundState_C");
static_assert(sizeof(IBPI_Locomotion_GroundState_C) == 0x000001, "Wrong size on IBPI_Locomotion_GroundState_C");

}

