#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PSDKPay

#include "Basic.hpp"

#include "PSDKBasic_structs.hpp"


namespace SDK
{

// Enum PSDKPay.FPSDKListMarketingProductBuyStatus
// NumValues: 0x0005
enum class EFPSDKListMarketingProductBuyStatus : uint32
{
	Success                                  = 0,
	SoleOut                                  = 1,
	NotEnoughRoleLevel                       = 2,
	Other                                    = 999,
	FPSDKListMarketingProductBuyStatus_MAX   = 1000,
};

// ScriptStruct PSDKPay.PSDKChannelProductInfoPrice
// 0x0078 (0x0130 - 0x00B8)
struct FPSDKChannelProductInfoPrice final : public FJsonData
{
public:
	class FString                                 currency;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Amount;                                            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 currency_symbol;                                   // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Format;                                            // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x1];                                      // 0x0110(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          is_symbol_behind;                                  // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 origin_amount;                                     // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKChannelProductInfoPrice) == 0x000008, "Wrong alignment on FPSDKChannelProductInfoPrice");
static_assert(sizeof(FPSDKChannelProductInfoPrice) == 0x000130, "Wrong size on FPSDKChannelProductInfoPrice");
static_assert(offsetof(FPSDKChannelProductInfoPrice, currency) == 0x0000B8, "Member 'FPSDKChannelProductInfoPrice::currency' has a wrong offset!");
static_assert(offsetof(FPSDKChannelProductInfoPrice, Amount) == 0x0000D0, "Member 'FPSDKChannelProductInfoPrice::Amount' has a wrong offset!");
static_assert(offsetof(FPSDKChannelProductInfoPrice, currency_symbol) == 0x0000E8, "Member 'FPSDKChannelProductInfoPrice::currency_symbol' has a wrong offset!");
static_assert(offsetof(FPSDKChannelProductInfoPrice, Format) == 0x000100, "Member 'FPSDKChannelProductInfoPrice::Format' has a wrong offset!");
static_assert(offsetof(FPSDKChannelProductInfoPrice, is_symbol_behind) == 0x000111, "Member 'FPSDKChannelProductInfoPrice::is_symbol_behind' has a wrong offset!");
static_assert(offsetof(FPSDKChannelProductInfoPrice, origin_amount) == 0x000118, "Member 'FPSDKChannelProductInfoPrice::origin_amount' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKChannelProductInfoDetail
// 0x0030 (0x00E8 - 0x00B8)
struct FPSDKChannelProductInfoDetail final : public FJsonData
{
public:
	class FString                                 Title;                                             // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKChannelProductInfoDetail) == 0x000008, "Wrong alignment on FPSDKChannelProductInfoDetail");
static_assert(sizeof(FPSDKChannelProductInfoDetail) == 0x0000E8, "Wrong size on FPSDKChannelProductInfoDetail");
static_assert(offsetof(FPSDKChannelProductInfoDetail, Title) == 0x0000B8, "Member 'FPSDKChannelProductInfoDetail::Title' has a wrong offset!");
static_assert(offsetof(FPSDKChannelProductInfoDetail, Description) == 0x0000D0, "Member 'FPSDKChannelProductInfoDetail::Description' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKChannelProductInfo
// 0x0240 (0x02F8 - 0x00B8)
struct FPSDKChannelProductInfo final : public FJsonData
{
public:
	class FString                                 channel_product_id;                                // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKChannelProductInfoPrice           price_detail;                                      // 0x00D0(0x0130)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKChannelProductInfoDetail          product_info_detail;                               // 0x0208(0x00E8)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKChannelProductInfo) == 0x000008, "Wrong alignment on FPSDKChannelProductInfo");
static_assert(sizeof(FPSDKChannelProductInfo) == 0x0002F8, "Wrong size on FPSDKChannelProductInfo");
static_assert(offsetof(FPSDKChannelProductInfo, channel_product_id) == 0x0000B8, "Member 'FPSDKChannelProductInfo::channel_product_id' has a wrong offset!");
static_assert(offsetof(FPSDKChannelProductInfo, price_detail) == 0x0000D0, "Member 'FPSDKChannelProductInfo::price_detail' has a wrong offset!");
static_assert(offsetof(FPSDKChannelProductInfo, product_info_detail) == 0x000208, "Member 'FPSDKChannelProductInfo::product_info_detail' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKChannelProductInfos
// 0x0018 (0x00D0 - 0x00B8)
struct FPSDKChannelProductInfos final : public FJsonData
{
public:
	TArray<struct FPSDKChannelProductInfo>        channel_product_infos;                             // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKChannelProductInfos) == 0x000008, "Wrong alignment on FPSDKChannelProductInfos");
static_assert(sizeof(FPSDKChannelProductInfos) == 0x0000D0, "Wrong size on FPSDKChannelProductInfos");
static_assert(offsetof(FPSDKChannelProductInfos, channel_product_infos) == 0x0000B8, "Member 'FPSDKChannelProductInfos::channel_product_infos' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductCommonInfo
// 0x0100 (0x01B8 - 0x00B8)
struct FPSDKListMarketingProductCommonInfo final : public FJsonData
{
public:
	int32                                         client_id;                                         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 zone_id;                                           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x4];                                       // 0x00D0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         plat_id;                                           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Area;                                              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 role_id;                                           // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 shelf_id;                                          // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Nid;                                               // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 category_id;                                       // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 second_category_id;                                // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x8];                                      // 0x0180(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 tab_id;                                            // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 second_tab_id;                                     // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B0[0x8];                                      // 0x01B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductCommonInfo) == 0x000008, "Wrong alignment on FPSDKListMarketingProductCommonInfo");
static_assert(sizeof(FPSDKListMarketingProductCommonInfo) == 0x0001B8, "Wrong size on FPSDKListMarketingProductCommonInfo");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, client_id) == 0x0000B8, "Member 'FPSDKListMarketingProductCommonInfo::client_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, zone_id) == 0x0000C0, "Member 'FPSDKListMarketingProductCommonInfo::zone_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, plat_id) == 0x0000D4, "Member 'FPSDKListMarketingProductCommonInfo::plat_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, Region) == 0x0000E0, "Member 'FPSDKListMarketingProductCommonInfo::Region' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, Area) == 0x0000F8, "Member 'FPSDKListMarketingProductCommonInfo::Area' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, role_id) == 0x000110, "Member 'FPSDKListMarketingProductCommonInfo::role_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, shelf_id) == 0x000128, "Member 'FPSDKListMarketingProductCommonInfo::shelf_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, Nid) == 0x000140, "Member 'FPSDKListMarketingProductCommonInfo::Nid' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, category_id) == 0x000158, "Member 'FPSDKListMarketingProductCommonInfo::category_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, second_category_id) == 0x000170, "Member 'FPSDKListMarketingProductCommonInfo::second_category_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, tab_id) == 0x000188, "Member 'FPSDKListMarketingProductCommonInfo::tab_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductCommonInfo, second_tab_id) == 0x0001A0, "Member 'FPSDKListMarketingProductCommonInfo::second_tab_id' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductLang
// 0x0030 (0x00E8 - 0x00B8)
struct FPSDKListMarketingProductLang final : public FJsonData
{
public:
	class FString                                 lang;                                              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductLang) == 0x000008, "Wrong alignment on FPSDKListMarketingProductLang");
static_assert(sizeof(FPSDKListMarketingProductLang) == 0x0000E8, "Wrong size on FPSDKListMarketingProductLang");
static_assert(offsetof(FPSDKListMarketingProductLang, lang) == 0x0000B8, "Member 'FPSDKListMarketingProductLang::lang' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLang, Text) == 0x0000D0, "Member 'FPSDKListMarketingProductLang::Text' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductLabelInfo
// 0x0028 (0x00E0 - 0x00B8)
struct FPSDKListMarketingProductLabelInfo final : public FJsonData
{
public:
	int64                                         ID;                                                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLang>  Name;                                              // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductLabelInfo) == 0x000008, "Wrong alignment on FPSDKListMarketingProductLabelInfo");
static_assert(sizeof(FPSDKListMarketingProductLabelInfo) == 0x0000E0, "Wrong size on FPSDKListMarketingProductLabelInfo");
static_assert(offsetof(FPSDKListMarketingProductLabelInfo, ID) == 0x0000B8, "Member 'FPSDKListMarketingProductLabelInfo::ID' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLabelInfo, Name) == 0x0000C8, "Member 'FPSDKListMarketingProductLabelInfo::Name' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductMoney
// 0x0060 (0x0118 - 0x00B8)
struct FPSDKListMarketingProductMoney final : public FJsonData
{
public:
	class FString                                 currency;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Amount;                                            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 currency_symbol;                                   // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Format;                                            // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x1];                                      // 0x0110(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          is_symbol_behind;                                  // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductMoney) == 0x000008, "Wrong alignment on FPSDKListMarketingProductMoney");
static_assert(sizeof(FPSDKListMarketingProductMoney) == 0x000118, "Wrong size on FPSDKListMarketingProductMoney");
static_assert(offsetof(FPSDKListMarketingProductMoney, currency) == 0x0000B8, "Member 'FPSDKListMarketingProductMoney::currency' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductMoney, Amount) == 0x0000D0, "Member 'FPSDKListMarketingProductMoney::Amount' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductMoney, currency_symbol) == 0x0000E8, "Member 'FPSDKListMarketingProductMoney::currency_symbol' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductMoney, Format) == 0x000100, "Member 'FPSDKListMarketingProductMoney::Format' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductMoney, is_symbol_behind) == 0x000111, "Member 'FPSDKListMarketingProductMoney::is_symbol_behind' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductRandomPropertyInfo
// 0x0038 (0x00F0 - 0x00B8)
struct FPSDKListMarketingProductRandomPropertyInfo final : public FJsonData
{
public:
	class FString                                 ptob;                                              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Min;                                               // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Max;                                               // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x1];                                       // 0x00E8(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          is_along;                                          // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductRandomPropertyInfo) == 0x000008, "Wrong alignment on FPSDKListMarketingProductRandomPropertyInfo");
static_assert(sizeof(FPSDKListMarketingProductRandomPropertyInfo) == 0x0000F0, "Wrong size on FPSDKListMarketingProductRandomPropertyInfo");
static_assert(offsetof(FPSDKListMarketingProductRandomPropertyInfo, ptob) == 0x0000B8, "Member 'FPSDKListMarketingProductRandomPropertyInfo::ptob' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductRandomPropertyInfo, Min) == 0x0000D0, "Member 'FPSDKListMarketingProductRandomPropertyInfo::Min' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductRandomPropertyInfo, Max) == 0x0000E0, "Member 'FPSDKListMarketingProductRandomPropertyInfo::Max' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductRandomPropertyInfo, is_along) == 0x0000E9, "Member 'FPSDKListMarketingProductRandomPropertyInfo::is_along' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductGiftPropertyInfo
// 0x0028 (0x00E0 - 0x00B8)
struct FPSDKListMarketingProductGiftPropertyInfo final : public FJsonData
{
public:
	int64                                         Type;                                              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLang>  Name;                                              // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductGiftPropertyInfo) == 0x000008, "Wrong alignment on FPSDKListMarketingProductGiftPropertyInfo");
static_assert(sizeof(FPSDKListMarketingProductGiftPropertyInfo) == 0x0000E0, "Wrong size on FPSDKListMarketingProductGiftPropertyInfo");
static_assert(offsetof(FPSDKListMarketingProductGiftPropertyInfo, Type) == 0x0000B8, "Member 'FPSDKListMarketingProductGiftPropertyInfo::Type' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductGiftPropertyInfo, Name) == 0x0000C8, "Member 'FPSDKListMarketingProductGiftPropertyInfo::Name' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductRebatePropertyInfo
// 0x0028 (0x00E0 - 0x00B8)
struct FPSDKListMarketingProductRebatePropertyInfo final : public FJsonData
{
public:
	class FString                                 unit;                                              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Times;                                             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductRebatePropertyInfo) == 0x000008, "Wrong alignment on FPSDKListMarketingProductRebatePropertyInfo");
static_assert(sizeof(FPSDKListMarketingProductRebatePropertyInfo) == 0x0000E0, "Wrong size on FPSDKListMarketingProductRebatePropertyInfo");
static_assert(offsetof(FPSDKListMarketingProductRebatePropertyInfo, unit) == 0x0000B8, "Member 'FPSDKListMarketingProductRebatePropertyInfo::unit' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductRebatePropertyInfo, Times) == 0x0000D0, "Member 'FPSDKListMarketingProductRebatePropertyInfo::Times' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductPropertyInfo
// 0x0380 (0x0438 - 0x00B8)
struct FPSDKListMarketingProductPropertyInfo final : public FJsonData
{
public:
	TArray<struct FPSDKListMarketingProductLang>  Name;                                              // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLang>  Category;                                          // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLang>  second_category;                                   // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLang>  type_name;                                         // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ID;                                                // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Num;                                               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         category_id;                                       // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x8];                                      // 0x0140(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         second_category_id;                                // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 type_key;                                          // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKListMarketingProductGiftPropertyInfo gift;                                           // 0x0170(0x00E0)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x8];                                      // 0x0250(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKListMarketingProductRandomPropertyInfo Random;                                       // 0x0258(0x00F0)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKListMarketingProductRebatePropertyInfo rebate;                                       // 0x0350(0x00E0)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_430[0x8];                                      // 0x0430(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductPropertyInfo) == 0x000008, "Wrong alignment on FPSDKListMarketingProductPropertyInfo");
static_assert(sizeof(FPSDKListMarketingProductPropertyInfo) == 0x000438, "Wrong size on FPSDKListMarketingProductPropertyInfo");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, Name) == 0x0000B8, "Member 'FPSDKListMarketingProductPropertyInfo::Name' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, Category) == 0x0000D0, "Member 'FPSDKListMarketingProductPropertyInfo::Category' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, second_category) == 0x0000E8, "Member 'FPSDKListMarketingProductPropertyInfo::second_category' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, type_name) == 0x000100, "Member 'FPSDKListMarketingProductPropertyInfo::type_name' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, ID) == 0x000118, "Member 'FPSDKListMarketingProductPropertyInfo::ID' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, Num) == 0x000128, "Member 'FPSDKListMarketingProductPropertyInfo::Num' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, category_id) == 0x000138, "Member 'FPSDKListMarketingProductPropertyInfo::category_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, second_category_id) == 0x000148, "Member 'FPSDKListMarketingProductPropertyInfo::second_category_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, type_key) == 0x000158, "Member 'FPSDKListMarketingProductPropertyInfo::type_key' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, gift) == 0x000170, "Member 'FPSDKListMarketingProductPropertyInfo::gift' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, Random) == 0x000258, "Member 'FPSDKListMarketingProductPropertyInfo::Random' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPropertyInfo, rebate) == 0x000350, "Member 'FPSDKListMarketingProductPropertyInfo::rebate' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductProductInfo
// 0x0168 (0x0220 - 0x00B8)
struct FPSDKListMarketingProductProductInfo final : public FJsonData
{
public:
	TArray<struct FPSDKListMarketingProductLang>  Name;                                              // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLang>  Desc;                                              // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLang>  Category;                                          // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLang>  second_category;                                   // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLang>  tab_name;                                          // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLang>  second_tab_name;                                   // 0x0130(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x8];                                      // 0x0140(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLabelInfo> label_name;                                    // 0x0148(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductLang>  tag_name;                                          // 0x0160(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x8];                                      // 0x0170(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductPropertyInfo> property_list;                              // 0x0178(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 product_id;                                        // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A0[0x8];                                      // 0x01A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 category_id;                                       // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 second_category_id;                                // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D0[0x8];                                      // 0x01D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 pic;                                               // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 tab_id;                                            // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 second_tab_id;                                     // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_218[0x8];                                      // 0x0218(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductProductInfo) == 0x000008, "Wrong alignment on FPSDKListMarketingProductProductInfo");
static_assert(sizeof(FPSDKListMarketingProductProductInfo) == 0x000220, "Wrong size on FPSDKListMarketingProductProductInfo");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, Name) == 0x0000B8, "Member 'FPSDKListMarketingProductProductInfo::Name' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, Desc) == 0x0000D0, "Member 'FPSDKListMarketingProductProductInfo::Desc' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, Category) == 0x0000E8, "Member 'FPSDKListMarketingProductProductInfo::Category' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, second_category) == 0x000100, "Member 'FPSDKListMarketingProductProductInfo::second_category' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, tab_name) == 0x000118, "Member 'FPSDKListMarketingProductProductInfo::tab_name' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, second_tab_name) == 0x000130, "Member 'FPSDKListMarketingProductProductInfo::second_tab_name' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, label_name) == 0x000148, "Member 'FPSDKListMarketingProductProductInfo::label_name' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, tag_name) == 0x000160, "Member 'FPSDKListMarketingProductProductInfo::tag_name' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, property_list) == 0x000178, "Member 'FPSDKListMarketingProductProductInfo::property_list' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, product_id) == 0x000190, "Member 'FPSDKListMarketingProductProductInfo::product_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, category_id) == 0x0001A8, "Member 'FPSDKListMarketingProductProductInfo::category_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, second_category_id) == 0x0001C0, "Member 'FPSDKListMarketingProductProductInfo::second_category_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, pic) == 0x0001D8, "Member 'FPSDKListMarketingProductProductInfo::pic' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, tab_id) == 0x0001F0, "Member 'FPSDKListMarketingProductProductInfo::tab_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductProductInfo, second_tab_id) == 0x000208, "Member 'FPSDKListMarketingProductProductInfo::second_tab_id' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductLimitInfo
// 0x0090 (0x0148 - 0x00B8)
struct FPSDKListMarketingProductLimitInfo final : public FJsonData
{
public:
	TArray<struct FPSDKListMarketingProductLang>  slogan;                                            // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x1];                                       // 0x00C8(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          is_buy;                                            // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CA[0x1];                                       // 0x00CA(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          is_limit;                                          // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EFPSDKListMarketingProductBuyStatus           buy_status;                                        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         limit_type;                                        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         limit_custom_day;                                  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         max_num;                                           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         has_buy_num;                                       // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         start_time;                                        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         end_time;                                          // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         promotion_id;                                      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x8];                                      // 0x0140(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductLimitInfo) == 0x000008, "Wrong alignment on FPSDKListMarketingProductLimitInfo");
static_assert(sizeof(FPSDKListMarketingProductLimitInfo) == 0x000148, "Wrong size on FPSDKListMarketingProductLimitInfo");
static_assert(offsetof(FPSDKListMarketingProductLimitInfo, slogan) == 0x0000B8, "Member 'FPSDKListMarketingProductLimitInfo::slogan' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLimitInfo, is_buy) == 0x0000C9, "Member 'FPSDKListMarketingProductLimitInfo::is_buy' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLimitInfo, is_limit) == 0x0000CB, "Member 'FPSDKListMarketingProductLimitInfo::is_limit' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLimitInfo, buy_status) == 0x0000D0, "Member 'FPSDKListMarketingProductLimitInfo::buy_status' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLimitInfo, limit_type) == 0x0000D8, "Member 'FPSDKListMarketingProductLimitInfo::limit_type' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLimitInfo, limit_custom_day) == 0x0000E8, "Member 'FPSDKListMarketingProductLimitInfo::limit_custom_day' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLimitInfo, max_num) == 0x0000F8, "Member 'FPSDKListMarketingProductLimitInfo::max_num' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLimitInfo, has_buy_num) == 0x000108, "Member 'FPSDKListMarketingProductLimitInfo::has_buy_num' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLimitInfo, start_time) == 0x000118, "Member 'FPSDKListMarketingProductLimitInfo::start_time' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLimitInfo, end_time) == 0x000128, "Member 'FPSDKListMarketingProductLimitInfo::end_time' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductLimitInfo, promotion_id) == 0x000138, "Member 'FPSDKListMarketingProductLimitInfo::promotion_id' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductPriceAttr
// 0x0150 (0x0208 - 0x00B8)
struct FPSDKListMarketingProductPriceAttr final : public FJsonData
{
public:
	class FString                                 channel_product_id;                                // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKListMarketingProductMoney         money;                                             // 0x00D0(0x0118)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 expand_plat_id_json_str;                           // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductPriceAttr) == 0x000008, "Wrong alignment on FPSDKListMarketingProductPriceAttr");
static_assert(sizeof(FPSDKListMarketingProductPriceAttr) == 0x000208, "Wrong size on FPSDKListMarketingProductPriceAttr");
static_assert(offsetof(FPSDKListMarketingProductPriceAttr, channel_product_id) == 0x0000B8, "Member 'FPSDKListMarketingProductPriceAttr::channel_product_id' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPriceAttr, money) == 0x0000D0, "Member 'FPSDKListMarketingProductPriceAttr::money' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPriceAttr, expand_plat_id_json_str) == 0x0001F0, "Member 'FPSDKListMarketingProductPriceAttr::expand_plat_id_json_str' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductPriceInfo
// 0x04A8 (0x0560 - 0x00B8)
struct FPSDKListMarketingProductPriceInfo final : public FJsonData
{
public:
	TArray<struct FPSDKListMarketingProductPriceAttr> base_price;                                    // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSDKListMarketingProductPriceAttr> base_discount_price;                           // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKListMarketingProductPriceAttr     price;                                             // 0x00E8(0x0208)(NativeAccessSpecifierPublic)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKListMarketingProductPriceAttr     discount_price;                                    // 0x02F8(0x0208)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_500[0x8];                                      // 0x0500(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         pay_type;                                          // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_510[0x8];                                      // 0x0510(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 allowance_amount;                                  // 0x0518(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_528[0x8];                                      // 0x0528(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 discount_rate;                                     // 0x0530(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_540[0x8];                                      // 0x0540(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 discount_rate_ratio;                               // 0x0548(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_558[0x1];                                      // 0x0558(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          store_product_unavailable;                         // 0x0559(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_55A[0x1];                                      // 0x055A(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          is_use_multi;                                      // 0x055B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductPriceInfo) == 0x000008, "Wrong alignment on FPSDKListMarketingProductPriceInfo");
static_assert(sizeof(FPSDKListMarketingProductPriceInfo) == 0x000560, "Wrong size on FPSDKListMarketingProductPriceInfo");
static_assert(offsetof(FPSDKListMarketingProductPriceInfo, base_price) == 0x0000B8, "Member 'FPSDKListMarketingProductPriceInfo::base_price' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPriceInfo, base_discount_price) == 0x0000D0, "Member 'FPSDKListMarketingProductPriceInfo::base_discount_price' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPriceInfo, price) == 0x0000E8, "Member 'FPSDKListMarketingProductPriceInfo::price' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPriceInfo, discount_price) == 0x0002F8, "Member 'FPSDKListMarketingProductPriceInfo::discount_price' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPriceInfo, pay_type) == 0x000508, "Member 'FPSDKListMarketingProductPriceInfo::pay_type' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPriceInfo, allowance_amount) == 0x000518, "Member 'FPSDKListMarketingProductPriceInfo::allowance_amount' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPriceInfo, discount_rate) == 0x000530, "Member 'FPSDKListMarketingProductPriceInfo::discount_rate' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPriceInfo, discount_rate_ratio) == 0x000548, "Member 'FPSDKListMarketingProductPriceInfo::discount_rate_ratio' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPriceInfo, store_product_unavailable) == 0x000559, "Member 'FPSDKListMarketingProductPriceInfo::store_product_unavailable' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductPriceInfo, is_use_multi) == 0x00055B, "Member 'FPSDKListMarketingProductPriceInfo::is_use_multi' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductExtraInfo
// 0x0010 (0x00C8 - 0x00B8)
struct FPSDKListMarketingProductExtraInfo final : public FJsonData
{
public:
	int64                                         vip_card_time;                                     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductExtraInfo) == 0x000008, "Wrong alignment on FPSDKListMarketingProductExtraInfo");
static_assert(sizeof(FPSDKListMarketingProductExtraInfo) == 0x0000C8, "Wrong size on FPSDKListMarketingProductExtraInfo");
static_assert(offsetof(FPSDKListMarketingProductExtraInfo, vip_card_time) == 0x0000B8, "Member 'FPSDKListMarketingProductExtraInfo::vip_card_time' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductMarketingProductInfo
// 0x09B0 (0x0A68 - 0x00B8)
struct FPSDKListMarketingProductMarketingProductInfo final : public FJsonData
{
public:
	struct FPSDKListMarketingProductProductInfo   product_info;                                      // 0x00B8(0x0220)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKListMarketingProductLimitInfo     limit_info;                                        // 0x02E0(0x0148)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKListMarketingProductPriceInfo     price_info;                                        // 0x0430(0x0560)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_990[0x8];                                      // 0x0990(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKListMarketingProductExtraInfo     extra_info;                                        // 0x0998(0x00C8)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_A60[0x8];                                      // 0x0A60(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductMarketingProductInfo) == 0x000008, "Wrong alignment on FPSDKListMarketingProductMarketingProductInfo");
static_assert(sizeof(FPSDKListMarketingProductMarketingProductInfo) == 0x000A68, "Wrong size on FPSDKListMarketingProductMarketingProductInfo");
static_assert(offsetof(FPSDKListMarketingProductMarketingProductInfo, product_info) == 0x0000B8, "Member 'FPSDKListMarketingProductMarketingProductInfo::product_info' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductMarketingProductInfo, limit_info) == 0x0002E0, "Member 'FPSDKListMarketingProductMarketingProductInfo::limit_info' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductMarketingProductInfo, price_info) == 0x000430, "Member 'FPSDKListMarketingProductMarketingProductInfo::price_info' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductMarketingProductInfo, extra_info) == 0x000998, "Member 'FPSDKListMarketingProductMarketingProductInfo::extra_info' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKListMarketingProductListMarketingProductResponse
// 0x01E8 (0x02A0 - 0x00B8)
struct FPSDKListMarketingProductListMarketingProductResponse final : public FJsonData
{
public:
	TArray<struct FPSDKListMarketingProductMarketingProductInfo> product_list;                       // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKListMarketingProductCommonInfo    common_info;                                       // 0x00D0(0x01B8)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         server_time;                                       // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKListMarketingProductListMarketingProductResponse) == 0x000008, "Wrong alignment on FPSDKListMarketingProductListMarketingProductResponse");
static_assert(sizeof(FPSDKListMarketingProductListMarketingProductResponse) == 0x0002A0, "Wrong size on FPSDKListMarketingProductListMarketingProductResponse");
static_assert(offsetof(FPSDKListMarketingProductListMarketingProductResponse, product_list) == 0x0000B8, "Member 'FPSDKListMarketingProductListMarketingProductResponse::product_list' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductListMarketingProductResponse, common_info) == 0x0000D0, "Member 'FPSDKListMarketingProductListMarketingProductResponse::common_info' has a wrong offset!");
static_assert(offsetof(FPSDKListMarketingProductListMarketingProductResponse, server_time) == 0x000290, "Member 'FPSDKListMarketingProductListMarketingProductResponse::server_time' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKProductListServerResponse
// 0x0300 (0x03B8 - 0x00B8)
struct FPSDKProductListServerResponse final : public FJsonData
{
public:
	int32                                         Code;                                              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Info;                                              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 request_id;                                        // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPSDKListMarketingProductListMarketingProductResponse Data;                               // 0x00F0(0x02A0)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_390[0x4];                                      // 0x0390(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 msg;                                               // 0x03A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B0[0x8];                                      // 0x03B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSDKProductListServerResponse) == 0x000008, "Wrong alignment on FPSDKProductListServerResponse");
static_assert(sizeof(FPSDKProductListServerResponse) == 0x0003B8, "Wrong size on FPSDKProductListServerResponse");
static_assert(offsetof(FPSDKProductListServerResponse, Code) == 0x0000B8, "Member 'FPSDKProductListServerResponse::Code' has a wrong offset!");
static_assert(offsetof(FPSDKProductListServerResponse, Info) == 0x0000C0, "Member 'FPSDKProductListServerResponse::Info' has a wrong offset!");
static_assert(offsetof(FPSDKProductListServerResponse, request_id) == 0x0000D8, "Member 'FPSDKProductListServerResponse::request_id' has a wrong offset!");
static_assert(offsetof(FPSDKProductListServerResponse, Data) == 0x0000F0, "Member 'FPSDKProductListServerResponse::Data' has a wrong offset!");
static_assert(offsetof(FPSDKProductListServerResponse, Ret) == 0x000394, "Member 'FPSDKProductListServerResponse::Ret' has a wrong offset!");
static_assert(offsetof(FPSDKProductListServerResponse, msg) == 0x0003A0, "Member 'FPSDKProductListServerResponse::msg' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKPayReportModel
// 0x0140 (0x0140 - 0x0000)
struct FPSDKPayReportModel final
{
public:
	class FString                                 part_event;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Age;                                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VRoleID;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VIPLevel;                                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         zoneId;                                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         serverId;                                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountType;                                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeType;                                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 productID;                                         // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 productName;                                       // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 productDesc;                                       // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 channelProductid;                                  // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 product_code;                                      // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         money;                                             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 currency;                                          // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 currencyExchange;                                  // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         shelf_chann_id;                                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         payer_id;                                          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subject;                                           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 orderID;                                           // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiptID;                                         // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 channelOrderID;                                    // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ptReceiptID;                                       // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         orderStage;                                        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeOPType;                                      // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Status;                                            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 order_extra;                                       // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extra;                                             // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSDKPayReportModel) == 0x000008, "Wrong alignment on FPSDKPayReportModel");
static_assert(sizeof(FPSDKPayReportModel) == 0x000140, "Wrong size on FPSDKPayReportModel");
static_assert(offsetof(FPSDKPayReportModel, part_event) == 0x000000, "Member 'FPSDKPayReportModel::part_event' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, Age) == 0x000010, "Member 'FPSDKPayReportModel::Age' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, VRoleID) == 0x000018, "Member 'FPSDKPayReportModel::VRoleID' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, VIPLevel) == 0x000028, "Member 'FPSDKPayReportModel::VIPLevel' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, zoneId) == 0x00002C, "Member 'FPSDKPayReportModel::zoneId' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, serverId) == 0x000030, "Member 'FPSDKPayReportModel::serverId' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, AccountType) == 0x000034, "Member 'FPSDKPayReportModel::AccountType' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, ChargeType) == 0x000038, "Member 'FPSDKPayReportModel::ChargeType' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, productID) == 0x000040, "Member 'FPSDKPayReportModel::productID' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, productName) == 0x000050, "Member 'FPSDKPayReportModel::productName' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, productDesc) == 0x000060, "Member 'FPSDKPayReportModel::productDesc' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, channelProductid) == 0x000070, "Member 'FPSDKPayReportModel::channelProductid' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, product_code) == 0x000080, "Member 'FPSDKPayReportModel::product_code' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, money) == 0x000090, "Member 'FPSDKPayReportModel::money' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, Amount) == 0x000094, "Member 'FPSDKPayReportModel::Amount' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, currency) == 0x000098, "Member 'FPSDKPayReportModel::currency' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, currencyExchange) == 0x0000A8, "Member 'FPSDKPayReportModel::currencyExchange' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, shelf_chann_id) == 0x0000B8, "Member 'FPSDKPayReportModel::shelf_chann_id' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, payer_id) == 0x0000BC, "Member 'FPSDKPayReportModel::payer_id' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, Subject) == 0x0000C0, "Member 'FPSDKPayReportModel::Subject' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, orderID) == 0x0000D0, "Member 'FPSDKPayReportModel::orderID' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, ReceiptID) == 0x0000E0, "Member 'FPSDKPayReportModel::ReceiptID' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, channelOrderID) == 0x0000F0, "Member 'FPSDKPayReportModel::channelOrderID' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, ptReceiptID) == 0x000100, "Member 'FPSDKPayReportModel::ptReceiptID' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, orderStage) == 0x000110, "Member 'FPSDKPayReportModel::orderStage' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, ChargeOPType) == 0x000114, "Member 'FPSDKPayReportModel::ChargeOPType' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, Status) == 0x000118, "Member 'FPSDKPayReportModel::Status' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, order_extra) == 0x000120, "Member 'FPSDKPayReportModel::order_extra' has a wrong offset!");
static_assert(offsetof(FPSDKPayReportModel, Extra) == 0x000130, "Member 'FPSDKPayReportModel::Extra' has a wrong offset!");

// ScriptStruct PSDKPay.PSDKPayEventReportModel
// 0x0188 (0x0188 - 0x0000)
struct FPSDKPayEventReportModel final
{
public:
	class FString                                 part_event;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 pageid;                                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 pageName;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 componentid;                                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActionName;                                        // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         actionresult;                                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 actionparam;                                       // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Level;                                             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VopenID;                                           // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VRoleID;                                           // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 productID;                                         // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PtProductID;                                       // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalPrice;                                     // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyType;                                      // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 shopcode;                                          // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 payserver;                                         // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Area;                                              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 paymethod;                                         // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ptReceiptID;                                       // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 price;                                             // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 pricecurrency;                                     // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 promotionid;                                       // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 attachment;                                        // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiptID;                                         // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extra;                                             // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSDKPayEventReportModel) == 0x000008, "Wrong alignment on FPSDKPayEventReportModel");
static_assert(sizeof(FPSDKPayEventReportModel) == 0x000188, "Wrong size on FPSDKPayEventReportModel");
static_assert(offsetof(FPSDKPayEventReportModel, part_event) == 0x000000, "Member 'FPSDKPayEventReportModel::part_event' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, pageid) == 0x000010, "Member 'FPSDKPayEventReportModel::pageid' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, pageName) == 0x000020, "Member 'FPSDKPayEventReportModel::pageName' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, componentid) == 0x000030, "Member 'FPSDKPayEventReportModel::componentid' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, ActionName) == 0x000040, "Member 'FPSDKPayEventReportModel::ActionName' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, actionresult) == 0x000050, "Member 'FPSDKPayEventReportModel::actionresult' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, actionparam) == 0x000058, "Member 'FPSDKPayEventReportModel::actionparam' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, Level) == 0x000068, "Member 'FPSDKPayEventReportModel::Level' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, VopenID) == 0x000078, "Member 'FPSDKPayEventReportModel::VopenID' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, VRoleID) == 0x000088, "Member 'FPSDKPayEventReportModel::VRoleID' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, productID) == 0x000098, "Member 'FPSDKPayEventReportModel::productID' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, PtProductID) == 0x0000A8, "Member 'FPSDKPayEventReportModel::PtProductID' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, OriginalPrice) == 0x0000B8, "Member 'FPSDKPayEventReportModel::OriginalPrice' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, CurrencyType) == 0x0000C8, "Member 'FPSDKPayEventReportModel::CurrencyType' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, shopcode) == 0x0000D8, "Member 'FPSDKPayEventReportModel::shopcode' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, payserver) == 0x0000E8, "Member 'FPSDKPayEventReportModel::payserver' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, Area) == 0x0000F8, "Member 'FPSDKPayEventReportModel::Area' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, paymethod) == 0x000108, "Member 'FPSDKPayEventReportModel::paymethod' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, ptReceiptID) == 0x000118, "Member 'FPSDKPayEventReportModel::ptReceiptID' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, price) == 0x000128, "Member 'FPSDKPayEventReportModel::price' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, pricecurrency) == 0x000138, "Member 'FPSDKPayEventReportModel::pricecurrency' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, promotionid) == 0x000148, "Member 'FPSDKPayEventReportModel::promotionid' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, attachment) == 0x000158, "Member 'FPSDKPayEventReportModel::attachment' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, ReceiptID) == 0x000168, "Member 'FPSDKPayEventReportModel::ReceiptID' has a wrong offset!");
static_assert(offsetof(FPSDKPayEventReportModel, Extra) == 0x000178, "Member 'FPSDKPayEventReportModel::Extra' has a wrong offset!");

}

