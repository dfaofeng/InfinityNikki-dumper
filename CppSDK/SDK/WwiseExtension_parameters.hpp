#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WwiseExtension

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "WwiseExtension_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WwiseExtension.NiagaraDataInterfaceAkEvent.HandleEndOfEvent
// 0x0010 (0x0010 - 0x0000)
struct NiagaraDataInterfaceAkEvent_HandleEndOfEvent final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NiagaraDataInterfaceAkEvent_HandleEndOfEvent) == 0x000008, "Wrong alignment on NiagaraDataInterfaceAkEvent_HandleEndOfEvent");
static_assert(sizeof(NiagaraDataInterfaceAkEvent_HandleEndOfEvent) == 0x000010, "Wrong size on NiagaraDataInterfaceAkEvent_HandleEndOfEvent");
static_assert(offsetof(NiagaraDataInterfaceAkEvent_HandleEndOfEvent, CallbackType) == 0x000000, "Member 'NiagaraDataInterfaceAkEvent_HandleEndOfEvent::CallbackType' has a wrong offset!");
static_assert(offsetof(NiagaraDataInterfaceAkEvent_HandleEndOfEvent, CallbackInfo) == 0x000008, "Member 'NiagaraDataInterfaceAkEvent_HandleEndOfEvent::CallbackInfo' has a wrong offset!");

// Function WwiseExtension.AkEventProxy.GetDurationTime
// 0x0004 (0x0004 - 0x0000)
struct AkEventProxy_GetDurationTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkEventProxy_GetDurationTime) == 0x000004, "Wrong alignment on AkEventProxy_GetDurationTime");
static_assert(sizeof(AkEventProxy_GetDurationTime) == 0x000004, "Wrong size on AkEventProxy_GetDurationTime");
static_assert(offsetof(AkEventProxy_GetDurationTime, ReturnValue) == 0x000000, "Member 'AkEventProxy_GetDurationTime::ReturnValue' has a wrong offset!");

// Function WwiseExtension.AkEventProxy.GetProxyID
// 0x0004 (0x0004 - 0x0000)
struct AkEventProxy_GetProxyID final
{
public:
	uint32                                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkEventProxy_GetProxyID) == 0x000004, "Wrong alignment on AkEventProxy_GetProxyID");
static_assert(sizeof(AkEventProxy_GetProxyID) == 0x000004, "Wrong size on AkEventProxy_GetProxyID");
static_assert(offsetof(AkEventProxy_GetProxyID, ReturnValue) == 0x000000, "Member 'AkEventProxy_GetProxyID::ReturnValue' has a wrong offset!");

// Function WwiseExtension.AkEventProxy.GetStartTime
// 0x0004 (0x0004 - 0x0000)
struct AkEventProxy_GetStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkEventProxy_GetStartTime) == 0x000004, "Wrong alignment on AkEventProxy_GetStartTime");
static_assert(sizeof(AkEventProxy_GetStartTime) == 0x000004, "Wrong size on AkEventProxy_GetStartTime");
static_assert(offsetof(AkEventProxy_GetStartTime, ReturnValue) == 0x000000, "Member 'AkEventProxy_GetStartTime::ReturnValue' has a wrong offset!");

// Function WwiseExtension.AkEventProxy.OnPostEventCallback
// 0x0010 (0x0010 - 0x0000)
struct AkEventProxy_OnPostEventCallback final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkEventProxy_OnPostEventCallback) == 0x000008, "Wrong alignment on AkEventProxy_OnPostEventCallback");
static_assert(sizeof(AkEventProxy_OnPostEventCallback) == 0x000010, "Wrong size on AkEventProxy_OnPostEventCallback");
static_assert(offsetof(AkEventProxy_OnPostEventCallback, CallbackType) == 0x000000, "Member 'AkEventProxy_OnPostEventCallback::CallbackType' has a wrong offset!");
static_assert(offsetof(AkEventProxy_OnPostEventCallback, CallbackInfo) == 0x000008, "Member 'AkEventProxy_OnPostEventCallback::CallbackInfo' has a wrong offset!");

// Function WwiseExtension.AkEventProxy.OnPostEventCompleted
// 0x0004 (0x0004 - 0x0000)
struct AkEventProxy_OnPostEventCompleted final
{
public:
	int32                                         InLinkID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AkEventProxy_OnPostEventCompleted) == 0x000004, "Wrong alignment on AkEventProxy_OnPostEventCompleted");
static_assert(sizeof(AkEventProxy_OnPostEventCompleted) == 0x000004, "Wrong size on AkEventProxy_OnPostEventCompleted");
static_assert(offsetof(AkEventProxy_OnPostEventCompleted, InLinkID) == 0x000000, "Member 'AkEventProxy_OnPostEventCompleted::InLinkID' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.CreatePostEventProxyObject
// 0x0020 (0x0020 - 0x0000)
struct X6AkBlueprintLibrary_CreatePostEventProxyObject final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAsync;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestory;                                      // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkEventProxy*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_CreatePostEventProxyObject) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_CreatePostEventProxyObject");
static_assert(sizeof(X6AkBlueprintLibrary_CreatePostEventProxyObject) == 0x000020, "Wrong size on X6AkBlueprintLibrary_CreatePostEventProxyObject");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObject, AkEvent) == 0x000000, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObject::AkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObject, EventActor) == 0x000008, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObject::EventActor' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObject, CallbackMask) == 0x000010, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObject::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObject, bIsAsync) == 0x000014, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObject::bIsAsync' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObject, bAutoDestory) == 0x000015, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObject::bAutoDestory' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObject, AudioContext) == 0x000016, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObject::AudioContext' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObject, ReturnValue) == 0x000018, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObject::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.CreatePostEventProxyObjectAtLocation
// 0x0058 (0x0058 - 0x0000)
struct X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsAsync;                                          // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkEventProxy*                          ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation");
static_assert(sizeof(X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation) == 0x000058, "Wrong size on X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation, WorldContextObject) == 0x000000, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation, AkEvent) == 0x000008, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation::AkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation, CallbackMask) == 0x000010, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation, Location) == 0x000018, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation::Location' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation, Orientation) == 0x000030, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation, bIsAsync) == 0x000048, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation::bIsAsync' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation, AudioContext) == 0x000049, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation::AudioContext' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation, ReturnValue) == 0x000050, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectAtLocation::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.CreatePostEventProxyObjectWithComponent
// 0x0020 (0x0020 - 0x0000)
struct X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAsync;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkEventProxy*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent");
static_assert(sizeof(X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent) == 0x000020, "Wrong size on X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent, AkEvent) == 0x000000, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent::AkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent, AkComponent) == 0x000008, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent::AkComponent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent, CallbackMask) == 0x000010, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent, bIsAsync) == 0x000014, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent::bIsAsync' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent, AudioContext) == 0x000015, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent::AudioContext' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent, ReturnValue) == 0x000018, "Member 'X6AkBlueprintLibrary_CreatePostEventProxyObjectWithComponent::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.GetSurfaceTypeSwitchValue
// 0x0038 (0x0038 - 0x0000)
struct X6AkBlueprintLibrary_GetSurfaceTypeSwitchValue final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              InSurfaceType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkSwitchValue>          ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_GetSurfaceTypeSwitchValue) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_GetSurfaceTypeSwitchValue");
static_assert(sizeof(X6AkBlueprintLibrary_GetSurfaceTypeSwitchValue) == 0x000038, "Wrong size on X6AkBlueprintLibrary_GetSurfaceTypeSwitchValue");
static_assert(offsetof(X6AkBlueprintLibrary_GetSurfaceTypeSwitchValue, WorldContextObject) == 0x000000, "Member 'X6AkBlueprintLibrary_GetSurfaceTypeSwitchValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_GetSurfaceTypeSwitchValue, InSurfaceType) == 0x000008, "Member 'X6AkBlueprintLibrary_GetSurfaceTypeSwitchValue::InSurfaceType' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_GetSurfaceTypeSwitchValue, ReturnValue) == 0x000010, "Member 'X6AkBlueprintLibrary_GetSurfaceTypeSwitchValue::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.PlayRunStepSoundEffectWithSwitch
// 0x0050 (0x0050 - 0x0000)
struct X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UObject>>         InSwitchSoftRefs;                                  // 0x0038(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bAllowAutoDestory;                                 // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch");
static_assert(sizeof(X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch) == 0x000050, "Wrong size on X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch");
static_assert(offsetof(X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch, AttachToComponent) == 0x000028, "Member 'X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch::AttachToComponent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch, AttachName) == 0x000030, "Member 'X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch::AttachName' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch, InSwitchSoftRefs) == 0x000038, "Member 'X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch::InSwitchSoftRefs' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch, bAllowAutoDestory) == 0x000048, "Member 'X6AkBlueprintLibrary_PlayRunStepSoundEffectWithSwitch::bAllowAutoDestory' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.SetJobMgrMaxActiveWorkers
// 0x0018 (0x0018 - 0x0000)
struct X6AkBlueprintLibrary_SetJobMgrMaxActiveWorkers final
{
public:
	EAkJobType                                    JobType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         MaxNumActiveWorkers;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_SetJobMgrMaxActiveWorkers) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_SetJobMgrMaxActiveWorkers");
static_assert(sizeof(X6AkBlueprintLibrary_SetJobMgrMaxActiveWorkers) == 0x000018, "Wrong size on X6AkBlueprintLibrary_SetJobMgrMaxActiveWorkers");
static_assert(offsetof(X6AkBlueprintLibrary_SetJobMgrMaxActiveWorkers, JobType) == 0x000000, "Member 'X6AkBlueprintLibrary_SetJobMgrMaxActiveWorkers::JobType' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_SetJobMgrMaxActiveWorkers, MaxNumActiveWorkers) == 0x000008, "Member 'X6AkBlueprintLibrary_SetJobMgrMaxActiveWorkers::MaxNumActiveWorkers' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_SetJobMgrMaxActiveWorkers, ReturnValue) == 0x000010, "Member 'X6AkBlueprintLibrary_SetJobMgrMaxActiveWorkers::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.SetMaxNumVoicesLimit
// 0x0008 (0x0008 - 0x0000)
struct X6AkBlueprintLibrary_SetMaxNumVoicesLimit final
{
public:
	int32                                         MaxNumberVoices;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_SetMaxNumVoicesLimit) == 0x000004, "Wrong alignment on X6AkBlueprintLibrary_SetMaxNumVoicesLimit");
static_assert(sizeof(X6AkBlueprintLibrary_SetMaxNumVoicesLimit) == 0x000008, "Wrong size on X6AkBlueprintLibrary_SetMaxNumVoicesLimit");
static_assert(offsetof(X6AkBlueprintLibrary_SetMaxNumVoicesLimit, MaxNumberVoices) == 0x000000, "Member 'X6AkBlueprintLibrary_SetMaxNumVoicesLimit::MaxNumberVoices' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_SetMaxNumVoicesLimit, ReturnValue) == 0x000004, "Member 'X6AkBlueprintLibrary_SetMaxNumVoicesLimit::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.StopSoundByLocation
// 0x0020 (0x0020 - 0x0000)
struct X6AkBlueprintLibrary_StopSoundByLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_StopSoundByLocation) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_StopSoundByLocation");
static_assert(sizeof(X6AkBlueprintLibrary_StopSoundByLocation) == 0x000020, "Wrong size on X6AkBlueprintLibrary_StopSoundByLocation");
static_assert(offsetof(X6AkBlueprintLibrary_StopSoundByLocation, WorldContextObject) == 0x000000, "Member 'X6AkBlueprintLibrary_StopSoundByLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_StopSoundByLocation, Location) == 0x000008, "Member 'X6AkBlueprintLibrary_StopSoundByLocation::Location' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6ExecuteActionOnEvent
// 0x0028 (0x0028 - 0x0000)
struct X6AkBlueprintLibrary_X6ExecuteActionOnEvent final
{
public:
	class UAkAudioEvent*                          InAkEvent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkActionOnEventType                          InActionType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InActor;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTransitionDuration;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkCurveInterpolation                         InFadeCurve;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InPlayingID;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6ExecuteActionOnEvent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6ExecuteActionOnEvent");
static_assert(sizeof(X6AkBlueprintLibrary_X6ExecuteActionOnEvent) == 0x000028, "Wrong size on X6AkBlueprintLibrary_X6ExecuteActionOnEvent");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnEvent, InAkEvent) == 0x000000, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnEvent::InAkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnEvent, InActionType) == 0x000008, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnEvent::InActionType' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnEvent, InActor) == 0x000010, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnEvent::InActor' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnEvent, InTransitionDuration) == 0x000018, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnEvent::InTransitionDuration' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnEvent, InFadeCurve) == 0x00001C, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnEvent::InFadeCurve' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnEvent, InPlayingID) == 0x000020, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnEvent::InPlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnEvent, ReturnValue) == 0x000024, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnEvent::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6ExecuteActionOnPlayingID
// 0x0010 (0x0010 - 0x0000)
struct X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID final
{
public:
	EAkActionOnEventType                          InActionType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InPlayingID;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTransitionDuration;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkCurveInterpolation                         InFadeCurve;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID) == 0x000004, "Wrong alignment on X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID");
static_assert(sizeof(X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID) == 0x000010, "Wrong size on X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID, InActionType) == 0x000000, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID::InActionType' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID, InPlayingID) == 0x000004, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID::InPlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID, InTransitionDuration) == 0x000008, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID::InTransitionDuration' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID, InFadeCurve) == 0x00000C, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID::InFadeCurve' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID, ReturnValue) == 0x00000D, "Member 'X6AkBlueprintLibrary_X6ExecuteActionOnPlayingID::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6GetAkComponent
// 0x0020 (0x0020 - 0x0000)
struct X6AkBlueprintLibrary_X6GetAkComponent final
{
public:
	class USceneComponent*                        AttachToComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ComponentCreated;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowAutoDestory;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentRule;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6GetAkComponent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6GetAkComponent");
static_assert(sizeof(X6AkBlueprintLibrary_X6GetAkComponent) == 0x000020, "Wrong size on X6AkBlueprintLibrary_X6GetAkComponent");
static_assert(offsetof(X6AkBlueprintLibrary_X6GetAkComponent, AttachToComponent) == 0x000000, "Member 'X6AkBlueprintLibrary_X6GetAkComponent::AttachToComponent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6GetAkComponent, ComponentCreated) == 0x000008, "Member 'X6AkBlueprintLibrary_X6GetAkComponent::ComponentCreated' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6GetAkComponent, bAllowAutoDestory) == 0x000009, "Member 'X6AkBlueprintLibrary_X6GetAkComponent::bAllowAutoDestory' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6GetAkComponent, AttachPointName) == 0x00000C, "Member 'X6AkBlueprintLibrary_X6GetAkComponent::AttachPointName' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6GetAkComponent, AttachmentRule) == 0x000014, "Member 'X6AkBlueprintLibrary_X6GetAkComponent::AttachmentRule' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6GetAkComponent, ReturnValue) == 0x000018, "Member 'X6AkBlueprintLibrary_X6GetAkComponent::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEvent
// 0x0040 (0x0040 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAutoDestory;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEvent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEvent");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEvent) == 0x000040, "Wrong size on X6AkBlueprintLibrary_X6PostEvent");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent, AkEvent) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent, EventActor) == 0x000008, "Member 'X6AkBlueprintLibrary_X6PostEvent::EventActor' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent, PlayingID) == 0x000010, "Member 'X6AkBlueprintLibrary_X6PostEvent::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent, CallbackMask) == 0x000014, "Member 'X6AkBlueprintLibrary_X6PostEvent::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent, PostEventCallback) == 0x000018, "Member 'X6AkBlueprintLibrary_X6PostEvent::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent, ExternalSources) == 0x000028, "Member 'X6AkBlueprintLibrary_X6PostEvent::ExternalSources' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent, bAutoDestory) == 0x000038, "Member 'X6AkBlueprintLibrary_X6PostEvent::bAutoDestory' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent, AudioContext) == 0x000039, "Member 'X6AkBlueprintLibrary_X6PostEvent::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEvent2D
// 0x0030 (0x0030 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEvent2D final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEvent2D) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEvent2D");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEvent2D) == 0x000030, "Wrong size on X6AkBlueprintLibrary_X6PostEvent2D");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent2D, AkEvent) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEvent2D::AkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent2D, PlayingID) == 0x000008, "Member 'X6AkBlueprintLibrary_X6PostEvent2D::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent2D, CallbackMask) == 0x00000C, "Member 'X6AkBlueprintLibrary_X6PostEvent2D::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent2D, PostEventCallback) == 0x000010, "Member 'X6AkBlueprintLibrary_X6PostEvent2D::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEvent2D, ExternalSources) == 0x000020, "Member 'X6AkBlueprintLibrary_X6PostEvent2D::ExternalSources' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventAsync
// 0x0058 (0x0058 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventAsync final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoDestory;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventAsync) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventAsync");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventAsync) == 0x000058, "Wrong size on X6AkBlueprintLibrary_X6PostEventAsync");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync, AkEvent) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventAsync::AkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync, EventActor) == 0x000008, "Member 'X6AkBlueprintLibrary_X6PostEventAsync::EventActor' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync, PlayingID) == 0x000010, "Member 'X6AkBlueprintLibrary_X6PostEventAsync::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync, CallbackMask) == 0x000014, "Member 'X6AkBlueprintLibrary_X6PostEventAsync::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync, PostEventCallback) == 0x000018, "Member 'X6AkBlueprintLibrary_X6PostEventAsync::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync, ExternalSources) == 0x000028, "Member 'X6AkBlueprintLibrary_X6PostEventAsync::ExternalSources' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync, LatentInfo) == 0x000038, "Member 'X6AkBlueprintLibrary_X6PostEventAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync, bAutoDestory) == 0x000050, "Member 'X6AkBlueprintLibrary_X6PostEventAsync::bAutoDestory' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync, AudioContext) == 0x000051, "Member 'X6AkBlueprintLibrary_X6PostEventAsync::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventAsync2D
// 0x0048 (0x0048 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventAsync2D final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0030(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventAsync2D) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventAsync2D");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventAsync2D) == 0x000048, "Wrong size on X6AkBlueprintLibrary_X6PostEventAsync2D");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync2D, AkEvent) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventAsync2D::AkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync2D, PlayingID) == 0x000008, "Member 'X6AkBlueprintLibrary_X6PostEventAsync2D::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync2D, CallbackMask) == 0x00000C, "Member 'X6AkBlueprintLibrary_X6PostEventAsync2D::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync2D, PostEventCallback) == 0x000010, "Member 'X6AkBlueprintLibrary_X6PostEventAsync2D::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync2D, ExternalSources) == 0x000020, "Member 'X6AkBlueprintLibrary_X6PostEventAsync2D::ExternalSources' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsync2D, LatentInfo) == 0x000030, "Member 'X6AkBlueprintLibrary_X6PostEventAsync2D::LatentInfo' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventAsyncAtLocation
// 0x0068 (0x0068 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventAsyncAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0048(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventAsyncAtLocation) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventAsyncAtLocation");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventAsyncAtLocation) == 0x000068, "Wrong size on X6AkBlueprintLibrary_X6PostEventAsyncAtLocation");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncAtLocation, WorldContextObject) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncAtLocation, AkEvent) == 0x000008, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncAtLocation::AkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncAtLocation, PlayingID) == 0x000010, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncAtLocation::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncAtLocation, Location) == 0x000018, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncAtLocation::Location' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncAtLocation, Orientation) == 0x000030, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncAtLocation, LatentInfo) == 0x000048, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncAtLocation::LatentInfo' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncAtLocation, AudioContext) == 0x000060, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncAtLocation::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventAsyncWithComponent
// 0x0058 (0x0058 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventAsyncWithComponent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventAsyncWithComponent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventAsyncWithComponent");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventAsyncWithComponent) == 0x000058, "Wrong size on X6AkBlueprintLibrary_X6PostEventAsyncWithComponent");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncWithComponent, AkEvent) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncWithComponent::AkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncWithComponent, AkComponent) == 0x000008, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncWithComponent::AkComponent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncWithComponent, PlayingID) == 0x000010, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncWithComponent::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncWithComponent, CallbackMask) == 0x000014, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncWithComponent::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncWithComponent, PostEventCallback) == 0x000018, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncWithComponent::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncWithComponent, ExternalSources) == 0x000028, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncWithComponent::ExternalSources' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncWithComponent, LatentInfo) == 0x000038, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncWithComponent::LatentInfo' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAsyncWithComponent, AudioContext) == 0x000050, "Member 'X6AkBlueprintLibrary_X6PostEventAsyncWithComponent::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventAtLocation
// 0x0050 (0x0050 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventAtLocation) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventAtLocation");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventAtLocation) == 0x000050, "Wrong size on X6AkBlueprintLibrary_X6PostEventAtLocation");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAtLocation, WorldContextObject) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAtLocation, AkEvent) == 0x000008, "Member 'X6AkBlueprintLibrary_X6PostEventAtLocation::AkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAtLocation, PlayingID) == 0x000010, "Member 'X6AkBlueprintLibrary_X6PostEventAtLocation::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAtLocation, Location) == 0x000018, "Member 'X6AkBlueprintLibrary_X6PostEventAtLocation::Location' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAtLocation, Orientation) == 0x000030, "Member 'X6AkBlueprintLibrary_X6PostEventAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventAtLocation, AudioContext) == 0x000048, "Member 'X6AkBlueprintLibrary_X6PostEventAtLocation::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventSoftRef
// 0x0078 (0x0078 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventSoftRef final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventActor;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0058(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoDestory;                                      // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventSoftRef) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventSoftRef");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventSoftRef) == 0x000078, "Wrong size on X6AkBlueprintLibrary_X6PostEventSoftRef");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef, EventActor) == 0x000028, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef::EventActor' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef, PlayingID) == 0x000030, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef, CallbackMask) == 0x000034, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef, PostEventCallback) == 0x000038, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef, ExternalSources) == 0x000048, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef::ExternalSources' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef, LatentInfo) == 0x000058, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef::LatentInfo' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef, bAutoDestory) == 0x000070, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef::bAutoDestory' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef, AudioContext) == 0x000071, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventSoftRef2D
// 0x0068 (0x0068 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventSoftRef2D final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0050(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventSoftRef2D) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventSoftRef2D");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventSoftRef2D) == 0x000068, "Wrong size on X6AkBlueprintLibrary_X6PostEventSoftRef2D");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef2D, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef2D::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef2D, PlayingID) == 0x000028, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef2D::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef2D, CallbackMask) == 0x00002C, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef2D::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef2D, PostEventCallback) == 0x000030, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef2D::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef2D, ExternalSources) == 0x000040, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef2D::ExternalSources' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRef2D, LatentInfo) == 0x000050, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRef2D::LatentInfo' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventSoftRefAsync
// 0x0078 (0x0078 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventSoftRefAsync final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventActor;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0058(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoDestory;                                      // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventSoftRefAsync");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync) == 0x000078, "Wrong size on X6AkBlueprintLibrary_X6PostEventSoftRefAsync");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync, EventActor) == 0x000028, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync::EventActor' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync, PlayingID) == 0x000030, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync, CallbackMask) == 0x000034, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync, PostEventCallback) == 0x000038, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync, ExternalSources) == 0x000048, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync::ExternalSources' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync, LatentInfo) == 0x000058, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync::LatentInfo' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync, bAutoDestory) == 0x000070, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync::bAutoDestory' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync, AudioContext) == 0x000071, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventSoftRefAsync2D
// 0x0068 (0x0068 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0050(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D) == 0x000068, "Wrong size on X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D, PlayingID) == 0x000028, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D, CallbackMask) == 0x00002C, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D, PostEventCallback) == 0x000030, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D, ExternalSources) == 0x000040, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D::ExternalSources' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D, LatentInfo) == 0x000050, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsync2D::LatentInfo' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventSoftRefAsyncAtLocation
// 0x0088 (0x0088 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0050(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0068(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation) == 0x000088, "Wrong size on X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation, WorldContextObject) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation, AkEventSoftRef) == 0x000008, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation, PlayingID) == 0x000030, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation, Location) == 0x000038, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation::Location' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation, Orientation) == 0x000050, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation, LatentInfo) == 0x000068, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation::LatentInfo' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation, AudioContext) == 0x000080, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncAtLocation::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventSoftRefAsyncWithComponent
// 0x0078 (0x0078 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0058(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent) == 0x000078, "Wrong size on X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent, AkComponent) == 0x000028, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent::AkComponent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent, PlayingID) == 0x000030, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent, CallbackMask) == 0x000034, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent, PostEventCallback) == 0x000038, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent, ExternalSources) == 0x000048, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent::ExternalSources' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent, LatentInfo) == 0x000058, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent::LatentInfo' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent, AudioContext) == 0x000070, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAsyncWithComponent::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventSoftRefAtLocation
// 0x0088 (0x0088 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0050(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0068(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation) == 0x000088, "Wrong size on X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation, WorldContextObject) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation, AkEventSoftRef) == 0x000008, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation, PlayingID) == 0x000030, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation, Location) == 0x000038, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation::Location' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation, Orientation) == 0x000050, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation, LatentInfo) == 0x000068, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation::LatentInfo' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation, AudioContext) == 0x000080, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefAtLocation::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventSoftRefWithComponent
// 0x0078 (0x0078 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0058(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent) == 0x000078, "Wrong size on X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent, AkComponent) == 0x000028, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent::AkComponent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent, PlayingID) == 0x000030, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent, CallbackMask) == 0x000034, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent, PostEventCallback) == 0x000038, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent, ExternalSources) == 0x000048, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent::ExternalSources' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent, LatentInfo) == 0x000058, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent::LatentInfo' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent, AudioContext) == 0x000070, "Member 'X6AkBlueprintLibrary_X6PostEventSoftRefWithComponent::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6PostEventWithComponent
// 0x0040 (0x0040 - 0x0000)
struct X6AkBlueprintLibrary_X6PostEventWithComponent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingID;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6PostEventWithComponent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6PostEventWithComponent");
static_assert(sizeof(X6AkBlueprintLibrary_X6PostEventWithComponent) == 0x000040, "Wrong size on X6AkBlueprintLibrary_X6PostEventWithComponent");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventWithComponent, AkEvent) == 0x000000, "Member 'X6AkBlueprintLibrary_X6PostEventWithComponent::AkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventWithComponent, AkComponent) == 0x000008, "Member 'X6AkBlueprintLibrary_X6PostEventWithComponent::AkComponent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventWithComponent, PlayingID) == 0x000010, "Member 'X6AkBlueprintLibrary_X6PostEventWithComponent::PlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventWithComponent, CallbackMask) == 0x000014, "Member 'X6AkBlueprintLibrary_X6PostEventWithComponent::CallbackMask' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventWithComponent, PostEventCallback) == 0x000018, "Member 'X6AkBlueprintLibrary_X6PostEventWithComponent::PostEventCallback' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventWithComponent, ExternalSources) == 0x000028, "Member 'X6AkBlueprintLibrary_X6PostEventWithComponent::ExternalSources' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6PostEventWithComponent, AudioContext) == 0x000038, "Member 'X6AkBlueprintLibrary_X6PostEventWithComponent::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SeekEvent
// 0x0020 (0x0020 - 0x0000)
struct X6AkBlueprintLibrary_X6SeekEvent final
{
public:
	class UAkAudioEvent*                          InAkEvent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSeekPercent;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPlayingID;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6SeekEvent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SeekEvent");
static_assert(sizeof(X6AkBlueprintLibrary_X6SeekEvent) == 0x000020, "Wrong size on X6AkBlueprintLibrary_X6SeekEvent");
static_assert(offsetof(X6AkBlueprintLibrary_X6SeekEvent, InAkEvent) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SeekEvent::InAkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SeekEvent, InActor) == 0x000008, "Member 'X6AkBlueprintLibrary_X6SeekEvent::InActor' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SeekEvent, InSeekPercent) == 0x000010, "Member 'X6AkBlueprintLibrary_X6SeekEvent::InSeekPercent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SeekEvent, InPlayingID) == 0x000014, "Member 'X6AkBlueprintLibrary_X6SeekEvent::InPlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SeekEvent, ReturnValue) == 0x000018, "Member 'X6AkBlueprintLibrary_X6SeekEvent::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SeekEventWithComponent
// 0x0020 (0x0020 - 0x0000)
struct X6AkBlueprintLibrary_X6SeekEventWithComponent final
{
public:
	class UAkAudioEvent*                          InAkEvent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           InAkComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSeekPercent;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPlayingID;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6SeekEventWithComponent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SeekEventWithComponent");
static_assert(sizeof(X6AkBlueprintLibrary_X6SeekEventWithComponent) == 0x000020, "Wrong size on X6AkBlueprintLibrary_X6SeekEventWithComponent");
static_assert(offsetof(X6AkBlueprintLibrary_X6SeekEventWithComponent, InAkEvent) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SeekEventWithComponent::InAkEvent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SeekEventWithComponent, InAkComponent) == 0x000008, "Member 'X6AkBlueprintLibrary_X6SeekEventWithComponent::InAkComponent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SeekEventWithComponent, InSeekPercent) == 0x000010, "Member 'X6AkBlueprintLibrary_X6SeekEventWithComponent::InSeekPercent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SeekEventWithComponent, InPlayingID) == 0x000014, "Member 'X6AkBlueprintLibrary_X6SeekEventWithComponent::InPlayingID' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SeekEventWithComponent, ReturnValue) == 0x000018, "Member 'X6AkBlueprintLibrary_X6SeekEventWithComponent::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SetAkAudioSession
// 0x0008 (0x0008 - 0x0000)
struct X6AkBlueprintLibrary_X6SetAkAudioSession final
{
public:
	EAkAudioSessionCategory                       AudioSessionCategory;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkAudioSessionBehaviorOption                 AudioSessionBehavior;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6SetAkAudioSession) == 0x000004, "Wrong alignment on X6AkBlueprintLibrary_X6SetAkAudioSession");
static_assert(sizeof(X6AkBlueprintLibrary_X6SetAkAudioSession) == 0x000008, "Wrong size on X6AkBlueprintLibrary_X6SetAkAudioSession");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetAkAudioSession, AudioSessionCategory) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SetAkAudioSession::AudioSessionCategory' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetAkAudioSession, AudioSessionBehavior) == 0x000004, "Member 'X6AkBlueprintLibrary_X6SetAkAudioSession::AudioSessionBehavior' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SetAkAudioSessionCategory
// 0x0004 (0x0004 - 0x0000)
struct X6AkBlueprintLibrary_X6SetAkAudioSessionCategory final
{
public:
	EAkAudioSessionCategory                       AudioSessionCategory;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6SetAkAudioSessionCategory) == 0x000004, "Wrong alignment on X6AkBlueprintLibrary_X6SetAkAudioSessionCategory");
static_assert(sizeof(X6AkBlueprintLibrary_X6SetAkAudioSessionCategory) == 0x000004, "Wrong size on X6AkBlueprintLibrary_X6SetAkAudioSessionCategory");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetAkAudioSessionCategory, AudioSessionCategory) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SetAkAudioSessionCategory::AudioSessionCategory' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SetAudioListenerOverride
// 0x0010 (0x0010 - 0x0000)
struct X6AkBlueprintLibrary_X6SetAudioListenerOverride final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InListenerOffset;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugListenerTransform;                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6SetAudioListenerOverride) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SetAudioListenerOverride");
static_assert(sizeof(X6AkBlueprintLibrary_X6SetAudioListenerOverride) == 0x000010, "Wrong size on X6AkBlueprintLibrary_X6SetAudioListenerOverride");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetAudioListenerOverride, WorldContextObject) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SetAudioListenerOverride::WorldContextObject' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetAudioListenerOverride, InListenerOffset) == 0x000008, "Member 'X6AkBlueprintLibrary_X6SetAudioListenerOverride::InListenerOffset' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetAudioListenerOverride, bDebugListenerTransform) == 0x00000C, "Member 'X6AkBlueprintLibrary_X6SetAudioListenerOverride::bDebugListenerTransform' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SetImageSource
// 0x0070 (0x0070 - 0x0000)
struct X6AkBlueprintLibrary_X6SetImageSource final
{
public:
	int64                                         InSrcId;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAkImageSourceSettings                 InInfo;                                            // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InName;                                            // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAuxBus*                              InAuxBus;                                          // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InActor;                                           // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6SetImageSource) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SetImageSource");
static_assert(sizeof(X6AkBlueprintLibrary_X6SetImageSource) == 0x000070, "Wrong size on X6AkBlueprintLibrary_X6SetImageSource");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetImageSource, InSrcId) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SetImageSource::InSrcId' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetImageSource, InInfo) == 0x000008, "Member 'X6AkBlueprintLibrary_X6SetImageSource::InInfo' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetImageSource, InName) == 0x000048, "Member 'X6AkBlueprintLibrary_X6SetImageSource::InName' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetImageSource, InAuxBus) == 0x000058, "Member 'X6AkBlueprintLibrary_X6SetImageSource::InAuxBus' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetImageSource, InActor) == 0x000060, "Member 'X6AkBlueprintLibrary_X6SetImageSource::InActor' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetImageSource, ReturnValue) == 0x000068, "Member 'X6AkBlueprintLibrary_X6SetImageSource::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SetOfflineRendering
// 0x0001 (0x0001 - 0x0000)
struct X6AkBlueprintLibrary_X6SetOfflineRendering final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6SetOfflineRendering) == 0x000001, "Wrong alignment on X6AkBlueprintLibrary_X6SetOfflineRendering");
static_assert(sizeof(X6AkBlueprintLibrary_X6SetOfflineRendering) == 0x000001, "Wrong size on X6AkBlueprintLibrary_X6SetOfflineRendering");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetOfflineRendering, bEnable) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SetOfflineRendering::bEnable' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SetState
// 0x0008 (0x0008 - 0x0000)
struct X6AkBlueprintLibrary_X6SetState final
{
public:
	class UAkStateValue*                          StateValue;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6SetState) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SetState");
static_assert(sizeof(X6AkBlueprintLibrary_X6SetState) == 0x000008, "Wrong size on X6AkBlueprintLibrary_X6SetState");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetState, StateValue) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SetState::StateValue' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SetStateSoftRef
// 0x0028 (0x0028 - 0x0000)
struct X6AkBlueprintLibrary_X6SetStateSoftRef final
{
public:
	TSoftObjectPtr<class UAkStateValue>           AkStateSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6SetStateSoftRef) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SetStateSoftRef");
static_assert(sizeof(X6AkBlueprintLibrary_X6SetStateSoftRef) == 0x000028, "Wrong size on X6AkBlueprintLibrary_X6SetStateSoftRef");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetStateSoftRef, AkStateSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SetStateSoftRef::AkStateSoftRef' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SetSwitch
// 0x0010 (0x0010 - 0x0000)
struct X6AkBlueprintLibrary_X6SetSwitch final
{
public:
	class UAkSwitchValue*                         SwitchValue;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6SetSwitch) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SetSwitch");
static_assert(sizeof(X6AkBlueprintLibrary_X6SetSwitch) == 0x000010, "Wrong size on X6AkBlueprintLibrary_X6SetSwitch");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetSwitch, SwitchValue) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SetSwitch::SwitchValue' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetSwitch, Actor) == 0x000008, "Member 'X6AkBlueprintLibrary_X6SetSwitch::Actor' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SetSwitchSoftRef
// 0x0030 (0x0030 - 0x0000)
struct X6AkBlueprintLibrary_X6SetSwitchSoftRef final
{
public:
	TSoftObjectPtr<class UAkSwitchValue>          AkSwitchSoftRef;                                   // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6SetSwitchSoftRef) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SetSwitchSoftRef");
static_assert(sizeof(X6AkBlueprintLibrary_X6SetSwitchSoftRef) == 0x000030, "Wrong size on X6AkBlueprintLibrary_X6SetSwitchSoftRef");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetSwitchSoftRef, AkSwitchSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SetSwitchSoftRef::AkSwitchSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetSwitchSoftRef, Actor) == 0x000028, "Member 'X6AkBlueprintLibrary_X6SetSwitchSoftRef::Actor' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SetSwitchWithComponent
// 0x0010 (0x0010 - 0x0000)
struct X6AkBlueprintLibrary_X6SetSwitchWithComponent final
{
public:
	class UAkSwitchValue*                         SwitchValue;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6SetSwitchWithComponent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SetSwitchWithComponent");
static_assert(sizeof(X6AkBlueprintLibrary_X6SetSwitchWithComponent) == 0x000010, "Wrong size on X6AkBlueprintLibrary_X6SetSwitchWithComponent");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetSwitchWithComponent, SwitchValue) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SetSwitchWithComponent::SwitchValue' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SetSwitchWithComponent, AkComponent) == 0x000008, "Member 'X6AkBlueprintLibrary_X6SetSwitchWithComponent::AkComponent' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SimplePostEventSoftRef
// 0x0038 (0x0038 - 0x0000)
struct X6AkBlueprintLibrary_X6SimplePostEventSoftRef final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventActor;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestory;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6SimplePostEventSoftRef) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SimplePostEventSoftRef");
static_assert(sizeof(X6AkBlueprintLibrary_X6SimplePostEventSoftRef) == 0x000038, "Wrong size on X6AkBlueprintLibrary_X6SimplePostEventSoftRef");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRef, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRef::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRef, EventActor) == 0x000028, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRef::EventActor' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRef, bAutoDestory) == 0x000030, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRef::bAutoDestory' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRef, AudioContext) == 0x000031, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRef::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SimplePostEventSoftRef2D
// 0x0028 (0x0028 - 0x0000)
struct X6AkBlueprintLibrary_X6SimplePostEventSoftRef2D final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6SimplePostEventSoftRef2D) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SimplePostEventSoftRef2D");
static_assert(sizeof(X6AkBlueprintLibrary_X6SimplePostEventSoftRef2D) == 0x000028, "Wrong size on X6AkBlueprintLibrary_X6SimplePostEventSoftRef2D");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRef2D, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRef2D::AkEventSoftRef' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SimplePostEventSoftRefAsync
// 0x0038 (0x0038 - 0x0000)
struct X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventActor;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestory;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync");
static_assert(sizeof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync) == 0x000038, "Wrong size on X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync, EventActor) == 0x000028, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync::EventActor' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync, bAutoDestory) == 0x000030, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync::bAutoDestory' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync, AudioContext) == 0x000031, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SimplePostEventSoftRefAsync2D
// 0x0028 (0x0028 - 0x0000)
struct X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync2D final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync2D) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync2D");
static_assert(sizeof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync2D) == 0x000028, "Wrong size on X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync2D");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync2D, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsync2D::AkEventSoftRef' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SimplePostEventSoftRefAsyncAtLocation
// 0x0068 (0x0068 - 0x0000)
struct X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation");
static_assert(sizeof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation) == 0x000068, "Wrong size on X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation, WorldContextObject) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation, AkEventSoftRef) == 0x000008, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation, Location) == 0x000030, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation::Location' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation, Orientation) == 0x000048, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation, AudioContext) == 0x000060, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncAtLocation::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SimplePostEventSoftRefAsyncWithComponent
// 0x0038 (0x0038 - 0x0000)
struct X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncWithComponent final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncWithComponent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncWithComponent");
static_assert(sizeof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncWithComponent) == 0x000038, "Wrong size on X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncWithComponent");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncWithComponent, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncWithComponent::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncWithComponent, AkComponent) == 0x000028, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncWithComponent::AkComponent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncWithComponent, AudioContext) == 0x000030, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAsyncWithComponent::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SimplePostEventSoftRefAtLocation
// 0x0068 (0x0068 - 0x0000)
struct X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation");
static_assert(sizeof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation) == 0x000068, "Wrong size on X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation, WorldContextObject) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation, AkEventSoftRef) == 0x000008, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation, Location) == 0x000030, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation::Location' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation, Orientation) == 0x000048, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation::Orientation' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation, AudioContext) == 0x000060, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefAtLocation::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6SimplePostEventSoftRefWithComponent
// 0x0038 (0x0038 - 0x0000)
struct X6AkBlueprintLibrary_X6SimplePostEventSoftRefWithComponent final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEventSoftRef;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6AkAudioContext                             AudioContext;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefWithComponent) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6SimplePostEventSoftRefWithComponent");
static_assert(sizeof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefWithComponent) == 0x000038, "Wrong size on X6AkBlueprintLibrary_X6SimplePostEventSoftRefWithComponent");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefWithComponent, AkEventSoftRef) == 0x000000, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefWithComponent::AkEventSoftRef' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefWithComponent, AkComponent) == 0x000028, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefWithComponent::AkComponent' has a wrong offset!");
static_assert(offsetof(X6AkBlueprintLibrary_X6SimplePostEventSoftRefWithComponent, AudioContext) == 0x000030, "Member 'X6AkBlueprintLibrary_X6SimplePostEventSoftRefWithComponent::AudioContext' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6StopSound
// 0x0008 (0x0008 - 0x0000)
struct X6AkBlueprintLibrary_X6StopSound final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6StopSound) == 0x000008, "Wrong alignment on X6AkBlueprintLibrary_X6StopSound");
static_assert(sizeof(X6AkBlueprintLibrary_X6StopSound) == 0x000008, "Wrong size on X6AkBlueprintLibrary_X6StopSound");
static_assert(offsetof(X6AkBlueprintLibrary_X6StopSound, InActor) == 0x000000, "Member 'X6AkBlueprintLibrary_X6StopSound::InActor' has a wrong offset!");

// Function WwiseExtension.X6AkBlueprintLibrary.X6Suspend
// 0x0001 (0x0001 - 0x0000)
struct X6AkBlueprintLibrary_X6Suspend final
{
public:
	bool                                          bRenderAnyway;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkBlueprintLibrary_X6Suspend) == 0x000001, "Wrong alignment on X6AkBlueprintLibrary_X6Suspend");
static_assert(sizeof(X6AkBlueprintLibrary_X6Suspend) == 0x000001, "Wrong size on X6AkBlueprintLibrary_X6Suspend");
static_assert(offsetof(X6AkBlueprintLibrary_X6Suspend, bRenderAnyway) == 0x000000, "Member 'X6AkBlueprintLibrary_X6Suspend::bRenderAnyway' has a wrong offset!");

// Function WwiseExtension.X6AkManager.AkErrorOutput
// 0x0020 (0x0020 - 0x0000)
struct X6AkManager_AkErrorOutput final
{
public:
	class FString                                 InErrorString;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InPlayingID;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        InGameObjectID;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkManager_AkErrorOutput) == 0x000008, "Wrong alignment on X6AkManager_AkErrorOutput");
static_assert(sizeof(X6AkManager_AkErrorOutput) == 0x000020, "Wrong size on X6AkManager_AkErrorOutput");
static_assert(offsetof(X6AkManager_AkErrorOutput, InErrorString) == 0x000000, "Member 'X6AkManager_AkErrorOutput::InErrorString' has a wrong offset!");
static_assert(offsetof(X6AkManager_AkErrorOutput, InPlayingID) == 0x000010, "Member 'X6AkManager_AkErrorOutput::InPlayingID' has a wrong offset!");
static_assert(offsetof(X6AkManager_AkErrorOutput, InGameObjectID) == 0x000018, "Member 'X6AkManager_AkErrorOutput::InGameObjectID' has a wrong offset!");

// Function WwiseExtension.X6AkManager.GetAllAkEventDebugInfos
// 0x0010 (0x0010 - 0x0000)
struct X6AkManager_GetAllAkEventDebugInfos final
{
public:
	TArray<struct FAkEventDebugInfo>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkManager_GetAllAkEventDebugInfos) == 0x000008, "Wrong alignment on X6AkManager_GetAllAkEventDebugInfos");
static_assert(sizeof(X6AkManager_GetAllAkEventDebugInfos) == 0x000010, "Wrong size on X6AkManager_GetAllAkEventDebugInfos");
static_assert(offsetof(X6AkManager_GetAllAkEventDebugInfos, ReturnValue) == 0x000000, "Member 'X6AkManager_GetAllAkEventDebugInfos::ReturnValue' has a wrong offset!");

// Function WwiseExtension.X6AkManager.InitializeFootstepSoundConfig
// 0x0008 (0x0008 - 0x0000)
struct X6AkManager_InitializeFootstepSoundConfig final
{
public:
	const class UDataTable*                       InDataTable;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AkManager_InitializeFootstepSoundConfig) == 0x000008, "Wrong alignment on X6AkManager_InitializeFootstepSoundConfig");
static_assert(sizeof(X6AkManager_InitializeFootstepSoundConfig) == 0x000008, "Wrong size on X6AkManager_InitializeFootstepSoundConfig");
static_assert(offsetof(X6AkManager_InitializeFootstepSoundConfig, InDataTable) == 0x000000, "Member 'X6AkManager_InitializeFootstepSoundConfig::InDataTable' has a wrong offset!");

}

