#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CheckpointBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_CheckpointBase.ABP_CheckpointBase_C
// 0x0390 (0x0760 - 0x03D0)
class UABP_CheckpointBase_C : public UAnimInstance
{
public:
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x03D8(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x03E0(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x03E8(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0408(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0430(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0458(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0480(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x04A8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x04D0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0518(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0538(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0580(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x05A0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x05E8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0608(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0650(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0670(0x00C8)()
	class UAnimSequence*                          AnimNoActiveIdle;                                  // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          AnimFirstActive;                                   // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          AnimActiveIdle;                                    // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          AnimLastActive;                                    // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x0758(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReActive;                                         // 0x0759(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActived;                                          // 0x075A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNeedReActiveAnim;                                 // 0x075B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnUpdate(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void ForceActive();
	void ExecuteUbergraph_ABP_CheckpointBase(int32 EntryPoint);
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void Active();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_CheckpointBase_C">();
	}
	static class UABP_CheckpointBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_CheckpointBase_C>();
	}
};
static_assert(alignof(UABP_CheckpointBase_C) == 0x000010, "Wrong alignment on UABP_CheckpointBase_C");
static_assert(sizeof(UABP_CheckpointBase_C) == 0x000760, "Wrong size on UABP_CheckpointBase_C");
static_assert(offsetof(UABP_CheckpointBase_C, UberGraphFrame) == 0x0003D0, "Member 'UABP_CheckpointBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimBlueprintExtension_PropertyAccess) == 0x0003D8, "Member 'UABP_CheckpointBase_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimBlueprintExtension_Base) == 0x0003E0, "Member 'UABP_CheckpointBase_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_Root) == 0x0003E8, "Member 'UABP_CheckpointBase_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_TransitionResult_4) == 0x000408, "Member 'UABP_CheckpointBase_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_TransitionResult_3) == 0x000430, "Member 'UABP_CheckpointBase_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_TransitionResult_2) == 0x000458, "Member 'UABP_CheckpointBase_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_TransitionResult_1) == 0x000480, "Member 'UABP_CheckpointBase_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_TransitionResult) == 0x0004A8, "Member 'UABP_CheckpointBase_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_SequencePlayer_3) == 0x0004D0, "Member 'UABP_CheckpointBase_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_StateResult_3) == 0x000518, "Member 'UABP_CheckpointBase_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_SequencePlayer_2) == 0x000538, "Member 'UABP_CheckpointBase_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_StateResult_2) == 0x000580, "Member 'UABP_CheckpointBase_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_SequencePlayer_1) == 0x0005A0, "Member 'UABP_CheckpointBase_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_StateResult_1) == 0x0005E8, "Member 'UABP_CheckpointBase_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_SequencePlayer) == 0x000608, "Member 'UABP_CheckpointBase_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_StateResult) == 0x000650, "Member 'UABP_CheckpointBase_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimGraphNode_StateMachine) == 0x000670, "Member 'UABP_CheckpointBase_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimNoActiveIdle) == 0x000738, "Member 'UABP_CheckpointBase_C::AnimNoActiveIdle' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimFirstActive) == 0x000740, "Member 'UABP_CheckpointBase_C::AnimFirstActive' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimActiveIdle) == 0x000748, "Member 'UABP_CheckpointBase_C::AnimActiveIdle' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, AnimLastActive) == 0x000750, "Member 'UABP_CheckpointBase_C::AnimLastActive' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, bActive) == 0x000758, "Member 'UABP_CheckpointBase_C::bActive' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, bReActive) == 0x000759, "Member 'UABP_CheckpointBase_C::bReActive' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, bActived) == 0x00075A, "Member 'UABP_CheckpointBase_C::bActived' has a wrong offset!");
static_assert(offsetof(UABP_CheckpointBase_C, bNeedReActiveAnim) == 0x00075B, "Member 'UABP_CheckpointBase_C::bNeedReActiveAnim' has a wrong offset!");

}

