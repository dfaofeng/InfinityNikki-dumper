#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperGamesSEM

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function PaperGamesSEM.PaperGamesSEMDataHostBase.GetActorType
// 0x0004 (0x0004 - 0x0000)
struct PaperGamesSEMDataHostBase_GetActorType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMDataHostBase_GetActorType) == 0x000004, "Wrong alignment on PaperGamesSEMDataHostBase_GetActorType");
static_assert(sizeof(PaperGamesSEMDataHostBase_GetActorType) == 0x000004, "Wrong size on PaperGamesSEMDataHostBase_GetActorType");
static_assert(offsetof(PaperGamesSEMDataHostBase_GetActorType, ReturnValue) == 0x000000, "Member 'PaperGamesSEMDataHostBase_GetActorType::ReturnValue' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMDataHostBase.GetDefaultStruct
// 0x0008 (0x0008 - 0x0000)
struct PaperGamesSEMDataHostBase_GetDefaultStruct final
{
public:
	class UUserDefinedStruct*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMDataHostBase_GetDefaultStruct) == 0x000008, "Wrong alignment on PaperGamesSEMDataHostBase_GetDefaultStruct");
static_assert(sizeof(PaperGamesSEMDataHostBase_GetDefaultStruct) == 0x000008, "Wrong size on PaperGamesSEMDataHostBase_GetDefaultStruct");
static_assert(offsetof(PaperGamesSEMDataHostBase_GetDefaultStruct, ReturnValue) == 0x000000, "Member 'PaperGamesSEMDataHostBase_GetDefaultStruct::ReturnValue' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMDataHostBase.GetObjectID
// 0x0004 (0x0004 - 0x0000)
struct PaperGamesSEMDataHostBase_GetObjectID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMDataHostBase_GetObjectID) == 0x000004, "Wrong alignment on PaperGamesSEMDataHostBase_GetObjectID");
static_assert(sizeof(PaperGamesSEMDataHostBase_GetObjectID) == 0x000004, "Wrong size on PaperGamesSEMDataHostBase_GetObjectID");
static_assert(offsetof(PaperGamesSEMDataHostBase_GetObjectID, ReturnValue) == 0x000000, "Member 'PaperGamesSEMDataHostBase_GetObjectID::ReturnValue' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMDataHostBase.GetSourceId
// 0x0004 (0x0004 - 0x0000)
struct PaperGamesSEMDataHostBase_GetSourceId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMDataHostBase_GetSourceId) == 0x000004, "Wrong alignment on PaperGamesSEMDataHostBase_GetSourceId");
static_assert(sizeof(PaperGamesSEMDataHostBase_GetSourceId) == 0x000004, "Wrong size on PaperGamesSEMDataHostBase_GetSourceId");
static_assert(offsetof(PaperGamesSEMDataHostBase_GetSourceId, ReturnValue) == 0x000000, "Member 'PaperGamesSEMDataHostBase_GetSourceId::ReturnValue' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMDataHostBase.GetTriggerData
// 0x0018 (0x0018 - 0x0000)
struct PaperGamesSEMDataHostBase_GetTriggerData final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMDataHostBase_GetTriggerData) == 0x000008, "Wrong alignment on PaperGamesSEMDataHostBase_GetTriggerData");
static_assert(sizeof(PaperGamesSEMDataHostBase_GetTriggerData) == 0x000018, "Wrong size on PaperGamesSEMDataHostBase_GetTriggerData");
static_assert(offsetof(PaperGamesSEMDataHostBase_GetTriggerData, ReturnValue) == 0x000000, "Member 'PaperGamesSEMDataHostBase_GetTriggerData::ReturnValue' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMDataHostBase.OnDefaultStructPropertyChanged
// 0x0010 (0x0010 - 0x0000)
struct PaperGamesSEMDataHostBase_OnDefaultStructPropertyChanged final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMDataHostBase_OnDefaultStructPropertyChanged) == 0x000008, "Wrong alignment on PaperGamesSEMDataHostBase_OnDefaultStructPropertyChanged");
static_assert(sizeof(PaperGamesSEMDataHostBase_OnDefaultStructPropertyChanged) == 0x000010, "Wrong size on PaperGamesSEMDataHostBase_OnDefaultStructPropertyChanged");
static_assert(offsetof(PaperGamesSEMDataHostBase_OnDefaultStructPropertyChanged, PropertyName) == 0x000000, "Member 'PaperGamesSEMDataHostBase_OnDefaultStructPropertyChanged::PropertyName' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMDataHostBase.PostUpdateSplineComponent
// 0x0018 (0x0018 - 0x0000)
struct PaperGamesSEMDataHostBase_PostUpdateSplineComponent final
{
public:
	class FString                                 PointsListStr;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplinePointType                              PointType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperGamesSEMDataHostBase_PostUpdateSplineComponent) == 0x000008, "Wrong alignment on PaperGamesSEMDataHostBase_PostUpdateSplineComponent");
static_assert(sizeof(PaperGamesSEMDataHostBase_PostUpdateSplineComponent) == 0x000018, "Wrong size on PaperGamesSEMDataHostBase_PostUpdateSplineComponent");
static_assert(offsetof(PaperGamesSEMDataHostBase_PostUpdateSplineComponent, PointsListStr) == 0x000000, "Member 'PaperGamesSEMDataHostBase_PostUpdateSplineComponent::PointsListStr' has a wrong offset!");
static_assert(offsetof(PaperGamesSEMDataHostBase_PostUpdateSplineComponent, PointType) == 0x000010, "Member 'PaperGamesSEMDataHostBase_PostUpdateSplineComponent::PointType' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMDataHostBase.SetSourceId
// 0x0004 (0x0004 - 0x0000)
struct PaperGamesSEMDataHostBase_SetSourceId final
{
public:
	int32                                         SourceId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMDataHostBase_SetSourceId) == 0x000004, "Wrong alignment on PaperGamesSEMDataHostBase_SetSourceId");
static_assert(sizeof(PaperGamesSEMDataHostBase_SetSourceId) == 0x000004, "Wrong size on PaperGamesSEMDataHostBase_SetSourceId");
static_assert(offsetof(PaperGamesSEMDataHostBase_SetSourceId, SourceId) == 0x000000, "Member 'PaperGamesSEMDataHostBase_SetSourceId::SourceId' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMDataHostBase.SetTriggerData
// 0x0018 (0x0018 - 0x0000)
struct PaperGamesSEMDataHostBase_SetTriggerData final
{
public:
	struct FVector                                InTriggerData;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMDataHostBase_SetTriggerData) == 0x000008, "Wrong alignment on PaperGamesSEMDataHostBase_SetTriggerData");
static_assert(sizeof(PaperGamesSEMDataHostBase_SetTriggerData) == 0x000018, "Wrong size on PaperGamesSEMDataHostBase_SetTriggerData");
static_assert(offsetof(PaperGamesSEMDataHostBase_SetTriggerData, InTriggerData) == 0x000000, "Member 'PaperGamesSEMDataHostBase_SetTriggerData::InTriggerData' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMSplineRoad.GetSplineWidth
// 0x0008 (0x0008 - 0x0000)
struct PaperGamesSEMSplineRoad_GetSplineWidth final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMSplineRoad_GetSplineWidth) == 0x000008, "Wrong alignment on PaperGamesSEMSplineRoad_GetSplineWidth");
static_assert(sizeof(PaperGamesSEMSplineRoad_GetSplineWidth) == 0x000008, "Wrong size on PaperGamesSEMSplineRoad_GetSplineWidth");
static_assert(offsetof(PaperGamesSEMSplineRoad_GetSplineWidth, ReturnValue) == 0x000000, "Member 'PaperGamesSEMSplineRoad_GetSplineWidth::ReturnValue' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMSplineRoad.SetSplineColor
// 0x0010 (0x0010 - 0x0000)
struct PaperGamesSEMSplineRoad_SetSplineColor final
{
public:
	class FString                                 ColorParamName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMSplineRoad_SetSplineColor) == 0x000008, "Wrong alignment on PaperGamesSEMSplineRoad_SetSplineColor");
static_assert(sizeof(PaperGamesSEMSplineRoad_SetSplineColor) == 0x000010, "Wrong size on PaperGamesSEMSplineRoad_SetSplineColor");
static_assert(offsetof(PaperGamesSEMSplineRoad_SetSplineColor, ColorParamName) == 0x000000, "Member 'PaperGamesSEMSplineRoad_SetSplineColor::ColorParamName' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMSplineRoad.SetSplineWidth
// 0x0004 (0x0004 - 0x0000)
struct PaperGamesSEMSplineRoad_SetSplineWidth final
{
public:
	float                                         InWidth;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMSplineRoad_SetSplineWidth) == 0x000004, "Wrong alignment on PaperGamesSEMSplineRoad_SetSplineWidth");
static_assert(sizeof(PaperGamesSEMSplineRoad_SetSplineWidth) == 0x000004, "Wrong size on PaperGamesSEMSplineRoad_SetSplineWidth");
static_assert(offsetof(PaperGamesSEMSplineRoad_SetSplineWidth, InWidth) == 0x000000, "Member 'PaperGamesSEMSplineRoad_SetSplineWidth::InWidth' has a wrong offset!");

// Function PaperGamesSEM.PaperGamesSEMSplineRoad.SetTemplete
// 0x0010 (0x0010 - 0x0000)
struct PaperGamesSEMSplineRoad_SetTemplete final
{
public:
	class FString                                 TempName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGamesSEMSplineRoad_SetTemplete) == 0x000008, "Wrong alignment on PaperGamesSEMSplineRoad_SetTemplete");
static_assert(sizeof(PaperGamesSEMSplineRoad_SetTemplete) == 0x000010, "Wrong size on PaperGamesSEMSplineRoad_SetTemplete");
static_assert(offsetof(PaperGamesSEMSplineRoad_SetTemplete, TempName) == 0x000000, "Member 'PaperGamesSEMSplineRoad_SetTemplete::TempName' has a wrong offset!");

}

