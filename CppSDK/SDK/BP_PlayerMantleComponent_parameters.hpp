#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerMantleComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "EMantleType_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerMantleComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerMantleComponent_C_ReceiveTick");
static_assert(sizeof(BP_PlayerMantleComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerMantleComponent_C_ReceiveTick");
static_assert(offsetof(BP_PlayerMantleComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerMantleComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMantleComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_PlayerMantleComponent_C_ReceiveEndPlay");
static_assert(sizeof(BP_PlayerMantleComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_PlayerMantleComponent_C_ReceiveEndPlay");
static_assert(offsetof(BP_PlayerMantleComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_PlayerMantleComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.ExecuteUbergraph_BP_PlayerMantleComponent
// 0x000C (0x000C - 0x0000)
struct BP_PlayerMantleComponent_C_ExecuteUbergraph_BP_PlayerMantleComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_ExecuteUbergraph_BP_PlayerMantleComponent) == 0x000004, "Wrong alignment on BP_PlayerMantleComponent_C_ExecuteUbergraph_BP_PlayerMantleComponent");
static_assert(sizeof(BP_PlayerMantleComponent_C_ExecuteUbergraph_BP_PlayerMantleComponent) == 0x00000C, "Wrong size on BP_PlayerMantleComponent_C_ExecuteUbergraph_BP_PlayerMantleComponent");
static_assert(offsetof(BP_PlayerMantleComponent_C_ExecuteUbergraph_BP_PlayerMantleComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerMantleComponent_C_ExecuteUbergraph_BP_PlayerMantleComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_ExecuteUbergraph_BP_PlayerMantleComponent, K2Node_Event_EndPlayReason) == 0x000004, "Member 'BP_PlayerMantleComponent_C_ExecuteUbergraph_BP_PlayerMantleComponent::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_ExecuteUbergraph_BP_PlayerMantleComponent, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_PlayerMantleComponent_C_ExecuteUbergraph_BP_PlayerMantleComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_TryToStartMantle
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_TryToStartMantle final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_TryToStartMantle) == 0x000001, "Wrong alignment on BP_PlayerMantleComponent_C_BP_TryToStartMantle");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_TryToStartMantle) == 0x000001, "Wrong size on BP_PlayerMantleComponent_C_BP_TryToStartMantle");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_TryToStartMantle, Ret) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_TryToStartMantle::Ret' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_Private_MantleUpdate
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_Private_MantleUpdate final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_Private_MantleUpdate) == 0x000008, "Wrong alignment on BP_PlayerMantleComponent_C_BP_Private_MantleUpdate");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_Private_MantleUpdate) == 0x000008, "Wrong size on BP_PlayerMantleComponent_C_BP_Private_MantleUpdate");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantleUpdate, DeltaTime) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantleUpdate::DeltaTime' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_Private_MantleStart
// 0x0080 (0x0080 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_Private_MantleStart final
{
public:
	double                                        MantleHeigh;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HitComponet;                                       // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_Private_MantleStart) == 0x000010, "Wrong alignment on BP_PlayerMantleComponent_C_BP_Private_MantleStart");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_Private_MantleStart) == 0x000080, "Wrong size on BP_PlayerMantleComponent_C_BP_Private_MantleStart");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantleStart, MantleHeigh) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantleStart::MantleHeigh' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantleStart, TargetTransform) == 0x000010, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantleStart::TargetTransform' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantleStart, HitComponet) == 0x000070, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantleStart::HitComponet' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantleStart, Ret) == 0x000078, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantleStart::Ret' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_Private_MantlePostCheck
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_Private_MantlePostCheck final
{
public:
	bool                                          ReceivedInput;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_Private_MantlePostCheck) == 0x000001, "Wrong alignment on BP_PlayerMantleComponent_C_BP_Private_MantlePostCheck");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_Private_MantlePostCheck) == 0x000002, "Wrong size on BP_PlayerMantleComponent_C_BP_Private_MantlePostCheck");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantlePostCheck, ReceivedInput) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantlePostCheck::ReceivedInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantlePostCheck, Ret) == 0x000001, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantlePostCheck::Ret' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_Private_MantleMainCheckInFalling
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_Private_MantleMainCheckInFalling final
{
public:
	double                                        ZOffset;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_Private_MantleMainCheckInFalling) == 0x000008, "Wrong alignment on BP_PlayerMantleComponent_C_BP_Private_MantleMainCheckInFalling");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_Private_MantleMainCheckInFalling) == 0x000010, "Wrong size on BP_PlayerMantleComponent_C_BP_Private_MantleMainCheckInFalling");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantleMainCheckInFalling, ZOffset) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantleMainCheckInFalling::ZOffset' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantleMainCheckInFalling, Ret) == 0x000008, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantleMainCheckInFalling::Ret' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_Private_MantleMainCheck
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_Private_MantleMainCheck final
{
public:
	double                                        ZOffset;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_Private_MantleMainCheck) == 0x000008, "Wrong alignment on BP_PlayerMantleComponent_C_BP_Private_MantleMainCheck");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_Private_MantleMainCheck) == 0x000010, "Wrong size on BP_PlayerMantleComponent_C_BP_Private_MantleMainCheck");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantleMainCheck, ZOffset) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantleMainCheck::ZOffset' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantleMainCheck, Ret) == 0x000008, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantleMainCheck::Ret' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_Private_MantleAllCheck
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_Private_MantleAllCheck final
{
public:
	double                                        ZOffset;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Vault;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_Private_MantleAllCheck) == 0x000008, "Wrong alignment on BP_PlayerMantleComponent_C_BP_Private_MantleAllCheck");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_Private_MantleAllCheck) == 0x000010, "Wrong size on BP_PlayerMantleComponent_C_BP_Private_MantleAllCheck");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantleAllCheck, ZOffset) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantleAllCheck::ZOffset' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_MantleAllCheck, Vault) == 0x000008, "Member 'BP_PlayerMantleComponent_C_BP_Private_MantleAllCheck::Vault' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_Private_ForceEndCheck
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_Private_ForceEndCheck final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_Private_ForceEndCheck) == 0x000001, "Wrong alignment on BP_PlayerMantleComponent_C_BP_Private_ForceEndCheck");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_Private_ForceEndCheck) == 0x000001, "Wrong size on BP_PlayerMantleComponent_C_BP_Private_ForceEndCheck");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_Private_ForceEndCheck, Ret) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_Private_ForceEndCheck::Ret' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_IsMantleFeatureActivated
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_IsMantleFeatureActivated final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsComponentTickEnabled_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_IsMantleFeatureActivated) == 0x000001, "Wrong alignment on BP_PlayerMantleComponent_C_BP_IsMantleFeatureActivated");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_IsMantleFeatureActivated) == 0x000003, "Wrong size on BP_PlayerMantleComponent_C_BP_IsMantleFeatureActivated");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_IsMantleFeatureActivated, Ret) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_IsMantleFeatureActivated::Ret' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_IsMantleFeatureActivated, CallFunc_IsComponentTickEnabled_ReturnValue) == 0x000001, "Member 'BP_PlayerMantleComponent_C_BP_IsMantleFeatureActivated::CallFunc_IsComponentTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_IsMantleFeatureActivated, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_PlayerMantleComponent_C_BP_IsMantleFeatureActivated::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_GetCurrentMantleType
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_GetCurrentMantleType final
{
public:
	EMantleType                                   MantleType;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_GetCurrentMantleType) == 0x000001, "Wrong alignment on BP_PlayerMantleComponent_C_BP_GetCurrentMantleType");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_GetCurrentMantleType) == 0x000001, "Wrong size on BP_PlayerMantleComponent_C_BP_GetCurrentMantleType");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_GetCurrentMantleType, MantleType) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_GetCurrentMantleType::MantleType' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_CanDoMantleInFalling
// 0x0060 (0x0060 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling final
{
public:
	struct FVector                                CapsuleBaseLocation;                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentPlayerInputVector;                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurActorLocation;                                  // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinLedgeHeight;                                    // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxLedgeHeight;                                    // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling) == 0x000008, "Wrong alignment on BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling) == 0x000060, "Wrong size on BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling, CapsuleBaseLocation) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling::CapsuleBaseLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling, CurrentPlayerInputVector) == 0x000018, "Member 'BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling::CurrentPlayerInputVector' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling, CurActorLocation) == 0x000030, "Member 'BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling::CurActorLocation' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling, MinLedgeHeight) == 0x000048, "Member 'BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling::MinLedgeHeight' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling, MaxLedgeHeight) == 0x000050, "Member 'BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling::MaxLedgeHeight' has a wrong offset!");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling, Ret) == 0x000058, "Member 'BP_PlayerMantleComponent_C_BP_CanDoMantleInFalling::Ret' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.BP_ActivateMantleFeature
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMantleComponent_C_BP_ActivateMantleFeature final
{
public:
	bool                                          IsActivate;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_BP_ActivateMantleFeature) == 0x000001, "Wrong alignment on BP_PlayerMantleComponent_C_BP_ActivateMantleFeature");
static_assert(sizeof(BP_PlayerMantleComponent_C_BP_ActivateMantleFeature) == 0x000001, "Wrong size on BP_PlayerMantleComponent_C_BP_ActivateMantleFeature");
static_assert(offsetof(BP_PlayerMantleComponent_C_BP_ActivateMantleFeature, IsActivate) == 0x000000, "Member 'BP_PlayerMantleComponent_C_BP_ActivateMantleFeature::IsActivate' has a wrong offset!");

// Function BP_PlayerMantleComponent.BP_PlayerMantleComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerMantleComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMantleComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_PlayerMantleComponent_C_GetModuleName");
static_assert(sizeof(BP_PlayerMantleComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_PlayerMantleComponent_C_GetModuleName");
static_assert(offsetof(BP_PlayerMantleComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_PlayerMantleComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

