#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamePadTrigger

#include "Basic.hpp"


namespace SDK
{

// Enum GamePadTrigger.EGamePadTriggerEffectMode
// NumValues: 0x0008
enum class EGamePadTriggerEffectMode : uint8
{
	TRIGGER_EFFECT_MODE_OFF                  = 0,
	TRIGGER_EFFECT_MODE_FEEDBACK             = 1,
	TRIGGER_EFFECT_MODE_WEAPON               = 2,
	TRIGGER_EFFECT_MODE_VIBRATION            = 3,
	TRIGGER_EFFECT_MODE_MULTIPLE_POSITION_FEEDBACK = 4,
	TRIGGER_EFFECT_MODE_SLOPE_FEEDBACK       = 5,
	TRIGGER_EFFECT_MODE_MULTIPLE_POSITION_VIBRATION = 6,
	TRIGGER_EFFECT_MODE_MAX                  = 7,
};

// Enum GamePadTrigger.EGamePadTriggerIndex
// NumValues: 0x0003
enum class EGamePadTriggerIndex : uint8
{
	TRIGGER_INDEX_FOR_L2                     = 0,
	TRIGGER_INDEX_FOR_R2                     = 1,
	TRIGGER_INDEX_FOR_MAX                    = 2,
};

// ScriptStruct GamePadTrigger.GamePadTriggerEffectOffParam
// 0x0001 (0x0001 - 0x0000)
struct FGamePadTriggerEffectOffParam final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGamePadTriggerEffectOffParam) == 0x000001, "Wrong alignment on FGamePadTriggerEffectOffParam");
static_assert(sizeof(FGamePadTriggerEffectOffParam) == 0x000001, "Wrong size on FGamePadTriggerEffectOffParam");

// ScriptStruct GamePadTrigger.GamePadTriggerEffectFeedbackParam
// 0x0002 (0x0002 - 0x0000)
struct FGamePadTriggerEffectFeedbackParam final
{
public:
	uint8                                         Position;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Strength;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGamePadTriggerEffectFeedbackParam) == 0x000001, "Wrong alignment on FGamePadTriggerEffectFeedbackParam");
static_assert(sizeof(FGamePadTriggerEffectFeedbackParam) == 0x000002, "Wrong size on FGamePadTriggerEffectFeedbackParam");
static_assert(offsetof(FGamePadTriggerEffectFeedbackParam, Position) == 0x000000, "Member 'FGamePadTriggerEffectFeedbackParam::Position' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectFeedbackParam, Strength) == 0x000001, "Member 'FGamePadTriggerEffectFeedbackParam::Strength' has a wrong offset!");

// ScriptStruct GamePadTrigger.GamePadTriggerEffectWeaponParam
// 0x0003 (0x0003 - 0x0000)
struct FGamePadTriggerEffectWeaponParam final
{
public:
	uint8                                         StartPosition;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndPosition;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Strength;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGamePadTriggerEffectWeaponParam) == 0x000001, "Wrong alignment on FGamePadTriggerEffectWeaponParam");
static_assert(sizeof(FGamePadTriggerEffectWeaponParam) == 0x000003, "Wrong size on FGamePadTriggerEffectWeaponParam");
static_assert(offsetof(FGamePadTriggerEffectWeaponParam, StartPosition) == 0x000000, "Member 'FGamePadTriggerEffectWeaponParam::StartPosition' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectWeaponParam, EndPosition) == 0x000001, "Member 'FGamePadTriggerEffectWeaponParam::EndPosition' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectWeaponParam, Strength) == 0x000002, "Member 'FGamePadTriggerEffectWeaponParam::Strength' has a wrong offset!");

// ScriptStruct GamePadTrigger.GamePadTriggerEffectVibrationParam
// 0x0003 (0x0003 - 0x0000)
struct FGamePadTriggerEffectVibrationParam final
{
public:
	uint8                                         Position;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Amplitude;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Frequency;                                         // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGamePadTriggerEffectVibrationParam) == 0x000001, "Wrong alignment on FGamePadTriggerEffectVibrationParam");
static_assert(sizeof(FGamePadTriggerEffectVibrationParam) == 0x000003, "Wrong size on FGamePadTriggerEffectVibrationParam");
static_assert(offsetof(FGamePadTriggerEffectVibrationParam, Position) == 0x000000, "Member 'FGamePadTriggerEffectVibrationParam::Position' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectVibrationParam, Amplitude) == 0x000001, "Member 'FGamePadTriggerEffectVibrationParam::Amplitude' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectVibrationParam, Frequency) == 0x000002, "Member 'FGamePadTriggerEffectVibrationParam::Frequency' has a wrong offset!");

// ScriptStruct GamePadTrigger.GamePadTriggerEffectMultiPositionFeedbackParam
// 0x0010 (0x0010 - 0x0000)
struct FGamePadTriggerEffectMultiPositionFeedbackParam final
{
public:
	TArray<uint8>                                 Strength;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGamePadTriggerEffectMultiPositionFeedbackParam) == 0x000008, "Wrong alignment on FGamePadTriggerEffectMultiPositionFeedbackParam");
static_assert(sizeof(FGamePadTriggerEffectMultiPositionFeedbackParam) == 0x000010, "Wrong size on FGamePadTriggerEffectMultiPositionFeedbackParam");
static_assert(offsetof(FGamePadTriggerEffectMultiPositionFeedbackParam, Strength) == 0x000000, "Member 'FGamePadTriggerEffectMultiPositionFeedbackParam::Strength' has a wrong offset!");

// ScriptStruct GamePadTrigger.GamePadTriggerEffectSlopeFeedbackParam
// 0x0004 (0x0004 - 0x0000)
struct FGamePadTriggerEffectSlopeFeedbackParam final
{
public:
	uint8                                         StartPosition;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndPosition;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartStrength;                                     // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndStrength;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGamePadTriggerEffectSlopeFeedbackParam) == 0x000001, "Wrong alignment on FGamePadTriggerEffectSlopeFeedbackParam");
static_assert(sizeof(FGamePadTriggerEffectSlopeFeedbackParam) == 0x000004, "Wrong size on FGamePadTriggerEffectSlopeFeedbackParam");
static_assert(offsetof(FGamePadTriggerEffectSlopeFeedbackParam, StartPosition) == 0x000000, "Member 'FGamePadTriggerEffectSlopeFeedbackParam::StartPosition' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectSlopeFeedbackParam, EndPosition) == 0x000001, "Member 'FGamePadTriggerEffectSlopeFeedbackParam::EndPosition' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectSlopeFeedbackParam, StartStrength) == 0x000002, "Member 'FGamePadTriggerEffectSlopeFeedbackParam::StartStrength' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectSlopeFeedbackParam, EndStrength) == 0x000003, "Member 'FGamePadTriggerEffectSlopeFeedbackParam::EndStrength' has a wrong offset!");

// ScriptStruct GamePadTrigger.GamePadTriggerEffectMultiPositionVibrationParam
// 0x0018 (0x0018 - 0x0000)
struct FGamePadTriggerEffectMultiPositionVibrationParam final
{
public:
	uint8                                         Frequency;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Amplitude;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGamePadTriggerEffectMultiPositionVibrationParam) == 0x000008, "Wrong alignment on FGamePadTriggerEffectMultiPositionVibrationParam");
static_assert(sizeof(FGamePadTriggerEffectMultiPositionVibrationParam) == 0x000018, "Wrong size on FGamePadTriggerEffectMultiPositionVibrationParam");
static_assert(offsetof(FGamePadTriggerEffectMultiPositionVibrationParam, Frequency) == 0x000000, "Member 'FGamePadTriggerEffectMultiPositionVibrationParam::Frequency' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectMultiPositionVibrationParam, Amplitude) == 0x000008, "Member 'FGamePadTriggerEffectMultiPositionVibrationParam::Amplitude' has a wrong offset!");

// ScriptStruct GamePadTrigger.GamePadTriggerEffectParams
// 0x0040 (0x0040 - 0x0000)
struct FGamePadTriggerEffectParams final
{
public:
	struct FGamePadTriggerEffectOffParam          OffParam;                                          // 0x0000(0x0001)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGamePadTriggerEffectFeedbackParam     FeedbackParam;                                     // 0x0001(0x0002)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGamePadTriggerEffectWeaponParam       WeaponParam;                                       // 0x0003(0x0003)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGamePadTriggerEffectVibrationParam    VibrationParam;                                    // 0x0006(0x0003)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGamePadTriggerEffectMultiPositionFeedbackParam MultiPositionFeedbackParam;               // 0x0010(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGamePadTriggerEffectSlopeFeedbackParam SlopeFeedbackParam;                               // 0x0020(0x0004)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGamePadTriggerEffectMultiPositionVibrationParam MultiPositionVibrationParam;             // 0x0028(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGamePadTriggerEffectParams) == 0x000008, "Wrong alignment on FGamePadTriggerEffectParams");
static_assert(sizeof(FGamePadTriggerEffectParams) == 0x000040, "Wrong size on FGamePadTriggerEffectParams");
static_assert(offsetof(FGamePadTriggerEffectParams, OffParam) == 0x000000, "Member 'FGamePadTriggerEffectParams::OffParam' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectParams, FeedbackParam) == 0x000001, "Member 'FGamePadTriggerEffectParams::FeedbackParam' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectParams, WeaponParam) == 0x000003, "Member 'FGamePadTriggerEffectParams::WeaponParam' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectParams, VibrationParam) == 0x000006, "Member 'FGamePadTriggerEffectParams::VibrationParam' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectParams, MultiPositionFeedbackParam) == 0x000010, "Member 'FGamePadTriggerEffectParams::MultiPositionFeedbackParam' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectParams, SlopeFeedbackParam) == 0x000020, "Member 'FGamePadTriggerEffectParams::SlopeFeedbackParam' has a wrong offset!");
static_assert(offsetof(FGamePadTriggerEffectParams, MultiPositionVibrationParam) == 0x000028, "Member 'FGamePadTriggerEffectParams::MultiPositionVibrationParam' has a wrong offset!");

}

