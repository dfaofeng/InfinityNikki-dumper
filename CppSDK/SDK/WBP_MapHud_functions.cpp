#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MapHud

#include "Basic.hpp"

#include "WBP_MapHud_classes.hpp"
#include "WBP_MapHud_parameters.hpp"


namespace SDK
{

// Function WBP_MapHud.WBP_MapHud_C.AddFollowMapHud
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBP_MapFollower_C>HUD                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::AddFollowMapHud(TScriptInterface<class IBP_MapFollower_C> HUD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "AddFollowMapHud");

	Params::WBP_MapHud_C_AddFollowMapHud Parms{};

	Parms.HUD = HUD;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.BeginInertiaMove
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 inertiaForce_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::BeginInertiaMove(const struct FVector2D& inertiaForce_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "BeginInertiaMove");

	Params::WBP_MapHud_C_BeginInertiaMove Parms{};

	Parms.inertiaForce_0 = std::move(inertiaForce_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.CalculateTime
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_MapHud_C::CalculateTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "CalculateTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.CheckIfClick
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             Event                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void UWBP_MapHud_C::CheckIfClick(const struct FPointerEvent& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "CheckIfClick");

	Params::WBP_MapHud_C_CheckIfClick Parms{};

	Parms.Event = std::move(Event);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.ClearMouseEvent
// (BlueprintCallable, BlueprintEvent)

void UWBP_MapHud_C::ClearMouseEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "ClearMouseEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.ConstraintMoveRootPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 originPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Pos                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::ConstraintMoveRootPos(const struct FVector2D& originPos, struct FVector2D* Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "ConstraintMoveRootPos");

	Params::WBP_MapHud_C_ConstraintMoveRootPos Parms{};

	Parms.originPos = std::move(originPos);

	UObject::ProcessEvent(Func, &Parms);

	if (Pos != nullptr)
		*Pos = std::move(Parms.Pos);
}


// Function WBP_MapHud.WBP_MapHud_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_MapHud_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.ConvertMapPosToWindowPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 mapPos                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       windowPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::ConvertMapPosToWindowPos(const struct FVector2D& mapPos, struct FVector2D* windowPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "ConvertMapPosToWindowPos");

	Params::WBP_MapHud_C_ConvertMapPosToWindowPos Parms{};

	Parms.mapPos = std::move(mapPos);

	UObject::ProcessEvent(Func, &Parms);

	if (windowPos != nullptr)
		*windowPos = std::move(Parms.windowPos);
}


// Function WBP_MapHud.WBP_MapHud_C.ConvertScreenPosToWidgetPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 screenPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGeometry&                 widgetGeometry                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FVector2D*                       widgetPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::ConvertScreenPosToWidgetPos(const struct FVector2D& screenPos, const struct FGeometry& widgetGeometry, struct FVector2D* widgetPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "ConvertScreenPosToWidgetPos");

	Params::WBP_MapHud_C_ConvertScreenPosToWidgetPos Parms{};

	Parms.screenPos = std::move(screenPos);
	Parms.widgetGeometry = std::move(widgetGeometry);

	UObject::ProcessEvent(Func, &Parms);

	if (widgetPos != nullptr)
		*widgetPos = std::move(Parms.widgetPos);
}


// Function WBP_MapHud.WBP_MapHud_C.ConvertWidgetPosToScreenPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGeometry&                 widgetGeometry                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FVector2D&                 widgetPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       screenPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::ConvertWidgetPosToScreenPos(const struct FGeometry& widgetGeometry, const struct FVector2D& widgetPos, struct FVector2D* screenPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "ConvertWidgetPosToScreenPos");

	Params::WBP_MapHud_C_ConvertWidgetPosToScreenPos Parms{};

	Parms.widgetGeometry = std::move(widgetGeometry);
	Parms.widgetPos = std::move(widgetPos);

	UObject::ProcessEvent(Func, &Parms);

	if (screenPos != nullptr)
		*screenPos = std::move(Parms.screenPos);
}


// Function WBP_MapHud.WBP_MapHud_C.ConvertWindowPosToMapPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 windowPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       mapPos                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::ConvertWindowPosToMapPos(const struct FVector2D& windowPos, struct FVector2D* mapPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "ConvertWindowPosToMapPos");

	Params::WBP_MapHud_C_ConvertWindowPosToMapPos Parms{};

	Parms.windowPos = std::move(windowPos);

	UObject::ProcessEvent(Func, &Parms);

	if (mapPos != nullptr)
		*mapPos = std::move(Parms.mapPos);
}


// Function WBP_MapHud.WBP_MapHud_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_MapHud_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.EndDrag
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_MapHud_C::EndDrag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "EndDrag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.ExecuteUbergraph_WBP_MapHud
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::ExecuteUbergraph_WBP_MapHud(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "ExecuteUbergraph_WBP_MapHud");

	Params::WBP_MapHud_C_ExecuteUbergraph_WBP_MapHud Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.GetIsDragging
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   isDragging_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::GetIsDragging(bool* isDragging_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "GetIsDragging");

	Params::WBP_MapHud_C_GetIsDragging Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (isDragging_0 != nullptr)
		*isDragging_0 = Parms.isDragging_0;
}


// Function WBP_MapHud.WBP_MapHud_C.GetMapPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D*                       Pos                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::GetMapPos(struct FVector2D* Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "GetMapPos");

	Params::WBP_MapHud_C_GetMapPos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pos != nullptr)
		*Pos = std::move(Parms.Pos);
}


// Function WBP_MapHud.WBP_MapHud_C.GetMapScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::GetMapScale(double* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "GetMapScale");

	Params::WBP_MapHud_C_GetMapScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function WBP_MapHud.WBP_MapHud_C.GetMovePos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D*                       Pos                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::GetMovePos(struct FVector2D* Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "GetMovePos");

	Params::WBP_MapHud_C_GetMovePos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pos != nullptr)
		*Pos = std::move(Parms.Pos);
}


// Function WBP_MapHud.WBP_MapHud_C.GetWindowSize
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D*                       Size                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::GetWindowSize(struct FVector2D* Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "GetWindowSize");

	Params::WBP_MapHud_C_GetWindowSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Size != nullptr)
		*Size = std::move(Parms.Size);
}


// Function WBP_MapHud.WBP_MapHud_C.HandleMouseButtonUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UWBP_MapHud_C::HandleMouseButtonUp(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "HandleMouseButtonUp");

	Params::WBP_MapHud_C_HandleMouseButtonUp Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_MapHud.WBP_MapHud_C.HandleMouseMove
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UWBP_MapHud_C::HandleMouseMove(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "HandleMouseMove");

	Params::WBP_MapHud_C_HandleMouseMove Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_MapHud.WBP_MapHud_C.HandlePinchRelease
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UWBP_MapHud_C::HandlePinchRelease(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "HandlePinchRelease");

	Params::WBP_MapHud_C_HandlePinchRelease Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_MapHud.WBP_MapHud_C.InitMouseEvent
// (BlueprintCallable, BlueprintEvent)

void UWBP_MapHud_C::InitMouseEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "InitMouseEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.InitPinch
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_MapHud_C::InitPinch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "InitPinch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.InvalidMapWindow
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_MapHud_C::InvalidMapWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "InvalidMapWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.IsMousePointer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// bool*                                   IsMouse                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::IsMousePointer(const struct FPointerEvent& MouseEvent, bool* IsMouse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "IsMousePointer");

	Params::WBP_MapHud_C_IsMousePointer Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	if (IsMouse != nullptr)
		*IsMouse = Parms.IsMouse;
}


// Function WBP_MapHud.WBP_MapHud_C.IsMoveRootPosOutOfRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   isOut                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   isOutMinX                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   isOutMaxX                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   isOutMinY                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   isOutMaxY                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::IsMoveRootPosOutOfRange(const struct FVector2D& Pos, bool* isOut, bool* isOutMinX, bool* isOutMaxX, bool* isOutMinY, bool* isOutMaxY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "IsMoveRootPosOutOfRange");

	Params::WBP_MapHud_C_IsMoveRootPosOutOfRange Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);

	if (isOut != nullptr)
		*isOut = Parms.isOut;

	if (isOutMinX != nullptr)
		*isOutMinX = Parms.isOutMinX;

	if (isOutMaxX != nullptr)
		*isOutMaxX = Parms.isOutMaxX;

	if (isOutMinY != nullptr)
		*isOutMinY = Parms.isOutMinY;

	if (isOutMaxY != nullptr)
		*isOutMaxY = Parms.isOutMaxY;
}


// Function WBP_MapHud.WBP_MapHud_C.NT_OnPostMoveContentPosition
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Pos                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::NT_OnPostMoveContentPosition(const struct FVector2D& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "NT_OnPostMoveContentPosition");

	Params::WBP_MapHud_C_NT_OnPostMoveContentPosition Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.OnDragDetected
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             PointerEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UDragDropOperation**              Operation                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnDragDetected");

	Params::WBP_MapHud_C_OnDragDetected Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);

	UObject::ProcessEvent(Func, &Parms);

	if (Operation != nullptr)
		*Operation = Parms.Operation;
}


// Function WBP_MapHud.WBP_MapHud_C.OnKeyUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FKeyEvent&                 InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_MapHud_C::OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnKeyUp");

	Params::WBP_MapHud_C_OnKeyUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_MapHud.WBP_MapHud_C.OnMapClick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 mapPos                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UWBP_MapHud_C::OnMapClick(const struct FVector2D& mapPos, const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnMapClick");

	Params::WBP_MapHud_C_OnMapClick Parms{};

	Parms.mapPos = std::move(mapPos);
	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.OnMapHudInitFinish
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_MapHud_C::OnMapHudInitFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnMapHudInitFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.OnMapPinchZoom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  scaleDelta                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::OnMapPinchZoom(double scaleDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnMapPinchZoom");

	Params::WBP_MapHud_C_OnMapPinchZoom Parms{};

	Parms.scaleDelta = scaleDelta;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.OnMapWheel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Step                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 screenPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::OnMapWheel(double Step, const struct FVector2D& screenPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnMapWheel");

	Params::WBP_MapHud_C_OnMapWheel Parms{};

	Parms.Step = Step;
	Parms.screenPos = std::move(screenPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.OnMapWindowChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  mapMinX                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  mapMaxX                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  mapMnY                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  mapMaxY                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 MoveDiff                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::OnMapWindowChanged(double mapMinX, double mapMaxX, double mapMnY, double mapMaxY, const struct FVector2D& MoveDiff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnMapWindowChanged");

	Params::WBP_MapHud_C_OnMapWindowChanged Parms{};

	Parms.mapMinX = mapMinX;
	Parms.mapMaxX = mapMaxX;
	Parms.mapMnY = mapMnY;
	Parms.mapMaxY = mapMaxY;
	Parms.MoveDiff = std::move(MoveDiff);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_MapHud_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnMouseButtonDown");

	Params::WBP_MapHud_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_MapHud.WBP_MapHud_C.OnMouseButtonUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_MapHud_C::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnMouseButtonUp");

	Params::WBP_MapHud_C_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_MapHud.WBP_MapHud_C.OnMouseButtonUpCustom
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_MapHud_C::OnMouseButtonUpCustom(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnMouseButtonUpCustom");

	Params::WBP_MapHud_C_OnMouseButtonUpCustom Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_MapHud.WBP_MapHud_C.OnMouseMove
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_MapHud_C::OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnMouseMove");

	Params::WBP_MapHud_C_OnMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_MapHud.WBP_MapHud_C.OnMouseMoveCustom
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_MapHud_C::OnMouseMoveCustom(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnMouseMoveCustom");

	Params::WBP_MapHud_C_OnMouseMoveCustom Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_MapHud.WBP_MapHud_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_MapHud_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "OnMouseWheel");

	Params::WBP_MapHud_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_MapHud.WBP_MapHud_C.PostProcessMapMove
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_MapHud_C::PostProcessMapMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "PostProcessMapMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.ResetInertia
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_MapHud_C::ResetInertia()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "ResetInertia");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.ScrollToMapPos
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 mapPos                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::ScrollToMapPos(const struct FVector2D& mapPos, double Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "ScrollToMapPos");

	Params::WBP_MapHud_C_ScrollToMapPos Parms{};

	Parms.mapPos = std::move(mapPos);
	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.SetClipRange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::SetClipRange(const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "SetClipRange");

	Params::WBP_MapHud_C_SetClipRange Parms{};

	Parms.Size = std::move(Size);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.SetContentSize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 NewSize                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::SetContentSize(const struct FVector2D& NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "SetContentSize");

	Params::WBP_MapHud_C_SetContentSize Parms{};

	Parms.NewSize = std::move(NewSize);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.SetCustomConstrain
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Left                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Top                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Right                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Bottom                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::SetCustomConstrain(double Left, double Top, double Right, double Bottom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "SetCustomConstrain");

	Params::WBP_MapHud_C_SetCustomConstrain Parms{};

	Parms.Left = Left;
	Parms.Top = Top;
	Parms.Right = Right;
	Parms.Bottom = Bottom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.SetFollowMapClipRange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::SetFollowMapClipRange(const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "SetFollowMapClipRange");

	Params::WBP_MapHud_C_SetFollowMapClipRange Parms{};

	Parms.Size = std::move(Size);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.SetFollowMapContentPosition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::SetFollowMapContentPosition(const struct FVector2D& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "SetFollowMapContentPosition");

	Params::WBP_MapHud_C_SetFollowMapContentPosition Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.SetFollowMapContentScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::SetFollowMapContentScale(const struct FVector2D& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "SetFollowMapContentScale");

	Params::WBP_MapHud_C_SetFollowMapContentScale Parms{};

	Parms.Scale = std::move(Scale);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.SetFollowMapContentSize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::SetFollowMapContentSize(const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "SetFollowMapContentSize");

	Params::WBP_MapHud_C_SetFollowMapContentSize Parms{};

	Parms.Size = std::move(Size);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.SetMoveContentPosition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::SetMoveContentPosition(const struct FVector2D& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "SetMoveContentPosition");

	Params::WBP_MapHud_C_SetMoveContentPosition Parms{};

	Parms.Pos = std::move(Pos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "Tick");

	Params::WBP_MapHud_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.ToggleTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::ToggleTick(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "ToggleTick");

	Params::WBP_MapHud_C_ToggleTick Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.UpdateContentSize
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_MapHud_C::UpdateContentSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "UpdateContentSize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_MapHud.WBP_MapHud_C.UpdateInertiaMoving
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::UpdateInertiaMoving(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "UpdateInertiaMoving");

	Params::WBP_MapHud_C_UpdateInertiaMoving Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.UpdateMapRootConstraintInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 Geometry                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UWBP_MapHud_C::UpdateMapRootConstraintInfo(const struct FGeometry& Geometry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "UpdateMapRootConstraintInfo");

	Params::WBP_MapHud_C_UpdateMapRootConstraintInfo Parms{};

	Parms.Geometry = std::move(Geometry);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.UpdateMapWindowRange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FVector2D&                 MoveDiff                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::UpdateMapWindowRange(const struct FGeometry& MyGeometry, const struct FVector2D& MoveDiff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "UpdateMapWindowRange");

	Params::WBP_MapHud_C_UpdateMapWindowRange Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MoveDiff = std::move(MoveDiff);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.UpdateScrollToTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::UpdateScrollToTarget(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "UpdateScrollToTarget");

	Params::WBP_MapHud_C_UpdateScrollToTarget Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.ZoomMap
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 windowPos                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_MapHud_C::ZoomMap(double Scale, const struct FVector2D& windowPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "ZoomMap");

	Params::WBP_MapHud_C_ZoomMap Parms{};

	Parms.Scale = Scale;
	Parms.windowPos = std::move(windowPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_MapHud.WBP_MapHud_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UWBP_MapHud_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_MapHud_C", "GetModuleName");

	Params::WBP_MapHud_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

