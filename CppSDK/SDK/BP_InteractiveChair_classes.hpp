#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractiveChair

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "X6Game_classes.hpp"
#include "Enum_WeatherType_structs.hpp"
#include "E_EInteractSuccRet_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InteractiveChair.BP_InteractiveChair_C
// 0x0170 (0x05A8 - 0x0438)
#pragma pack(push, 0x1)
class alignas(0x08) ABP_InteractiveChair_C : public AX6Actor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0438(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_BikeCantGetOffVolume_C*             BP_BikeCantGetOffVolume;                           // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_WeatherSensitiveActorListenerComponent_C* BP_WeatherSensitiveActorListenerComponent;   // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_HandleInteractionLogic_C*           BP_HandleInteractionLogic;                         // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractiveActorComponent_C*        BP_InteractiveActorComponent;                      // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class AActor>                  MeshActor;                                         // 0x0480(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TMap<class FString, struct FTransform>        IkSlots;                                           // 0x04A8(0x0050)(Edit, BlueprintVisible)
	struct FGameplayTag                           DamiaoStimulateTag;                                // 0x04F8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	int32                                         CachedInteractDetectionDistance;                   // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bBlendIn;                                       // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            BP_CameraBlendInParam;                             // 0x0508(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          BP_bBlendOut;                                      // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            BP_CameraBlendOutParam;                            // 0x0530(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TSoftObjectPtr<class UStaticMeshComponent>    MeshComponent;                                     // 0x0550(0x0028)(Edit, BlueprintVisible, InstancedReference, HasGetValueTypeHash)
	struct FRotator                               BP_OriginRotation;                                 // 0x0578(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCameraBaseParamsData*                  BP_CameraConfig;                                   // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   BP_ConfigKeyName;                                  // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_NeedAttachActorToChair;                         // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInPublicChatRoomVolume;                           // 0x05A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_InteractiveChair(int32 EntryPoint);
	void On_Multi_ActiveSuccess(class AActor* Other_player_actor, E_EInteractSuccRet Result);
	void On_Multi_InteractiveObjActive(const class FString& Data, class AActor* Player);
	void OnWeatherSensitiveActorChange(class ABP_WeatherSensitiveActorManager_C* manager, Enum_WeatherType WeatherType);
	void ServerInit(bool bServer);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InteractiveChair_C">();
	}
	static class ABP_InteractiveChair_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_InteractiveChair_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_InteractiveChair_C) == 0x000008, "Wrong alignment on ABP_InteractiveChair_C");
static_assert(sizeof(ABP_InteractiveChair_C) == 0x0005A8, "Wrong size on ABP_InteractiveChair_C");
static_assert(offsetof(ABP_InteractiveChair_C, UberGraphFrame) == 0x000438, "Member 'ABP_InteractiveChair_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_BikeCantGetOffVolume) == 0x000440, "Member 'ABP_InteractiveChair_C::BP_BikeCantGetOffVolume' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_WeatherSensitiveActorListenerComponent) == 0x000448, "Member 'ABP_InteractiveChair_C::BP_WeatherSensitiveActorListenerComponent' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, Arrow1) == 0x000450, "Member 'ABP_InteractiveChair_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, Box) == 0x000458, "Member 'ABP_InteractiveChair_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_HandleInteractionLogic) == 0x000460, "Member 'ABP_InteractiveChair_C::BP_HandleInteractionLogic' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_InteractiveActorComponent) == 0x000468, "Member 'ABP_InteractiveChair_C::BP_InteractiveActorComponent' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, Arrow) == 0x000470, "Member 'ABP_InteractiveChair_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, DefaultSceneRoot) == 0x000478, "Member 'ABP_InteractiveChair_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, MeshActor) == 0x000480, "Member 'ABP_InteractiveChair_C::MeshActor' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, IkSlots) == 0x0004A8, "Member 'ABP_InteractiveChair_C::IkSlots' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, DamiaoStimulateTag) == 0x0004F8, "Member 'ABP_InteractiveChair_C::DamiaoStimulateTag' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, CachedInteractDetectionDistance) == 0x000500, "Member 'ABP_InteractiveChair_C::CachedInteractDetectionDistance' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_bBlendIn) == 0x000504, "Member 'ABP_InteractiveChair_C::BP_bBlendIn' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_CameraBlendInParam) == 0x000508, "Member 'ABP_InteractiveChair_C::BP_CameraBlendInParam' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_bBlendOut) == 0x000528, "Member 'ABP_InteractiveChair_C::BP_bBlendOut' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_CameraBlendOutParam) == 0x000530, "Member 'ABP_InteractiveChair_C::BP_CameraBlendOutParam' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, MeshComponent) == 0x000550, "Member 'ABP_InteractiveChair_C::MeshComponent' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_OriginRotation) == 0x000578, "Member 'ABP_InteractiveChair_C::BP_OriginRotation' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_CameraConfig) == 0x000590, "Member 'ABP_InteractiveChair_C::BP_CameraConfig' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_ConfigKeyName) == 0x000598, "Member 'ABP_InteractiveChair_C::BP_ConfigKeyName' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, BP_NeedAttachActorToChair) == 0x0005A0, "Member 'ABP_InteractiveChair_C::BP_NeedAttachActorToChair' has a wrong offset!");
static_assert(offsetof(ABP_InteractiveChair_C, bInPublicChatRoomVolume) == 0x0005A1, "Member 'ABP_InteractiveChair_C::bInPublicChatRoomVolume' has a wrong offset!");

}

