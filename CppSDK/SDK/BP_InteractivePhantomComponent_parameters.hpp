#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractivePhantomComponent

#include "Basic.hpp"

#include "E_InteractiveObjPhantomState_structs.hpp"


namespace SDK::Params
{

// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_CanOtherPlayerShareRewardWithMe
// 0x0010 (0x0010 - 0x0000)
struct BP_InteractivePhantomComponent_C_BP_CanOtherPlayerShareRewardWithMe final
{
public:
	class AActor*                                 OtherPlayer;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanShare;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractivePhantomComponent_C_BP_CanOtherPlayerShareRewardWithMe) == 0x000008, "Wrong alignment on BP_InteractivePhantomComponent_C_BP_CanOtherPlayerShareRewardWithMe");
static_assert(sizeof(BP_InteractivePhantomComponent_C_BP_CanOtherPlayerShareRewardWithMe) == 0x000010, "Wrong size on BP_InteractivePhantomComponent_C_BP_CanOtherPlayerShareRewardWithMe");
static_assert(offsetof(BP_InteractivePhantomComponent_C_BP_CanOtherPlayerShareRewardWithMe, OtherPlayer) == 0x000000, "Member 'BP_InteractivePhantomComponent_C_BP_CanOtherPlayerShareRewardWithMe::OtherPlayer' has a wrong offset!");
static_assert(offsetof(BP_InteractivePhantomComponent_C_BP_CanOtherPlayerShareRewardWithMe, bCanShare) == 0x000008, "Member 'BP_InteractivePhantomComponent_C_BP_CanOtherPlayerShareRewardWithMe::bCanShare' has a wrong offset!");

// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_CanShareRewardWithOtherPlayer
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractivePhantomComponent_C_BP_CanShareRewardWithOtherPlayer final
{
public:
	bool                                          bCanShare;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractivePhantomComponent_C_BP_CanShareRewardWithOtherPlayer) == 0x000001, "Wrong alignment on BP_InteractivePhantomComponent_C_BP_CanShareRewardWithOtherPlayer");
static_assert(sizeof(BP_InteractivePhantomComponent_C_BP_CanShareRewardWithOtherPlayer) == 0x000001, "Wrong size on BP_InteractivePhantomComponent_C_BP_CanShareRewardWithOtherPlayer");
static_assert(offsetof(BP_InteractivePhantomComponent_C_BP_CanShareRewardWithOtherPlayer, bCanShare) == 0x000000, "Member 'BP_InteractivePhantomComponent_C_BP_CanShareRewardWithOtherPlayer::bCanShare' has a wrong offset!");

// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_ForceSetPhantomState
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractivePhantomComponent_C_BP_ForceSetPhantomState final
{
public:
	E_InteractiveObjPhantomState                  NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractivePhantomComponent_C_BP_ForceSetPhantomState) == 0x000001, "Wrong alignment on BP_InteractivePhantomComponent_C_BP_ForceSetPhantomState");
static_assert(sizeof(BP_InteractivePhantomComponent_C_BP_ForceSetPhantomState) == 0x000001, "Wrong size on BP_InteractivePhantomComponent_C_BP_ForceSetPhantomState");
static_assert(offsetof(BP_InteractivePhantomComponent_C_BP_ForceSetPhantomState, NewState) == 0x000000, "Member 'BP_InteractivePhantomComponent_C_BP_ForceSetPhantomState::NewState' has a wrong offset!");

// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_GetHoldingHandsPlayer
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractivePhantomComponent_C_BP_GetHoldingHandsPlayer final
{
public:
	class ACharacter*                             HoldingHandsPlayer;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractivePhantomComponent_C_BP_GetHoldingHandsPlayer) == 0x000008, "Wrong alignment on BP_InteractivePhantomComponent_C_BP_GetHoldingHandsPlayer");
static_assert(sizeof(BP_InteractivePhantomComponent_C_BP_GetHoldingHandsPlayer) == 0x000008, "Wrong size on BP_InteractivePhantomComponent_C_BP_GetHoldingHandsPlayer");
static_assert(offsetof(BP_InteractivePhantomComponent_C_BP_GetHoldingHandsPlayer, HoldingHandsPlayer) == 0x000000, "Member 'BP_InteractivePhantomComponent_C_BP_GetHoldingHandsPlayer::HoldingHandsPlayer' has a wrong offset!");

// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_GetOtherPlayerToShareReward
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractivePhantomComponent_C_BP_GetOtherPlayerToShareReward final
{
public:
	class ACharacter*                             OtherPlayer;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractivePhantomComponent_C_BP_GetOtherPlayerToShareReward) == 0x000008, "Wrong alignment on BP_InteractivePhantomComponent_C_BP_GetOtherPlayerToShareReward");
static_assert(sizeof(BP_InteractivePhantomComponent_C_BP_GetOtherPlayerToShareReward) == 0x000008, "Wrong size on BP_InteractivePhantomComponent_C_BP_GetOtherPlayerToShareReward");
static_assert(offsetof(BP_InteractivePhantomComponent_C_BP_GetOtherPlayerToShareReward, OtherPlayer) == 0x000000, "Member 'BP_InteractivePhantomComponent_C_BP_GetOtherPlayerToShareReward::OtherPlayer' has a wrong offset!");

// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_GetPhantomState
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractivePhantomComponent_C_BP_GetPhantomState final
{
public:
	E_InteractiveObjPhantomState                  PhantomState;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractivePhantomComponent_C_BP_GetPhantomState) == 0x000001, "Wrong alignment on BP_InteractivePhantomComponent_C_BP_GetPhantomState");
static_assert(sizeof(BP_InteractivePhantomComponent_C_BP_GetPhantomState) == 0x000001, "Wrong size on BP_InteractivePhantomComponent_C_BP_GetPhantomState");
static_assert(offsetof(BP_InteractivePhantomComponent_C_BP_GetPhantomState, PhantomState) == 0x000000, "Member 'BP_InteractivePhantomComponent_C_BP_GetPhantomState::PhantomState' has a wrong offset!");

// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.BP_IsHoldingHands
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractivePhantomComponent_C_BP_IsHoldingHands final
{
public:
	bool                                          bHoldingHands;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractivePhantomComponent_C_BP_IsHoldingHands) == 0x000001, "Wrong alignment on BP_InteractivePhantomComponent_C_BP_IsHoldingHands");
static_assert(sizeof(BP_InteractivePhantomComponent_C_BP_IsHoldingHands) == 0x000001, "Wrong size on BP_InteractivePhantomComponent_C_BP_IsHoldingHands");
static_assert(offsetof(BP_InteractivePhantomComponent_C_BP_IsHoldingHands, bHoldingHands) == 0x000000, "Member 'BP_InteractivePhantomComponent_C_BP_IsHoldingHands::bHoldingHands' has a wrong offset!");

// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.ExecuteUbergraph_BP_InteractivePhantomComponent
// 0x0004 (0x0004 - 0x0000)
struct BP_InteractivePhantomComponent_C_ExecuteUbergraph_BP_InteractivePhantomComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractivePhantomComponent_C_ExecuteUbergraph_BP_InteractivePhantomComponent) == 0x000004, "Wrong alignment on BP_InteractivePhantomComponent_C_ExecuteUbergraph_BP_InteractivePhantomComponent");
static_assert(sizeof(BP_InteractivePhantomComponent_C_ExecuteUbergraph_BP_InteractivePhantomComponent) == 0x000004, "Wrong size on BP_InteractivePhantomComponent_C_ExecuteUbergraph_BP_InteractivePhantomComponent");
static_assert(offsetof(BP_InteractivePhantomComponent_C_ExecuteUbergraph_BP_InteractivePhantomComponent, EntryPoint) == 0x000000, "Member 'BP_InteractivePhantomComponent_C_ExecuteUbergraph_BP_InteractivePhantomComponent::EntryPoint' has a wrong offset!");

// Function BP_InteractivePhantomComponent.BP_InteractivePhantomComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_InteractivePhantomComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractivePhantomComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_InteractivePhantomComponent_C_GetModuleName");
static_assert(sizeof(BP_InteractivePhantomComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_InteractivePhantomComponent_C_GetModuleName");
static_assert(offsetof(BP_InteractivePhantomComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_InteractivePhantomComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

