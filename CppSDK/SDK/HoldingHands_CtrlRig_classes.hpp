#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HoldingHands_CtrlRig

#include "Basic.hpp"

#include "ControlRig_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass HoldingHands_CtrlRig.HoldingHands_CtrlRig_C
// 0x00A0 (0x0B48 - 0x0AA8)
class UHoldingHands_CtrlRig_C final : public UControlRig
{
public:
	struct FVector                                HoldingHand_Left_Current_TargetTranslation;        // 0x0AA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HoldingHand_Right_Current_TargetTranslation;       // 0x0AC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HoldingHand_Left_Actual_TargetTranslation;         // 0x0AD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HoldingHand_Right_Actual_TargetTranslation;        // 0x0AF0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0B08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HoldingRightHandOrLeftHand;                        // 0x0B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B21[0x7];                                      // 0x0B21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HoldingHand_Left_IK_Weight;                        // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HoldingHand_Right_IK_Weight;                       // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Const_MaxDistance_WristToTarget;                   // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableHoldingHandIK;                               // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HoldingHands_CtrlRig_C">();
	}
	static class UHoldingHands_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHoldingHands_CtrlRig_C>();
	}
};
static_assert(alignof(UHoldingHands_CtrlRig_C) == 0x000008, "Wrong alignment on UHoldingHands_CtrlRig_C");
static_assert(sizeof(UHoldingHands_CtrlRig_C) == 0x000B48, "Wrong size on UHoldingHands_CtrlRig_C");
static_assert(offsetof(UHoldingHands_CtrlRig_C, HoldingHand_Left_Current_TargetTranslation) == 0x000AA8, "Member 'UHoldingHands_CtrlRig_C::HoldingHand_Left_Current_TargetTranslation' has a wrong offset!");
static_assert(offsetof(UHoldingHands_CtrlRig_C, HoldingHand_Right_Current_TargetTranslation) == 0x000AC0, "Member 'UHoldingHands_CtrlRig_C::HoldingHand_Right_Current_TargetTranslation' has a wrong offset!");
static_assert(offsetof(UHoldingHands_CtrlRig_C, HoldingHand_Left_Actual_TargetTranslation) == 0x000AD8, "Member 'UHoldingHands_CtrlRig_C::HoldingHand_Left_Actual_TargetTranslation' has a wrong offset!");
static_assert(offsetof(UHoldingHands_CtrlRig_C, HoldingHand_Right_Actual_TargetTranslation) == 0x000AF0, "Member 'UHoldingHands_CtrlRig_C::HoldingHand_Right_Actual_TargetTranslation' has a wrong offset!");
static_assert(offsetof(UHoldingHands_CtrlRig_C, TargetLocation) == 0x000B08, "Member 'UHoldingHands_CtrlRig_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(UHoldingHands_CtrlRig_C, HoldingRightHandOrLeftHand) == 0x000B20, "Member 'UHoldingHands_CtrlRig_C::HoldingRightHandOrLeftHand' has a wrong offset!");
static_assert(offsetof(UHoldingHands_CtrlRig_C, HoldingHand_Left_IK_Weight) == 0x000B28, "Member 'UHoldingHands_CtrlRig_C::HoldingHand_Left_IK_Weight' has a wrong offset!");
static_assert(offsetof(UHoldingHands_CtrlRig_C, HoldingHand_Right_IK_Weight) == 0x000B30, "Member 'UHoldingHands_CtrlRig_C::HoldingHand_Right_IK_Weight' has a wrong offset!");
static_assert(offsetof(UHoldingHands_CtrlRig_C, Const_MaxDistance_WristToTarget) == 0x000B38, "Member 'UHoldingHands_CtrlRig_C::Const_MaxDistance_WristToTarget' has a wrong offset!");
static_assert(offsetof(UHoldingHands_CtrlRig_C, EnableHoldingHandIK) == 0x000B40, "Member 'UHoldingHands_CtrlRig_C::EnableHoldingHandIK' has a wrong offset!");

}

