#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BulletTargetRangeLimitModifier

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "X6Game_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BulletTargetRangeLimitModifier.BP_BulletTargetRangeLimitModifier_C
// 0x0060 (0x00A0 - 0x0040)
class UBP_BulletTargetRangeLimitModifier_C final : public UX6BulletSimpleBasicModifier
{
public:
	bool                                          bPenetrate;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SlopeAngleLimit;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinSlopeAngle;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AngleOffsetTopLimit;                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AngleOffsetBottomLimit;                            // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZOffsetTopLimit;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZOffsetBottomLimit;                                // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ShapeTraceDataAsset_C*              HitTraceShape;                                     // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      SlopeObjectTypes;                                  // 0x0080(0x0010)(Edit, BlueprintVisible)
	TArray<EObjectTypeQuery>                      TargetObjectTypes;                                 // 0x0090(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	class FString GetModuleName() const;
	void K2_Destroy() const;
	void K2_OnAsyncLoadComplete() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BulletTargetRangeLimitModifier_C">();
	}
	static class UBP_BulletTargetRangeLimitModifier_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BulletTargetRangeLimitModifier_C>();
	}
};
static_assert(alignof(UBP_BulletTargetRangeLimitModifier_C) == 0x000008, "Wrong alignment on UBP_BulletTargetRangeLimitModifier_C");
static_assert(sizeof(UBP_BulletTargetRangeLimitModifier_C) == 0x0000A0, "Wrong size on UBP_BulletTargetRangeLimitModifier_C");
static_assert(offsetof(UBP_BulletTargetRangeLimitModifier_C, bPenetrate) == 0x000040, "Member 'UBP_BulletTargetRangeLimitModifier_C::bPenetrate' has a wrong offset!");
static_assert(offsetof(UBP_BulletTargetRangeLimitModifier_C, SlopeAngleLimit) == 0x000048, "Member 'UBP_BulletTargetRangeLimitModifier_C::SlopeAngleLimit' has a wrong offset!");
static_assert(offsetof(UBP_BulletTargetRangeLimitModifier_C, MinSlopeAngle) == 0x000050, "Member 'UBP_BulletTargetRangeLimitModifier_C::MinSlopeAngle' has a wrong offset!");
static_assert(offsetof(UBP_BulletTargetRangeLimitModifier_C, AngleOffsetTopLimit) == 0x000058, "Member 'UBP_BulletTargetRangeLimitModifier_C::AngleOffsetTopLimit' has a wrong offset!");
static_assert(offsetof(UBP_BulletTargetRangeLimitModifier_C, AngleOffsetBottomLimit) == 0x000060, "Member 'UBP_BulletTargetRangeLimitModifier_C::AngleOffsetBottomLimit' has a wrong offset!");
static_assert(offsetof(UBP_BulletTargetRangeLimitModifier_C, ZOffsetTopLimit) == 0x000068, "Member 'UBP_BulletTargetRangeLimitModifier_C::ZOffsetTopLimit' has a wrong offset!");
static_assert(offsetof(UBP_BulletTargetRangeLimitModifier_C, ZOffsetBottomLimit) == 0x000070, "Member 'UBP_BulletTargetRangeLimitModifier_C::ZOffsetBottomLimit' has a wrong offset!");
static_assert(offsetof(UBP_BulletTargetRangeLimitModifier_C, HitTraceShape) == 0x000078, "Member 'UBP_BulletTargetRangeLimitModifier_C::HitTraceShape' has a wrong offset!");
static_assert(offsetof(UBP_BulletTargetRangeLimitModifier_C, SlopeObjectTypes) == 0x000080, "Member 'UBP_BulletTargetRangeLimitModifier_C::SlopeObjectTypes' has a wrong offset!");
static_assert(offsetof(UBP_BulletTargetRangeLimitModifier_C, TargetObjectTypes) == 0x000090, "Member 'UBP_BulletTargetRangeLimitModifier_C::TargetObjectTypes' has a wrong offset!");

}

