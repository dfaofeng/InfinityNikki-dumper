#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerFeedBackPerformanceComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EGroundedLocomotionScenarioType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SMSystem_structs.hpp"
#include "X6Game_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C
// 0x0248 (0x02F8 - 0x00B0)
class UBP_PlayerFeedBackPerformanceComponent_C final : public UX6ModularFeaturesContainerComp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          EnableShadowDecal;                                 // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_RoleShadowCapture_C*                Ref_RoleShadowCapture;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RT_Role;                                           // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class ACharacter*                             As_Character;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        CapsuleDeviation;                                  // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         BP_IdleAnimType;                                   // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         BP_RegularMovementLayerType;                       // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        JumpHeightMax;                                     // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UBP_PositioningShadow_ConfigTemplate_C> BP_PlayerPositioningShadowConfig;   // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          ShadowDecal;                                       // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MapBounderFeedBack;                                // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SafeLocation;                                      // 0x011A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CharacterFocus;                                    // 0x011B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnDeadDispatcher;                                  // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftObjectPtr<class UBP_FocusConfig_Template_C> DA_FocusConfig;                                 // 0x0130(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                FocusLocation;                                     // 0x0158(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFocusValid;                                      // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaterInteraction;                                  // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableInteractionPerformance;                     // 0x0172(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_173[0x5];                                      // 0x0173(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AnimationSet_Nikki_InteractTemplate_C* DA_Performance_AnimationSet;                    // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DT_TransitionConfig;                               // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BigWorldStanceTag;                                 // 0x0188(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BigWorldTransitionGroupTag;                        // 0x0190(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ActionPoint;                                       // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMBlendSetting                        DefaultBlendConfig;                                // 0x01A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          bEnableSituationCheck;                             // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_LeisureWaitingTime;                             // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_WaterInteractionConfig_Template_C*  BP_PlayerWaterInteractionConfig;                   // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableDlgPerformance;                             // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnablePushAbility;                                // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DA[0x6];                                      // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DT_StanceAnimSet;                                  // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DT_GestureAnimSet;                                 // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DT_TransitionAnimSet;                              // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DT_TransitionRule;                                 // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseNewAnimationSetCfg;                            // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableDetectWind;                               // 0x0201(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableEdgeProtecction;                          // 0x0202(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableStylizedCloth;                              // 0x0203(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableEnvironmentResponse;                        // 0x0204(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterWetnessConfig_Template_C*  BP_PlayerWetnessConfig;                            // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             RainCoatList;                                      // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterCollection*           WetnessMPC;                                        // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableIdleBreak;                                  // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableDodge;                                      // 0x0221(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_222[0x6];                                      // 0x0222(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UBP_CharacterDodge_Template_C> BP_PlayerDodgeConfig;                        // 0x0228(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          BP_EnableSitPorformance;                           // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableInteractiveIdleBreak;                       // 0x0251(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableNPCWetness;                                 // 0x0252(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableEmotionControl;                           // 0x0253(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableMomoLookAtBehavior;                       // 0x0254(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BP_InteractionIKDefaultSlotOffset;                 // 0x0258(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BP_CustomInteractionIKSlotName;                    // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGroundedLocomotionScenarioType               BP_GroundedLocomotionState;                        // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EGroundedLocomotionScenarioType NewGroundedLocomotionState, EGroundedLocomotionScenarioType OldGroundedLocomotionState)> Event_OnGroundedLocomotionStateChanged; // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bEnableHandHoldingIdleBreak;                       // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              HandHoldAnimConfig;                                // 0x0298(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bInLerpDodge;                                      // 0x02C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DodgeLocation;                                     // 0x02C8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        DodgeSpeed;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        HandHoldingIdlebreakInterval;                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableCheckFaceMaterialCurve;                   // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableVisitorAFKIdle;                           // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableNikkiLookAtBehavior;                      // 0x02F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableGLSListener;                              // 0x02F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableMiniGameBounder;                          // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableVisitorSyncMovementPerformanceProcessor;  // 0x02F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnablePlayerOnIceProcessor;                     // 0x02F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnablePlayerModifierProcessor;                  // 0x02F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_ActionPoint_InterruptActionPoint();
	void BP_ActionPoint_PauseActionPoint();
	void BP_ActionPoint_ResumeActionPoint();
	void BP_ActionPoint_StartActionPoint(class UBP_ActionPoint_TaskAnime_Template_C* InActionPointDA, double inDuration);
	void BP_ActionPoint_StartGesture(const struct FGameplayTag& InGestureTag, bool bFullBodyGesture);
	void BP_ActionPoint_StartStance(const struct FGameplayTag& InStanceTag);
	void BP_ActionPoint_StopActionPoint();
	void BP_DodgeMoveTo(const struct FVector& TargetDir);
	void BP_RequestStartPerformance(const struct FGameplayTag& StanceTag);
	void ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent(int32 EntryPoint);
	void GetPendingKillTimeAfterUnbind(double* Pendingking);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void RequestStartGesture(const struct FGameplayTag& GestureTag, bool bFullBodyGesture);
	void RequestStopGesture();
	void RequestStopPerformance(bool bIgnoreCollision, bool bFastTransition);
	void SetActorPushPlayerEnable(bool bEnable);
	void TraceGroundDistance(double* Distance);
	void UpdatePositionShadowWithoutCapture();

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerFeedBackPerformanceComponent_C">();
	}
	static class UBP_PlayerFeedBackPerformanceComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerFeedBackPerformanceComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerFeedBackPerformanceComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerFeedBackPerformanceComponent_C");
static_assert(sizeof(UBP_PlayerFeedBackPerformanceComponent_C) == 0x0002F8, "Wrong size on UBP_PlayerFeedBackPerformanceComponent_C");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, EnableShadowDecal) == 0x0000B8, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::EnableShadowDecal' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, Ref_RoleShadowCapture) == 0x0000C0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::Ref_RoleShadowCapture' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, RT_Role) == 0x0000C8, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::RT_Role' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, As_Character) == 0x0000D0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::As_Character' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, CapsuleDeviation) == 0x0000D8, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::CapsuleDeviation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_IdleAnimType) == 0x0000E0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_IdleAnimType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_RegularMovementLayerType) == 0x0000E4, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_RegularMovementLayerType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, JumpHeightMax) == 0x0000E8, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::JumpHeightMax' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_PlayerPositioningShadowConfig) == 0x0000F0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_PlayerPositioningShadowConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, ShadowDecal) == 0x000118, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::ShadowDecal' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, MapBounderFeedBack) == 0x000119, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::MapBounderFeedBack' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, SafeLocation) == 0x00011A, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::SafeLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, CharacterFocus) == 0x00011B, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::CharacterFocus' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, OnDeadDispatcher) == 0x000120, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::OnDeadDispatcher' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, DA_FocusConfig) == 0x000130, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::DA_FocusConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, FocusLocation) == 0x000158, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::FocusLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, IsFocusValid) == 0x000170, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::IsFocusValid' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, WaterInteraction) == 0x000171, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::WaterInteraction' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bEnableInteractionPerformance) == 0x000172, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bEnableInteractionPerformance' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, DA_Performance_AnimationSet) == 0x000178, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::DA_Performance_AnimationSet' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, DT_TransitionConfig) == 0x000180, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::DT_TransitionConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BigWorldStanceTag) == 0x000188, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BigWorldStanceTag' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BigWorldTransitionGroupTag) == 0x000190, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BigWorldTransitionGroupTag' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, ActionPoint) == 0x000198, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::ActionPoint' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, DefaultBlendConfig) == 0x0001A0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::DefaultBlendConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bEnableSituationCheck) == 0x0001C0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bEnableSituationCheck' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_LeisureWaitingTime) == 0x0001C8, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_LeisureWaitingTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_PlayerWaterInteractionConfig) == 0x0001D0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_PlayerWaterInteractionConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bEnableDlgPerformance) == 0x0001D8, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bEnableDlgPerformance' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bEnablePushAbility) == 0x0001D9, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bEnablePushAbility' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, DT_StanceAnimSet) == 0x0001E0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::DT_StanceAnimSet' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, DT_GestureAnimSet) == 0x0001E8, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::DT_GestureAnimSet' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, DT_TransitionAnimSet) == 0x0001F0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::DT_TransitionAnimSet' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, DT_TransitionRule) == 0x0001F8, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::DT_TransitionRule' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bUseNewAnimationSetCfg) == 0x000200, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bUseNewAnimationSetCfg' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnableDetectWind) == 0x000201, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnableDetectWind' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnableEdgeProtecction) == 0x000202, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnableEdgeProtecction' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bEnableStylizedCloth) == 0x000203, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bEnableStylizedCloth' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bEnableEnvironmentResponse) == 0x000204, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bEnableEnvironmentResponse' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_PlayerWetnessConfig) == 0x000208, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_PlayerWetnessConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, RainCoatList) == 0x000210, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::RainCoatList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, WetnessMPC) == 0x000218, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::WetnessMPC' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bEnableIdleBreak) == 0x000220, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bEnableIdleBreak' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bEnableDodge) == 0x000221, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bEnableDodge' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_PlayerDodgeConfig) == 0x000228, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_PlayerDodgeConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnableSitPorformance) == 0x000250, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnableSitPorformance' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bEnableInteractiveIdleBreak) == 0x000251, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bEnableInteractiveIdleBreak' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bEnableNPCWetness) == 0x000252, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bEnableNPCWetness' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnableEmotionControl) == 0x000253, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnableEmotionControl' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnableMomoLookAtBehavior) == 0x000254, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnableMomoLookAtBehavior' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_InteractionIKDefaultSlotOffset) == 0x000258, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_InteractionIKDefaultSlotOffset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_CustomInteractionIKSlotName) == 0x000270, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_CustomInteractionIKSlotName' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_GroundedLocomotionState) == 0x000278, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_GroundedLocomotionState' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, Event_OnGroundedLocomotionStateChanged) == 0x000280, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::Event_OnGroundedLocomotionStateChanged' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bEnableHandHoldingIdleBreak) == 0x000290, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bEnableHandHoldingIdleBreak' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, HandHoldAnimConfig) == 0x000298, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::HandHoldAnimConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, bInLerpDodge) == 0x0002C0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::bInLerpDodge' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, DodgeLocation) == 0x0002C8, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::DodgeLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, DodgeSpeed) == 0x0002E0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::DodgeSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, HandHoldingIdlebreakInterval) == 0x0002E8, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::HandHoldingIdlebreakInterval' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnableCheckFaceMaterialCurve) == 0x0002F0, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnableCheckFaceMaterialCurve' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnableVisitorAFKIdle) == 0x0002F1, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnableVisitorAFKIdle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnableNikkiLookAtBehavior) == 0x0002F2, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnableNikkiLookAtBehavior' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnableGLSListener) == 0x0002F3, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnableGLSListener' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnableMiniGameBounder) == 0x0002F4, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnableMiniGameBounder' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnableVisitorSyncMovementPerformanceProcessor) == 0x0002F5, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnableVisitorSyncMovementPerformanceProcessor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnablePlayerOnIceProcessor) == 0x0002F6, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnablePlayerOnIceProcessor' has a wrong offset!");
static_assert(offsetof(UBP_PlayerFeedBackPerformanceComponent_C, BP_EnablePlayerModifierProcessor) == 0x0002F7, "Member 'UBP_PlayerFeedBackPerformanceComponent_C::BP_EnablePlayerModifierProcessor' has a wrong offset!");

}

