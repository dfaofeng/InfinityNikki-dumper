#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PSDKWindows

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct PSDKWindows.PCDeviceInfo
// 0x01C8 (0x01C8 - 0x0000)
struct FPCDeviceInfo final
{
public:
	class FString                                 timeZone;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         timeZoneOffset;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 boardID;                                           // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 systemuuid;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 cpuID;                                             // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HDSerialNumber;                                    // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 systemMachinePC;                                   // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 productIDPC;                                       // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemoryType;                                        // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SystemName;                                        // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         screenWidth;                                       // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         screenHight;                                       // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         screenHeight;                                      // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 cpuHardware;                                       // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 allDisk;                                           // 0x00B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 residueDisk;                                       // 0x00C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 appMemory;                                         // 0x00D8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 allMemory;                                         // 0x00E8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 macAddress;                                        // 0x00F8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ldns;                                              // 0x0108(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 gpuModel;                                          // 0x0118(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 gpuDriverVersion;                                  // 0x0128(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 wifiRssi;                                          // 0x0138(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 networkStatus;                                     // 0x0148(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Proxy;                                             // 0x0158(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0168(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IPv6;                                              // 0x0178(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 systemType;                                        // 0x0188(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 systemSoftware;                                    // 0x0198(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 systemDeviceType;                                  // 0x01A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 network;                                           // 0x01B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPCDeviceInfo) == 0x000008, "Wrong alignment on FPCDeviceInfo");
static_assert(sizeof(FPCDeviceInfo) == 0x0001C8, "Wrong size on FPCDeviceInfo");
static_assert(offsetof(FPCDeviceInfo, timeZone) == 0x000000, "Member 'FPCDeviceInfo::timeZone' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, timeZoneOffset) == 0x000010, "Member 'FPCDeviceInfo::timeZoneOffset' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, boardID) == 0x000018, "Member 'FPCDeviceInfo::boardID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, systemuuid) == 0x000028, "Member 'FPCDeviceInfo::systemuuid' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, cpuID) == 0x000038, "Member 'FPCDeviceInfo::cpuID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, HDSerialNumber) == 0x000048, "Member 'FPCDeviceInfo::HDSerialNumber' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, systemMachinePC) == 0x000058, "Member 'FPCDeviceInfo::systemMachinePC' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, productIDPC) == 0x000068, "Member 'FPCDeviceInfo::productIDPC' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, MemoryType) == 0x000078, "Member 'FPCDeviceInfo::MemoryType' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, SystemName) == 0x000088, "Member 'FPCDeviceInfo::SystemName' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, screenWidth) == 0x000098, "Member 'FPCDeviceInfo::screenWidth' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, screenHight) == 0x00009C, "Member 'FPCDeviceInfo::screenHight' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, screenHeight) == 0x0000A0, "Member 'FPCDeviceInfo::screenHeight' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, cpuHardware) == 0x0000A8, "Member 'FPCDeviceInfo::cpuHardware' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, allDisk) == 0x0000B8, "Member 'FPCDeviceInfo::allDisk' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, residueDisk) == 0x0000C8, "Member 'FPCDeviceInfo::residueDisk' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, appMemory) == 0x0000D8, "Member 'FPCDeviceInfo::appMemory' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, allMemory) == 0x0000E8, "Member 'FPCDeviceInfo::allMemory' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, macAddress) == 0x0000F8, "Member 'FPCDeviceInfo::macAddress' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, ldns) == 0x000108, "Member 'FPCDeviceInfo::ldns' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, gpuModel) == 0x000118, "Member 'FPCDeviceInfo::gpuModel' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, gpuDriverVersion) == 0x000128, "Member 'FPCDeviceInfo::gpuDriverVersion' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, wifiRssi) == 0x000138, "Member 'FPCDeviceInfo::wifiRssi' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, networkStatus) == 0x000148, "Member 'FPCDeviceInfo::networkStatus' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, Proxy) == 0x000158, "Member 'FPCDeviceInfo::Proxy' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, IP) == 0x000168, "Member 'FPCDeviceInfo::IP' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, IPv6) == 0x000178, "Member 'FPCDeviceInfo::IPv6' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, systemType) == 0x000188, "Member 'FPCDeviceInfo::systemType' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, systemSoftware) == 0x000198, "Member 'FPCDeviceInfo::systemSoftware' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, systemDeviceType) == 0x0001A8, "Member 'FPCDeviceInfo::systemDeviceType' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfo, network) == 0x0001B8, "Member 'FPCDeviceInfo::network' has a wrong offset!");

// ScriptStruct PSDKWindows.PCDeviceInfoOld
// 0x0300 (0x0300 - 0x0000)
struct FPCDeviceInfoOld final
{
public:
	class FString                                 RequestID;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EventId;                                           // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeqID;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DtEventTime;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EventTimeStamp;                                    // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 timeZone;                                          // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 vGameAppid;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlatID;                                            // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubPlatID;                                         // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdPlatID;                                          // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientVersion;                                     // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VopenID;                                           // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VRoleID;                                           // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKVersion;                                        // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x00C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IPv6;                                              // 0x00D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageName;                                       // 0x00E0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 cpuHardware;                                       // 0x00F0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Memory;                                            // 0x0100(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 systemType;                                        // 0x0110(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 systemSoftware;                                    // 0x0120(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 systemDeviceType;                                  // 0x0130(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OsVersion;                                         // 0x0140(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 network;                                           // 0x0150(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mac;                                               // 0x0160(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceID;                                          // 0x0170(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAgent;                                         // 0x0180(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SystemLang;                                        // 0x0190(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoxID;                                             // 0x01A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AFID;                                              // 0x01B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FirebaseID;                                        // 0x01C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extra;                                             // 0x01D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UUID;                                              // 0x01E0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 cpuID;                                             // 0x01F0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HDSerialNumber;                                    // 0x0200(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 systemMachinePC;                                   // 0x0210(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 productIDPC;                                       // 0x0220(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemoryType;                                        // 0x0230(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BridgeVersion;                                     // 0x0240(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SystemName;                                        // 0x0250(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventValue101;                                     // 0x0260(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventValue102;                                     // 0x0270(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventValue103;                                     // 0x0280(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventValue104;                                     // 0x0290(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventValue105;                                     // 0x02A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventValue106;                                     // 0x02B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventValue107;                                     // 0x02C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventValue108;                                     // 0x02D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventValue109;                                     // 0x02E0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventValue110;                                     // 0x02F0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPCDeviceInfoOld) == 0x000008, "Wrong alignment on FPCDeviceInfoOld");
static_assert(sizeof(FPCDeviceInfoOld) == 0x000300, "Wrong size on FPCDeviceInfoOld");
static_assert(offsetof(FPCDeviceInfoOld, RequestID) == 0x000000, "Member 'FPCDeviceInfoOld::RequestID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, SessionId) == 0x000010, "Member 'FPCDeviceInfoOld::SessionId' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventId) == 0x000020, "Member 'FPCDeviceInfoOld::EventId' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, SeqID) == 0x000028, "Member 'FPCDeviceInfoOld::SeqID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, DtEventTime) == 0x000030, "Member 'FPCDeviceInfoOld::DtEventTime' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventTimeStamp) == 0x000040, "Member 'FPCDeviceInfoOld::EventTimeStamp' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, timeZone) == 0x000048, "Member 'FPCDeviceInfoOld::timeZone' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, vGameAppid) == 0x000058, "Member 'FPCDeviceInfoOld::vGameAppid' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, PlatID) == 0x000068, "Member 'FPCDeviceInfoOld::PlatID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, SubPlatID) == 0x00006C, "Member 'FPCDeviceInfoOld::SubPlatID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, AdPlatID) == 0x000070, "Member 'FPCDeviceInfoOld::AdPlatID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, ClientVersion) == 0x000080, "Member 'FPCDeviceInfoOld::ClientVersion' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, VopenID) == 0x000090, "Member 'FPCDeviceInfoOld::VopenID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, VRoleID) == 0x0000A0, "Member 'FPCDeviceInfoOld::VRoleID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, SDKVersion) == 0x0000B0, "Member 'FPCDeviceInfoOld::SDKVersion' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, IP) == 0x0000C0, "Member 'FPCDeviceInfoOld::IP' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, IPv6) == 0x0000D0, "Member 'FPCDeviceInfoOld::IPv6' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, PackageName) == 0x0000E0, "Member 'FPCDeviceInfoOld::PackageName' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, cpuHardware) == 0x0000F0, "Member 'FPCDeviceInfoOld::cpuHardware' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, Memory) == 0x000100, "Member 'FPCDeviceInfoOld::Memory' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, systemType) == 0x000110, "Member 'FPCDeviceInfoOld::systemType' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, systemSoftware) == 0x000120, "Member 'FPCDeviceInfoOld::systemSoftware' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, systemDeviceType) == 0x000130, "Member 'FPCDeviceInfoOld::systemDeviceType' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, OsVersion) == 0x000140, "Member 'FPCDeviceInfoOld::OsVersion' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, network) == 0x000150, "Member 'FPCDeviceInfoOld::network' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, Mac) == 0x000160, "Member 'FPCDeviceInfoOld::Mac' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, DeviceID) == 0x000170, "Member 'FPCDeviceInfoOld::DeviceID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, UserAgent) == 0x000180, "Member 'FPCDeviceInfoOld::UserAgent' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, SystemLang) == 0x000190, "Member 'FPCDeviceInfoOld::SystemLang' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, BoxID) == 0x0001A0, "Member 'FPCDeviceInfoOld::BoxID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, AFID) == 0x0001B0, "Member 'FPCDeviceInfoOld::AFID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, FirebaseID) == 0x0001C0, "Member 'FPCDeviceInfoOld::FirebaseID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, Extra) == 0x0001D0, "Member 'FPCDeviceInfoOld::Extra' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, UUID) == 0x0001E0, "Member 'FPCDeviceInfoOld::UUID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, cpuID) == 0x0001F0, "Member 'FPCDeviceInfoOld::cpuID' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, HDSerialNumber) == 0x000200, "Member 'FPCDeviceInfoOld::HDSerialNumber' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, systemMachinePC) == 0x000210, "Member 'FPCDeviceInfoOld::systemMachinePC' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, productIDPC) == 0x000220, "Member 'FPCDeviceInfoOld::productIDPC' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, MemoryType) == 0x000230, "Member 'FPCDeviceInfoOld::MemoryType' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, BridgeVersion) == 0x000240, "Member 'FPCDeviceInfoOld::BridgeVersion' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, SystemName) == 0x000250, "Member 'FPCDeviceInfoOld::SystemName' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventValue101) == 0x000260, "Member 'FPCDeviceInfoOld::EventValue101' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventValue102) == 0x000270, "Member 'FPCDeviceInfoOld::EventValue102' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventValue103) == 0x000280, "Member 'FPCDeviceInfoOld::EventValue103' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventValue104) == 0x000290, "Member 'FPCDeviceInfoOld::EventValue104' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventValue105) == 0x0002A0, "Member 'FPCDeviceInfoOld::EventValue105' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventValue106) == 0x0002B0, "Member 'FPCDeviceInfoOld::EventValue106' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventValue107) == 0x0002C0, "Member 'FPCDeviceInfoOld::EventValue107' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventValue108) == 0x0002D0, "Member 'FPCDeviceInfoOld::EventValue108' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventValue109) == 0x0002E0, "Member 'FPCDeviceInfoOld::EventValue109' has a wrong offset!");
static_assert(offsetof(FPCDeviceInfoOld, EventValue110) == 0x0002F0, "Member 'FPCDeviceInfoOld::EventValue110' has a wrong offset!");

}

