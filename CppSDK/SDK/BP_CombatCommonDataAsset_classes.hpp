#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CombatCommonDataAsset

#include "Basic.hpp"

#include "EDamagePerformanceType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CombatCommonDataAsset.BP_CombatCommonDataAsset_C
// 0x0168 (0x0198 - 0x0030)
class UBP_CombatCommonDataAsset_C final : public UPrimaryDataAsset
{
public:
	class UCameraBaseParamsData*                  BattleCamera;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCameraBaseParamsData*                  AimingCamera;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FViewTargetTransitionParams            AimingBlendIn;                                     // 0x0040(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FViewTargetTransitionParams            AimingBlendOut;                                    // 0x0060(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UCameraBaseParamsData*                  DaMiaoBattleCamera;                                // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Combat_BlendOutDelayTime;                          // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MovementAllConfigTemplate_C*        MovementDA;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RotationRate;                                      // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MovementAllConfigTemplate_C*        AimingMovementDA;                                  // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_BuffConfig_C*                       BuffInvincible_System;                             // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_BuffConfig_C*                       BuffImmuneDamage_DaMiao;                           // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EDamagePerformanceType, class UBP_BuffConfig_C*> BuffHitConfigs;                            // 0x00B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EDamagePerformanceType, class UBP_BuffConfig_C*> BuffDamageConfigs;                         // 0x0108(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UX6AbilityTagRelationshipMapping*       TagRelationship;                                   // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ForceMultiplier_Mobile;                            // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MonsterWarningAbsDistance;                         // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CommonHitGA;                                       // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CommonDeathGA;                                     // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CommonReliveGA;                                    // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CommonPlayMontageGA;                               // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            DeathOpacityCurve;                                 // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CombatCommonDataAsset_C">();
	}
	static class UBP_CombatCommonDataAsset_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CombatCommonDataAsset_C>();
	}
};
static_assert(alignof(UBP_CombatCommonDataAsset_C) == 0x000008, "Wrong alignment on UBP_CombatCommonDataAsset_C");
static_assert(sizeof(UBP_CombatCommonDataAsset_C) == 0x000198, "Wrong size on UBP_CombatCommonDataAsset_C");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, BattleCamera) == 0x000030, "Member 'UBP_CombatCommonDataAsset_C::BattleCamera' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, AimingCamera) == 0x000038, "Member 'UBP_CombatCommonDataAsset_C::AimingCamera' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, AimingBlendIn) == 0x000040, "Member 'UBP_CombatCommonDataAsset_C::AimingBlendIn' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, AimingBlendOut) == 0x000060, "Member 'UBP_CombatCommonDataAsset_C::AimingBlendOut' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, DaMiaoBattleCamera) == 0x000080, "Member 'UBP_CombatCommonDataAsset_C::DaMiaoBattleCamera' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, Combat_BlendOutDelayTime) == 0x000088, "Member 'UBP_CombatCommonDataAsset_C::Combat_BlendOutDelayTime' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, MovementDA) == 0x000090, "Member 'UBP_CombatCommonDataAsset_C::MovementDA' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, RotationRate) == 0x000098, "Member 'UBP_CombatCommonDataAsset_C::RotationRate' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, AimingMovementDA) == 0x0000A0, "Member 'UBP_CombatCommonDataAsset_C::AimingMovementDA' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, BuffInvincible_System) == 0x0000A8, "Member 'UBP_CombatCommonDataAsset_C::BuffInvincible_System' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, BuffImmuneDamage_DaMiao) == 0x0000B0, "Member 'UBP_CombatCommonDataAsset_C::BuffImmuneDamage_DaMiao' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, BuffHitConfigs) == 0x0000B8, "Member 'UBP_CombatCommonDataAsset_C::BuffHitConfigs' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, BuffDamageConfigs) == 0x000108, "Member 'UBP_CombatCommonDataAsset_C::BuffDamageConfigs' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, TagRelationship) == 0x000158, "Member 'UBP_CombatCommonDataAsset_C::TagRelationship' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, ForceMultiplier_Mobile) == 0x000160, "Member 'UBP_CombatCommonDataAsset_C::ForceMultiplier_Mobile' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, MonsterWarningAbsDistance) == 0x000168, "Member 'UBP_CombatCommonDataAsset_C::MonsterWarningAbsDistance' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, CommonHitGA) == 0x000170, "Member 'UBP_CombatCommonDataAsset_C::CommonHitGA' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, CommonDeathGA) == 0x000178, "Member 'UBP_CombatCommonDataAsset_C::CommonDeathGA' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, CommonReliveGA) == 0x000180, "Member 'UBP_CombatCommonDataAsset_C::CommonReliveGA' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, CommonPlayMontageGA) == 0x000188, "Member 'UBP_CombatCommonDataAsset_C::CommonPlayMontageGA' has a wrong offset!");
static_assert(offsetof(UBP_CombatCommonDataAsset_C, DeathOpacityCurve) == 0x000190, "Member 'UBP_CombatCommonDataAsset_C::DeathOpacityCurve' has a wrong offset!");

}

