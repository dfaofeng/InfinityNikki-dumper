#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MainCharacterInAirMovementComp

#include "Basic.hpp"

#include "BP_MainCharacterInAirMovementComp_classes.hpp"
#include "BP_MainCharacterInAirMovementComp_parameters.hpp"


namespace SDK
{

// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.BP_GetumpPromptLineProcessor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_PlayerJumpPromptLineProcessor_C**CurJumpPromptLineProcessor_0                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::BP_GetumpPromptLineProcessor(class UBP_PlayerJumpPromptLineProcessor_C** CurJumpPromptLineProcessor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "BP_GetumpPromptLineProcessor");

	Params::BP_MainCharacterInAirMovementComp_C_BP_GetumpPromptLineProcessor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurJumpPromptLineProcessor_0 != nullptr)
		*CurJumpPromptLineProcessor_0 = Parms.CurJumpPromptLineProcessor_0;
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.BP_OnMulticast_JumpRelease
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_MainCharacterInAirMovementComp_C::BP_OnMulticast_JumpRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "BP_OnMulticast_JumpRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.BP_OnMulticast_PhxLeaderEnterFloat
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPhxFloat                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FloatCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::BP_OnMulticast_PhxLeaderEnterFloat(bool bPhxFloat, int32 FloatCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "BP_OnMulticast_PhxLeaderEnterFloat");

	Params::BP_MainCharacterInAirMovementComp_C_BP_OnMulticast_PhxLeaderEnterFloat Parms{};

	Parms.bPhxFloat = bPhxFloat;
	Parms.FloatCount = FloatCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.BP_OnMulticast_PlayPhxSwitchAnim
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_MainCharacterInAirMovementComp_C::BP_OnMulticast_PlayPhxSwitchAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "BP_OnMulticast_PlayPhxSwitchAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.BP_TryPointToPointJumping
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   SourcePoint                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   TargetPoint                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SteppingSimulationTime                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CosntGravityZ                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxSimulationTime                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnableDebugDraw                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bCanJump                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         OutVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::BP_TryPointToPointJumping(const struct FVector& SourcePoint, const struct FVector& TargetPoint, float SteppingSimulationTime, float CosntGravityZ, float MaxSimulationTime, bool EnableDebugDraw, bool* bCanJump, struct FVector* OutVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "BP_TryPointToPointJumping");

	Params::BP_MainCharacterInAirMovementComp_C_BP_TryPointToPointJumping Parms{};

	Parms.SourcePoint = std::move(SourcePoint);
	Parms.TargetPoint = std::move(TargetPoint);
	Parms.SteppingSimulationTime = SteppingSimulationTime;
	Parms.CosntGravityZ = CosntGravityZ;
	Parms.MaxSimulationTime = MaxSimulationTime;
	Parms.EnableDebugDraw = EnableDebugDraw;

	UObject::ProcessEvent(Func, &Parms);

	if (bCanJump != nullptr)
		*bCanJump = Parms.bCanJump;

	if (OutVelocity != nullptr)
		*OutVelocity = std::move(Parms.OutVelocity);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.CaculateSinglePredictLineByGravityScaleCurve
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>&                 CurveTrack                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  JumpVelocityZ                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InitVelocityZ                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InitStartTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TargetVelocityZ                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      UpGravityScaleCurve                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      DownGravityScaleCurve                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  AddtiveUpGravityScale                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AddtiveDownGravityScale                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CurCharacterVelocity                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AdvanceTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ConstGravityZ                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxSimulationTime                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         EndLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::CaculateSinglePredictLineByGravityScaleCurve(TArray<struct FVector>& CurveTrack, double JumpVelocityZ, double InitVelocityZ, double InitStartTime, double TargetVelocityZ, class UCurveFloat* UpGravityScaleCurve, class UCurveFloat* DownGravityScaleCurve, double AddtiveUpGravityScale, double AddtiveDownGravityScale, const struct FVector& CurCharacterVelocity, double AdvanceTime, double ConstGravityZ, double MaxSimulationTime, struct FVector* EndLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "CaculateSinglePredictLineByGravityScaleCurve");

	Params::BP_MainCharacterInAirMovementComp_C_CaculateSinglePredictLineByGravityScaleCurve Parms{};

	Parms.CurveTrack = std::move(CurveTrack);
	Parms.JumpVelocityZ = JumpVelocityZ;
	Parms.InitVelocityZ = InitVelocityZ;
	Parms.InitStartTime = InitStartTime;
	Parms.TargetVelocityZ = TargetVelocityZ;
	Parms.UpGravityScaleCurve = UpGravityScaleCurve;
	Parms.DownGravityScaleCurve = DownGravityScaleCurve;
	Parms.AddtiveUpGravityScale = AddtiveUpGravityScale;
	Parms.AddtiveDownGravityScale = AddtiveDownGravityScale;
	Parms.CurCharacterVelocity = std::move(CurCharacterVelocity);
	Parms.AdvanceTime = AdvanceTime;
	Parms.ConstGravityZ = ConstGravityZ;
	Parms.MaxSimulationTime = MaxSimulationTime;

	UObject::ProcessEvent(Func, &Parms);

	CurveTrack = std::move(Parms.CurveTrack);

	if (EndLocation != nullptr)
		*EndLocation = std::move(Parms.EndLocation);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.CanDrawPredictJumpCurve
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::CanDrawPredictJumpCurve(bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "CanDrawPredictJumpCurve");

	Params::BP_MainCharacterInAirMovementComp_C_CanDrawPredictJumpCurve Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.CanDrawRealTimeJumpCurve
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  CurrentSpeedXY                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::CanDrawRealTimeJumpCurve(double CurrentSpeedXY, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "CanDrawRealTimeJumpCurve");

	Params::BP_MainCharacterInAirMovementComp_C_CanDrawRealTimeJumpCurve Parms{};

	Parms.CurrentSpeedXY = CurrentSpeedXY;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.DebugDrawPredicJumpCurveLineInWorldSpace
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   WorldStartLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>&                 CurveTrack                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FLinearColor&              LineColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::DebugDrawPredicJumpCurveLineInWorldSpace(const struct FVector& WorldStartLocation, TArray<struct FVector>& CurveTrack, const struct FLinearColor& LineColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "DebugDrawPredicJumpCurveLineInWorldSpace");

	Params::BP_MainCharacterInAirMovementComp_C_DebugDrawPredicJumpCurveLineInWorldSpace Parms{};

	Parms.WorldStartLocation = std::move(WorldStartLocation);
	Parms.CurveTrack = std::move(CurveTrack);
	Parms.LineColor = std::move(LineColor);

	UObject::ProcessEvent(Func, &Parms);

	CurveTrack = std::move(Parms.CurveTrack);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.EnableJumpPromptLineFeature
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::EnableJumpPromptLineFeature(bool bEnable, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "EnableJumpPromptLineFeature");

	Params::BP_MainCharacterInAirMovementComp_C_EnableJumpPromptLineFeature Parms{};

	Parms.bEnable = bEnable;
	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.ExecuteUbergraph_BP_MainCharacterInAirMovementComp
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::ExecuteUbergraph_BP_MainCharacterInAirMovementComp(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "ExecuteUbergraph_BP_MainCharacterInAirMovementComp");

	Params::BP_MainCharacterInAirMovementComp_C_ExecuteUbergraph_BP_MainCharacterInAirMovementComp Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.Multicast_JumpRelease
// (Net, BlueprintCallable, BlueprintEvent)

void UBP_MainCharacterInAirMovementComp_C::Multicast_JumpRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "Multicast_JumpRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.Multicast_PhxLeaderEnterFloat
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPhxFloat                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FloatCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::Multicast_PhxLeaderEnterFloat(bool bPhxFloat, int32 FloatCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "Multicast_PhxLeaderEnterFloat");

	Params::BP_MainCharacterInAirMovementComp_C_Multicast_PhxLeaderEnterFloat Parms{};

	Parms.bPhxFloat = bPhxFloat;
	Parms.FloatCount = FloatCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.Multicast_PlayPhxSwitchAnim
// (Net, NetReliable, BlueprintCallable, BlueprintEvent)

void UBP_MainCharacterInAirMovementComp_C::Multicast_PlayPhxSwitchAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "Multicast_PlayPhxSwitchAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.OnEnableJumpPromptLineFeatureComplete_Event
// (BlueprintCallable, BlueprintEvent)

void UBP_MainCharacterInAirMovementComp_C::OnEnableJumpPromptLineFeatureComplete_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "OnEnableJumpPromptLineFeatureComplete_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.OnRep_BP_Replicated_PlayerFloatSetting
// (BlueprintCallable, BlueprintEvent)

void UBP_MainCharacterInAirMovementComp_C::OnRep_BP_Replicated_PlayerFloatSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "OnRep_BP_Replicated_PlayerFloatSetting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_MainCharacterInAirMovementComp_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.ReceivePostPhysicsTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::ReceivePostPhysicsTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "ReceivePostPhysicsTick");

	Params::BP_MainCharacterInAirMovementComp_C_ReceivePostPhysicsTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "ReceiveTick");

	Params::BP_MainCharacterInAirMovementComp_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.SweepLastPostionByProjectilePath
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>&                 RelativeCurvePostitionPath                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FVector&                   AbsoluteCurveStartLocation                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>*                 RealCurvePositionTrace                                 (Parm, OutParm)
// struct FHitResult*                      HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// double*                                 CurveLength                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MainCharacterInAirMovementComp_C::SweepLastPostionByProjectilePath(TArray<struct FVector>& RelativeCurvePostitionPath, const struct FVector& AbsoluteCurveStartLocation, TArray<struct FVector>* RealCurvePositionTrace, struct FHitResult* HitResult, double* CurveLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "SweepLastPostionByProjectilePath");

	Params::BP_MainCharacterInAirMovementComp_C_SweepLastPostionByProjectilePath Parms{};

	Parms.RelativeCurvePostitionPath = std::move(RelativeCurvePostitionPath);
	Parms.AbsoluteCurveStartLocation = std::move(AbsoluteCurveStartLocation);

	UObject::ProcessEvent(Func, &Parms);

	RelativeCurvePostitionPath = std::move(Parms.RelativeCurvePostitionPath);

	if (RealCurvePositionTrace != nullptr)
		*RealCurvePositionTrace = std::move(Parms.RealCurvePositionTrace);

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);

	if (CurveLength != nullptr)
		*CurveLength = Parms.CurveLength;
}


// Function BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_MainCharacterInAirMovementComp_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MainCharacterInAirMovementComp_C", "GetModuleName");

	Params::BP_MainCharacterInAirMovementComp_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

