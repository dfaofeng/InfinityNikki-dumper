#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TT_TargetingSelection_RecoveryAOEPicker

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TargetingSystem_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function TT_TargetingSelection_RecoveryAOEPicker.TT_TargetingSelection_RecoveryAOEPicker_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct TT_TargetingSelection_RecoveryAOEPicker_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(TT_TargetingSelection_RecoveryAOEPicker_C_GetModuleName) == 0x000008, "Wrong alignment on TT_TargetingSelection_RecoveryAOEPicker_C_GetModuleName");
static_assert(sizeof(TT_TargetingSelection_RecoveryAOEPicker_C_GetModuleName) == 0x000010, "Wrong size on TT_TargetingSelection_RecoveryAOEPicker_C_GetModuleName");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_GetModuleName, ReturnValue) == 0x000000, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_GetModuleName::ReturnValue' has a wrong offset!");

// Function TT_TargetingSelection_RecoveryAOEPicker.TT_TargetingSelection_RecoveryAOEPicker_C.GetSourceRotation
// 0x0030 (0x0030 - 0x0000)
struct TT_TargetingSelection_RecoveryAOEPicker_C_GetSourceRotation final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TT_TargetingSelection_RecoveryAOEPicker_C_GetSourceRotation) == 0x000010, "Wrong alignment on TT_TargetingSelection_RecoveryAOEPicker_C_GetSourceRotation");
static_assert(sizeof(TT_TargetingSelection_RecoveryAOEPicker_C_GetSourceRotation) == 0x000030, "Wrong size on TT_TargetingSelection_RecoveryAOEPicker_C_GetSourceRotation");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_GetSourceRotation, TargetingHandle) == 0x000000, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_GetSourceRotation::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_GetSourceRotation, ReturnValue) == 0x000010, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_GetSourceRotation::ReturnValue' has a wrong offset!");

// Function TT_TargetingSelection_RecoveryAOEPicker.TT_TargetingSelection_RecoveryAOEPicker_C.K2_CanSelect
// 0x0058 (0x0058 - 0x0000)
struct TT_TargetingSelection_RecoveryAOEPicker_C_K2_CanSelect final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTargetingSourceContext                SourceContext;                                     // 0x0008(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TT_TargetingSelection_RecoveryAOEPicker_C_K2_CanSelect) == 0x000008, "Wrong alignment on TT_TargetingSelection_RecoveryAOEPicker_C_K2_CanSelect");
static_assert(sizeof(TT_TargetingSelection_RecoveryAOEPicker_C_K2_CanSelect) == 0x000058, "Wrong size on TT_TargetingSelection_RecoveryAOEPicker_C_K2_CanSelect");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_K2_CanSelect, TargetingHandle) == 0x000000, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_K2_CanSelect::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_K2_CanSelect, SourceContext) == 0x000008, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_K2_CanSelect::SourceContext' has a wrong offset!");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_K2_CanSelect, ReturnValue) == 0x000050, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_K2_CanSelect::ReturnValue' has a wrong offset!");

// Function TT_TargetingSelection_RecoveryAOEPicker.TT_TargetingSelection_RecoveryAOEPicker_C.K2_MarkHitResult
// 0x0200 (0x0200 - 0x0000)
struct TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0010(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x0108(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult) == 0x000008, "Wrong alignment on TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult");
static_assert(sizeof(TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult) == 0x000200, "Wrong size on TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult, Actor) == 0x000000, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult::Actor' has a wrong offset!");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult, Component) == 0x000008, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult::Component' has a wrong offset!");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult, HitResult) == 0x000010, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult, CallFunc_MakeHitResult_ReturnValue) == 0x000108, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_K2_MarkHitResult::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");

// Function TT_TargetingSelection_RecoveryAOEPicker.TT_TargetingSelection_RecoveryAOEPicker_C.SelectTargets
// 0x0050 (0x0050 - 0x0000)
struct TT_TargetingSelection_RecoveryAOEPicker_C_SelectTargets final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTargetingSourceContext                SourceContext;                                     // 0x0008(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(TT_TargetingSelection_RecoveryAOEPicker_C_SelectTargets) == 0x000008, "Wrong alignment on TT_TargetingSelection_RecoveryAOEPicker_C_SelectTargets");
static_assert(sizeof(TT_TargetingSelection_RecoveryAOEPicker_C_SelectTargets) == 0x000050, "Wrong size on TT_TargetingSelection_RecoveryAOEPicker_C_SelectTargets");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_SelectTargets, TargetingHandle) == 0x000000, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_SelectTargets::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TT_TargetingSelection_RecoveryAOEPicker_C_SelectTargets, SourceContext) == 0x000008, "Member 'TT_TargetingSelection_RecoveryAOEPicker_C_SelectTargets::SourceContext' has a wrong offset!");

}

