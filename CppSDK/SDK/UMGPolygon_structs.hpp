#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMGPolygon

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum UMGPolygon.EUMGPolygonCoordinateSpace
// NumValues: 0x0004
enum class EUMGPolygonCoordinateSpace : uint8
{
	Local                                    = 0,
	Viewport                                 = 1,
	Screen                                   = 2,
	EUMGPolygonCoordinateSpace_MAX           = 3,
};

// Enum UMGPolygon.EUMGPolygonType
// NumValues: 0x0003
enum class EUMGPolygonType : uint8
{
	LinearEdge                               = 0,
	CurveEdge                                = 1,
	EUMGPolygonType_MAX                      = 2,
};

// ScriptStruct UMGPolygon.UMGPolygonCurves
// 0x0038 (0x0038 - 0x0000)
struct FUMGPolygonCurves final
{
public:
	struct FInterpCurveVector2D                   Position;                                          // 0x0000(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      ReparamTable;                                      // 0x0018(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Version;                                           // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReparamStepsPerSegment;                            // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUMGPolygonCurves) == 0x000008, "Wrong alignment on FUMGPolygonCurves");
static_assert(sizeof(FUMGPolygonCurves) == 0x000038, "Wrong size on FUMGPolygonCurves");
static_assert(offsetof(FUMGPolygonCurves, Position) == 0x000000, "Member 'FUMGPolygonCurves::Position' has a wrong offset!");
static_assert(offsetof(FUMGPolygonCurves, ReparamTable) == 0x000018, "Member 'FUMGPolygonCurves::ReparamTable' has a wrong offset!");
static_assert(offsetof(FUMGPolygonCurves, Version) == 0x000030, "Member 'FUMGPolygonCurves::Version' has a wrong offset!");
static_assert(offsetof(FUMGPolygonCurves, ReparamStepsPerSegment) == 0x000034, "Member 'FUMGPolygonCurves::ReparamStepsPerSegment' has a wrong offset!");

// ScriptStruct UMGPolygon.UMGPolygonPoint
// 0x0020 (0x0020 - 0x0000)
struct FUMGPolygonPoint final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Direction;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUMGPolygonPoint) == 0x000008, "Wrong alignment on FUMGPolygonPoint");
static_assert(sizeof(FUMGPolygonPoint) == 0x000020, "Wrong size on FUMGPolygonPoint");
static_assert(offsetof(FUMGPolygonPoint, Location) == 0x000000, "Member 'FUMGPolygonPoint::Location' has a wrong offset!");
static_assert(offsetof(FUMGPolygonPoint, Direction) == 0x000010, "Member 'FUMGPolygonPoint::Direction' has a wrong offset!");

// ScriptStruct UMGPolygon.UMGPolygonInfo
// 0x01F0 (0x01F0 - 0x0000)
struct FUMGPolygonInfo final
{
public:
	EUMGPolygonType                               PolygonType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUMGPolygonPoint>               Points;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           PolygonTintColor;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            PolygonBrush;                                      // 0x0030(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCustomEdge;                                       // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EdgeThickness;                                     // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EdgeTintColor;                                     // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            EdgeBrush;                                         // 0x0120(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUMGPolygonInfo) == 0x000010, "Wrong alignment on FUMGPolygonInfo");
static_assert(sizeof(FUMGPolygonInfo) == 0x0001F0, "Wrong size on FUMGPolygonInfo");
static_assert(offsetof(FUMGPolygonInfo, PolygonType) == 0x000000, "Member 'FUMGPolygonInfo::PolygonType' has a wrong offset!");
static_assert(offsetof(FUMGPolygonInfo, Points) == 0x000008, "Member 'FUMGPolygonInfo::Points' has a wrong offset!");
static_assert(offsetof(FUMGPolygonInfo, PolygonTintColor) == 0x000018, "Member 'FUMGPolygonInfo::PolygonTintColor' has a wrong offset!");
static_assert(offsetof(FUMGPolygonInfo, PolygonBrush) == 0x000030, "Member 'FUMGPolygonInfo::PolygonBrush' has a wrong offset!");
static_assert(offsetof(FUMGPolygonInfo, bCustomEdge) == 0x000100, "Member 'FUMGPolygonInfo::bCustomEdge' has a wrong offset!");
static_assert(offsetof(FUMGPolygonInfo, EdgeThickness) == 0x000104, "Member 'FUMGPolygonInfo::EdgeThickness' has a wrong offset!");
static_assert(offsetof(FUMGPolygonInfo, EdgeTintColor) == 0x000108, "Member 'FUMGPolygonInfo::EdgeTintColor' has a wrong offset!");
static_assert(offsetof(FUMGPolygonInfo, EdgeBrush) == 0x000120, "Member 'FUMGPolygonInfo::EdgeBrush' has a wrong offset!");

}

