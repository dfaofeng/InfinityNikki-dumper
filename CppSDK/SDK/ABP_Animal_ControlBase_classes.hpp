#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Animal_ControlBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ABP_Animal_ControlBase_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Animal_ControlBase.ABP_Animal_ControlBase_C
// 0x0370 (0x0740 - 0x03D0)
class UABP_Animal_ControlBase_C final : public UAnimInstance
{
public:
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Animal_ControlBase::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;       // 0x03D8(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x03E0(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x03E8(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x03F0(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0410(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0438(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0460(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x04A8(0x0078)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0520(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0568(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0588(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x05D0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x05F0(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x06B8(0x0048)()
	double                                        Speed;                                             // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_709[0x7];                                      // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      IdleSequence;                                      // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimSequenceBase*                      MoveSequence;                                      // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          WithBlendSpace;                                    // 0x0720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_721[0x7];                                      // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace1D*                          MoveBlendSequence;                                 // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        MoveTurnValue;                                     // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABP_Animal_ControlBase(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Animal_ControlBase_C">();
	}
	static class UABP_Animal_ControlBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Animal_ControlBase_C>();
	}
};
static_assert(alignof(UABP_Animal_ControlBase_C) == 0x000010, "Wrong alignment on UABP_Animal_ControlBase_C");
static_assert(sizeof(UABP_Animal_ControlBase_C) == 0x000740, "Wrong size on UABP_Animal_ControlBase_C");
static_assert(offsetof(UABP_Animal_ControlBase_C, UberGraphFrame) == 0x0003D0, "Member 'UABP_Animal_ControlBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, __AnimBlueprintMutables) == 0x0003D8, "Member 'UABP_Animal_ControlBase_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimBlueprintExtension_PropertyAccess) == 0x0003E0, "Member 'UABP_Animal_ControlBase_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimBlueprintExtension_Base) == 0x0003E8, "Member 'UABP_Animal_ControlBase_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimGraphNode_Root) == 0x0003F0, "Member 'UABP_Animal_ControlBase_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimGraphNode_TransitionResult_1) == 0x000410, "Member 'UABP_Animal_ControlBase_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimGraphNode_TransitionResult) == 0x000438, "Member 'UABP_Animal_ControlBase_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimGraphNode_BlendListByBool) == 0x000460, "Member 'UABP_Animal_ControlBase_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimGraphNode_BlendSpacePlayer) == 0x0004A8, "Member 'UABP_Animal_ControlBase_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimGraphNode_SequencePlayer_1) == 0x000520, "Member 'UABP_Animal_ControlBase_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimGraphNode_StateResult_1) == 0x000568, "Member 'UABP_Animal_ControlBase_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimGraphNode_SequencePlayer) == 0x000588, "Member 'UABP_Animal_ControlBase_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimGraphNode_StateResult) == 0x0005D0, "Member 'UABP_Animal_ControlBase_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimGraphNode_StateMachine) == 0x0005F0, "Member 'UABP_Animal_ControlBase_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, AnimGraphNode_Slot) == 0x0006B8, "Member 'UABP_Animal_ControlBase_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, Speed) == 0x000700, "Member 'UABP_Animal_ControlBase_C::Speed' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, IsMoving) == 0x000708, "Member 'UABP_Animal_ControlBase_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, IdleSequence) == 0x000710, "Member 'UABP_Animal_ControlBase_C::IdleSequence' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, MoveSequence) == 0x000718, "Member 'UABP_Animal_ControlBase_C::MoveSequence' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, WithBlendSpace) == 0x000720, "Member 'UABP_Animal_ControlBase_C::WithBlendSpace' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, MoveBlendSequence) == 0x000728, "Member 'UABP_Animal_ControlBase_C::MoveBlendSequence' has a wrong offset!");
static_assert(offsetof(UABP_Animal_ControlBase_C, MoveTurnValue) == 0x000730, "Member 'UABP_Animal_ControlBase_C::MoveTurnValue' has a wrong offset!");

}

