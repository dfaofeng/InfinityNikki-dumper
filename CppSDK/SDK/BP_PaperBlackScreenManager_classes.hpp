#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PaperBlackScreenManager

#include "Basic.hpp"

#include "Enum_BlackScreenSource_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Enum_BlackScreenEvent_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PaperBlackScreenManager.BP_PaperBlackScreenManager_C
// 0x0040 (0x0068 - 0x0028)
class UBP_PaperBlackScreenManager_C final : public UObject
{
public:
	TMulticastInlineDelegate<void(Enum_BlackScreenSource BlackScreenSource)> Event_BlackScreen_FadeOut_Start; // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(Enum_BlackScreenSource BlackScreenSource)> Event_BlackScreen_FadeOut_End; // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(Enum_BlackScreenSource BlackScreenSource)> Event_BlackScreen_FadeIn_Start; // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(Enum_BlackScreenSource BlackScreenSource)> Event_BlackScreen_FadeIn_End; // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void RequestBlackScreenWait(int32* WaitHandle);
	void EnterBlackScreen(Enum_BlackScreenSource BlackScreenSource, class UObject* Context, const class FString& FadeOutEndCallback, const class FString& FadeInStartCallback, const class FString& FadeInEndCallback, bool bNoFadeOut, const struct FLinearColor& FadeColor, bool bNoFadeIn);
	void CancelBlackScreenWait(int32 WaitHandle);
	void BroadcastBlackScreenEvent(Enum_BlackScreenEvent Event, Enum_BlackScreenSource Source);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PaperBlackScreenManager_C">();
	}
	static class UBP_PaperBlackScreenManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PaperBlackScreenManager_C>();
	}
};
static_assert(alignof(UBP_PaperBlackScreenManager_C) == 0x000008, "Wrong alignment on UBP_PaperBlackScreenManager_C");
static_assert(sizeof(UBP_PaperBlackScreenManager_C) == 0x000068, "Wrong size on UBP_PaperBlackScreenManager_C");
static_assert(offsetof(UBP_PaperBlackScreenManager_C, Event_BlackScreen_FadeOut_Start) == 0x000028, "Member 'UBP_PaperBlackScreenManager_C::Event_BlackScreen_FadeOut_Start' has a wrong offset!");
static_assert(offsetof(UBP_PaperBlackScreenManager_C, Event_BlackScreen_FadeOut_End) == 0x000038, "Member 'UBP_PaperBlackScreenManager_C::Event_BlackScreen_FadeOut_End' has a wrong offset!");
static_assert(offsetof(UBP_PaperBlackScreenManager_C, Event_BlackScreen_FadeIn_Start) == 0x000048, "Member 'UBP_PaperBlackScreenManager_C::Event_BlackScreen_FadeIn_Start' has a wrong offset!");
static_assert(offsetof(UBP_PaperBlackScreenManager_C, Event_BlackScreen_FadeIn_End) == 0x000058, "Member 'UBP_PaperBlackScreenManager_C::Event_BlackScreen_FadeIn_End' has a wrong offset!");

}

