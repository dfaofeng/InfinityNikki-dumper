#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NikkiPlayerCameraManager_BP

#include "Basic.hpp"

#include "NikkiPlayerCameraManager_BP_classes.hpp"
#include "NikkiPlayerCameraManager_BP_parameters.hpp"


namespace SDK
{

// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.UpdateCameraDissolveParams
// (Private, BlueprintCallable, BlueprintEvent)

void ANikkiPlayerCameraManager_BP_C::UpdateCameraDissolveParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "UpdateCameraDissolveParams");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANikkiPlayerCameraManager_BP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "ReceiveTick");

	Params::NikkiPlayerCameraManager_BP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANikkiPlayerCameraManager_BP_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "ReceiveEndPlay");

	Params::NikkiPlayerCameraManager_BP_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ANikkiPlayerCameraManager_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.OnControlledRoleChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ControlledRole                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ANikkiPlayerCameraManager_BP_C::OnControlledRoleChanged(class AActor* ControlledRole)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "OnControlledRoleChanged");

	Params::NikkiPlayerCameraManager_BP_C_OnControlledRoleChanged Parms{};

	Parms.ControlledRole = ControlledRole;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.OnCameraVolumeTargetControlledActorChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ControlledActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           LastControlledActor                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ANikkiPlayerCameraManager_BP_C::OnCameraVolumeTargetControlledActorChanged(class AActor* ControlledActor, class AActor* LastControlledActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "OnCameraVolumeTargetControlledActorChanged");

	Params::NikkiPlayerCameraManager_BP_C_OnCameraVolumeTargetControlledActorChanged Parms{};

	Parms.ControlledActor = ControlledActor;
	Parms.LastControlledActor = LastControlledActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.OnBlendCompleted
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OldViewTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           NewViewTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ANikkiPlayerCameraManager_BP_C::OnBlendCompleted(class AActor* OldViewTarget, class AActor* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "OnBlendCompleted");

	Params::NikkiPlayerCameraManager_BP_C_OnBlendCompleted Parms{};

	Parms.OldViewTarget = OldViewTarget;
	Parms.NewViewTarget = NewViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.OnAssignViewTarget
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           NewTarget                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ANikkiPlayerCameraManager_BP_C::OnAssignViewTarget(class AActor* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "OnAssignViewTarget");

	Params::NikkiPlayerCameraManager_BP_C_OnAssignViewTarget Parms{};

	Parms.NewTarget = NewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.ExecuteUbergraph_NikkiPlayerCameraManager_BP
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANikkiPlayerCameraManager_BP_C::ExecuteUbergraph_NikkiPlayerCameraManager_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "ExecuteUbergraph_NikkiPlayerCameraManager_BP");

	Params::NikkiPlayerCameraManager_BP_C_ExecuteUbergraph_NikkiPlayerCameraManager_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.EndLookAtTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANikkiPlayerCameraManager_BP_C::EndLookAtTarget(double BlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "EndLookAtTarget");

	Params::NikkiPlayerCameraManager_BP_C_EndLookAtTarget Parms{};

	Parms.BlendOutTime = BlendOutTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.EndFocusOnTarget
// (Public, BlueprintCallable, BlueprintEvent)

void ANikkiPlayerCameraManager_BP_C::EndFocusOnTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "EndFocusOnTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.EndFocusOn
// (Public, BlueprintCallable, BlueprintEvent)

void ANikkiPlayerCameraManager_BP_C::EndFocusOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "EndFocusOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.BP_UpdateInteractionTime
// (Public, BlueprintCallable, BlueprintEvent)

void ANikkiPlayerCameraManager_BP_C::BP_UpdateInteractionTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "BP_UpdateInteractionTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.BP_GetCameraVolumeTargetControlledActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor**                          ControlledActor                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ANikkiPlayerCameraManager_BP_C::BP_GetCameraVolumeTargetControlledActor(class AActor** ControlledActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "BP_GetCameraVolumeTargetControlledActor");

	Params::NikkiPlayerCameraManager_BP_C_BP_GetCameraVolumeTargetControlledActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ControlledActor != nullptr)
		*ControlledActor = Parms.ControlledActor;
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.BP_DestroyInteractionCameraResetArea
// (Public, BlueprintCallable, BlueprintEvent)

void ANikkiPlayerCameraManager_BP_C::BP_DestroyInteractionCameraResetArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "BP_DestroyInteractionCameraResetArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.BP_DebugDrawAllCameraVolume
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ANikkiPlayerCameraManager_BP_C::BP_DebugDrawAllCameraVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "BP_DebugDrawAllCameraVolume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.BP_CreateInteractionCameraResetArea
// (Public, BlueprintCallable, BlueprintEvent)

void ANikkiPlayerCameraManager_BP_C::BP_CreateInteractionCameraResetArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "BP_CreateInteractionCameraResetArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.BP_CleanDrawAllCameraVolume
// (Public, BlueprintCallable, BlueprintEvent)

void ANikkiPlayerCameraManager_BP_C::BP_CleanDrawAllCameraVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "BP_CleanDrawAllCameraVolume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.BeginLookatTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  BlendInTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ANikkiPlayerCameraManager_BP_C::BeginLookatTarget(class AActor* Target, double BlendInTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "BeginLookatTarget");

	Params::NikkiPlayerCameraManager_BP_C_BeginLookatTarget Parms{};

	Parms.Target = Target;
	Parms.BlendInTime = BlendInTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.BeginFocusOnTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ECameraState                            CameraState_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOverrideSpringArmAngle                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  SpringArmAngle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOverrideSpringArmLength                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  springArmLength                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOverrideTransitionParams                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParams                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ANikkiPlayerCameraManager_BP_C::BeginFocusOnTarget(class AActor* TargetActor, ECameraState CameraState_0, bool bOverrideSpringArmAngle, double SpringArmAngle, bool bOverrideSpringArmLength, double springArmLength, bool bOverrideTransitionParams, const struct FViewTargetTransitionParams& TransitionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "BeginFocusOnTarget");

	Params::NikkiPlayerCameraManager_BP_C_BeginFocusOnTarget Parms{};

	Parms.TargetActor = TargetActor;
	Parms.CameraState_0 = CameraState_0;
	Parms.bOverrideSpringArmAngle = bOverrideSpringArmAngle;
	Parms.SpringArmAngle = SpringArmAngle;
	Parms.bOverrideSpringArmLength = bOverrideSpringArmLength;
	Parms.springArmLength = springArmLength;
	Parms.bOverrideTransitionParams = bOverrideTransitionParams;
	Parms.TransitionParams = std::move(TransitionParams);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.BeginFocusOn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           FocusOnActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FFFocusOnCameraParams&     FocusOnCameraParams                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ANikkiPlayerCameraManager_BP_C::BeginFocusOn(class AActor* FocusOnActor, const struct FFFocusOnCameraParams& FocusOnCameraParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "BeginFocusOn");

	Params::NikkiPlayerCameraManager_BP_C_BeginFocusOn Parms{};

	Parms.FocusOnActor = FocusOnActor;
	Parms.FocusOnCameraParams = std::move(FocusOnCameraParams);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString ANikkiPlayerCameraManager_BP_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NikkiPlayerCameraManager_BP_C", "GetModuleName");

	Params::NikkiPlayerCameraManager_BP_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

