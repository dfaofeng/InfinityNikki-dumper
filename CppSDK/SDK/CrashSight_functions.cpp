#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CrashSight

#include "Basic.hpp"

#include "CrashSight_classes.hpp"
#include "CrashSight_parameters.hpp"


namespace SDK
{

// Function CrashSight.PaperCrashSightLibrary.AddSceneData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperCrashSightLibrary::AddSceneData(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "AddSceneData");

	Params::PaperCrashSightLibrary_AddSceneData Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.ConfigDebugMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperCrashSightLibrary::ConfigDebugMode(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "ConfigDebugMode");

	Params::PaperCrashSightLibrary_ConfigDebugMode Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.IsInitialized
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperCrashSightLibrary::IsInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "IsInitialized");

	Params::PaperCrashSightLibrary_IsInitialized Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CrashSight.PaperCrashSightLibrary.PrintLog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LogStr                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperCrashSightLibrary::PrintLog(int32 Level, const class FString& LogStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "PrintLog");

	Params::PaperCrashSightLibrary_PrintLog Parms{};

	Parms.Level = Level;
	Parms.LogStr = std::move(LogStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.ReportException
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    StackTrace                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Extras                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    quit                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   dumpNativeType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperCrashSightLibrary::ReportException(int32 Type, const class FString& Name_0, const class FString& Reason, const class FString& StackTrace, const class FString& Extras, bool quit, int32 dumpNativeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "ReportException");

	Params::PaperCrashSightLibrary_ReportException Parms{};

	Parms.Type = Type;
	Parms.Name_0 = std::move(Name_0);
	Parms.Reason = std::move(Reason);
	Parms.StackTrace = std::move(StackTrace);
	Parms.Extras = std::move(Extras);
	Parms.quit = quit;
	Parms.dumpNativeType = dumpNativeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.ReportLogInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    MsgType                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperCrashSightLibrary::ReportLogInfo(const class FString& MsgType, const class FString& msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "ReportLogInfo");

	Params::PaperCrashSightLibrary_ReportLogInfo Parms{};

	Parms.MsgType = std::move(MsgType);
	Parms.msg = std::move(msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.SetAppVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    appVersion                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperCrashSightLibrary::SetAppVersion(const class FString& appVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "SetAppVersion");

	Params::PaperCrashSightLibrary_SetAppVersion Parms{};

	Parms.appVersion = std::move(appVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.SetDeviceId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    DeviceID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperCrashSightLibrary::SetDeviceId(const class FString& DeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "SetDeviceId");

	Params::PaperCrashSightLibrary_SetDeviceId Parms{};

	Parms.DeviceID = std::move(DeviceID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.SetLogPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    LogPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperCrashSightLibrary::SetLogPath(const class FString& LogPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "SetLogPath");

	Params::PaperCrashSightLibrary_SetLogPath Parms{};

	Parms.LogPath = std::move(LogPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.SetScene
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   sceneId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperCrashSightLibrary::SetScene(int32 sceneId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "SetScene");

	Params::PaperCrashSightLibrary_SetScene Parms{};

	Parms.sceneId = sceneId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.SetUserId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperCrashSightLibrary::SetUserId(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "SetUserId");

	Params::PaperCrashSightLibrary_SetUserId Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.SetUserValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperCrashSightLibrary::SetUserValue(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "SetUserValue");

	Params::PaperCrashSightLibrary_SetUserValue Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.TestJavaCrash
// (Final, Native, Static, Public, BlueprintCallable)

void UPaperCrashSightLibrary::TestJavaCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "TestJavaCrash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.TestNativeCrash
// (Final, Native, Static, Public, BlueprintCallable)

void UPaperCrashSightLibrary::TestNativeCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "TestNativeCrash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.TestOcCrash
// (Final, Native, Static, Public, BlueprintCallable)

void UPaperCrashSightLibrary::TestOcCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "TestOcCrash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrashSight.PaperCrashSightLibrary.TestOomCrash
// (Final, Native, Static, Public, BlueprintCallable)

void UPaperCrashSightLibrary::TestOomCrash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperCrashSightLibrary", "TestOomCrash");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

