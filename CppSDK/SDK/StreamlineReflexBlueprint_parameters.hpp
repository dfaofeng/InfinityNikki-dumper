#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StreamlineReflexBlueprint

#include "Basic.hpp"

#include "StreamlineReflexBlueprint_structs.hpp"
#include "StreamlineBlueprint_structs.hpp"


namespace SDK::Params
{

// Function StreamlineReflexBlueprint.StreamlineLibraryReflex.GetDefaultReflexMode
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryReflex_GetDefaultReflexMode final
{
public:
	EStreamlineReflexMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_GetDefaultReflexMode) == 0x000001, "Wrong alignment on StreamlineLibraryReflex_GetDefaultReflexMode");
static_assert(sizeof(StreamlineLibraryReflex_GetDefaultReflexMode) == 0x000001, "Wrong size on StreamlineLibraryReflex_GetDefaultReflexMode");
static_assert(offsetof(StreamlineLibraryReflex_GetDefaultReflexMode, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_GetDefaultReflexMode::ReturnValue' has a wrong offset!");

// Function StreamlineReflexBlueprint.StreamlineLibraryReflex.GetGameLatencyInMs
// 0x0004 (0x0004 - 0x0000)
struct StreamlineLibraryReflex_GetGameLatencyInMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_GetGameLatencyInMs) == 0x000004, "Wrong alignment on StreamlineLibraryReflex_GetGameLatencyInMs");
static_assert(sizeof(StreamlineLibraryReflex_GetGameLatencyInMs) == 0x000004, "Wrong size on StreamlineLibraryReflex_GetGameLatencyInMs");
static_assert(offsetof(StreamlineLibraryReflex_GetGameLatencyInMs, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_GetGameLatencyInMs::ReturnValue' has a wrong offset!");

// Function StreamlineReflexBlueprint.StreamlineLibraryReflex.GetGameToRenderLatencyInMs
// 0x0004 (0x0004 - 0x0000)
struct StreamlineLibraryReflex_GetGameToRenderLatencyInMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_GetGameToRenderLatencyInMs) == 0x000004, "Wrong alignment on StreamlineLibraryReflex_GetGameToRenderLatencyInMs");
static_assert(sizeof(StreamlineLibraryReflex_GetGameToRenderLatencyInMs) == 0x000004, "Wrong size on StreamlineLibraryReflex_GetGameToRenderLatencyInMs");
static_assert(offsetof(StreamlineLibraryReflex_GetGameToRenderLatencyInMs, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_GetGameToRenderLatencyInMs::ReturnValue' has a wrong offset!");

// Function StreamlineReflexBlueprint.StreamlineLibraryReflex.GetReflexMode
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryReflex_GetReflexMode final
{
public:
	EStreamlineReflexMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_GetReflexMode) == 0x000001, "Wrong alignment on StreamlineLibraryReflex_GetReflexMode");
static_assert(sizeof(StreamlineLibraryReflex_GetReflexMode) == 0x000001, "Wrong size on StreamlineLibraryReflex_GetReflexMode");
static_assert(offsetof(StreamlineLibraryReflex_GetReflexMode, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_GetReflexMode::ReturnValue' has a wrong offset!");

// Function StreamlineReflexBlueprint.StreamlineLibraryReflex.GetRenderLatencyInMs
// 0x0004 (0x0004 - 0x0000)
struct StreamlineLibraryReflex_GetRenderLatencyInMs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_GetRenderLatencyInMs) == 0x000004, "Wrong alignment on StreamlineLibraryReflex_GetRenderLatencyInMs");
static_assert(sizeof(StreamlineLibraryReflex_GetRenderLatencyInMs) == 0x000004, "Wrong size on StreamlineLibraryReflex_GetRenderLatencyInMs");
static_assert(offsetof(StreamlineLibraryReflex_GetRenderLatencyInMs, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_GetRenderLatencyInMs::ReturnValue' has a wrong offset!");

// Function StreamlineReflexBlueprint.StreamlineLibraryReflex.GetSupportedReflexModes
// 0x0010 (0x0010 - 0x0000)
struct StreamlineLibraryReflex_GetSupportedReflexModes final
{
public:
	TArray<EStreamlineReflexMode>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_GetSupportedReflexModes) == 0x000008, "Wrong alignment on StreamlineLibraryReflex_GetSupportedReflexModes");
static_assert(sizeof(StreamlineLibraryReflex_GetSupportedReflexModes) == 0x000010, "Wrong size on StreamlineLibraryReflex_GetSupportedReflexModes");
static_assert(offsetof(StreamlineLibraryReflex_GetSupportedReflexModes, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_GetSupportedReflexModes::ReturnValue' has a wrong offset!");

// Function StreamlineReflexBlueprint.StreamlineLibraryReflex.IsReflexModeSupported
// 0x0002 (0x0002 - 0x0000)
struct StreamlineLibraryReflex_IsReflexModeSupported final
{
public:
	EStreamlineReflexMode                         ReflexMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_IsReflexModeSupported) == 0x000001, "Wrong alignment on StreamlineLibraryReflex_IsReflexModeSupported");
static_assert(sizeof(StreamlineLibraryReflex_IsReflexModeSupported) == 0x000002, "Wrong size on StreamlineLibraryReflex_IsReflexModeSupported");
static_assert(offsetof(StreamlineLibraryReflex_IsReflexModeSupported, ReflexMode) == 0x000000, "Member 'StreamlineLibraryReflex_IsReflexModeSupported::ReflexMode' has a wrong offset!");
static_assert(offsetof(StreamlineLibraryReflex_IsReflexModeSupported, ReturnValue) == 0x000001, "Member 'StreamlineLibraryReflex_IsReflexModeSupported::ReturnValue' has a wrong offset!");

// Function StreamlineReflexBlueprint.StreamlineLibraryReflex.IsReflexSupported
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryReflex_IsReflexSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_IsReflexSupported) == 0x000001, "Wrong alignment on StreamlineLibraryReflex_IsReflexSupported");
static_assert(sizeof(StreamlineLibraryReflex_IsReflexSupported) == 0x000001, "Wrong size on StreamlineLibraryReflex_IsReflexSupported");
static_assert(offsetof(StreamlineLibraryReflex_IsReflexSupported, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_IsReflexSupported::ReturnValue' has a wrong offset!");

// Function StreamlineReflexBlueprint.StreamlineLibraryReflex.QueryReflexSupport
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryReflex_QueryReflexSupport final
{
public:
	EStreamlineFeatureSupport                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_QueryReflexSupport) == 0x000001, "Wrong alignment on StreamlineLibraryReflex_QueryReflexSupport");
static_assert(sizeof(StreamlineLibraryReflex_QueryReflexSupport) == 0x000001, "Wrong size on StreamlineLibraryReflex_QueryReflexSupport");
static_assert(offsetof(StreamlineLibraryReflex_QueryReflexSupport, ReturnValue) == 0x000000, "Member 'StreamlineLibraryReflex_QueryReflexSupport::ReturnValue' has a wrong offset!");

// Function StreamlineReflexBlueprint.StreamlineLibraryReflex.SetReflexMode
// 0x0001 (0x0001 - 0x0000)
struct StreamlineLibraryReflex_SetReflexMode final
{
public:
	EStreamlineReflexMode                         Mode;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamlineLibraryReflex_SetReflexMode) == 0x000001, "Wrong alignment on StreamlineLibraryReflex_SetReflexMode");
static_assert(sizeof(StreamlineLibraryReflex_SetReflexMode) == 0x000001, "Wrong size on StreamlineLibraryReflex_SetReflexMode");
static_assert(offsetof(StreamlineLibraryReflex_SetReflexMode, Mode) == 0x000000, "Member 'StreamlineLibraryReflex_SetReflexMode::Mode' has a wrong offset!");

}

