#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ClothCameraActor

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ClothCameraActor.BP_ClothCameraActor_C
// 0x0030 (0x03D8 - 0x03A8)
class ABP_ClothCameraActor_C final : public AActor
{
public:
	class UCameraComponent*                       Camera;                                            // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InitCameraPos;                                     // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Nikki;                                             // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InitNikkiPos;                                      // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)

public:
	void ExportPosition();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ClothCameraActor_C">();
	}
	static class ABP_ClothCameraActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ClothCameraActor_C>();
	}
};
static_assert(alignof(ABP_ClothCameraActor_C) == 0x000008, "Wrong alignment on ABP_ClothCameraActor_C");
static_assert(sizeof(ABP_ClothCameraActor_C) == 0x0003D8, "Wrong size on ABP_ClothCameraActor_C");
static_assert(offsetof(ABP_ClothCameraActor_C, Camera) == 0x0003A8, "Member 'ABP_ClothCameraActor_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_ClothCameraActor_C, SpringArm) == 0x0003B0, "Member 'ABP_ClothCameraActor_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_ClothCameraActor_C, DefaultSceneRoot) == 0x0003B8, "Member 'ABP_ClothCameraActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ClothCameraActor_C, InitCameraPos) == 0x0003C0, "Member 'ABP_ClothCameraActor_C::InitCameraPos' has a wrong offset!");
static_assert(offsetof(ABP_ClothCameraActor_C, Nikki) == 0x0003C8, "Member 'ABP_ClothCameraActor_C::Nikki' has a wrong offset!");
static_assert(offsetof(ABP_ClothCameraActor_C, InitNikkiPos) == 0x0003D0, "Member 'ABP_ClothCameraActor_C::InitNikkiPos' has a wrong offset!");

}

