#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PerfSight

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class PerfSight.PerfSightHelper
// 0x0000 (0x0028 - 0x0028)
class UPerfSightHelper final : public UBlueprintFunctionLibrary
{
public:
	static void BeginExclude();
	static void BeginExtTag(const class FString& TagName);
	static void BeginTag(const class FString& TagName);
	static void BeginTupleWrap(const class FString& Key);
	static void EnableDebugMode();
	static void EndExclude();
	static void EndExtTag(const class FString& TagName);
	static void EndTag();
	static void EndTupleWrap();
	static int32 GetDeviceLevelByQcc(const class FString& configName, const class FString& gpuFamily);
	static void InitContext(const class FString& AppID);
	static class FString LoadPerfSightConfig(const class FString& Key);
	static void MarkLevelFin();
	static void MarkLevelLoad(const class FString& SceneName, int32 Quality);
	static void MarkLevelLoadCompleted();
	static void PostEvent(int32 Key, const class FString& Info);
	static void PostFrame(float DeltaTime);
	static void PostNetworkLatency(int32 latency, const class FString& customInfo, const class FString& ipAddress);
	static void PostValueF1(const class FString& catgory, const class FString& Key, float A);
	static void PostValueF2(const class FString& catgory, const class FString& Key, float A, float B);
	static void PostValueF3(const class FString& catgory, const class FString& Key, float A, float B, float C);
	static void PostValueI1(const class FString& catgory, const class FString& Key, int32 A);
	static void PostValueI2(const class FString& catgory, const class FString& Key, int32 A, int32 B);
	static void PostValueI3(const class FString& catgory, const class FString& Key, int32 A, int32 B, int32 C);
	static void PostValueS(const class FString& catgory, const class FString& Key, const class FString& Value);
	static void SetCustomizedDeviceClass(int32 DeviceLevel);
	static void SetMatchId(const class FString& MatchID);
	static void SetPCAppVersion(const class FString& appVer);
	static void SetPCServerURL(const class FString& URL);
	static void SetPostValueStrMaxLen(int32 Length);
	static void SetQuality(int32 Quality);
	static void SetTargetFrameRate(int32 Target);
	static void SetUploadServerURL(const class FString& URL);
	static void SetUserId(const class FString& UserId);
	static void SetVersionIden(const class FString& versionName);
	static void UpdateNetLatency(int32 latency, const class FString& customInfo, const class FString& ipAddress);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PerfSightHelper">();
	}
	static class UPerfSightHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPerfSightHelper>();
	}
};
static_assert(alignof(UPerfSightHelper) == 0x000008, "Wrong alignment on UPerfSightHelper");
static_assert(sizeof(UPerfSightHelper) == 0x000028, "Wrong size on UPerfSightHelper");

}

