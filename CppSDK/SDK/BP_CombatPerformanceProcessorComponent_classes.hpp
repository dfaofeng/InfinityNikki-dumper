#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CombatPerformanceProcessorComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EHitReason_structs.hpp"
#include "EFeedBackReason_structs.hpp"
#include "X6Game_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CombatPerformanceProcessorComponent.BP_CombatPerformanceProcessorComponent_C
// 0x0088 (0x0130 - 0x00A8)
class UBP_CombatPerformanceProcessorComponent_C final : public UX6CombatPerformanceProcessorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMulticastInlineDelegate<void(class AActor* Attacker, class AActor* Instigater, double DamageValue, int32 DamageEffectType, int32 DamageType)> ReceiveAttack; // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BP_bRestricted;                                    // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bContinuedState;                                // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bBlendRestrictedAnim;                           // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          BP_RestrictedStartAnim;                            // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          BP_RestrictedLoopAnim;                             // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          BP_RestrictedEndAnim;                              // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CombatEffect;                                      // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dispatcher;                                        // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int64 EntityID, EFeedBackReason Reason)> ReceiveDead;              // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ANSCustomSpawnBullet;                              // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ANSModifyVerticalSpeed;                            // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ANSJumpTo;                                         // 0x00FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(double ChangeValue)> ReceiveHealthDiff;                            // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bNeedMirror;                                       // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EHitReason HitReason, class UBP_CombatPartHitComponent_C* HitPartComp)> ReceiveHitMontageEnd; // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UBP_PawnData_C*                         CombatPawnData;                                    // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_CombatPerformanceProcessorComponent(int32 EntryPoint);
	void BP_TurnOffLeisureAnim();
	void BP_ShowActorMaterial();
	void BP_PreEnterBattleInLS(bool bAddBattleTag, bool bAddBattleState);

	class UDataAsset* K2_GetABPConfigs() const;
	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CombatPerformanceProcessorComponent_C">();
	}
	static class UBP_CombatPerformanceProcessorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CombatPerformanceProcessorComponent_C>();
	}
};
static_assert(alignof(UBP_CombatPerformanceProcessorComponent_C) == 0x000008, "Wrong alignment on UBP_CombatPerformanceProcessorComponent_C");
static_assert(sizeof(UBP_CombatPerformanceProcessorComponent_C) == 0x000130, "Wrong size on UBP_CombatPerformanceProcessorComponent_C");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, UberGraphFrame) == 0x0000A8, "Member 'UBP_CombatPerformanceProcessorComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, ReceiveAttack) == 0x0000B0, "Member 'UBP_CombatPerformanceProcessorComponent_C::ReceiveAttack' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, BP_bRestricted) == 0x0000C0, "Member 'UBP_CombatPerformanceProcessorComponent_C::BP_bRestricted' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, BP_bContinuedState) == 0x0000C1, "Member 'UBP_CombatPerformanceProcessorComponent_C::BP_bContinuedState' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, BP_bBlendRestrictedAnim) == 0x0000C2, "Member 'UBP_CombatPerformanceProcessorComponent_C::BP_bBlendRestrictedAnim' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, BP_RestrictedStartAnim) == 0x0000C8, "Member 'UBP_CombatPerformanceProcessorComponent_C::BP_RestrictedStartAnim' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, BP_RestrictedLoopAnim) == 0x0000D0, "Member 'UBP_CombatPerformanceProcessorComponent_C::BP_RestrictedLoopAnim' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, BP_RestrictedEndAnim) == 0x0000D8, "Member 'UBP_CombatPerformanceProcessorComponent_C::BP_RestrictedEndAnim' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, CombatEffect) == 0x0000E0, "Member 'UBP_CombatPerformanceProcessorComponent_C::CombatEffect' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, Dispatcher) == 0x0000E1, "Member 'UBP_CombatPerformanceProcessorComponent_C::Dispatcher' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, ReceiveDead) == 0x0000E8, "Member 'UBP_CombatPerformanceProcessorComponent_C::ReceiveDead' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, ANSCustomSpawnBullet) == 0x0000F8, "Member 'UBP_CombatPerformanceProcessorComponent_C::ANSCustomSpawnBullet' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, ANSModifyVerticalSpeed) == 0x0000F9, "Member 'UBP_CombatPerformanceProcessorComponent_C::ANSModifyVerticalSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, ANSJumpTo) == 0x0000FA, "Member 'UBP_CombatPerformanceProcessorComponent_C::ANSJumpTo' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, ReceiveHealthDiff) == 0x000100, "Member 'UBP_CombatPerformanceProcessorComponent_C::ReceiveHealthDiff' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, bNeedMirror) == 0x000110, "Member 'UBP_CombatPerformanceProcessorComponent_C::bNeedMirror' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, ReceiveHitMontageEnd) == 0x000118, "Member 'UBP_CombatPerformanceProcessorComponent_C::ReceiveHitMontageEnd' has a wrong offset!");
static_assert(offsetof(UBP_CombatPerformanceProcessorComponent_C, CombatPawnData) == 0x000128, "Member 'UBP_CombatPerformanceProcessorComponent_C::CombatPawnData' has a wrong offset!");

}

