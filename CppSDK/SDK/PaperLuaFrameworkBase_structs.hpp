#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperLuaFrameworkBase

#include "Basic.hpp"


namespace SDK
{

// Enum PaperLuaFrameworkBase.EPaperInputDeviceKeyType
// NumValues: 0x0006
enum class EPaperInputDeviceKeyType : uint8
{
	None                                     = 0,
	Keyboard                                 = 1,
	Mouse                                    = 2,
	GamePad                                  = 3,
	TouchScreen                              = 4,
	EPaperInputDeviceKeyType_MAX             = 5,
};

// Enum PaperLuaFrameworkBase.PaperMobileGameState
// NumValues: 0x0006
enum class EPaperMobileGameState : uint8
{
	GAME_STATE_UNKNOWN                       = 0,
	GAME_STATE_NONE                          = 1,
	GAME_STATE_GAMEPLAY_INTERRUPTIBLE        = 2,
	GAME_STATE_GAMEPLAY_UNINTERRUPTIBLE      = 3,
	GAME_STATE_CONTENT                       = 4,
	GAME_STATE_MAX                           = 5,
};

// Enum PaperLuaFrameworkBase.EPaperNetPacketType
// NumValues: 0x0005
enum class EPaperNetPacketType : uint8
{
	Incoming_Lua                             = 0,
	Incoming_Replicate                       = 1,
	Outgoing_Lua                             = 2,
	Outgoing_Replicate                       = 3,
	EPaperNetPacketType_MAX                  = 4,
};

// Enum PaperLuaFrameworkBase.EPaperNetworkHandler
// NumValues: 0x0003
enum class EPaperNetworkHandler : uint8
{
	GameThread                               = 0,
	NewThread                                = 1,
	EPaperNetworkHandler_MAX                 = 2,
};

// Enum PaperLuaFrameworkBase.EX6ConnectionCharacteristic
// NumValues: 0x0005
enum class EX6ConnectionCharacteristic : uint8
{
	None                                     = 0,
	Lightweight                              = 1,
	Custom                                   = 2,
	All                                      = 4,
	EX6ConnectionCharacteristic_MAX          = 5,
};

// ScriptStruct PaperLuaFrameworkBase.PaperLuaInsight
// 0x0001 (0x0001 - 0x0000)
struct FPaperLuaInsight final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperLuaInsight) == 0x000001, "Wrong alignment on FPaperLuaInsight");
static_assert(sizeof(FPaperLuaInsight) == 0x000001, "Wrong size on FPaperLuaInsight");

// ScriptStruct PaperLuaFrameworkBase.NetworkCollectedData
// 0x0018 (0x0018 - 0x0000)
struct FNetworkCollectedData final
{
public:
	class FString                                 ProtoName;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSize;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPaperNetPacketType                           Type;                                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNetworkCollectedData) == 0x000008, "Wrong alignment on FNetworkCollectedData");
static_assert(sizeof(FNetworkCollectedData) == 0x000018, "Wrong size on FNetworkCollectedData");
static_assert(offsetof(FNetworkCollectedData, ProtoName) == 0x000000, "Member 'FNetworkCollectedData::ProtoName' has a wrong offset!");
static_assert(offsetof(FNetworkCollectedData, TotalSize) == 0x000010, "Member 'FNetworkCollectedData::TotalSize' has a wrong offset!");
static_assert(offsetof(FNetworkCollectedData, Type) == 0x000014, "Member 'FNetworkCollectedData::Type' has a wrong offset!");

// ScriptStruct PaperLuaFrameworkBase.ConnectionCharacteristicData
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FConnectionCharacteristicData final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConnectionCharacteristicData) == 0x000008, "Wrong alignment on FConnectionCharacteristicData");
static_assert(sizeof(FConnectionCharacteristicData) == 0x000030, "Wrong size on FConnectionCharacteristicData");

}

