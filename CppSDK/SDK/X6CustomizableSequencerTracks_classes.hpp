#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6CustomizableSequencerTracks

#include "Basic.hpp"

#include "MovieScene_classes.hpp"
#include "Engine_classes.hpp"
#include "X6CustomizableSequencerTracks_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class X6CustomizableSequencerTracks.X6LevelSequenceAssetUserData
// 0x0028 (0x0050 - 0x0028)
class UX6LevelSequenceAssetUserData final : public UAssetUserData
{
public:
	TSoftObjectPtr<class UDataAsset>              DataAsset;                                         // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6LevelSequenceAssetUserData">();
	}
	static class UX6LevelSequenceAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6LevelSequenceAssetUserData>();
	}
};
static_assert(alignof(UX6LevelSequenceAssetUserData) == 0x000008, "Wrong alignment on UX6LevelSequenceAssetUserData");
static_assert(sizeof(UX6LevelSequenceAssetUserData) == 0x000050, "Wrong size on UX6LevelSequenceAssetUserData");
static_assert(offsetof(UX6LevelSequenceAssetUserData, DataAsset) == 0x000028, "Member 'UX6LevelSequenceAssetUserData::DataAsset' has a wrong offset!");

// Class X6CustomizableSequencerTracks.X6SequencerBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UX6SequencerBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CheckIfTargetSectionOwnerActorContainsActivePropertySectionByName(class UMovieSceneSection* InSection, class FName InCheckPropertyName);
	static bool GetBoolValueFromPreviewConfig(class FName Name_0);
	static uint8 GetByteValueFromPreviewConfig(class FName Name_0);
	static class UX6LevelSequenceAssetUserData* GetCustomUserAsset(class ULevelSequence* LevelSequence);
	static double GetDoubleValueFromPreviewConfig(class FName Name_0);
	static int32 GetIntValueFromPreviewConfig(class FName Name_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6SequencerBlueprintFunctionLibrary">();
	}
	static class UX6SequencerBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6SequencerBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UX6SequencerBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UX6SequencerBlueprintFunctionLibrary");
static_assert(sizeof(UX6SequencerBlueprintFunctionLibrary) == 0x000028, "Wrong size on UX6SequencerBlueprintFunctionLibrary");

// Class X6CustomizableSequencerTracks.X6SequencerSectionBP
// 0x0020 (0x0140 - 0x0120)
class UX6SequencerSectionBP : public UMovieSceneSection
{
public:
	uint8                                         Pad_120[0x20];                                     // 0x0120(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UObject* FindBindingObject(const struct FMovieSceneObjectBindingID& MovieSceneObjectBindingID);
	class AActor* FindProxyActor();
	struct FFrameNumber GetBeginFrame();
	float GetBeginFrameSeconds();
	class UObject* GetBindingObject();
	struct FFrameNumber GetEndFrame();
	float GetEndFrameSeconds();
	class UMovieSceneSequencePlayer* GetMovieSceneSequencePlayer();
	void K2_OnSectionBegin();
	void K2_OnSectionBegin_WithBindingObject(class UObject* BindingObject);
	void K2_OnSectionEnd();
	void K2_OnSectionEnd_WithBindingObject(class UObject* BindingObject);
	void K2_OnSectionUpdate();
	void K2_OnSectionUpdate_WithBindingObject(class UObject* BindingObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6SequencerSectionBP">();
	}
	static class UX6SequencerSectionBP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6SequencerSectionBP>();
	}
};
static_assert(alignof(UX6SequencerSectionBP) == 0x000008, "Wrong alignment on UX6SequencerSectionBP");
static_assert(sizeof(UX6SequencerSectionBP) == 0x000140, "Wrong size on UX6SequencerSectionBP");

// Class X6CustomizableSequencerTracks.X6SequencerNewLookAtSectionBP
// 0x0000 (0x0140 - 0x0140)
class UX6SequencerNewLookAtSectionBP final : public UX6SequencerSectionBP
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6SequencerNewLookAtSectionBP">();
	}
	static class UX6SequencerNewLookAtSectionBP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6SequencerNewLookAtSectionBP>();
	}
};
static_assert(alignof(UX6SequencerNewLookAtSectionBP) == 0x000008, "Wrong alignment on UX6SequencerNewLookAtSectionBP");
static_assert(sizeof(UX6SequencerNewLookAtSectionBP) == 0x000140, "Wrong size on UX6SequencerNewLookAtSectionBP");

// Class X6CustomizableSequencerTracks.X6SequencerTrackBP
// 0x0068 (0x0100 - 0x0098)
class UX6SequencerTrackBP : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSupportsMultipleRows;                             // 0x00A0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsBlending;                                 // 0x00A1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EX6CustomSequencerTrackType                   TrackType;                                         // 0x00A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UX6SequencerSectionBP>      DefaultSectionType;                                // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UX6SequencerSectionBP>> SupportedSections;                              // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class UX6SequencerTrackInstanceBP> TrackInstanceType;                                // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateProxyActor;                               // 0x00C8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     GenerateProxyActorClass;                           // 0x00D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSectionLength;                              // 0x00D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00E0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGuid                                  ProxyActorGuid;                                    // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6SequencerTrackBP">();
	}
	static class UX6SequencerTrackBP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6SequencerTrackBP>();
	}
};
static_assert(alignof(UX6SequencerTrackBP) == 0x000008, "Wrong alignment on UX6SequencerTrackBP");
static_assert(sizeof(UX6SequencerTrackBP) == 0x000100, "Wrong size on UX6SequencerTrackBP");
static_assert(offsetof(UX6SequencerTrackBP, bSupportsMultipleRows) == 0x0000A0, "Member 'UX6SequencerTrackBP::bSupportsMultipleRows' has a wrong offset!");
static_assert(offsetof(UX6SequencerTrackBP, bSupportsBlending) == 0x0000A1, "Member 'UX6SequencerTrackBP::bSupportsBlending' has a wrong offset!");
static_assert(offsetof(UX6SequencerTrackBP, TrackType) == 0x0000A4, "Member 'UX6SequencerTrackBP::TrackType' has a wrong offset!");
static_assert(offsetof(UX6SequencerTrackBP, DefaultSectionType) == 0x0000A8, "Member 'UX6SequencerTrackBP::DefaultSectionType' has a wrong offset!");
static_assert(offsetof(UX6SequencerTrackBP, SupportedSections) == 0x0000B0, "Member 'UX6SequencerTrackBP::SupportedSections' has a wrong offset!");
static_assert(offsetof(UX6SequencerTrackBP, TrackInstanceType) == 0x0000C0, "Member 'UX6SequencerTrackBP::TrackInstanceType' has a wrong offset!");
static_assert(offsetof(UX6SequencerTrackBP, bGenerateProxyActor) == 0x0000C8, "Member 'UX6SequencerTrackBP::bGenerateProxyActor' has a wrong offset!");
static_assert(offsetof(UX6SequencerTrackBP, GenerateProxyActorClass) == 0x0000D0, "Member 'UX6SequencerTrackBP::GenerateProxyActorClass' has a wrong offset!");
static_assert(offsetof(UX6SequencerTrackBP, DefaultSectionLength) == 0x0000D8, "Member 'UX6SequencerTrackBP::DefaultSectionLength' has a wrong offset!");
static_assert(offsetof(UX6SequencerTrackBP, Sections) == 0x0000E0, "Member 'UX6SequencerTrackBP::Sections' has a wrong offset!");
static_assert(offsetof(UX6SequencerTrackBP, ProxyActorGuid) == 0x0000F0, "Member 'UX6SequencerTrackBP::ProxyActorGuid' has a wrong offset!");

// Class X6CustomizableSequencerTracks.X6SequencerNewLookAtTrackBP
// 0x0000 (0x0100 - 0x0100)
class UX6SequencerNewLookAtTrackBP final : public UX6SequencerTrackBP
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6SequencerNewLookAtTrackBP">();
	}
	static class UX6SequencerNewLookAtTrackBP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6SequencerNewLookAtTrackBP>();
	}
};
static_assert(alignof(UX6SequencerNewLookAtTrackBP) == 0x000008, "Wrong alignment on UX6SequencerNewLookAtTrackBP");
static_assert(sizeof(UX6SequencerNewLookAtTrackBP) == 0x000100, "Wrong size on UX6SequencerNewLookAtTrackBP");

// Class X6CustomizableSequencerTracks.X6SequencerParameterSectionBP
// 0x0120 (0x0260 - 0x0140)
class UX6SequencerParameterSectionBP : public UX6SequencerSectionBP
{
public:
	TArray<struct FX6ScalarParameterNameAndCurve> ScalarParameterNamesAndCurves;                     // 0x0140(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6IntegerParameterNameAndCurve> IntegerParameterNamesAndCurves;                   // 0x0150(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6BoolParameterNameAndCurve>   BoolParameterNamesAndCurves;                       // 0x0160(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6VectorParameterNameAndCurve> VectorParameterNamesAndCurves;                     // 0x0170(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6LinearColorParameterNameAndCurve> LinearColorParameterNamesAndCurves;           // 0x0180(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6TransformParameterNameAndCurve> TransformParameterNamesAndCurves;               // 0x0190(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6ByteParameterNameAndCurve>   ByteParameterNamesAndCurves;                       // 0x01A0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FX6ObjectParameterNameAndCurve> ObjectParameterNamesAndCurves;                     // 0x01B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C0[0xA0];                                     // 0x01C0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddBoolParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, bool InValue);
	void AddByteParameterKey(class FName InParameterName, class UEnum* Enum);
	void AddIntegerParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, int32 InValue);
	void AddLinearColorParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, const struct FLinearColor& InValue);
	void AddObjectParameterKey(class FName InParameterName, class UClass* Class_0);
	void AddScalarParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, double InValue);
	void AddTransformParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, const struct FTransform& InValue);
	void AddVectorParameterKey(class FName InParameterName, const struct FFrameNumber& InTime, const struct FVector& InValue);
	bool CanAddParameter(class FName Name_0);
	void GetObjectParameterContent(TArray<struct FX6ObjectParameterContent>* ObjectParameterContents);
	void K2_OnSetParameter(const struct FX6ParameterEvaluateValues& EvaluateValues, const struct FX6ParameterEvaluateValues& ChangedValues);
	void K2_OnSetParameter_WithBindingObject(const struct FX6ParameterEvaluateValues& EvaluateValues, const struct FX6ParameterEvaluateValues& ChangedValues, class UObject* Object);
	bool RemoveBoolParameter(class FName InParameterName);
	bool RemoveByteParameter(class FName InParameterName);
	bool RemoveIntegerParameter(class FName InParameterName);
	bool RemoveLinearColorParameter(class FName InParameterName);
	bool RemoveObjectParameter(class FName InParameterName);
	bool RemoveScalarParameter(class FName InParameterName);
	bool RemoveTransformParameter(class FName InParameterName);
	bool RemoveVectorParameter(class FName InParameterName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6SequencerParameterSectionBP">();
	}
	static class UX6SequencerParameterSectionBP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6SequencerParameterSectionBP>();
	}
};
static_assert(alignof(UX6SequencerParameterSectionBP) == 0x000008, "Wrong alignment on UX6SequencerParameterSectionBP");
static_assert(sizeof(UX6SequencerParameterSectionBP) == 0x000260, "Wrong size on UX6SequencerParameterSectionBP");
static_assert(offsetof(UX6SequencerParameterSectionBP, ScalarParameterNamesAndCurves) == 0x000140, "Member 'UX6SequencerParameterSectionBP::ScalarParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UX6SequencerParameterSectionBP, IntegerParameterNamesAndCurves) == 0x000150, "Member 'UX6SequencerParameterSectionBP::IntegerParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UX6SequencerParameterSectionBP, BoolParameterNamesAndCurves) == 0x000160, "Member 'UX6SequencerParameterSectionBP::BoolParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UX6SequencerParameterSectionBP, VectorParameterNamesAndCurves) == 0x000170, "Member 'UX6SequencerParameterSectionBP::VectorParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UX6SequencerParameterSectionBP, LinearColorParameterNamesAndCurves) == 0x000180, "Member 'UX6SequencerParameterSectionBP::LinearColorParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UX6SequencerParameterSectionBP, TransformParameterNamesAndCurves) == 0x000190, "Member 'UX6SequencerParameterSectionBP::TransformParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UX6SequencerParameterSectionBP, ByteParameterNamesAndCurves) == 0x0001A0, "Member 'UX6SequencerParameterSectionBP::ByteParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UX6SequencerParameterSectionBP, ObjectParameterNamesAndCurves) == 0x0001B0, "Member 'UX6SequencerParameterSectionBP::ObjectParameterNamesAndCurves' has a wrong offset!");

// Class X6CustomizableSequencerTracks.X6SequencerParameterTrackBP
// 0x0000 (0x0100 - 0x0100)
class UX6SequencerParameterTrackBP : public UX6SequencerTrackBP
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6SequencerParameterTrackBP">();
	}
	static class UX6SequencerParameterTrackBP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6SequencerParameterTrackBP>();
	}
};
static_assert(alignof(UX6SequencerParameterTrackBP) == 0x000008, "Wrong alignment on UX6SequencerParameterTrackBP");
static_assert(sizeof(UX6SequencerParameterTrackBP) == 0x000100, "Wrong size on UX6SequencerParameterTrackBP");

// Class X6CustomizableSequencerTracks.X6SequencerTrackInstanceBP
// 0x0000 (0x0050 - 0x0050)
class UX6SequencerTrackInstanceBP : public UMovieSceneTrackInstance
{
public:
	void K2_OnBeginUpdateInputs();
	void K2_OnDestroyed();
	void K2_OnEndUpdateInputs();
	void K2_OnInitialize();
	void K2_OnInputAdded(const struct FX6SequencerTrackInstanceInput& Input);
	void K2_OnInputRemoved(const struct FX6SequencerTrackInstanceInput& Input);
	void K2_OnUpdate();

	class UObject* GetAnimatedObject() const;
	struct FX6SequencerTrackInstanceInput GetInput(int32 Index_0) const;
	TArray<struct FX6SequencerTrackInstanceInput> GetInputs() const;
	int32 GetNumInputs() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6SequencerTrackInstanceBP">();
	}
	static class UX6SequencerTrackInstanceBP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6SequencerTrackInstanceBP>();
	}
};
static_assert(alignof(UX6SequencerTrackInstanceBP) == 0x000008, "Wrong alignment on UX6SequencerTrackInstanceBP");
static_assert(sizeof(UX6SequencerTrackInstanceBP) == 0x000050, "Wrong size on UX6SequencerTrackInstanceBP");

}

