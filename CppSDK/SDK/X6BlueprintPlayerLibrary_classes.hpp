#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6BlueprintPlayerLibrary

#include "Basic.hpp"

#include "EInt32PlayerPawnStateTypes_structs.hpp"
#include "Engine_classes.hpp"
#include "EAbilityGroupType_structs.hpp"
#include "EClothesMinorType_structs.hpp"
#include "EX6EnvType_structs.hpp"
#include "EPlayerGamePlayMovementMode_structs.hpp"
#include "EPlayerActionTypes_structs.hpp"
#include "EClothesPropertyType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass X6BlueprintPlayerLibrary.X6BlueprintPlayerLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UX6BlueprintPlayerLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void UpdatePlayerState(bool AddOrRemoveState, EInt32PlayerPawnStateTypes Int32UpdatedState, class AActor* Actor, class UObject* __WorldContext);
	static void UpdateLocalPlayerState(bool AddOrRemoveState, EInt32PlayerPawnStateTypes Int32UpdatedState, class UObject* __WorldContext);
	static void SwitchOverlayDataForMontage(class ACharacter* InCharacter, class UAnimMontage* InMontage, class UX6OverlayCustomModeData* InCustomOverlayData, class UObject* __WorldContext);
	static void PlayOverlayMontageWithProxy(class ACharacter* InCharacter, class UAnimMontage* InMontage, class UX6OverlayCustomModeData* InCustomOverlayData, class UAnimSequence* InBaseAnim, class UObject* __WorldContext);
	static void MakeAllClothesPropertyTypeAddedArray(class UObject* __WorldContext, TArray<EClothesPropertyType>* AllClothesPropertyTypeAddedArray);
	static void MakeAllClothesMinorAddedArray(class UObject* __WorldContext, TArray<EClothesMinorType>* AllClothesMinorAddedArray);
	static void ListenLocalPlayerState(bool AddOrRemove, class AActor* ActorNeedListen, class UObject* __WorldContext);
	static void IsX6GameNikkiVisitor(class AActor* Actor, class UObject* __WorldContext, bool* Ret);
	static void IsX6GameNikki(class AActor* Actor, bool includeVisitor, class UObject* __WorldContext, bool* IsNikki);
	static void IsX6GameDaMiaoVisitor(class AActor* Actor, class UObject* __WorldContext, bool* Ret);
	static void IsX6GameDaMiao(class AActor* Actor, bool includeVisitor, class UObject* __WorldContext, bool* IsDamiao);
	static void IsLocalPlayerControllingPawn(class AActor* Actor, class UObject* __WorldContext, bool* IsControllingPawn);
	static void GetX6GameNikkiPawn(class UObject* __WorldContext, class ACharacter** NikkiPawn);
	static void GetPlayerControllingRole(class UObject* __WorldContext, class ACharacter** ControllingRole);
	static void GetLocalPlayerPawn(class UObject* __WorldContext, class ACharacter** LocalPlayerPawn);
	static void GetLocalPlayerInputDirection(class UObject* __WorldContext, struct FVector* CurInputDirection);
	static void EnableActorRenderCustomDepth(class AActor* InActor, bool InEnable, const class FString& InTag, class UObject* __WorldContext);
	static void DoesPlayerHasState(EInt32PlayerPawnStateTypes Int32CheckedState, class AActor* Actor, class UObject* __WorldContext, bool* Has);
	static void DoesLocalPlayerHasState(EInt32PlayerPawnStateTypes Int32CheckedState, class UObject* __WorldContext, bool* Has);
	static void ConvertClothMinorArrayToStringArray(TArray<EClothesMinorType>& InClothesMinorTypeArray, class UObject* __WorldContext, TArray<class FString>* OutClothesMinorTypeStringArray);
	static void CanPlayerDoAction(EPlayerActionTypes Enum, class AActor* __WorldContextActor, class UObject* __WorldContext, bool* Can);
	static void CanLocalPlayerDoAction(EPlayerActionTypes Enum, class UObject* __WorldContext, bool* Can);
	static void BP_UpdateMiniGamePlayingState(bool bAddOrRemoveState, class UObject* __WorldContext);
	static void BP_UnequipWeapon(class AActor* Actor, bool bImmediateRequest, bool bSync, double InDelayTime, class UObject* __WorldContext);
	static void BP_SyncNPCCurrentCharacteristicsState(class AActor* npcActor, uint8 State, class UObject* __WorldContext);
	static void BP_SwitchGamePlayMovementMode(EPlayerGamePlayMovementMode NewGamePlayMovementMode, class AActor* ActorToSwitchMovement, class UObject* __WorldContext);
	static void BP_StopPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, class FName TagName, class UObject* __WorldContext);
	static void BP_SetWeaponMirrorDisabled(class AActor* Actor, bool bDisabled, const class FString& InModuleTag, class UObject* __WorldContext);
	static void BP_SetWeaponAppearanceDisabled(class AActor* Actor, bool bDisabled, bool bImmediateRequest, const class FString& InModuleTag, class UObject* __WorldContext);
	static void BP_SetNPCCurrentLocalCharacteristicsState(class AActor* npcActor, uint8 State, class UObject* __WorldContext);
	static void BP_SetNPCCurrentCharacteristicsState(class AActor* npcActor, uint8 State, class UObject* __WorldContext);
	static void BP_SetEnvironmentType(class AActor* Actor, EX6EnvType EnvType, bool bEnable, class UObject* __WorldContext);
	static void BP_SetCompCfgCameraChannel(class UPrimitiveComponent* Comp, class UObject* __WorldContext);
	static void BP_ReplayGetForceIngoreSit(class UObject* __WorldContext, bool* ShouldIngore);
	static void BP_RemoveListenPlayerStateUpdate(class AActor* ListenTargetActor, class AActor* ListenerActor, class UObject* __WorldContext);
	static void BP_PlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, class FName TagName, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused, class UObject* __WorldContext);
	static void BP_NetSyncWeapon(class AActor* Actor, class UObject* __WorldContext);
	static void BP_LocalPlayerDoAction(EPlayerActionTypes InNewAction, class UObject* __WorldContext, bool* Success);
	static void BP_IsSuitCollected(int32 SuitId, class UObject* __WorldContext, bool* Result);
	static void BP_IsLocalPlayerRiding(class UObject* __WorldContext, bool* IsRiding);
	static void BP_IsLocalPlayerCarrier(class UObject* Actor, class UObject* __WorldContext, bool* IsCarrier);
	static void BP_GetNPCCurrentCharacteristicsState(class AActor* npcActor, class UObject* __WorldContext, uint8* State);
	static void BP_GetForceRelation(class AActor*& Actor1, class AActor*& Actor2, class UObject* __WorldContext, int32* Relation);
	static void BP_ExitGamePlayMovementMode(EPlayerGamePlayMovementMode MovementModeToExit, class AActor* ActorToExitMovement, class UObject* __WorldContext);
	static void BP_EquipWeaponByAbilityType(class AActor* Actor, EAbilityGroupType AbilityType, const class FString& SlotType, bool bImmediateRequest, bool bSync, class UObject* __WorldContext);
	static void BP_DoesLocalPlayerDressingAppointedSuit(int32 SuitId, class UObject* __WorldContext, bool* Result);
	static void BP_DoesLocalPlayerDressingAppointedCloth(int32 ClothID, class UObject* __WorldContext, bool* Result);
	static void BP_DoesLocalPlayerAppointedClothesMinorIsNullHelper(const class FString& AppointedClothesMinorTypeString, class UObject* __WorldContext, bool* IsNull);
	static void BP_DoesLocalPlayerAppointedClothesMinorIsNull(EClothesMinorType AppointedClothesMinorType, class UObject* __WorldContext, bool* IsNull);
	static void BP_BossFightLeaveGlide(class AActor* Actor, class UObject* __WorldContext);
	static void BP_BossFightEnterGlide(class AActor* Actor, class UObject* __WorldContext);
	static void BP_BindingFakeEntity(int32 ConfigID, class AActor* Actor, class UObject* __WorldContext);
	static void BP_AddListenPlayerStateUpdate(class AActor* ListenTargetActor, TArray<EInt32PlayerPawnStateTypes>& ListenStates, class AActor* ListenerActor, class UObject* __WorldContext);
	static void BP_ActivateLocalPlayerMantleFeature(bool IsActivate, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"X6BlueprintPlayerLibrary_C">();
	}
	static class UX6BlueprintPlayerLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6BlueprintPlayerLibrary_C>();
	}
};
static_assert(alignof(UX6BlueprintPlayerLibrary_C) == 0x000008, "Wrong alignment on UX6BlueprintPlayerLibrary_C");
static_assert(sizeof(UX6BlueprintPlayerLibrary_C) == 0x000028, "Wrong size on UX6BlueprintPlayerLibrary_C");

}

