#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PDA_FluxSimulationState

#include "Basic.hpp"

#include "PDA_FluxSimulationState_classes.hpp"
#include "PDA_FluxSimulationState_parameters.hpp"


namespace SDK
{

// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.ApplyNiagaraData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNiagaraComponent*                NiagaraSystem                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    UseGround                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseSurface                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::ApplyNiagaraData(class UNiagaraComponent* NiagaraSystem, bool UseGround, bool UseSurface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "ApplyNiagaraData");

	Params::PDA_FluxSimulationState_C_ApplyNiagaraData Parms{};

	Parms.NiagaraSystem = NiagaraSystem;
	Parms.UseGround = UseGround;
	Parms.UseSurface = UseSurface;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.ClearExternalReferences
// (Public, BlueprintCallable, BlueprintEvent)

void UPDA_FluxSimulationState_C::ClearExternalReferences()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "ClearExternalReferences");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.CopyPropertiesToObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Destination                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Done                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::CopyPropertiesToObject(class UObject* Destination, bool* Done)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "CopyPropertiesToObject");

	Params::PDA_FluxSimulationState_C_CopyPropertiesToObject Parms{};

	Parms.Destination = Destination;

	UObject::ProcessEvent(Func, &Parms);

	if (Done != nullptr)
		*Done = Parms.Done;
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.ExecuteUbergraph_PDA_FluxSimulationState
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::ExecuteUbergraph_PDA_FluxSimulationState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "ExecuteUbergraph_PDA_FluxSimulationState");

	Params::PDA_FluxSimulationState_C_ExecuteUbergraph_PDA_FluxSimulationState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.GetExternalFiles
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UTexture*>*                List                                                   (Parm, OutParm)

void UPDA_FluxSimulationState_C::GetExternalFiles(TArray<class UTexture*>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "GetExternalFiles");

	Params::PDA_FluxSimulationState_C_GetExternalFiles Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.GetExternalReferences
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UTexture*>*                Objects                                                (Parm, OutParm)

void UPDA_FluxSimulationState_C::GetExternalReferences(TArray<class UTexture*>* Objects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "GetExternalReferences");

	Params::PDA_FluxSimulationState_C_GetExternalReferences Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Objects != nullptr)
		*Objects = std::move(Parms.Objects);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.GetLODScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  Integer                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::GetLODScale(int32* Integer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "GetLODScale");

	Params::PDA_FluxSimulationState_C_GetLODScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Integer != nullptr)
		*Integer = Parms.Integer;
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.GetPathNames
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>*                  Output_Get                                             (Parm, OutParm)

void UPDA_FluxSimulationState_C::GetPathNames(TArray<class FString>* Output_Get)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "GetPathNames");

	Params::PDA_FluxSimulationState_C_GetPathNames Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output_Get != nullptr)
		*Output_Get = std::move(Parms.Output_Get);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.GetVolumeTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   ExtraSize                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZOffsetScale                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform*                      NewParam                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::GetVolumeTransform(const struct FVector& ExtraSize, const struct FVector& Scale, double ZOffsetScale, struct FTransform* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "GetVolumeTransform");

	Params::PDA_FluxSimulationState_C_GetVolumeTransform Parms{};

	Parms.ExtraSize = std::move(ExtraSize);
	Parms.Scale = std::move(Scale);
	Parms.ZOffsetScale = ZOffsetScale;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.SetSimulationTextures
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture*                         surface                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         Ground                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::SetSimulationTextures(class UTexture* surface, class UTexture* Ground, class UTexture* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "SetSimulationTextures");

	Params::PDA_FluxSimulationState_C_SetSimulationTextures Parms{};

	Parms.surface = surface;
	Parms.Ground = Ground;
	Parms.Velocity = Velocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.SetSimulationWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Frame                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FIntPoint&                 Resolution_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FBS_FluxRectBlend&         Blend                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DepthOffset                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::SetSimulationWorld(const struct FVector& Location, const struct FVector& Size, int32 Frame, const struct FIntPoint& Resolution_0, const struct FBS_FluxRectBlend& Blend, double DepthOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "SetSimulationWorld");

	Params::PDA_FluxSimulationState_C_SetSimulationWorld Parms{};

	Parms.Location = std::move(Location);
	Parms.Size = std::move(Size);
	Parms.Frame = Frame;
	Parms.Resolution_0 = std::move(Resolution_0);
	Parms.Blend = std::move(Blend);
	Parms.DepthOffset = DepthOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.SetStateConfing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    StaticFrame                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  VelocityNormalization                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HeightNormalization                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LevelOfDetail_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Compression_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::SetStateConfing(bool StaticFrame, double VelocityNormalization, double HeightNormalization, int32 LevelOfDetail_0, bool Compression_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "SetStateConfing");

	Params::PDA_FluxSimulationState_C_SetStateConfing Parms{};

	Parms.StaticFrame = StaticFrame;
	Parms.VelocityNormalization = VelocityNormalization;
	Parms.HeightNormalization = HeightNormalization;
	Parms.LevelOfDetail_0 = LevelOfDetail_0;
	Parms.Compression_0 = Compression_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.ApplyMaterialData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TArray<class UMaterialInstanceDynamic*>&MaterialInstances                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UPDA_FluxSimulationState_C::ApplyMaterialData(TArray<class UMaterialInstanceDynamic*>& MaterialInstances) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "ApplyMaterialData");

	Params::PDA_FluxSimulationState_C_ApplyMaterialData Parms{};

	Parms.MaterialInstances = std::move(MaterialInstances);

	UObject::ProcessEvent(Func, &Parms);

	MaterialInstances = std::move(Parms.MaterialInstances);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.GetAreaBlendBorders
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector4                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector4 UPDA_FluxSimulationState_C::GetAreaBlendBorders() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "GetAreaBlendBorders");

	Params::PDA_FluxSimulationState_C_GetAreaBlendBorders Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.GetDecodeVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector*                         LinearColor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::GetDecodeVector(struct FVector* LinearColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "GetDecodeVector");

	Params::PDA_FluxSimulationState_C_GetDecodeVector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LinearColor != nullptr)
		*LinearColor = std::move(Parms.LinearColor);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.GetEncodeVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FLinearColor*                    LinearColor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::GetEncodeVector(struct FLinearColor* LinearColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "GetEncodeVector");

	Params::PDA_FluxSimulationState_C_GetEncodeVector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LinearColor != nullptr)
		*LinearColor = std::move(Parms.LinearColor);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.GetPixelSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FLinearColor*                    WorldToSimulationUV                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::GetPixelSize(struct FLinearColor* WorldToSimulationUV) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "GetPixelSize");

	Params::PDA_FluxSimulationState_C_GetPixelSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WorldToSimulationUV != nullptr)
		*WorldToSimulationUV = std::move(Parms.WorldToSimulationUV);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.GetTextureSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FIntPoint*                       Resolution_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::GetTextureSize(struct FIntPoint* Resolution_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "GetTextureSize");

	Params::PDA_FluxSimulationState_C_GetTextureSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Resolution_0 != nullptr)
		*Resolution_0 = std::move(Parms.Resolution_0);
}


// Function PDA_FluxSimulationState.PDA_FluxSimulationState_C.GetWorldToTextureUV
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FLinearColor*                    WorldToTextureUV                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPDA_FluxSimulationState_C::GetWorldToTextureUV(struct FLinearColor* WorldToTextureUV) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PDA_FluxSimulationState_C", "GetWorldToTextureUV");

	Params::PDA_FluxSimulationState_C_GetWorldToTextureUV Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WorldToTextureUV != nullptr)
		*WorldToTextureUV = std::move(Parms.WorldToTextureUV);
}

}

