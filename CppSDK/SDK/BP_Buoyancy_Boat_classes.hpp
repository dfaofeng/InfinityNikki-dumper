#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Buoyancy_Boat

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Buoyancy_Boat.BP_Buoyancy_Boat_C
// 0x00E8 (0x0490 - 0x03A8)
class ABP_Buoyancy_Boat_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box1;                                              // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BuoyancyBoatComponent_C*            BP_BuoyancyBoatComponent;                          // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        PushForceFactor;                                   // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NikkiStandForce;                                   // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitPosition;                                      // 0x03F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InitRotation;                                      // 0x0408(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        BaseDensity;                                       // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HighPlatform;                                      // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitTransform;                                     // 0x0430(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BP_OnTeleportEffectFinish();
	void BP_OnTeleportEffectStart();
	void ExecuteUbergraph_BP_Buoyancy_Boat(int32 EntryPoint);
	void NikkiEnter(class AActor* Nikki, class UNikkiMovementComponent** NikkiMoveCom);
	void NikkiOut(class AActor* Nikki, class UNikkiMovementComponent** NikkiMoveCom);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SetHigPlatformValue();
	void SetPhy(bool PhySwitch);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Buoyancy_Boat_C">();
	}
	static class ABP_Buoyancy_Boat_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Buoyancy_Boat_C>();
	}
};
static_assert(alignof(ABP_Buoyancy_Boat_C) == 0x000010, "Wrong alignment on ABP_Buoyancy_Boat_C");
static_assert(sizeof(ABP_Buoyancy_Boat_C) == 0x000490, "Wrong size on ABP_Buoyancy_Boat_C");
static_assert(offsetof(ABP_Buoyancy_Boat_C, UberGraphFrame) == 0x0003A8, "Member 'ABP_Buoyancy_Boat_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, Box) == 0x0003B0, "Member 'ABP_Buoyancy_Boat_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, Box1) == 0x0003B8, "Member 'ABP_Buoyancy_Boat_C::Box1' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, BP_BuoyancyBoatComponent) == 0x0003C0, "Member 'ABP_Buoyancy_Boat_C::BP_BuoyancyBoatComponent' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, PhysicsConstraint) == 0x0003C8, "Member 'ABP_Buoyancy_Boat_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, StaticMesh) == 0x0003D0, "Member 'ABP_Buoyancy_Boat_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, DefaultSceneRoot) == 0x0003D8, "Member 'ABP_Buoyancy_Boat_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, PushForceFactor) == 0x0003E0, "Member 'ABP_Buoyancy_Boat_C::PushForceFactor' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, NikkiStandForce) == 0x0003E8, "Member 'ABP_Buoyancy_Boat_C::NikkiStandForce' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, InitPosition) == 0x0003F0, "Member 'ABP_Buoyancy_Boat_C::InitPosition' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, InitRotation) == 0x000408, "Member 'ABP_Buoyancy_Boat_C::InitRotation' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, BaseDensity) == 0x000420, "Member 'ABP_Buoyancy_Boat_C::BaseDensity' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, HighPlatform) == 0x000428, "Member 'ABP_Buoyancy_Boat_C::HighPlatform' has a wrong offset!");
static_assert(offsetof(ABP_Buoyancy_Boat_C, InitTransform) == 0x000430, "Member 'ABP_Buoyancy_Boat_C::InitTransform' has a wrong offset!");

}

