#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: World_TimeofDay

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass World_TimeofDay.World_TimeofDay_C
// 0x0090 (0x0440 - 0x03B0)
class AWorld_TimeofDay_C final : public ALevelScriptActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Rain;                                              // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rain_0;                                            // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BA[0x2];                                      // 0x03BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RealTimeCaptureValue;                              // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      PintFogColor;                                      // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      InscatterColor;                                    // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           VC;                                                // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_DyEnvWeathers_C*                    BP_DynamicWeathers_2_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x03D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_DyEnvSys_C*                         TODSystem1_2_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x03E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AExponentialHeightFog*                  TOD_ExponentialHeightFog_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x03E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                EUB_EditorUpdate_C_1_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x03F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADynamicWeatherVolume*                  DynamicWeatherVolume_1_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x03F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_CLFS_Mgr_C*                         BP_CLFS_Mgr_2_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x0400(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADynamicWeatherVolume*                  DynamicWeatherVolume_9_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x0408(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADynamicWeatherVolume*                  WeatherTo_1_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x0410(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADynamicWeatherVolume*                  WeatherTo_3_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x0418(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_LevelConfigMgr_C*                   BP_LevelConfigMgr_C_1_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x0420(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      TOD_LightSource_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x0428(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASkyLight*                              TOD_SkyLight_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x0430(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_LevelConfigActor_C*                 BP_LevelConfigActor_C_1_ExecuteUbergraph_World_TimeofDay_RefProperty; // 0x0438(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void BBB();
	void CustomLevelEvent();
	void ExecuteUbergraph_World_TimeofDay(int32 EntryPoint);
	void Exp();
	void ForceUpdateFarShadow();
	void ForceUpdateFog();
	void ForceUpdateLevelConfigMgr();
	void ForceUpdateSkyLit();
	void MobileCubeOverride();
	void OnLoaded_153BC3174A665DD2EDCA02973E2A153A(class UObject* Loaded);
	void OnLoaded_556B8BD044371CBE530395858E5DEEF6(class UObject* Loaded);
	void OnLoaded_A05238DB4B20CC692EFCBC816E6E854A(class UObject* Loaded);
	void OnLoaded_AC3D764F40D6E6BA6E0F169EBB0EC301(class UObject* Loaded);
	void RAINBOW();
	void Raining();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RedrawRT();
	void RerunSkyConstruction();
	void SetShadowBiasOverrideState();
	void TJW();
	void TOD();
	void todcaptureframe();
	void wp(class FName WeatherName);
	void XinYuanShuLinOutbreak(bool Outbreak);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"World_TimeofDay_C">();
	}
	static class AWorld_TimeofDay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWorld_TimeofDay_C>();
	}
};
static_assert(alignof(AWorld_TimeofDay_C) == 0x000008, "Wrong alignment on AWorld_TimeofDay_C");
static_assert(sizeof(AWorld_TimeofDay_C) == 0x000440, "Wrong size on AWorld_TimeofDay_C");
static_assert(offsetof(AWorld_TimeofDay_C, UberGraphFrame) == 0x0003B0, "Member 'AWorld_TimeofDay_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, Rain) == 0x0003B8, "Member 'AWorld_TimeofDay_C::Rain' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, Rain_0) == 0x0003B9, "Member 'AWorld_TimeofDay_C::Rain_0' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, RealTimeCaptureValue) == 0x0003BC, "Member 'AWorld_TimeofDay_C::RealTimeCaptureValue' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, PintFogColor) == 0x0003C0, "Member 'AWorld_TimeofDay_C::PintFogColor' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, InscatterColor) == 0x0003C8, "Member 'AWorld_TimeofDay_C::InscatterColor' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, VC) == 0x0003D0, "Member 'AWorld_TimeofDay_C::VC' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, BP_DynamicWeathers_2_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x0003D8, "Member 'AWorld_TimeofDay_C::BP_DynamicWeathers_2_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, TODSystem1_2_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x0003E0, "Member 'AWorld_TimeofDay_C::TODSystem1_2_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, TOD_ExponentialHeightFog_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x0003E8, "Member 'AWorld_TimeofDay_C::TOD_ExponentialHeightFog_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, EUB_EditorUpdate_C_1_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x0003F0, "Member 'AWorld_TimeofDay_C::EUB_EditorUpdate_C_1_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, DynamicWeatherVolume_1_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x0003F8, "Member 'AWorld_TimeofDay_C::DynamicWeatherVolume_1_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, BP_CLFS_Mgr_2_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x000400, "Member 'AWorld_TimeofDay_C::BP_CLFS_Mgr_2_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, DynamicWeatherVolume_9_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x000408, "Member 'AWorld_TimeofDay_C::DynamicWeatherVolume_9_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, WeatherTo_1_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x000410, "Member 'AWorld_TimeofDay_C::WeatherTo_1_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, WeatherTo_3_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x000418, "Member 'AWorld_TimeofDay_C::WeatherTo_3_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, BP_LevelConfigMgr_C_1_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x000420, "Member 'AWorld_TimeofDay_C::BP_LevelConfigMgr_C_1_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, TOD_LightSource_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x000428, "Member 'AWorld_TimeofDay_C::TOD_LightSource_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, TOD_SkyLight_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x000430, "Member 'AWorld_TimeofDay_C::TOD_SkyLight_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");
static_assert(offsetof(AWorld_TimeofDay_C, BP_LevelConfigActor_C_1_ExecuteUbergraph_World_TimeofDay_RefProperty) == 0x000438, "Member 'AWorld_TimeofDay_C::BP_LevelConfigActor_C_1_ExecuteUbergraph_World_TimeofDay_RefProperty' has a wrong offset!");

}

