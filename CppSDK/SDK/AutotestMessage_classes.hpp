#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AutotestMessage

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class AutotestMessage.XYReplayState
// 0x0000 (0x0028 - 0x0028)
class UXYReplayState final : public UObject
{
public:
	static class FString GetCurGameTimeHour();
	static float GetDemoCurrentTime();
	static class FString GetLoginPlayerName();
	static class FString GetLoginServerName();
	static bool GetRecordState();
	static int32 GetReplayFrame();
	static bool GetRunningState();
	static class FString GetTotalSecond();
	static class FString GetXYReplayName();
	static bool IsSuspend();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"XYReplayState">();
	}
	static class UXYReplayState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UXYReplayState>();
	}
};
static_assert(alignof(UXYReplayState) == 0x000008, "Wrong alignment on UXYReplayState");
static_assert(sizeof(UXYReplayState) == 0x000028, "Wrong size on UXYReplayState");

// Class AutotestMessage.AutotestMessageManager
// 0x00B0 (0x00D8 - 0x0028)
class UAutotestMessageManager final : public UObject
{
public:
	class FString                                 OutShowName;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             MessagetFuncListener;                              // 0x0038(0x0001)(InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             ReplayProgressListener;                            // 0x0039(0x0001)(InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             ReplayErrorListener;                               // 0x003A(0x0001)(InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             MobileJumpClickEvent;                              // 0x003C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             MobileFallClickEvent;                              // 0x004C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             MobileSkillClickEvent;                             // 0x005C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             MobileSuitSkillClickEvent;                         // 0x006C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             MobileRunClickEvent;                               // 0x007C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4C];                                      // 0x008C(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAutotestMessageManager* Get();
	static void SendSynchronous(const class FString& OutData, const class FString& EventName);
	static void TrigerEvent(const class FString& Event, const class FString& Args);

	void FallClickFunc();
	void JumpClickFunc();
	void RunClickFunc();
	void SkillClickFunc();
	void SuiClickFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutotestMessageManager">();
	}
	static class UAutotestMessageManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutotestMessageManager>();
	}
};
static_assert(alignof(UAutotestMessageManager) == 0x000008, "Wrong alignment on UAutotestMessageManager");
static_assert(sizeof(UAutotestMessageManager) == 0x0000D8, "Wrong size on UAutotestMessageManager");
static_assert(offsetof(UAutotestMessageManager, OutShowName) == 0x000028, "Member 'UAutotestMessageManager::OutShowName' has a wrong offset!");
static_assert(offsetof(UAutotestMessageManager, MessagetFuncListener) == 0x000038, "Member 'UAutotestMessageManager::MessagetFuncListener' has a wrong offset!");
static_assert(offsetof(UAutotestMessageManager, ReplayProgressListener) == 0x000039, "Member 'UAutotestMessageManager::ReplayProgressListener' has a wrong offset!");
static_assert(offsetof(UAutotestMessageManager, ReplayErrorListener) == 0x00003A, "Member 'UAutotestMessageManager::ReplayErrorListener' has a wrong offset!");
static_assert(offsetof(UAutotestMessageManager, MobileJumpClickEvent) == 0x00003C, "Member 'UAutotestMessageManager::MobileJumpClickEvent' has a wrong offset!");
static_assert(offsetof(UAutotestMessageManager, MobileFallClickEvent) == 0x00004C, "Member 'UAutotestMessageManager::MobileFallClickEvent' has a wrong offset!");
static_assert(offsetof(UAutotestMessageManager, MobileSkillClickEvent) == 0x00005C, "Member 'UAutotestMessageManager::MobileSkillClickEvent' has a wrong offset!");
static_assert(offsetof(UAutotestMessageManager, MobileSuitSkillClickEvent) == 0x00006C, "Member 'UAutotestMessageManager::MobileSuitSkillClickEvent' has a wrong offset!");
static_assert(offsetof(UAutotestMessageManager, MobileRunClickEvent) == 0x00007C, "Member 'UAutotestMessageManager::MobileRunClickEvent' has a wrong offset!");

}

