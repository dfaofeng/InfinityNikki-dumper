#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PSDKUeCrossOperations

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct PSDKUeCrossOperations.WatermarkServerRequest
// 0x0048 (0x0048 - 0x0000)
struct FWatermarkServerRequest final
{
public:
	int32                                         client_id;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         app_id;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 wm_info_origin;                                    // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Scale;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Opacity;                                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 client_version;                                    // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VRoleID;                                           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWatermarkServerRequest) == 0x000008, "Wrong alignment on FWatermarkServerRequest");
static_assert(sizeof(FWatermarkServerRequest) == 0x000048, "Wrong size on FWatermarkServerRequest");
static_assert(offsetof(FWatermarkServerRequest, client_id) == 0x000000, "Member 'FWatermarkServerRequest::client_id' has a wrong offset!");
static_assert(offsetof(FWatermarkServerRequest, app_id) == 0x000004, "Member 'FWatermarkServerRequest::app_id' has a wrong offset!");
static_assert(offsetof(FWatermarkServerRequest, wm_info_origin) == 0x000008, "Member 'FWatermarkServerRequest::wm_info_origin' has a wrong offset!");
static_assert(offsetof(FWatermarkServerRequest, Width) == 0x000018, "Member 'FWatermarkServerRequest::Width' has a wrong offset!");
static_assert(offsetof(FWatermarkServerRequest, Height) == 0x00001C, "Member 'FWatermarkServerRequest::Height' has a wrong offset!");
static_assert(offsetof(FWatermarkServerRequest, Scale) == 0x000020, "Member 'FWatermarkServerRequest::Scale' has a wrong offset!");
static_assert(offsetof(FWatermarkServerRequest, Opacity) == 0x000024, "Member 'FWatermarkServerRequest::Opacity' has a wrong offset!");
static_assert(offsetof(FWatermarkServerRequest, client_version) == 0x000028, "Member 'FWatermarkServerRequest::client_version' has a wrong offset!");
static_assert(offsetof(FWatermarkServerRequest, VRoleID) == 0x000038, "Member 'FWatermarkServerRequest::VRoleID' has a wrong offset!");

// ScriptStruct PSDKUeCrossOperations.WatermarkImageInfo
// 0x0058 (0x0058 - 0x0000)
struct FWatermarkImageInfo final
{
public:
	int32                                         wm_info_uint;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 image_id;                                          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 image_url;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 image_md5;                                         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 wm_info_origin;                                    // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Scale;                                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Opacity;                                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWatermarkImageInfo) == 0x000008, "Wrong alignment on FWatermarkImageInfo");
static_assert(sizeof(FWatermarkImageInfo) == 0x000058, "Wrong size on FWatermarkImageInfo");
static_assert(offsetof(FWatermarkImageInfo, wm_info_uint) == 0x000000, "Member 'FWatermarkImageInfo::wm_info_uint' has a wrong offset!");
static_assert(offsetof(FWatermarkImageInfo, image_id) == 0x000008, "Member 'FWatermarkImageInfo::image_id' has a wrong offset!");
static_assert(offsetof(FWatermarkImageInfo, image_url) == 0x000018, "Member 'FWatermarkImageInfo::image_url' has a wrong offset!");
static_assert(offsetof(FWatermarkImageInfo, image_md5) == 0x000028, "Member 'FWatermarkImageInfo::image_md5' has a wrong offset!");
static_assert(offsetof(FWatermarkImageInfo, wm_info_origin) == 0x000038, "Member 'FWatermarkImageInfo::wm_info_origin' has a wrong offset!");
static_assert(offsetof(FWatermarkImageInfo, Width) == 0x000048, "Member 'FWatermarkImageInfo::Width' has a wrong offset!");
static_assert(offsetof(FWatermarkImageInfo, Height) == 0x00004C, "Member 'FWatermarkImageInfo::Height' has a wrong offset!");
static_assert(offsetof(FWatermarkImageInfo, Scale) == 0x000050, "Member 'FWatermarkImageInfo::Scale' has a wrong offset!");
static_assert(offsetof(FWatermarkImageInfo, Opacity) == 0x000054, "Member 'FWatermarkImageInfo::Opacity' has a wrong offset!");

// ScriptStruct PSDKUeCrossOperations.WatermarkServerResponse
// 0x0080 (0x0080 - 0x0000)
struct FWatermarkServerResponse final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Info;                                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 request_id;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWatermarkImageInfo                    Data;                                              // 0x0028(0x0058)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FWatermarkServerResponse) == 0x000008, "Wrong alignment on FWatermarkServerResponse");
static_assert(sizeof(FWatermarkServerResponse) == 0x000080, "Wrong size on FWatermarkServerResponse");
static_assert(offsetof(FWatermarkServerResponse, Code) == 0x000000, "Member 'FWatermarkServerResponse::Code' has a wrong offset!");
static_assert(offsetof(FWatermarkServerResponse, Info) == 0x000008, "Member 'FWatermarkServerResponse::Info' has a wrong offset!");
static_assert(offsetof(FWatermarkServerResponse, request_id) == 0x000018, "Member 'FWatermarkServerResponse::request_id' has a wrong offset!");
static_assert(offsetof(FWatermarkServerResponse, Data) == 0x000028, "Member 'FWatermarkServerResponse::Data' has a wrong offset!");

}

