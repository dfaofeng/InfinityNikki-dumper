#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerAnimStatesComponent

#include "Basic.hpp"

#include "EPawnAnimStateTypes_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.ExecuteUbergraph_BP_PlayerAnimStatesComponent
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_ExecuteUbergraph_BP_PlayerAnimStatesComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_ExecuteUbergraph_BP_PlayerAnimStatesComponent) == 0x000004, "Wrong alignment on BP_PlayerAnimStatesComponent_C_ExecuteUbergraph_BP_PlayerAnimStatesComponent");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_ExecuteUbergraph_BP_PlayerAnimStatesComponent) == 0x000004, "Wrong size on BP_PlayerAnimStatesComponent_C_ExecuteUbergraph_BP_PlayerAnimStatesComponent");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_ExecuteUbergraph_BP_PlayerAnimStatesComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_ExecuteUbergraph_BP_PlayerAnimStatesComponent::EntryPoint' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BPI_Get_CurrentAbilityStates
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates final
{
public:
	bool                                          IsLogicInStatePlayingSkill;                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLogicInPlayingAbilityAnimState;                  // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentAbilityAnimTimeRemaining;                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAbilityPlayRate;                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAbilityAnimTime;                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates) == 0x000008, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates) == 0x000020, "Wrong size on BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates, IsLogicInStatePlayingSkill) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates::IsLogicInStatePlayingSkill' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates, IsLogicInPlayingAbilityAnimState) == 0x000001, "Member 'BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates::IsLogicInPlayingAbilityAnimState' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates, CurrentAbilityAnimTimeRemaining) == 0x000008, "Member 'BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates::CurrentAbilityAnimTimeRemaining' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates, CurrentAbilityPlayRate) == 0x000010, "Member 'BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates::CurrentAbilityPlayRate' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates, CurrentAbilityAnimTime) == 0x000018, "Member 'BP_PlayerAnimStatesComponent_C_BPI_Get_CurrentAbilityStates::CurrentAbilityAnimTime' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_SetUseFacialAnimFromSpecialFullBody
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_SetUseFacialAnimFromSpecialFullBody final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_SetUseFacialAnimFromSpecialFullBody) == 0x000008, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_SetUseFacialAnimFromSpecialFullBody");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_SetUseFacialAnimFromSpecialFullBody) == 0x000018, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_SetUseFacialAnimFromSpecialFullBody");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_SetUseFacialAnimFromSpecialFullBody, bUse) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_SetUseFacialAnimFromSpecialFullBody::bUse' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_SetUseFacialAnimFromSpecialFullBody, Reason) == 0x000008, "Member 'BP_PlayerAnimStatesComponent_C_BP_SetUseFacialAnimFromSpecialFullBody::Reason' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_SetStylizedMirror
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_SetStylizedMirror final
{
public:
	bool                                          bMirror;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_SetStylizedMirror) == 0x000001, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_SetStylizedMirror");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_SetStylizedMirror) == 0x000001, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_SetStylizedMirror");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_SetStylizedMirror, bMirror) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_SetStylizedMirror::bMirror' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_SetPawnAnimState
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_SetPawnAnimState final
{
public:
	EPawnAnimStateTypes                           NewPawnAnimState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_SetPawnAnimState) == 0x000001, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_SetPawnAnimState");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_SetPawnAnimState) == 0x000001, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_SetPawnAnimState");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_SetPawnAnimState, NewPawnAnimState) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_SetPawnAnimState::NewPawnAnimState' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_SetFocusConfig
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_SetFocusConfig final
{
public:
	class ULookAtConfigTemplate*                  InFocusConfig;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_SetFocusConfig) == 0x000008, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_SetFocusConfig");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_SetFocusConfig) == 0x000008, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_SetFocusConfig");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_SetFocusConfig, InFocusConfig) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_SetFocusConfig::InFocusConfig' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_SetEnableEmotionPerformance
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_SetEnableEmotionPerformance final
{
public:
	bool                                          bEnableEmotionPerformance;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_SetEnableEmotionPerformance) == 0x000001, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_SetEnableEmotionPerformance");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_SetEnableEmotionPerformance) == 0x000001, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_SetEnableEmotionPerformance");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_SetEnableEmotionPerformance, bEnableEmotionPerformance) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_SetEnableEmotionPerformance::bEnableEmotionPerformance' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_SetCanInterruptPendingStopState
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState final
{
public:
	bool                                          bCanInterrupt;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ILocomotionRequestInterface> K2Node_DynamicCast_AsLocomotion_Request_Interface; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState) == 0x000008, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState) == 0x000020, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState, bCanInterrupt) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState::bCanInterrupt' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState, K2Node_DynamicCast_AsLocomotion_Request_Interface) == 0x000008, "Member 'BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState::K2Node_DynamicCast_AsLocomotion_Request_Interface' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_PlayerAnimStatesComponent_C_BP_SetCanInterruptPendingStopState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_RemoveIdleBreakAnim
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_RemoveIdleBreakAnim final
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_RemoveIdleBreakAnim) == 0x000008, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_RemoveIdleBreakAnim");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_RemoveIdleBreakAnim) == 0x000010, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_RemoveIdleBreakAnim");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_RemoveIdleBreakAnim, AnimSequence) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_RemoveIdleBreakAnim::AnimSequence' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_RemoveIdleBreakAnim, CallFunc_Array_RemoveItem_ReturnValue) == 0x000008, "Member 'BP_PlayerAnimStatesComponent_C_BP_RemoveIdleBreakAnim::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_OverrideCanOwnerDoLookAt
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_OverrideCanOwnerDoLookAt final
{
public:
	bool                                          bCanDoLookAt;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_OverrideCanOwnerDoLookAt) == 0x000001, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_OverrideCanOwnerDoLookAt");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_OverrideCanOwnerDoLookAt) == 0x000001, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_OverrideCanOwnerDoLookAt");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_OverrideCanOwnerDoLookAt, bCanDoLookAt) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_OverrideCanOwnerDoLookAt::bCanDoLookAt' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_IsSkipStopStage
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_IsSkipStopStage final
{
public:
	bool                                          SkipStopStage;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocalVar;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_IsSkipStopStage) == 0x000001, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_IsSkipStopStage");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_IsSkipStopStage) == 0x000002, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_IsSkipStopStage");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_IsSkipStopStage, SkipStopStage) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_IsSkipStopStage::SkipStopStage' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_IsSkipStopStage, LocalVar) == 0x000001, "Member 'BP_PlayerAnimStatesComponent_C_BP_IsSkipStopStage::LocalVar' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_IsForceStopStage
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_IsForceStopStage final
{
public:
	bool                                          ForceStopFlag;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_IsForceStopStage) == 0x000001, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_IsForceStopStage");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_IsForceStopStage) == 0x000002, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_IsForceStopStage");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_IsForceStopStage, ForceStopFlag) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_IsForceStopStage::ForceStopFlag' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_IsForceStopStage, Temp) == 0x000001, "Member 'BP_PlayerAnimStatesComponent_C_BP_IsForceStopStage::Temp' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_GetEnableEmotionPerformance
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_GetEnableEmotionPerformance final
{
public:
	bool                                          EnableEmotionPerformance;                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_GetEnableEmotionPerformance) == 0x000001, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_GetEnableEmotionPerformance");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_GetEnableEmotionPerformance) == 0x000001, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_GetEnableEmotionPerformance");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_GetEnableEmotionPerformance, EnableEmotionPerformance) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_GetEnableEmotionPerformance::EnableEmotionPerformance' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_GetDefaultClothesList
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_GetDefaultClothesList final
{
public:
	TArray<int32>                                 DefaultClothesList;                                // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_GetDefaultClothesList) == 0x000008, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_GetDefaultClothesList");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_GetDefaultClothesList) == 0x000010, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_GetDefaultClothesList");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_GetDefaultClothesList, DefaultClothesList) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_GetDefaultClothesList::DefaultClothesList' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_GetCurrentDressID
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_GetCurrentDressID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_GetCurrentDressID) == 0x000004, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_GetCurrentDressID");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_GetCurrentDressID) == 0x000004, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_GetCurrentDressID");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_GetCurrentDressID, ID) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_GetCurrentDressID::ID' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_GetCurrentClothesID
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_GetCurrentClothesID final
{
public:
	TArray<int32>                                 ClothesIDArray;                                    // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_GetCurrentClothesID) == 0x000008, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_GetCurrentClothesID");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_GetCurrentClothesID) == 0x000010, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_GetCurrentClothesID");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_GetCurrentClothesID, ClothesIDArray) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_GetCurrentClothesID::ClothesIDArray' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.BP_AddIdleBreakAnim
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim final
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_32ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim) == 0x000008, "Wrong alignment on BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim) == 0x000018, "Wrong size on BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim, AnimSequence) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim::AnimSequence' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim, CallFunc_Array_AddUnique_ReturnValue) == 0x00000C, "Member 'BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim, CallFunc_NotEqual_32ByteByte_ReturnValue) == 0x000010, "Member 'BP_PlayerAnimStatesComponent_C_BP_AddIdleBreakAnim::CallFunc_NotEqual_32ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerAnimStatesComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerAnimStatesComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_PlayerAnimStatesComponent_C_GetModuleName");
static_assert(sizeof(BP_PlayerAnimStatesComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_PlayerAnimStatesComponent_C_GetModuleName");
static_assert(offsetof(BP_PlayerAnimStatesComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_PlayerAnimStatesComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

