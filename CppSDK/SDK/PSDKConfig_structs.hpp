#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PSDKConfig

#include "Basic.hpp"

#include "PSDKBasic_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum PSDKConfig.EPaperSDKGameArea
// NumValues: 0x0008
enum class EPaperSDKGameArea : uint8
{
	Cn                                       = 0,
	OverseasTw                               = 1,
	OverseasJp                               = 2,
	OverseasKr                               = 3,
	OverseasEn                               = 4,
	OverseasVn                               = 5,
	OverseasAll                              = 6,
	EPaperSDKGameArea_MAX                    = 7,
};

// Enum PSDKConfig.ESandboxEnv
// NumValues: 0x0004
enum class ESandboxEnv : uint8
{
	Development                              = 0,
	Test                                     = 1,
	Production                               = 2,
	ESandboxEnv_MAX                          = 3,
};

// Enum PSDKConfig.EPSDKLanguageType
// NumValues: 0x000F
enum class EPSDKLanguageType : uint8
{
	System                                   = 0,
	English                                  = 1,
	Chinese                                  = 2,
	ChineseTraditional                       = 3,
	Korean                                   = 4,
	Japanese                                 = 5,
	Vietnamese                               = 6,
	Deutsch                                  = 7,
	French                                   = 8,
	Thai                                     = 9,
	Espanol                                  = 10,
	PtBr                                     = 11,
	Italian                                  = 12,
	Indonesian                               = 13,
	EPSDKLanguageType_MAX                    = 14,
};

// ScriptStruct PSDKConfig.ChannelGamepadConfig
// 0x0018 (0x0018 - 0x0000)
struct FChannelGamepadConfig final
{
public:
	int32                                         PlatID;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGamepad;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToAllSubChannels;                            // 0x0005(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         EnabledSubChannels;                                // 0x0008(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChannelGamepadConfig) == 0x000008, "Wrong alignment on FChannelGamepadConfig");
static_assert(sizeof(FChannelGamepadConfig) == 0x000018, "Wrong size on FChannelGamepadConfig");
static_assert(offsetof(FChannelGamepadConfig, PlatID) == 0x000000, "Member 'FChannelGamepadConfig::PlatID' has a wrong offset!");
static_assert(offsetof(FChannelGamepadConfig, bEnableGamepad) == 0x000004, "Member 'FChannelGamepadConfig::bEnableGamepad' has a wrong offset!");
static_assert(offsetof(FChannelGamepadConfig, bApplyToAllSubChannels) == 0x000005, "Member 'FChannelGamepadConfig::bApplyToAllSubChannels' has a wrong offset!");
static_assert(offsetof(FChannelGamepadConfig, EnabledSubChannels) == 0x000008, "Member 'FChannelGamepadConfig::EnabledSubChannels' has a wrong offset!");

// ScriptStruct PSDKConfig.PSAreaInfoModel
// 0x0060 (0x0060 - 0x0000)
struct FPSAreaInfoModel final
{
public:
	class FString                                 Continent_Code;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Continent_Name;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country_Iso_Code;                                  // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country_Name;                                      // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Province_Code;                                     // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Province_Name;                                     // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSAreaInfoModel) == 0x000008, "Wrong alignment on FPSAreaInfoModel");
static_assert(sizeof(FPSAreaInfoModel) == 0x000060, "Wrong size on FPSAreaInfoModel");
static_assert(offsetof(FPSAreaInfoModel, Continent_Code) == 0x000000, "Member 'FPSAreaInfoModel::Continent_Code' has a wrong offset!");
static_assert(offsetof(FPSAreaInfoModel, Continent_Name) == 0x000010, "Member 'FPSAreaInfoModel::Continent_Name' has a wrong offset!");
static_assert(offsetof(FPSAreaInfoModel, Country_Iso_Code) == 0x000020, "Member 'FPSAreaInfoModel::Country_Iso_Code' has a wrong offset!");
static_assert(offsetof(FPSAreaInfoModel, Country_Name) == 0x000030, "Member 'FPSAreaInfoModel::Country_Name' has a wrong offset!");
static_assert(offsetof(FPSAreaInfoModel, Province_Code) == 0x000040, "Member 'FPSAreaInfoModel::Province_Code' has a wrong offset!");
static_assert(offsetof(FPSAreaInfoModel, Province_Name) == 0x000050, "Member 'FPSAreaInfoModel::Province_Name' has a wrong offset!");

// ScriptStruct PSDKConfig.PSLocationInfoModel
// 0x0060 (0x0060 - 0x0000)
struct FPSLocationInfoModel final
{
public:
	struct FPSAreaInfoModel                       Location;                                          // 0x0000(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSLocationInfoModel) == 0x000008, "Wrong alignment on FPSLocationInfoModel");
static_assert(sizeof(FPSLocationInfoModel) == 0x000060, "Wrong size on FPSLocationInfoModel");
static_assert(offsetof(FPSLocationInfoModel, Location) == 0x000000, "Member 'FPSLocationInfoModel::Location' has a wrong offset!");

// ScriptStruct PSDKConfig.PSIpLocateModel
// 0x0060 (0x0098 - 0x0038)
struct FPSIpLocateModel final : public FPSBffBasicModel
{
public:
	struct FPSLocationInfoModel                   Data;                                              // 0x0038(0x0060)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSIpLocateModel) == 0x000008, "Wrong alignment on FPSIpLocateModel");
static_assert(sizeof(FPSIpLocateModel) == 0x000098, "Wrong size on FPSIpLocateModel");
static_assert(offsetof(FPSIpLocateModel, Data) == 0x000038, "Member 'FPSIpLocateModel::Data' has a wrong offset!");

// ScriptStruct PSDKConfig.PSLoginLimitAge
// 0x0004 (0x0004 - 0x0000)
struct FPSLoginLimitAge final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSLoginLimitAge) == 0x000004, "Wrong alignment on FPSLoginLimitAge");
static_assert(sizeof(FPSLoginLimitAge) == 0x000004, "Wrong size on FPSLoginLimitAge");
static_assert(offsetof(FPSLoginLimitAge, Min) == 0x000000, "Member 'FPSLoginLimitAge::Min' has a wrong offset!");

// ScriptStruct PSDKConfig.PSSubclass
// 0x0038 (0x0038 - 0x0000)
struct FPSSubclass final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         subtype;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 dest;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         monitorType;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         httpMethod;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSSubclass) == 0x000008, "Wrong alignment on FPSSubclass");
static_assert(sizeof(FPSSubclass) == 0x000038, "Wrong size on FPSSubclass");
static_assert(offsetof(FPSSubclass, ID) == 0x000000, "Member 'FPSSubclass::ID' has a wrong offset!");
static_assert(offsetof(FPSSubclass, subtype) == 0x000010, "Member 'FPSSubclass::subtype' has a wrong offset!");
static_assert(offsetof(FPSSubclass, dest) == 0x000018, "Member 'FPSSubclass::dest' has a wrong offset!");
static_assert(offsetof(FPSSubclass, monitorType) == 0x000028, "Member 'FPSSubclass::monitorType' has a wrong offset!");
static_assert(offsetof(FPSSubclass, httpMethod) == 0x00002C, "Member 'FPSSubclass::httpMethod' has a wrong offset!");
static_assert(offsetof(FPSSubclass, Port) == 0x000030, "Member 'FPSSubclass::Port' has a wrong offset!");

// ScriptStruct PSDKConfig.PSParentclass
// 0x0018 (0x0018 - 0x0000)
struct FPSParentclass final
{
public:
	int32                                         parenttype;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPSSubclass>                    SubClass;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSParentclass) == 0x000008, "Wrong alignment on FPSParentclass");
static_assert(sizeof(FPSParentclass) == 0x000018, "Wrong size on FPSParentclass");
static_assert(offsetof(FPSParentclass, parenttype) == 0x000000, "Member 'FPSParentclass::parenttype' has a wrong offset!");
static_assert(offsetof(FPSParentclass, SubClass) == 0x000008, "Member 'FPSParentclass::SubClass' has a wrong offset!");

// ScriptStruct PSDKConfig.PSNetDiagnosis2
// 0x0018 (0x0018 - 0x0000)
struct FPSNetDiagnosis2 final
{
public:
	struct FPSParentclass                         ParentClass;                                       // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSNetDiagnosis2) == 0x000008, "Wrong alignment on FPSNetDiagnosis2");
static_assert(sizeof(FPSNetDiagnosis2) == 0x000018, "Wrong size on FPSNetDiagnosis2");
static_assert(offsetof(FPSNetDiagnosis2, ParentClass) == 0x000000, "Member 'FPSNetDiagnosis2::ParentClass' has a wrong offset!");

// ScriptStruct PSDKConfig.PSNetDiagnosis3
// 0x0020 (0x0020 - 0x0000)
struct FPSNetDiagnosis3 final
{
public:
	class FString                                 zoneId;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPSNetDiagnosis2>               netDiagnosis;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSNetDiagnosis3) == 0x000008, "Wrong alignment on FPSNetDiagnosis3");
static_assert(sizeof(FPSNetDiagnosis3) == 0x000020, "Wrong size on FPSNetDiagnosis3");
static_assert(offsetof(FPSNetDiagnosis3, zoneId) == 0x000000, "Member 'FPSNetDiagnosis3::zoneId' has a wrong offset!");
static_assert(offsetof(FPSNetDiagnosis3, netDiagnosis) == 0x000010, "Member 'FPSNetDiagnosis3::netDiagnosis' has a wrong offset!");

// ScriptStruct PSDKConfig.PSConsoleConfig
// 0x00B0 (0x00B0 - 0x0000)
struct FPSConsoleConfig final
{
public:
	int32                                         deliver_retry_count;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         deliver_retry_round_times;                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         payloadingtime;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         guest_recharge;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         realname;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          qostlog;                                           // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         qostlog_cache_count;                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         emailVerify;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ps_anti_addiction_open;                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ps_report_online_time_interval;                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          configCompleted;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          debugLog;                                          // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         debugLogCount;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 send_tlog_url;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 socket_url;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ai_help_url;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 customerServiceHost;                               // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 psnOAuthDomain;                                    // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPSLoginLimitAge                       login_limit_age;                                   // 0x0080(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         refreshTokenCountdown;                             // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPSNetDiagnosis2>               netDiagnosis2;                                     // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPSNetDiagnosis3>               netDiagnosis3;                                     // 0x0098(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          psnUsePriceIgnoreCase;                             // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          psnEnableConsumeWhenReactived;                     // 0x00A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         psnConsumeWhenReactivedLimitInterval;              // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSConsoleConfig) == 0x000008, "Wrong alignment on FPSConsoleConfig");
static_assert(sizeof(FPSConsoleConfig) == 0x0000B0, "Wrong size on FPSConsoleConfig");
static_assert(offsetof(FPSConsoleConfig, deliver_retry_count) == 0x000000, "Member 'FPSConsoleConfig::deliver_retry_count' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, deliver_retry_round_times) == 0x000004, "Member 'FPSConsoleConfig::deliver_retry_round_times' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, payloadingtime) == 0x000008, "Member 'FPSConsoleConfig::payloadingtime' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, guest_recharge) == 0x00000C, "Member 'FPSConsoleConfig::guest_recharge' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, realname) == 0x000010, "Member 'FPSConsoleConfig::realname' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, qostlog) == 0x000014, "Member 'FPSConsoleConfig::qostlog' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, qostlog_cache_count) == 0x000018, "Member 'FPSConsoleConfig::qostlog_cache_count' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, emailVerify) == 0x00001C, "Member 'FPSConsoleConfig::emailVerify' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, ps_anti_addiction_open) == 0x000020, "Member 'FPSConsoleConfig::ps_anti_addiction_open' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, ps_report_online_time_interval) == 0x000024, "Member 'FPSConsoleConfig::ps_report_online_time_interval' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, configCompleted) == 0x000028, "Member 'FPSConsoleConfig::configCompleted' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, debugLog) == 0x000029, "Member 'FPSConsoleConfig::debugLog' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, debugLogCount) == 0x00002C, "Member 'FPSConsoleConfig::debugLogCount' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, send_tlog_url) == 0x000030, "Member 'FPSConsoleConfig::send_tlog_url' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, socket_url) == 0x000040, "Member 'FPSConsoleConfig::socket_url' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, ai_help_url) == 0x000050, "Member 'FPSConsoleConfig::ai_help_url' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, customerServiceHost) == 0x000060, "Member 'FPSConsoleConfig::customerServiceHost' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, psnOAuthDomain) == 0x000070, "Member 'FPSConsoleConfig::psnOAuthDomain' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, login_limit_age) == 0x000080, "Member 'FPSConsoleConfig::login_limit_age' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, refreshTokenCountdown) == 0x000084, "Member 'FPSConsoleConfig::refreshTokenCountdown' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, netDiagnosis2) == 0x000088, "Member 'FPSConsoleConfig::netDiagnosis2' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, netDiagnosis3) == 0x000098, "Member 'FPSConsoleConfig::netDiagnosis3' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, psnUsePriceIgnoreCase) == 0x0000A8, "Member 'FPSConsoleConfig::psnUsePriceIgnoreCase' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, psnEnableConsumeWhenReactived) == 0x0000A9, "Member 'FPSConsoleConfig::psnEnableConsumeWhenReactived' has a wrong offset!");
static_assert(offsetof(FPSConsoleConfig, psnConsumeWhenReactivedLimitInterval) == 0x0000AC, "Member 'FPSConsoleConfig::psnConsumeWhenReactivedLimitInterval' has a wrong offset!");

// ScriptStruct PSDKConfig.PSDKCurrencyConfig
// 0x0038 (0x0038 - 0x0000)
struct FPSDKCurrencyConfig final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         align;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pattern;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 symbol;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSDKCurrencyConfig) == 0x000008, "Wrong alignment on FPSDKCurrencyConfig");
static_assert(sizeof(FPSDKCurrencyConfig) == 0x000038, "Wrong size on FPSDKCurrencyConfig");
static_assert(offsetof(FPSDKCurrencyConfig, Code) == 0x000000, "Member 'FPSDKCurrencyConfig::Code' has a wrong offset!");
static_assert(offsetof(FPSDKCurrencyConfig, align) == 0x000010, "Member 'FPSDKCurrencyConfig::align' has a wrong offset!");
static_assert(offsetof(FPSDKCurrencyConfig, Pattern) == 0x000018, "Member 'FPSDKCurrencyConfig::Pattern' has a wrong offset!");
static_assert(offsetof(FPSDKCurrencyConfig, symbol) == 0x000028, "Member 'FPSDKCurrencyConfig::symbol' has a wrong offset!");

// ScriptStruct PSDKConfig.PSdkAccessoriesConfigDataModel
// 0x0001 (0x0001 - 0x0000)
struct FPSdkAccessoriesConfigDataModel final
{
public:
	bool                                          ccr;                                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSdkAccessoriesConfigDataModel) == 0x000001, "Wrong alignment on FPSdkAccessoriesConfigDataModel");
static_assert(sizeof(FPSdkAccessoriesConfigDataModel) == 0x000001, "Wrong size on FPSdkAccessoriesConfigDataModel");
static_assert(offsetof(FPSdkAccessoriesConfigDataModel, ccr) == 0x000000, "Member 'FPSdkAccessoriesConfigDataModel::ccr' has a wrong offset!");

// ScriptStruct PSDKConfig.PSdkAccessoriesConfigModel
// 0x0008 (0x0040 - 0x0038)
struct FPSdkAccessoriesConfigModel final : public FPSBffBasicModel
{
public:
	struct FPSdkAccessoriesConfigDataModel        Data;                                              // 0x0038(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSdkAccessoriesConfigModel) == 0x000008, "Wrong alignment on FPSdkAccessoriesConfigModel");
static_assert(sizeof(FPSdkAccessoriesConfigModel) == 0x000040, "Wrong size on FPSdkAccessoriesConfigModel");
static_assert(offsetof(FPSdkAccessoriesConfigModel, Data) == 0x000038, "Member 'FPSdkAccessoriesConfigModel::Data' has a wrong offset!");

// ScriptStruct PSDKConfig.PSdkCommonConfigDataModel
// 0x0001 (0x0001 - 0x0000)
struct FPSdkCommonConfigDataModel final
{
public:
	bool                                          ccr;                                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSdkCommonConfigDataModel) == 0x000001, "Wrong alignment on FPSdkCommonConfigDataModel");
static_assert(sizeof(FPSdkCommonConfigDataModel) == 0x000001, "Wrong size on FPSdkCommonConfigDataModel");
static_assert(offsetof(FPSdkCommonConfigDataModel, ccr) == 0x000000, "Member 'FPSdkCommonConfigDataModel::ccr' has a wrong offset!");

// ScriptStruct PSDKConfig.PSdkCommonConfigModel
// 0x0008 (0x0040 - 0x0038)
struct FPSdkCommonConfigModel final : public FPSBffBasicModel
{
public:
	struct FPSdkCommonConfigDataModel             Data;                                              // 0x0038(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSdkCommonConfigModel) == 0x000008, "Wrong alignment on FPSdkCommonConfigModel");
static_assert(sizeof(FPSdkCommonConfigModel) == 0x000040, "Wrong size on FPSdkCommonConfigModel");
static_assert(offsetof(FPSdkCommonConfigModel, Data) == 0x000038, "Member 'FPSdkCommonConfigModel::Data' has a wrong offset!");

// ScriptStruct PSDKConfig.PSDKLanguageTableRowBase
// 0x00D0 (0x00D8 - 0x0008)
struct FPSDKLanguageTableRowBase : public FTableRowBase
{
public:
	class FString                                 zh_cn;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 zh_tw;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 en;                                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 jp;                                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ko;                                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 vn;                                                // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 de_de;                                             // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 fr_fr;                                             // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 th_th;                                             // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 es_la;                                             // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 pt_br;                                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 it_it;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 id_id;                                             // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSDKLanguageTableRowBase) == 0x000008, "Wrong alignment on FPSDKLanguageTableRowBase");
static_assert(sizeof(FPSDKLanguageTableRowBase) == 0x0000D8, "Wrong size on FPSDKLanguageTableRowBase");
static_assert(offsetof(FPSDKLanguageTableRowBase, zh_cn) == 0x000008, "Member 'FPSDKLanguageTableRowBase::zh_cn' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, zh_tw) == 0x000018, "Member 'FPSDKLanguageTableRowBase::zh_tw' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, en) == 0x000028, "Member 'FPSDKLanguageTableRowBase::en' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, jp) == 0x000038, "Member 'FPSDKLanguageTableRowBase::jp' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, ko) == 0x000048, "Member 'FPSDKLanguageTableRowBase::ko' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, vn) == 0x000058, "Member 'FPSDKLanguageTableRowBase::vn' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, de_de) == 0x000068, "Member 'FPSDKLanguageTableRowBase::de_de' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, fr_fr) == 0x000078, "Member 'FPSDKLanguageTableRowBase::fr_fr' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, th_th) == 0x000088, "Member 'FPSDKLanguageTableRowBase::th_th' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, es_la) == 0x000098, "Member 'FPSDKLanguageTableRowBase::es_la' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, pt_br) == 0x0000A8, "Member 'FPSDKLanguageTableRowBase::pt_br' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, it_it) == 0x0000B8, "Member 'FPSDKLanguageTableRowBase::it_it' has a wrong offset!");
static_assert(offsetof(FPSDKLanguageTableRowBase, id_id) == 0x0000C8, "Member 'FPSDKLanguageTableRowBase::id_id' has a wrong offset!");

// ScriptStruct PSDKConfig.PSdkLoginConfigDataModel
// 0x0001 (0x0001 - 0x0000)
struct FPSdkLoginConfigDataModel final
{
public:
	bool                                          ccr;                                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSdkLoginConfigDataModel) == 0x000001, "Wrong alignment on FPSdkLoginConfigDataModel");
static_assert(sizeof(FPSdkLoginConfigDataModel) == 0x000001, "Wrong size on FPSdkLoginConfigDataModel");
static_assert(offsetof(FPSdkLoginConfigDataModel, ccr) == 0x000000, "Member 'FPSdkLoginConfigDataModel::ccr' has a wrong offset!");

// ScriptStruct PSDKConfig.PSdkLoginConfigModel
// 0x0008 (0x0040 - 0x0038)
struct FPSdkLoginConfigModel final : public FPSBffBasicModel
{
public:
	struct FPSdkLoginConfigDataModel              Data;                                              // 0x0038(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSdkLoginConfigModel) == 0x000008, "Wrong alignment on FPSdkLoginConfigModel");
static_assert(sizeof(FPSdkLoginConfigModel) == 0x000040, "Wrong size on FPSdkLoginConfigModel");
static_assert(offsetof(FPSdkLoginConfigModel, Data) == 0x000038, "Member 'FPSdkLoginConfigModel::Data' has a wrong offset!");

// ScriptStruct PSDKConfig.PSdkPayConfigDataModel
// 0x0028 (0x0028 - 0x0000)
struct FPSdkPayConfigDataModel final
{
public:
	bool                                          ccr;                                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         deliver_retry_round_times;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 payment_url;                                       // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPSDKCurrencyConfig>            currency;                                          // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSdkPayConfigDataModel) == 0x000008, "Wrong alignment on FPSdkPayConfigDataModel");
static_assert(sizeof(FPSdkPayConfigDataModel) == 0x000028, "Wrong size on FPSdkPayConfigDataModel");
static_assert(offsetof(FPSdkPayConfigDataModel, ccr) == 0x000000, "Member 'FPSdkPayConfigDataModel::ccr' has a wrong offset!");
static_assert(offsetof(FPSdkPayConfigDataModel, deliver_retry_round_times) == 0x000004, "Member 'FPSdkPayConfigDataModel::deliver_retry_round_times' has a wrong offset!");
static_assert(offsetof(FPSdkPayConfigDataModel, payment_url) == 0x000008, "Member 'FPSdkPayConfigDataModel::payment_url' has a wrong offset!");
static_assert(offsetof(FPSdkPayConfigDataModel, currency) == 0x000018, "Member 'FPSdkPayConfigDataModel::currency' has a wrong offset!");

// ScriptStruct PSDKConfig.PSdkPayConfigModel
// 0x0028 (0x0060 - 0x0038)
struct FPSdkPayConfigModel final : public FPSBffBasicModel
{
public:
	struct FPSdkPayConfigDataModel                Data;                                              // 0x0038(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSdkPayConfigModel) == 0x000008, "Wrong alignment on FPSdkPayConfigModel");
static_assert(sizeof(FPSdkPayConfigModel) == 0x000060, "Wrong size on FPSdkPayConfigModel");
static_assert(offsetof(FPSdkPayConfigModel, Data) == 0x000038, "Member 'FPSdkPayConfigModel::Data' has a wrong offset!");

}

