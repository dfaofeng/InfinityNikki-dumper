#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_AbilityBase

#include "Basic.hpp"

#include "X6Game_classes.hpp"
#include "ESkillFlag_structs.hpp"
#include "EPlayerActionTypes_structs.hpp"
#include "EInt32PlayerPawnStateTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "ESkillCDStartCondition_structs.hpp"
#include "EClothFlag_structs.hpp"
#include "ECombatForwardRule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_AbilityBase.GA_AbilityBase_C
// 0x00D8 (0x0540 - 0x0468)
class UGA_AbilityBase_C : public UX6GameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0468(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	EPlayerActionTypes                            PlayerActionType;                                  // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EInt32PlayerPawnStateTypes                    PlayerStateType;                                   // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GroupCD;                                           // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExtraFreezeDuration;                               // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillGroupID;                                      // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillCDStartCondition                        CDStartType;                                       // 0x048C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EInt32PlayerPawnStateTypes>            ContainStates;                                     // 0x0490(0x0010)(Edit, BlueprintVisible)
	TArray<EInt32PlayerPawnStateTypes>            NotContainStates;                                  // 0x04A0(0x0010)(Edit, BlueprintVisible)
	TArray<EInt32PlayerPawnStateTypes>            RemoveStates;                                      // 0x04B0(0x0010)(Edit, BlueprintVisible)
	EClothFlag                                    ClothFlag;                                         // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EInt32PlayerPawnStateTypes>            ClothNotContainStates;                             // 0x04C8(0x0010)(Edit, BlueprintVisible)
	ESkillFlag                                    SkillFlags;                                        // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECombatForwardRule                            ForwardRuleType;                                   // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedCheckInScreen;                                 // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableBTConditions;                               // 0x04DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxDistance2D;                                     // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinDistance2D;                                     // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDegree2D;                                       // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinDegree2D;                                       // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZDistance;                                         // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZDegree;                                           // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer;                                          // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFacialAnimFromSpecialFullBody__;                // 0x0511(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_512[0x6];                                      // 0x0512(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UX6AbilityTagRelationshipMapping> TagRelationship;                          // 0x0518(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, HasGetValueTypeHash)

public:
	void BP_GetActorHP(double* HP);
	void BP_GetActorMaxHP(double* MaxHP);
	void BP_GetCD();
	void BP_GetTargetActor(class AActor** TargetActor);
	void BP_OnActivateAbility();
	void BP_OnEndAbilityExcludeJumpToGA(bool bWasCancelled);
	void BP_PlayLevelSequence(class ULevelSequence* SequenceAsset, bool HideHUD, const struct FTransform& Transform, const struct FMovieSceneSequencePlaybackSettings& PlaybackSetting);
	void BP_StopCurrentLevelSequence();
	void ExecuteUbergraph_GA_AbilityBase(int32 EntryPoint);
	void JumpToAbility(const struct FGameplayTag& TriggerTag, const struct FGameplayEventData& Payload);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_AbilityBase_C">();
	}
	static class UGA_AbilityBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_AbilityBase_C>();
	}
};
static_assert(alignof(UGA_AbilityBase_C) == 0x000008, "Wrong alignment on UGA_AbilityBase_C");
static_assert(sizeof(UGA_AbilityBase_C) == 0x000540, "Wrong size on UGA_AbilityBase_C");
static_assert(offsetof(UGA_AbilityBase_C, UberGraphFrame) == 0x000468, "Member 'UGA_AbilityBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, PlayerActionType) == 0x000470, "Member 'UGA_AbilityBase_C::PlayerActionType' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, PlayerStateType) == 0x000474, "Member 'UGA_AbilityBase_C::PlayerStateType' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, GroupCD) == 0x000478, "Member 'UGA_AbilityBase_C::GroupCD' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, ExtraFreezeDuration) == 0x000480, "Member 'UGA_AbilityBase_C::ExtraFreezeDuration' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, SkillGroupID) == 0x000488, "Member 'UGA_AbilityBase_C::SkillGroupID' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, CDStartType) == 0x00048C, "Member 'UGA_AbilityBase_C::CDStartType' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, ContainStates) == 0x000490, "Member 'UGA_AbilityBase_C::ContainStates' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, NotContainStates) == 0x0004A0, "Member 'UGA_AbilityBase_C::NotContainStates' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, RemoveStates) == 0x0004B0, "Member 'UGA_AbilityBase_C::RemoveStates' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, ClothFlag) == 0x0004C0, "Member 'UGA_AbilityBase_C::ClothFlag' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, ClothNotContainStates) == 0x0004C8, "Member 'UGA_AbilityBase_C::ClothNotContainStates' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, SkillFlags) == 0x0004D8, "Member 'UGA_AbilityBase_C::SkillFlags' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, ForwardRuleType) == 0x0004D9, "Member 'UGA_AbilityBase_C::ForwardRuleType' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, NeedCheckInScreen) == 0x0004DA, "Member 'UGA_AbilityBase_C::NeedCheckInScreen' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, bEnableBTConditions) == 0x0004DB, "Member 'UGA_AbilityBase_C::bEnableBTConditions' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, MaxDistance2D) == 0x0004E0, "Member 'UGA_AbilityBase_C::MaxDistance2D' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, MinDistance2D) == 0x0004E8, "Member 'UGA_AbilityBase_C::MinDistance2D' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, MaxDegree2D) == 0x0004F0, "Member 'UGA_AbilityBase_C::MaxDegree2D' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, MinDegree2D) == 0x0004F8, "Member 'UGA_AbilityBase_C::MinDegree2D' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, ZDistance) == 0x000500, "Member 'UGA_AbilityBase_C::ZDistance' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, ZDegree) == 0x000508, "Member 'UGA_AbilityBase_C::ZDegree' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, IsPlayer) == 0x000510, "Member 'UGA_AbilityBase_C::IsPlayer' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, UseFacialAnimFromSpecialFullBody__) == 0x000511, "Member 'UGA_AbilityBase_C::UseFacialAnimFromSpecialFullBody__' has a wrong offset!");
static_assert(offsetof(UGA_AbilityBase_C, TagRelationship) == 0x000518, "Member 'UGA_AbilityBase_C::TagRelationship' has a wrong offset!");

}

