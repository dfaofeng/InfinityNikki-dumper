#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperAnalyticsHelper

#include "Basic.hpp"


namespace SDK::Params
{

// Function PaperAnalyticsHelper.PaperAnalyticsLibrary.EndPerformanceEvent
// 0x0010 (0x0010 - 0x0000)
struct PaperAnalyticsLibrary_EndPerformanceEvent final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAnalyticsLibrary_EndPerformanceEvent) == 0x000008, "Wrong alignment on PaperAnalyticsLibrary_EndPerformanceEvent");
static_assert(sizeof(PaperAnalyticsLibrary_EndPerformanceEvent) == 0x000010, "Wrong size on PaperAnalyticsLibrary_EndPerformanceEvent");
static_assert(offsetof(PaperAnalyticsLibrary_EndPerformanceEvent, EventName) == 0x000000, "Member 'PaperAnalyticsLibrary_EndPerformanceEvent::EventName' has a wrong offset!");

// Function PaperAnalyticsHelper.PaperAnalyticsLibrary.EndPerformanceEventWithAttributes
// 0x0060 (0x0060 - 0x0000)
struct PaperAnalyticsLibrary_EndPerformanceEventWithAttributes final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAnalyticsLibrary_EndPerformanceEventWithAttributes) == 0x000008, "Wrong alignment on PaperAnalyticsLibrary_EndPerformanceEventWithAttributes");
static_assert(sizeof(PaperAnalyticsLibrary_EndPerformanceEventWithAttributes) == 0x000060, "Wrong size on PaperAnalyticsLibrary_EndPerformanceEventWithAttributes");
static_assert(offsetof(PaperAnalyticsLibrary_EndPerformanceEventWithAttributes, EventName) == 0x000000, "Member 'PaperAnalyticsLibrary_EndPerformanceEventWithAttributes::EventName' has a wrong offset!");
static_assert(offsetof(PaperAnalyticsLibrary_EndPerformanceEventWithAttributes, Attributes) == 0x000010, "Member 'PaperAnalyticsLibrary_EndPerformanceEventWithAttributes::Attributes' has a wrong offset!");

// Function PaperAnalyticsHelper.PaperAnalyticsLibrary.StartPerformanceEvent
// 0x0018 (0x0018 - 0x0000)
struct PaperAnalyticsLibrary_StartPerformanceEvent final
{
public:
	class FString                                 StrMapName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTopName;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperAnalyticsLibrary_StartPerformanceEvent) == 0x000008, "Wrong alignment on PaperAnalyticsLibrary_StartPerformanceEvent");
static_assert(sizeof(PaperAnalyticsLibrary_StartPerformanceEvent) == 0x000018, "Wrong size on PaperAnalyticsLibrary_StartPerformanceEvent");
static_assert(offsetof(PaperAnalyticsLibrary_StartPerformanceEvent, StrMapName) == 0x000000, "Member 'PaperAnalyticsLibrary_StartPerformanceEvent::StrMapName' has a wrong offset!");
static_assert(offsetof(PaperAnalyticsLibrary_StartPerformanceEvent, ForceTopName) == 0x000010, "Member 'PaperAnalyticsLibrary_StartPerformanceEvent::ForceTopName' has a wrong offset!");

// Function PaperAnalyticsHelper.PaperAnalyticsLibrary.StartPerformanceEventWithAttributes
// 0x0068 (0x0068 - 0x0000)
struct PaperAnalyticsLibrary_StartPerformanceEventWithAttributes final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Attributes;                                        // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ForceTopName;                                      // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperAnalyticsLibrary_StartPerformanceEventWithAttributes) == 0x000008, "Wrong alignment on PaperAnalyticsLibrary_StartPerformanceEventWithAttributes");
static_assert(sizeof(PaperAnalyticsLibrary_StartPerformanceEventWithAttributes) == 0x000068, "Wrong size on PaperAnalyticsLibrary_StartPerformanceEventWithAttributes");
static_assert(offsetof(PaperAnalyticsLibrary_StartPerformanceEventWithAttributes, EventName) == 0x000000, "Member 'PaperAnalyticsLibrary_StartPerformanceEventWithAttributes::EventName' has a wrong offset!");
static_assert(offsetof(PaperAnalyticsLibrary_StartPerformanceEventWithAttributes, Attributes) == 0x000010, "Member 'PaperAnalyticsLibrary_StartPerformanceEventWithAttributes::Attributes' has a wrong offset!");
static_assert(offsetof(PaperAnalyticsLibrary_StartPerformanceEventWithAttributes, ForceTopName) == 0x000060, "Member 'PaperAnalyticsLibrary_StartPerformanceEventWithAttributes::ForceTopName' has a wrong offset!");

}

