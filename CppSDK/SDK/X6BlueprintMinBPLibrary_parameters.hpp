#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6BlueprintMinBPLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MessageHUDEnum_structs.hpp"
#include "MessageBoxModeEnum_structs.hpp"
#include "MessageHUDHead_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.TrySendMsgToStartGame
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintMinBPLibrary_C_TrySendMsgToStartGame final
{
public:
	class AActor*                                 actorWithEntryComp;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         miniGameId;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_TrySendMsgToStartGame) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_TrySendMsgToStartGame");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_TrySendMsgToStartGame) == 0x000018, "Wrong size on X6BlueprintMinBPLibrary_C_TrySendMsgToStartGame");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TrySendMsgToStartGame, actorWithEntryComp) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_TrySendMsgToStartGame::actorWithEntryComp' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TrySendMsgToStartGame, miniGameId) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_TrySendMsgToStartGame::miniGameId' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TrySendMsgToStartGame, __WorldContext) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_TrySendMsgToStartGame::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.Test_ClearAllMiniGameLvlSeqPlayRecord
// 0x0008 (0x0008 - 0x0000)
struct X6BlueprintMinBPLibrary_C_Test_ClearAllMiniGameLvlSeqPlayRecord final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_Test_ClearAllMiniGameLvlSeqPlayRecord) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_Test_ClearAllMiniGameLvlSeqPlayRecord");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_Test_ClearAllMiniGameLvlSeqPlayRecord) == 0x000008, "Wrong size on X6BlueprintMinBPLibrary_C_Test_ClearAllMiniGameLvlSeqPlayRecord");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_Test_ClearAllMiniGameLvlSeqPlayRecord, __WorldContext) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_Test_ClearAllMiniGameLvlSeqPlayRecord::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.TeleportPlayerToActor
// 0x0148 (0x0148 - 0x0000)
struct X6BlueprintMinBPLibrary_C_TeleportPlayerToActor final
{
public:
	class AActor*                                 TargetLocation;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetLocalPlayerPawn_LocalPlayerPawn;       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0048(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_TeleportPlayerToActor) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_TeleportPlayerToActor");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_TeleportPlayerToActor) == 0x000148, "Wrong size on X6BlueprintMinBPLibrary_C_TeleportPlayerToActor");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerToActor, TargetLocation) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerToActor::TargetLocation' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerToActor, __WorldContext) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerToActor::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerToActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerToActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerToActor, CallFunc_GetLocalPlayerPawn_LocalPlayerPawn) == 0x000028, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerToActor::CallFunc_GetLocalPlayerPawn_LocalPlayerPawn' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerToActor, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000030, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerToActor::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerToActor, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000048, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerToActor::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerToActor, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000140, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerToActor::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.TeleportPlayerByTag
// 0x0048 (0x0048 - 0x0000)
struct X6BlueprintMinBPLibrary_C_TeleportPlayerByTag final
{
public:
	class FString                                 TeleportTag;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          bNoFadeOutIn;                                      // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PosOffset;                                         // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotationOffsetY;                                   // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSkipLoadingCheck;                                 // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRotateCamera;                                     // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_TeleportPlayerByTag) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_TeleportPlayerByTag");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_TeleportPlayerByTag) == 0x000048, "Wrong size on X6BlueprintMinBPLibrary_C_TeleportPlayerByTag");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerByTag, TeleportTag) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerByTag::TeleportTag' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerByTag, bNoFadeOutIn) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerByTag::bNoFadeOutIn' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerByTag, PosOffset) == 0x000018, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerByTag::PosOffset' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerByTag, RotationOffsetY) == 0x000030, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerByTag::RotationOffsetY' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerByTag, bSkipLoadingCheck) == 0x000038, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerByTag::bSkipLoadingCheck' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerByTag, bRotateCamera) == 0x000039, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerByTag::bRotateCamera' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayerByTag, __WorldContext) == 0x000040, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayerByTag::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.TeleportPlayer
// 0x0048 (0x0048 - 0x0000)
struct X6BlueprintMinBPLibrary_C_TeleportPlayer final
{
public:
	class ACharacter*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargettLocation;                                   // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNoFadeOutIn;                                      // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_TeleportPlayer) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_TeleportPlayer");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_TeleportPlayer) == 0x000048, "Wrong size on X6BlueprintMinBPLibrary_C_TeleportPlayer");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayer, Player) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayer::Player' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayer, TargettLocation) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayer::TargettLocation' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayer, TargetRotation) == 0x000020, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayer::TargetRotation' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayer, bNoFadeOutIn) == 0x000038, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayer::bNoFadeOutIn' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_TeleportPlayer, __WorldContext) == 0x000040, "Member 'X6BlueprintMinBPLibrary_C_TeleportPlayer::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.SpawnActor
// 0x0050 (0x0050 - 0x0000)
struct X6BlueprintMinBPLibrary_C_SpawnActor final
{
public:
	class UClass*                                 SpawnClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Value;                                             // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_X6SpawnActor_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_SpawnActor) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_SpawnActor");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_SpawnActor) == 0x000050, "Wrong size on X6BlueprintMinBPLibrary_C_SpawnActor");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SpawnActor, SpawnClass) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_SpawnActor::SpawnClass' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SpawnActor, Position) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_SpawnActor::Position' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SpawnActor, Rotation) == 0x000020, "Member 'X6BlueprintMinBPLibrary_C_SpawnActor::Rotation' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SpawnActor, __WorldContext) == 0x000038, "Member 'X6BlueprintMinBPLibrary_C_SpawnActor::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SpawnActor, Value) == 0x000040, "Member 'X6BlueprintMinBPLibrary_C_SpawnActor::Value' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SpawnActor, CallFunc_X6SpawnActor_ReturnValue) == 0x000048, "Member 'X6BlueprintMinBPLibrary_C_SpawnActor::CallFunc_X6SpawnActor_ReturnValue' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.ShowMessageOnScreen
// 0x0028 (0x0028 - 0x0000)
struct X6BlueprintMinBPLibrary_C_ShowMessageOnScreen final
{
public:
	double                                        TextDuration;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMessageHUDEnum                               MessageType;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMessageHUDHead                               HeadImage;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MessageID;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_ShowMessageOnScreen) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_ShowMessageOnScreen");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_ShowMessageOnScreen) == 0x000028, "Wrong size on X6BlueprintMinBPLibrary_C_ShowMessageOnScreen");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageOnScreen, TextDuration) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageOnScreen::TextDuration' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageOnScreen, MessageType) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageOnScreen::MessageType' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageOnScreen, HeadImage) == 0x000009, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageOnScreen::HeadImage' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageOnScreen, MessageID) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageOnScreen::MessageID' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageOnScreen, __WorldContext) == 0x000020, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageOnScreen::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.ShowMessageHUDOnScreen
// 0x0038 (0x0038 - 0x0000)
struct X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen final
{
public:
	TArray<class FText>                           Messages;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	double                                        TextDuration;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMessageHUDEnum                               MessageType;                                       // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMessageHUDHead                               HeadImage;                                         // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMessageBoxModeEnum                           PopupMode;                                         // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DaMiaoHudTextAutoEnd;                              // 0x001B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MessageID;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen) == 0x000038, "Wrong size on X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen, Messages) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen::Messages' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen, TextDuration) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen::TextDuration' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen, MessageType) == 0x000018, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen::MessageType' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen, HeadImage) == 0x000019, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen::HeadImage' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen, PopupMode) == 0x00001A, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen::PopupMode' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen, DaMiaoHudTextAutoEnd) == 0x00001B, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen::DaMiaoHudTextAutoEnd' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen, MessageID) == 0x000020, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen::MessageID' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen, __WorldContext) == 0x000030, "Member 'X6BlueprintMinBPLibrary_C_ShowMessageHUDOnScreen::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.SetSimulatePhysics
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintMinBPLibrary_C_SetSimulatePhysics final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bSimulate;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_SetSimulatePhysics) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_SetSimulatePhysics");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_SetSimulatePhysics) == 0x000018, "Wrong size on X6BlueprintMinBPLibrary_C_SetSimulatePhysics");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SetSimulatePhysics, Target) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_SetSimulatePhysics::Target' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SetSimulatePhysics, bSimulate) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_SetSimulatePhysics::bSimulate' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SetSimulatePhysics, __WorldContext) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_SetSimulatePhysics::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.SetMiniGameLvlSeqPlayed
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintMinBPLibrary_C_SetMiniGameLvlSeqPlayed final
{
public:
	class ABP_MiniGame_C*                         MiniGame;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayed;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_SetMiniGameLvlSeqPlayed) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_SetMiniGameLvlSeqPlayed");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_SetMiniGameLvlSeqPlayed) == 0x000018, "Wrong size on X6BlueprintMinBPLibrary_C_SetMiniGameLvlSeqPlayed");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SetMiniGameLvlSeqPlayed, MiniGame) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_SetMiniGameLvlSeqPlayed::MiniGame' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SetMiniGameLvlSeqPlayed, bPlayed) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_SetMiniGameLvlSeqPlayed::bPlayed' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_SetMiniGameLvlSeqPlayed, __WorldContext) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_SetMiniGameLvlSeqPlayed::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.ResumeGame
// 0x0010 (0x0010 - 0x0000)
struct X6BlueprintMinBPLibrary_C_ResumeGame final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                NewLocalVar_0;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_ResumeGame) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_ResumeGame");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_ResumeGame) == 0x000010, "Wrong size on X6BlueprintMinBPLibrary_C_ResumeGame");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ResumeGame, __WorldContext) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_ResumeGame::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ResumeGame, NewLocalVar_0) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_ResumeGame::NewLocalVar_0' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.RemoveMiniGameMoveCameraState
// 0x0008 (0x0008 - 0x0000)
struct X6BlueprintMinBPLibrary_C_RemoveMiniGameMoveCameraState final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_RemoveMiniGameMoveCameraState) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_RemoveMiniGameMoveCameraState");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_RemoveMiniGameMoveCameraState) == 0x000008, "Wrong size on X6BlueprintMinBPLibrary_C_RemoveMiniGameMoveCameraState");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_RemoveMiniGameMoveCameraState, __WorldContext) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_RemoveMiniGameMoveCameraState::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.PuzzleSpawnerInGroupResetFinishCB
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintMinBPLibrary_C_PuzzleSpawnerInGroupResetFinishCB final
{
public:
	class AActor*                                 SpawnerActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_PuzzleSpawnerInGroupResetFinishCB) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_PuzzleSpawnerInGroupResetFinishCB");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_PuzzleSpawnerInGroupResetFinishCB) == 0x000018, "Wrong size on X6BlueprintMinBPLibrary_C_PuzzleSpawnerInGroupResetFinishCB");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_PuzzleSpawnerInGroupResetFinishCB, SpawnerActor) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_PuzzleSpawnerInGroupResetFinishCB::SpawnerActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_PuzzleSpawnerInGroupResetFinishCB, bSuccess) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_PuzzleSpawnerInGroupResetFinishCB::bSuccess' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_PuzzleSpawnerInGroupResetFinishCB, __WorldContext) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_PuzzleSpawnerInGroupResetFinishCB::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.PlayMiniGameLvlSeq
// 0x0038 (0x0038 - 0x0000)
struct X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq final
{
public:
	class ABP_MiniGame_C*                         MiniGame;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         Sequence;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    CallFunc_PlayFeatureSequence_SequenceActor;        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_PlayFeatureSequence_SequencePlayer;       // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq) == 0x000038, "Wrong size on X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq, MiniGame) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq::MiniGame' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq, Sequence) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq::Sequence' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq, __WorldContext) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq, SequenceActor) == 0x000018, "Member 'X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq::SequenceActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq, SequencePlayer) == 0x000020, "Member 'X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq, CallFunc_PlayFeatureSequence_SequenceActor) == 0x000028, "Member 'X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq::CallFunc_PlayFeatureSequence_SequenceActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq, CallFunc_PlayFeatureSequence_SequencePlayer) == 0x000030, "Member 'X6BlueprintMinBPLibrary_C_PlayMiniGameLvlSeq::CallFunc_PlayFeatureSequence_SequencePlayer' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.PauseGame
// 0x0008 (0x0008 - 0x0000)
struct X6BlueprintMinBPLibrary_C_PauseGame final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_PauseGame) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_PauseGame");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_PauseGame) == 0x000008, "Wrong size on X6BlueprintMinBPLibrary_C_PauseGame");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_PauseGame, __WorldContext) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_PauseGame::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.OverLapRequestHistoryToStartGame
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintMinBPLibrary_C_OverLapRequestHistoryToStartGame final
{
public:
	class AActor*                                 actorWithEntryComp;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         miniGameId;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_OverLapRequestHistoryToStartGame) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_OverLapRequestHistoryToStartGame");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_OverLapRequestHistoryToStartGame) == 0x000018, "Wrong size on X6BlueprintMinBPLibrary_C_OverLapRequestHistoryToStartGame");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_OverLapRequestHistoryToStartGame, actorWithEntryComp) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_OverLapRequestHistoryToStartGame::actorWithEntryComp' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_OverLapRequestHistoryToStartGame, miniGameId) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_OverLapRequestHistoryToStartGame::miniGameId' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_OverLapRequestHistoryToStartGame, __WorldContext) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_OverLapRequestHistoryToStartGame::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.LaunchPlayer
// 0x0030 (0x0030 - 0x0000)
struct X6BlueprintMinBPLibrary_C_LaunchPlayer final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchVelocity;                                    // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          XYOverride;                                        // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ZOverride;                                         // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_LaunchPlayer) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_LaunchPlayer");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_LaunchPlayer) == 0x000030, "Wrong size on X6BlueprintMinBPLibrary_C_LaunchPlayer");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_LaunchPlayer, Character) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_LaunchPlayer::Character' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_LaunchPlayer, LaunchVelocity) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_LaunchPlayer::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_LaunchPlayer, XYOverride) == 0x000020, "Member 'X6BlueprintMinBPLibrary_C_LaunchPlayer::XYOverride' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_LaunchPlayer, ZOverride) == 0x000021, "Member 'X6BlueprintMinBPLibrary_C_LaunchPlayer::ZOverride' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_LaunchPlayer, __WorldContext) == 0x000028, "Member 'X6BlueprintMinBPLibrary_C_LaunchPlayer::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.IsMiniGameLvlSeqPlayed
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintMinBPLibrary_C_IsMiniGameLvlSeqPlayed final
{
public:
	class ABP_MiniGame_C*                         MiniGame;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPlayed;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_IsMiniGameLvlSeqPlayed) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_IsMiniGameLvlSeqPlayed");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_IsMiniGameLvlSeqPlayed) == 0x000018, "Wrong size on X6BlueprintMinBPLibrary_C_IsMiniGameLvlSeqPlayed");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_IsMiniGameLvlSeqPlayed, MiniGame) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_IsMiniGameLvlSeqPlayed::MiniGame' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_IsMiniGameLvlSeqPlayed, __WorldContext) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_IsMiniGameLvlSeqPlayed::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_IsMiniGameLvlSeqPlayed, bIsPlayed) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_IsMiniGameLvlSeqPlayed::bIsPlayed' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.HideActor
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintMinBPLibrary_C_HideActor final
{
public:
	class AX6Actor*                               Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bHidden;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_HideActor) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_HideActor");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_HideActor) == 0x000018, "Wrong size on X6BlueprintMinBPLibrary_C_HideActor");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_HideActor, Target) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_HideActor::Target' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_HideActor, bHidden) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_HideActor::bHidden' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_HideActor, __WorldContext) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_HideActor::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.GetLocalPlayerPawn
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintMinBPLibrary_C_GetLocalPlayerPawn final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             LocalPlayerPawn;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetLocalPlayerPawn_LocalPlayerPawn;       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_GetLocalPlayerPawn) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_GetLocalPlayerPawn");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_GetLocalPlayerPawn) == 0x000018, "Wrong size on X6BlueprintMinBPLibrary_C_GetLocalPlayerPawn");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_GetLocalPlayerPawn, __WorldContext) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_GetLocalPlayerPawn::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_GetLocalPlayerPawn, LocalPlayerPawn) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_GetLocalPlayerPawn::LocalPlayerPawn' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_GetLocalPlayerPawn, CallFunc_GetLocalPlayerPawn_LocalPlayerPawn) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_GetLocalPlayerPawn::CallFunc_GetLocalPlayerPawn_LocalPlayerPawn' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.DestroyMiniGame
// 0x0010 (0x0010 - 0x0000)
struct X6BlueprintMinBPLibrary_C_DestroyMiniGame final
{
public:
	class AActor*                                 entryActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_DestroyMiniGame) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_DestroyMiniGame");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_DestroyMiniGame) == 0x000010, "Wrong size on X6BlueprintMinBPLibrary_C_DestroyMiniGame");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_DestroyMiniGame, entryActor) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_DestroyMiniGame::entryActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_DestroyMiniGame, __WorldContext) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_DestroyMiniGame::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.DestroyActor
// 0x0010 (0x0010 - 0x0000)
struct X6BlueprintMinBPLibrary_C_DestroyActor final
{
public:
	class AX6Actor*                               Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_DestroyActor) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_DestroyActor");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_DestroyActor) == 0x000010, "Wrong size on X6BlueprintMinBPLibrary_C_DestroyActor");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_DestroyActor, Target) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_DestroyActor::Target' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_DestroyActor, __WorldContext) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_DestroyActor::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.CreateMiniGame
// 0x0010 (0x0010 - 0x0000)
struct X6BlueprintMinBPLibrary_C_CreateMiniGame final
{
public:
	class AActor*                                 entryActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_CreateMiniGame) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_CreateMiniGame");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_CreateMiniGame) == 0x000010, "Wrong size on X6BlueprintMinBPLibrary_C_CreateMiniGame");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_CreateMiniGame, entryActor) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_CreateMiniGame::entryActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_CreateMiniGame, __WorldContext) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_CreateMiniGame::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.CheckHaveVoucherCost
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintMinBPLibrary_C_CheckHaveVoucherCost final
{
public:
	int64                                         miniGameId;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bHave;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_CheckHaveVoucherCost) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_CheckHaveVoucherCost");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_CheckHaveVoucherCost) == 0x000018, "Wrong size on X6BlueprintMinBPLibrary_C_CheckHaveVoucherCost");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_CheckHaveVoucherCost, miniGameId) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_CheckHaveVoucherCost::miniGameId' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_CheckHaveVoucherCost, __WorldContext) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_CheckHaveVoucherCost::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_CheckHaveVoucherCost, bHave) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_CheckHaveVoucherCost::bHave' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.CheckHaveVoucher
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintMinBPLibrary_C_CheckHaveVoucher final
{
public:
	int64                                         miniGameId;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bHave;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_CheckHaveVoucher) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_CheckHaveVoucher");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_CheckHaveVoucher) == 0x000018, "Wrong size on X6BlueprintMinBPLibrary_C_CheckHaveVoucher");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_CheckHaveVoucher, miniGameId) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_CheckHaveVoucher::miniGameId' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_CheckHaveVoucher, __WorldContext) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_CheckHaveVoucher::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_CheckHaveVoucher, bHave) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_CheckHaveVoucher::bHave' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.BP_QuitCurrentSuitAbility
// 0x0008 (0x0008 - 0x0000)
struct X6BlueprintMinBPLibrary_C_BP_QuitCurrentSuitAbility final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_BP_QuitCurrentSuitAbility) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_BP_QuitCurrentSuitAbility");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_BP_QuitCurrentSuitAbility) == 0x000008, "Wrong size on X6BlueprintMinBPLibrary_C_BP_QuitCurrentSuitAbility");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_BP_QuitCurrentSuitAbility, __WorldContext) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_BP_QuitCurrentSuitAbility::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.BP_GetActorsBySpawnGroupID
// 0x0020 (0x0020 - 0x0000)
struct X6BlueprintMinBPLibrary_C_BP_GetActorsBySpawnGroupID final
{
public:
	int64                                         SpawnGroupID;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actors;                                            // 0x0010(0x0010)(Parm, OutParm)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_BP_GetActorsBySpawnGroupID) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_BP_GetActorsBySpawnGroupID");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_BP_GetActorsBySpawnGroupID) == 0x000020, "Wrong size on X6BlueprintMinBPLibrary_C_BP_GetActorsBySpawnGroupID");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_BP_GetActorsBySpawnGroupID, SpawnGroupID) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_BP_GetActorsBySpawnGroupID::SpawnGroupID' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_BP_GetActorsBySpawnGroupID, __WorldContext) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_BP_GetActorsBySpawnGroupID::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_BP_GetActorsBySpawnGroupID, Actors) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_BP_GetActorsBySpawnGroupID::Actors' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.BP_GetActorBySpawnerID
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintMinBPLibrary_C_BP_GetActorBySpawnerID final
{
public:
	int64                                         SpawnerID;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_BP_GetActorBySpawnerID) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_BP_GetActorBySpawnerID");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_BP_GetActorBySpawnerID) == 0x000018, "Wrong size on X6BlueprintMinBPLibrary_C_BP_GetActorBySpawnerID");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_BP_GetActorBySpawnerID, SpawnerID) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_BP_GetActorBySpawnerID::SpawnerID' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_BP_GetActorBySpawnerID, __WorldContext) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_BP_GetActorBySpawnerID::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_BP_GetActorBySpawnerID, Actor) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_BP_GetActorBySpawnerID::Actor' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.AddMiniGameMoveCameraState
// 0x0008 (0x0008 - 0x0000)
struct X6BlueprintMinBPLibrary_C_AddMiniGameMoveCameraState final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_AddMiniGameMoveCameraState) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_AddMiniGameMoveCameraState");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_AddMiniGameMoveCameraState) == 0x000008, "Wrong size on X6BlueprintMinBPLibrary_C_AddMiniGameMoveCameraState");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_AddMiniGameMoveCameraState, __WorldContext) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_AddMiniGameMoveCameraState::__WorldContext' has a wrong offset!");

// Function X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C.ActorRotateToTarget
// 0x00E8 (0x00E8 - 0x0000)
struct X6BlueprintMinBPLibrary_C_ActorRotateToTarget final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget) == 0x000008, "Wrong alignment on X6BlueprintMinBPLibrary_C_ActorRotateToTarget");
static_assert(sizeof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget) == 0x0000E8, "Wrong size on X6BlueprintMinBPLibrary_C_ActorRotateToTarget");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, Actor) == 0x000000, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, Target) == 0x000008, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::Target' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, __WorldContext) == 0x000010, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000030, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000048, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000060, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_BreakRotator_Roll) == 0x000078, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_BreakRotator_Pitch) == 0x00007C, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_BreakRotator_Yaw) == 0x000080, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_Normal_ReturnValue) == 0x000088, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0000A0, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_BreakRotator_Roll_1) == 0x0000B8, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_BreakRotator_Pitch_1) == 0x0000BC, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_BreakRotator_Yaw_1) == 0x0000C0, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_MakeRotator_ReturnValue) == 0x0000C8, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6BlueprintMinBPLibrary_C_ActorRotateToTarget, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0000E0, "Member 'X6BlueprintMinBPLibrary_C_ActorRotateToTarget::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

}

