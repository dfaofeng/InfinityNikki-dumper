#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6ExportRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum X6ExportRuntime.EEncounterType
// NumValues: 0x0004
enum class EEncounterType : uint8
{
	OPEN_START                               = 0,
	WATCH_BOX                                = 1,
	HIDDEN_REWARD                            = 2,
	EEncounterType_MAX                       = 3,
};

// ScriptStruct X6ExportRuntime.X6SpawnerIDRef
// 0x0010 (0x0010 - 0x0000)
struct FX6SpawnerIDRef final
{
public:
	int64                                         SpawnerID;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnerActor;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6SpawnerIDRef) == 0x000008, "Wrong alignment on FX6SpawnerIDRef");
static_assert(sizeof(FX6SpawnerIDRef) == 0x000010, "Wrong size on FX6SpawnerIDRef");
static_assert(offsetof(FX6SpawnerIDRef, SpawnerID) == 0x000000, "Member 'FX6SpawnerIDRef::SpawnerID' has a wrong offset!");
static_assert(offsetof(FX6SpawnerIDRef, SpawnerActor) == 0x000008, "Member 'FX6SpawnerIDRef::SpawnerActor' has a wrong offset!");

// ScriptStruct X6ExportRuntime.EncounterMonsterGroup
// 0x0018 (0x0018 - 0x0000)
struct FEncounterMonsterGroup final
{
public:
	TArray<struct FX6SpawnerIDRef>                MonsterInfoArray;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	int32                                         RandomProbability;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterMonsterGroup) == 0x000008, "Wrong alignment on FEncounterMonsterGroup");
static_assert(sizeof(FEncounterMonsterGroup) == 0x000018, "Wrong size on FEncounterMonsterGroup");
static_assert(offsetof(FEncounterMonsterGroup, MonsterInfoArray) == 0x000000, "Member 'FEncounterMonsterGroup::MonsterInfoArray' has a wrong offset!");
static_assert(offsetof(FEncounterMonsterGroup, RandomProbability) == 0x000010, "Member 'FEncounterMonsterGroup::RandomProbability' has a wrong offset!");

// ScriptStruct X6ExportRuntime.X6LocalizationExcelToDT
// 0x0010 (0x0018 - 0x0008)
struct FX6LocalizationExcelToDT final : public FTableRowBase
{
public:
	class FText                                   Value;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6LocalizationExcelToDT) == 0x000008, "Wrong alignment on FX6LocalizationExcelToDT");
static_assert(sizeof(FX6LocalizationExcelToDT) == 0x000018, "Wrong size on FX6LocalizationExcelToDT");
static_assert(offsetof(FX6LocalizationExcelToDT, Value) == 0x000008, "Member 'FX6LocalizationExcelToDT::Value' has a wrong offset!");

// ScriptStruct X6ExportRuntime.SpawnerPropertyData
// 0x0030 (0x0030 - 0x0000)
struct FSpawnerPropertyData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnerPropertyData) == 0x000008, "Wrong alignment on FSpawnerPropertyData");
static_assert(sizeof(FSpawnerPropertyData) == 0x000030, "Wrong size on FSpawnerPropertyData");
static_assert(offsetof(FSpawnerPropertyData, Name) == 0x000000, "Member 'FSpawnerPropertyData::Name' has a wrong offset!");
static_assert(offsetof(FSpawnerPropertyData, Type) == 0x000010, "Member 'FSpawnerPropertyData::Type' has a wrong offset!");
static_assert(offsetof(FSpawnerPropertyData, Value) == 0x000020, "Member 'FSpawnerPropertyData::Value' has a wrong offset!");

// ScriptStruct X6ExportRuntime.SpawnerComponentInfo
// 0x0038 (0x0038 - 0x0000)
struct FSpawnerComponentInfo final
{
public:
	class FString                                 ComponentName;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDynamicComponent;                                // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DynamicComponentClassType;                         // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSpawnerPropertyData>           ComponentProperties;                               // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnerComponentInfo) == 0x000008, "Wrong alignment on FSpawnerComponentInfo");
static_assert(sizeof(FSpawnerComponentInfo) == 0x000038, "Wrong size on FSpawnerComponentInfo");
static_assert(offsetof(FSpawnerComponentInfo, ComponentName) == 0x000000, "Member 'FSpawnerComponentInfo::ComponentName' has a wrong offset!");
static_assert(offsetof(FSpawnerComponentInfo, IsDynamicComponent) == 0x000010, "Member 'FSpawnerComponentInfo::IsDynamicComponent' has a wrong offset!");
static_assert(offsetof(FSpawnerComponentInfo, DynamicComponentClassType) == 0x000018, "Member 'FSpawnerComponentInfo::DynamicComponentClassType' has a wrong offset!");
static_assert(offsetof(FSpawnerComponentInfo, ComponentProperties) == 0x000028, "Member 'FSpawnerComponentInfo::ComponentProperties' has a wrong offset!");

// ScriptStruct X6ExportRuntime.SpawnerActorInfo
// 0x00D0 (0x00D0 - 0x0000)
struct FSpawnerActorInfo final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorClass;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SpawnerID;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag;                                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FSpawnerPropertyData> SpawnerProperties;                              // 0x0030(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSpawnerComponentInfo> SpawnerComponentsInfo;                         // 0x0080(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnerActorInfo) == 0x000008, "Wrong alignment on FSpawnerActorInfo");
static_assert(sizeof(FSpawnerActorInfo) == 0x0000D0, "Wrong size on FSpawnerActorInfo");
static_assert(offsetof(FSpawnerActorInfo, ActorName) == 0x000000, "Member 'FSpawnerActorInfo::ActorName' has a wrong offset!");
static_assert(offsetof(FSpawnerActorInfo, ActorClass) == 0x000010, "Member 'FSpawnerActorInfo::ActorClass' has a wrong offset!");
static_assert(offsetof(FSpawnerActorInfo, SpawnerID) == 0x000020, "Member 'FSpawnerActorInfo::SpawnerID' has a wrong offset!");
static_assert(offsetof(FSpawnerActorInfo, Flag) == 0x000028, "Member 'FSpawnerActorInfo::Flag' has a wrong offset!");
static_assert(offsetof(FSpawnerActorInfo, SpawnerProperties) == 0x000030, "Member 'FSpawnerActorInfo::SpawnerProperties' has a wrong offset!");
static_assert(offsetof(FSpawnerActorInfo, SpawnerComponentsInfo) == 0x000080, "Member 'FSpawnerActorInfo::SpawnerComponentsInfo' has a wrong offset!");

// ScriptStruct X6ExportRuntime.LocTextGatherPair
// 0x0020 (0x0020 - 0x0000)
struct FLocTextGatherPair final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocTextGatherPair) == 0x000008, "Wrong alignment on FLocTextGatherPair");
static_assert(sizeof(FLocTextGatherPair) == 0x000020, "Wrong size on FLocTextGatherPair");
static_assert(offsetof(FLocTextGatherPair, Text) == 0x000000, "Member 'FLocTextGatherPair::Text' has a wrong offset!");
static_assert(offsetof(FLocTextGatherPair, String) == 0x000010, "Member 'FLocTextGatherPair::String' has a wrong offset!");

}

