#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightFunction_Setup

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CineLightingStruct_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightFunction_Setup.BP_LightFunction_Setup_C
// 0x0198 (0x0540 - 0x03A8)
class ABP_LightFunction_Setup_C final : public AActor
{
public:
	class UBillboardComponent*                    Billboard;                                         // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Light_Vector;                                      // 0x03C0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Brightness;                                    // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BPEnabled;                                         // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LF_Scale;                                          // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LF_Offset;                                         // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Shot_Index;                                        // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FoundMatch;                                        // 0x0444(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_445[0x3];                                      // 0x0445(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCineLightingStruct                    SingleShot_LightingData;                           // 0x0448(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LF_Min_Brightness;                                 // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LF_Max_Brightness;                                 // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      DirectionalLight;                                  // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Light_Rotation;                                    // 0x0510(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class ASkyLight*                              SkyLight;                                          // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Disable_Self();
	void UpdateLocalValues();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightFunction_Setup_C">();
	}
	static class ABP_LightFunction_Setup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightFunction_Setup_C>();
	}
};
static_assert(alignof(ABP_LightFunction_Setup_C) == 0x000010, "Wrong alignment on ABP_LightFunction_Setup_C");
static_assert(sizeof(ABP_LightFunction_Setup_C) == 0x000540, "Wrong size on ABP_LightFunction_Setup_C");
static_assert(offsetof(ABP_LightFunction_Setup_C, Billboard) == 0x0003A8, "Member 'ABP_LightFunction_Setup_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, Scene) == 0x0003B0, "Member 'ABP_LightFunction_Setup_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, Light_Vector) == 0x0003C0, "Member 'ABP_LightFunction_Setup_C::Light_Vector' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, Sun_Brightness) == 0x000420, "Member 'ABP_LightFunction_Setup_C::Sun_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, BPEnabled) == 0x000428, "Member 'ABP_LightFunction_Setup_C::BPEnabled' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, LF_Scale) == 0x000430, "Member 'ABP_LightFunction_Setup_C::LF_Scale' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, LF_Offset) == 0x000438, "Member 'ABP_LightFunction_Setup_C::LF_Offset' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, Shot_Index) == 0x000440, "Member 'ABP_LightFunction_Setup_C::Shot_Index' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, FoundMatch) == 0x000444, "Member 'ABP_LightFunction_Setup_C::FoundMatch' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, SingleShot_LightingData) == 0x000448, "Member 'ABP_LightFunction_Setup_C::SingleShot_LightingData' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, LF_Min_Brightness) == 0x0004F8, "Member 'ABP_LightFunction_Setup_C::LF_Min_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, LF_Max_Brightness) == 0x000500, "Member 'ABP_LightFunction_Setup_C::LF_Max_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, DirectionalLight) == 0x000508, "Member 'ABP_LightFunction_Setup_C::DirectionalLight' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, Light_Rotation) == 0x000510, "Member 'ABP_LightFunction_Setup_C::Light_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, SkyLight) == 0x000528, "Member 'ABP_LightFunction_Setup_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_LightFunction_Setup_C, Enabled) == 0x000530, "Member 'ABP_LightFunction_Setup_C::Enabled' has a wrong offset!");

}

