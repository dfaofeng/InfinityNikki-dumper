#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NikkiPlayerCameraManager_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "X6Game_classes.hpp"
#include "X6Camera_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NikkiPlayerCameraManager_BP.NikkiPlayerCameraManager_BP_C
// 0x0120 (0x7570 - 0x7450)
class ANikkiPlayerCameraManager_BP_C final : public AX6PlayerCameraManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x7450(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMulticastInlineDelegate<void(class AActor* NewViewTarget)> EventOnAssignViewTarget;             // 0x7458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_ClothCameraActor_C*                 ClothCamera;                                       // 0x7468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ClothWorldSpeed;                                   // 0x7470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LookAtCameraActor;                                 // 0x7478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAdvancedCamera*                        ViewTargetAdvancedCamera;                          // 0x7480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        DissolveDistance;                                  // 0x7488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DissolveRadius;                                    // 0x7490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultDissolveDistance;                           // 0x7498(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultDissolveRadius;                             // 0x74A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultDissolveClip;                               // 0x74A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DissolveDistanceScale;                             // 0x74B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DissolveRadiusScale;                               // 0x74B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 FocusOnTargetCameraClass;                          // 0x74C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class ABP_FocusOnTargetCamera_C*              FocusOnTargetCamera;                               // 0x74C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   BP_CameraActorCollisionName;                       // 0x74D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class FName                                   BP_CameraVolumeActorTagName;                       // 0x74D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DissolveClip;                                      // 0x74E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            DissolveClipCurve;                                 // 0x74E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_GyroControlConfig_C*                BP_GyroControlConfig;                              // 0x74F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CameraResetForbidUIClass;                          // 0x74F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        UIAutoDestroyDelayTime;                            // 0x7520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DoubleTapResetDelayTime;                           // 0x7528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FastTakePhotoResetDelayTime;                       // 0x7530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCameraResetDebug;                                 // 0x7538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7539[0x3];                                     // 0x7539(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GameplayTag;                                       // 0x753C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7544[0x4];                                     // 0x7544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* NewControlledRole)> EventOnControlledRoleChanged;    // 0x7548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* ControlledActor, class AActor* LastControlledActor)> EventOnCameraVolumeTargetControlledActorChanged; // 0x7558(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void UpdateCameraDissolveParams();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnControlledRoleChanged(class AActor* ControlledRole);
	void OnCameraVolumeTargetControlledActorChanged(class AActor* ControlledActor, class AActor* LastControlledActor);
	void OnBlendCompleted(class AActor* OldViewTarget, class AActor* NewViewTarget);
	void OnAssignViewTarget(class AActor* NewTarget);
	void ExecuteUbergraph_NikkiPlayerCameraManager_BP(int32 EntryPoint);
	void EndLookAtTarget(double BlendOutTime);
	void EndFocusOnTarget();
	void EndFocusOn();
	void BP_UpdateInteractionTime();
	void BP_GetCameraVolumeTargetControlledActor(class AActor** ControlledActor);
	void BP_DestroyInteractionCameraResetArea();
	void BP_DebugDrawAllCameraVolume();
	void BP_CreateInteractionCameraResetArea();
	void BP_CleanDrawAllCameraVolume();
	void BeginLookatTarget(class AActor* Target, double BlendInTime);
	void BeginFocusOnTarget(class AActor* TargetActor, ECameraState CameraState_0, bool bOverrideSpringArmAngle, double SpringArmAngle, bool bOverrideSpringArmLength, double springArmLength, bool bOverrideTransitionParams, const struct FViewTargetTransitionParams& TransitionParams);
	void BeginFocusOn(class AActor* FocusOnActor, const struct FFFocusOnCameraParams& FocusOnCameraParams);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NikkiPlayerCameraManager_BP_C">();
	}
	static class ANikkiPlayerCameraManager_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANikkiPlayerCameraManager_BP_C>();
	}
};
static_assert(alignof(ANikkiPlayerCameraManager_BP_C) == 0x000010, "Wrong alignment on ANikkiPlayerCameraManager_BP_C");
static_assert(sizeof(ANikkiPlayerCameraManager_BP_C) == 0x007570, "Wrong size on ANikkiPlayerCameraManager_BP_C");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, UberGraphFrame) == 0x007450, "Member 'ANikkiPlayerCameraManager_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, EventOnAssignViewTarget) == 0x007458, "Member 'ANikkiPlayerCameraManager_BP_C::EventOnAssignViewTarget' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, ClothCamera) == 0x007468, "Member 'ANikkiPlayerCameraManager_BP_C::ClothCamera' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, ClothWorldSpeed) == 0x007470, "Member 'ANikkiPlayerCameraManager_BP_C::ClothWorldSpeed' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, LookAtCameraActor) == 0x007478, "Member 'ANikkiPlayerCameraManager_BP_C::LookAtCameraActor' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, ViewTargetAdvancedCamera) == 0x007480, "Member 'ANikkiPlayerCameraManager_BP_C::ViewTargetAdvancedCamera' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, DissolveDistance) == 0x007488, "Member 'ANikkiPlayerCameraManager_BP_C::DissolveDistance' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, DissolveRadius) == 0x007490, "Member 'ANikkiPlayerCameraManager_BP_C::DissolveRadius' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, DefaultDissolveDistance) == 0x007498, "Member 'ANikkiPlayerCameraManager_BP_C::DefaultDissolveDistance' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, DefaultDissolveRadius) == 0x0074A0, "Member 'ANikkiPlayerCameraManager_BP_C::DefaultDissolveRadius' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, DefaultDissolveClip) == 0x0074A8, "Member 'ANikkiPlayerCameraManager_BP_C::DefaultDissolveClip' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, DissolveDistanceScale) == 0x0074B0, "Member 'ANikkiPlayerCameraManager_BP_C::DissolveDistanceScale' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, DissolveRadiusScale) == 0x0074B8, "Member 'ANikkiPlayerCameraManager_BP_C::DissolveRadiusScale' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, FocusOnTargetCameraClass) == 0x0074C0, "Member 'ANikkiPlayerCameraManager_BP_C::FocusOnTargetCameraClass' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, FocusOnTargetCamera) == 0x0074C8, "Member 'ANikkiPlayerCameraManager_BP_C::FocusOnTargetCamera' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, BP_CameraActorCollisionName) == 0x0074D0, "Member 'ANikkiPlayerCameraManager_BP_C::BP_CameraActorCollisionName' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, BP_CameraVolumeActorTagName) == 0x0074D8, "Member 'ANikkiPlayerCameraManager_BP_C::BP_CameraVolumeActorTagName' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, DissolveClip) == 0x0074E0, "Member 'ANikkiPlayerCameraManager_BP_C::DissolveClip' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, DissolveClipCurve) == 0x0074E8, "Member 'ANikkiPlayerCameraManager_BP_C::DissolveClipCurve' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, BP_GyroControlConfig) == 0x0074F0, "Member 'ANikkiPlayerCameraManager_BP_C::BP_GyroControlConfig' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, CameraResetForbidUIClass) == 0x0074F8, "Member 'ANikkiPlayerCameraManager_BP_C::CameraResetForbidUIClass' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, UIAutoDestroyDelayTime) == 0x007520, "Member 'ANikkiPlayerCameraManager_BP_C::UIAutoDestroyDelayTime' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, DoubleTapResetDelayTime) == 0x007528, "Member 'ANikkiPlayerCameraManager_BP_C::DoubleTapResetDelayTime' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, FastTakePhotoResetDelayTime) == 0x007530, "Member 'ANikkiPlayerCameraManager_BP_C::FastTakePhotoResetDelayTime' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, bCameraResetDebug) == 0x007538, "Member 'ANikkiPlayerCameraManager_BP_C::bCameraResetDebug' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, GameplayTag) == 0x00753C, "Member 'ANikkiPlayerCameraManager_BP_C::GameplayTag' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, EventOnControlledRoleChanged) == 0x007548, "Member 'ANikkiPlayerCameraManager_BP_C::EventOnControlledRoleChanged' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerCameraManager_BP_C, EventOnCameraVolumeTargetControlledActorChanged) == 0x007558, "Member 'ANikkiPlayerCameraManager_BP_C::EventOnCameraVolumeTargetControlledActorChanged' has a wrong offset!");

}

