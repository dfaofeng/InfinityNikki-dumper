#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AndroidRuntimeSettings

#include "Basic.hpp"

#include "AndroidRuntimeSettings_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AudioPlatformConfiguration_structs.hpp"


namespace SDK
{

// Class AndroidRuntimeSettings.AndroidRuntimeSettings
// 0x0340 (0x0368 - 0x0028)
class UAndroidRuntimeSettings final : public UObject
{
public:
	class FString                                 PackageName;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StoreVersion;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StoreVersionOffsetArm64;                           // 0x003C(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StoreVersionOffsetX8664;                           // 0x0040(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ApplicationDisplayName;                            // 0x0048(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VersionDisplayName;                                // 0x0058(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinSDKVersion;                                     // 0x0068(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetSDKVersion;                                  // 0x006C(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAndroidInstallLocation                       InstallLocation;                                   // 0x0070(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLint;                                       // 0x0071(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPackageDataInsideApk;                             // 0x0072(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateAllPlatformsInstall;                        // 0x0073(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableVerifyOBBOnStartUp;                        // 0x0074(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSmallOBBFiles;                               // 0x0075(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowLargeOBBFiles;                               // 0x0076(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPatchOBBFile;                                // 0x0077(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowOverflowOBBFiles;                            // 0x0078(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDontBundleLibrariesInAPK;                         // 0x0079(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseExternalFilesDir;                              // 0x007A(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPublicLogFiles;                                   // 0x007B(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAndroidScreenOrientation                     Orientation;                                       // 0x007C(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAspectRatio;                                    // 0x0080(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDisplayCutout;                                 // 0x0084(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowResizing;                                    // 0x0085(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportSizeChanges;                               // 0x0086(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoreNotificationsOnReboot;                     // 0x0087(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullScreen;                                       // 0x0088(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableNewKeyboard;                                // 0x0089(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAndroidDepthBufferPreference                 DepthBufferPreference;                             // 0x008A(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidateTextureFormats;                           // 0x008B(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceCompressNativeLibs;                          // 0x008C(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAdvancedBinaryCompression;                  // 0x008D(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBundle;                                     // 0x008E(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUniversalAPK;                               // 0x008F(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBundleABISplit;                                   // 0x0090(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBundleLanguageSplit;                              // 0x0091(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBundleDensitySplit;                               // 0x0092(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ExtraManifestNodeTags;                             // 0x0098(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExtraApplicationNodeTags;                          // 0x00A8(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class FString                                 ExtraApplicationSettings;                          // 0x00B8(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExtraActivityNodeTags;                             // 0x00C8(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class FString                                 ExtraActivitySettings;                             // 0x00D8(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExtraPermissions;                                  // 0x00E8(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	bool                                          bAndroidVoiceEnabled;                              // 0x00F8(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordPermissionAtStartupEnabled;                 // 0x00F9(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMulticastSupport;                           // 0x00FA(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EOculusMobileDevice>                   PackageForOculusMobile;                            // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPackageForMetaQuest;                              // 0x0110(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveOSIG;                                       // 0x0111(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 KeyStore;                                          // 0x0118(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyAlias;                                          // 0x0128(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyStorePassword;                                  // 0x0138(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyPassword;                                       // 0x0148(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildForArm64;                                    // 0x0158(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildForX8664;                                    // 0x0159(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildForES31;                                     // 0x015A(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildForESSimulator;                              // 0x015B(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAndroidSimulatorDevice                       ESSimulatorDevice;                                 // 0x015C(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsVulkan;                                   // 0x015D(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsVulkanSM5;                                // 0x015E(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableDebuggableOverride;                        // 0x015F(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableMinifyOverride;                            // 0x0160(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportUnrealSoReplaced;                          // 0x0161(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GradleBuildVersionOverride;                        // 0x0168(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ThirdPartySoNamesReplaced;                         // 0x0178(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         DebugVulkanLayerDirectory;                         // 0x0188(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DebugVulkanDeviceLayers;                           // 0x0198(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<class FString>                         DebugVulkanInstanceLayers;                         // 0x01A8(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	bool                                          bAndroidOpenGLSupportsBackbufferSampling;          // 0x01B8(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetectVulkanByDefault;                            // 0x01B9(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBuildWithHiddenSymbolVisibility;                  // 0x01BA(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableStackProtector;                            // 0x01BB(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableLibCppSharedDependencyValidation;          // 0x01BC(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveSymbols;                                      // 0x01BD(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStripShaderReflection;                            // 0x01BE(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGooglePlaySupport;                          // 0x01BF(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestCodeForPlayGamesActivities;                 // 0x01C0(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayGamesClientId;                                 // 0x01C8(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRefreshToken;                                // 0x01D8(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GamesAppID;                                        // 0x01E0(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGooglePlayAchievementMapping>  AchievementMap;                                    // 0x01F0(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FGooglePlayLeaderboardMapping>  LeaderboardMap;                                    // 0x0200(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	bool                                          bSupportAdMob;                                     // 0x0210(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdMobAppID;                                        // 0x0218(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETagForChildDirectedTreatment                 TagForChildDirectedTreatment;                      // 0x0228(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETagForUnderAgeOfConsent                      TagForUnderAgeOfConsent;                           // 0x0229(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaxAdContentRating                           MaxAdContentRating;                                // 0x022A(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B[0x5];                                      // 0x022B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdMobAdUnitID;                                     // 0x0230(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AdMobAdUnitIDs;                                    // 0x0240(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class FString                                 GooglePlayLicenseKey;                              // 0x0250(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GCMClientSenderID;                                 // 0x0260(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLaunchImage;                                  // 0x0270(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowIMU;                                         // 0x0271(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowControllers;                                 // 0x0272(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockAndroidKeysOnControllers;                    // 0x0273(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControllersBlockDeviceFeedback;                   // 0x0274(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAndroidAudio                                 AndroidAudio;                                      // 0x0275(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_276[0x2];                                      // 0x0276(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AudioSampleRate;                                   // 0x0278(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioCallbackBufferFrameSize;                      // 0x027C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioNumBuffersToEnqueue;                          // 0x0280(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioMaxChannels;                                  // 0x0284(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioNumSourceWorkers;                             // 0x0288(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpatializationPlugin;                              // 0x0290(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceDataOverridePlugin;                          // 0x02A0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReverbPlugin;                                      // 0x02B0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OcclusionPlugin;                                   // 0x02C0(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlatformRuntimeAudioCompressionOverrides CompressionOverrides;                           // 0x02D0(0x0010)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         CacheSizeKB;                                       // 0x02E0(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxChunkSizeOverrideKB;                            // 0x02E4(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResampleForDevice;                                // 0x02E8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SoundCueCookQualityIndex;                          // 0x02EC(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSampleRate;                                     // 0x02F0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighSampleRate;                                    // 0x02F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MedSampleRate;                                     // 0x02F8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowSampleRate;                                     // 0x02FC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSampleRate;                                     // 0x0300(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompressionQualityModifier;                        // 0x0304(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoStreamingThreshold;                            // 0x0308(0x0004)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAndroidGraphicsDebugger                      AndroidGraphicsDebugger;                           // 0x030C(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         MaliGraphicsDebuggerPath;                          // 0x0310(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMaliPerfCounters;                           // 0x0320(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiTargetFormat_ETC2;                           // 0x0321(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiTargetFormat_DXT;                            // 0x0322(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiTargetFormat_ASTC;                           // 0x0323(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureFormatPriority_ETC2;                        // 0x0324(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureFormatPriority_DXT;                         // 0x0328(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureFormatPriority_ASTC;                        // 0x032C(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKAPILevelOverride;                               // 0x0330(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NDKAPILevelOverride;                               // 0x0340(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildToolsOverride;                                // 0x0350(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStreamLandscapeMeshLODs;                          // 0x0360(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDomStorage;                                 // 0x0361(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_362[0x6];                                      // 0x0362(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AndroidRuntimeSettings">();
	}
	static class UAndroidRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAndroidRuntimeSettings>();
	}
};
static_assert(alignof(UAndroidRuntimeSettings) == 0x000008, "Wrong alignment on UAndroidRuntimeSettings");
static_assert(sizeof(UAndroidRuntimeSettings) == 0x000368, "Wrong size on UAndroidRuntimeSettings");
static_assert(offsetof(UAndroidRuntimeSettings, PackageName) == 0x000028, "Member 'UAndroidRuntimeSettings::PackageName' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, StoreVersion) == 0x000038, "Member 'UAndroidRuntimeSettings::StoreVersion' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, StoreVersionOffsetArm64) == 0x00003C, "Member 'UAndroidRuntimeSettings::StoreVersionOffsetArm64' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, StoreVersionOffsetX8664) == 0x000040, "Member 'UAndroidRuntimeSettings::StoreVersionOffsetX8664' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, ApplicationDisplayName) == 0x000048, "Member 'UAndroidRuntimeSettings::ApplicationDisplayName' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, VersionDisplayName) == 0x000058, "Member 'UAndroidRuntimeSettings::VersionDisplayName' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, MinSDKVersion) == 0x000068, "Member 'UAndroidRuntimeSettings::MinSDKVersion' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, TargetSDKVersion) == 0x00006C, "Member 'UAndroidRuntimeSettings::TargetSDKVersion' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, InstallLocation) == 0x000070, "Member 'UAndroidRuntimeSettings::InstallLocation' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bEnableLint) == 0x000071, "Member 'UAndroidRuntimeSettings::bEnableLint' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bPackageDataInsideApk) == 0x000072, "Member 'UAndroidRuntimeSettings::bPackageDataInsideApk' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bCreateAllPlatformsInstall) == 0x000073, "Member 'UAndroidRuntimeSettings::bCreateAllPlatformsInstall' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bDisableVerifyOBBOnStartUp) == 0x000074, "Member 'UAndroidRuntimeSettings::bDisableVerifyOBBOnStartUp' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bForceSmallOBBFiles) == 0x000075, "Member 'UAndroidRuntimeSettings::bForceSmallOBBFiles' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bAllowLargeOBBFiles) == 0x000076, "Member 'UAndroidRuntimeSettings::bAllowLargeOBBFiles' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bAllowPatchOBBFile) == 0x000077, "Member 'UAndroidRuntimeSettings::bAllowPatchOBBFile' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bAllowOverflowOBBFiles) == 0x000078, "Member 'UAndroidRuntimeSettings::bAllowOverflowOBBFiles' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bDontBundleLibrariesInAPK) == 0x000079, "Member 'UAndroidRuntimeSettings::bDontBundleLibrariesInAPK' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bUseExternalFilesDir) == 0x00007A, "Member 'UAndroidRuntimeSettings::bUseExternalFilesDir' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bPublicLogFiles) == 0x00007B, "Member 'UAndroidRuntimeSettings::bPublicLogFiles' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, Orientation) == 0x00007C, "Member 'UAndroidRuntimeSettings::Orientation' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, MaxAspectRatio) == 0x000080, "Member 'UAndroidRuntimeSettings::MaxAspectRatio' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bUseDisplayCutout) == 0x000084, "Member 'UAndroidRuntimeSettings::bUseDisplayCutout' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bAllowResizing) == 0x000085, "Member 'UAndroidRuntimeSettings::bAllowResizing' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bSupportSizeChanges) == 0x000086, "Member 'UAndroidRuntimeSettings::bSupportSizeChanges' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bRestoreNotificationsOnReboot) == 0x000087, "Member 'UAndroidRuntimeSettings::bRestoreNotificationsOnReboot' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bFullScreen) == 0x000088, "Member 'UAndroidRuntimeSettings::bFullScreen' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bEnableNewKeyboard) == 0x000089, "Member 'UAndroidRuntimeSettings::bEnableNewKeyboard' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, DepthBufferPreference) == 0x00008A, "Member 'UAndroidRuntimeSettings::DepthBufferPreference' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bValidateTextureFormats) == 0x00008B, "Member 'UAndroidRuntimeSettings::bValidateTextureFormats' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bForceCompressNativeLibs) == 0x00008C, "Member 'UAndroidRuntimeSettings::bForceCompressNativeLibs' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bEnableAdvancedBinaryCompression) == 0x00008D, "Member 'UAndroidRuntimeSettings::bEnableAdvancedBinaryCompression' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bEnableBundle) == 0x00008E, "Member 'UAndroidRuntimeSettings::bEnableBundle' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bEnableUniversalAPK) == 0x00008F, "Member 'UAndroidRuntimeSettings::bEnableUniversalAPK' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bBundleABISplit) == 0x000090, "Member 'UAndroidRuntimeSettings::bBundleABISplit' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bBundleLanguageSplit) == 0x000091, "Member 'UAndroidRuntimeSettings::bBundleLanguageSplit' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bBundleDensitySplit) == 0x000092, "Member 'UAndroidRuntimeSettings::bBundleDensitySplit' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, ExtraManifestNodeTags) == 0x000098, "Member 'UAndroidRuntimeSettings::ExtraManifestNodeTags' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, ExtraApplicationNodeTags) == 0x0000A8, "Member 'UAndroidRuntimeSettings::ExtraApplicationNodeTags' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, ExtraApplicationSettings) == 0x0000B8, "Member 'UAndroidRuntimeSettings::ExtraApplicationSettings' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, ExtraActivityNodeTags) == 0x0000C8, "Member 'UAndroidRuntimeSettings::ExtraActivityNodeTags' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, ExtraActivitySettings) == 0x0000D8, "Member 'UAndroidRuntimeSettings::ExtraActivitySettings' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, ExtraPermissions) == 0x0000E8, "Member 'UAndroidRuntimeSettings::ExtraPermissions' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bAndroidVoiceEnabled) == 0x0000F8, "Member 'UAndroidRuntimeSettings::bAndroidVoiceEnabled' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bRecordPermissionAtStartupEnabled) == 0x0000F9, "Member 'UAndroidRuntimeSettings::bRecordPermissionAtStartupEnabled' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bEnableMulticastSupport) == 0x0000FA, "Member 'UAndroidRuntimeSettings::bEnableMulticastSupport' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, PackageForOculusMobile) == 0x000100, "Member 'UAndroidRuntimeSettings::PackageForOculusMobile' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bPackageForMetaQuest) == 0x000110, "Member 'UAndroidRuntimeSettings::bPackageForMetaQuest' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bRemoveOSIG) == 0x000111, "Member 'UAndroidRuntimeSettings::bRemoveOSIG' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, KeyStore) == 0x000118, "Member 'UAndroidRuntimeSettings::KeyStore' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, KeyAlias) == 0x000128, "Member 'UAndroidRuntimeSettings::KeyAlias' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, KeyStorePassword) == 0x000138, "Member 'UAndroidRuntimeSettings::KeyStorePassword' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, KeyPassword) == 0x000148, "Member 'UAndroidRuntimeSettings::KeyPassword' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bBuildForArm64) == 0x000158, "Member 'UAndroidRuntimeSettings::bBuildForArm64' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bBuildForX8664) == 0x000159, "Member 'UAndroidRuntimeSettings::bBuildForX8664' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bBuildForES31) == 0x00015A, "Member 'UAndroidRuntimeSettings::bBuildForES31' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bBuildForESSimulator) == 0x00015B, "Member 'UAndroidRuntimeSettings::bBuildForESSimulator' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, ESSimulatorDevice) == 0x00015C, "Member 'UAndroidRuntimeSettings::ESSimulatorDevice' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bSupportsVulkan) == 0x00015D, "Member 'UAndroidRuntimeSettings::bSupportsVulkan' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bSupportsVulkanSM5) == 0x00015E, "Member 'UAndroidRuntimeSettings::bSupportsVulkanSM5' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bDisableDebuggableOverride) == 0x00015F, "Member 'UAndroidRuntimeSettings::bDisableDebuggableOverride' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bDisableMinifyOverride) == 0x000160, "Member 'UAndroidRuntimeSettings::bDisableMinifyOverride' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bSupportUnrealSoReplaced) == 0x000161, "Member 'UAndroidRuntimeSettings::bSupportUnrealSoReplaced' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, GradleBuildVersionOverride) == 0x000168, "Member 'UAndroidRuntimeSettings::GradleBuildVersionOverride' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, ThirdPartySoNamesReplaced) == 0x000178, "Member 'UAndroidRuntimeSettings::ThirdPartySoNamesReplaced' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, DebugVulkanLayerDirectory) == 0x000188, "Member 'UAndroidRuntimeSettings::DebugVulkanLayerDirectory' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, DebugVulkanDeviceLayers) == 0x000198, "Member 'UAndroidRuntimeSettings::DebugVulkanDeviceLayers' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, DebugVulkanInstanceLayers) == 0x0001A8, "Member 'UAndroidRuntimeSettings::DebugVulkanInstanceLayers' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bAndroidOpenGLSupportsBackbufferSampling) == 0x0001B8, "Member 'UAndroidRuntimeSettings::bAndroidOpenGLSupportsBackbufferSampling' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bDetectVulkanByDefault) == 0x0001B9, "Member 'UAndroidRuntimeSettings::bDetectVulkanByDefault' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bBuildWithHiddenSymbolVisibility) == 0x0001BA, "Member 'UAndroidRuntimeSettings::bBuildWithHiddenSymbolVisibility' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bDisableStackProtector) == 0x0001BB, "Member 'UAndroidRuntimeSettings::bDisableStackProtector' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bDisableLibCppSharedDependencyValidation) == 0x0001BC, "Member 'UAndroidRuntimeSettings::bDisableLibCppSharedDependencyValidation' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bSaveSymbols) == 0x0001BD, "Member 'UAndroidRuntimeSettings::bSaveSymbols' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bStripShaderReflection) == 0x0001BE, "Member 'UAndroidRuntimeSettings::bStripShaderReflection' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bEnableGooglePlaySupport) == 0x0001BF, "Member 'UAndroidRuntimeSettings::bEnableGooglePlaySupport' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, RequestCodeForPlayGamesActivities) == 0x0001C0, "Member 'UAndroidRuntimeSettings::RequestCodeForPlayGamesActivities' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, PlayGamesClientId) == 0x0001C8, "Member 'UAndroidRuntimeSettings::PlayGamesClientId' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bForceRefreshToken) == 0x0001D8, "Member 'UAndroidRuntimeSettings::bForceRefreshToken' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, GamesAppID) == 0x0001E0, "Member 'UAndroidRuntimeSettings::GamesAppID' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AchievementMap) == 0x0001F0, "Member 'UAndroidRuntimeSettings::AchievementMap' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, LeaderboardMap) == 0x000200, "Member 'UAndroidRuntimeSettings::LeaderboardMap' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bSupportAdMob) == 0x000210, "Member 'UAndroidRuntimeSettings::bSupportAdMob' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AdMobAppID) == 0x000218, "Member 'UAndroidRuntimeSettings::AdMobAppID' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, TagForChildDirectedTreatment) == 0x000228, "Member 'UAndroidRuntimeSettings::TagForChildDirectedTreatment' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, TagForUnderAgeOfConsent) == 0x000229, "Member 'UAndroidRuntimeSettings::TagForUnderAgeOfConsent' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, MaxAdContentRating) == 0x00022A, "Member 'UAndroidRuntimeSettings::MaxAdContentRating' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AdMobAdUnitID) == 0x000230, "Member 'UAndroidRuntimeSettings::AdMobAdUnitID' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AdMobAdUnitIDs) == 0x000240, "Member 'UAndroidRuntimeSettings::AdMobAdUnitIDs' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, GooglePlayLicenseKey) == 0x000250, "Member 'UAndroidRuntimeSettings::GooglePlayLicenseKey' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, GCMClientSenderID) == 0x000260, "Member 'UAndroidRuntimeSettings::GCMClientSenderID' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bShowLaunchImage) == 0x000270, "Member 'UAndroidRuntimeSettings::bShowLaunchImage' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bAllowIMU) == 0x000271, "Member 'UAndroidRuntimeSettings::bAllowIMU' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bAllowControllers) == 0x000272, "Member 'UAndroidRuntimeSettings::bAllowControllers' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bBlockAndroidKeysOnControllers) == 0x000273, "Member 'UAndroidRuntimeSettings::bBlockAndroidKeysOnControllers' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bControllersBlockDeviceFeedback) == 0x000274, "Member 'UAndroidRuntimeSettings::bControllersBlockDeviceFeedback' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AndroidAudio) == 0x000275, "Member 'UAndroidRuntimeSettings::AndroidAudio' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AudioSampleRate) == 0x000278, "Member 'UAndroidRuntimeSettings::AudioSampleRate' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AudioCallbackBufferFrameSize) == 0x00027C, "Member 'UAndroidRuntimeSettings::AudioCallbackBufferFrameSize' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AudioNumBuffersToEnqueue) == 0x000280, "Member 'UAndroidRuntimeSettings::AudioNumBuffersToEnqueue' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AudioMaxChannels) == 0x000284, "Member 'UAndroidRuntimeSettings::AudioMaxChannels' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AudioNumSourceWorkers) == 0x000288, "Member 'UAndroidRuntimeSettings::AudioNumSourceWorkers' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, SpatializationPlugin) == 0x000290, "Member 'UAndroidRuntimeSettings::SpatializationPlugin' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, SourceDataOverridePlugin) == 0x0002A0, "Member 'UAndroidRuntimeSettings::SourceDataOverridePlugin' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, ReverbPlugin) == 0x0002B0, "Member 'UAndroidRuntimeSettings::ReverbPlugin' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, OcclusionPlugin) == 0x0002C0, "Member 'UAndroidRuntimeSettings::OcclusionPlugin' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, CompressionOverrides) == 0x0002D0, "Member 'UAndroidRuntimeSettings::CompressionOverrides' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, CacheSizeKB) == 0x0002E0, "Member 'UAndroidRuntimeSettings::CacheSizeKB' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, MaxChunkSizeOverrideKB) == 0x0002E4, "Member 'UAndroidRuntimeSettings::MaxChunkSizeOverrideKB' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bResampleForDevice) == 0x0002E8, "Member 'UAndroidRuntimeSettings::bResampleForDevice' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, SoundCueCookQualityIndex) == 0x0002EC, "Member 'UAndroidRuntimeSettings::SoundCueCookQualityIndex' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, MaxSampleRate) == 0x0002F0, "Member 'UAndroidRuntimeSettings::MaxSampleRate' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, HighSampleRate) == 0x0002F4, "Member 'UAndroidRuntimeSettings::HighSampleRate' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, MedSampleRate) == 0x0002F8, "Member 'UAndroidRuntimeSettings::MedSampleRate' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, LowSampleRate) == 0x0002FC, "Member 'UAndroidRuntimeSettings::LowSampleRate' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, MinSampleRate) == 0x000300, "Member 'UAndroidRuntimeSettings::MinSampleRate' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, CompressionQualityModifier) == 0x000304, "Member 'UAndroidRuntimeSettings::CompressionQualityModifier' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AutoStreamingThreshold) == 0x000308, "Member 'UAndroidRuntimeSettings::AutoStreamingThreshold' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, AndroidGraphicsDebugger) == 0x00030C, "Member 'UAndroidRuntimeSettings::AndroidGraphicsDebugger' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, MaliGraphicsDebuggerPath) == 0x000310, "Member 'UAndroidRuntimeSettings::MaliGraphicsDebuggerPath' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bEnableMaliPerfCounters) == 0x000320, "Member 'UAndroidRuntimeSettings::bEnableMaliPerfCounters' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bMultiTargetFormat_ETC2) == 0x000321, "Member 'UAndroidRuntimeSettings::bMultiTargetFormat_ETC2' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bMultiTargetFormat_DXT) == 0x000322, "Member 'UAndroidRuntimeSettings::bMultiTargetFormat_DXT' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bMultiTargetFormat_ASTC) == 0x000323, "Member 'UAndroidRuntimeSettings::bMultiTargetFormat_ASTC' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, TextureFormatPriority_ETC2) == 0x000324, "Member 'UAndroidRuntimeSettings::TextureFormatPriority_ETC2' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, TextureFormatPriority_DXT) == 0x000328, "Member 'UAndroidRuntimeSettings::TextureFormatPriority_DXT' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, TextureFormatPriority_ASTC) == 0x00032C, "Member 'UAndroidRuntimeSettings::TextureFormatPriority_ASTC' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, SDKAPILevelOverride) == 0x000330, "Member 'UAndroidRuntimeSettings::SDKAPILevelOverride' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, NDKAPILevelOverride) == 0x000340, "Member 'UAndroidRuntimeSettings::NDKAPILevelOverride' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, BuildToolsOverride) == 0x000350, "Member 'UAndroidRuntimeSettings::BuildToolsOverride' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bStreamLandscapeMeshLODs) == 0x000360, "Member 'UAndroidRuntimeSettings::bStreamLandscapeMeshLODs' has a wrong offset!");
static_assert(offsetof(UAndroidRuntimeSettings, bEnableDomStorage) == 0x000361, "Member 'UAndroidRuntimeSettings::bEnableDomStorage' has a wrong offset!");

}

