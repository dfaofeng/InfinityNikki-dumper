#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperStreamingRuntime

#include "Basic.hpp"

#include "PaperStreamingRuntime_classes.hpp"
#include "PaperStreamingRuntime_parameters.hpp"


namespace SDK
{

// Function PaperStreamingRuntime.PaperPSOPrecachingApplyRenderTargetSettings.Get
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bForceReload                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ConfigPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPaperPSOPrecachingApplyRenderTargetSettings*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPaperPSOPrecachingApplyRenderTargetSettings* UPaperPSOPrecachingApplyRenderTargetSettings::Get(bool bForceReload, const class FString& ConfigPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperPSOPrecachingApplyRenderTargetSettings", "Get");

	Params::PaperPSOPrecachingApplyRenderTargetSettings_Get Parms{};

	Parms.bForceReload = bForceReload;
	Parms.ConfigPath = std::move(ConfigPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperPSOPrecachingApplyRenderTargetSettings.RegisterExtension
// (Final, Native, Public, BlueprintCallable)

void UPaperPSOPrecachingApplyRenderTargetSettings::RegisterExtension()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperPSOPrecachingApplyRenderTargetSettings", "RegisterExtension");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperPSOPrecachingApplyRenderTargetSettings.SetStartupQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InQuality                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperPSOPrecachingApplyRenderTargetSettings::SetStartupQuality(int32 InQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperPSOPrecachingApplyRenderTargetSettings", "SetStartupQuality");

	Params::PaperPSOPrecachingApplyRenderTargetSettings_SetStartupQuality Parms{};

	Parms.InQuality = InQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperPSOPrecachingApplyRenderTargetSettings.UnregisterExtension
// (Final, Native, Public, BlueprintCallable)

void UPaperPSOPrecachingApplyRenderTargetSettings::UnregisterExtension()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperPSOPrecachingApplyRenderTargetSettings", "UnregisterExtension");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetActorLayers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UPaperStreamingSubsystem::GetActorLayers(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperStreamingSubsystem", "GetActorLayers");

	Params::PaperStreamingSubsystem_GetActorLayers Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetBigWorldPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPaperStreamingSubsystem::GetBigWorldPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperStreamingSubsystem", "GetBigWorldPath");

	Params::PaperStreamingSubsystem_GetBigWorldPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetEffectivePreviewPlatformName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPaperStreamingSubsystem::GetEffectivePreviewPlatformName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperStreamingSubsystem", "GetEffectivePreviewPlatformName");

	Params::PaperStreamingSubsystem_GetEffectivePreviewPlatformName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.Instance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPaperStreamingSubsystem*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPaperStreamingSubsystem* UPaperStreamingSubsystem::Instance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperStreamingSubsystem", "Instance");

	Params::PaperStreamingSubsystem_Instance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsBigWorldMap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::IsBigWorldMap(const class FString& InPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperStreamingSubsystem", "IsBigWorldMap");

	Params::PaperStreamingSubsystem_IsBigWorldMap Parms{};

	Parms.InPath = std::move(InPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsNeedLoadingInLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::IsNeedLoadingInLocation(const struct FVector& InLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperStreamingSubsystem", "IsNeedLoadingInLocation");

	Params::PaperStreamingSubsystem_IsNeedLoadingInLocation Parms{};

	Parms.InLocation = std::move(InLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.AddOrUpdateExtraStreamingSource
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContextObject                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InSourceTag                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<int32, int32>&               InStreamerRange                                        (Parm, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::AddOrUpdateExtraStreamingSource(class UObject* InWorldContextObject, const class FString& InSourceTag, const struct FVector& InLocation, float InScale, const TMap<int32, int32>& InStreamerRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "AddOrUpdateExtraStreamingSource");

	Params::PaperStreamingSubsystem_AddOrUpdateExtraStreamingSource Parms{};

	Parms.InWorldContextObject = InWorldContextObject;
	Parms.InSourceTag = std::move(InSourceTag);
	Parms.InLocation = std::move(InLocation);
	Parms.InScale = InScale;
	Parms.InStreamerRange = std::move(InStreamerRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.BindLayerChangedEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InLayerName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<class AActor*>& Actors, bool IsAdd)>InOnLayerChanged                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::BindLayerChangedEvent(const class FString& InLayerName, TDelegate<void(const TArray<class AActor*>& Actors, bool IsAdd)> InOnLayerChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "BindLayerChangedEvent");

	Params::PaperStreamingSubsystem_BindLayerChangedEvent Parms{};

	Parms.InLayerName = std::move(InLayerName);
	Parms.InOnLayerChanged = InOnLayerChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.BindLayerVisibilityChangedEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InLayerName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<class AActor*>& Actors, bool IsVisible)>InOnLayerVisibilityChanged                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::BindLayerVisibilityChangedEvent(const class FString& InLayerName, TDelegate<void(const TArray<class AActor*>& Actors, bool IsVisible)> InOnLayerVisibilityChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "BindLayerVisibilityChangedEvent");

	Params::PaperStreamingSubsystem_BindLayerVisibilityChangedEvent Parms{};

	Parms.InLayerName = std::move(InLayerName);
	Parms.InOnLayerVisibilityChanged = InOnLayerVisibilityChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.ClearExternalDistance
// (Final, Native, Public, BlueprintCallable)

void UPaperStreamingSubsystem::ClearExternalDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "ClearExternalDistance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.ClearLayersVisibility
// (Final, Native, Public, BlueprintCallable)

void UPaperStreamingSubsystem::ClearLayersVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "ClearLayersVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.EnableGrassUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::EnableGrassUpdate(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "EnableGrassUpdate");

	Params::PaperStreamingSubsystem_EnableGrassUpdate Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.EnableVirtualTextureUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::EnableVirtualTextureUpdate(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "EnableVirtualTextureUpdate");

	Params::PaperStreamingSubsystem_EnableVirtualTextureUpdate Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.ForceUpdateAllLayersVisibility
// (Final, Native, Public, BlueprintCallable)

void UPaperStreamingSubsystem::ForceUpdateAllLayersVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "ForceUpdateAllLayersVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.Freeze
// (Final, Native, Public, BlueprintCallable)

void UPaperStreamingSubsystem::Freeze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "Freeze");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GatherExternalLevels
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContextObject                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::GatherExternalLevels(class UObject* InWorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GatherExternalLevels");

	Params::PaperStreamingSubsystem_GatherExternalLevels Parms{};

	Parms.InWorldContextObject = InWorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetActorsByLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    LayerName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<class AActor*> UPaperStreamingSubsystem::GetActorsByLayer(const class FString& LayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetActorsByLayer");

	Params::PaperStreamingSubsystem_GetActorsByLayer Parms{};

	Parms.LayerName = std::move(LayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetAllSocketNames
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UPaperStreamingSubsystem::GetAllSocketNames(class USceneComponent* InComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetAllSocketNames");

	Params::PaperStreamingSubsystem_GetAllSocketNames Parms{};

	Parms.InComponent = InComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCellCollisionActiveCells
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FIntPoint>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FIntPoint> UPaperStreamingSubsystem::GetCellCollisionActiveCells()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetCellCollisionActiveCells");

	Params::PaperStreamingSubsystem_GetCellCollisionActiveCells Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCellCollisionStateInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TMap<struct FIntPoint, bool>            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<struct FIntPoint, bool> UPaperStreamingSubsystem::GetCellCollisionStateInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetCellCollisionStateInfo");

	Params::PaperStreamingSubsystem_GetCellCollisionStateInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCellCollisionStateLevelInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UPaperStreamingSubsystem::GetCellCollisionStateLevelInfo(int32 X, int32 Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetCellCollisionStateLevelInfo");

	Params::PaperStreamingSubsystem_GetCellCollisionStateLevelInfo Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCellInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPaperStreamingSubsystem::GetCellInfo(int32 X, int32 Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetCellInfo");

	Params::PaperStreamingSubsystem_GetCellInfo Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCollisionStreamingInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const float                             InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InFilterName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FVector2D, int32>*          CollisionInfos                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPaperStreamingSubsystem::GetCollisionStreamingInfo(const float InRange, const class FString& InFilterName, TMap<struct FVector2D, int32>* CollisionInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetCollisionStreamingInfo");

	Params::PaperStreamingSubsystem_GetCollisionStreamingInfo Parms{};

	Parms.InRange = InRange;
	Parms.InFilterName = std::move(InFilterName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CollisionInfos != nullptr)
		*CollisionInfos = std::move(Parms.CollisionInfos);

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCollisionStreamingRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPaperStreamingSubsystem::GetCollisionStreamingRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetCollisionStreamingRange");

	Params::PaperStreamingSubsystem_GetCollisionStreamingRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetCurrentWorldTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPaperStreamingSubsystem::GetCurrentWorldTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetCurrentWorldTag");

	Params::PaperStreamingSubsystem_GetCurrentWorldTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetLevelStreaming
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContextObject                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelStreaming*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULevelStreaming* UPaperStreamingSubsystem::GetLevelStreaming(class UObject* InWorldContextObject, const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetLevelStreaming");

	Params::PaperStreamingSubsystem_GetLevelStreaming Parms{};

	Parms.InWorldContextObject = InWorldContextObject;
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetPaperPartitionCellSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPaperStreamingSubsystem::GetPaperPartitionCellSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetPaperPartitionCellSize");

	Params::PaperStreamingSubsystem_GetPaperPartitionCellSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetPaperPartitionCollisionRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPaperStreamingSubsystem::GetPaperPartitionCollisionRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetPaperPartitionCollisionRange");

	Params::PaperStreamingSubsystem_GetPaperPartitionCollisionRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetSocketLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InSocketName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UPaperStreamingSubsystem::GetSocketLocation(class USceneComponent* InComponent, class FName InSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetSocketLocation");

	Params::PaperStreamingSubsystem_GetSocketLocation Parms{};

	Parms.InComponent = InComponent;
	Parms.InSocketName = InSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetSocketQuaternion
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InSocketName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat UPaperStreamingSubsystem::GetSocketQuaternion(class USceneComponent* InComponent, class FName InSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetSocketQuaternion");

	Params::PaperStreamingSubsystem_GetSocketQuaternion Parms{};

	Parms.InComponent = InComponent;
	Parms.InSocketName = InSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetSocketRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InSocketName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UPaperStreamingSubsystem::GetSocketRotation(class USceneComponent* InComponent, class FName InSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetSocketRotation");

	Params::PaperStreamingSubsystem_GetSocketRotation Parms{};

	Parms.InComponent = InComponent;
	Parms.InSocketName = InSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetSocketTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InSocketName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERelativeTransformSpace                 TransformSpace                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UPaperStreamingSubsystem::GetSocketTransform(class USceneComponent* InComponent, class FName InSocketName, ERelativeTransformSpace TransformSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetSocketTransform");

	Params::PaperStreamingSubsystem_GetSocketTransform Parms{};

	Parms.InComponent = InComponent;
	Parms.InSocketName = InSocketName;
	Parms.TransformSpace = TransformSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.GetSubLevelsByPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContextObject                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LevelPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlwaysLoadedOnly                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipBigWorldNecessary                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutSubLevels                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::GetSubLevelsByPath(class UObject* InWorldContextObject, const class FString& LevelPath, bool bAlwaysLoadedOnly, bool bSkipBigWorldNecessary, TArray<class FString>* OutSubLevels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "GetSubLevelsByPath");

	Params::PaperStreamingSubsystem_GetSubLevelsByPath Parms{};

	Parms.InWorldContextObject = InWorldContextObject;
	Parms.LevelPath = std::move(LevelPath);
	Parms.bAlwaysLoadedOnly = bAlwaysLoadedOnly;
	Parms.bSkipBigWorldNecessary = bSkipBigWorldNecessary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSubLevels != nullptr)
		*OutSubLevels = std::move(Parms.OutSubLevels);

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.HandleDetailModeComponentsPhys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULevel*                           InLevel                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::HandleDetailModeComponentsPhys(class ULevel* InLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "HandleDetailModeComponentsPhys");

	Params::PaperStreamingSubsystem_HandleDetailModeComponentsPhys Parms{};

	Parms.InLevel = InLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsActorInLayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InLayerName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::IsActorInLayer(class AActor* InActor, const class FString& InLayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "IsActorInLayer");

	Params::PaperStreamingSubsystem_IsActorInLayer Parms{};

	Parms.InActor = InActor;
	Parms.InLayerName = std::move(InLayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsEnableCellCollisionTest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::IsEnableCellCollisionTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "IsEnableCellCollisionTest");

	Params::PaperStreamingSubsystem_IsEnableCellCollisionTest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsEnableExternalLevels
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::IsEnableExternalLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "IsEnableExternalLevels");

	Params::PaperStreamingSubsystem_IsEnableExternalLevels Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsLayerVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InLayerName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::IsLayerVisible(const class FString& InLayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "IsLayerVisible");

	Params::PaperStreamingSubsystem_IsLayerVisible Parms{};

	Parms.InLayerName = std::move(InLayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.IsPaperPartitionCellComplete
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELoadStateCheckType                     CheckType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::IsPaperPartitionCellComplete(const struct FVector& Position, int32 Range, ELoadStateCheckType CheckType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "IsPaperPartitionCellComplete");

	Params::PaperStreamingSubsystem_IsPaperPartitionCellComplete Parms{};

	Parms.Position = std::move(Position);
	Parms.Range = Range;
	Parms.CheckType = CheckType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadAssetAsync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FSoftObjectPath>&   AssetsPath                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<class UObject*>& Loaded)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceLoadBPClass                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::LoadAssetAsync(const TArray<struct FSoftObjectPath>& AssetsPath, TDelegate<void(const TArray<class UObject*>& Loaded)> Callback, bool ForceLoadBPClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "LoadAssetAsync");

	Params::PaperStreamingSubsystem_LoadAssetAsync Parms{};

	Parms.AssetsPath = std::move(AssetsPath);
	Parms.Callback = Callback;
	Parms.ForceLoadBPClass = ForceLoadBPClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadMap
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::LoadMap(const class FString& Path, const struct FVector& InLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "LoadMap");

	Params::PaperStreamingSubsystem_LoadMap Parms{};

	Parms.Path = std::move(Path);
	Parms.InLocation = std::move(InLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadMapInVisible
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  InVisibleLevels                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FString&                    Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    WorldTag                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::LoadMapInVisible(const class FString& Path, const struct FVector& InLocation, TArray<class FString>* InVisibleLevels, const class FString& Options, const class FString& WorldTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "LoadMapInVisible");

	Params::PaperStreamingSubsystem_LoadMapInVisible Parms{};

	Parms.Path = std::move(Path);
	Parms.InLocation = std::move(InLocation);
	Parms.Options = std::move(Options);
	Parms.WorldTag = std::move(WorldTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InVisibleLevels != nullptr)
		*InVisibleLevels = std::move(Parms.InVisibleLevels);

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadMapsInVisible
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLoadMapParams>&    InLoadMapParams                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Options                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::LoadMapsInVisible(const TArray<struct FLoadMapParams>& InLoadMapParams, const class FString& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "LoadMapsInVisible");

	Params::PaperStreamingSubsystem_LoadMapsInVisible Parms{};

	Parms.InLoadMapParams = std::move(InLoadMapParams);
	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadSubLevels
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            SubLevelPaths                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FVector>&           Locations                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<class FString>& LevelPaths)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::LoadSubLevels(const TArray<class FString>& SubLevelPaths, const TArray<struct FVector>& Locations, TDelegate<void(const TArray<class FString>& LevelPaths)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "LoadSubLevels");

	Params::PaperStreamingSubsystem_LoadSubLevels Parms{};

	Parms.SubLevelPaths = std::move(SubLevelPaths);
	Parms.Locations = std::move(Locations);
	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.LoadSubLevelToWorld
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    SubLevelPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LoadLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::LoadSubLevelToWorld(const class FString& SubLevelPath, const struct FVector& LoadLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "LoadSubLevelToWorld");

	Params::PaperStreamingSubsystem_LoadSubLevelToWorld Parms{};

	Parms.SubLevelPath = std::move(SubLevelPath);
	Parms.LoadLocation = std::move(LoadLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.ReleaseShaderCodes
// (Final, Native, Public, BlueprintCallable)

void UPaperStreamingSubsystem::ReleaseShaderCodes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "ReleaseShaderCodes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.RemoveExternalDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::RemoveExternalDistance(const class FString& Path, int32 Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "RemoveExternalDistance");

	Params::PaperStreamingSubsystem_RemoveExternalDistance Parms{};

	Parms.Path = std::move(Path);
	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.RemoveExtraStreamingSource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContextObject                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InSourceTag                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::RemoveExtraStreamingSource(class UObject* InWorldContextObject, const class FString& InSourceTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "RemoveExtraStreamingSource");

	Params::PaperStreamingSubsystem_RemoveExtraStreamingSource Parms{};

	Parms.InWorldContextObject = InWorldContextObject;
	Parms.InSourceTag = std::move(InSourceTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetExternalDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::SetExternalDistance(const class FString& Path, int32 Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "SetExternalDistance");

	Params::PaperStreamingSubsystem_SetExternalDistance Parms{};

	Parms.Path = std::move(Path);
	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetExtraConditionLevelInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContextObject                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InLevelKeyword                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInCanLoad                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::SetExtraConditionLevelInfo(class UObject* InWorldContextObject, const class FString& InLevelKeyword, bool bInCanLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "SetExtraConditionLevelInfo");

	Params::PaperStreamingSubsystem_SetExtraConditionLevelInfo Parms{};

	Parms.InWorldContextObject = InWorldContextObject;
	Parms.InLevelKeyword = std::move(InLevelKeyword);
	Parms.bInCanLoad = bInCanLoad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetLayerVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InLayerName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateImmediately                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::SetLayerVisibility(const class FString& InLayerName, bool bVisible, bool bUpdateImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "SetLayerVisibility");

	Params::PaperStreamingSubsystem_SetLayerVisibility Parms{};

	Parms.InLayerName = std::move(InLayerName);
	Parms.bVisible = bVisible;
	Parms.bUpdateImmediately = bUpdateImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetOverrideLoadingRanges
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TMap<int32, int32>&               InOverrideLoadingRanges                                (Parm, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::SetOverrideLoadingRanges(const TMap<int32, int32>& InOverrideLoadingRanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "SetOverrideLoadingRanges");

	Params::PaperStreamingSubsystem_SetOverrideLoadingRanges Parms{};

	Parms.InOverrideLoadingRanges = std::move(InOverrideLoadingRanges);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetPaperPartitionBoost
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsBoost                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::SetPaperPartitionBoost(bool bIsBoost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "SetPaperPartitionBoost");

	Params::PaperStreamingSubsystem_SetPaperPartitionBoost Parms{};

	Parms.bIsBoost = bIsBoost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetPlayerStreamingSourceEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContextObject                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::SetPlayerStreamingSourceEnable(class UObject* InWorldContextObject, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "SetPlayerStreamingSourceEnable");

	Params::PaperStreamingSubsystem_SetPlayerStreamingSourceEnable Parms{};

	Parms.InWorldContextObject = InWorldContextObject;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetStreamingEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::SetStreamingEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "SetStreamingEnable");

	Params::PaperStreamingSubsystem_SetStreamingEnable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.SetUseFullWorldComposition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInUseFullWorldComposition                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::SetUseFullWorldComposition(bool bInUseFullWorldComposition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "SetUseFullWorldComposition");

	Params::PaperStreamingSubsystem_SetUseFullWorldComposition Parms{};

	Parms.bInUseFullWorldComposition = bInUseFullWorldComposition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.UnbindLayerChangedEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InLayerName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<class AActor*>& Actors, bool IsAdd)>InOnLayerChanged                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::UnbindLayerChangedEvent(const class FString& InLayerName, TDelegate<void(const TArray<class AActor*>& Actors, bool IsAdd)> InOnLayerChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "UnbindLayerChangedEvent");

	Params::PaperStreamingSubsystem_UnbindLayerChangedEvent Parms{};

	Parms.InLayerName = std::move(InLayerName);
	Parms.InOnLayerChanged = InOnLayerChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.UnbindLayerVisibilityChangedEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InLayerName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<class AActor*>& Actors, bool IsVisible)>InOnLayerVisibilityChanged                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperStreamingSubsystem::UnbindLayerVisibilityChangedEvent(const class FString& InLayerName, TDelegate<void(const TArray<class AActor*>& Actors, bool IsVisible)> InOnLayerVisibilityChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "UnbindLayerVisibilityChangedEvent");

	Params::PaperStreamingSubsystem_UnbindLayerVisibilityChangedEvent Parms{};

	Parms.InLayerName = std::move(InLayerName);
	Parms.InOnLayerVisibilityChanged = InOnLayerVisibilityChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.UnFreeze
// (Final, Native, Public, BlueprintCallable)

void UPaperStreamingSubsystem::UnFreeze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "UnFreeze");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperStreamingRuntime.PaperStreamingSubsystem.UnloadSubLevels
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            SubLevelPaths                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperStreamingSubsystem::UnloadSubLevels(const TArray<class FString>& SubLevelPaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperStreamingSubsystem", "UnloadSubLevels");

	Params::PaperStreamingSubsystem_UnloadSubLevels Parms{};

	Parms.SubLevelPaths = std::move(SubLevelPaths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperStreamingRuntime.X6LoadMapTest.OnLevelShown
// (Final, Native, Private)

void UX6LoadMapTest::OnLevelShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6LoadMapTest", "OnLevelShown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

