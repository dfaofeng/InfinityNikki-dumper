#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DamageTypeBase

#include "Basic.hpp"

#include "EFeedBackReason_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "EDamagePerformanceType_structs.hpp"
#include "EPainCausingType_structs.hpp"
#include "Engine_classes.hpp"
#include "EInt32PlayerPawnStateTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DamageTypeBase.BP_DamageTypeBase_C
// 0x0078 (0x00B8 - 0x0040)
class UBP_DamageTypeBase_C : public UDamageType
{
public:
	int32                                         BaseValue;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePerformanceType                        Performance;                                       // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPainCausingType                              DamageType;                                        // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HitNSKey;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 HitSoundKey;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	double                                        HitDistance;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitHeight;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitDuration;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 HitCurveVectorKey;                                 // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          HitOpenLandFinish;                                 // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForceBack;                                       // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EInt32PlayerPawnStateTypes>            RejectPlayerStates;                                // 0x0098(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EFeedBackReason                               FeedBackReason;                                    // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           HitBackTag;                                        // 0x00AC(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)

public:
	void DoDamage(class UObject* Instigater, class AActor* OtherActor, const struct FHitResult& HitResult) const;
	void CanDoDamage(class AActor* OtherActor, bool* bCan) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DamageTypeBase_C">();
	}
	static class UBP_DamageTypeBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DamageTypeBase_C>();
	}
};
static_assert(alignof(UBP_DamageTypeBase_C) == 0x000008, "Wrong alignment on UBP_DamageTypeBase_C");
static_assert(sizeof(UBP_DamageTypeBase_C) == 0x0000B8, "Wrong size on UBP_DamageTypeBase_C");
static_assert(offsetof(UBP_DamageTypeBase_C, BaseValue) == 0x000040, "Member 'UBP_DamageTypeBase_C::BaseValue' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, Performance) == 0x000044, "Member 'UBP_DamageTypeBase_C::Performance' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, DamageType) == 0x000045, "Member 'UBP_DamageTypeBase_C::DamageType' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, HitNSKey) == 0x000048, "Member 'UBP_DamageTypeBase_C::HitNSKey' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, HitSoundKey) == 0x000058, "Member 'UBP_DamageTypeBase_C::HitSoundKey' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, HitDistance) == 0x000068, "Member 'UBP_DamageTypeBase_C::HitDistance' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, HitHeight) == 0x000070, "Member 'UBP_DamageTypeBase_C::HitHeight' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, HitDuration) == 0x000078, "Member 'UBP_DamageTypeBase_C::HitDuration' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, HitCurveVectorKey) == 0x000080, "Member 'UBP_DamageTypeBase_C::HitCurveVectorKey' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, HitOpenLandFinish) == 0x000090, "Member 'UBP_DamageTypeBase_C::HitOpenLandFinish' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, IsForceBack) == 0x000091, "Member 'UBP_DamageTypeBase_C::IsForceBack' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, RejectPlayerStates) == 0x000098, "Member 'UBP_DamageTypeBase_C::RejectPlayerStates' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, FeedBackReason) == 0x0000A8, "Member 'UBP_DamageTypeBase_C::FeedBackReason' has a wrong offset!");
static_assert(offsetof(UBP_DamageTypeBase_C, HitBackTag) == 0x0000AC, "Member 'UBP_DamageTypeBase_C::HitBackTag' has a wrong offset!");

}

