#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperCharWizard

#include "Basic.hpp"

#include "PaperCharWizard_structs.hpp"


namespace SDK::Params
{

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.AIWizardLib_GetObject
// 0x0010 (0x0010 - 0x0000)
struct X6PaperCharAIWizardLibrary_AIWizardLib_GetObject final
{
public:
	class UObject*                                WidgetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_AIWizardLib_GetObject) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_AIWizardLib_GetObject");
static_assert(sizeof(X6PaperCharAIWizardLibrary_AIWizardLib_GetObject) == 0x000010, "Wrong size on X6PaperCharAIWizardLibrary_AIWizardLib_GetObject");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_GetObject, WidgetObject) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_GetObject::WidgetObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_GetObject, ReturnValue) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_GetObject::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.AIWizardLib_GetPropertyName
// 0x0010 (0x0010 - 0x0000)
struct X6PaperCharAIWizardLibrary_AIWizardLib_GetPropertyName final
{
public:
	class UObject*                                WidgetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_AIWizardLib_GetPropertyName) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_AIWizardLib_GetPropertyName");
static_assert(sizeof(X6PaperCharAIWizardLibrary_AIWizardLib_GetPropertyName) == 0x000010, "Wrong size on X6PaperCharAIWizardLibrary_AIWizardLib_GetPropertyName");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_GetPropertyName, WidgetObject) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_GetPropertyName::WidgetObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_GetPropertyName, ReturnValue) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_GetPropertyName::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.AIWizardLib_SetNameOverride
// 0x0018 (0x0018 - 0x0000)
struct X6PaperCharAIWizardLibrary_AIWizardLib_SetNameOverride final
{
public:
	class UObject*                                WidgetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NewPropertyName;                                   // 0x0008(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_AIWizardLib_SetNameOverride) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_AIWizardLib_SetNameOverride");
static_assert(sizeof(X6PaperCharAIWizardLibrary_AIWizardLib_SetNameOverride) == 0x000018, "Wrong size on X6PaperCharAIWizardLibrary_AIWizardLib_SetNameOverride");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_SetNameOverride, WidgetObject) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_SetNameOverride::WidgetObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_SetNameOverride, NewPropertyName) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_SetNameOverride::NewPropertyName' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.AIWizardLib_SetObject
// 0x0010 (0x0010 - 0x0000)
struct X6PaperCharAIWizardLibrary_AIWizardLib_SetObject final
{
public:
	class UObject*                                WidgetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InNewObject;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_AIWizardLib_SetObject) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_AIWizardLib_SetObject");
static_assert(sizeof(X6PaperCharAIWizardLibrary_AIWizardLib_SetObject) == 0x000010, "Wrong size on X6PaperCharAIWizardLibrary_AIWizardLib_SetObject");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_SetObject, WidgetObject) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_SetObject::WidgetObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_SetObject, InNewObject) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_SetObject::InNewObject' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.AIWizardLib_SetPropertiesNameOverride
// 0x0058 (0x0058 - 0x0000)
struct X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertiesNameOverride final
{
public:
	class UObject*                                WidgetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                InPropertiesNameOverride;                          // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertiesNameOverride) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertiesNameOverride");
static_assert(sizeof(X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertiesNameOverride) == 0x000058, "Wrong size on X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertiesNameOverride");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertiesNameOverride, WidgetObject) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertiesNameOverride::WidgetObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertiesNameOverride, InPropertiesNameOverride) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertiesNameOverride::InPropertiesNameOverride' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.AIWizardLib_SetPropertyName
// 0x0010 (0x0010 - 0x0000)
struct X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertyName final
{
public:
	class UObject*                                WidgetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewPropertyName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertyName) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertyName");
static_assert(sizeof(X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertyName) == 0x000010, "Wrong size on X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertyName");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertyName, WidgetObject) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertyName::WidgetObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertyName, NewPropertyName) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_SetPropertyName::NewPropertyName' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.AIWizardLib_SetShowPropertyName
// 0x0010 (0x0010 - 0x0000)
struct X6PaperCharAIWizardLibrary_AIWizardLib_SetShowPropertyName final
{
public:
	class UObject*                                WidgetObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewShowPropertyName;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_AIWizardLib_SetShowPropertyName) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_AIWizardLib_SetShowPropertyName");
static_assert(sizeof(X6PaperCharAIWizardLibrary_AIWizardLib_SetShowPropertyName) == 0x000010, "Wrong size on X6PaperCharAIWizardLibrary_AIWizardLib_SetShowPropertyName");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_SetShowPropertyName, WidgetObject) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_SetShowPropertyName::WidgetObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_AIWizardLib_SetShowPropertyName, NewShowPropertyName) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_AIWizardLib_SetShowPropertyName::NewShowPropertyName' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.CallFunctionByObjectParam
// 0x0018 (0x0018 - 0x0000)
struct X6PaperCharAIWizardLibrary_CallFunctionByObjectParam final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FunctionName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ParamObject;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_CallFunctionByObjectParam) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_CallFunctionByObjectParam");
static_assert(sizeof(X6PaperCharAIWizardLibrary_CallFunctionByObjectParam) == 0x000018, "Wrong size on X6PaperCharAIWizardLibrary_CallFunctionByObjectParam");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CallFunctionByObjectParam, Object) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_CallFunctionByObjectParam::Object' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CallFunctionByObjectParam, FunctionName) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_CallFunctionByObjectParam::FunctionName' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CallFunctionByObjectParam, ParamObject) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_CallFunctionByObjectParam::ParamObject' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.CallFunctionByObjectPropertyName
// 0x0028 (0x0028 - 0x0000)
struct X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FunctionName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ParamObject;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamPropertyName;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName");
static_assert(sizeof(X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName) == 0x000028, "Wrong size on X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName, Object) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName::Object' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName, FunctionName) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName::FunctionName' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName, ParamObject) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName::ParamObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName, ParamPropertyName) == 0x000018, "Member 'X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName::ParamPropertyName' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName, ReturnValue) == 0x000020, "Member 'X6PaperCharAIWizardLibrary_CallFunctionByObjectPropertyName::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.CanFileCheckout
// 0x0018 (0x0018 - 0x0000)
struct X6PaperCharAIWizardLibrary_CanFileCheckout final
{
public:
	class FString                                 InFile;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECheckoutFaildType                            CheckoutFaildType;                                 // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_CanFileCheckout) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_CanFileCheckout");
static_assert(sizeof(X6PaperCharAIWizardLibrary_CanFileCheckout) == 0x000018, "Wrong size on X6PaperCharAIWizardLibrary_CanFileCheckout");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CanFileCheckout, InFile) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_CanFileCheckout::InFile' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CanFileCheckout, CheckoutFaildType) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_CanFileCheckout::CheckoutFaildType' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CanFileCheckout, ReturnValue) == 0x000011, "Member 'X6PaperCharAIWizardLibrary_CanFileCheckout::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.CopyObject
// 0x0010 (0x0010 - 0x0000)
struct X6PaperCharAIWizardLibrary_CopyObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_CopyObject) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_CopyObject");
static_assert(sizeof(X6PaperCharAIWizardLibrary_CopyObject) == 0x000010, "Wrong size on X6PaperCharAIWizardLibrary_CopyObject");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CopyObject, Object) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_CopyObject::Object' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CopyObject, ReturnValue) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_CopyObject::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.CopyObjectProperties
// 0x0038 (0x0038 - 0x0000)
struct X6PaperCharAIWizardLibrary_CopyObjectProperties final
{
public:
	class UObject*                                SrcObject;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TargetObject;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SrcPropertyNames;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TargetPropertyNames;                               // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_CopyObjectProperties) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_CopyObjectProperties");
static_assert(sizeof(X6PaperCharAIWizardLibrary_CopyObjectProperties) == 0x000038, "Wrong size on X6PaperCharAIWizardLibrary_CopyObjectProperties");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CopyObjectProperties, SrcObject) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_CopyObjectProperties::SrcObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CopyObjectProperties, TargetObject) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_CopyObjectProperties::TargetObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CopyObjectProperties, SrcPropertyNames) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_CopyObjectProperties::SrcPropertyNames' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CopyObjectProperties, TargetPropertyNames) == 0x000020, "Member 'X6PaperCharAIWizardLibrary_CopyObjectProperties::TargetPropertyNames' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CopyObjectProperties, ReturnValue) == 0x000030, "Member 'X6PaperCharAIWizardLibrary_CopyObjectProperties::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.CreateObjectToFile
// 0x0070 (0x0070 - 0x0000)
struct X6PaperCharAIWizardLibrary_CreateObjectToFile final
{
public:
	TSubclassOf<class UObject>                    ObjectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 SoftObjectClass;                                   // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultPath;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutFilePath;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OutObject;                                         // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowSelectPathPanel;                               // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0069(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_CreateObjectToFile) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_CreateObjectToFile");
static_assert(sizeof(X6PaperCharAIWizardLibrary_CreateObjectToFile) == 0x000070, "Wrong size on X6PaperCharAIWizardLibrary_CreateObjectToFile");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CreateObjectToFile, ObjectClass) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_CreateObjectToFile::ObjectClass' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CreateObjectToFile, SoftObjectClass) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_CreateObjectToFile::SoftObjectClass' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CreateObjectToFile, DefaultPath) == 0x000030, "Member 'X6PaperCharAIWizardLibrary_CreateObjectToFile::DefaultPath' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CreateObjectToFile, OutFilePath) == 0x000040, "Member 'X6PaperCharAIWizardLibrary_CreateObjectToFile::OutFilePath' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CreateObjectToFile, OutObject) == 0x000050, "Member 'X6PaperCharAIWizardLibrary_CreateObjectToFile::OutObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CreateObjectToFile, AssetName) == 0x000058, "Member 'X6PaperCharAIWizardLibrary_CreateObjectToFile::AssetName' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CreateObjectToFile, ShowSelectPathPanel) == 0x000068, "Member 'X6PaperCharAIWizardLibrary_CreateObjectToFile::ShowSelectPathPanel' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_CreateObjectToFile, ReturnValue) == 0x000069, "Member 'X6PaperCharAIWizardLibrary_CreateObjectToFile::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.ExportDAAsset
// 0x0010 (0x0010 - 0x0000)
struct X6PaperCharAIWizardLibrary_ExportDAAsset final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_ExportDAAsset) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_ExportDAAsset");
static_assert(sizeof(X6PaperCharAIWizardLibrary_ExportDAAsset) == 0x000010, "Wrong size on X6PaperCharAIWizardLibrary_ExportDAAsset");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportDAAsset, Object) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_ExportDAAsset::Object' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportDAAsset, ReturnValue) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_ExportDAAsset::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.ExportDTAsset
// 0x0050 (0x0050 - 0x0000)
struct X6PaperCharAIWizardLibrary_ExportDTAsset final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExcelFileName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExcelSheetName;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TbNames;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ErrorMsg;                                          // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedGenTb;                                         // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedCheckOut;                                      // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_ExportDTAsset) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_ExportDTAsset");
static_assert(sizeof(X6PaperCharAIWizardLibrary_ExportDTAsset) == 0x000050, "Wrong size on X6PaperCharAIWizardLibrary_ExportDTAsset");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportDTAsset, DataTable) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_ExportDTAsset::DataTable' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportDTAsset, ExcelFileName) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_ExportDTAsset::ExcelFileName' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportDTAsset, ExcelSheetName) == 0x000018, "Member 'X6PaperCharAIWizardLibrary_ExportDTAsset::ExcelSheetName' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportDTAsset, TbNames) == 0x000028, "Member 'X6PaperCharAIWizardLibrary_ExportDTAsset::TbNames' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportDTAsset, ErrorMsg) == 0x000038, "Member 'X6PaperCharAIWizardLibrary_ExportDTAsset::ErrorMsg' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportDTAsset, NeedGenTb) == 0x000048, "Member 'X6PaperCharAIWizardLibrary_ExportDTAsset::NeedGenTb' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportDTAsset, NeedCheckOut) == 0x000049, "Member 'X6PaperCharAIWizardLibrary_ExportDTAsset::NeedCheckOut' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportDTAsset, ReturnValue) == 0x00004A, "Member 'X6PaperCharAIWizardLibrary_ExportDTAsset::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.ExportGameplayTags
// 0x0038 (0x0038 - 0x0000)
struct X6PaperCharAIWizardLibrary_ExportGameplayTags final
{
public:
	class FString                                 OutMsg;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutXmlPath;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutExcelPath;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_ExportGameplayTags) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_ExportGameplayTags");
static_assert(sizeof(X6PaperCharAIWizardLibrary_ExportGameplayTags) == 0x000038, "Wrong size on X6PaperCharAIWizardLibrary_ExportGameplayTags");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportGameplayTags, OutMsg) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_ExportGameplayTags::OutMsg' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportGameplayTags, OutXmlPath) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_ExportGameplayTags::OutXmlPath' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportGameplayTags, OutExcelPath) == 0x000020, "Member 'X6PaperCharAIWizardLibrary_ExportGameplayTags::OutExcelPath' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ExportGameplayTags, ReturnValue) == 0x000030, "Member 'X6PaperCharAIWizardLibrary_ExportGameplayTags::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.GenerateConfigByTime
// 0x0018 (0x0018 - 0x0000)
struct X6PaperCharAIWizardLibrary_GenerateConfigByTime final
{
public:
	class FString                                 OutMsg;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_GenerateConfigByTime) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_GenerateConfigByTime");
static_assert(sizeof(X6PaperCharAIWizardLibrary_GenerateConfigByTime) == 0x000018, "Wrong size on X6PaperCharAIWizardLibrary_GenerateConfigByTime");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GenerateConfigByTime, OutMsg) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_GenerateConfigByTime::OutMsg' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GenerateConfigByTime, ReturnValue) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_GenerateConfigByTime::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.GetDataTableRowDependenceAssetPaths
// 0x0028 (0x0028 - 0x0000)
struct X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutPackagePaths;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths");
static_assert(sizeof(X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths) == 0x000028, "Wrong size on X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths, DataTable) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths::DataTable' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths, RowName) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths::RowName' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths, OutPackagePaths) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths::OutPackagePaths' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths, ReturnValue) == 0x000020, "Member 'X6PaperCharAIWizardLibrary_GetDataTableRowDependenceAssetPaths::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.GetEnumValueDisplayNameMap
// 0x0068 (0x0068 - 0x0000)
struct X6PaperCharAIWizardLibrary_GetEnumValueDisplayNameMap final
{
public:
	class FString                                 EnumNameOrPath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlueprintEnum;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    ReturnValue;                                       // 0x0018(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_GetEnumValueDisplayNameMap) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_GetEnumValueDisplayNameMap");
static_assert(sizeof(X6PaperCharAIWizardLibrary_GetEnumValueDisplayNameMap) == 0x000068, "Wrong size on X6PaperCharAIWizardLibrary_GetEnumValueDisplayNameMap");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetEnumValueDisplayNameMap, EnumNameOrPath) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_GetEnumValueDisplayNameMap::EnumNameOrPath' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetEnumValueDisplayNameMap, IsBlueprintEnum) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_GetEnumValueDisplayNameMap::IsBlueprintEnum' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetEnumValueDisplayNameMap, ReturnValue) == 0x000018, "Member 'X6PaperCharAIWizardLibrary_GetEnumValueDisplayNameMap::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.GetHashID
// 0x0018 (0x0018 - 0x0000)
struct X6PaperCharAIWizardLibrary_GetHashID final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_GetHashID) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_GetHashID");
static_assert(sizeof(X6PaperCharAIWizardLibrary_GetHashID) == 0x000018, "Wrong size on X6PaperCharAIWizardLibrary_GetHashID");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetHashID, InString) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_GetHashID::InString' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetHashID, ReturnValue) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_GetHashID::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.GetPropertyNamesByCategoriesWithIgnore
// 0x0038 (0x0038 - 0x0000)
struct X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Categories;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreNames;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore");
static_assert(sizeof(X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore) == 0x000038, "Wrong size on X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore, Object) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore::Object' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore, Categories) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore::Categories' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore, IgnoreNames) == 0x000018, "Member 'X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore::IgnoreNames' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore, ReturnValue) == 0x000028, "Member 'X6PaperCharAIWizardLibrary_GetPropertyNamesByCategoriesWithIgnore::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.GetPropertyNamesByCategory
// 0x0020 (0x0020 - 0x0000)
struct X6PaperCharAIWizardLibrary_GetPropertyNamesByCategory final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CategoryName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_GetPropertyNamesByCategory) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_GetPropertyNamesByCategory");
static_assert(sizeof(X6PaperCharAIWizardLibrary_GetPropertyNamesByCategory) == 0x000020, "Wrong size on X6PaperCharAIWizardLibrary_GetPropertyNamesByCategory");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetPropertyNamesByCategory, Object) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_GetPropertyNamesByCategory::Object' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetPropertyNamesByCategory, CategoryName) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_GetPropertyNamesByCategory::CategoryName' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_GetPropertyNamesByCategory, ReturnValue) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_GetPropertyNamesByCategory::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.IsAssetDirty
// 0x0010 (0x0010 - 0x0000)
struct X6PaperCharAIWizardLibrary_IsAssetDirty final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_IsAssetDirty) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_IsAssetDirty");
static_assert(sizeof(X6PaperCharAIWizardLibrary_IsAssetDirty) == 0x000010, "Wrong size on X6PaperCharAIWizardLibrary_IsAssetDirty");
static_assert(offsetof(X6PaperCharAIWizardLibrary_IsAssetDirty, Object) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_IsAssetDirty::Object' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_IsAssetDirty, ReturnValue) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_IsAssetDirty::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.IsFileCheckedOut
// 0x0018 (0x0018 - 0x0000)
struct X6PaperCharAIWizardLibrary_IsFileCheckedOut final
{
public:
	class FString                                 InFile;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_IsFileCheckedOut) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_IsFileCheckedOut");
static_assert(sizeof(X6PaperCharAIWizardLibrary_IsFileCheckedOut) == 0x000018, "Wrong size on X6PaperCharAIWizardLibrary_IsFileCheckedOut");
static_assert(offsetof(X6PaperCharAIWizardLibrary_IsFileCheckedOut, InFile) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_IsFileCheckedOut::InFile' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_IsFileCheckedOut, ReturnValue) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_IsFileCheckedOut::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.P4CheckOutFile
// 0x0018 (0x0018 - 0x0000)
struct X6PaperCharAIWizardLibrary_P4CheckOutFile final
{
public:
	class FString                                 InFile;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_P4CheckOutFile) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_P4CheckOutFile");
static_assert(sizeof(X6PaperCharAIWizardLibrary_P4CheckOutFile) == 0x000018, "Wrong size on X6PaperCharAIWizardLibrary_P4CheckOutFile");
static_assert(offsetof(X6PaperCharAIWizardLibrary_P4CheckOutFile, InFile) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_P4CheckOutFile::InFile' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_P4CheckOutFile, ReturnValue) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_P4CheckOutFile::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.P4DeleteFile
// 0x0018 (0x0018 - 0x0000)
struct X6PaperCharAIWizardLibrary_P4DeleteFile final
{
public:
	class FString                                 InFile;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_P4DeleteFile) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_P4DeleteFile");
static_assert(sizeof(X6PaperCharAIWizardLibrary_P4DeleteFile) == 0x000018, "Wrong size on X6PaperCharAIWizardLibrary_P4DeleteFile");
static_assert(offsetof(X6PaperCharAIWizardLibrary_P4DeleteFile, InFile) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_P4DeleteFile::InFile' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_P4DeleteFile, ReturnValue) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_P4DeleteFile::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.RenameAsset
// 0x0018 (0x0018 - 0x0000)
struct X6PaperCharAIWizardLibrary_RenameAsset final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_RenameAsset) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_RenameAsset");
static_assert(sizeof(X6PaperCharAIWizardLibrary_RenameAsset) == 0x000018, "Wrong size on X6PaperCharAIWizardLibrary_RenameAsset");
static_assert(offsetof(X6PaperCharAIWizardLibrary_RenameAsset, Object) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_RenameAsset::Object' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_RenameAsset, NewName) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_RenameAsset::NewName' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.ReplaceObject
// 0x0018 (0x0018 - 0x0000)
struct X6PaperCharAIWizardLibrary_ReplaceObject final
{
public:
	class UObject*                                SrcObject;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TargetObject;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStandaloneAssetFlag;                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_ReplaceObject) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_ReplaceObject");
static_assert(sizeof(X6PaperCharAIWizardLibrary_ReplaceObject) == 0x000018, "Wrong size on X6PaperCharAIWizardLibrary_ReplaceObject");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ReplaceObject, SrcObject) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_ReplaceObject::SrcObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ReplaceObject, TargetObject) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_ReplaceObject::TargetObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ReplaceObject, UseStandaloneAssetFlag) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_ReplaceObject::UseStandaloneAssetFlag' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_ReplaceObject, ReturnValue) == 0x000011, "Member 'X6PaperCharAIWizardLibrary_ReplaceObject::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.SaveAndCheckOutAsset
// 0x0010 (0x0010 - 0x0000)
struct X6PaperCharAIWizardLibrary_SaveAndCheckOutAsset final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_SaveAndCheckOutAsset) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_SaveAndCheckOutAsset");
static_assert(sizeof(X6PaperCharAIWizardLibrary_SaveAndCheckOutAsset) == 0x000010, "Wrong size on X6PaperCharAIWizardLibrary_SaveAndCheckOutAsset");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SaveAndCheckOutAsset, Object) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_SaveAndCheckOutAsset::Object' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SaveAndCheckOutAsset, ReturnValue) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_SaveAndCheckOutAsset::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.SaveObject
// 0x0010 (0x0010 - 0x0000)
struct X6PaperCharAIWizardLibrary_SaveObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_SaveObject) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_SaveObject");
static_assert(sizeof(X6PaperCharAIWizardLibrary_SaveObject) == 0x000010, "Wrong size on X6PaperCharAIWizardLibrary_SaveObject");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SaveObject, Object) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_SaveObject::Object' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SaveObject, ReturnValue) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_SaveObject::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.SaveObjectToFile
// 0x0048 (0x0048 - 0x0000)
struct X6PaperCharAIWizardLibrary_SaveObjectToFile final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultPath;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutFilePath;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OutObject;                                         // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowSelectPathPanel;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0041(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_SaveObjectToFile) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_SaveObjectToFile");
static_assert(sizeof(X6PaperCharAIWizardLibrary_SaveObjectToFile) == 0x000048, "Wrong size on X6PaperCharAIWizardLibrary_SaveObjectToFile");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SaveObjectToFile, Object) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_SaveObjectToFile::Object' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SaveObjectToFile, DefaultPath) == 0x000008, "Member 'X6PaperCharAIWizardLibrary_SaveObjectToFile::DefaultPath' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SaveObjectToFile, OutFilePath) == 0x000018, "Member 'X6PaperCharAIWizardLibrary_SaveObjectToFile::OutFilePath' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SaveObjectToFile, OutObject) == 0x000028, "Member 'X6PaperCharAIWizardLibrary_SaveObjectToFile::OutObject' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SaveObjectToFile, AssetName) == 0x000030, "Member 'X6PaperCharAIWizardLibrary_SaveObjectToFile::AssetName' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SaveObjectToFile, ShowSelectPathPanel) == 0x000040, "Member 'X6PaperCharAIWizardLibrary_SaveObjectToFile::ShowSelectPathPanel' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SaveObjectToFile, ReturnValue) == 0x000041, "Member 'X6PaperCharAIWizardLibrary_SaveObjectToFile::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.SelectAssetFromContentBrowser
// 0x0020 (0x0020 - 0x0000)
struct X6PaperCharAIWizardLibrary_SelectAssetFromContentBrowser final
{
public:
	class FString                                 AssetPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    AssetClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_SelectAssetFromContentBrowser) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_SelectAssetFromContentBrowser");
static_assert(sizeof(X6PaperCharAIWizardLibrary_SelectAssetFromContentBrowser) == 0x000020, "Wrong size on X6PaperCharAIWizardLibrary_SelectAssetFromContentBrowser");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SelectAssetFromContentBrowser, AssetPath) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_SelectAssetFromContentBrowser::AssetPath' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SelectAssetFromContentBrowser, AssetClass) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_SelectAssetFromContentBrowser::AssetClass' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SelectAssetFromContentBrowser, ReturnValue) == 0x000018, "Member 'X6PaperCharAIWizardLibrary_SelectAssetFromContentBrowser::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.SyncPackagesFromSourceControl
// 0x0010 (0x0010 - 0x0000)
struct X6PaperCharAIWizardLibrary_SyncPackagesFromSourceControl final
{
public:
	TArray<class FString>                         PackageNames;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PaperCharAIWizardLibrary_SyncPackagesFromSourceControl) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_SyncPackagesFromSourceControl");
static_assert(sizeof(X6PaperCharAIWizardLibrary_SyncPackagesFromSourceControl) == 0x000010, "Wrong size on X6PaperCharAIWizardLibrary_SyncPackagesFromSourceControl");
static_assert(offsetof(X6PaperCharAIWizardLibrary_SyncPackagesFromSourceControl, PackageNames) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_SyncPackagesFromSourceControl::PackageNames' has a wrong offset!");

// Function PaperCharWizard.X6PaperCharAIWizardLibrary.UpdatePackageByPaths
// 0x0038 (0x0038 - 0x0000)
struct X6PaperCharAIWizardLibrary_UpdatePackageByPaths final
{
public:
	TArray<class FString>                         PackagePaths;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         CheckoutByOtherList;                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         NotLatestList;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PaperCharAIWizardLibrary_UpdatePackageByPaths) == 0x000008, "Wrong alignment on X6PaperCharAIWizardLibrary_UpdatePackageByPaths");
static_assert(sizeof(X6PaperCharAIWizardLibrary_UpdatePackageByPaths) == 0x000038, "Wrong size on X6PaperCharAIWizardLibrary_UpdatePackageByPaths");
static_assert(offsetof(X6PaperCharAIWizardLibrary_UpdatePackageByPaths, PackagePaths) == 0x000000, "Member 'X6PaperCharAIWizardLibrary_UpdatePackageByPaths::PackagePaths' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_UpdatePackageByPaths, CheckoutByOtherList) == 0x000010, "Member 'X6PaperCharAIWizardLibrary_UpdatePackageByPaths::CheckoutByOtherList' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_UpdatePackageByPaths, NotLatestList) == 0x000020, "Member 'X6PaperCharAIWizardLibrary_UpdatePackageByPaths::NotLatestList' has a wrong offset!");
static_assert(offsetof(X6PaperCharAIWizardLibrary_UpdatePackageByPaths, ReturnValue) == 0x000030, "Member 'X6PaperCharAIWizardLibrary_UpdatePackageByPaths::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct X6T2NpcConfigMgr_GetInstance final
{
public:
	class UX6T2NpcConfigMgr*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6T2NpcConfigMgr_GetInstance) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_GetInstance");
static_assert(sizeof(X6T2NpcConfigMgr_GetInstance) == 0x000008, "Wrong size on X6T2NpcConfigMgr_GetInstance");
static_assert(offsetof(X6T2NpcConfigMgr_GetInstance, ReturnValue) == 0x000000, "Member 'X6T2NpcConfigMgr_GetInstance::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.GetAllMovableNPCDatas
// 0x0010 (0x0010 - 0x0000)
struct X6T2NpcConfigMgr_GetAllMovableNPCDatas final
{
public:
	TArray<struct FT2MoveNpcVersionGroupInfo>     Spawners;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6T2NpcConfigMgr_GetAllMovableNPCDatas) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_GetAllMovableNPCDatas");
static_assert(sizeof(X6T2NpcConfigMgr_GetAllMovableNPCDatas) == 0x000010, "Wrong size on X6T2NpcConfigMgr_GetAllMovableNPCDatas");
static_assert(offsetof(X6T2NpcConfigMgr_GetAllMovableNPCDatas, Spawners) == 0x000000, "Member 'X6T2NpcConfigMgr_GetAllMovableNPCDatas::Spawners' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.GetAllStaticNPCDatas
// 0x0010 (0x0010 - 0x0000)
struct X6T2NpcConfigMgr_GetAllStaticNPCDatas final
{
public:
	TArray<struct FT2NpcVersionSpawnConfig>       Spawners;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6T2NpcConfigMgr_GetAllStaticNPCDatas) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_GetAllStaticNPCDatas");
static_assert(sizeof(X6T2NpcConfigMgr_GetAllStaticNPCDatas) == 0x000010, "Wrong size on X6T2NpcConfigMgr_GetAllStaticNPCDatas");
static_assert(offsetof(X6T2NpcConfigMgr_GetAllStaticNPCDatas, Spawners) == 0x000000, "Member 'X6T2NpcConfigMgr_GetAllStaticNPCDatas::Spawners' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.GetT2MoveNPCSpawnerCharData
// 0x0070 (0x0070 - 0x0000)
struct X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData final
{
public:
	int64                                         SpawnerID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DatalayerId;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FT2MoveNpcVersionGroupInfo             OutSpawnerConfig;                                  // 0x0010(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData");
static_assert(sizeof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData) == 0x000070, "Wrong size on X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData");
static_assert(offsetof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData, SpawnerID) == 0x000000, "Member 'X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData::SpawnerID' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData, DatalayerId) == 0x000008, "Member 'X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData::DatalayerId' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData, OutSpawnerConfig) == 0x000010, "Member 'X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData::OutSpawnerConfig' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData, ReturnValue) == 0x000068, "Member 'X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharData::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.GetT2MoveNPCSpawnerCharDataWithVersionNo
// 0x00A8 (0x00A8 - 0x0000)
struct X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo final
{
public:
	int64                                         SpawnerID;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DatalayerId;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FT2MoveNpcGroupInfo                    OutSpawnerConfig;                                  // 0x0010(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 VersionNo;                                         // 0x0090(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo");
static_assert(sizeof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo) == 0x0000A8, "Wrong size on X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo");
static_assert(offsetof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo, SpawnerID) == 0x000000, "Member 'X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo::SpawnerID' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo, DatalayerId) == 0x000008, "Member 'X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo::DatalayerId' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo, OutSpawnerConfig) == 0x000010, "Member 'X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo::OutSpawnerConfig' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo, VersionNo) == 0x000090, "Member 'X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo::VersionNo' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo, ReturnValue) == 0x0000A0, "Member 'X6T2NpcConfigMgr_GetT2MoveNPCSpawnerCharDataWithVersionNo::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.GetT2NPCSpawnerCharDataInLayer
// 0x0058 (0x0058 - 0x0000)
struct X6T2NpcConfigMgr_GetT2NPCSpawnerCharDataInLayer final
{
public:
	int64                                         DatalayerId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int64, struct FT2NpcVersionSpawnConfig>  Result;                                            // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6T2NpcConfigMgr_GetT2NPCSpawnerCharDataInLayer) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_GetT2NPCSpawnerCharDataInLayer");
static_assert(sizeof(X6T2NpcConfigMgr_GetT2NPCSpawnerCharDataInLayer) == 0x000058, "Wrong size on X6T2NpcConfigMgr_GetT2NPCSpawnerCharDataInLayer");
static_assert(offsetof(X6T2NpcConfigMgr_GetT2NPCSpawnerCharDataInLayer, DatalayerId) == 0x000000, "Member 'X6T2NpcConfigMgr_GetT2NPCSpawnerCharDataInLayer::DatalayerId' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_GetT2NPCSpawnerCharDataInLayer, Result) == 0x000008, "Member 'X6T2NpcConfigMgr_GetT2NPCSpawnerCharDataInLayer::Result' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.IsT2MoveNPCSpawnerCharDataLoaded
// 0x0018 (0x0018 - 0x0000)
struct X6T2NpcConfigMgr_IsT2MoveNPCSpawnerCharDataLoaded final
{
public:
	int64                                         DatalayerId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SpawnerID;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6T2NpcConfigMgr_IsT2MoveNPCSpawnerCharDataLoaded) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_IsT2MoveNPCSpawnerCharDataLoaded");
static_assert(sizeof(X6T2NpcConfigMgr_IsT2MoveNPCSpawnerCharDataLoaded) == 0x000018, "Wrong size on X6T2NpcConfigMgr_IsT2MoveNPCSpawnerCharDataLoaded");
static_assert(offsetof(X6T2NpcConfigMgr_IsT2MoveNPCSpawnerCharDataLoaded, DatalayerId) == 0x000000, "Member 'X6T2NpcConfigMgr_IsT2MoveNPCSpawnerCharDataLoaded::DatalayerId' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_IsT2MoveNPCSpawnerCharDataLoaded, SpawnerID) == 0x000008, "Member 'X6T2NpcConfigMgr_IsT2MoveNPCSpawnerCharDataLoaded::SpawnerID' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_IsT2MoveNPCSpawnerCharDataLoaded, ReturnValue) == 0x000010, "Member 'X6T2NpcConfigMgr_IsT2MoveNPCSpawnerCharDataLoaded::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.IsT2NPCSpawnerCharDataLoaded
// 0x0018 (0x0018 - 0x0000)
struct X6T2NpcConfigMgr_IsT2NPCSpawnerCharDataLoaded final
{
public:
	int64                                         DatalayerId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SpawnerID;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6T2NpcConfigMgr_IsT2NPCSpawnerCharDataLoaded) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_IsT2NPCSpawnerCharDataLoaded");
static_assert(sizeof(X6T2NpcConfigMgr_IsT2NPCSpawnerCharDataLoaded) == 0x000018, "Wrong size on X6T2NpcConfigMgr_IsT2NPCSpawnerCharDataLoaded");
static_assert(offsetof(X6T2NpcConfigMgr_IsT2NPCSpawnerCharDataLoaded, DatalayerId) == 0x000000, "Member 'X6T2NpcConfigMgr_IsT2NPCSpawnerCharDataLoaded::DatalayerId' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_IsT2NPCSpawnerCharDataLoaded, SpawnerID) == 0x000008, "Member 'X6T2NpcConfigMgr_IsT2NPCSpawnerCharDataLoaded::SpawnerID' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_IsT2NPCSpawnerCharDataLoaded, ReturnValue) == 0x000010, "Member 'X6T2NpcConfigMgr_IsT2NPCSpawnerCharDataLoaded::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.LoadT2MoveNPCSpawnerCharDataAsync
// 0x0008 (0x0008 - 0x0000)
struct X6T2NpcConfigMgr_LoadT2MoveNPCSpawnerCharDataAsync final
{
public:
	int64                                         DatalayerId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6T2NpcConfigMgr_LoadT2MoveNPCSpawnerCharDataAsync) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_LoadT2MoveNPCSpawnerCharDataAsync");
static_assert(sizeof(X6T2NpcConfigMgr_LoadT2MoveNPCSpawnerCharDataAsync) == 0x000008, "Wrong size on X6T2NpcConfigMgr_LoadT2MoveNPCSpawnerCharDataAsync");
static_assert(offsetof(X6T2NpcConfigMgr_LoadT2MoveNPCSpawnerCharDataAsync, DatalayerId) == 0x000000, "Member 'X6T2NpcConfigMgr_LoadT2MoveNPCSpawnerCharDataAsync::DatalayerId' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.LoadT2NPCSpawnerCharDataAsync
// 0x0008 (0x0008 - 0x0000)
struct X6T2NpcConfigMgr_LoadT2NPCSpawnerCharDataAsync final
{
public:
	int64                                         DatalayerId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6T2NpcConfigMgr_LoadT2NPCSpawnerCharDataAsync) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_LoadT2NPCSpawnerCharDataAsync");
static_assert(sizeof(X6T2NpcConfigMgr_LoadT2NPCSpawnerCharDataAsync) == 0x000008, "Wrong size on X6T2NpcConfigMgr_LoadT2NPCSpawnerCharDataAsync");
static_assert(offsetof(X6T2NpcConfigMgr_LoadT2NPCSpawnerCharDataAsync, DatalayerId) == 0x000000, "Member 'X6T2NpcConfigMgr_LoadT2NPCSpawnerCharDataAsync::DatalayerId' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.RemoveSpawnerCharData
// 0x0010 (0x0010 - 0x0000)
struct X6T2NpcConfigMgr_RemoveSpawnerCharData final
{
public:
	int64                                         DatalayerId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SpawnerID;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6T2NpcConfigMgr_RemoveSpawnerCharData) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_RemoveSpawnerCharData");
static_assert(sizeof(X6T2NpcConfigMgr_RemoveSpawnerCharData) == 0x000010, "Wrong size on X6T2NpcConfigMgr_RemoveSpawnerCharData");
static_assert(offsetof(X6T2NpcConfigMgr_RemoveSpawnerCharData, DatalayerId) == 0x000000, "Member 'X6T2NpcConfigMgr_RemoveSpawnerCharData::DatalayerId' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_RemoveSpawnerCharData, SpawnerID) == 0x000008, "Member 'X6T2NpcConfigMgr_RemoveSpawnerCharData::SpawnerID' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.RemoveT2MoveNPCSpawnerCharData
// 0x0010 (0x0010 - 0x0000)
struct X6T2NpcConfigMgr_RemoveT2MoveNPCSpawnerCharData final
{
public:
	int64                                         DatalayerId;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SpawnerID;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6T2NpcConfigMgr_RemoveT2MoveNPCSpawnerCharData) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_RemoveT2MoveNPCSpawnerCharData");
static_assert(sizeof(X6T2NpcConfigMgr_RemoveT2MoveNPCSpawnerCharData) == 0x000010, "Wrong size on X6T2NpcConfigMgr_RemoveT2MoveNPCSpawnerCharData");
static_assert(offsetof(X6T2NpcConfigMgr_RemoveT2MoveNPCSpawnerCharData, DatalayerId) == 0x000000, "Member 'X6T2NpcConfigMgr_RemoveT2MoveNPCSpawnerCharData::DatalayerId' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_RemoveT2MoveNPCSpawnerCharData, SpawnerID) == 0x000008, "Member 'X6T2NpcConfigMgr_RemoveT2MoveNPCSpawnerCharData::SpawnerID' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.TryGetSpawnerCharData
// 0x0070 (0x0070 - 0x0000)
struct X6T2NpcConfigMgr_TryGetSpawnerCharData final
{
public:
	int64                                         SpawnerID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DatalayerId;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FT2NpcVersionSpawnConfig               versionSpawnerConfig;                              // 0x0010(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6T2NpcConfigMgr_TryGetSpawnerCharData) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_TryGetSpawnerCharData");
static_assert(sizeof(X6T2NpcConfigMgr_TryGetSpawnerCharData) == 0x000070, "Wrong size on X6T2NpcConfigMgr_TryGetSpawnerCharData");
static_assert(offsetof(X6T2NpcConfigMgr_TryGetSpawnerCharData, SpawnerID) == 0x000000, "Member 'X6T2NpcConfigMgr_TryGetSpawnerCharData::SpawnerID' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_TryGetSpawnerCharData, DatalayerId) == 0x000008, "Member 'X6T2NpcConfigMgr_TryGetSpawnerCharData::DatalayerId' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_TryGetSpawnerCharData, versionSpawnerConfig) == 0x000010, "Member 'X6T2NpcConfigMgr_TryGetSpawnerCharData::versionSpawnerConfig' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_TryGetSpawnerCharData, ReturnValue) == 0x000068, "Member 'X6T2NpcConfigMgr_TryGetSpawnerCharData::ReturnValue' has a wrong offset!");

// Function PaperCharWizard.X6T2NpcConfigMgr.TryGetSpawnerCharDataWithVersion
// 0x0170 (0x0170 - 0x0000)
struct X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion final
{
public:
	int64                                         SpawnerID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DatalayerId;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FT2NpcSpawnConfig                      spawnerConfig;                                     // 0x0010(0x0148)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 VersionNo;                                         // 0x0158(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0168(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion) == 0x000008, "Wrong alignment on X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion");
static_assert(sizeof(X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion) == 0x000170, "Wrong size on X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion");
static_assert(offsetof(X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion, SpawnerID) == 0x000000, "Member 'X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion::SpawnerID' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion, DatalayerId) == 0x000008, "Member 'X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion::DatalayerId' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion, spawnerConfig) == 0x000010, "Member 'X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion::spawnerConfig' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion, VersionNo) == 0x000158, "Member 'X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion::VersionNo' has a wrong offset!");
static_assert(offsetof(X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion, ReturnValue) == 0x000168, "Member 'X6T2NpcConfigMgr_TryGetSpawnerCharDataWithVersion::ReturnValue' has a wrong offset!");

}

