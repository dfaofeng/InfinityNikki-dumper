#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ClothingSystemRuntimeNv

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ClothingSystemRuntimeCommon_structs.hpp"
#include "ClothingSystemRuntimeCommon_classes.hpp"
#include "ClothingSystemRuntimeNv_structs.hpp"
#include "ClothingSystemRuntimeInterface_classes.hpp"


namespace SDK
{

// Class ClothingSystemRuntimeNv.ClothConfigNv
// 0x01E0 (0x0208 - 0x0028)
class UClothConfigNv final : public UClothConfigCommon
{
public:
	EClothingWindMethodNv                         ClothingWindMethod;                                // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClothingWindStrength;                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClothingMaxVelocity;                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClothingTimeBiasRatio;                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClothConstraintSetupNv                VerticalConstraint;                                // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FClothConstraintSetupNv                HorizontalConstraint;                              // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FClothConstraintSetupNv                BendConstraint;                                    // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FClothConstraintSetupNv                ShearConstraint;                                   // 0x0068(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SelfCollisionRadius;                               // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfCollisionStiffness;                            // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfCollisionCullScale;                            // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Damping;                                           // 0x0088(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDragCoefficient;                               // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindLiftCoefficient;                               // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LinearDrag;                                        // 0x00B0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularDrag;                                       // 0x00C8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearInertiaScale;                                // 0x00E0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularInertiaScale;                               // 0x00F8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CentrifugalInertiaScale;                           // 0x0110(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SolverFrequency;                                   // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StiffnessFrequency;                                // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GravityOverride;                                   // 0x0138(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGravityOverride;                               // 0x0150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TetherStiffness;                                   // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TetherLimit;                                       // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionThickness;                                // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimDriveSpringStiffness;                          // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimDriveDamperStiffness;                          // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDrawCloth;                                  // 0x0168(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawParticleSize;                                  // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawActorIndex;                                    // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDrawClothLine;                              // 0x0174(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebugInfo;                                  // 0x0175(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176[0x2];                                      // 0x0176(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawLineRatio;                                     // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawLineThickness;                                 // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint32>                                DrawParticleIndices;                               // 0x0180(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint32                                        TetherState;                                       // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClothingVirtualParticleTypeNv                ClothingVirtualParticleType;                       // 0x0194(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LayerName;                                         // 0x0198(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InterCollideLayerName;                             // 0x01A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterCollideDistance;                              // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InterCollideIteration;                             // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterCollideStiffness;                             // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bStaticCollision : 1;                              // 0x01B4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableGroundDetection : 1;                        // 0x01B4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableGeodesicTethers : 1;                        // 0x01B4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableCollisionProjection : 1;                    // 0x01B4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FollowLayerName;                                   // 0x01B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClothingWindMethod_Legacy                    WindMethod;                                        // 0x01C0(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClothConstraintSetup_Legacy           VerticalConstraintConfig;                          // 0x01C4(0x0010)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	struct FClothConstraintSetup_Legacy           HorizontalConstraintConfig;                        // 0x01D4(0x0010)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	struct FClothConstraintSetup_Legacy           BendConstraintConfig;                              // 0x01E4(0x0010)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	struct FClothConstraintSetup_Legacy           ShearConstraintConfig;                             // 0x01F4(0x0010)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClothConfigNv">();
	}
	static class UClothConfigNv* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClothConfigNv>();
	}
};
static_assert(alignof(UClothConfigNv) == 0x000008, "Wrong alignment on UClothConfigNv");
static_assert(sizeof(UClothConfigNv) == 0x000208, "Wrong size on UClothConfigNv");
static_assert(offsetof(UClothConfigNv, ClothingWindMethod) == 0x000028, "Member 'UClothConfigNv::ClothingWindMethod' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, ClothingWindStrength) == 0x00002C, "Member 'UClothConfigNv::ClothingWindStrength' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, ClothingMaxVelocity) == 0x000030, "Member 'UClothConfigNv::ClothingMaxVelocity' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, ClothingTimeBiasRatio) == 0x000034, "Member 'UClothConfigNv::ClothingTimeBiasRatio' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, VerticalConstraint) == 0x000038, "Member 'UClothConfigNv::VerticalConstraint' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, HorizontalConstraint) == 0x000048, "Member 'UClothConfigNv::HorizontalConstraint' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, BendConstraint) == 0x000058, "Member 'UClothConfigNv::BendConstraint' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, ShearConstraint) == 0x000068, "Member 'UClothConfigNv::ShearConstraint' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, SelfCollisionRadius) == 0x000078, "Member 'UClothConfigNv::SelfCollisionRadius' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, SelfCollisionStiffness) == 0x00007C, "Member 'UClothConfigNv::SelfCollisionStiffness' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, SelfCollisionCullScale) == 0x000080, "Member 'UClothConfigNv::SelfCollisionCullScale' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, Damping) == 0x000088, "Member 'UClothConfigNv::Damping' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, Friction) == 0x0000A0, "Member 'UClothConfigNv::Friction' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, WindDragCoefficient) == 0x0000A4, "Member 'UClothConfigNv::WindDragCoefficient' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, WindLiftCoefficient) == 0x0000A8, "Member 'UClothConfigNv::WindLiftCoefficient' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, LinearDrag) == 0x0000B0, "Member 'UClothConfigNv::LinearDrag' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, AngularDrag) == 0x0000C8, "Member 'UClothConfigNv::AngularDrag' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, LinearInertiaScale) == 0x0000E0, "Member 'UClothConfigNv::LinearInertiaScale' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, AngularInertiaScale) == 0x0000F8, "Member 'UClothConfigNv::AngularInertiaScale' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, CentrifugalInertiaScale) == 0x000110, "Member 'UClothConfigNv::CentrifugalInertiaScale' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, SolverFrequency) == 0x000128, "Member 'UClothConfigNv::SolverFrequency' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, StiffnessFrequency) == 0x00012C, "Member 'UClothConfigNv::StiffnessFrequency' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, GravityScale) == 0x000130, "Member 'UClothConfigNv::GravityScale' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, GravityOverride) == 0x000138, "Member 'UClothConfigNv::GravityOverride' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, bUseGravityOverride) == 0x000150, "Member 'UClothConfigNv::bUseGravityOverride' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, TetherStiffness) == 0x000154, "Member 'UClothConfigNv::TetherStiffness' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, TetherLimit) == 0x000158, "Member 'UClothConfigNv::TetherLimit' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, CollisionThickness) == 0x00015C, "Member 'UClothConfigNv::CollisionThickness' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, AnimDriveSpringStiffness) == 0x000160, "Member 'UClothConfigNv::AnimDriveSpringStiffness' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, AnimDriveDamperStiffness) == 0x000164, "Member 'UClothConfigNv::AnimDriveDamperStiffness' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, bEnableDrawCloth) == 0x000168, "Member 'UClothConfigNv::bEnableDrawCloth' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, DrawParticleSize) == 0x00016C, "Member 'UClothConfigNv::DrawParticleSize' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, DrawActorIndex) == 0x000170, "Member 'UClothConfigNv::DrawActorIndex' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, bEnableDrawClothLine) == 0x000174, "Member 'UClothConfigNv::bEnableDrawClothLine' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, bEnableDebugInfo) == 0x000175, "Member 'UClothConfigNv::bEnableDebugInfo' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, DrawLineRatio) == 0x000178, "Member 'UClothConfigNv::DrawLineRatio' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, DrawLineThickness) == 0x00017C, "Member 'UClothConfigNv::DrawLineThickness' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, DrawParticleIndices) == 0x000180, "Member 'UClothConfigNv::DrawParticleIndices' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, TetherState) == 0x000190, "Member 'UClothConfigNv::TetherState' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, ClothingVirtualParticleType) == 0x000194, "Member 'UClothConfigNv::ClothingVirtualParticleType' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, LayerName) == 0x000198, "Member 'UClothConfigNv::LayerName' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, InterCollideLayerName) == 0x0001A0, "Member 'UClothConfigNv::InterCollideLayerName' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, InterCollideDistance) == 0x0001A8, "Member 'UClothConfigNv::InterCollideDistance' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, InterCollideIteration) == 0x0001AC, "Member 'UClothConfigNv::InterCollideIteration' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, InterCollideStiffness) == 0x0001B0, "Member 'UClothConfigNv::InterCollideStiffness' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, FollowLayerName) == 0x0001B8, "Member 'UClothConfigNv::FollowLayerName' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, WindMethod) == 0x0001C0, "Member 'UClothConfigNv::WindMethod' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, VerticalConstraintConfig) == 0x0001C4, "Member 'UClothConfigNv::VerticalConstraintConfig' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, HorizontalConstraintConfig) == 0x0001D4, "Member 'UClothConfigNv::HorizontalConstraintConfig' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, BendConstraintConfig) == 0x0001E4, "Member 'UClothConfigNv::BendConstraintConfig' has a wrong offset!");
static_assert(offsetof(UClothConfigNv, ShearConstraintConfig) == 0x0001F4, "Member 'UClothConfigNv::ShearConstraintConfig' has a wrong offset!");

// Class ClothingSystemRuntimeNv.ClothingSimulationFactoryNv
// 0x0000 (0x0028 - 0x0028)
class UClothingSimulationFactoryNv final : public UClothingSimulationFactory
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClothingSimulationFactoryNv">();
	}
	static class UClothingSimulationFactoryNv* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClothingSimulationFactoryNv>();
	}
};
static_assert(alignof(UClothingSimulationFactoryNv) == 0x000008, "Wrong alignment on UClothingSimulationFactoryNv");
static_assert(sizeof(UClothingSimulationFactoryNv) == 0x000028, "Wrong size on UClothingSimulationFactoryNv");

// Class ClothingSystemRuntimeNv.ClothingSimulationInteractorNv
// 0x0010 (0x00A8 - 0x0098)
class UClothingSimulationInteractorNv final : public UClothingSimulationInteractor
{
public:
	uint8                                         Pad_98[0x10];                                      // 0x0098(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAnimDriveDamperStiffness(float InStiffness);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClothingSimulationInteractorNv">();
	}
	static class UClothingSimulationInteractorNv* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClothingSimulationInteractorNv>();
	}
};
static_assert(alignof(UClothingSimulationInteractorNv) == 0x000008, "Wrong alignment on UClothingSimulationInteractorNv");
static_assert(sizeof(UClothingSimulationInteractorNv) == 0x0000A8, "Wrong size on UClothingSimulationInteractorNv");

// Class ClothingSystemRuntimeNv.ClothPhysicalMeshDataNv_Legacy
// 0x0040 (0x0120 - 0x00E0)
class UClothPhysicalMeshDataNv_Legacy final : public UClothPhysicalMeshDataBase_Legacy
{
public:
	TArray<float>                                 MaxDistances;                                      // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BackstopDistances;                                 // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BackstopRadiuses;                                  // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 AnimDriveMultipliers;                              // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClothPhysicalMeshDataNv_Legacy">();
	}
	static class UClothPhysicalMeshDataNv_Legacy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClothPhysicalMeshDataNv_Legacy>();
	}
};
static_assert(alignof(UClothPhysicalMeshDataNv_Legacy) == 0x000008, "Wrong alignment on UClothPhysicalMeshDataNv_Legacy");
static_assert(sizeof(UClothPhysicalMeshDataNv_Legacy) == 0x000120, "Wrong size on UClothPhysicalMeshDataNv_Legacy");
static_assert(offsetof(UClothPhysicalMeshDataNv_Legacy, MaxDistances) == 0x0000E0, "Member 'UClothPhysicalMeshDataNv_Legacy::MaxDistances' has a wrong offset!");
static_assert(offsetof(UClothPhysicalMeshDataNv_Legacy, BackstopDistances) == 0x0000F0, "Member 'UClothPhysicalMeshDataNv_Legacy::BackstopDistances' has a wrong offset!");
static_assert(offsetof(UClothPhysicalMeshDataNv_Legacy, BackstopRadiuses) == 0x000100, "Member 'UClothPhysicalMeshDataNv_Legacy::BackstopRadiuses' has a wrong offset!");
static_assert(offsetof(UClothPhysicalMeshDataNv_Legacy, AnimDriveMultipliers) == 0x000110, "Member 'UClothPhysicalMeshDataNv_Legacy::AnimDriveMultipliers' has a wrong offset!");

}

