#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TT_TargetingSelectionByBulletTrack_V3

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "X6Game_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TT_TargetingSelectionByBulletTrack_V3.TT_TargetingSelectionByBulletTrack_V3_C
// 0x00F0 (0x01A0 - 0x00B0)
class UTT_TargetingSelectionByBulletTrack_V3_C final : public UX6TargetingSelectionTask_ChargeUpBase
{
public:
	bool                                          bOnlyFilterInteractive;                            // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CollisionObjectTypes;                              // 0x00B8(0x0010)(Edit, BlueprintVisible)
	class UBP_ShapeTraceDataAsset_C*              CollisionShapeTraceData;                           // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DefaultSourceOffset;                               // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 SocketName;                                        // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	double                                        FloorAngle;                                        // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Duration;                                          // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDrectionTrace;                                    // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BulletSocketName;                                  // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                BulletOffset;                                      // 0x0128(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ShapeTraceDataAsset_C*              HitShapeTraceData;                                 // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        SectorHeight;                                      // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinRadius;                                         // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxRadius;                                         // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SectorFOV;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SortAngleWeight;                                   // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SortAngleRefScore;                                 // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SortDisWeight;                                     // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SortDisRefScore;                                   // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SortMonsterScore;                                  // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SortCombatInteractiveScore;                        // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	class FString GetModuleName() const;
	bool K2_CanSelect(const struct FTargetingRequestHandle& TargetingHandle, const struct FTargetingSourceContext& SourceContext) const;
	void SelectTargets(const struct FTargetingRequestHandle& TargetingHandle, const struct FTargetingSourceContext& SourceContext) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TT_TargetingSelectionByBulletTrack_V3_C">();
	}
	static class UTT_TargetingSelectionByBulletTrack_V3_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTT_TargetingSelectionByBulletTrack_V3_C>();
	}
};
static_assert(alignof(UTT_TargetingSelectionByBulletTrack_V3_C) == 0x000010, "Wrong alignment on UTT_TargetingSelectionByBulletTrack_V3_C");
static_assert(sizeof(UTT_TargetingSelectionByBulletTrack_V3_C) == 0x0001A0, "Wrong size on UTT_TargetingSelectionByBulletTrack_V3_C");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, bOnlyFilterInteractive) == 0x0000B0, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::bOnlyFilterInteractive' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, CollisionObjectTypes) == 0x0000B8, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::CollisionObjectTypes' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, CollisionShapeTraceData) == 0x0000C8, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::CollisionShapeTraceData' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, DefaultSourceOffset) == 0x0000D0, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::DefaultSourceOffset' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, SocketName) == 0x0000E8, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::SocketName' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, FloorAngle) == 0x0000F8, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::FloorAngle' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, Speed) == 0x000100, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::Speed' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, Duration) == 0x000108, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::Duration' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, bDrectionTrace) == 0x000110, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::bDrectionTrace' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, BulletSocketName) == 0x000118, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::BulletSocketName' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, BulletOffset) == 0x000128, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::BulletOffset' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, HitShapeTraceData) == 0x000140, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::HitShapeTraceData' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, SectorHeight) == 0x000148, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::SectorHeight' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, MinRadius) == 0x000150, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::MinRadius' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, MaxRadius) == 0x000158, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::MaxRadius' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, SectorFOV) == 0x000160, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::SectorFOV' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, SortAngleWeight) == 0x000168, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::SortAngleWeight' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, SortAngleRefScore) == 0x000170, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::SortAngleRefScore' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, SortDisWeight) == 0x000178, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::SortDisWeight' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, SortDisRefScore) == 0x000180, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::SortDisRefScore' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, SortMonsterScore) == 0x000188, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::SortMonsterScore' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionByBulletTrack_V3_C, SortCombatInteractiveScore) == 0x000190, "Member 'UTT_TargetingSelectionByBulletTrack_V3_C::SortCombatInteractiveScore' has a wrong offset!");

}

