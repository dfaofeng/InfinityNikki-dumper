#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6Animation

#include "Basic.hpp"

#include "X6Animation_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function X6Animation.ANS_MantleRootMotionControl.CheckEnableRootMotionConditionBP
// 0x0018 (0x0018 - 0x0000)
struct ANS_MantleRootMotionControl_CheckEnableRootMotionConditionBP final
{
public:
	class USkeletalMeshComponent*                 SkelMeshComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      SequenceAsset;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ANS_MantleRootMotionControl_CheckEnableRootMotionConditionBP) == 0x000008, "Wrong alignment on ANS_MantleRootMotionControl_CheckEnableRootMotionConditionBP");
static_assert(sizeof(ANS_MantleRootMotionControl_CheckEnableRootMotionConditionBP) == 0x000018, "Wrong size on ANS_MantleRootMotionControl_CheckEnableRootMotionConditionBP");
static_assert(offsetof(ANS_MantleRootMotionControl_CheckEnableRootMotionConditionBP, SkelMeshComponent) == 0x000000, "Member 'ANS_MantleRootMotionControl_CheckEnableRootMotionConditionBP::SkelMeshComponent' has a wrong offset!");
static_assert(offsetof(ANS_MantleRootMotionControl_CheckEnableRootMotionConditionBP, SequenceAsset) == 0x000008, "Member 'ANS_MantleRootMotionControl_CheckEnableRootMotionConditionBP::SequenceAsset' has a wrong offset!");
static_assert(offsetof(ANS_MantleRootMotionControl_CheckEnableRootMotionConditionBP, ReturnValue) == 0x000010, "Member 'ANS_MantleRootMotionControl_CheckEnableRootMotionConditionBP::ReturnValue' has a wrong offset!");

// Function X6Animation.ContextualAnimationSystem.AddContextual
// 0x0030 (0x0030 - 0x0000)
struct ContextualAnimationSystem_AddContextual final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContextualData                        InContextualData;                                  // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimationSystem_AddContextual) == 0x000008, "Wrong alignment on ContextualAnimationSystem_AddContextual");
static_assert(sizeof(ContextualAnimationSystem_AddContextual) == 0x000030, "Wrong size on ContextualAnimationSystem_AddContextual");
static_assert(offsetof(ContextualAnimationSystem_AddContextual, ID) == 0x000000, "Member 'ContextualAnimationSystem_AddContextual::ID' has a wrong offset!");
static_assert(offsetof(ContextualAnimationSystem_AddContextual, InContextualData) == 0x000008, "Member 'ContextualAnimationSystem_AddContextual::InContextualData' has a wrong offset!");

// Function X6Animation.ContextualAnimationSystem.DisableContextualAnimation
// 0x0001 (0x0001 - 0x0000)
struct ContextualAnimationSystem_DisableContextualAnimation final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimationSystem_DisableContextualAnimation) == 0x000001, "Wrong alignment on ContextualAnimationSystem_DisableContextualAnimation");
static_assert(sizeof(ContextualAnimationSystem_DisableContextualAnimation) == 0x000001, "Wrong size on ContextualAnimationSystem_DisableContextualAnimation");
static_assert(offsetof(ContextualAnimationSystem_DisableContextualAnimation, ID) == 0x000000, "Member 'ContextualAnimationSystem_DisableContextualAnimation::ID' has a wrong offset!");

// Function X6Animation.ContextualAnimationSystem.EnableContextualAnimation
// 0x0001 (0x0001 - 0x0000)
struct ContextualAnimationSystem_EnableContextualAnimation final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimationSystem_EnableContextualAnimation) == 0x000001, "Wrong alignment on ContextualAnimationSystem_EnableContextualAnimation");
static_assert(sizeof(ContextualAnimationSystem_EnableContextualAnimation) == 0x000001, "Wrong size on ContextualAnimationSystem_EnableContextualAnimation");
static_assert(offsetof(ContextualAnimationSystem_EnableContextualAnimation, ID) == 0x000000, "Member 'ContextualAnimationSystem_EnableContextualAnimation::ID' has a wrong offset!");

// Function X6Animation.ContextualAnimationSystem.IsCurrentContextualAnimiationPlaying
// 0x0001 (0x0001 - 0x0000)
struct ContextualAnimationSystem_IsCurrentContextualAnimiationPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimationSystem_IsCurrentContextualAnimiationPlaying) == 0x000001, "Wrong alignment on ContextualAnimationSystem_IsCurrentContextualAnimiationPlaying");
static_assert(sizeof(ContextualAnimationSystem_IsCurrentContextualAnimiationPlaying) == 0x000001, "Wrong size on ContextualAnimationSystem_IsCurrentContextualAnimiationPlaying");
static_assert(offsetof(ContextualAnimationSystem_IsCurrentContextualAnimiationPlaying, ReturnValue) == 0x000000, "Member 'ContextualAnimationSystem_IsCurrentContextualAnimiationPlaying::ReturnValue' has a wrong offset!");

// Function X6Animation.ContextualAnimationSystem.OnContextualEndByID
// 0x0001 (0x0001 - 0x0000)
struct ContextualAnimationSystem_OnContextualEndByID final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimationSystem_OnContextualEndByID) == 0x000001, "Wrong alignment on ContextualAnimationSystem_OnContextualEndByID");
static_assert(sizeof(ContextualAnimationSystem_OnContextualEndByID) == 0x000001, "Wrong size on ContextualAnimationSystem_OnContextualEndByID");
static_assert(offsetof(ContextualAnimationSystem_OnContextualEndByID, ID) == 0x000000, "Member 'ContextualAnimationSystem_OnContextualEndByID::ID' has a wrong offset!");

// Function X6Animation.ContextualAnimationSystem.RemoveContextual
// 0x0001 (0x0001 - 0x0000)
struct ContextualAnimationSystem_RemoveContextual final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimationSystem_RemoveContextual) == 0x000001, "Wrong alignment on ContextualAnimationSystem_RemoveContextual");
static_assert(sizeof(ContextualAnimationSystem_RemoveContextual) == 0x000001, "Wrong size on ContextualAnimationSystem_RemoveContextual");
static_assert(offsetof(ContextualAnimationSystem_RemoveContextual, ID) == 0x000000, "Member 'ContextualAnimationSystem_RemoveContextual::ID' has a wrong offset!");

// Function X6Animation.ContextualAnimationSystem.ResumeContextualAnimation
// 0x0001 (0x0001 - 0x0000)
struct ContextualAnimationSystem_ResumeContextualAnimation final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimationSystem_ResumeContextualAnimation) == 0x000001, "Wrong alignment on ContextualAnimationSystem_ResumeContextualAnimation");
static_assert(sizeof(ContextualAnimationSystem_ResumeContextualAnimation) == 0x000001, "Wrong size on ContextualAnimationSystem_ResumeContextualAnimation");
static_assert(offsetof(ContextualAnimationSystem_ResumeContextualAnimation, ID) == 0x000000, "Member 'ContextualAnimationSystem_ResumeContextualAnimation::ID' has a wrong offset!");

// Function X6Animation.ContextualAnimationSystem.SetContextualAnimationEnable
// 0x0002 (0x0002 - 0x0000)
struct ContextualAnimationSystem_SetContextualAnimationEnable final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimationSystem_SetContextualAnimationEnable) == 0x000001, "Wrong alignment on ContextualAnimationSystem_SetContextualAnimationEnable");
static_assert(sizeof(ContextualAnimationSystem_SetContextualAnimationEnable) == 0x000002, "Wrong size on ContextualAnimationSystem_SetContextualAnimationEnable");
static_assert(offsetof(ContextualAnimationSystem_SetContextualAnimationEnable, ID) == 0x000000, "Member 'ContextualAnimationSystem_SetContextualAnimationEnable::ID' has a wrong offset!");
static_assert(offsetof(ContextualAnimationSystem_SetContextualAnimationEnable, bEnable) == 0x000001, "Member 'ContextualAnimationSystem_SetContextualAnimationEnable::bEnable' has a wrong offset!");

// Function X6Animation.ContextualAnimationSystem.SetContextualSystemEnable
// 0x0001 (0x0001 - 0x0000)
struct ContextualAnimationSystem_SetContextualSystemEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimationSystem_SetContextualSystemEnable) == 0x000001, "Wrong alignment on ContextualAnimationSystem_SetContextualSystemEnable");
static_assert(sizeof(ContextualAnimationSystem_SetContextualSystemEnable) == 0x000001, "Wrong size on ContextualAnimationSystem_SetContextualSystemEnable");
static_assert(offsetof(ContextualAnimationSystem_SetContextualSystemEnable, bEnable) == 0x000000, "Member 'ContextualAnimationSystem_SetContextualSystemEnable::bEnable' has a wrong offset!");

// Function X6Animation.ContextualAnimationSystem.SuspendContextualAnimation
// 0x0001 (0x0001 - 0x0000)
struct ContextualAnimationSystem_SuspendContextualAnimation final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualAnimationSystem_SuspendContextualAnimation) == 0x000001, "Wrong alignment on ContextualAnimationSystem_SuspendContextualAnimation");
static_assert(sizeof(ContextualAnimationSystem_SuspendContextualAnimation) == 0x000001, "Wrong size on ContextualAnimationSystem_SuspendContextualAnimation");
static_assert(offsetof(ContextualAnimationSystem_SuspendContextualAnimation, ID) == 0x000000, "Member 'ContextualAnimationSystem_SuspendContextualAnimation::ID' has a wrong offset!");

// Function X6Animation.PlayerLocomotionAnimInstance.BlueprintCustomLateUpdate
// 0x0004 (0x0004 - 0x0000)
struct PlayerLocomotionAnimInstance_BlueprintCustomLateUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLocomotionAnimInstance_BlueprintCustomLateUpdate) == 0x000004, "Wrong alignment on PlayerLocomotionAnimInstance_BlueprintCustomLateUpdate");
static_assert(sizeof(PlayerLocomotionAnimInstance_BlueprintCustomLateUpdate) == 0x000004, "Wrong size on PlayerLocomotionAnimInstance_BlueprintCustomLateUpdate");
static_assert(offsetof(PlayerLocomotionAnimInstance_BlueprintCustomLateUpdate, DeltaSeconds) == 0x000000, "Member 'PlayerLocomotionAnimInstance_BlueprintCustomLateUpdate::DeltaSeconds' has a wrong offset!");

// Function X6Animation.PlayerLocomotionAnimInstance.BlueprintCustomPreUpdate
// 0x0004 (0x0004 - 0x0000)
struct PlayerLocomotionAnimInstance_BlueprintCustomPreUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLocomotionAnimInstance_BlueprintCustomPreUpdate) == 0x000004, "Wrong alignment on PlayerLocomotionAnimInstance_BlueprintCustomPreUpdate");
static_assert(sizeof(PlayerLocomotionAnimInstance_BlueprintCustomPreUpdate) == 0x000004, "Wrong size on PlayerLocomotionAnimInstance_BlueprintCustomPreUpdate");
static_assert(offsetof(PlayerLocomotionAnimInstance_BlueprintCustomPreUpdate, DeltaSeconds) == 0x000000, "Member 'PlayerLocomotionAnimInstance_BlueprintCustomPreUpdate::DeltaSeconds' has a wrong offset!");

// Function X6Animation.PlayerLocomotionAnimInstance.BlueprintCustomUpdate
// 0x0004 (0x0004 - 0x0000)
struct PlayerLocomotionAnimInstance_BlueprintCustomUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLocomotionAnimInstance_BlueprintCustomUpdate) == 0x000004, "Wrong alignment on PlayerLocomotionAnimInstance_BlueprintCustomUpdate");
static_assert(sizeof(PlayerLocomotionAnimInstance_BlueprintCustomUpdate) == 0x000004, "Wrong size on PlayerLocomotionAnimInstance_BlueprintCustomUpdate");
static_assert(offsetof(PlayerLocomotionAnimInstance_BlueprintCustomUpdate, DeltaSeconds) == 0x000000, "Member 'PlayerLocomotionAnimInstance_BlueprintCustomUpdate::DeltaSeconds' has a wrong offset!");

// Function X6Animation.PlayerLocomotionAnimInstance.DeterminTransToRightFoot
// 0x0001 (0x0001 - 0x0000)
struct PlayerLocomotionAnimInstance_DeterminTransToRightFoot final
{
public:
	bool                                          bTranstoRight;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLocomotionAnimInstance_DeterminTransToRightFoot) == 0x000001, "Wrong alignment on PlayerLocomotionAnimInstance_DeterminTransToRightFoot");
static_assert(sizeof(PlayerLocomotionAnimInstance_DeterminTransToRightFoot) == 0x000001, "Wrong size on PlayerLocomotionAnimInstance_DeterminTransToRightFoot");
static_assert(offsetof(PlayerLocomotionAnimInstance_DeterminTransToRightFoot, bTranstoRight) == 0x000000, "Member 'PlayerLocomotionAnimInstance_DeterminTransToRightFoot::bTranstoRight' has a wrong offset!");

// Function X6Animation.PlayerLocomotionAnimInstance.SetLocomotionLogicStates
// 0x0001 (0x0001 - 0x0000)
struct PlayerLocomotionAnimInstance_SetLocomotionLogicStates final
{
public:
	ELocomotionGait                               InAllowGait;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLocomotionAnimInstance_SetLocomotionLogicStates) == 0x000001, "Wrong alignment on PlayerLocomotionAnimInstance_SetLocomotionLogicStates");
static_assert(sizeof(PlayerLocomotionAnimInstance_SetLocomotionLogicStates) == 0x000001, "Wrong size on PlayerLocomotionAnimInstance_SetLocomotionLogicStates");
static_assert(offsetof(PlayerLocomotionAnimInstance_SetLocomotionLogicStates, InAllowGait) == 0x000000, "Member 'PlayerLocomotionAnimInstance_SetLocomotionLogicStates::InAllowGait' has a wrong offset!");

// Function X6Animation.PlayerLocomotionAnimInstance.SetLocomotionType
// 0x0001 (0x0001 - 0x0000)
struct PlayerLocomotionAnimInstance_SetLocomotionType final
{
public:
	ELocomotionType                               LocomotionType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLocomotionAnimInstance_SetLocomotionType) == 0x000001, "Wrong alignment on PlayerLocomotionAnimInstance_SetLocomotionType");
static_assert(sizeof(PlayerLocomotionAnimInstance_SetLocomotionType) == 0x000001, "Wrong size on PlayerLocomotionAnimInstance_SetLocomotionType");
static_assert(offsetof(PlayerLocomotionAnimInstance_SetLocomotionType, LocomotionType) == 0x000000, "Member 'PlayerLocomotionAnimInstance_SetLocomotionType::LocomotionType' has a wrong offset!");

// Function X6Animation.PlayerLocomotionAnimInstance.UpdateLocomotionLogicValues
// 0x0040 (0x0040 - 0x0000)
struct PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InMovementInput;                                   // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaxAcceleration;                                 // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTurnAngle;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSlopeAngle;                                      // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues) == 0x000008, "Wrong alignment on PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues");
static_assert(sizeof(PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues) == 0x000040, "Wrong size on PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues");
static_assert(offsetof(PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues, InVelocity) == 0x000000, "Member 'PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues::InVelocity' has a wrong offset!");
static_assert(offsetof(PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues, InMovementInput) == 0x000018, "Member 'PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues::InMovementInput' has a wrong offset!");
static_assert(offsetof(PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues, InMaxAcceleration) == 0x000030, "Member 'PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues::InMaxAcceleration' has a wrong offset!");
static_assert(offsetof(PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues, InTurnAngle) == 0x000034, "Member 'PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues::InTurnAngle' has a wrong offset!");
static_assert(offsetof(PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues, InSlopeAngle) == 0x000038, "Member 'PlayerLocomotionAnimInstance_UpdateLocomotionLogicValues::InSlopeAngle' has a wrong offset!");

// Function X6Animation.NikkiGroundAnimInstance.SetAllowSpeed
// 0x000C (0x000C - 0x0000)
struct NikkiGroundAnimInstance_SetAllowSpeed final
{
public:
	float                                         InAllowWalkSpeed;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAllowRunSpeed;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAllowSprintSpeed;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NikkiGroundAnimInstance_SetAllowSpeed) == 0x000004, "Wrong alignment on NikkiGroundAnimInstance_SetAllowSpeed");
static_assert(sizeof(NikkiGroundAnimInstance_SetAllowSpeed) == 0x00000C, "Wrong size on NikkiGroundAnimInstance_SetAllowSpeed");
static_assert(offsetof(NikkiGroundAnimInstance_SetAllowSpeed, InAllowWalkSpeed) == 0x000000, "Member 'NikkiGroundAnimInstance_SetAllowSpeed::InAllowWalkSpeed' has a wrong offset!");
static_assert(offsetof(NikkiGroundAnimInstance_SetAllowSpeed, InAllowRunSpeed) == 0x000004, "Member 'NikkiGroundAnimInstance_SetAllowSpeed::InAllowRunSpeed' has a wrong offset!");
static_assert(offsetof(NikkiGroundAnimInstance_SetAllowSpeed, InAllowSprintSpeed) == 0x000008, "Member 'NikkiGroundAnimInstance_SetAllowSpeed::InAllowSprintSpeed' has a wrong offset!");

// Function X6Animation.NikkiGroundAnimInstance.SetAnimBenchmarkSpeed
// 0x0010 (0x0010 - 0x0000)
struct NikkiGroundAnimInstance_SetAnimBenchmarkSpeed final
{
public:
	float                                         InAnimationSprintSpeed;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAnimationRunSpeed;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAnimationWalkSpeed;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAnimationWalkSlowSpeed;                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NikkiGroundAnimInstance_SetAnimBenchmarkSpeed) == 0x000004, "Wrong alignment on NikkiGroundAnimInstance_SetAnimBenchmarkSpeed");
static_assert(sizeof(NikkiGroundAnimInstance_SetAnimBenchmarkSpeed) == 0x000010, "Wrong size on NikkiGroundAnimInstance_SetAnimBenchmarkSpeed");
static_assert(offsetof(NikkiGroundAnimInstance_SetAnimBenchmarkSpeed, InAnimationSprintSpeed) == 0x000000, "Member 'NikkiGroundAnimInstance_SetAnimBenchmarkSpeed::InAnimationSprintSpeed' has a wrong offset!");
static_assert(offsetof(NikkiGroundAnimInstance_SetAnimBenchmarkSpeed, InAnimationRunSpeed) == 0x000004, "Member 'NikkiGroundAnimInstance_SetAnimBenchmarkSpeed::InAnimationRunSpeed' has a wrong offset!");
static_assert(offsetof(NikkiGroundAnimInstance_SetAnimBenchmarkSpeed, InAnimationWalkSpeed) == 0x000008, "Member 'NikkiGroundAnimInstance_SetAnimBenchmarkSpeed::InAnimationWalkSpeed' has a wrong offset!");
static_assert(offsetof(NikkiGroundAnimInstance_SetAnimBenchmarkSpeed, InAnimationWalkSlowSpeed) == 0x00000C, "Member 'NikkiGroundAnimInstance_SetAnimBenchmarkSpeed::InAnimationWalkSlowSpeed' has a wrong offset!");

// Function X6Animation.NikkiGroundAnimInstance.SetAnimMainState
// 0x0002 (0x0002 - 0x0000)
struct NikkiGroundAnimInstance_SetAnimMainState final
{
public:
	ELocomotionGroundMainState                    MainState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnter;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NikkiGroundAnimInstance_SetAnimMainState) == 0x000001, "Wrong alignment on NikkiGroundAnimInstance_SetAnimMainState");
static_assert(sizeof(NikkiGroundAnimInstance_SetAnimMainState) == 0x000002, "Wrong size on NikkiGroundAnimInstance_SetAnimMainState");
static_assert(offsetof(NikkiGroundAnimInstance_SetAnimMainState, MainState) == 0x000000, "Member 'NikkiGroundAnimInstance_SetAnimMainState::MainState' has a wrong offset!");
static_assert(offsetof(NikkiGroundAnimInstance_SetAnimMainState, bEnter) == 0x000001, "Member 'NikkiGroundAnimInstance_SetAnimMainState::bEnter' has a wrong offset!");

// Function X6Animation.NikkiGroundAnimInstance.SetBoardSpeed
// 0x000C (0x000C - 0x0000)
struct NikkiGroundAnimInstance_SetBoardSpeed final
{
public:
	float                                         InAllowWalkSlowSpeed;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCurrentMaxSpeed;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCurrentConfigAllowSpeed;                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NikkiGroundAnimInstance_SetBoardSpeed) == 0x000004, "Wrong alignment on NikkiGroundAnimInstance_SetBoardSpeed");
static_assert(sizeof(NikkiGroundAnimInstance_SetBoardSpeed) == 0x00000C, "Wrong size on NikkiGroundAnimInstance_SetBoardSpeed");
static_assert(offsetof(NikkiGroundAnimInstance_SetBoardSpeed, InAllowWalkSlowSpeed) == 0x000000, "Member 'NikkiGroundAnimInstance_SetBoardSpeed::InAllowWalkSlowSpeed' has a wrong offset!");
static_assert(offsetof(NikkiGroundAnimInstance_SetBoardSpeed, InCurrentMaxSpeed) == 0x000004, "Member 'NikkiGroundAnimInstance_SetBoardSpeed::InCurrentMaxSpeed' has a wrong offset!");
static_assert(offsetof(NikkiGroundAnimInstance_SetBoardSpeed, InCurrentConfigAllowSpeed) == 0x000008, "Member 'NikkiGroundAnimInstance_SetBoardSpeed::InCurrentConfigAllowSpeed' has a wrong offset!");

// Function X6Animation.NikkiGroundAnimInstance.SetIdleState
// 0x0001 (0x0001 - 0x0000)
struct NikkiGroundAnimInstance_SetIdleState final
{
public:
	ELocomotionGroundIdleState                    IdleState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NikkiGroundAnimInstance_SetIdleState) == 0x000001, "Wrong alignment on NikkiGroundAnimInstance_SetIdleState");
static_assert(sizeof(NikkiGroundAnimInstance_SetIdleState) == 0x000001, "Wrong size on NikkiGroundAnimInstance_SetIdleState");
static_assert(offsetof(NikkiGroundAnimInstance_SetIdleState, IdleState) == 0x000000, "Member 'NikkiGroundAnimInstance_SetIdleState::IdleState' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.ChangeMontageSegmentRange
// 0x0020 (0x0020 - 0x0000)
struct X6AnimationFunctionLibrary_ChangeMontageSegmentRange final
{
public:
	class UAnimMontage*                           InOutMontage;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrimStartTime;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrimEndTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrackIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SegmentIndex;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AnimationFunctionLibrary_ChangeMontageSegmentRange) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_ChangeMontageSegmentRange");
static_assert(sizeof(X6AnimationFunctionLibrary_ChangeMontageSegmentRange) == 0x000020, "Wrong size on X6AnimationFunctionLibrary_ChangeMontageSegmentRange");
static_assert(offsetof(X6AnimationFunctionLibrary_ChangeMontageSegmentRange, InOutMontage) == 0x000000, "Member 'X6AnimationFunctionLibrary_ChangeMontageSegmentRange::InOutMontage' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_ChangeMontageSegmentRange, TrimStartTime) == 0x000008, "Member 'X6AnimationFunctionLibrary_ChangeMontageSegmentRange::TrimStartTime' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_ChangeMontageSegmentRange, TrimEndTime) == 0x00000C, "Member 'X6AnimationFunctionLibrary_ChangeMontageSegmentRange::TrimEndTime' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_ChangeMontageSegmentRange, TrackIndex) == 0x000010, "Member 'X6AnimationFunctionLibrary_ChangeMontageSegmentRange::TrackIndex' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_ChangeMontageSegmentRange, SegmentIndex) == 0x000014, "Member 'X6AnimationFunctionLibrary_ChangeMontageSegmentRange::SegmentIndex' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_ChangeMontageSegmentRange, ReturnValue) == 0x000018, "Member 'X6AnimationFunctionLibrary_ChangeMontageSegmentRange::ReturnValue' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.ClearAllInertialization
// 0x0018 (0x0018 - 0x0000)
struct X6AnimationFunctionLibrary_ClearAllInertialization final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIncludeLinkedAniminstance;                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AnimationFunctionLibrary_ClearAllInertialization) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_ClearAllInertialization");
static_assert(sizeof(X6AnimationFunctionLibrary_ClearAllInertialization) == 0x000018, "Wrong size on X6AnimationFunctionLibrary_ClearAllInertialization");
static_assert(offsetof(X6AnimationFunctionLibrary_ClearAllInertialization, Context) == 0x000000, "Member 'X6AnimationFunctionLibrary_ClearAllInertialization::Context' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_ClearAllInertialization, bIncludeLinkedAniminstance) == 0x000010, "Member 'X6AnimationFunctionLibrary_ClearAllInertialization::bIncludeLinkedAniminstance' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.ClearAllInertializationOfThisAniminstance
// 0x0010 (0x0010 - 0x0000)
struct X6AnimationFunctionLibrary_ClearAllInertializationOfThisAniminstance final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeLinkedAniminstance;                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AnimationFunctionLibrary_ClearAllInertializationOfThisAniminstance) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_ClearAllInertializationOfThisAniminstance");
static_assert(sizeof(X6AnimationFunctionLibrary_ClearAllInertializationOfThisAniminstance) == 0x000010, "Wrong size on X6AnimationFunctionLibrary_ClearAllInertializationOfThisAniminstance");
static_assert(offsetof(X6AnimationFunctionLibrary_ClearAllInertializationOfThisAniminstance, AnimInstance) == 0x000000, "Member 'X6AnimationFunctionLibrary_ClearAllInertializationOfThisAniminstance::AnimInstance' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_ClearAllInertializationOfThisAniminstance, bIncludeLinkedAniminstance) == 0x000008, "Member 'X6AnimationFunctionLibrary_ClearAllInertializationOfThisAniminstance::bIncludeLinkedAniminstance' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.ClearInertializationBeforeThisNode
// 0x0010 (0x0010 - 0x0000)
struct X6AnimationFunctionLibrary_ClearInertializationBeforeThisNode final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AnimationFunctionLibrary_ClearInertializationBeforeThisNode) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_ClearInertializationBeforeThisNode");
static_assert(sizeof(X6AnimationFunctionLibrary_ClearInertializationBeforeThisNode) == 0x000010, "Wrong size on X6AnimationFunctionLibrary_ClearInertializationBeforeThisNode");
static_assert(offsetof(X6AnimationFunctionLibrary_ClearInertializationBeforeThisNode, Context) == 0x000000, "Member 'X6AnimationFunctionLibrary_ClearInertializationBeforeThisNode::Context' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.CreatePoseSnapshotOfAnimInstance
// 0x0050 (0x0050 - 0x0000)
struct X6AnimationFunctionLibrary_CreatePoseSnapshotOfAnimInstance final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocalTransforms;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSnapshot                          PoseSnapshot;                                      // 0x0018(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AnimationFunctionLibrary_CreatePoseSnapshotOfAnimInstance) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_CreatePoseSnapshotOfAnimInstance");
static_assert(sizeof(X6AnimationFunctionLibrary_CreatePoseSnapshotOfAnimInstance) == 0x000050, "Wrong size on X6AnimationFunctionLibrary_CreatePoseSnapshotOfAnimInstance");
static_assert(offsetof(X6AnimationFunctionLibrary_CreatePoseSnapshotOfAnimInstance, AnimInstance) == 0x000000, "Member 'X6AnimationFunctionLibrary_CreatePoseSnapshotOfAnimInstance::AnimInstance' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_CreatePoseSnapshotOfAnimInstance, LocalTransforms) == 0x000008, "Member 'X6AnimationFunctionLibrary_CreatePoseSnapshotOfAnimInstance::LocalTransforms' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_CreatePoseSnapshotOfAnimInstance, PoseSnapshot) == 0x000018, "Member 'X6AnimationFunctionLibrary_CreatePoseSnapshotOfAnimInstance::PoseSnapshot' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.ForceConsiderInertializationDeficitThisFrame
// 0x0010 (0x0010 - 0x0000)
struct X6AnimationFunctionLibrary_ForceConsiderInertializationDeficitThisFrame final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AnimationFunctionLibrary_ForceConsiderInertializationDeficitThisFrame) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_ForceConsiderInertializationDeficitThisFrame");
static_assert(sizeof(X6AnimationFunctionLibrary_ForceConsiderInertializationDeficitThisFrame) == 0x000010, "Wrong size on X6AnimationFunctionLibrary_ForceConsiderInertializationDeficitThisFrame");
static_assert(offsetof(X6AnimationFunctionLibrary_ForceConsiderInertializationDeficitThisFrame, Context) == 0x000000, "Member 'X6AnimationFunctionLibrary_ForceConsiderInertializationDeficitThisFrame::Context' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.ForceIgnoreInertializationDeficitThisFrame
// 0x0010 (0x0010 - 0x0000)
struct X6AnimationFunctionLibrary_ForceIgnoreInertializationDeficitThisFrame final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AnimationFunctionLibrary_ForceIgnoreInertializationDeficitThisFrame) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_ForceIgnoreInertializationDeficitThisFrame");
static_assert(sizeof(X6AnimationFunctionLibrary_ForceIgnoreInertializationDeficitThisFrame) == 0x000010, "Wrong size on X6AnimationFunctionLibrary_ForceIgnoreInertializationDeficitThisFrame");
static_assert(offsetof(X6AnimationFunctionLibrary_ForceIgnoreInertializationDeficitThisFrame, Context) == 0x000000, "Member 'X6AnimationFunctionLibrary_ForceIgnoreInertializationDeficitThisFrame::Context' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.ForceToStopSlotAnimation
// 0x0018 (0x0018 - 0x0000)
struct X6AnimationFunctionLibrary_ForceToStopSlotAnimation final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendOutTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AnimationFunctionLibrary_ForceToStopSlotAnimation) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_ForceToStopSlotAnimation");
static_assert(sizeof(X6AnimationFunctionLibrary_ForceToStopSlotAnimation) == 0x000018, "Wrong size on X6AnimationFunctionLibrary_ForceToStopSlotAnimation");
static_assert(offsetof(X6AnimationFunctionLibrary_ForceToStopSlotAnimation, AnimInstance) == 0x000000, "Member 'X6AnimationFunctionLibrary_ForceToStopSlotAnimation::AnimInstance' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_ForceToStopSlotAnimation, InBlendOutTime) == 0x000008, "Member 'X6AnimationFunctionLibrary_ForceToStopSlotAnimation::InBlendOutTime' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_ForceToStopSlotAnimation, SlotNodeName) == 0x00000C, "Member 'X6AnimationFunctionLibrary_ForceToStopSlotAnimation::SlotNodeName' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.GetAnimationSequencesBySlotNameInAnimMontage
// 0x0020 (0x0020 - 0x0000)
struct X6AnimationFunctionLibrary_GetAnimationSequencesBySlotNameInAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimSequenceBase*>              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AnimationFunctionLibrary_GetAnimationSequencesBySlotNameInAnimMontage) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_GetAnimationSequencesBySlotNameInAnimMontage");
static_assert(sizeof(X6AnimationFunctionLibrary_GetAnimationSequencesBySlotNameInAnimMontage) == 0x000020, "Wrong size on X6AnimationFunctionLibrary_GetAnimationSequencesBySlotNameInAnimMontage");
static_assert(offsetof(X6AnimationFunctionLibrary_GetAnimationSequencesBySlotNameInAnimMontage, AnimMontage) == 0x000000, "Member 'X6AnimationFunctionLibrary_GetAnimationSequencesBySlotNameInAnimMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_GetAnimationSequencesBySlotNameInAnimMontage, SlotNodeName) == 0x000008, "Member 'X6AnimationFunctionLibrary_GetAnimationSequencesBySlotNameInAnimMontage::SlotNodeName' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_GetAnimationSequencesBySlotNameInAnimMontage, ReturnValue) == 0x000010, "Member 'X6AnimationFunctionLibrary_GetAnimationSequencesBySlotNameInAnimMontage::ReturnValue' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.GetAnimationSequencesInTargetSlot
// 0x0020 (0x0020 - 0x0000)
struct X6AnimationFunctionLibrary_GetAnimationSequencesInTargetSlot final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimSequenceBase*>              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AnimationFunctionLibrary_GetAnimationSequencesInTargetSlot) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_GetAnimationSequencesInTargetSlot");
static_assert(sizeof(X6AnimationFunctionLibrary_GetAnimationSequencesInTargetSlot) == 0x000020, "Wrong size on X6AnimationFunctionLibrary_GetAnimationSequencesInTargetSlot");
static_assert(offsetof(X6AnimationFunctionLibrary_GetAnimationSequencesInTargetSlot, AnimInstance) == 0x000000, "Member 'X6AnimationFunctionLibrary_GetAnimationSequencesInTargetSlot::AnimInstance' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_GetAnimationSequencesInTargetSlot, SlotNodeName) == 0x000008, "Member 'X6AnimationFunctionLibrary_GetAnimationSequencesInTargetSlot::SlotNodeName' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_GetAnimationSequencesInTargetSlot, ReturnValue) == 0x000010, "Member 'X6AnimationFunctionLibrary_GetAnimationSequencesInTargetSlot::ReturnValue' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.GetLinkedAnimLayersInstanceByClass
// 0x0020 (0x0020 - 0x0000)
struct X6AnimationFunctionLibrary_GetLinkedAnimLayersInstanceByClass final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              InClass;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimInstance*>                  OutLinkedInstances;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AnimationFunctionLibrary_GetLinkedAnimLayersInstanceByClass) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_GetLinkedAnimLayersInstanceByClass");
static_assert(sizeof(X6AnimationFunctionLibrary_GetLinkedAnimLayersInstanceByClass) == 0x000020, "Wrong size on X6AnimationFunctionLibrary_GetLinkedAnimLayersInstanceByClass");
static_assert(offsetof(X6AnimationFunctionLibrary_GetLinkedAnimLayersInstanceByClass, AnimInstance) == 0x000000, "Member 'X6AnimationFunctionLibrary_GetLinkedAnimLayersInstanceByClass::AnimInstance' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_GetLinkedAnimLayersInstanceByClass, InClass) == 0x000008, "Member 'X6AnimationFunctionLibrary_GetLinkedAnimLayersInstanceByClass::InClass' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_GetLinkedAnimLayersInstanceByClass, OutLinkedInstances) == 0x000010, "Member 'X6AnimationFunctionLibrary_GetLinkedAnimLayersInstanceByClass::OutLinkedInstances' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.GetMontagePositionAndTotalLengthBySlotNameInAnimInstance
// 0x0020 (0x0020 - 0x0000)
struct X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCurPosition;                                    // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTotalLength;                                    // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance");
static_assert(sizeof(X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance) == 0x000020, "Wrong size on X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance");
static_assert(offsetof(X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance, AnimInstance) == 0x000000, "Member 'X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance::AnimInstance' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance, SlotNodeName) == 0x000008, "Member 'X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance::SlotNodeName' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance, OutCurPosition) == 0x000010, "Member 'X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance::OutCurPosition' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance, OutTotalLength) == 0x000014, "Member 'X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance::OutTotalLength' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance, ReturnValue) == 0x000018, "Member 'X6AnimationFunctionLibrary_GetMontagePositionAndTotalLengthBySlotNameInAnimInstance::ReturnValue' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.GetPoseDataFromCurrentPose
// 0x0018 (0x0018 - 0x0000)
struct X6AnimationFunctionLibrary_GetPoseDataFromCurrentPose final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6AnimationFunctionLibrary_GetPoseDataFromCurrentPose) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_GetPoseDataFromCurrentPose");
static_assert(sizeof(X6AnimationFunctionLibrary_GetPoseDataFromCurrentPose) == 0x000018, "Wrong size on X6AnimationFunctionLibrary_GetPoseDataFromCurrentPose");
static_assert(offsetof(X6AnimationFunctionLibrary_GetPoseDataFromCurrentPose, AnimInstance) == 0x000000, "Member 'X6AnimationFunctionLibrary_GetPoseDataFromCurrentPose::AnimInstance' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_GetPoseDataFromCurrentPose, ReturnValue) == 0x000008, "Member 'X6AnimationFunctionLibrary_GetPoseDataFromCurrentPose::ReturnValue' has a wrong offset!");

// Function X6Animation.X6AnimationFunctionLibrary.IsAnimSequenceValidCurveName
// 0x0018 (0x0018 - 0x0000)
struct X6AnimationFunctionLibrary_IsAnimSequenceValidCurveName final
{
public:
	class UAnimSequenceBase*                      InAnimSequence;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InCurveName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6AnimationFunctionLibrary_IsAnimSequenceValidCurveName) == 0x000008, "Wrong alignment on X6AnimationFunctionLibrary_IsAnimSequenceValidCurveName");
static_assert(sizeof(X6AnimationFunctionLibrary_IsAnimSequenceValidCurveName) == 0x000018, "Wrong size on X6AnimationFunctionLibrary_IsAnimSequenceValidCurveName");
static_assert(offsetof(X6AnimationFunctionLibrary_IsAnimSequenceValidCurveName, InAnimSequence) == 0x000000, "Member 'X6AnimationFunctionLibrary_IsAnimSequenceValidCurveName::InAnimSequence' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_IsAnimSequenceValidCurveName, InCurveName) == 0x000008, "Member 'X6AnimationFunctionLibrary_IsAnimSequenceValidCurveName::InCurveName' has a wrong offset!");
static_assert(offsetof(X6AnimationFunctionLibrary_IsAnimSequenceValidCurveName, ReturnValue) == 0x000010, "Member 'X6AnimationFunctionLibrary_IsAnimSequenceValidCurveName::ReturnValue' has a wrong offset!");

// Function X6Animation.X6ClothAnimInstance.AddClothExternalAcc
// 0x0020 (0x0020 - 0x0000)
struct X6ClothAnimInstance_AddClothExternalAcc final
{
public:
	struct FVector                                InClothExternalAcc;                                // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InClothExternalAccDuration;                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6ClothAnimInstance_AddClothExternalAcc) == 0x000008, "Wrong alignment on X6ClothAnimInstance_AddClothExternalAcc");
static_assert(sizeof(X6ClothAnimInstance_AddClothExternalAcc) == 0x000020, "Wrong size on X6ClothAnimInstance_AddClothExternalAcc");
static_assert(offsetof(X6ClothAnimInstance_AddClothExternalAcc, InClothExternalAcc) == 0x000000, "Member 'X6ClothAnimInstance_AddClothExternalAcc::InClothExternalAcc' has a wrong offset!");
static_assert(offsetof(X6ClothAnimInstance_AddClothExternalAcc, InClothExternalAccDuration) == 0x000018, "Member 'X6ClothAnimInstance_AddClothExternalAcc::InClothExternalAccDuration' has a wrong offset!");

// Function X6Animation.X6ClothAnimInstance.ConsumeClothExternalAcc
// 0x0020 (0x0020 - 0x0000)
struct X6ClothAnimInstance_ConsumeClothExternalAcc final
{
public:
	struct FClothExternalData                     OutClothExternalData;                              // 0x0000(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6ClothAnimInstance_ConsumeClothExternalAcc) == 0x000008, "Wrong alignment on X6ClothAnimInstance_ConsumeClothExternalAcc");
static_assert(sizeof(X6ClothAnimInstance_ConsumeClothExternalAcc) == 0x000020, "Wrong size on X6ClothAnimInstance_ConsumeClothExternalAcc");
static_assert(offsetof(X6ClothAnimInstance_ConsumeClothExternalAcc, OutClothExternalData) == 0x000000, "Member 'X6ClothAnimInstance_ConsumeClothExternalAcc::OutClothExternalData' has a wrong offset!");

// Function X6Animation.X6PlayMontageCallbackProxy.CreateProxyObjectForPlayMontage
// 0x0038 (0x0038 - 0x0000)
struct X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingSection;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirror;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimRootMotionTranslationScale;                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicate;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayWithShadow;                                   // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6PlayMontageCallbackProxy*            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage) == 0x000008, "Wrong alignment on X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage");
static_assert(sizeof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage) == 0x000038, "Wrong size on X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, InSkeletalMeshComponent) == 0x000000, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::InSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, MontageToPlay) == 0x000008, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::MontageToPlay' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, PlayRate) == 0x000010, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, StartingPosition) == 0x000014, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::StartingPosition' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, StartingSection) == 0x000018, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::StartingSection' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, bMirror) == 0x000020, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::bMirror' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, AnimRootMotionTranslationScale) == 0x000024, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::AnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, bReplicate) == 0x000028, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::bReplicate' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, bPlayWithShadow) == 0x000029, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::bPlayWithShadow' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage, ReturnValue) == 0x000030, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontage::ReturnValue' has a wrong offset!");

// Function X6Animation.X6PlayMontageCallbackProxy.CreateProxyObjectForPlayMontageWithParam
// 0x0038 (0x0038 - 0x0000)
struct X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicate;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayWithShadow;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6PlayMontageParams                   MontageParams;                                     // 0x0014(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6PlayMontageCallbackProxy*            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam) == 0x000008, "Wrong alignment on X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam");
static_assert(sizeof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam) == 0x000038, "Wrong size on X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam, InSkeletalMeshComponent) == 0x000000, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam::InSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam, MontageToPlay) == 0x000008, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam::MontageToPlay' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam, bReplicate) == 0x000010, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam::bReplicate' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam, bPlayWithShadow) == 0x000011, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam::bPlayWithShadow' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam, MontageParams) == 0x000014, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam::MontageParams' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam, ReturnValue) == 0x000030, "Member 'X6PlayMontageCallbackProxy_CreateProxyObjectForPlayMontageWithParam::ReturnValue' has a wrong offset!");

// Function X6Animation.X6PlayMontageCallbackProxy.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct X6PlayMontageCallbackProxy_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayMontageCallbackProxy_OnMontageBlendingOut) == 0x000008, "Wrong alignment on X6PlayMontageCallbackProxy_OnMontageBlendingOut");
static_assert(sizeof(X6PlayMontageCallbackProxy_OnMontageBlendingOut) == 0x000010, "Wrong size on X6PlayMontageCallbackProxy_OnMontageBlendingOut");
static_assert(offsetof(X6PlayMontageCallbackProxy_OnMontageBlendingOut, Montage) == 0x000000, "Member 'X6PlayMontageCallbackProxy_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'X6PlayMontageCallbackProxy_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function X6Animation.X6PlayMontageCallbackProxy.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct X6PlayMontageCallbackProxy_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayMontageCallbackProxy_OnMontageEnded) == 0x000008, "Wrong alignment on X6PlayMontageCallbackProxy_OnMontageEnded");
static_assert(sizeof(X6PlayMontageCallbackProxy_OnMontageEnded) == 0x000010, "Wrong size on X6PlayMontageCallbackProxy_OnMontageEnded");
static_assert(offsetof(X6PlayMontageCallbackProxy_OnMontageEnded, Montage) == 0x000000, "Member 'X6PlayMontageCallbackProxy_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_OnMontageEnded, bInterrupted) == 0x000008, "Member 'X6PlayMontageCallbackProxy_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function X6Animation.X6PlayMontageCallbackProxy.OnNotifyBeginReceived
// 0x0028 (0x0028 - 0x0000)
struct X6PlayMontageCallbackProxy_OnNotifyBeginReceived final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointNotifyPayload;                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayMontageCallbackProxy_OnNotifyBeginReceived) == 0x000008, "Wrong alignment on X6PlayMontageCallbackProxy_OnNotifyBeginReceived");
static_assert(sizeof(X6PlayMontageCallbackProxy_OnNotifyBeginReceived) == 0x000028, "Wrong size on X6PlayMontageCallbackProxy_OnNotifyBeginReceived");
static_assert(offsetof(X6PlayMontageCallbackProxy_OnNotifyBeginReceived, NotifyName) == 0x000000, "Member 'X6PlayMontageCallbackProxy_OnNotifyBeginReceived::NotifyName' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_OnNotifyBeginReceived, BranchingPointNotifyPayload) == 0x000008, "Member 'X6PlayMontageCallbackProxy_OnNotifyBeginReceived::BranchingPointNotifyPayload' has a wrong offset!");

// Function X6Animation.X6PlayMontageCallbackProxy.OnNotifyEndReceived
// 0x0028 (0x0028 - 0x0000)
struct X6PlayMontageCallbackProxy_OnNotifyEndReceived final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointNotifyPayload;                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayMontageCallbackProxy_OnNotifyEndReceived) == 0x000008, "Wrong alignment on X6PlayMontageCallbackProxy_OnNotifyEndReceived");
static_assert(sizeof(X6PlayMontageCallbackProxy_OnNotifyEndReceived) == 0x000028, "Wrong size on X6PlayMontageCallbackProxy_OnNotifyEndReceived");
static_assert(offsetof(X6PlayMontageCallbackProxy_OnNotifyEndReceived, NotifyName) == 0x000000, "Member 'X6PlayMontageCallbackProxy_OnNotifyEndReceived::NotifyName' has a wrong offset!");
static_assert(offsetof(X6PlayMontageCallbackProxy_OnNotifyEndReceived, BranchingPointNotifyPayload) == 0x000008, "Member 'X6PlayMontageCallbackProxy_OnNotifyEndReceived::BranchingPointNotifyPayload' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.ClearCachedBlendWeight
// 0x0010 (0x0010 - 0x0000)
struct X6SequencePlayerLibrary_ClearCachedBlendWeight final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_ClearCachedBlendWeight) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_ClearCachedBlendWeight");
static_assert(sizeof(X6SequencePlayerLibrary_ClearCachedBlendWeight) == 0x000010, "Wrong size on X6SequencePlayerLibrary_ClearCachedBlendWeight");
static_assert(offsetof(X6SequencePlayerLibrary_ClearCachedBlendWeight, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_ClearCachedBlendWeight::SequencePlayer' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.ComputePlayRateFromDuration
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_ComputePlayRateFromDuration final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_ComputePlayRateFromDuration) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_ComputePlayRateFromDuration");
static_assert(sizeof(X6SequencePlayerLibrary_ComputePlayRateFromDuration) == 0x000018, "Wrong size on X6SequencePlayerLibrary_ComputePlayRateFromDuration");
static_assert(offsetof(X6SequencePlayerLibrary_ComputePlayRateFromDuration, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_ComputePlayRateFromDuration::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_ComputePlayRateFromDuration, Duration) == 0x000010, "Member 'X6SequencePlayerLibrary_ComputePlayRateFromDuration::Duration' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_ComputePlayRateFromDuration, ReturnValue) == 0x000014, "Member 'X6SequencePlayerLibrary_ComputePlayRateFromDuration::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.ConvertToSequencePlayerPure
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_ConvertToSequencePlayerPure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_ConvertToSequencePlayerPure) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_ConvertToSequencePlayerPure");
static_assert(sizeof(X6SequencePlayerLibrary_ConvertToSequencePlayerPure) == 0x000028, "Wrong size on X6SequencePlayerLibrary_ConvertToSequencePlayerPure");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToSequencePlayerPure, Node) == 0x000000, "Member 'X6SequencePlayerLibrary_ConvertToSequencePlayerPure::Node' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToSequencePlayerPure, SequencePlayer) == 0x000010, "Member 'X6SequencePlayerLibrary_ConvertToSequencePlayerPure::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToSequencePlayerPure, Result) == 0x000020, "Member 'X6SequencePlayerLibrary_ConvertToSequencePlayerPure::Result' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.ConvertToX6OverlayBlend
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_ConvertToX6OverlayBlend final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6OverlayBlendReference               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_ConvertToX6OverlayBlend) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_ConvertToX6OverlayBlend");
static_assert(sizeof(X6SequencePlayerLibrary_ConvertToX6OverlayBlend) == 0x000028, "Wrong size on X6SequencePlayerLibrary_ConvertToX6OverlayBlend");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToX6OverlayBlend, Node) == 0x000000, "Member 'X6SequencePlayerLibrary_ConvertToX6OverlayBlend::Node' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToX6OverlayBlend, Result) == 0x000010, "Member 'X6SequencePlayerLibrary_ConvertToX6OverlayBlend::Result' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToX6OverlayBlend, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_ConvertToX6OverlayBlend::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.ConvertToX6SequencePlayer
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_ConvertToX6SequencePlayer final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6SequencePlayerReference             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_ConvertToX6SequencePlayer) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_ConvertToX6SequencePlayer");
static_assert(sizeof(X6SequencePlayerLibrary_ConvertToX6SequencePlayer) == 0x000028, "Wrong size on X6SequencePlayerLibrary_ConvertToX6SequencePlayer");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToX6SequencePlayer, Node) == 0x000000, "Member 'X6SequencePlayerLibrary_ConvertToX6SequencePlayer::Node' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToX6SequencePlayer, Result) == 0x000010, "Member 'X6SequencePlayerLibrary_ConvertToX6SequencePlayer::Result' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToX6SequencePlayer, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_ConvertToX6SequencePlayer::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.ConvertToX6StylizedOverlayBlend
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_ConvertToX6StylizedOverlayBlend final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6StylizedOverlayBlendReference       ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_ConvertToX6StylizedOverlayBlend) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_ConvertToX6StylizedOverlayBlend");
static_assert(sizeof(X6SequencePlayerLibrary_ConvertToX6StylizedOverlayBlend) == 0x000028, "Wrong size on X6SequencePlayerLibrary_ConvertToX6StylizedOverlayBlend");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToX6StylizedOverlayBlend, Node) == 0x000000, "Member 'X6SequencePlayerLibrary_ConvertToX6StylizedOverlayBlend::Node' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToX6StylizedOverlayBlend, Result) == 0x000010, "Member 'X6SequencePlayerLibrary_ConvertToX6StylizedOverlayBlend::Result' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_ConvertToX6StylizedOverlayBlend, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_ConvertToX6StylizedOverlayBlend::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.DeactivateBlendThisFrame
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_DeactivateBlendThisFrame final
{
public:
	struct FX6OverlayBlendReference               OverlayBlend;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6OverlayBlendReference               ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_DeactivateBlendThisFrame) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_DeactivateBlendThisFrame");
static_assert(sizeof(X6SequencePlayerLibrary_DeactivateBlendThisFrame) == 0x000028, "Wrong size on X6SequencePlayerLibrary_DeactivateBlendThisFrame");
static_assert(offsetof(X6SequencePlayerLibrary_DeactivateBlendThisFrame, OverlayBlend) == 0x000000, "Member 'X6SequencePlayerLibrary_DeactivateBlendThisFrame::OverlayBlend' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_DeactivateBlendThisFrame, Time) == 0x000010, "Member 'X6SequencePlayerLibrary_DeactivateBlendThisFrame::Time' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_DeactivateBlendThisFrame, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_DeactivateBlendThisFrame::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.DeactivateStylizedBlendThisFrame
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_DeactivateStylizedBlendThisFrame final
{
public:
	struct FX6StylizedOverlayBlendReference       OverlayBlend;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6StylizedOverlayBlendReference       ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_DeactivateStylizedBlendThisFrame) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_DeactivateStylizedBlendThisFrame");
static_assert(sizeof(X6SequencePlayerLibrary_DeactivateStylizedBlendThisFrame) == 0x000028, "Wrong size on X6SequencePlayerLibrary_DeactivateStylizedBlendThisFrame");
static_assert(offsetof(X6SequencePlayerLibrary_DeactivateStylizedBlendThisFrame, OverlayBlend) == 0x000000, "Member 'X6SequencePlayerLibrary_DeactivateStylizedBlendThisFrame::OverlayBlend' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_DeactivateStylizedBlendThisFrame, Time) == 0x000010, "Member 'X6SequencePlayerLibrary_DeactivateStylizedBlendThisFrame::Time' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_DeactivateStylizedBlendThisFrame, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_DeactivateStylizedBlendThisFrame::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.GetAccumulatedTime
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_GetAccumulatedTime final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_GetAccumulatedTime) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_GetAccumulatedTime");
static_assert(sizeof(X6SequencePlayerLibrary_GetAccumulatedTime) == 0x000018, "Wrong size on X6SequencePlayerLibrary_GetAccumulatedTime");
static_assert(offsetof(X6SequencePlayerLibrary_GetAccumulatedTime, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_GetAccumulatedTime::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetAccumulatedTime, ReturnValue) == 0x000010, "Member 'X6SequencePlayerLibrary_GetAccumulatedTime::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.GetAnimTimeRemaining
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_GetAnimTimeRemaining final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_GetAnimTimeRemaining) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_GetAnimTimeRemaining");
static_assert(sizeof(X6SequencePlayerLibrary_GetAnimTimeRemaining) == 0x000018, "Wrong size on X6SequencePlayerLibrary_GetAnimTimeRemaining");
static_assert(offsetof(X6SequencePlayerLibrary_GetAnimTimeRemaining, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_GetAnimTimeRemaining::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetAnimTimeRemaining, ReturnValue) == 0x000010, "Member 'X6SequencePlayerLibrary_GetAnimTimeRemaining::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.GetAnimTimeRemainingFraction
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_GetAnimTimeRemainingFraction final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_GetAnimTimeRemainingFraction) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_GetAnimTimeRemainingFraction");
static_assert(sizeof(X6SequencePlayerLibrary_GetAnimTimeRemainingFraction) == 0x000018, "Wrong size on X6SequencePlayerLibrary_GetAnimTimeRemainingFraction");
static_assert(offsetof(X6SequencePlayerLibrary_GetAnimTimeRemainingFraction, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_GetAnimTimeRemainingFraction::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetAnimTimeRemainingFraction, ReturnValue) == 0x000010, "Member 'X6SequencePlayerLibrary_GetAnimTimeRemainingFraction::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.GetCachedBlendWeight
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_GetCachedBlendWeight final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_GetCachedBlendWeight) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_GetCachedBlendWeight");
static_assert(sizeof(X6SequencePlayerLibrary_GetCachedBlendWeight) == 0x000018, "Wrong size on X6SequencePlayerLibrary_GetCachedBlendWeight");
static_assert(offsetof(X6SequencePlayerLibrary_GetCachedBlendWeight, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_GetCachedBlendWeight::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetCachedBlendWeight, ReturnValue) == 0x000010, "Member 'X6SequencePlayerLibrary_GetCachedBlendWeight::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.GetIsMirroredByPoseMatch
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_GetIsMirroredByPoseMatch final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_GetIsMirroredByPoseMatch) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_GetIsMirroredByPoseMatch");
static_assert(sizeof(X6SequencePlayerLibrary_GetIsMirroredByPoseMatch) == 0x000018, "Wrong size on X6SequencePlayerLibrary_GetIsMirroredByPoseMatch");
static_assert(offsetof(X6SequencePlayerLibrary_GetIsMirroredByPoseMatch, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_GetIsMirroredByPoseMatch::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetIsMirroredByPoseMatch, ReturnValue) == 0x000010, "Member 'X6SequencePlayerLibrary_GetIsMirroredByPoseMatch::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.GetLoopAnimation
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_GetLoopAnimation final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_GetLoopAnimation) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_GetLoopAnimation");
static_assert(sizeof(X6SequencePlayerLibrary_GetLoopAnimation) == 0x000018, "Wrong size on X6SequencePlayerLibrary_GetLoopAnimation");
static_assert(offsetof(X6SequencePlayerLibrary_GetLoopAnimation, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_GetLoopAnimation::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetLoopAnimation, ReturnValue) == 0x000010, "Member 'X6SequencePlayerLibrary_GetLoopAnimation::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.GetPlayRate
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_GetPlayRate final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_GetPlayRate) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_GetPlayRate");
static_assert(sizeof(X6SequencePlayerLibrary_GetPlayRate) == 0x000018, "Wrong size on X6SequencePlayerLibrary_GetPlayRate");
static_assert(offsetof(X6SequencePlayerLibrary_GetPlayRate, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_GetPlayRate::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetPlayRate, ReturnValue) == 0x000010, "Member 'X6SequencePlayerLibrary_GetPlayRate::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.GetSequence
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_GetSequence final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      SequenceBase;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FX6SequencePlayerReference             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_GetSequence) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_GetSequence");
static_assert(sizeof(X6SequencePlayerLibrary_GetSequence) == 0x000028, "Wrong size on X6SequencePlayerLibrary_GetSequence");
static_assert(offsetof(X6SequencePlayerLibrary_GetSequence, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_GetSequence::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetSequence, SequenceBase) == 0x000010, "Member 'X6SequencePlayerLibrary_GetSequence::SequenceBase' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetSequence, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_GetSequence::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.GetSequencePure
// 0x0020 (0x0020 - 0x0000)
struct X6SequencePlayerLibrary_GetSequencePure final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_GetSequencePure) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_GetSequencePure");
static_assert(sizeof(X6SequencePlayerLibrary_GetSequencePure) == 0x000020, "Wrong size on X6SequencePlayerLibrary_GetSequencePure");
static_assert(offsetof(X6SequencePlayerLibrary_GetSequencePure, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_GetSequencePure::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetSequencePure, Result) == 0x000010, "Member 'X6SequencePlayerLibrary_GetSequencePure::Result' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetSequencePure, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_GetSequencePure::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.GetStartPosition
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_GetStartPosition final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_GetStartPosition) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_GetStartPosition");
static_assert(sizeof(X6SequencePlayerLibrary_GetStartPosition) == 0x000018, "Wrong size on X6SequencePlayerLibrary_GetStartPosition");
static_assert(offsetof(X6SequencePlayerLibrary_GetStartPosition, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_GetStartPosition::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_GetStartPosition, ReturnValue) == 0x000010, "Member 'X6SequencePlayerLibrary_GetStartPosition::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.IsEnableRootMotion
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_IsEnableRootMotion final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_IsEnableRootMotion) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_IsEnableRootMotion");
static_assert(sizeof(X6SequencePlayerLibrary_IsEnableRootMotion) == 0x000018, "Wrong size on X6SequencePlayerLibrary_IsEnableRootMotion");
static_assert(offsetof(X6SequencePlayerLibrary_IsEnableRootMotion, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_IsEnableRootMotion::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_IsEnableRootMotion, ReturnValue) == 0x000010, "Member 'X6SequencePlayerLibrary_IsEnableRootMotion::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.SetAccumulatedTime
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_SetAccumulatedTime final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6SequencePlayerReference             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_SetAccumulatedTime) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_SetAccumulatedTime");
static_assert(sizeof(X6SequencePlayerLibrary_SetAccumulatedTime) == 0x000028, "Wrong size on X6SequencePlayerLibrary_SetAccumulatedTime");
static_assert(offsetof(X6SequencePlayerLibrary_SetAccumulatedTime, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_SetAccumulatedTime::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetAccumulatedTime, Time) == 0x000010, "Member 'X6SequencePlayerLibrary_SetAccumulatedTime::Time' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetAccumulatedTime, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_SetAccumulatedTime::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.SetDistanceToMatch
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_SetDistanceToMatch final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DistanceToMatch;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6SequencePlayerReference             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_SetDistanceToMatch) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_SetDistanceToMatch");
static_assert(sizeof(X6SequencePlayerLibrary_SetDistanceToMatch) == 0x000028, "Wrong size on X6SequencePlayerLibrary_SetDistanceToMatch");
static_assert(offsetof(X6SequencePlayerLibrary_SetDistanceToMatch, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_SetDistanceToMatch::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetDistanceToMatch, DistanceToMatch) == 0x000010, "Member 'X6SequencePlayerLibrary_SetDistanceToMatch::DistanceToMatch' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetDistanceToMatch, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_SetDistanceToMatch::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.SetEnableRootMotion
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_SetEnableRootMotion final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableRootMotion;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_SetEnableRootMotion) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_SetEnableRootMotion");
static_assert(sizeof(X6SequencePlayerLibrary_SetEnableRootMotion) == 0x000018, "Wrong size on X6SequencePlayerLibrary_SetEnableRootMotion");
static_assert(offsetof(X6SequencePlayerLibrary_SetEnableRootMotion, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_SetEnableRootMotion::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetEnableRootMotion, bEnableRootMotion) == 0x000010, "Member 'X6SequencePlayerLibrary_SetEnableRootMotion::bEnableRootMotion' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.SetMirror
// 0x0018 (0x0018 - 0x0000)
struct X6SequencePlayerLibrary_SetMirror final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMirror;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6SequencePlayerLibrary_SetMirror) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_SetMirror");
static_assert(sizeof(X6SequencePlayerLibrary_SetMirror) == 0x000018, "Wrong size on X6SequencePlayerLibrary_SetMirror");
static_assert(offsetof(X6SequencePlayerLibrary_SetMirror, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_SetMirror::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetMirror, bMirror) == 0x000010, "Member 'X6SequencePlayerLibrary_SetMirror::bMirror' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.SetPlayRate
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_SetPlayRate final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6SequencePlayerReference             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_SetPlayRate) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_SetPlayRate");
static_assert(sizeof(X6SequencePlayerLibrary_SetPlayRate) == 0x000028, "Wrong size on X6SequencePlayerLibrary_SetPlayRate");
static_assert(offsetof(X6SequencePlayerLibrary_SetPlayRate, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_SetPlayRate::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetPlayRate, PlayRate) == 0x000010, "Member 'X6SequencePlayerLibrary_SetPlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetPlayRate, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_SetPlayRate::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.SetSequence
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_SetSequence final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Sequence;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FX6SequencePlayerReference             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_SetSequence) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_SetSequence");
static_assert(sizeof(X6SequencePlayerLibrary_SetSequence) == 0x000028, "Wrong size on X6SequencePlayerLibrary_SetSequence");
static_assert(offsetof(X6SequencePlayerLibrary_SetSequence, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_SetSequence::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetSequence, Sequence) == 0x000010, "Member 'X6SequencePlayerLibrary_SetSequence::Sequence' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetSequence, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_SetSequence::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.SetSequenceWithInertialBlending
// 0x0040 (0x0040 - 0x0000)
struct X6SequencePlayerLibrary_SetSequenceWithInertialBlending final
{
public:
	struct FAnimUpdateContext                     UpdateContext;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Sequence;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6SequencePlayerReference             ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_SetSequenceWithInertialBlending) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_SetSequenceWithInertialBlending");
static_assert(sizeof(X6SequencePlayerLibrary_SetSequenceWithInertialBlending) == 0x000040, "Wrong size on X6SequencePlayerLibrary_SetSequenceWithInertialBlending");
static_assert(offsetof(X6SequencePlayerLibrary_SetSequenceWithInertialBlending, UpdateContext) == 0x000000, "Member 'X6SequencePlayerLibrary_SetSequenceWithInertialBlending::UpdateContext' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetSequenceWithInertialBlending, SequencePlayer) == 0x000010, "Member 'X6SequencePlayerLibrary_SetSequenceWithInertialBlending::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetSequenceWithInertialBlending, Sequence) == 0x000020, "Member 'X6SequencePlayerLibrary_SetSequenceWithInertialBlending::Sequence' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetSequenceWithInertialBlending, BlendTime) == 0x000028, "Member 'X6SequencePlayerLibrary_SetSequenceWithInertialBlending::BlendTime' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetSequenceWithInertialBlending, ReturnValue) == 0x000030, "Member 'X6SequencePlayerLibrary_SetSequenceWithInertialBlending::ReturnValue' has a wrong offset!");

// Function X6Animation.X6SequencePlayerLibrary.SetStartPosition
// 0x0028 (0x0028 - 0x0000)
struct X6SequencePlayerLibrary_SetStartPosition final
{
public:
	struct FX6SequencePlayerReference             SequencePlayer;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6SequencePlayerReference             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SequencePlayerLibrary_SetStartPosition) == 0x000008, "Wrong alignment on X6SequencePlayerLibrary_SetStartPosition");
static_assert(sizeof(X6SequencePlayerLibrary_SetStartPosition) == 0x000028, "Wrong size on X6SequencePlayerLibrary_SetStartPosition");
static_assert(offsetof(X6SequencePlayerLibrary_SetStartPosition, SequencePlayer) == 0x000000, "Member 'X6SequencePlayerLibrary_SetStartPosition::SequencePlayer' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetStartPosition, StartPosition) == 0x000010, "Member 'X6SequencePlayerLibrary_SetStartPosition::StartPosition' has a wrong offset!");
static_assert(offsetof(X6SequencePlayerLibrary_SetStartPosition, ReturnValue) == 0x000018, "Member 'X6SequencePlayerLibrary_SetStartPosition::ReturnValue' has a wrong offset!");

}

