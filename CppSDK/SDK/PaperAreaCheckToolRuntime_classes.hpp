#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperAreaCheckToolRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "PCGAreaCheck_classes.hpp"
#include "Engine_classes.hpp"
#include "PaperAreaCheckToolRuntime_structs.hpp"


namespace SDK
{

// Class PaperAreaCheckToolRuntime.AreaCheckData
// 0x0028 (0x0050 - 0x0028)
class UAreaCheckData final : public UObject
{
public:
	uint8                                         Pad_28[0x28];                                      // 0x0028(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AreaCheckData">();
	}
	static class UAreaCheckData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAreaCheckData>();
	}
};
static_assert(alignof(UAreaCheckData) == 0x000008, "Wrong alignment on UAreaCheckData");
static_assert(sizeof(UAreaCheckData) == 0x000050, "Wrong size on UAreaCheckData");

// Class PaperAreaCheckToolRuntime.SoundAreaCheckData
// 0x0038 (0x0060 - 0x0028)
class USoundAreaCheckData final : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundAreaCheckData">();
	}
	static class USoundAreaCheckData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundAreaCheckData>();
	}
};
static_assert(alignof(USoundAreaCheckData) == 0x000008, "Wrong alignment on USoundAreaCheckData");
static_assert(sizeof(USoundAreaCheckData) == 0x000060, "Wrong size on USoundAreaCheckData");

// Class PaperAreaCheckToolRuntime.CollectionData
// 0x0038 (0x0060 - 0x0028)
class UCollectionData final : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CollectionData">();
	}
	static class UCollectionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCollectionData>();
	}
};
static_assert(alignof(UCollectionData) == 0x000008, "Wrong alignment on UCollectionData");
static_assert(sizeof(UCollectionData) == 0x000060, "Wrong size on UCollectionData");

// Class PaperAreaCheckToolRuntime.SublevelCollectionData
// 0x0038 (0x0060 - 0x0028)
class USublevelCollectionData final : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SublevelCollectionData">();
	}
	static class USublevelCollectionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USublevelCollectionData>();
	}
};
static_assert(alignof(USublevelCollectionData) == 0x000008, "Wrong alignment on USublevelCollectionData");
static_assert(sizeof(USublevelCollectionData) == 0x000060, "Wrong size on USublevelCollectionData");

// Class PaperAreaCheckToolRuntime.AreaCheckSoundBuffActor
// 0x0010 (0x03B8 - 0x03A8)
class AAreaCheckSoundBuffActor final : public APCGAreaBuffActor
{
public:
	uint8                                         Pad_3A8[0x10];                                     // 0x03A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AreaCheckSoundBuffActor">();
	}
	static class AAreaCheckSoundBuffActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAreaCheckSoundBuffActor>();
	}
};
static_assert(alignof(AAreaCheckSoundBuffActor) == 0x000008, "Wrong alignment on AAreaCheckSoundBuffActor");
static_assert(sizeof(AAreaCheckSoundBuffActor) == 0x0003B8, "Wrong size on AAreaCheckSoundBuffActor");

// Class PaperAreaCheckToolRuntime.AreaDebugMaskVolume
// 0x0000 (0x0C50 - 0x0C50)
class AAreaDebugMaskVolume final : public APostProcessVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AreaDebugMaskVolume">();
	}
	static class AAreaDebugMaskVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAreaDebugMaskVolume>();
	}
};
static_assert(alignof(AAreaDebugMaskVolume) == 0x000010, "Wrong alignment on AAreaDebugMaskVolume");
static_assert(sizeof(AAreaDebugMaskVolume) == 0x000C50, "Wrong size on AAreaDebugMaskVolume");

// Class PaperAreaCheckToolRuntime.AreaMaskDebugActor
// 0x00D0 (0x0478 - 0x03A8)
class AAreaMaskDebugActor final : public AActor
{
public:
	class UMaterialInterface*                     AreaDebugMaterial;                                 // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               m_DebugMaterial;                                   // 0x03B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, class UTexture2D*>        m_LayersTextureMap;                                // 0x03B8(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FString, struct FLinearColor>      m_LayerColorMap;                                   // 0x0408(0x0050)(NativeAccessSpecifierPrivate)
	struct FVector2D                              m_LandscapeOrigin;                                 // 0x0458(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              m_LandscapeSize;                                   // 0x0468(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CloseLayerMask();
	void GetAllLayerName(TArray<class FString>* InLayerNames);
	bool LoadAllMaskImage(const class FString& ImagePath);
	void ShowMask(const class FString& InLayerName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AreaMaskDebugActor">();
	}
	static class AAreaMaskDebugActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAreaMaskDebugActor>();
	}
};
static_assert(alignof(AAreaMaskDebugActor) == 0x000008, "Wrong alignment on AAreaMaskDebugActor");
static_assert(sizeof(AAreaMaskDebugActor) == 0x000478, "Wrong size on AAreaMaskDebugActor");
static_assert(offsetof(AAreaMaskDebugActor, AreaDebugMaterial) == 0x0003A8, "Member 'AAreaMaskDebugActor::AreaDebugMaterial' has a wrong offset!");
static_assert(offsetof(AAreaMaskDebugActor, m_DebugMaterial) == 0x0003B0, "Member 'AAreaMaskDebugActor::m_DebugMaterial' has a wrong offset!");
static_assert(offsetof(AAreaMaskDebugActor, m_LayersTextureMap) == 0x0003B8, "Member 'AAreaMaskDebugActor::m_LayersTextureMap' has a wrong offset!");
static_assert(offsetof(AAreaMaskDebugActor, m_LayerColorMap) == 0x000408, "Member 'AAreaMaskDebugActor::m_LayerColorMap' has a wrong offset!");
static_assert(offsetof(AAreaMaskDebugActor, m_LandscapeOrigin) == 0x000458, "Member 'AAreaMaskDebugActor::m_LandscapeOrigin' has a wrong offset!");
static_assert(offsetof(AAreaMaskDebugActor, m_LandscapeSize) == 0x000468, "Member 'AAreaMaskDebugActor::m_LandscapeSize' has a wrong offset!");

// Class PaperAreaCheckToolRuntime.AreaPolygonCheckData
// 0x0010 (0x0038 - 0x0028)
class UAreaPolygonCheckData final : public UObject
{
public:
	TArray<struct FAreaPolygon>                   AreaPolygonList;                                   // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AreaPolygonCheckData">();
	}
	static class UAreaPolygonCheckData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAreaPolygonCheckData>();
	}
};
static_assert(alignof(UAreaPolygonCheckData) == 0x000008, "Wrong alignment on UAreaPolygonCheckData");
static_assert(sizeof(UAreaPolygonCheckData) == 0x000038, "Wrong size on UAreaPolygonCheckData");
static_assert(offsetof(UAreaPolygonCheckData, AreaPolygonList) == 0x000028, "Member 'UAreaPolygonCheckData::AreaPolygonList' has a wrong offset!");

// Class PaperAreaCheckToolRuntime.NetWorkAreaDebugMaskVolume
// 0x0000 (0x0C50 - 0x0C50)
class ANetWorkAreaDebugMaskVolume final : public APostProcessVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetWorkAreaDebugMaskVolume">();
	}
	static class ANetWorkAreaDebugMaskVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANetWorkAreaDebugMaskVolume>();
	}
};
static_assert(alignof(ANetWorkAreaDebugMaskVolume) == 0x000010, "Wrong alignment on ANetWorkAreaDebugMaskVolume");
static_assert(sizeof(ANetWorkAreaDebugMaskVolume) == 0x000C50, "Wrong size on ANetWorkAreaDebugMaskVolume");

// Class PaperAreaCheckToolRuntime.NetWorkAreaDebugActor
// 0x0030 (0x03D8 - 0x03A8)
class ANetWorkAreaDebugActor final : public AActor
{
public:
	class UMaterialInstanceDynamic*               DebugMaterial;                                     // 0x03A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture2D*                             DebugTexture;                                      // 0x03B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              LandscapeOrigin;                                   // 0x03B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              LandscapeSize;                                     // 0x03C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CloseShowMask();
	void LoadMaskAreaConfig(const class FString& ImagePath, const class FString& XMLPath);
	void ShowMask();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetWorkAreaDebugActor">();
	}
	static class ANetWorkAreaDebugActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANetWorkAreaDebugActor>();
	}
};
static_assert(alignof(ANetWorkAreaDebugActor) == 0x000008, "Wrong alignment on ANetWorkAreaDebugActor");
static_assert(sizeof(ANetWorkAreaDebugActor) == 0x0003D8, "Wrong size on ANetWorkAreaDebugActor");
static_assert(offsetof(ANetWorkAreaDebugActor, DebugMaterial) == 0x0003A8, "Member 'ANetWorkAreaDebugActor::DebugMaterial' has a wrong offset!");
static_assert(offsetof(ANetWorkAreaDebugActor, DebugTexture) == 0x0003B0, "Member 'ANetWorkAreaDebugActor::DebugTexture' has a wrong offset!");
static_assert(offsetof(ANetWorkAreaDebugActor, LandscapeOrigin) == 0x0003B8, "Member 'ANetWorkAreaDebugActor::LandscapeOrigin' has a wrong offset!");
static_assert(offsetof(ANetWorkAreaDebugActor, LandscapeSize) == 0x0003C8, "Member 'ANetWorkAreaDebugActor::LandscapeSize' has a wrong offset!");

// Class PaperAreaCheckToolRuntime.PaperAreaCheckSetting
// 0x00B8 (0x00E0 - 0x0028)
class UPaperAreaCheckSetting final : public UObject
{
public:
	float                                         AreaTileSize;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundTileSize;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollectionTileSize;                                // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AreaAssetsPath;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundAssetsPath;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollectionAssetsPath;                              // 0x0058(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExportServerDataPath;                              // 0x0068(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class FString>                    CollectionLevels;                                  // 0x0078(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	float                                         AreaCheckPrecision;                                // 0x00C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundAreaCheckPrecision;                           // 0x00CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherAreaCheckPrecision;                         // 0x00D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShrubOverlapCheckZOffset;                          // 0x00D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AreaMarginSize;                                    // 0x00D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperAreaCheckSetting">();
	}
	static class UPaperAreaCheckSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperAreaCheckSetting>();
	}
};
static_assert(alignof(UPaperAreaCheckSetting) == 0x000008, "Wrong alignment on UPaperAreaCheckSetting");
static_assert(sizeof(UPaperAreaCheckSetting) == 0x0000E0, "Wrong size on UPaperAreaCheckSetting");
static_assert(offsetof(UPaperAreaCheckSetting, AreaTileSize) == 0x000028, "Member 'UPaperAreaCheckSetting::AreaTileSize' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, SoundTileSize) == 0x00002C, "Member 'UPaperAreaCheckSetting::SoundTileSize' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, CollectionTileSize) == 0x000030, "Member 'UPaperAreaCheckSetting::CollectionTileSize' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, AreaAssetsPath) == 0x000038, "Member 'UPaperAreaCheckSetting::AreaAssetsPath' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, SoundAssetsPath) == 0x000048, "Member 'UPaperAreaCheckSetting::SoundAssetsPath' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, CollectionAssetsPath) == 0x000058, "Member 'UPaperAreaCheckSetting::CollectionAssetsPath' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, ExportServerDataPath) == 0x000068, "Member 'UPaperAreaCheckSetting::ExportServerDataPath' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, CollectionLevels) == 0x000078, "Member 'UPaperAreaCheckSetting::CollectionLevels' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, AreaCheckPrecision) == 0x0000C8, "Member 'UPaperAreaCheckSetting::AreaCheckPrecision' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, SoundAreaCheckPrecision) == 0x0000CC, "Member 'UPaperAreaCheckSetting::SoundAreaCheckPrecision' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, WeatherAreaCheckPrecision) == 0x0000D0, "Member 'UPaperAreaCheckSetting::WeatherAreaCheckPrecision' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, ShrubOverlapCheckZOffset) == 0x0000D4, "Member 'UPaperAreaCheckSetting::ShrubOverlapCheckZOffset' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSetting, AreaMarginSize) == 0x0000D8, "Member 'UPaperAreaCheckSetting::AreaMarginSize' has a wrong offset!");

// Class PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem
// 0x0210 (0x0250 - 0x0040)
class UPaperAreaCheckSubsystem final : public UTickableWorldSubsystem
{
public:
	TMulticastInlineDelegate<void(int32 SoundAreaID)> OnEnterSoundArea;                              // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SoundEffectAreaID)> OnEnterSoundEffectArea;                  // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SoundAuxAreaID)> OnEnterSoundAuxArea;                        // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ShrubType)> OnEnterShrubArea;                                // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitShrubArea;                                   // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 AreaID)>  OnEnterAreaNotify;                                 // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 GroupID, const TArray<struct FVector>& Points, const TArray<int32>& Types)> OnAddCollectionPointsNotify; // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 GroupID)> OnRemoveCollectionPointsNotify;                    // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnEnterAreaEdgeNotify;                             // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitAreaEdgeNotify;                              // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SpecialAreaType)> OnEnterSpecialAreaDelegate;                // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitSpecialAreaDelegate;                         // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPolygonAreaTree*                       AreaPolygonTree;                                   // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANetWorkAreaDebugActor*                 NetDebugAreaActor;                                 // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FIntPoint, class UAreaCheckData*> AreaCheckDataCache;                                // 0x0110(0x0050)(NativeAccessSpecifierPrivate)
	TMap<struct FIntPoint, class USoundAreaCheckData*> SoundAreaCheckDataCache;                      // 0x0160(0x0050)(NativeAccessSpecifierPrivate)
	TMap<struct FIntPoint, class UCollectionData*> CollectionData;                                   // 0x01B0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x10];                                     // 0x0200(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SublevelOrigin;                                    // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_228[0x28];                                     // 0x0228(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AreaPolygonTreeInit();
	bool CheckNikkiInAreaEdge();
	void ClearCurAreaCheckCache();
	void EnterSubLevel(const int32 LevelID, const struct FVector& PlayerPos);
	void ExitSubLevel();
	int32 GetAreaIDByWorldPosition(const struct FVector& InWorldPosition);
	int32 GetCurrentAreaID();
	int32 GetCurrentSoundAreaID();
	uint8 GetShrubTypeByWorldPosition(const struct FVector& InPosition);
	void RefreshAreaCheckState(const struct FVector& PlayerPos);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperAreaCheckSubsystem">();
	}
	static class UPaperAreaCheckSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperAreaCheckSubsystem>();
	}
};
static_assert(alignof(UPaperAreaCheckSubsystem) == 0x000008, "Wrong alignment on UPaperAreaCheckSubsystem");
static_assert(sizeof(UPaperAreaCheckSubsystem) == 0x000250, "Wrong size on UPaperAreaCheckSubsystem");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnEnterSoundArea) == 0x000040, "Member 'UPaperAreaCheckSubsystem::OnEnterSoundArea' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnEnterSoundEffectArea) == 0x000050, "Member 'UPaperAreaCheckSubsystem::OnEnterSoundEffectArea' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnEnterSoundAuxArea) == 0x000060, "Member 'UPaperAreaCheckSubsystem::OnEnterSoundAuxArea' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnEnterShrubArea) == 0x000070, "Member 'UPaperAreaCheckSubsystem::OnEnterShrubArea' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnExitShrubArea) == 0x000080, "Member 'UPaperAreaCheckSubsystem::OnExitShrubArea' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnEnterAreaNotify) == 0x000090, "Member 'UPaperAreaCheckSubsystem::OnEnterAreaNotify' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnAddCollectionPointsNotify) == 0x0000A0, "Member 'UPaperAreaCheckSubsystem::OnAddCollectionPointsNotify' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnRemoveCollectionPointsNotify) == 0x0000B0, "Member 'UPaperAreaCheckSubsystem::OnRemoveCollectionPointsNotify' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnEnterAreaEdgeNotify) == 0x0000C0, "Member 'UPaperAreaCheckSubsystem::OnEnterAreaEdgeNotify' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnExitAreaEdgeNotify) == 0x0000D0, "Member 'UPaperAreaCheckSubsystem::OnExitAreaEdgeNotify' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnEnterSpecialAreaDelegate) == 0x0000E0, "Member 'UPaperAreaCheckSubsystem::OnEnterSpecialAreaDelegate' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, OnExitSpecialAreaDelegate) == 0x0000F0, "Member 'UPaperAreaCheckSubsystem::OnExitSpecialAreaDelegate' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, AreaPolygonTree) == 0x000100, "Member 'UPaperAreaCheckSubsystem::AreaPolygonTree' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, NetDebugAreaActor) == 0x000108, "Member 'UPaperAreaCheckSubsystem::NetDebugAreaActor' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, AreaCheckDataCache) == 0x000110, "Member 'UPaperAreaCheckSubsystem::AreaCheckDataCache' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, SoundAreaCheckDataCache) == 0x000160, "Member 'UPaperAreaCheckSubsystem::SoundAreaCheckDataCache' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, CollectionData) == 0x0001B0, "Member 'UPaperAreaCheckSubsystem::CollectionData' has a wrong offset!");
static_assert(offsetof(UPaperAreaCheckSubsystem, SublevelOrigin) == 0x000210, "Member 'UPaperAreaCheckSubsystem::SublevelOrigin' has a wrong offset!");

// Class PaperAreaCheckToolRuntime.AreaCheckStreammingTree
// 0x0048 (0x0070 - 0x0028)
class UAreaCheckStreammingTree : public UObject
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AreaCheckStreammingTree">();
	}
	static class UAreaCheckStreammingTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAreaCheckStreammingTree>();
	}
};
static_assert(alignof(UAreaCheckStreammingTree) == 0x000008, "Wrong alignment on UAreaCheckStreammingTree");
static_assert(sizeof(UAreaCheckStreammingTree) == 0x000070, "Wrong size on UAreaCheckStreammingTree");

// Class PaperAreaCheckToolRuntime.PolygonAreaTree
// 0x0010 (0x0080 - 0x0070)
class UPolygonAreaTree final : public UAreaCheckStreammingTree
{
public:
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PolygonAreaTree">();
	}
	static class UPolygonAreaTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPolygonAreaTree>();
	}
};
static_assert(alignof(UPolygonAreaTree) == 0x000008, "Wrong alignment on UPolygonAreaTree");
static_assert(sizeof(UPolygonAreaTree) == 0x000080, "Wrong size on UPolygonAreaTree");

}

