#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperDialogue

#include "Basic.hpp"

#include "CinematicCamera_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "MovieScene_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum PaperDialogue.EPaperDialogueCameraType
// NumValues: 0x0003
enum class EPaperDialogueCameraType : uint8
{
	Preset                                   = 0,
	Fbx                                      = 1,
	EPaperDialogueCameraType_MAX             = 2,
};

// Enum PaperDialogue.EHeadAnim
// NumValues: 0x0005
enum class EHeadAnim : uint8
{
	Express                                  = 1,
	Eye                                      = 2,
	Neck                                     = 4,
	Hair                                     = 8,
	EHeadAnim_MAX                            = 9,
};

// Enum PaperDialogue.EDialogueDynamicActor
// NumValues: 0x000C
enum class EDialogueDynamicActor : uint8
{
	EMainCharacter                           = 0,
	ECharacter0                              = 1,
	ECharacter1                              = 2,
	ECharacter2                              = 3,
	ECharacter3                              = 4,
	ECharacter4                              = 5,
	ECharacter5                              = 6,
	ECharacter6                              = 7,
	ECharacter7                              = 8,
	ECharacter8                              = 9,
	ECharacter9                              = 10,
	EDialogueDynamicActor_MAX                = 11,
};

// Enum PaperDialogue.DynamicBindType
// NumValues: 0x0004
enum class EDynamicBindType : uint32
{
	KeepCurrentTransfrom                     = 0,
	KeepSlotTransfrom                        = 1,
	KeepWorldTransfrom                       = 2,
	DynamicBindType_MAX                      = 3,
};

// Enum PaperDialogue.FDialogueCameraType2
// NumValues: 0x0003
enum class EFDialogueCameraType2 : uint8
{
	Dynamic                                  = 0,
	Fixed                                    = 1,
	FDialogueCameraType2_MAX                 = 2,
};

// Enum PaperDialogue.EPaperDialogueLineType
// NumValues: 0x0003
enum class EPaperDialogueLineType : uint8
{
	LineText                                 = 0,
	LineBreak                                = 1,
	EPaperDialogueLineType_MAX               = 2,
};

// Enum PaperDialogue.ELookAtType
// NumValues: 0x0005
enum class ELookAtType : uint32
{
	TargetForward                            = 0,
	WorldPosition                            = 1,
	ActorPosition                            = 2,
	ActorBone                                = 3,
	ELookAtType_MAX                          = 4,
};

// Enum PaperDialogue.EPaperProjectType
// NumValues: 0x0005
enum class EPaperProjectType : uint8
{
	X6Project                                = 0,
	X7Project                                = 1,
	X12Project                               = 2,
	Invalid                                  = 3,
	EPaperProjectType_MAX                    = 4,
};

// Enum PaperDialogue.EDialogueCharacterSlotType
// NumValues: 0x0003
enum class EDialogueCharacterSlotType : uint8
{
	CharacterSlot                            = 0,
	WalkPoint                                = 1,
	EDialogueCharacterSlotType_MAX           = 2,
};

// Enum PaperDialogue.EDialogueGraphStatus
// NumValues: 0x0005
enum class EDialogueGraphStatus : uint32
{
	Dirty                                    = 0,
	Error                                    = 1,
	Good                                     = 2,
	Warning                                  = 3,
	EDialogueGraphStatus_MAX                 = 4,
};

// Enum PaperDialogue.EDialogueKeyAlignType
// NumValues: 0x0004
enum class EDialogueKeyAlignType : uint8
{
	Begin                                    = 0,
	Mid                                      = 1,
	End                                      = 2,
	EDialogueKeyAlignType_MAX                = 3,
};

// Enum PaperDialogue.EDialogueTransformRangeType
// NumValues: 0x0004
enum class EDialogueTransformRangeType : uint8
{
	ERelayCamera                             = 0,
	AffectCamera                             = 1,
	NotAffectCamera                          = 2,
	EDialogueTransformRangeType_MAX          = 3,
};

// Enum PaperDialogue.EPaperDialogueChoiceConditionPurpose
// NumValues: 0x0003
enum class EPaperDialogueChoiceConditionPurpose : uint8
{
	ShowChoice                               = 0,
	HideChoice                               = 1,
	EPaperDialogueChoiceConditionPurpose_MAX = 2,
};

// Enum PaperDialogue.EPaperDialogueLanguage
// NumValues: 0x0005
enum class EPaperDialogueLanguage : uint8
{
	ZH                                       = 0,
	EN                                       = 1,
	JP                                       = 2,
	KR                                       = 3,
	Max                                      = 4,
};

// Enum PaperDialogue.EPaperDialogueVoiceType
// NumValues: 0x0003
enum class EPaperDialogueVoiceType : uint8
{
	PDVT_3D                                  = 0,
	PDVT_2D                                  = 1,
	PDVT_MAX                                 = 2,
};

// Enum PaperDialogue.EDialogueSetWalkPointExecuteType
// NumValues: 0x0003
enum class EDialogueSetWalkPointExecuteType : uint8
{
	MoveTransform                            = 0,
	KeepTransform                            = 1,
	EDialogueSetWalkPointExecuteType_MAX     = 2,
};

// Enum PaperDialogue.EDialogueSetWalkPointVisibility
// NumValues: 0x0003
enum class EDialogueSetWalkPointVisibility : uint8
{
	UnHandle                                 = 0,
	ForceInvisible                           = 1,
	EDialogueSetWalkPointVisibility_MAX      = 2,
};

// Enum PaperDialogue.EPaperDialogueFadeType
// NumValues: 0x0004
enum class EPaperDialogueFadeType : uint8
{
	Head                                     = 0,
	Tail                                     = 1,
	Both                                     = 2,
	EPaperDialogueFadeType_MAX               = 3,
};

// Enum PaperDialogue.EPaperDialogueWalkType
// NumValues: 0x0003
enum class EPaperDialogueWalkType : uint8
{
	WalkIn                                   = 0,
	WalkOut                                  = 1,
	EPaperDialogueWalkType_MAX               = 2,
};

// Enum PaperDialogue.EPCDLightGenerateRule
// NumValues: 0x0004
enum class EPCDLightGenerateRule : uint8
{
	Always_TurnOn                            = 0,
	By_Lines                                 = 1,
	By_Camera_Beta                           = 2,
	EPCDLightGenerateRule_MAX                = 3,
};

// Enum PaperDialogue.EPaperDialogueGenerationRootMotionDirectin
// NumValues: 0x0003
enum class EPaperDialogueGenerationRootMotionDirectin : uint8
{
	RoleYaw                                  = 0,
	StartPointToEndPoint                     = 1,
	EPaperDialogueGenerationRootMotionDirectin_MAX = 2,
};

// Enum PaperDialogue.EPaperDialogueType
// NumValues: 0x0004
enum class EPaperDialogueType : uint8
{
	PDT_CinematicDialogue                    = 0,
	PDT_OrdinaryDialogue                     = 1,
	PDT_GameplayDialogue                     = 2,
	PDT_MAX                                  = 3,
};

// Enum PaperDialogue.EPCDSequenceExternalActorHandleType
// NumValues: 0x0004
enum class EPCDSequenceExternalActorHandleType : uint8
{
	UnHandled                                = 0,
	RemoveBeforeNextSequence                 = 1,
	RemoveAtEnd                              = 2,
	EPCDSequenceExternalActorHandleType_MAX  = 3,
};

// Enum PaperDialogue.EPaperDialogueUpdateRuntimeTransformMode
// NumValues: 0x0004
enum class EPaperDialogueUpdateRuntimeTransformMode : uint8
{
	ManualSelection                          = 0,
	AutoSelection_ReplaceWithPreviewTransform = 1,
	AutoSelection_MaintainRuntimeTransform   = 2,
	Max                                      = 3,
};

// Enum PaperDialogue.FDialogueUserWidgetState
// NumValues: 0x0009
enum class EFDialogueUserWidgetState : uint8
{
	PDUW_Nothing                             = 0,
	PDUW_ShowLine                            = 1,
	PDUW_ShowMenu                            = 2,
	PDUW_Condition                           = 3,
	PDUW_Persistent                          = 4,
	PDUW_Blueprint                           = 5,
	PDUW_Function                            = 6,
	PDUW_LevelSequence                       = 7,
	PDUW_MAX                                 = 8,
};

// ScriptStruct PaperDialogue.DialogueFbxCameraShot
// 0x0070 (0x0070 - 0x0000)
struct FDialogueFbxCameraShot final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocalLength;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aperture;                                          // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueFbxCameraShot) == 0x000010, "Wrong alignment on FDialogueFbxCameraShot");
static_assert(sizeof(FDialogueFbxCameraShot) == 0x000070, "Wrong size on FDialogueFbxCameraShot");
static_assert(offsetof(FDialogueFbxCameraShot, Transform) == 0x000000, "Member 'FDialogueFbxCameraShot::Transform' has a wrong offset!");
static_assert(offsetof(FDialogueFbxCameraShot, FocalLength) == 0x000060, "Member 'FDialogueFbxCameraShot::FocalLength' has a wrong offset!");
static_assert(offsetof(FDialogueFbxCameraShot, Aperture) == 0x000064, "Member 'FDialogueFbxCameraShot::Aperture' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueTrackItem
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FPaperDialogueTrackItem
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  LinkedGuid;                                        // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitDuration;                                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitTimeOffset;                                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueTrackItem) == 0x000008, "Wrong alignment on FPaperDialogueTrackItem");
static_assert(sizeof(FPaperDialogueTrackItem) == 0x000040, "Wrong size on FPaperDialogueTrackItem");
static_assert(offsetof(FPaperDialogueTrackItem, Guid) == 0x000008, "Member 'FPaperDialogueTrackItem::Guid' has a wrong offset!");
static_assert(offsetof(FPaperDialogueTrackItem, LinkedGuid) == 0x000018, "Member 'FPaperDialogueTrackItem::LinkedGuid' has a wrong offset!");
static_assert(offsetof(FPaperDialogueTrackItem, InitDuration) == 0x000028, "Member 'FPaperDialogueTrackItem::InitDuration' has a wrong offset!");
static_assert(offsetof(FPaperDialogueTrackItem, InitTimeOffset) == 0x00002C, "Member 'FPaperDialogueTrackItem::InitTimeOffset' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueTransform
// 0x00D0 (0x0110 - 0x0040)
struct FPaperDialogueTransform final : public FPaperDialogueTrackItem
{
public:
	bool                                          IsEnable;                                          // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BeginTrans;                                        // 0x0050(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             EndTrans;                                          // 0x00B0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueTransform) == 0x000010, "Wrong alignment on FPaperDialogueTransform");
static_assert(sizeof(FPaperDialogueTransform) == 0x000110, "Wrong size on FPaperDialogueTransform");
static_assert(offsetof(FPaperDialogueTransform, IsEnable) == 0x000040, "Member 'FPaperDialogueTransform::IsEnable' has a wrong offset!");
static_assert(offsetof(FPaperDialogueTransform, BeginTrans) == 0x000050, "Member 'FPaperDialogueTransform::BeginTrans' has a wrong offset!");
static_assert(offsetof(FPaperDialogueTransform, EndTrans) == 0x0000B0, "Member 'FPaperDialogueTransform::EndTrans' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueLine
// 0x0000 (0x0040 - 0x0040)
struct FPaperDialogueLine final : public FPaperDialogueTrackItem
{
};
static_assert(alignof(FPaperDialogueLine) == 0x000008, "Wrong alignment on FPaperDialogueLine");
static_assert(sizeof(FPaperDialogueLine) == 0x000040, "Wrong size on FPaperDialogueLine");

// ScriptStruct PaperDialogue.PaperDialogueLookAtInit
// 0x0040 (0x0080 - 0x0040)
struct FPaperDialogueLookAtInit : public FPaperDialogueTrackItem
{
public:
	bool                                          IsEnable;                                          // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ELookAtType                                   Type;                                              // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorName;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PosOffset;                                         // 0x0058(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Forward;                                           // 0x0070(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueLookAtInit) == 0x000008, "Wrong alignment on FPaperDialogueLookAtInit");
static_assert(sizeof(FPaperDialogueLookAtInit) == 0x000080, "Wrong size on FPaperDialogueLookAtInit");
static_assert(offsetof(FPaperDialogueLookAtInit, IsEnable) == 0x000040, "Member 'FPaperDialogueLookAtInit::IsEnable' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLookAtInit, Type) == 0x000044, "Member 'FPaperDialogueLookAtInit::Type' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLookAtInit, ActorName) == 0x000048, "Member 'FPaperDialogueLookAtInit::ActorName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLookAtInit, BoneName) == 0x000050, "Member 'FPaperDialogueLookAtInit::BoneName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLookAtInit, PosOffset) == 0x000058, "Member 'FPaperDialogueLookAtInit::PosOffset' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLookAtInit, Forward) == 0x000070, "Member 'FPaperDialogueLookAtInit::Forward' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueLookAt
// 0x0008 (0x0088 - 0x0080)
struct FPaperDialogueLookAt final : public FPaperDialogueLookAtInit
{
public:
	float                                         TimeOffset;                                        // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueLookAt) == 0x000008, "Wrong alignment on FPaperDialogueLookAt");
static_assert(sizeof(FPaperDialogueLookAt) == 0x000088, "Wrong size on FPaperDialogueLookAt");
static_assert(offsetof(FPaperDialogueLookAt, TimeOffset) == 0x000080, "Member 'FPaperDialogueLookAt::TimeOffset' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLookAt, Time) == 0x000084, "Member 'FPaperDialogueLookAt::Time' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueAudio
// 0x0068 (0x00A8 - 0x0040)
struct FPaperDialogueAudio final : public FPaperDialogueTrackItem
{
public:
	class FName                                   VoiceoverID;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIs3DAudioType;                                    // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             SoundBase;                                         // 0x0058(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationTime;                                      // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        VoicePath;                                         // 0x0068(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FSoftObjectPath                        RobotVoicePath;                                    // 0x0088(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPaperDialogueAudio) == 0x000008, "Wrong alignment on FPaperDialogueAudio");
static_assert(sizeof(FPaperDialogueAudio) == 0x0000A8, "Wrong size on FPaperDialogueAudio");
static_assert(offsetof(FPaperDialogueAudio, VoiceoverID) == 0x000040, "Member 'FPaperDialogueAudio::VoiceoverID' has a wrong offset!");
static_assert(offsetof(FPaperDialogueAudio, AudioEvent) == 0x000048, "Member 'FPaperDialogueAudio::AudioEvent' has a wrong offset!");
static_assert(offsetof(FPaperDialogueAudio, bIs3DAudioType) == 0x000050, "Member 'FPaperDialogueAudio::bIs3DAudioType' has a wrong offset!");
static_assert(offsetof(FPaperDialogueAudio, SoundBase) == 0x000058, "Member 'FPaperDialogueAudio::SoundBase' has a wrong offset!");
static_assert(offsetof(FPaperDialogueAudio, DurationTime) == 0x000060, "Member 'FPaperDialogueAudio::DurationTime' has a wrong offset!");
static_assert(offsetof(FPaperDialogueAudio, VoicePath) == 0x000068, "Member 'FPaperDialogueAudio::VoicePath' has a wrong offset!");
static_assert(offsetof(FPaperDialogueAudio, RobotVoicePath) == 0x000088, "Member 'FPaperDialogueAudio::RobotVoicePath' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueActorAnimations
// 0x02A0 (0x02A0 - 0x0000)
struct FPaperDialogueActorAnimations final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StringID;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TempNameTitleId;                                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperDialogueTransform                TransfromAnim;                                     // 0x0020(0x0110)(Edit, NativeAccessSpecifierPublic)
	struct FPaperDialogueLine                     Line;                                              // 0x0130(0x0040)(Edit, NativeAccessSpecifierPublic)
	struct FPaperDialogueLookAt                   LookAt;                                            // 0x0170(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FPaperDialogueAudio                    DialogueAudio;                                     // 0x01F8(0x00A8)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueActorAnimations) == 0x000010, "Wrong alignment on FPaperDialogueActorAnimations");
static_assert(sizeof(FPaperDialogueActorAnimations) == 0x0002A0, "Wrong size on FPaperDialogueActorAnimations");
static_assert(offsetof(FPaperDialogueActorAnimations, ActorName) == 0x000000, "Member 'FPaperDialogueActorAnimations::ActorName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorAnimations, StringID) == 0x000008, "Member 'FPaperDialogueActorAnimations::StringID' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorAnimations, TempNameTitleId) == 0x000010, "Member 'FPaperDialogueActorAnimations::TempNameTitleId' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorAnimations, TransfromAnim) == 0x000020, "Member 'FPaperDialogueActorAnimations::TransfromAnim' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorAnimations, Line) == 0x000130, "Member 'FPaperDialogueActorAnimations::Line' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorAnimations, LookAt) == 0x000170, "Member 'FPaperDialogueActorAnimations::LookAt' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorAnimations, DialogueAudio) == 0x0001F8, "Member 'FPaperDialogueActorAnimations::DialogueAudio' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationSetupFadeStruct
// 0x0038 (0x0038 - 0x0000)
struct FPaperDialogueGenerationSetupFadeStruct final
{
public:
	TSoftClassPtr<class UClass>                   OverrideFaceTrackClass;                            // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPaperDialogueFadeType                        FadeType;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceClearFadeSection;                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddBreak;                                         // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBreakAllowSkip;                                   // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBreakAutoPlayNextPart;                            // 0x0033(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeCompletionMode;                             // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneCompletionMode                     CompletionMode;                                    // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueGenerationSetupFadeStruct) == 0x000008, "Wrong alignment on FPaperDialogueGenerationSetupFadeStruct");
static_assert(sizeof(FPaperDialogueGenerationSetupFadeStruct) == 0x000038, "Wrong size on FPaperDialogueGenerationSetupFadeStruct");
static_assert(offsetof(FPaperDialogueGenerationSetupFadeStruct, OverrideFaceTrackClass) == 0x000000, "Member 'FPaperDialogueGenerationSetupFadeStruct::OverrideFaceTrackClass' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupFadeStruct, FadeType) == 0x000028, "Member 'FPaperDialogueGenerationSetupFadeStruct::FadeType' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupFadeStruct, FadeTime) == 0x00002C, "Member 'FPaperDialogueGenerationSetupFadeStruct::FadeTime' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupFadeStruct, bForceClearFadeSection) == 0x000030, "Member 'FPaperDialogueGenerationSetupFadeStruct::bForceClearFadeSection' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupFadeStruct, bAddBreak) == 0x000031, "Member 'FPaperDialogueGenerationSetupFadeStruct::bAddBreak' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupFadeStruct, bBreakAllowSkip) == 0x000032, "Member 'FPaperDialogueGenerationSetupFadeStruct::bBreakAllowSkip' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupFadeStruct, bBreakAutoPlayNextPart) == 0x000033, "Member 'FPaperDialogueGenerationSetupFadeStruct::bBreakAutoPlayNextPart' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupFadeStruct, bChangeCompletionMode) == 0x000034, "Member 'FPaperDialogueGenerationSetupFadeStruct::bChangeCompletionMode' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupFadeStruct, CompletionMode) == 0x000035, "Member 'FPaperDialogueGenerationSetupFadeStruct::CompletionMode' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationCameraShakeTracks
// 0x0030 (0x0030 - 0x0000)
struct FPaperDialogueGenerationCameraShakeTracks final
{
public:
	bool                                          bRecreateCameraShakeTracks;                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CameraShakeBP;                                     // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationCameraShakeTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationCameraShakeTracks");
static_assert(sizeof(FPaperDialogueGenerationCameraShakeTracks) == 0x000030, "Wrong size on FPaperDialogueGenerationCameraShakeTracks");
static_assert(offsetof(FPaperDialogueGenerationCameraShakeTracks, bRecreateCameraShakeTracks) == 0x000000, "Member 'FPaperDialogueGenerationCameraShakeTracks::bRecreateCameraShakeTracks' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationCameraShakeTracks, CameraShakeBP) == 0x000008, "Member 'FPaperDialogueGenerationCameraShakeTracks::CameraShakeBP' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationAnimationTrackConfig
// 0x0014 (0x0014 - 0x0000)
struct FPaperDialogueGenerationAnimationTrackConfig final
{
public:
	class FName                                   OverrideCharacterMeshName;                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrackAndSlotName;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecreateAnimTracks;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueGenerationAnimationTrackConfig) == 0x000004, "Wrong alignment on FPaperDialogueGenerationAnimationTrackConfig");
static_assert(sizeof(FPaperDialogueGenerationAnimationTrackConfig) == 0x000014, "Wrong size on FPaperDialogueGenerationAnimationTrackConfig");
static_assert(offsetof(FPaperDialogueGenerationAnimationTrackConfig, OverrideCharacterMeshName) == 0x000000, "Member 'FPaperDialogueGenerationAnimationTrackConfig::OverrideCharacterMeshName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationAnimationTrackConfig, TrackAndSlotName) == 0x000008, "Member 'FPaperDialogueGenerationAnimationTrackConfig::TrackAndSlotName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationAnimationTrackConfig, bRecreateAnimTracks) == 0x000010, "Member 'FPaperDialogueGenerationAnimationTrackConfig::bRecreateAnimTracks' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationAnimationTracks
// 0x0020 (0x0020 - 0x0000)
struct FPaperDialogueGenerationAnimationTracks final
{
public:
	bool                                          bCreateCharacterMesh;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterMeshName;                                 // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPaperDialogueGenerationAnimationTrackConfig> TrackAndSlotConfigs;                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationAnimationTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationAnimationTracks");
static_assert(sizeof(FPaperDialogueGenerationAnimationTracks) == 0x000020, "Wrong size on FPaperDialogueGenerationAnimationTracks");
static_assert(offsetof(FPaperDialogueGenerationAnimationTracks, bCreateCharacterMesh) == 0x000000, "Member 'FPaperDialogueGenerationAnimationTracks::bCreateCharacterMesh' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationAnimationTracks, CharacterMeshName) == 0x000004, "Member 'FPaperDialogueGenerationAnimationTracks::CharacterMeshName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationAnimationTracks, TrackAndSlotConfigs) == 0x000010, "Member 'FPaperDialogueGenerationAnimationTracks::TrackAndSlotConfigs' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationRootMotionTracks
// 0x0008 (0x0008 - 0x0000)
struct FPaperDialogueGenerationRootMotionTracks final
{
public:
	EMovieSceneBlendType                          RootMotionSectionBlendType;                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPaperDialogueGenerationRootMotionDirectin    RootMotionDirectin;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverse;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseManualDegree;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManualDegree;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationRootMotionTracks) == 0x000004, "Wrong alignment on FPaperDialogueGenerationRootMotionTracks");
static_assert(sizeof(FPaperDialogueGenerationRootMotionTracks) == 0x000008, "Wrong size on FPaperDialogueGenerationRootMotionTracks");
static_assert(offsetof(FPaperDialogueGenerationRootMotionTracks, RootMotionSectionBlendType) == 0x000000, "Member 'FPaperDialogueGenerationRootMotionTracks::RootMotionSectionBlendType' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationRootMotionTracks, RootMotionDirectin) == 0x000001, "Member 'FPaperDialogueGenerationRootMotionTracks::RootMotionDirectin' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationRootMotionTracks, bReverse) == 0x000002, "Member 'FPaperDialogueGenerationRootMotionTracks::bReverse' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationRootMotionTracks, bUseManualDegree) == 0x000003, "Member 'FPaperDialogueGenerationRootMotionTracks::bUseManualDegree' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationRootMotionTracks, ManualDegree) == 0x000004, "Member 'FPaperDialogueGenerationRootMotionTracks::ManualDegree' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationFullBodyStruct
// 0x0024 (0x0024 - 0x0000)
struct FPaperDialogueGenerationFullBodyStruct final
{
public:
	bool                                          bCreateCharacterMesh;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterMeshName;                                 // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultSlotName;                                   // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultSlotEmotionName;                            // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultSlotFacialName;                             // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationFullBodyStruct) == 0x000004, "Wrong alignment on FPaperDialogueGenerationFullBodyStruct");
static_assert(sizeof(FPaperDialogueGenerationFullBodyStruct) == 0x000024, "Wrong size on FPaperDialogueGenerationFullBodyStruct");
static_assert(offsetof(FPaperDialogueGenerationFullBodyStruct, bCreateCharacterMesh) == 0x000000, "Member 'FPaperDialogueGenerationFullBodyStruct::bCreateCharacterMesh' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationFullBodyStruct, CharacterMeshName) == 0x000004, "Member 'FPaperDialogueGenerationFullBodyStruct::CharacterMeshName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationFullBodyStruct, DefaultSlotName) == 0x00000C, "Member 'FPaperDialogueGenerationFullBodyStruct::DefaultSlotName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationFullBodyStruct, DefaultSlotEmotionName) == 0x000014, "Member 'FPaperDialogueGenerationFullBodyStruct::DefaultSlotEmotionName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationFullBodyStruct, DefaultSlotFacialName) == 0x00001C, "Member 'FPaperDialogueGenerationFullBodyStruct::DefaultSlotFacialName' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationCameraFramingLevelStruct
// 0x0018 (0x0018 - 0x0000)
struct FPaperDialogueGenerationCameraFramingLevelStruct final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumUse;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueGenerationCameraFramingLevelStruct) == 0x000008, "Wrong alignment on FPaperDialogueGenerationCameraFramingLevelStruct");
static_assert(sizeof(FPaperDialogueGenerationCameraFramingLevelStruct) == 0x000018, "Wrong size on FPaperDialogueGenerationCameraFramingLevelStruct");
static_assert(offsetof(FPaperDialogueGenerationCameraFramingLevelStruct, Name) == 0x000000, "Member 'FPaperDialogueGenerationCameraFramingLevelStruct::Name' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationCameraFramingLevelStruct, MaximumUse) == 0x000010, "Member 'FPaperDialogueGenerationCameraFramingLevelStruct::MaximumUse' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationSetupCameraStruct
// 0x0020 (0x0020 - 0x0000)
struct FPaperDialogueGenerationSetupCameraStruct final
{
public:
	bool                                          bForceClearCameraTrack;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraRule;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bX6SimplifiedCameraRule;                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCombineNeighborCameras;                           // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPaperDialogueGenerationCameraFramingLevelStruct> CameraFramingLevelMax;           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueGenerationSetupCameraStruct) == 0x000008, "Wrong alignment on FPaperDialogueGenerationSetupCameraStruct");
static_assert(sizeof(FPaperDialogueGenerationSetupCameraStruct) == 0x000020, "Wrong size on FPaperDialogueGenerationSetupCameraStruct");
static_assert(offsetof(FPaperDialogueGenerationSetupCameraStruct, bForceClearCameraTrack) == 0x000000, "Member 'FPaperDialogueGenerationSetupCameraStruct::bForceClearCameraTrack' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupCameraStruct, bUseCameraRule) == 0x000001, "Member 'FPaperDialogueGenerationSetupCameraStruct::bUseCameraRule' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupCameraStruct, bX6SimplifiedCameraRule) == 0x000002, "Member 'FPaperDialogueGenerationSetupCameraStruct::bX6SimplifiedCameraRule' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupCameraStruct, bCombineNeighborCameras) == 0x000003, "Member 'FPaperDialogueGenerationSetupCameraStruct::bCombineNeighborCameras' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetupCameraStruct, CameraFramingLevelMax) == 0x000008, "Member 'FPaperDialogueGenerationSetupCameraStruct::CameraFramingLevelMax' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationIdleAnimationStruct
// 0x0020 (0x0020 - 0x0000)
struct FPaperDialogueGenerationIdleAnimationStruct final
{
public:
	bool                                          bCreateCharacterMesh;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterMeshName;                                 // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefaultIdleAnimationTag;                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationIdleAnimationStruct) == 0x000008, "Wrong alignment on FPaperDialogueGenerationIdleAnimationStruct");
static_assert(sizeof(FPaperDialogueGenerationIdleAnimationStruct) == 0x000020, "Wrong size on FPaperDialogueGenerationIdleAnimationStruct");
static_assert(offsetof(FPaperDialogueGenerationIdleAnimationStruct, bCreateCharacterMesh) == 0x000000, "Member 'FPaperDialogueGenerationIdleAnimationStruct::bCreateCharacterMesh' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationIdleAnimationStruct, CharacterMeshName) == 0x000004, "Member 'FPaperDialogueGenerationIdleAnimationStruct::CharacterMeshName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationIdleAnimationStruct, DefaultIdleAnimationTag) == 0x000010, "Member 'FPaperDialogueGenerationIdleAnimationStruct::DefaultIdleAnimationTag' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationLightTracks
// 0x0014 (0x0014 - 0x0000)
struct FPaperDialogueGenerationLightTracks final
{
public:
	bool                                          bRecreateVisibilityTrack;                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMergeConsequentVisibilityFrame;                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachToTargetActor;                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneCompletionMode                     CompletionMode;                                    // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCDLightGenerateRule                         GenerateRule;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaceInFolder;                                    // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FolderName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FolderColor;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationLightTracks) == 0x000004, "Wrong alignment on FPaperDialogueGenerationLightTracks");
static_assert(sizeof(FPaperDialogueGenerationLightTracks) == 0x000014, "Wrong size on FPaperDialogueGenerationLightTracks");
static_assert(offsetof(FPaperDialogueGenerationLightTracks, bRecreateVisibilityTrack) == 0x000000, "Member 'FPaperDialogueGenerationLightTracks::bRecreateVisibilityTrack' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLightTracks, bMergeConsequentVisibilityFrame) == 0x000001, "Member 'FPaperDialogueGenerationLightTracks::bMergeConsequentVisibilityFrame' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLightTracks, bAttachToTargetActor) == 0x000002, "Member 'FPaperDialogueGenerationLightTracks::bAttachToTargetActor' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLightTracks, CompletionMode) == 0x000003, "Member 'FPaperDialogueGenerationLightTracks::CompletionMode' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLightTracks, GenerateRule) == 0x000004, "Member 'FPaperDialogueGenerationLightTracks::GenerateRule' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLightTracks, bPlaceInFolder) == 0x000005, "Member 'FPaperDialogueGenerationLightTracks::bPlaceInFolder' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLightTracks, FolderName) == 0x000008, "Member 'FPaperDialogueGenerationLightTracks::FolderName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLightTracks, FolderColor) == 0x000010, "Member 'FPaperDialogueGenerationLightTracks::FolderColor' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationCustomTrackConfig
// 0x0090 (0x0090 - 0x0000)
struct FPaperDialogueGenerationCustomTrackConfig final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TrackAndSlotName;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecreateTracks;                                   // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateSectionAtBegining;                          // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CustomTrackClass;                                  // 0x0040(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x28];                                      // 0x0068(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueGenerationCustomTrackConfig) == 0x000008, "Wrong alignment on FPaperDialogueGenerationCustomTrackConfig");
static_assert(sizeof(FPaperDialogueGenerationCustomTrackConfig) == 0x000090, "Wrong size on FPaperDialogueGenerationCustomTrackConfig");
static_assert(offsetof(FPaperDialogueGenerationCustomTrackConfig, TrackAndSlotName) == 0x000030, "Member 'FPaperDialogueGenerationCustomTrackConfig::TrackAndSlotName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationCustomTrackConfig, bRecreateTracks) == 0x000038, "Member 'FPaperDialogueGenerationCustomTrackConfig::bRecreateTracks' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationCustomTrackConfig, bCreateSectionAtBegining) == 0x000039, "Member 'FPaperDialogueGenerationCustomTrackConfig::bCreateSectionAtBegining' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationCustomTrackConfig, CustomTrackClass) == 0x000040, "Member 'FPaperDialogueGenerationCustomTrackConfig::CustomTrackClass' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationCustomTracks
// 0x0010 (0x0010 - 0x0000)
struct FPaperDialogueGenerationCustomTracks final
{
public:
	TArray<struct FPaperDialogueGenerationCustomTrackConfig> TrackAndSlotConfigs;                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationCustomTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationCustomTracks");
static_assert(sizeof(FPaperDialogueGenerationCustomTracks) == 0x000010, "Wrong size on FPaperDialogueGenerationCustomTracks");
static_assert(offsetof(FPaperDialogueGenerationCustomTracks, TrackAndSlotConfigs) == 0x000000, "Member 'FPaperDialogueGenerationCustomTracks::TrackAndSlotConfigs' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationLookAtAutoKeyValue
// 0x0048 (0x0048 - 0x0000)
struct FPaperDialogueGenerationLookAtAutoKeyValue final
{
public:
	bool                                          bAutoKeyFrames;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EnableLookAtPropertyName;                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LookAtTargetPropertyName;                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LookAtTargetSocketPropertyName;                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LookAtTargetSocketName;                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationLookAtAutoKeyValue) == 0x000008, "Wrong alignment on FPaperDialogueGenerationLookAtAutoKeyValue");
static_assert(sizeof(FPaperDialogueGenerationLookAtAutoKeyValue) == 0x000048, "Wrong size on FPaperDialogueGenerationLookAtAutoKeyValue");
static_assert(offsetof(FPaperDialogueGenerationLookAtAutoKeyValue, bAutoKeyFrames) == 0x000000, "Member 'FPaperDialogueGenerationLookAtAutoKeyValue::bAutoKeyFrames' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtAutoKeyValue, EnableLookAtPropertyName) == 0x000008, "Member 'FPaperDialogueGenerationLookAtAutoKeyValue::EnableLookAtPropertyName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtAutoKeyValue, LookAtTargetPropertyName) == 0x000018, "Member 'FPaperDialogueGenerationLookAtAutoKeyValue::LookAtTargetPropertyName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtAutoKeyValue, LookAtTargetSocketPropertyName) == 0x000028, "Member 'FPaperDialogueGenerationLookAtAutoKeyValue::LookAtTargetSocketPropertyName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtAutoKeyValue, LookAtTargetSocketName) == 0x000038, "Member 'FPaperDialogueGenerationLookAtAutoKeyValue::LookAtTargetSocketName' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationLookAtExtraSettings
// 0x0040 (0x0040 - 0x0000)
struct FPaperDialogueGenerationLookAtExtraSettings final
{
public:
	bool                                          bAttachToActor;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExposeAppointProperty;                            // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PropertyToExpose;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationLookAtExtraSettings) == 0x000008, "Wrong alignment on FPaperDialogueGenerationLookAtExtraSettings");
static_assert(sizeof(FPaperDialogueGenerationLookAtExtraSettings) == 0x000040, "Wrong size on FPaperDialogueGenerationLookAtExtraSettings");
static_assert(offsetof(FPaperDialogueGenerationLookAtExtraSettings, bAttachToActor) == 0x000000, "Member 'FPaperDialogueGenerationLookAtExtraSettings::bAttachToActor' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtExtraSettings, BoneName) == 0x000004, "Member 'FPaperDialogueGenerationLookAtExtraSettings::BoneName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtExtraSettings, Direction) == 0x000010, "Member 'FPaperDialogueGenerationLookAtExtraSettings::Direction' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtExtraSettings, Distance) == 0x000028, "Member 'FPaperDialogueGenerationLookAtExtraSettings::Distance' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtExtraSettings, bExposeAppointProperty) == 0x00002C, "Member 'FPaperDialogueGenerationLookAtExtraSettings::bExposeAppointProperty' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtExtraSettings, PropertyToExpose) == 0x000030, "Member 'FPaperDialogueGenerationLookAtExtraSettings::PropertyToExpose' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationLookAtTracks
// 0x00B8 (0x00B8 - 0x0000)
struct FPaperDialogueGenerationLookAtTracks final
{
public:
	struct FSoftClassPath                         LookAtActorClass;                                  // 0x0000(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x1];                                       // 0x0020(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPlaceInFolder;                                    // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FolderName;                                        // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FolderColor;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationLookAtExtraSettings ExtraSettingConfig;                           // 0x0030(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationLookAtAutoKeyValue AutoKeyFrameConfig;                            // 0x0070(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationLookAtTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationLookAtTracks");
static_assert(sizeof(FPaperDialogueGenerationLookAtTracks) == 0x0000B8, "Wrong size on FPaperDialogueGenerationLookAtTracks");
static_assert(offsetof(FPaperDialogueGenerationLookAtTracks, LookAtActorClass) == 0x000000, "Member 'FPaperDialogueGenerationLookAtTracks::LookAtActorClass' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtTracks, bPlaceInFolder) == 0x000021, "Member 'FPaperDialogueGenerationLookAtTracks::bPlaceInFolder' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtTracks, FolderName) == 0x000024, "Member 'FPaperDialogueGenerationLookAtTracks::FolderName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtTracks, FolderColor) == 0x00002C, "Member 'FPaperDialogueGenerationLookAtTracks::FolderColor' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtTracks, ExtraSettingConfig) == 0x000030, "Member 'FPaperDialogueGenerationLookAtTracks::ExtraSettingConfig' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationLookAtTracks, AutoKeyFrameConfig) == 0x000070, "Member 'FPaperDialogueGenerationLookAtTracks::AutoKeyFrameConfig' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationCharacterNameableTracks
// 0x0050 (0x0050 - 0x0000)
struct FPaperDialogueGenerationCharacterNameableTracks final
{
public:
	TMap<class FString, TSoftClassPtr<class UClass>> CharacterNameableTracks;                        // 0x0000(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationCharacterNameableTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationCharacterNameableTracks");
static_assert(sizeof(FPaperDialogueGenerationCharacterNameableTracks) == 0x000050, "Wrong size on FPaperDialogueGenerationCharacterNameableTracks");
static_assert(offsetof(FPaperDialogueGenerationCharacterNameableTracks, CharacterNameableTracks) == 0x000000, "Member 'FPaperDialogueGenerationCharacterNameableTracks::CharacterNameableTracks' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationTransformTracks
// 0x0020 (0x0020 - 0x0000)
struct FPaperDialogueGenerationTransformTracks final
{
public:
	bool                                          bAddTransformTracks;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EMovieSceneBlendType>                  TransformTracksToAdd;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bModifyCompletionMode;                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneCompletionMode                     CompletionMode;                                    // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueGenerationTransformTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationTransformTracks");
static_assert(sizeof(FPaperDialogueGenerationTransformTracks) == 0x000020, "Wrong size on FPaperDialogueGenerationTransformTracks");
static_assert(offsetof(FPaperDialogueGenerationTransformTracks, bAddTransformTracks) == 0x000000, "Member 'FPaperDialogueGenerationTransformTracks::bAddTransformTracks' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationTransformTracks, TransformTracksToAdd) == 0x000008, "Member 'FPaperDialogueGenerationTransformTracks::TransformTracksToAdd' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationTransformTracks, bModifyCompletionMode) == 0x000018, "Member 'FPaperDialogueGenerationTransformTracks::bModifyCompletionMode' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationTransformTracks, CompletionMode) == 0x000019, "Member 'FPaperDialogueGenerationTransformTracks::CompletionMode' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueInsertWalkTrackConfig
// 0x0010 (0x0010 - 0x0000)
struct FPaperDialogueInsertWalkTrackConfig final
{
public:
	float                                         WalkTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnAroundTime;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InsertWalkAtGroupIndex;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPaperDialogueWalkType                        WalkType;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueInsertWalkTrackConfig) == 0x000004, "Wrong alignment on FPaperDialogueInsertWalkTrackConfig");
static_assert(sizeof(FPaperDialogueInsertWalkTrackConfig) == 0x000010, "Wrong size on FPaperDialogueInsertWalkTrackConfig");
static_assert(offsetof(FPaperDialogueInsertWalkTrackConfig, WalkTime) == 0x000000, "Member 'FPaperDialogueInsertWalkTrackConfig::WalkTime' has a wrong offset!");
static_assert(offsetof(FPaperDialogueInsertWalkTrackConfig, TurnAroundTime) == 0x000004, "Member 'FPaperDialogueInsertWalkTrackConfig::TurnAroundTime' has a wrong offset!");
static_assert(offsetof(FPaperDialogueInsertWalkTrackConfig, InsertWalkAtGroupIndex) == 0x000008, "Member 'FPaperDialogueInsertWalkTrackConfig::InsertWalkAtGroupIndex' has a wrong offset!");
static_assert(offsetof(FPaperDialogueInsertWalkTrackConfig, WalkType) == 0x00000C, "Member 'FPaperDialogueInsertWalkTrackConfig::WalkType' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueSetWalkPointInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FDialogueSetWalkPointInfo final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WalkPointIndex;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WalkPointTransform;                                // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateCharacterMesh;                              // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterMeshName;                                 // 0x0074(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultSlotName;                                   // 0x007C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EaseFrames;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        WalkAnimSequence;                                  // 0x0088(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDialogueSetWalkPointExecuteType              ExecuteType;                                       // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDialogueSetWalkPointVisibility               ForceVisibility;                                   // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueSetWalkPointInfo) == 0x000010, "Wrong alignment on FDialogueSetWalkPointInfo");
static_assert(sizeof(FDialogueSetWalkPointInfo) == 0x0000B0, "Wrong size on FDialogueSetWalkPointInfo");
static_assert(offsetof(FDialogueSetWalkPointInfo, bOpen) == 0x000000, "Member 'FDialogueSetWalkPointInfo::bOpen' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointInfo, WalkPointIndex) == 0x000004, "Member 'FDialogueSetWalkPointInfo::WalkPointIndex' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointInfo, WalkPointTransform) == 0x000010, "Member 'FDialogueSetWalkPointInfo::WalkPointTransform' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointInfo, bCreateCharacterMesh) == 0x000070, "Member 'FDialogueSetWalkPointInfo::bCreateCharacterMesh' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointInfo, CharacterMeshName) == 0x000074, "Member 'FDialogueSetWalkPointInfo::CharacterMeshName' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointInfo, DefaultSlotName) == 0x00007C, "Member 'FDialogueSetWalkPointInfo::DefaultSlotName' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointInfo, EaseFrames) == 0x000084, "Member 'FDialogueSetWalkPointInfo::EaseFrames' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointInfo, WalkAnimSequence) == 0x000088, "Member 'FDialogueSetWalkPointInfo::WalkAnimSequence' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointInfo, ExecuteType) == 0x0000A8, "Member 'FDialogueSetWalkPointInfo::ExecuteType' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointInfo, ForceVisibility) == 0x0000A9, "Member 'FDialogueSetWalkPointInfo::ForceVisibility' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueSetWalkPointSettings
// 0x01D0 (0x01D0 - 0x0000)
struct FDialogueSetWalkPointSettings final
{
public:
	class FName                                   SpeakerTag;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterSlotIndex;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CharacterSlotTransform;                            // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueSetWalkPointInfo              WalkInSettings;                                    // 0x0070(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDialogueSetWalkPointInfo              WalkOutSettings;                                   // 0x0120(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueSetWalkPointSettings) == 0x000010, "Wrong alignment on FDialogueSetWalkPointSettings");
static_assert(sizeof(FDialogueSetWalkPointSettings) == 0x0001D0, "Wrong size on FDialogueSetWalkPointSettings");
static_assert(offsetof(FDialogueSetWalkPointSettings, SpeakerTag) == 0x000000, "Member 'FDialogueSetWalkPointSettings::SpeakerTag' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointSettings, CharacterSlotIndex) == 0x000008, "Member 'FDialogueSetWalkPointSettings::CharacterSlotIndex' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointSettings, CharacterSlotTransform) == 0x000010, "Member 'FDialogueSetWalkPointSettings::CharacterSlotTransform' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointSettings, WalkInSettings) == 0x000070, "Member 'FDialogueSetWalkPointSettings::WalkInSettings' has a wrong offset!");
static_assert(offsetof(FDialogueSetWalkPointSettings, WalkOutSettings) == 0x000120, "Member 'FDialogueSetWalkPointSettings::WalkOutSettings' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationWalkInAndOutTracks
// 0x0030 (0x0030 - 0x0000)
struct FPaperDialogueGenerationWalkInAndOutTracks final
{
public:
	float                                         WalkInTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkOutTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnAroundTime;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInsertWalk : 1;                                   // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperDialogueInsertWalkTrackConfig    InsertWalkConfig;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FDialogueSetWalkPointSettings>  WalkPointSettings;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationWalkInAndOutTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationWalkInAndOutTracks");
static_assert(sizeof(FPaperDialogueGenerationWalkInAndOutTracks) == 0x000030, "Wrong size on FPaperDialogueGenerationWalkInAndOutTracks");
static_assert(offsetof(FPaperDialogueGenerationWalkInAndOutTracks, WalkInTime) == 0x000000, "Member 'FPaperDialogueGenerationWalkInAndOutTracks::WalkInTime' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationWalkInAndOutTracks, WalkOutTime) == 0x000004, "Member 'FPaperDialogueGenerationWalkInAndOutTracks::WalkOutTime' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationWalkInAndOutTracks, TurnAroundTime) == 0x000008, "Member 'FPaperDialogueGenerationWalkInAndOutTracks::TurnAroundTime' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationWalkInAndOutTracks, InsertWalkConfig) == 0x000010, "Member 'FPaperDialogueGenerationWalkInAndOutTracks::InsertWalkConfig' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationWalkInAndOutTracks, WalkPointSettings) == 0x000020, "Member 'FPaperDialogueGenerationWalkInAndOutTracks::WalkPointSettings' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationHighHeelTracks
// 0x0068 (0x0068 - 0x0000)
struct FPaperDialogueGenerationHighHeelTracks final
{
public:
	bool                                          bRecreateHighHeelTracks;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   HighHeelActorBP;                                   // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveDefaultTransformTrack;                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaceInFolder;                                    // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FolderName;                                        // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 FolderColor;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachToActor;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TargetActorName;                                   // 0x0044(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetActorComponentName;                          // 0x004C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetActorBoneName;                               // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyExposeToCinematic;                         // 0x005C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoMakeKeyframes;                                // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueGenerationHighHeelTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationHighHeelTracks");
static_assert(sizeof(FPaperDialogueGenerationHighHeelTracks) == 0x000068, "Wrong size on FPaperDialogueGenerationHighHeelTracks");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, bRecreateHighHeelTracks) == 0x000000, "Member 'FPaperDialogueGenerationHighHeelTracks::bRecreateHighHeelTracks' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, HighHeelActorBP) == 0x000008, "Member 'FPaperDialogueGenerationHighHeelTracks::HighHeelActorBP' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, bRemoveDefaultTransformTrack) == 0x000030, "Member 'FPaperDialogueGenerationHighHeelTracks::bRemoveDefaultTransformTrack' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, bPlaceInFolder) == 0x000031, "Member 'FPaperDialogueGenerationHighHeelTracks::bPlaceInFolder' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, FolderName) == 0x000034, "Member 'FPaperDialogueGenerationHighHeelTracks::FolderName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, FolderColor) == 0x00003C, "Member 'FPaperDialogueGenerationHighHeelTracks::FolderColor' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, bAttachToActor) == 0x000040, "Member 'FPaperDialogueGenerationHighHeelTracks::bAttachToActor' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, TargetActorName) == 0x000044, "Member 'FPaperDialogueGenerationHighHeelTracks::TargetActorName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, TargetActorComponentName) == 0x00004C, "Member 'FPaperDialogueGenerationHighHeelTracks::TargetActorComponentName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, TargetActorBoneName) == 0x000054, "Member 'FPaperDialogueGenerationHighHeelTracks::TargetActorBoneName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, PropertyExposeToCinematic) == 0x00005C, "Member 'FPaperDialogueGenerationHighHeelTracks::PropertyExposeToCinematic' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationHighHeelTracks, bAutoMakeKeyframes) == 0x000064, "Member 'FPaperDialogueGenerationHighHeelTracks::bAutoMakeKeyframes' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationResimulationTracks
// 0x0028 (0x0028 - 0x0000)
struct FPaperDialogueGenerationResimulationTracks final
{
public:
	TSoftClassPtr<class UClass>                   ResimulationTrackBP;                               // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationResimulationTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationResimulationTracks");
static_assert(sizeof(FPaperDialogueGenerationResimulationTracks) == 0x000028, "Wrong size on FPaperDialogueGenerationResimulationTracks");
static_assert(offsetof(FPaperDialogueGenerationResimulationTracks, ResimulationTrackBP) == 0x000000, "Member 'FPaperDialogueGenerationResimulationTracks::ResimulationTrackBP' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationGestureTracks
// 0x0050 (0x0050 - 0x0000)
struct FPaperDialogueGenerationGestureTracks final
{
public:
	TSoftClassPtr<class UClass>                   GestureTrackBP;                                    // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GestureTagPropertyName;                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddSectionEvenGestureTagIsNone;                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpeakerGestureIntervalMin;                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeakerGestureIntervalMax;                         // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeakerGestureDifferentGap;                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListenerSilenceLineCount;                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListenerGestureIntervalMin;                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListenerGestureIntervalMax;                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListenerGestureDifferentGap;                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationGestureTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationGestureTracks");
static_assert(sizeof(FPaperDialogueGenerationGestureTracks) == 0x000050, "Wrong size on FPaperDialogueGenerationGestureTracks");
static_assert(offsetof(FPaperDialogueGenerationGestureTracks, GestureTrackBP) == 0x000000, "Member 'FPaperDialogueGenerationGestureTracks::GestureTrackBP' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationGestureTracks, GestureTagPropertyName) == 0x000028, "Member 'FPaperDialogueGenerationGestureTracks::GestureTagPropertyName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationGestureTracks, bAddSectionEvenGestureTagIsNone) == 0x000030, "Member 'FPaperDialogueGenerationGestureTracks::bAddSectionEvenGestureTagIsNone' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationGestureTracks, SpeakerGestureIntervalMin) == 0x000034, "Member 'FPaperDialogueGenerationGestureTracks::SpeakerGestureIntervalMin' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationGestureTracks, SpeakerGestureIntervalMax) == 0x000038, "Member 'FPaperDialogueGenerationGestureTracks::SpeakerGestureIntervalMax' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationGestureTracks, SpeakerGestureDifferentGap) == 0x00003C, "Member 'FPaperDialogueGenerationGestureTracks::SpeakerGestureDifferentGap' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationGestureTracks, ListenerSilenceLineCount) == 0x000040, "Member 'FPaperDialogueGenerationGestureTracks::ListenerSilenceLineCount' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationGestureTracks, ListenerGestureIntervalMin) == 0x000044, "Member 'FPaperDialogueGenerationGestureTracks::ListenerGestureIntervalMin' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationGestureTracks, ListenerGestureIntervalMax) == 0x000048, "Member 'FPaperDialogueGenerationGestureTracks::ListenerGestureIntervalMax' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationGestureTracks, ListenerGestureDifferentGap) == 0x00004C, "Member 'FPaperDialogueGenerationGestureTracks::ListenerGestureDifferentGap' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationUnifiedAnimationTracks
// 0x0078 (0x0078 - 0x0000)
struct FPaperDialogueGenerationUnifiedAnimationTracks final
{
public:
	int32                                         OverrideEaseInFrames;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideEaseOutFrames;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSoftObjectPath>     UnifiedAnimationSequenceMap;                       // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationAnimationTracks GenerationAnimationTracks;                        // 0x0058(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationUnifiedAnimationTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationUnifiedAnimationTracks");
static_assert(sizeof(FPaperDialogueGenerationUnifiedAnimationTracks) == 0x000078, "Wrong size on FPaperDialogueGenerationUnifiedAnimationTracks");
static_assert(offsetof(FPaperDialogueGenerationUnifiedAnimationTracks, OverrideEaseInFrames) == 0x000000, "Member 'FPaperDialogueGenerationUnifiedAnimationTracks::OverrideEaseInFrames' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationUnifiedAnimationTracks, OverrideEaseOutFrames) == 0x000004, "Member 'FPaperDialogueGenerationUnifiedAnimationTracks::OverrideEaseOutFrames' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationUnifiedAnimationTracks, UnifiedAnimationSequenceMap) == 0x000008, "Member 'FPaperDialogueGenerationUnifiedAnimationTracks::UnifiedAnimationSequenceMap' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationUnifiedAnimationTracks, GenerationAnimationTracks) == 0x000058, "Member 'FPaperDialogueGenerationUnifiedAnimationTracks::GenerationAnimationTracks' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationEmotionAnimationConfig
// 0x0020 (0x0020 - 0x0000)
struct FPaperDialogueGenerationEmotionAnimationConfig final
{
public:
	bool                                          bCreateCharacterMesh;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterMeshName;                                 // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationAnimationTrackConfig TrackAndSlotConfig;                          // 0x000C(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationEmotionAnimationConfig) == 0x000004, "Wrong alignment on FPaperDialogueGenerationEmotionAnimationConfig");
static_assert(sizeof(FPaperDialogueGenerationEmotionAnimationConfig) == 0x000020, "Wrong size on FPaperDialogueGenerationEmotionAnimationConfig");
static_assert(offsetof(FPaperDialogueGenerationEmotionAnimationConfig, bCreateCharacterMesh) == 0x000000, "Member 'FPaperDialogueGenerationEmotionAnimationConfig::bCreateCharacterMesh' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationEmotionAnimationConfig, CharacterMeshName) == 0x000004, "Member 'FPaperDialogueGenerationEmotionAnimationConfig::CharacterMeshName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationEmotionAnimationConfig, TrackAndSlotConfig) == 0x00000C, "Member 'FPaperDialogueGenerationEmotionAnimationConfig::TrackAndSlotConfig' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationEmotionTracks
// 0x00C0 (0x00C0 - 0x0000)
struct FPaperDialogueGenerationEmotionTracks final
{
public:
	int32                                         OverrideEaseInOutFrames;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneBuiltInEasing                      BuiltInEaseInOutType;                              // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperDialogueGenerationEmotionAnimationConfig DialogueUpperFaceConfig;                   // 0x0008(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   IdleFacePropertyName;                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationCustomTrackConfig DialogueIdleFaceConfig;                         // 0x0030(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationEmotionTracks) == 0x000008, "Wrong alignment on FPaperDialogueGenerationEmotionTracks");
static_assert(sizeof(FPaperDialogueGenerationEmotionTracks) == 0x0000C0, "Wrong size on FPaperDialogueGenerationEmotionTracks");
static_assert(offsetof(FPaperDialogueGenerationEmotionTracks, OverrideEaseInOutFrames) == 0x000000, "Member 'FPaperDialogueGenerationEmotionTracks::OverrideEaseInOutFrames' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationEmotionTracks, BuiltInEaseInOutType) == 0x000004, "Member 'FPaperDialogueGenerationEmotionTracks::BuiltInEaseInOutType' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationEmotionTracks, DialogueUpperFaceConfig) == 0x000008, "Member 'FPaperDialogueGenerationEmotionTracks::DialogueUpperFaceConfig' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationEmotionTracks, IdleFacePropertyName) == 0x000028, "Member 'FPaperDialogueGenerationEmotionTracks::IdleFacePropertyName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationEmotionTracks, DialogueIdleFaceConfig) == 0x000030, "Member 'FPaperDialogueGenerationEmotionTracks::DialogueIdleFaceConfig' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationSetUpStruct
// 0x0490 (0x0490 - 0x0000)
struct FPaperDialogueGenerationSetUpStruct final
{
public:
	struct FPaperDialogueGenerationSetupFadeStruct FadeSettings;                                     // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationFullBodyStruct FullBodySettings;                                  // 0x0038(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperDialogueGenerationSetupCameraStruct CameraSettings;                                 // 0x0060(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationIdleAnimationStruct IdleAnimationSettings;                        // 0x0080(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationAnimationTracks AnimationTrackSettings;                           // 0x00A0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationCustomTracks   CustomTrackSettings;                               // 0x00C0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationLightTracks    LightTrackSettings;                                // 0x00D0(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperDialogueGenerationLookAtTracks   LookAtTrackSettings;                               // 0x00E8(0x00B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationCharacterNameableTracks CharacterNameableTrackSettings;           // 0x01A0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationTransformTracks TransformTrackSettings;                           // 0x01F0(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationWalkInAndOutTracks WalkInAndOutSettings;                          // 0x0210(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationRootMotionTracks RootMotionSettings;                              // 0x0240(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationCameraShakeTracks CameraShakeSettings;                            // 0x0248(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationHighHeelTracks HighHeelSettings;                                  // 0x0278(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationResimulationTracks ResimulationSettings;                          // 0x02E0(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationGestureTracks  GestureSettings;                                   // 0x0308(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationUnifiedAnimationTracks UnifiedAnimationTrackSettings;             // 0x0358(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPaperDialogueGenerationEmotionTracks  EmotionSettings;                                   // 0x03D0(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationSetUpStruct) == 0x000008, "Wrong alignment on FPaperDialogueGenerationSetUpStruct");
static_assert(sizeof(FPaperDialogueGenerationSetUpStruct) == 0x000490, "Wrong size on FPaperDialogueGenerationSetUpStruct");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, FadeSettings) == 0x000000, "Member 'FPaperDialogueGenerationSetUpStruct::FadeSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, FullBodySettings) == 0x000038, "Member 'FPaperDialogueGenerationSetUpStruct::FullBodySettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, CameraSettings) == 0x000060, "Member 'FPaperDialogueGenerationSetUpStruct::CameraSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, IdleAnimationSettings) == 0x000080, "Member 'FPaperDialogueGenerationSetUpStruct::IdleAnimationSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, AnimationTrackSettings) == 0x0000A0, "Member 'FPaperDialogueGenerationSetUpStruct::AnimationTrackSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, CustomTrackSettings) == 0x0000C0, "Member 'FPaperDialogueGenerationSetUpStruct::CustomTrackSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, LightTrackSettings) == 0x0000D0, "Member 'FPaperDialogueGenerationSetUpStruct::LightTrackSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, LookAtTrackSettings) == 0x0000E8, "Member 'FPaperDialogueGenerationSetUpStruct::LookAtTrackSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, CharacterNameableTrackSettings) == 0x0001A0, "Member 'FPaperDialogueGenerationSetUpStruct::CharacterNameableTrackSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, TransformTrackSettings) == 0x0001F0, "Member 'FPaperDialogueGenerationSetUpStruct::TransformTrackSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, WalkInAndOutSettings) == 0x000210, "Member 'FPaperDialogueGenerationSetUpStruct::WalkInAndOutSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, RootMotionSettings) == 0x000240, "Member 'FPaperDialogueGenerationSetUpStruct::RootMotionSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, CameraShakeSettings) == 0x000248, "Member 'FPaperDialogueGenerationSetUpStruct::CameraShakeSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, HighHeelSettings) == 0x000278, "Member 'FPaperDialogueGenerationSetUpStruct::HighHeelSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, ResimulationSettings) == 0x0002E0, "Member 'FPaperDialogueGenerationSetUpStruct::ResimulationSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, GestureSettings) == 0x000308, "Member 'FPaperDialogueGenerationSetUpStruct::GestureSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, UnifiedAnimationTrackSettings) == 0x000358, "Member 'FPaperDialogueGenerationSetUpStruct::UnifiedAnimationTrackSettings' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationSetUpStruct, EmotionSettings) == 0x0003D0, "Member 'FPaperDialogueGenerationSetUpStruct::EmotionSettings' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueActorInfo
// 0x0200 (0x0200 - 0x0000)
struct FPaperDialogueActorInfo final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AvatarName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPrimaryDataAsset>       AvatarDataAsset;                                   // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDynamicBind;                                     // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EDynamicBindType                              BindType;                                          // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0048(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPaperDialogueLookAtInit               InitLookAt;                                        // 0x0070(0x0080)(Edit, NativeAccessSpecifierPublic)
	bool                                          InitTransfromEnable;                               // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0xF];                                       // 0x00F1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitTransfrom;                                     // 0x0100(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FixTemplate;                                       // 0x0160(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x88];                                     // 0x0168(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActorID;                                           // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueActorInfo) == 0x000010, "Wrong alignment on FPaperDialogueActorInfo");
static_assert(sizeof(FPaperDialogueActorInfo) == 0x000200, "Wrong size on FPaperDialogueActorInfo");
static_assert(offsetof(FPaperDialogueActorInfo, ActorName) == 0x000000, "Member 'FPaperDialogueActorInfo::ActorName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorInfo, AvatarName) == 0x000008, "Member 'FPaperDialogueActorInfo::AvatarName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorInfo, AvatarDataAsset) == 0x000010, "Member 'FPaperDialogueActorInfo::AvatarDataAsset' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorInfo, SlotIndex) == 0x000038, "Member 'FPaperDialogueActorInfo::SlotIndex' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorInfo, IsDynamicBind) == 0x00003C, "Member 'FPaperDialogueActorInfo::IsDynamicBind' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorInfo, BindType) == 0x000040, "Member 'FPaperDialogueActorInfo::BindType' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorInfo, ActorClass) == 0x000048, "Member 'FPaperDialogueActorInfo::ActorClass' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorInfo, InitLookAt) == 0x000070, "Member 'FPaperDialogueActorInfo::InitLookAt' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorInfo, InitTransfromEnable) == 0x0000F0, "Member 'FPaperDialogueActorInfo::InitTransfromEnable' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorInfo, InitTransfrom) == 0x000100, "Member 'FPaperDialogueActorInfo::InitTransfrom' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorInfo, FixTemplate) == 0x000160, "Member 'FPaperDialogueActorInfo::FixTemplate' has a wrong offset!");
static_assert(offsetof(FPaperDialogueActorInfo, ActorID) == 0x0001F0, "Member 'FPaperDialogueActorInfo::ActorID' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueAnimationBase
// 0x0008 (0x0048 - 0x0040)
struct FPaperDialogueAnimationBase : public FPaperDialogueTrackItem
{
public:
	bool                                          AffectCamera;                                      // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueAnimationBase) == 0x000008, "Wrong alignment on FPaperDialogueAnimationBase");
static_assert(sizeof(FPaperDialogueAnimationBase) == 0x000048, "Wrong size on FPaperDialogueAnimationBase");
static_assert(offsetof(FPaperDialogueAnimationBase, AffectCamera) == 0x000040, "Member 'FPaperDialogueAnimationBase::AffectCamera' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueAnimation
// 0x0008 (0x0050 - 0x0048)
struct FPaperDialogueAnimation final : public FPaperDialogueAnimationBase
{
public:
	class UAnimSequenceBase*                      Asset;                                             // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueAnimation) == 0x000008, "Wrong alignment on FPaperDialogueAnimation");
static_assert(sizeof(FPaperDialogueAnimation) == 0x000050, "Wrong size on FPaperDialogueAnimation");
static_assert(offsetof(FPaperDialogueAnimation, Asset) == 0x000048, "Member 'FPaperDialogueAnimation::Asset' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperBlueprintNodePin
// 0x0008 (0x0008 - 0x0000)
struct FPaperBlueprintNodePin final
{
public:
	class FName                                   PinName;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperBlueprintNodePin) == 0x000004, "Wrong alignment on FPaperBlueprintNodePin");
static_assert(sizeof(FPaperBlueprintNodePin) == 0x000008, "Wrong size on FPaperBlueprintNodePin");
static_assert(offsetof(FPaperBlueprintNodePin, PinName) == 0x000000, "Member 'FPaperBlueprintNodePin::PinName' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueMenuItem
// 0x0018 (0x0018 - 0x0000)
struct FDialogueMenuItem final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	class UPaperDialogueNode_Base*                Next;                                              // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueMenuItem) == 0x000008, "Wrong alignment on FDialogueMenuItem");
static_assert(sizeof(FDialogueMenuItem) == 0x000018, "Wrong size on FDialogueMenuItem");
static_assert(offsetof(FDialogueMenuItem, Text) == 0x000000, "Member 'FDialogueMenuItem::Text' has a wrong offset!");
static_assert(offsetof(FDialogueMenuItem, Next) == 0x000010, "Member 'FDialogueMenuItem::Next' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueCineCameraTag
// 0x0001 (0x0001 - 0x0000)
struct FPaperDialogueCineCameraTag final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueCineCameraTag) == 0x000001, "Wrong alignment on FPaperDialogueCineCameraTag");
static_assert(sizeof(FPaperDialogueCineCameraTag) == 0x000001, "Wrong size on FPaperDialogueCineCameraTag");

// ScriptStruct PaperDialogue.ShotEffectCharacterSlot
// 0x0080 (0x0080 - 0x0000)
struct FShotEffectCharacterSlot final
{
public:
	int32                                         CharacterSlotIndex;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEffectTransform;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DestTransform;                                     // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneBlendType                          TransformBlendType;                                // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideActor;                                        // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0xE];                                       // 0x0072(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShotEffectCharacterSlot) == 0x000010, "Wrong alignment on FShotEffectCharacterSlot");
static_assert(sizeof(FShotEffectCharacterSlot) == 0x000080, "Wrong size on FShotEffectCharacterSlot");
static_assert(offsetof(FShotEffectCharacterSlot, CharacterSlotIndex) == 0x000000, "Member 'FShotEffectCharacterSlot::CharacterSlotIndex' has a wrong offset!");
static_assert(offsetof(FShotEffectCharacterSlot, bEffectTransform) == 0x000004, "Member 'FShotEffectCharacterSlot::bEffectTransform' has a wrong offset!");
static_assert(offsetof(FShotEffectCharacterSlot, DestTransform) == 0x000010, "Member 'FShotEffectCharacterSlot::DestTransform' has a wrong offset!");
static_assert(offsetof(FShotEffectCharacterSlot, TransformBlendType) == 0x000070, "Member 'FShotEffectCharacterSlot::TransformBlendType' has a wrong offset!");
static_assert(offsetof(FShotEffectCharacterSlot, bHideActor) == 0x000071, "Member 'FShotEffectCharacterSlot::bHideActor' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueCameraShotSetting
// 0x0058 (0x0058 - 0x0000)
struct FPaperDialogueCameraShotSetting final
{
public:
	float                                         FocalLength;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aperture;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLookAtTracking;                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtRelativeOffset;                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FocusRelativeOffset;                               // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraFocusMethod                            FocusMethod;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualFocusDistance;                               // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDrawDebugFocusPlane : 1;                          // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 DebugFocusPlaneColor;                              // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_DepthOfFieldType : 1;                    // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EDepthOfFieldType                             DepthOfFieldType;                                  // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueCameraShotSetting) == 0x000008, "Wrong alignment on FPaperDialogueCameraShotSetting");
static_assert(sizeof(FPaperDialogueCameraShotSetting) == 0x000058, "Wrong size on FPaperDialogueCameraShotSetting");
static_assert(offsetof(FPaperDialogueCameraShotSetting, FocalLength) == 0x000000, "Member 'FPaperDialogueCameraShotSetting::FocalLength' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCameraShotSetting, Aperture) == 0x000004, "Member 'FPaperDialogueCameraShotSetting::Aperture' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCameraShotSetting, EnableLookAtTracking) == 0x000008, "Member 'FPaperDialogueCameraShotSetting::EnableLookAtTracking' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCameraShotSetting, LookAtRelativeOffset) == 0x000010, "Member 'FPaperDialogueCameraShotSetting::LookAtRelativeOffset' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCameraShotSetting, FocusRelativeOffset) == 0x000028, "Member 'FPaperDialogueCameraShotSetting::FocusRelativeOffset' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCameraShotSetting, FocusMethod) == 0x000040, "Member 'FPaperDialogueCameraShotSetting::FocusMethod' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCameraShotSetting, ManualFocusDistance) == 0x000044, "Member 'FPaperDialogueCameraShotSetting::ManualFocusDistance' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCameraShotSetting, DebugFocusPlaneColor) == 0x00004C, "Member 'FPaperDialogueCameraShotSetting::DebugFocusPlaneColor' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCameraShotSetting, DepthOfFieldType) == 0x000051, "Member 'FPaperDialogueCameraShotSetting::DepthOfFieldType' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueSetElement
// 0x0080 (0x0080 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x10) FDialogueSetElement
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BindToSlot;                                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FDialogueSetElement) == 0x000010, "Wrong alignment on FDialogueSetElement");
static_assert(sizeof(FDialogueSetElement) == 0x000080, "Wrong size on FDialogueSetElement");
static_assert(offsetof(FDialogueSetElement, Transform) == 0x000010, "Member 'FDialogueSetElement::Transform' has a wrong offset!");
static_assert(offsetof(FDialogueSetElement, BindToSlot) == 0x000070, "Member 'FDialogueSetElement::BindToSlot' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueCamera
// 0x0080 (0x0100 - 0x0080)
struct FPaperDialogueCamera final : public FDialogueSetElement
{
public:
	class FName                                   CameraName;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCharacterCamera;                                // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SourceCharacterSlotIndex;                          // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetCharacterSlotIndex;                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FShotEffectCharacterSlot>       ShotEffectCharacterSlot;                           // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bHighHeelCamera;                                   // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperDialogueCameraShotSetting        CineCameraSettings;                                // 0x00A8(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueCamera) == 0x000010, "Wrong alignment on FPaperDialogueCamera");
static_assert(sizeof(FPaperDialogueCamera) == 0x000100, "Wrong size on FPaperDialogueCamera");
static_assert(offsetof(FPaperDialogueCamera, CameraName) == 0x000078, "Member 'FPaperDialogueCamera::CameraName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCamera, bIsCharacterCamera) == 0x000080, "Member 'FPaperDialogueCamera::bIsCharacterCamera' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCamera, SourceCharacterSlotIndex) == 0x000084, "Member 'FPaperDialogueCamera::SourceCharacterSlotIndex' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCamera, TargetCharacterSlotIndex) == 0x000088, "Member 'FPaperDialogueCamera::TargetCharacterSlotIndex' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCamera, ShotEffectCharacterSlot) == 0x000090, "Member 'FPaperDialogueCamera::ShotEffectCharacterSlot' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCamera, bHighHeelCamera) == 0x0000A0, "Member 'FPaperDialogueCamera::bHighHeelCamera' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCamera, CineCameraSettings) == 0x0000A8, "Member 'FPaperDialogueCamera::CineCameraSettings' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueCameraGroup
// 0x0010 (0x0010 - 0x0000)
struct FPaperDialogueCameraGroup final
{
public:
	TArray<struct FPaperDialogueCamera>           Cameras;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueCameraGroup) == 0x000008, "Wrong alignment on FPaperDialogueCameraGroup");
static_assert(sizeof(FPaperDialogueCameraGroup) == 0x000010, "Wrong size on FPaperDialogueCameraGroup");
static_assert(offsetof(FPaperDialogueCameraGroup, Cameras) == 0x000000, "Member 'FPaperDialogueCameraGroup::Cameras' has a wrong offset!");

// ScriptStruct PaperDialogue.VirtualCameraManParams
// 0x001C (0x001C - 0x0000)
struct FVirtualCameraManParams final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FocusBoneName;                                     // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewportHorizion;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewportVertical;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVirtualCameraManParams) == 0x000004, "Wrong alignment on FVirtualCameraManParams");
static_assert(sizeof(FVirtualCameraManParams) == 0x00001C, "Wrong size on FVirtualCameraManParams");
static_assert(offsetof(FVirtualCameraManParams, Distance) == 0x000000, "Member 'FVirtualCameraManParams::Distance' has a wrong offset!");
static_assert(offsetof(FVirtualCameraManParams, Angle) == 0x000004, "Member 'FVirtualCameraManParams::Angle' has a wrong offset!");
static_assert(offsetof(FVirtualCameraManParams, Speed) == 0x000008, "Member 'FVirtualCameraManParams::Speed' has a wrong offset!");
static_assert(offsetof(FVirtualCameraManParams, FocusBoneName) == 0x00000C, "Member 'FVirtualCameraManParams::FocusBoneName' has a wrong offset!");
static_assert(offsetof(FVirtualCameraManParams, ViewportHorizion) == 0x000014, "Member 'FVirtualCameraManParams::ViewportHorizion' has a wrong offset!");
static_assert(offsetof(FVirtualCameraManParams, ViewportVertical) == 0x000018, "Member 'FVirtualCameraManParams::ViewportVertical' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueCamera2
// 0x08A0 (0x0920 - 0x0080)
struct FDialogueCamera2 : public FDialogueSetElement
{
public:
	TSubclassOf<class ACameraActor>               CameraClass;                                       // 0x0078(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFDialogueCameraType2                         Type;                                              // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ComponentName;                                     // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVirtualCameraManParams                Params;                                            // 0x008C(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FieldOfView;                                       // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrthoWidth;                                        // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrthoNearClipPlane;                                // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrthoFarClipPlane;                                 // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AspectRatio;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bConstrainAspectRatio : 1;                         // 0x00BC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseFieldOfViewForLOD : 1;                         // 0x00BC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLockToHmd : 1;                                    // 0x00BC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsePawnControlRotation : 1;                       // 0x00BC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PostProcessBlendWeight;                            // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0xC];                                       // 0x00C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PostProcessSettings;                               // 0x00D0(0x0850)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueCamera2) == 0x000010, "Wrong alignment on FDialogueCamera2");
static_assert(sizeof(FDialogueCamera2) == 0x000920, "Wrong size on FDialogueCamera2");
static_assert(offsetof(FDialogueCamera2, CameraClass) == 0x000078, "Member 'FDialogueCamera2::CameraClass' has a wrong offset!");
static_assert(offsetof(FDialogueCamera2, Type) == 0x000080, "Member 'FDialogueCamera2::Type' has a wrong offset!");
static_assert(offsetof(FDialogueCamera2, ComponentName) == 0x000084, "Member 'FDialogueCamera2::ComponentName' has a wrong offset!");
static_assert(offsetof(FDialogueCamera2, Params) == 0x00008C, "Member 'FDialogueCamera2::Params' has a wrong offset!");
static_assert(offsetof(FDialogueCamera2, FieldOfView) == 0x0000A8, "Member 'FDialogueCamera2::FieldOfView' has a wrong offset!");
static_assert(offsetof(FDialogueCamera2, OrthoWidth) == 0x0000AC, "Member 'FDialogueCamera2::OrthoWidth' has a wrong offset!");
static_assert(offsetof(FDialogueCamera2, OrthoNearClipPlane) == 0x0000B0, "Member 'FDialogueCamera2::OrthoNearClipPlane' has a wrong offset!");
static_assert(offsetof(FDialogueCamera2, OrthoFarClipPlane) == 0x0000B4, "Member 'FDialogueCamera2::OrthoFarClipPlane' has a wrong offset!");
static_assert(offsetof(FDialogueCamera2, AspectRatio) == 0x0000B8, "Member 'FDialogueCamera2::AspectRatio' has a wrong offset!");
static_assert(offsetof(FDialogueCamera2, PostProcessBlendWeight) == 0x0000C0, "Member 'FDialogueCamera2::PostProcessBlendWeight' has a wrong offset!");
static_assert(offsetof(FDialogueCamera2, PostProcessSettings) == 0x0000D0, "Member 'FDialogueCamera2::PostProcessSettings' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueCineCamera2
// 0x00A0 (0x09C0 - 0x0920)
struct FDialogueCineCamera2 final : public FDialogueCamera2
{
public:
	struct FCameraFilmbackSettings                FilmbackSettings;                                  // 0x0920(0x000C)(Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraFilmbackSettings                Filmback;                                          // 0x092C(0x000C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraLensSettings                    LensSettings;                                      // 0x0938(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_954[0x4];                                      // 0x0954(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraFocusSettings                   FocusSettings;                                     // 0x0958(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         CurrentFocalLength;                                // 0x09B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAperture;                                   // 0x09BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueCineCamera2) == 0x000010, "Wrong alignment on FDialogueCineCamera2");
static_assert(sizeof(FDialogueCineCamera2) == 0x0009C0, "Wrong size on FDialogueCineCamera2");
static_assert(offsetof(FDialogueCineCamera2, FilmbackSettings) == 0x000920, "Member 'FDialogueCineCamera2::FilmbackSettings' has a wrong offset!");
static_assert(offsetof(FDialogueCineCamera2, Filmback) == 0x00092C, "Member 'FDialogueCineCamera2::Filmback' has a wrong offset!");
static_assert(offsetof(FDialogueCineCamera2, LensSettings) == 0x000938, "Member 'FDialogueCineCamera2::LensSettings' has a wrong offset!");
static_assert(offsetof(FDialogueCineCamera2, FocusSettings) == 0x000958, "Member 'FDialogueCineCamera2::FocusSettings' has a wrong offset!");
static_assert(offsetof(FDialogueCineCamera2, CurrentFocalLength) == 0x0009B8, "Member 'FDialogueCineCamera2::CurrentFocalLength' has a wrong offset!");
static_assert(offsetof(FDialogueCineCamera2, CurrentAperture) == 0x0009BC, "Member 'FDialogueCineCamera2::CurrentAperture' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueCameraCut
// 0x0000 (0x0040 - 0x0040)
struct FPaperDialogueCameraCut final : public FPaperDialogueTrackItem
{
};
static_assert(alignof(FPaperDialogueCameraCut) == 0x000008, "Wrong alignment on FPaperDialogueCameraCut");
static_assert(sizeof(FPaperDialogueCameraCut) == 0x000040, "Wrong size on FPaperDialogueCameraCut");

// ScriptStruct PaperDialogue.ComponentGuids
// 0x0030 (0x0030 - 0x0000)
struct FComponentGuids final
{
public:
	struct FGuid                                  Hair;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Head;                                              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Body;                                              // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComponentGuids) == 0x000004, "Wrong alignment on FComponentGuids");
static_assert(sizeof(FComponentGuids) == 0x000030, "Wrong size on FComponentGuids");
static_assert(offsetof(FComponentGuids, Hair) == 0x000000, "Member 'FComponentGuids::Hair' has a wrong offset!");
static_assert(offsetof(FComponentGuids, Head) == 0x000010, "Member 'FComponentGuids::Head' has a wrong offset!");
static_assert(offsetof(FComponentGuids, Body) == 0x000020, "Member 'FComponentGuids::Body' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueLineTime
// 0x0018 (0x0018 - 0x0000)
struct FDialogueLineTime final
{
public:
	struct FVector2D                              Range;                                             // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LineIndex;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueLineTime) == 0x000008, "Wrong alignment on FDialogueLineTime");
static_assert(sizeof(FDialogueLineTime) == 0x000018, "Wrong size on FDialogueLineTime");
static_assert(offsetof(FDialogueLineTime, Range) == 0x000000, "Member 'FDialogueLineTime::Range' has a wrong offset!");
static_assert(offsetof(FDialogueLineTime, LineIndex) == 0x000010, "Member 'FDialogueLineTime::LineIndex' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueLight
// 0x0080 (0x0100 - 0x0080)
struct FDialogueLight final : public FDialogueSetElement
{
public:
	class FString                                 LightName;                                         // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ALight>                     LightActor;                                        // 0x0088(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterSlotIndex;                                // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MultiCharacterSlotIndex;                           // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EComponentMobility                            Mobility;                                          // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Brightness;                                        // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x00B0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CastShadows : 1;                                   // 0x00C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLightingChannels                      LightingChannels;                                  // 0x00C4(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EDetailMode                                   DetailMode;                                        // 0x00C5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttenuationRadius;                                 // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELightUnits                                   IntensityUnits;                                    // 0x00CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x00D0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InverseExposureBlend;                              // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceRadius;                                      // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoftSourceRadius;                                  // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceLength;                                      // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseInverseSquaredFalloff : 1;                     // 0x00E4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightFalloffExponent;                              // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsCinematicLight : 1;                             // 0x00EC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableShadowForLowEndPlatform : 1;               // 0x00EC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InnerConeAngle;                                    // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueLight) == 0x000010, "Wrong alignment on FDialogueLight");
static_assert(sizeof(FDialogueLight) == 0x000100, "Wrong size on FDialogueLight");
static_assert(offsetof(FDialogueLight, LightName) == 0x000078, "Member 'FDialogueLight::LightName' has a wrong offset!");
static_assert(offsetof(FDialogueLight, LightActor) == 0x000088, "Member 'FDialogueLight::LightActor' has a wrong offset!");
static_assert(offsetof(FDialogueLight, CharacterSlotIndex) == 0x000090, "Member 'FDialogueLight::CharacterSlotIndex' has a wrong offset!");
static_assert(offsetof(FDialogueLight, MultiCharacterSlotIndex) == 0x000098, "Member 'FDialogueLight::MultiCharacterSlotIndex' has a wrong offset!");
static_assert(offsetof(FDialogueLight, Mobility) == 0x0000A8, "Member 'FDialogueLight::Mobility' has a wrong offset!");
static_assert(offsetof(FDialogueLight, Brightness) == 0x0000AC, "Member 'FDialogueLight::Brightness' has a wrong offset!");
static_assert(offsetof(FDialogueLight, Color) == 0x0000B0, "Member 'FDialogueLight::Color' has a wrong offset!");
static_assert(offsetof(FDialogueLight, LightingChannels) == 0x0000C4, "Member 'FDialogueLight::LightingChannels' has a wrong offset!");
static_assert(offsetof(FDialogueLight, DetailMode) == 0x0000C5, "Member 'FDialogueLight::DetailMode' has a wrong offset!");
static_assert(offsetof(FDialogueLight, AttenuationRadius) == 0x0000C8, "Member 'FDialogueLight::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(FDialogueLight, IntensityUnits) == 0x0000CC, "Member 'FDialogueLight::IntensityUnits' has a wrong offset!");
static_assert(offsetof(FDialogueLight, Radius) == 0x0000D0, "Member 'FDialogueLight::Radius' has a wrong offset!");
static_assert(offsetof(FDialogueLight, InverseExposureBlend) == 0x0000D4, "Member 'FDialogueLight::InverseExposureBlend' has a wrong offset!");
static_assert(offsetof(FDialogueLight, SourceRadius) == 0x0000D8, "Member 'FDialogueLight::SourceRadius' has a wrong offset!");
static_assert(offsetof(FDialogueLight, SoftSourceRadius) == 0x0000DC, "Member 'FDialogueLight::SoftSourceRadius' has a wrong offset!");
static_assert(offsetof(FDialogueLight, SourceLength) == 0x0000E0, "Member 'FDialogueLight::SourceLength' has a wrong offset!");
static_assert(offsetof(FDialogueLight, LightFalloffExponent) == 0x0000E8, "Member 'FDialogueLight::LightFalloffExponent' has a wrong offset!");
static_assert(offsetof(FDialogueLight, InnerConeAngle) == 0x0000F0, "Member 'FDialogueLight::InnerConeAngle' has a wrong offset!");
static_assert(offsetof(FDialogueLight, OuterConeAngle) == 0x0000F4, "Member 'FDialogueLight::OuterConeAngle' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueLines
// 0x04B0 (0x04B0 - 0x0000)
struct FPaperDialogueLines final
{
public:
	struct FPaperDialogueActorAnimations          Speaker;                                           // 0x0000(0x02A0)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FPaperDialogueActorAnimations>  Listeners;                                         // 0x02A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsEnable;                                          // 0x02B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraName;                                        // 0x02B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperDialogueCameraCut                CutInfo;                                           // 0x02C0(0x0040)(Edit, NativeAccessSpecifierPublic)
	struct FPaperDialogueTransform                CameraTransfrom;                                   // 0x0300(0x0110)(Edit, NativeAccessSpecifierPublic)
	struct FPaperDialogueTrackItem                Group;                                             // 0x0410(0x0040)(Edit, NativeAccessSpecifierPublic)
	float                                         BeginWaitTime;                                     // 0x0450(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndWaitTime;                                       // 0x0454(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPaperDialogueLineType                        LineType;                                          // 0x0458(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPaperDialogueLineType, float>           CustomDefaultDurations;                            // 0x0460(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPaperDialogueLines) == 0x000010, "Wrong alignment on FPaperDialogueLines");
static_assert(sizeof(FPaperDialogueLines) == 0x0004B0, "Wrong size on FPaperDialogueLines");
static_assert(offsetof(FPaperDialogueLines, Speaker) == 0x000000, "Member 'FPaperDialogueLines::Speaker' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLines, Listeners) == 0x0002A0, "Member 'FPaperDialogueLines::Listeners' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLines, IsEnable) == 0x0002B0, "Member 'FPaperDialogueLines::IsEnable' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLines, CameraName) == 0x0002B4, "Member 'FPaperDialogueLines::CameraName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLines, CutInfo) == 0x0002C0, "Member 'FPaperDialogueLines::CutInfo' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLines, CameraTransfrom) == 0x000300, "Member 'FPaperDialogueLines::CameraTransfrom' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLines, Group) == 0x000410, "Member 'FPaperDialogueLines::Group' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLines, BeginWaitTime) == 0x000450, "Member 'FPaperDialogueLines::BeginWaitTime' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLines, EndWaitTime) == 0x000454, "Member 'FPaperDialogueLines::EndWaitTime' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLines, LineType) == 0x000458, "Member 'FPaperDialogueLines::LineType' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLines, CustomDefaultDurations) == 0x000460, "Member 'FPaperDialogueLines::CustomDefaultDurations' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueCameraShot
// 0x0078 (0x0078 - 0x0000)
struct FDialogueCameraShot final
{
public:
	class FName                                   ShotTag;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocalLength;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aperture;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLookAtTracking;                              // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtRelativeOffset;                              // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FocusRelativeOffset;                               // 0x0030(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraFocusMethod                            FocusMethod;                                       // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualFocusDistance;                               // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDrawDebugFocusPlane : 1;                          // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 DebugFocusPlaneColor;                              // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_DepthOfFieldType : 1;                    // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EDepthOfFieldType                             DepthOfFieldType;                                  // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FShotEffectCharacterSlot>       ShotEffectCharacterSlot;                           // 0x0060(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bHighHeelCamera;                                   // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueCameraShot) == 0x000008, "Wrong alignment on FDialogueCameraShot");
static_assert(sizeof(FDialogueCameraShot) == 0x000078, "Wrong size on FDialogueCameraShot");
static_assert(offsetof(FDialogueCameraShot, ShotTag) == 0x000000, "Member 'FDialogueCameraShot::ShotTag' has a wrong offset!");
static_assert(offsetof(FDialogueCameraShot, FocalLength) == 0x000008, "Member 'FDialogueCameraShot::FocalLength' has a wrong offset!");
static_assert(offsetof(FDialogueCameraShot, Aperture) == 0x00000C, "Member 'FDialogueCameraShot::Aperture' has a wrong offset!");
static_assert(offsetof(FDialogueCameraShot, EnableLookAtTracking) == 0x000010, "Member 'FDialogueCameraShot::EnableLookAtTracking' has a wrong offset!");
static_assert(offsetof(FDialogueCameraShot, LookAtRelativeOffset) == 0x000018, "Member 'FDialogueCameraShot::LookAtRelativeOffset' has a wrong offset!");
static_assert(offsetof(FDialogueCameraShot, FocusRelativeOffset) == 0x000030, "Member 'FDialogueCameraShot::FocusRelativeOffset' has a wrong offset!");
static_assert(offsetof(FDialogueCameraShot, FocusMethod) == 0x000048, "Member 'FDialogueCameraShot::FocusMethod' has a wrong offset!");
static_assert(offsetof(FDialogueCameraShot, ManualFocusDistance) == 0x00004C, "Member 'FDialogueCameraShot::ManualFocusDistance' has a wrong offset!");
static_assert(offsetof(FDialogueCameraShot, DebugFocusPlaneColor) == 0x000054, "Member 'FDialogueCameraShot::DebugFocusPlaneColor' has a wrong offset!");
static_assert(offsetof(FDialogueCameraShot, DepthOfFieldType) == 0x000059, "Member 'FDialogueCameraShot::DepthOfFieldType' has a wrong offset!");
static_assert(offsetof(FDialogueCameraShot, ShotEffectCharacterSlot) == 0x000060, "Member 'FDialogueCameraShot::ShotEffectCharacterSlot' has a wrong offset!");
static_assert(offsetof(FDialogueCameraShot, bHighHeelCamera) == 0x000070, "Member 'FDialogueCameraShot::bHighHeelCamera' has a wrong offset!");

// ScriptStruct PaperDialogue.DialoguePresetCamera
// 0x0060 (0x0060 - 0x0000)
struct FDialoguePresetCamera final
{
public:
	bool                                          bIsCharacterCamera;                                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CameraSlotIndex;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceCharacterSlotIndex;                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetCharacterSlotIndex;                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDialogueCameraShot> CameraShots;                                       // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialoguePresetCamera) == 0x000008, "Wrong alignment on FDialoguePresetCamera");
static_assert(sizeof(FDialoguePresetCamera) == 0x000060, "Wrong size on FDialoguePresetCamera");
static_assert(offsetof(FDialoguePresetCamera, bIsCharacterCamera) == 0x000000, "Member 'FDialoguePresetCamera::bIsCharacterCamera' has a wrong offset!");
static_assert(offsetof(FDialoguePresetCamera, CameraSlotIndex) == 0x000004, "Member 'FDialoguePresetCamera::CameraSlotIndex' has a wrong offset!");
static_assert(offsetof(FDialoguePresetCamera, SourceCharacterSlotIndex) == 0x000008, "Member 'FDialoguePresetCamera::SourceCharacterSlotIndex' has a wrong offset!");
static_assert(offsetof(FDialoguePresetCamera, TargetCharacterSlotIndex) == 0x00000C, "Member 'FDialoguePresetCamera::TargetCharacterSlotIndex' has a wrong offset!");
static_assert(offsetof(FDialoguePresetCamera, CameraShots) == 0x000010, "Member 'FDialoguePresetCamera::CameraShots' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueCameraGroup
// 0x0050 (0x0050 - 0x0000)
struct FDialogueCameraGroup final
{
public:
	TMap<class FName, struct FDialogueCineCamera2> Cameras;                                          // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueCameraGroup) == 0x000008, "Wrong alignment on FDialogueCameraGroup");
static_assert(sizeof(FDialogueCameraGroup) == 0x000050, "Wrong size on FDialogueCameraGroup");
static_assert(offsetof(FDialogueCameraGroup, Cameras) == 0x000000, "Member 'FDialogueCameraGroup::Cameras' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueCharacterSlot
// 0x0000 (0x0080 - 0x0080)
struct FDialogueCharacterSlot final : public FDialogueSetElement
{
};
static_assert(alignof(FDialogueCharacterSlot) == 0x000010, "Wrong alignment on FDialogueCharacterSlot");
static_assert(sizeof(FDialogueCharacterSlot) == 0x000080, "Wrong size on FDialogueCharacterSlot");

// ScriptStruct PaperDialogue.DialogueCustomExtendedData
// 0x0010 (0x0010 - 0x0000)
struct FDialogueCustomExtendedData final
{
public:
	class FString                                 CustomExtendedDataValues;                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDialogueCustomExtendedData) == 0x000008, "Wrong alignment on FDialogueCustomExtendedData");
static_assert(sizeof(FDialogueCustomExtendedData) == 0x000010, "Wrong size on FDialogueCustomExtendedData");
static_assert(offsetof(FDialogueCustomExtendedData, CustomExtendedDataValues) == 0x000000, "Member 'FDialogueCustomExtendedData::CustomExtendedDataValues' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueActorDescription
// 0x0020 (0x0020 - 0x0000)
struct FDialogueActorDescription final
{
public:
	class FText                                   NameText;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueActorDescription) == 0x000008, "Wrong alignment on FDialogueActorDescription");
static_assert(sizeof(FDialogueActorDescription) == 0x000020, "Wrong size on FDialogueActorDescription");
static_assert(offsetof(FDialogueActorDescription, NameText) == 0x000000, "Member 'FDialogueActorDescription::NameText' has a wrong offset!");
static_assert(offsetof(FDialogueActorDescription, TitleText) == 0x000010, "Member 'FDialogueActorDescription::TitleText' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueActorDefinition
// 0x00C0 (0x00C0 - 0x0000)
struct FDialogueActorDefinition final
{
public:
	struct FGameplayTag                           SpeakerTag;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpeakerTag2;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarTag;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPrimaryDataAsset>       AvatarDataAsset;                                   // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Actor;                                             // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueActorDescription              ActorDescription;                                  // 0x0078(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           StartIdlePoseForAI;                                // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueActorDefinition) == 0x000008, "Wrong alignment on FDialogueActorDefinition");
static_assert(sizeof(FDialogueActorDefinition) == 0x0000C0, "Wrong size on FDialogueActorDefinition");
static_assert(offsetof(FDialogueActorDefinition, SpeakerTag) == 0x000000, "Member 'FDialogueActorDefinition::SpeakerTag' has a wrong offset!");
static_assert(offsetof(FDialogueActorDefinition, SpeakerTag2) == 0x000008, "Member 'FDialogueActorDefinition::SpeakerTag2' has a wrong offset!");
static_assert(offsetof(FDialogueActorDefinition, AvatarTag) == 0x000018, "Member 'FDialogueActorDefinition::AvatarTag' has a wrong offset!");
static_assert(offsetof(FDialogueActorDefinition, AvatarDataAsset) == 0x000028, "Member 'FDialogueActorDefinition::AvatarDataAsset' has a wrong offset!");
static_assert(offsetof(FDialogueActorDefinition, Actor) == 0x000050, "Member 'FDialogueActorDefinition::Actor' has a wrong offset!");
static_assert(offsetof(FDialogueActorDefinition, ActorDescription) == 0x000078, "Member 'FDialogueActorDefinition::ActorDescription' has a wrong offset!");
static_assert(offsetof(FDialogueActorDefinition, StartIdlePoseForAI) == 0x000098, "Member 'FDialogueActorDefinition::StartIdlePoseForAI' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueSlotSetting
// 0x0028 (0x0028 - 0x0000)
struct FDialogueSlotSetting final
{
public:
	struct FGameplayTag                           SpeakerTag;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpeakerTag2;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterSlotIndex;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPivot;                                          // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToTerrain;                                    // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FixTemplate;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueSlotSetting) == 0x000008, "Wrong alignment on FDialogueSlotSetting");
static_assert(sizeof(FDialogueSlotSetting) == 0x000028, "Wrong size on FDialogueSlotSetting");
static_assert(offsetof(FDialogueSlotSetting, SpeakerTag) == 0x000000, "Member 'FDialogueSlotSetting::SpeakerTag' has a wrong offset!");
static_assert(offsetof(FDialogueSlotSetting, SpeakerTag2) == 0x000008, "Member 'FDialogueSlotSetting::SpeakerTag2' has a wrong offset!");
static_assert(offsetof(FDialogueSlotSetting, CharacterSlotIndex) == 0x000018, "Member 'FDialogueSlotSetting::CharacterSlotIndex' has a wrong offset!");
static_assert(offsetof(FDialogueSlotSetting, bIsPivot) == 0x00001C, "Member 'FDialogueSlotSetting::bIsPivot' has a wrong offset!");
static_assert(offsetof(FDialogueSlotSetting, bSnapToTerrain) == 0x00001D, "Member 'FDialogueSlotSetting::bSnapToTerrain' has a wrong offset!");
static_assert(offsetof(FDialogueSlotSetting, FixTemplate) == 0x000020, "Member 'FDialogueSlotSetting::FixTemplate' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueKey
// 0x000C (0x000C - 0x0000)
struct FDialogueKey
{
public:
	EDialogueKeyAlignType                         AlignType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERichCurveInterpMode                          InterpMode;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueKey) == 0x000004, "Wrong alignment on FDialogueKey");
static_assert(sizeof(FDialogueKey) == 0x00000C, "Wrong size on FDialogueKey");
static_assert(offsetof(FDialogueKey, AlignType) == 0x000000, "Member 'FDialogueKey::AlignType' has a wrong offset!");
static_assert(offsetof(FDialogueKey, Time) == 0x000004, "Member 'FDialogueKey::Time' has a wrong offset!");
static_assert(offsetof(FDialogueKey, InterpMode) == 0x000008, "Member 'FDialogueKey::InterpMode' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueTransformKey
// 0x0064 (0x0070 - 0x000C)
struct FDialogueTransformKey final : public FDialogueKey
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transfrom;                                         // 0x0010(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueTransformKey) == 0x000010, "Wrong alignment on FDialogueTransformKey");
static_assert(sizeof(FDialogueTransformKey) == 0x000070, "Wrong size on FDialogueTransformKey");
static_assert(offsetof(FDialogueTransformKey, Transfrom) == 0x000010, "Member 'FDialogueTransformKey::Transfrom' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueParameterConfig
// 0x0020 (0x0020 - 0x0000)
struct FPaperDialogueParameterConfig final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamType;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParamValue;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueParameterConfig) == 0x000008, "Wrong alignment on FPaperDialogueParameterConfig");
static_assert(sizeof(FPaperDialogueParameterConfig) == 0x000020, "Wrong size on FPaperDialogueParameterConfig");
static_assert(offsetof(FPaperDialogueParameterConfig, ParamName) == 0x000000, "Member 'FPaperDialogueParameterConfig::ParamName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueParameterConfig, ParamType) == 0x000008, "Member 'FPaperDialogueParameterConfig::ParamType' has a wrong offset!");
static_assert(offsetof(FPaperDialogueParameterConfig, ParamValue) == 0x000010, "Member 'FPaperDialogueParameterConfig::ParamValue' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueParameterMapConfig
// 0x0050 (0x0050 - 0x0000)
struct FPaperDialogueParameterMapConfig final
{
public:
	TMap<class FName, struct FPaperDialogueParameterConfig> ParameterConfigs;                        // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueParameterMapConfig) == 0x000008, "Wrong alignment on FPaperDialogueParameterMapConfig");
static_assert(sizeof(FPaperDialogueParameterMapConfig) == 0x000050, "Wrong size on FPaperDialogueParameterMapConfig");
static_assert(offsetof(FPaperDialogueParameterMapConfig, ParameterConfigs) == 0x000000, "Member 'FPaperDialogueParameterMapConfig::ParameterConfigs' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueMultiParameterMapConfig
// 0x0010 (0x0010 - 0x0000)
struct FPaperDialogueMultiParameterMapConfig final
{
public:
	TArray<struct FPaperDialogueParameterMapConfig> MultiParameters;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueMultiParameterMapConfig) == 0x000008, "Wrong alignment on FPaperDialogueMultiParameterMapConfig");
static_assert(sizeof(FPaperDialogueMultiParameterMapConfig) == 0x000010, "Wrong size on FPaperDialogueMultiParameterMapConfig");
static_assert(offsetof(FPaperDialogueMultiParameterMapConfig, MultiParameters) == 0x000000, "Member 'FPaperDialogueMultiParameterMapConfig::MultiParameters' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueSingleParaStruct
// 0x0058 (0x0058 - 0x0000)
struct FPaperDialogueSingleParaStruct final
{
public:
	class FName                                   ParameterType;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPaperDialogueParameterConfig> ParameterConfigs;                        // 0x0008(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueSingleParaStruct) == 0x000008, "Wrong alignment on FPaperDialogueSingleParaStruct");
static_assert(sizeof(FPaperDialogueSingleParaStruct) == 0x000058, "Wrong size on FPaperDialogueSingleParaStruct");
static_assert(offsetof(FPaperDialogueSingleParaStruct, ParameterType) == 0x000000, "Member 'FPaperDialogueSingleParaStruct::ParameterType' has a wrong offset!");
static_assert(offsetof(FPaperDialogueSingleParaStruct, ParameterConfigs) == 0x000008, "Member 'FPaperDialogueSingleParaStruct::ParameterConfigs' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueParaSetStruct
// 0x0020 (0x0020 - 0x0000)
struct FPaperDialogueParaSetStruct final
{
public:
	class FString                                 ConditionRemark;                                   // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPaperDialogueSingleParaStruct> StructParameters;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueParaSetStruct) == 0x000008, "Wrong alignment on FPaperDialogueParaSetStruct");
static_assert(sizeof(FPaperDialogueParaSetStruct) == 0x000020, "Wrong size on FPaperDialogueParaSetStruct");
static_assert(offsetof(FPaperDialogueParaSetStruct, ConditionRemark) == 0x000000, "Member 'FPaperDialogueParaSetStruct::ConditionRemark' has a wrong offset!");
static_assert(offsetof(FPaperDialogueParaSetStruct, StructParameters) == 0x000010, "Member 'FPaperDialogueParaSetStruct::StructParameters' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueMultiParaStruct
// 0x0018 (0x0018 - 0x0000)
struct FPaperDialogueMultiParaStruct final
{
public:
	EPaperDialogueChoiceConditionPurpose          ConditionPurpose;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPaperDialogueParaSetStruct>    StructParameterList;                               // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueMultiParaStruct) == 0x000008, "Wrong alignment on FPaperDialogueMultiParaStruct");
static_assert(sizeof(FPaperDialogueMultiParaStruct) == 0x000018, "Wrong size on FPaperDialogueMultiParaStruct");
static_assert(offsetof(FPaperDialogueMultiParaStruct, ConditionPurpose) == 0x000000, "Member 'FPaperDialogueMultiParaStruct::ConditionPurpose' has a wrong offset!");
static_assert(offsetof(FPaperDialogueMultiParaStruct, StructParameterList) == 0x000008, "Member 'FPaperDialogueMultiParaStruct::StructParameterList' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueDataTableStruct
// 0x0028 (0x0030 - 0x0008)
struct FPaperDialogueDataTableStruct final : public FTableRowBase
{
public:
	EPaperDialogueLanguage                        Language;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        DataTableAsset;                                    // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueDataTableStruct) == 0x000008, "Wrong alignment on FPaperDialogueDataTableStruct");
static_assert(sizeof(FPaperDialogueDataTableStruct) == 0x000030, "Wrong size on FPaperDialogueDataTableStruct");
static_assert(offsetof(FPaperDialogueDataTableStruct, Language) == 0x000008, "Member 'FPaperDialogueDataTableStruct::Language' has a wrong offset!");
static_assert(offsetof(FPaperDialogueDataTableStruct, DataTableAsset) == 0x000010, "Member 'FPaperDialogueDataTableStruct::DataTableAsset' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueLocalizationMappingStruct
// 0x0048 (0x0050 - 0x0008)
struct FPaperDialogueLocalizationMappingStruct final : public FTableRowBase
{
public:
	EPaperDialogueLanguage                        Language;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        StringList;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        VoiceoverList;                                     // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueLocalizationMappingStruct) == 0x000008, "Wrong alignment on FPaperDialogueLocalizationMappingStruct");
static_assert(sizeof(FPaperDialogueLocalizationMappingStruct) == 0x000050, "Wrong size on FPaperDialogueLocalizationMappingStruct");
static_assert(offsetof(FPaperDialogueLocalizationMappingStruct, Language) == 0x000008, "Member 'FPaperDialogueLocalizationMappingStruct::Language' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLocalizationMappingStruct, StringList) == 0x000010, "Member 'FPaperDialogueLocalizationMappingStruct::StringList' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLocalizationMappingStruct, VoiceoverList) == 0x000030, "Member 'FPaperDialogueLocalizationMappingStruct::VoiceoverList' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueLineGroupStruct
// 0x0018 (0x0020 - 0x0008)
struct FPaperDialogueLineGroupStruct final : public FTableRowBase
{
public:
	class FName                                   DialogueLineGroupKey;                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           DialogueLineID;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueLineGroupStruct) == 0x000008, "Wrong alignment on FPaperDialogueLineGroupStruct");
static_assert(sizeof(FPaperDialogueLineGroupStruct) == 0x000020, "Wrong size on FPaperDialogueLineGroupStruct");
static_assert(offsetof(FPaperDialogueLineGroupStruct, DialogueLineGroupKey) == 0x000008, "Member 'FPaperDialogueLineGroupStruct::DialogueLineGroupKey' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLineGroupStruct, DialogueLineID) == 0x000010, "Member 'FPaperDialogueLineGroupStruct::DialogueLineID' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueCharacterSlotDetail
// 0x0080 (0x0080 - 0x0000)
struct FDialogueCharacterSlotDetail final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarName;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPrimaryDataAsset>       AvatarDataAsset;                                   // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PreviewActor;                                      // 0x0048(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FixTemplate;                                       // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueCharacterSlotDetail) == 0x000008, "Wrong alignment on FDialogueCharacterSlotDetail");
static_assert(sizeof(FDialogueCharacterSlotDetail) == 0x000080, "Wrong size on FDialogueCharacterSlotDetail");
static_assert(offsetof(FDialogueCharacterSlotDetail, ActorName) == 0x000000, "Member 'FDialogueCharacterSlotDetail::ActorName' has a wrong offset!");
static_assert(offsetof(FDialogueCharacterSlotDetail, AvatarName) == 0x000010, "Member 'FDialogueCharacterSlotDetail::AvatarName' has a wrong offset!");
static_assert(offsetof(FDialogueCharacterSlotDetail, AvatarDataAsset) == 0x000020, "Member 'FDialogueCharacterSlotDetail::AvatarDataAsset' has a wrong offset!");
static_assert(offsetof(FDialogueCharacterSlotDetail, PreviewActor) == 0x000048, "Member 'FDialogueCharacterSlotDetail::PreviewActor' has a wrong offset!");
static_assert(offsetof(FDialogueCharacterSlotDetail, SlotIndex) == 0x000070, "Member 'FDialogueCharacterSlotDetail::SlotIndex' has a wrong offset!");
static_assert(offsetof(FDialogueCharacterSlotDetail, FixTemplate) == 0x000074, "Member 'FDialogueCharacterSlotDetail::FixTemplate' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueStringListStruct
// 0x0018 (0x0020 - 0x0008)
struct FPaperDialogueStringListStruct final : public FTableRowBase
{
public:
	class FName                                   StringID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueStringListStruct) == 0x000008, "Wrong alignment on FPaperDialogueStringListStruct");
static_assert(sizeof(FPaperDialogueStringListStruct) == 0x000020, "Wrong size on FPaperDialogueStringListStruct");
static_assert(offsetof(FPaperDialogueStringListStruct, StringID) == 0x000008, "Member 'FPaperDialogueStringListStruct::StringID' has a wrong offset!");
static_assert(offsetof(FPaperDialogueStringListStruct, Text) == 0x000010, "Member 'FPaperDialogueStringListStruct::Text' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueVoiceListStruct
// 0x0028 (0x0030 - 0x0008)
struct FPaperDialogueVoiceListStruct final : public FTableRowBase
{
public:
	class FName                                   VoiceoverID;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        VoiceoverAsset;                                    // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueVoiceListStruct) == 0x000008, "Wrong alignment on FPaperDialogueVoiceListStruct");
static_assert(sizeof(FPaperDialogueVoiceListStruct) == 0x000030, "Wrong size on FPaperDialogueVoiceListStruct");
static_assert(offsetof(FPaperDialogueVoiceListStruct, VoiceoverID) == 0x000008, "Member 'FPaperDialogueVoiceListStruct::VoiceoverID' has a wrong offset!");
static_assert(offsetof(FPaperDialogueVoiceListStruct, VoiceoverAsset) == 0x000010, "Member 'FPaperDialogueVoiceListStruct::VoiceoverAsset' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueLineListStruct
// 0x0028 (0x0030 - 0x0008)
struct FPaperDialogueLineListStruct final : public FTableRowBase
{
public:
	class FName                                   DialogueLineID;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SpeakerTag;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPaperDialogueVoiceType                       VoiceType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StringID;                                          // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceoverID;                                       // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueLineListStruct) == 0x000008, "Wrong alignment on FPaperDialogueLineListStruct");
static_assert(sizeof(FPaperDialogueLineListStruct) == 0x000030, "Wrong size on FPaperDialogueLineListStruct");
static_assert(offsetof(FPaperDialogueLineListStruct, DialogueLineID) == 0x000008, "Member 'FPaperDialogueLineListStruct::DialogueLineID' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLineListStruct, SpeakerTag) == 0x000010, "Member 'FPaperDialogueLineListStruct::SpeakerTag' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLineListStruct, VoiceType) == 0x000018, "Member 'FPaperDialogueLineListStruct::VoiceType' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLineListStruct, StringID) == 0x00001C, "Member 'FPaperDialogueLineListStruct::StringID' has a wrong offset!");
static_assert(offsetof(FPaperDialogueLineListStruct, VoiceoverID) == 0x000024, "Member 'FPaperDialogueLineListStruct::VoiceoverID' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueChoiceGroupStruct
// 0x0018 (0x0020 - 0x0008)
struct FPaperDialogueChoiceGroupStruct final : public FTableRowBase
{
public:
	class FName                                   DialogueChoiceGroupKey;                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ChoiceLineID;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueChoiceGroupStruct) == 0x000008, "Wrong alignment on FPaperDialogueChoiceGroupStruct");
static_assert(sizeof(FPaperDialogueChoiceGroupStruct) == 0x000020, "Wrong size on FPaperDialogueChoiceGroupStruct");
static_assert(offsetof(FPaperDialogueChoiceGroupStruct, DialogueChoiceGroupKey) == 0x000008, "Member 'FPaperDialogueChoiceGroupStruct::DialogueChoiceGroupKey' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceGroupStruct, ChoiceLineID) == 0x000010, "Member 'FPaperDialogueChoiceGroupStruct::ChoiceLineID' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueChoiceLineConfig
// 0x0078 (0x0078 - 0x0000)
struct FPaperDialogueChoiceLineConfig final
{
public:
	int64                                         UId;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Group;                                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ChoiceIcon;                                        // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DialogueLineID;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ChoiceStringText;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsConditionChoice;                                // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperDialogueMultiParaStruct          ConditionData;                                     // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UPCDInstancedProvider*                  PCDInstancedProvider;                              // 0x0068(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLinkedOutputNode;                               // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueChoiceLineConfig) == 0x000008, "Wrong alignment on FPaperDialogueChoiceLineConfig");
static_assert(sizeof(FPaperDialogueChoiceLineConfig) == 0x000078, "Wrong size on FPaperDialogueChoiceLineConfig");
static_assert(offsetof(FPaperDialogueChoiceLineConfig, UId) == 0x000000, "Member 'FPaperDialogueChoiceLineConfig::UId' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineConfig, Group) == 0x000008, "Member 'FPaperDialogueChoiceLineConfig::Group' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineConfig, ChoiceIcon) == 0x000010, "Member 'FPaperDialogueChoiceLineConfig::ChoiceIcon' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineConfig, DialogueLineID) == 0x000030, "Member 'FPaperDialogueChoiceLineConfig::DialogueLineID' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineConfig, ChoiceStringText) == 0x000038, "Member 'FPaperDialogueChoiceLineConfig::ChoiceStringText' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineConfig, bIsConditionChoice) == 0x000048, "Member 'FPaperDialogueChoiceLineConfig::bIsConditionChoice' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineConfig, ConditionData) == 0x000050, "Member 'FPaperDialogueChoiceLineConfig::ConditionData' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineConfig, PCDInstancedProvider) == 0x000068, "Member 'FPaperDialogueChoiceLineConfig::PCDInstancedProvider' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineConfig, bIsLinkedOutputNode) == 0x000070, "Member 'FPaperDialogueChoiceLineConfig::bIsLinkedOutputNode' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueChoiceLineStruct
// 0x0048 (0x0050 - 0x0008)
struct FPaperDialogueChoiceLineStruct final : public FTableRowBase
{
public:
	class FName                                   ChoiceLineID;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Group;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ChoiceIcon;                                        // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DialogueLineID;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ChoiceLineString;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueChoiceLineStruct) == 0x000008, "Wrong alignment on FPaperDialogueChoiceLineStruct");
static_assert(sizeof(FPaperDialogueChoiceLineStruct) == 0x000050, "Wrong size on FPaperDialogueChoiceLineStruct");
static_assert(offsetof(FPaperDialogueChoiceLineStruct, ChoiceLineID) == 0x000008, "Member 'FPaperDialogueChoiceLineStruct::ChoiceLineID' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineStruct, Group) == 0x000010, "Member 'FPaperDialogueChoiceLineStruct::Group' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineStruct, ChoiceIcon) == 0x000018, "Member 'FPaperDialogueChoiceLineStruct::ChoiceIcon' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineStruct, DialogueLineID) == 0x000038, "Member 'FPaperDialogueChoiceLineStruct::DialogueLineID' has a wrong offset!");
static_assert(offsetof(FPaperDialogueChoiceLineStruct, ChoiceLineString) == 0x000040, "Member 'FPaperDialogueChoiceLineStruct::ChoiceLineString' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueCameraFixTemplateStruct
// 0x0048 (0x0050 - 0x0008)
struct FPaperDialogueCameraFixTemplateStruct final : public FTableRowBase
{
public:
	class FName                                   FixTemplate;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationFix;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  RotationFix;                                       // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueCameraFixTemplateStruct) == 0x000010, "Wrong alignment on FPaperDialogueCameraFixTemplateStruct");
static_assert(sizeof(FPaperDialogueCameraFixTemplateStruct) == 0x000050, "Wrong size on FPaperDialogueCameraFixTemplateStruct");
static_assert(offsetof(FPaperDialogueCameraFixTemplateStruct, FixTemplate) == 0x000008, "Member 'FPaperDialogueCameraFixTemplateStruct::FixTemplate' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCameraFixTemplateStruct, LocationFix) == 0x000010, "Member 'FPaperDialogueCameraFixTemplateStruct::LocationFix' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCameraFixTemplateStruct, RotationFix) == 0x000030, "Member 'FPaperDialogueCameraFixTemplateStruct::RotationFix' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperEdGraphDialogueNodeEditorInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FPaperEdGraphDialogueNodeEditorInfo final
{
public:
	class FName                                   SpeakerTag;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StringID;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0010(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   TextDescription;                                   // 0x0020(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FName                                   VoiceoverID;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIs3DAudioType;                                    // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        VoiceoverAsset;                                    // 0x0040(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        RobotVoiceoverAsset;                               // 0x0060(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TempNameTitleId;                                   // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationTime;                                      // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        AnimMontage;                                       // 0x0090(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperEdGraphDialogueNodeEditorInfo) == 0x000008, "Wrong alignment on FPaperEdGraphDialogueNodeEditorInfo");
static_assert(sizeof(FPaperEdGraphDialogueNodeEditorInfo) == 0x0000B0, "Wrong size on FPaperEdGraphDialogueNodeEditorInfo");
static_assert(offsetof(FPaperEdGraphDialogueNodeEditorInfo, SpeakerTag) == 0x000000, "Member 'FPaperEdGraphDialogueNodeEditorInfo::SpeakerTag' has a wrong offset!");
static_assert(offsetof(FPaperEdGraphDialogueNodeEditorInfo, StringID) == 0x000008, "Member 'FPaperEdGraphDialogueNodeEditorInfo::StringID' has a wrong offset!");
static_assert(offsetof(FPaperEdGraphDialogueNodeEditorInfo, Text) == 0x000010, "Member 'FPaperEdGraphDialogueNodeEditorInfo::Text' has a wrong offset!");
static_assert(offsetof(FPaperEdGraphDialogueNodeEditorInfo, TextDescription) == 0x000020, "Member 'FPaperEdGraphDialogueNodeEditorInfo::TextDescription' has a wrong offset!");
static_assert(offsetof(FPaperEdGraphDialogueNodeEditorInfo, VoiceoverID) == 0x000030, "Member 'FPaperEdGraphDialogueNodeEditorInfo::VoiceoverID' has a wrong offset!");
static_assert(offsetof(FPaperEdGraphDialogueNodeEditorInfo, bIs3DAudioType) == 0x000038, "Member 'FPaperEdGraphDialogueNodeEditorInfo::bIs3DAudioType' has a wrong offset!");
static_assert(offsetof(FPaperEdGraphDialogueNodeEditorInfo, VoiceoverAsset) == 0x000040, "Member 'FPaperEdGraphDialogueNodeEditorInfo::VoiceoverAsset' has a wrong offset!");
static_assert(offsetof(FPaperEdGraphDialogueNodeEditorInfo, RobotVoiceoverAsset) == 0x000060, "Member 'FPaperEdGraphDialogueNodeEditorInfo::RobotVoiceoverAsset' has a wrong offset!");
static_assert(offsetof(FPaperEdGraphDialogueNodeEditorInfo, TempNameTitleId) == 0x000080, "Member 'FPaperEdGraphDialogueNodeEditorInfo::TempNameTitleId' has a wrong offset!");
static_assert(offsetof(FPaperEdGraphDialogueNodeEditorInfo, DurationTime) == 0x000088, "Member 'FPaperEdGraphDialogueNodeEditorInfo::DurationTime' has a wrong offset!");
static_assert(offsetof(FPaperEdGraphDialogueNodeEditorInfo, AnimMontage) == 0x000090, "Member 'FPaperEdGraphDialogueNodeEditorInfo::AnimMontage' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueInternalData
// 0x0020 (0x0020 - 0x0000)
struct FDialogueInternalData final
{
public:
	struct FSoftObjectPath                        AnimMontage;                                       // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueInternalData) == 0x000008, "Wrong alignment on FDialogueInternalData");
static_assert(sizeof(FDialogueInternalData) == 0x000020, "Wrong size on FDialogueInternalData");
static_assert(offsetof(FDialogueInternalData, AnimMontage) == 0x000000, "Member 'FDialogueInternalData::AnimMontage' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationSetUpStateStruct
// 0x0003 (0x0003 - 0x0000)
struct FPaperDialogueGenerationSetUpStateStruct final
{
public:
	uint8                                         bGenerateFade : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateFullBodyTrack : 1;                        // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateIdleTrack : 1;                            // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateShotEffectTracks : 1;                     // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateCameras : 1;                              // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateAnimationTracks : 1;                      // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateCustomTracks : 1;                         // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateLightTracks : 1;                          // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateLookAtTracks : 1;                         // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCharacterNameableTracks : 1;                      // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateTransformTracks : 1;                      // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateWalkInAndOutTracks : 1;                   // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCorrectRootMotionTransformTracks : 1;             // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateCameraShakeTracks : 1;                    // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenerateHighHeelTracks : 1;                       // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bResimulationTracks : 1;                           // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGestureTracks : 1;                                // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUnifiedAnimTracks : 1;                            // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEmotionTracks : 1;                                // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FPaperDialogueGenerationSetUpStateStruct) == 0x000001, "Wrong alignment on FPaperDialogueGenerationSetUpStateStruct");
static_assert(sizeof(FPaperDialogueGenerationSetUpStateStruct) == 0x000003, "Wrong size on FPaperDialogueGenerationSetUpStateStruct");

// ScriptStruct PaperDialogue.PCDAIAnimationMotionMatchingLineParamNetData
// 0x0078 (0x0078 - 0x0000)
struct FPCDAIAnimationMotionMatchingLineParamNetData final
{
public:
	double                                        word_nums_per_sec;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        words_min_interval_duration;                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        word_acoustic_weight;                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        word_concept_weight;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        local_anim_duration_weight;                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        local_anim_pitch_weight;                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        local_anim_handedness_weight;                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         local_matching_cand_anim_num;                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        global_anim_overlap_weight;                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        global_anim_repeat_nums_weight;                    // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        global_anim_time_bias_weight;                      // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        global_anim_max_speed_diff_weight;                 // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        relative_local_weight;                             // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        relative_global_weight;                            // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          random_flag;                                       // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPCDAIAnimationMotionMatchingLineParamNetData) == 0x000008, "Wrong alignment on FPCDAIAnimationMotionMatchingLineParamNetData");
static_assert(sizeof(FPCDAIAnimationMotionMatchingLineParamNetData) == 0x000078, "Wrong size on FPCDAIAnimationMotionMatchingLineParamNetData");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, word_nums_per_sec) == 0x000000, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::word_nums_per_sec' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, words_min_interval_duration) == 0x000008, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::words_min_interval_duration' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, word_acoustic_weight) == 0x000010, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::word_acoustic_weight' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, word_concept_weight) == 0x000018, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::word_concept_weight' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, local_anim_duration_weight) == 0x000020, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::local_anim_duration_weight' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, local_anim_pitch_weight) == 0x000028, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::local_anim_pitch_weight' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, local_anim_handedness_weight) == 0x000030, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::local_anim_handedness_weight' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, local_matching_cand_anim_num) == 0x000038, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::local_matching_cand_anim_num' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, global_anim_overlap_weight) == 0x000040, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::global_anim_overlap_weight' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, global_anim_repeat_nums_weight) == 0x000048, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::global_anim_repeat_nums_weight' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, global_anim_time_bias_weight) == 0x000050, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::global_anim_time_bias_weight' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, global_anim_max_speed_diff_weight) == 0x000058, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::global_anim_max_speed_diff_weight' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, relative_local_weight) == 0x000060, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::relative_local_weight' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, relative_global_weight) == 0x000068, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::relative_global_weight' has a wrong offset!");
static_assert(offsetof(FPCDAIAnimationMotionMatchingLineParamNetData, random_flag) == 0x000070, "Member 'FPCDAIAnimationMotionMatchingLineParamNetData::random_flag' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueGenerationAIAnimationStruct
// 0x0058 (0x0058 - 0x0000)
struct FPaperDialogueGenerationAIAnimationStruct final
{
public:
	uint8                                         bAutoSetAnimationSectionEaseInOut : 1;             // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        AIAnimationConfigDataTableAsset;                   // 0x0008(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TrackAndSlotNames;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 EaseInPropertyName;                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EaseOutPropertyName;                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueGenerationAIAnimationStruct) == 0x000008, "Wrong alignment on FPaperDialogueGenerationAIAnimationStruct");
static_assert(sizeof(FPaperDialogueGenerationAIAnimationStruct) == 0x000058, "Wrong size on FPaperDialogueGenerationAIAnimationStruct");
static_assert(offsetof(FPaperDialogueGenerationAIAnimationStruct, AIAnimationConfigDataTableAsset) == 0x000008, "Member 'FPaperDialogueGenerationAIAnimationStruct::AIAnimationConfigDataTableAsset' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationAIAnimationStruct, TrackAndSlotNames) == 0x000028, "Member 'FPaperDialogueGenerationAIAnimationStruct::TrackAndSlotNames' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationAIAnimationStruct, EaseInPropertyName) == 0x000038, "Member 'FPaperDialogueGenerationAIAnimationStruct::EaseInPropertyName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueGenerationAIAnimationStruct, EaseOutPropertyName) == 0x000048, "Member 'FPaperDialogueGenerationAIAnimationStruct::EaseOutPropertyName' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperDialogueStageTextStruct
// 0x0018 (0x0020 - 0x0008)
struct FPaperDialogueStageTextStruct final : public FTableRowBase
{
public:
	class FName                                   StringID;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDialogueStageTextStruct) == 0x000008, "Wrong alignment on FPaperDialogueStageTextStruct");
static_assert(sizeof(FPaperDialogueStageTextStruct) == 0x000020, "Wrong size on FPaperDialogueStageTextStruct");
static_assert(offsetof(FPaperDialogueStageTextStruct, StringID) == 0x000008, "Member 'FPaperDialogueStageTextStruct::StringID' has a wrong offset!");
static_assert(offsetof(FPaperDialogueStageTextStruct, Text) == 0x000010, "Member 'FPaperDialogueStageTextStruct::Text' has a wrong offset!");

// ScriptStruct PaperDialogue.DialogueStageAutomaticConfig
// 0x000D (0x000D - 0x0000)
struct FDialogueStageAutomaticConfig final
{
public:
	bool                                          bAutoConnection;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoAlign;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateCameras;                              // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateAnimTracks;                           // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateCustomTracks;                         // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateLightTracks;                          // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateLookAtTracks;                         // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateCharacterNameableTracks;              // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateCameraShakeTracks;                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateHighHeelTracks;                       // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateResimulationTracks;                   // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateEmotionTracks;                        // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoGenerateTransformTracks;                      // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueStageAutomaticConfig) == 0x000001, "Wrong alignment on FDialogueStageAutomaticConfig");
static_assert(sizeof(FDialogueStageAutomaticConfig) == 0x00000D, "Wrong size on FDialogueStageAutomaticConfig");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoConnection) == 0x000000, "Member 'FDialogueStageAutomaticConfig::bAutoConnection' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoAlign) == 0x000001, "Member 'FDialogueStageAutomaticConfig::bAutoAlign' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoGenerateCameras) == 0x000002, "Member 'FDialogueStageAutomaticConfig::bAutoGenerateCameras' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoGenerateAnimTracks) == 0x000003, "Member 'FDialogueStageAutomaticConfig::bAutoGenerateAnimTracks' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoGenerateCustomTracks) == 0x000004, "Member 'FDialogueStageAutomaticConfig::bAutoGenerateCustomTracks' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoGenerateLightTracks) == 0x000005, "Member 'FDialogueStageAutomaticConfig::bAutoGenerateLightTracks' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoGenerateLookAtTracks) == 0x000006, "Member 'FDialogueStageAutomaticConfig::bAutoGenerateLookAtTracks' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoGenerateCharacterNameableTracks) == 0x000007, "Member 'FDialogueStageAutomaticConfig::bAutoGenerateCharacterNameableTracks' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoGenerateCameraShakeTracks) == 0x000008, "Member 'FDialogueStageAutomaticConfig::bAutoGenerateCameraShakeTracks' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoGenerateHighHeelTracks) == 0x000009, "Member 'FDialogueStageAutomaticConfig::bAutoGenerateHighHeelTracks' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoGenerateResimulationTracks) == 0x00000A, "Member 'FDialogueStageAutomaticConfig::bAutoGenerateResimulationTracks' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoGenerateEmotionTracks) == 0x00000B, "Member 'FDialogueStageAutomaticConfig::bAutoGenerateEmotionTracks' has a wrong offset!");
static_assert(offsetof(FDialogueStageAutomaticConfig, bAutoGenerateTransformTracks) == 0x00000C, "Member 'FDialogueStageAutomaticConfig::bAutoGenerateTransformTracks' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperEdGraphSchemaAction_NewNode
// 0x0008 (0x00E8 - 0x00E0)
struct FPaperEdGraphSchemaAction_NewNode final : public FEdGraphSchemaAction
{
public:
	class UClass*                                 NodeClass;                                         // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperEdGraphSchemaAction_NewNode) == 0x000008, "Wrong alignment on FPaperEdGraphSchemaAction_NewNode");
static_assert(sizeof(FPaperEdGraphSchemaAction_NewNode) == 0x0000E8, "Wrong size on FPaperEdGraphSchemaAction_NewNode");
static_assert(offsetof(FPaperEdGraphSchemaAction_NewNode, NodeClass) == 0x0000E0, "Member 'FPaperEdGraphSchemaAction_NewNode::NodeClass' has a wrong offset!");

// ScriptStruct PaperDialogue.PaperFlowGraphSchemaAction_NewComment
// 0x0000 (0x00E0 - 0x00E0)
struct FPaperFlowGraphSchemaAction_NewComment final : public FEdGraphSchemaAction
{
};
static_assert(alignof(FPaperFlowGraphSchemaAction_NewComment) == 0x000008, "Wrong alignment on FPaperFlowGraphSchemaAction_NewComment");
static_assert(sizeof(FPaperFlowGraphSchemaAction_NewComment) == 0x0000E0, "Wrong size on FPaperFlowGraphSchemaAction_NewComment");

}

