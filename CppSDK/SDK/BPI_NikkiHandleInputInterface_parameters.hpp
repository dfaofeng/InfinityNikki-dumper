#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NikkiHandleInputInterface

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EInputDeviceKeyType_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.BPI_OnCharacterMovementModeChanged
// 0x0004 (0x0004 - 0x0000)
struct BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged final
{
public:
	EMovementMode                                 PrevMovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 NewMovementMode;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PrevCustomMode;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewCustomMode;                                     // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged) == 0x000001, "Wrong alignment on BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged");
static_assert(sizeof(BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged) == 0x000004, "Wrong size on BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged, PrevMovementMode) == 0x000000, "Member 'BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged, NewMovementMode) == 0x000001, "Member 'BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged::NewMovementMode' has a wrong offset!");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged, PrevCustomMode) == 0x000002, "Member 'BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged::PrevCustomMode' has a wrong offset!");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged, NewCustomMode) == 0x000003, "Member 'BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged::NewCustomMode' has a wrong offset!");

// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.BPI_OnRotateCameraInput
// 0x0020 (0x0020 - 0x0000)
struct BPI_NikkiHandleInputInterface_C_BPI_OnRotateCameraInput final
{
public:
	struct FVector                                InputVector;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDeviceKeyType                           DeviceType;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NikkiHandleInputInterface_C_BPI_OnRotateCameraInput) == 0x000008, "Wrong alignment on BPI_NikkiHandleInputInterface_C_BPI_OnRotateCameraInput");
static_assert(sizeof(BPI_NikkiHandleInputInterface_C_BPI_OnRotateCameraInput) == 0x000020, "Wrong size on BPI_NikkiHandleInputInterface_C_BPI_OnRotateCameraInput");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_BPI_OnRotateCameraInput, InputVector) == 0x000000, "Member 'BPI_NikkiHandleInputInterface_C_BPI_OnRotateCameraInput::InputVector' has a wrong offset!");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_BPI_OnRotateCameraInput, DeviceType) == 0x000018, "Member 'BPI_NikkiHandleInputInterface_C_BPI_OnRotateCameraInput::DeviceType' has a wrong offset!");

// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.BPI_OnSelfControlledByPlayer
// 0x0008 (0x0008 - 0x0000)
struct BPI_NikkiHandleInputInterface_C_BPI_OnSelfControlledByPlayer final
{
public:
	class APawn*                                  PlayerPawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NikkiHandleInputInterface_C_BPI_OnSelfControlledByPlayer) == 0x000008, "Wrong alignment on BPI_NikkiHandleInputInterface_C_BPI_OnSelfControlledByPlayer");
static_assert(sizeof(BPI_NikkiHandleInputInterface_C_BPI_OnSelfControlledByPlayer) == 0x000008, "Wrong size on BPI_NikkiHandleInputInterface_C_BPI_OnSelfControlledByPlayer");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_BPI_OnSelfControlledByPlayer, PlayerPawn) == 0x000000, "Member 'BPI_NikkiHandleInputInterface_C_BPI_OnSelfControlledByPlayer::PlayerPawn' has a wrong offset!");

// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.BPI_SetPlayerToControlActor
// 0x0010 (0x0010 - 0x0000)
struct BPI_NikkiHandleInputInterface_C_BPI_SetPlayerToControlActor final
{
public:
	class AActor*                                 ActorToControl;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Controlled;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NikkiHandleInputInterface_C_BPI_SetPlayerToControlActor) == 0x000008, "Wrong alignment on BPI_NikkiHandleInputInterface_C_BPI_SetPlayerToControlActor");
static_assert(sizeof(BPI_NikkiHandleInputInterface_C_BPI_SetPlayerToControlActor) == 0x000010, "Wrong size on BPI_NikkiHandleInputInterface_C_BPI_SetPlayerToControlActor");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_BPI_SetPlayerToControlActor, ActorToControl) == 0x000000, "Member 'BPI_NikkiHandleInputInterface_C_BPI_SetPlayerToControlActor::ActorToControl' has a wrong offset!");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_BPI_SetPlayerToControlActor, Controlled) == 0x000008, "Member 'BPI_NikkiHandleInputInterface_C_BPI_SetPlayerToControlActor::Controlled' has a wrong offset!");

// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.InputAction_Crash
// 0x0001 (0x0001 - 0x0000)
struct BPI_NikkiHandleInputInterface_C_InputAction_Crash final
{
public:
	bool                                          PressedOrRelease;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NikkiHandleInputInterface_C_InputAction_Crash) == 0x000001, "Wrong alignment on BPI_NikkiHandleInputInterface_C_InputAction_Crash");
static_assert(sizeof(BPI_NikkiHandleInputInterface_C_InputAction_Crash) == 0x000001, "Wrong size on BPI_NikkiHandleInputInterface_C_InputAction_Crash");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_InputAction_Crash, PressedOrRelease) == 0x000000, "Member 'BPI_NikkiHandleInputInterface_C_InputAction_Crash::PressedOrRelease' has a wrong offset!");

// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.InputAction_Jump
// 0x0001 (0x0001 - 0x0000)
struct BPI_NikkiHandleInputInterface_C_InputAction_Jump final
{
public:
	bool                                          PressedOrRelease;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NikkiHandleInputInterface_C_InputAction_Jump) == 0x000001, "Wrong alignment on BPI_NikkiHandleInputInterface_C_InputAction_Jump");
static_assert(sizeof(BPI_NikkiHandleInputInterface_C_InputAction_Jump) == 0x000001, "Wrong size on BPI_NikkiHandleInputInterface_C_InputAction_Jump");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_InputAction_Jump, PressedOrRelease) == 0x000000, "Member 'BPI_NikkiHandleInputInterface_C_InputAction_Jump::PressedOrRelease' has a wrong offset!");

// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.InputAction_Sprint
// 0x0001 (0x0001 - 0x0000)
struct BPI_NikkiHandleInputInterface_C_InputAction_Sprint final
{
public:
	bool                                          PressedOrRelease;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NikkiHandleInputInterface_C_InputAction_Sprint) == 0x000001, "Wrong alignment on BPI_NikkiHandleInputInterface_C_InputAction_Sprint");
static_assert(sizeof(BPI_NikkiHandleInputInterface_C_InputAction_Sprint) == 0x000001, "Wrong size on BPI_NikkiHandleInputInterface_C_InputAction_Sprint");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_InputAction_Sprint, PressedOrRelease) == 0x000000, "Member 'BPI_NikkiHandleInputInterface_C_InputAction_Sprint::PressedOrRelease' has a wrong offset!");

// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.InputAction_Walk
// 0x0001 (0x0001 - 0x0000)
struct BPI_NikkiHandleInputInterface_C_InputAction_Walk final
{
public:
	bool                                          PressOrRelease;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NikkiHandleInputInterface_C_InputAction_Walk) == 0x000001, "Wrong alignment on BPI_NikkiHandleInputInterface_C_InputAction_Walk");
static_assert(sizeof(BPI_NikkiHandleInputInterface_C_InputAction_Walk) == 0x000001, "Wrong size on BPI_NikkiHandleInputInterface_C_InputAction_Walk");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_InputAction_Walk, PressOrRelease) == 0x000000, "Member 'BPI_NikkiHandleInputInterface_C_InputAction_Walk::PressOrRelease' has a wrong offset!");

// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.OnMovementMoveXAxisAction
// 0x0008 (0x0008 - 0x0000)
struct BPI_NikkiHandleInputInterface_C_OnMovementMoveXAxisAction final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NikkiHandleInputInterface_C_OnMovementMoveXAxisAction) == 0x000008, "Wrong alignment on BPI_NikkiHandleInputInterface_C_OnMovementMoveXAxisAction");
static_assert(sizeof(BPI_NikkiHandleInputInterface_C_OnMovementMoveXAxisAction) == 0x000008, "Wrong size on BPI_NikkiHandleInputInterface_C_OnMovementMoveXAxisAction");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_OnMovementMoveXAxisAction, AxisValue) == 0x000000, "Member 'BPI_NikkiHandleInputInterface_C_OnMovementMoveXAxisAction::AxisValue' has a wrong offset!");

// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.OnMovementMoveYAxisAction
// 0x0008 (0x0008 - 0x0000)
struct BPI_NikkiHandleInputInterface_C_OnMovementMoveYAxisAction final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_NikkiHandleInputInterface_C_OnMovementMoveYAxisAction) == 0x000008, "Wrong alignment on BPI_NikkiHandleInputInterface_C_OnMovementMoveYAxisAction");
static_assert(sizeof(BPI_NikkiHandleInputInterface_C_OnMovementMoveYAxisAction) == 0x000008, "Wrong size on BPI_NikkiHandleInputInterface_C_OnMovementMoveYAxisAction");
static_assert(offsetof(BPI_NikkiHandleInputInterface_C_OnMovementMoveYAxisAction, AxisValue) == 0x000000, "Member 'BPI_NikkiHandleInputInterface_C_OnMovementMoveYAxisAction::AxisValue' has a wrong offset!");

}

