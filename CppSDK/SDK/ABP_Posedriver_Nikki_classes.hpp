#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Posedriver_Nikki

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ABP_Posedriver_Nikki_structs.hpp"
#include "ControlRig_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Posedriver_Nikki.ABP_Posedriver_Nikki_C
// 0x0D50 (0x1120 - 0x03D0)
class UABP_Posedriver_Nikki_C final : public UAnimInstance
{
public:
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Posedriver_Nikki::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;         // 0x03D8(0x0002)(HasGetValueTypeHash)
	uint8                                         Pad_3DA[0x6];                                      // 0x03DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x03E0(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x03E8(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x03F0(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x0410(0x00B8)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x04C8(0x04D0)(ContainsInstancedReference)
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0998(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0A60(0x0048)()
	struct FAnimNode_PoseSnapshot                 AnimGraphNode_PoseSnapshot;                        // 0x0AA8(0x0090)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0B38(0x00F0)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0C28(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0C70(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0CF0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0D18(0x0028)()
	struct FAnimNode_PoseDriver                   AnimGraphNode_PoseDriver_1;                        // 0x0D40(0x01A0)()
	struct FAnimNode_PoseDriver                   AnimGraphNode_PoseDriver;                          // 0x0EE0(0x01A0)()
	bool                                          __CustomProperty_EnableMaxAnkleAngleLimit_61ABA5D1480C62376C0168862A58046D; // 0x1080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1081[0x7];                                     // 0x1081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        __CustomProperty_HighHeel_Height_61ABA5D1480C62376C0168862A58046D; // 0x1088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_HighHeel_Toe_Angle_61ABA5D1480C62376C0168862A58046D; // 0x1090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_HighHeel_Ankle_Angle_61ABA5D1480C62376C0168862A58046D; // 0x1098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerAnimStatesComponent_C*        AnimStateComponent;                                // 0x10A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        HighHeel_Ankle_Angle;                              // 0x10A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HighHeel_Toe_Angle;                                // 0x10B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HighHeel_Height;                                   // 0x10B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      AntiClipping_AdditivePose;                         // 0x10C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AntiClipping_Alpha;                                // 0x10C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInPreventInter;                                  // 0x10D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTakePhoto;                                        // 0x10D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableMaxAnkleAngleLimit;                          // 0x10D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D3[0x5];                                     // 0x10D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSnapshot                          SavedPoseSnapshot;                                 // 0x10D8(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	ESnapshotSourceMode                           PhotographSnapshotMode;                            // 0x1110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(const struct FPoseLink& InPose, struct FPoseLink* AnimGraph_0);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Posedriver_Nikki_AnimGraphNode_ApplyAdditive_6C4E9B8344A77BED8EBBEDAD0249298C();
	void ExecuteUbergraph_ABP_Posedriver_Nikki(int32 EntryPoint);
	void UpdateAntiClippingAlpha();
	void UpdateEnableMaxAnkleAngleLimit();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Posedriver_Nikki_C">();
	}
	static class UABP_Posedriver_Nikki_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Posedriver_Nikki_C>();
	}
};
static_assert(alignof(UABP_Posedriver_Nikki_C) == 0x000010, "Wrong alignment on UABP_Posedriver_Nikki_C");
static_assert(sizeof(UABP_Posedriver_Nikki_C) == 0x001120, "Wrong size on UABP_Posedriver_Nikki_C");
static_assert(offsetof(UABP_Posedriver_Nikki_C, UberGraphFrame) == 0x0003D0, "Member 'UABP_Posedriver_Nikki_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, __AnimBlueprintMutables) == 0x0003D8, "Member 'UABP_Posedriver_Nikki_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimBlueprintExtension_PropertyAccess) == 0x0003E0, "Member 'UABP_Posedriver_Nikki_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimBlueprintExtension_Base) == 0x0003E8, "Member 'UABP_Posedriver_Nikki_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_Root) == 0x0003F0, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_LinkedInputPose) == 0x000410, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_ControlRig) == 0x0004C8, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_ApplyAdditive) == 0x000998, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_SequencePlayer) == 0x000A60, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_PoseSnapshot) == 0x000AA8, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_PoseSnapshot' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_LayeredBoneBlend) == 0x000B38, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_BlendListByBool) == 0x000C28, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_SaveCachedPose) == 0x000C70, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_UseCachedPose_1) == 0x000CF0, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_UseCachedPose) == 0x000D18, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_PoseDriver_1) == 0x000D40, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_PoseDriver_1' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimGraphNode_PoseDriver) == 0x000EE0, "Member 'UABP_Posedriver_Nikki_C::AnimGraphNode_PoseDriver' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, __CustomProperty_EnableMaxAnkleAngleLimit_61ABA5D1480C62376C0168862A58046D) == 0x001080, "Member 'UABP_Posedriver_Nikki_C::__CustomProperty_EnableMaxAnkleAngleLimit_61ABA5D1480C62376C0168862A58046D' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, __CustomProperty_HighHeel_Height_61ABA5D1480C62376C0168862A58046D) == 0x001088, "Member 'UABP_Posedriver_Nikki_C::__CustomProperty_HighHeel_Height_61ABA5D1480C62376C0168862A58046D' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, __CustomProperty_HighHeel_Toe_Angle_61ABA5D1480C62376C0168862A58046D) == 0x001090, "Member 'UABP_Posedriver_Nikki_C::__CustomProperty_HighHeel_Toe_Angle_61ABA5D1480C62376C0168862A58046D' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, __CustomProperty_HighHeel_Ankle_Angle_61ABA5D1480C62376C0168862A58046D) == 0x001098, "Member 'UABP_Posedriver_Nikki_C::__CustomProperty_HighHeel_Ankle_Angle_61ABA5D1480C62376C0168862A58046D' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AnimStateComponent) == 0x0010A0, "Member 'UABP_Posedriver_Nikki_C::AnimStateComponent' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, HighHeel_Ankle_Angle) == 0x0010A8, "Member 'UABP_Posedriver_Nikki_C::HighHeel_Ankle_Angle' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, HighHeel_Toe_Angle) == 0x0010B0, "Member 'UABP_Posedriver_Nikki_C::HighHeel_Toe_Angle' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, HighHeel_Height) == 0x0010B8, "Member 'UABP_Posedriver_Nikki_C::HighHeel_Height' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AntiClipping_AdditivePose) == 0x0010C0, "Member 'UABP_Posedriver_Nikki_C::AntiClipping_AdditivePose' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, AntiClipping_Alpha) == 0x0010C8, "Member 'UABP_Posedriver_Nikki_C::AntiClipping_Alpha' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, IsInPreventInter) == 0x0010D0, "Member 'UABP_Posedriver_Nikki_C::IsInPreventInter' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, bTakePhoto) == 0x0010D1, "Member 'UABP_Posedriver_Nikki_C::bTakePhoto' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, EnableMaxAnkleAngleLimit) == 0x0010D2, "Member 'UABP_Posedriver_Nikki_C::EnableMaxAnkleAngleLimit' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, SavedPoseSnapshot) == 0x0010D8, "Member 'UABP_Posedriver_Nikki_C::SavedPoseSnapshot' has a wrong offset!");
static_assert(offsetof(UABP_Posedriver_Nikki_C, PhotographSnapshotMode) == 0x001110, "Member 'UABP_Posedriver_Nikki_C::PhotographSnapshotMode' has a wrong offset!");

}

