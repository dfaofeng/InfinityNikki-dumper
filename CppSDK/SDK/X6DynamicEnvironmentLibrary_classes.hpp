#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6DynamicEnvironmentLibrary

#include "Basic.hpp"

#include "Enum_FunctionalAtmosphereType_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_WeatherIntensity_structs.hpp"
#include "Enum_WindDirection_structs.hpp"
#include "Enum_WindIntensity_structs.hpp"
#include "Enum_TemperatureBodyType_structs.hpp"
#include "Enum_WeatherType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UX6DynamicEnvironmentLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void UpdateWeatherInternal(class UObject* Context, const struct FS_WeatherState& weatherParams, class UObject* __WorldContext);
	static void UpdateWeather(class UObject* Context, const class FString& WeatherName, bool Immediate, int32 DayNight, int32 Intensity, double TransitionTime, double StartBlendAlpha, class UObject* __WorldContext);
	static void ToggleStreetLamps(class UObject* Context, bool On, class UObject* __WorldContext);
	static void TODLevelBeginPlay(class UObject* Context, class UObject* __WorldContext, struct FTimeStamp* TimeConfigInfo);
	static void SetWindForce(const struct FLinearColor& Force, class UObject* __WorldContext);
	static void SetWindCfg(const struct FWeatherBaseLerpConfig& cfg, class UObject* __WorldContext);
	static void SetWeatherCfg(const struct FWeatherBaseLerpConfig& cfg, class UObject* __WorldContext);
	static void SetRegionLampsPercent(class UObject* Context, double Percent, class UObject* __WorldContext);
	static void ResumeWind(class UObject* Context, class UObject* __WorldContext);
	static void GetWindIntensity(class UObject* Context, class UObject* __WorldContext, Enum_WindIntensity* Intensity);
	static void GetWindForce(class UObject* __WorldContext, struct FLinearColor* Force);
	static void GetWindDirectionVec(class UObject* Context, class UObject* __WorldContext, struct FVector* Direction);
	static void GetWindDirection(class UObject* Context, class UObject* __WorldContext, Enum_WindDirection* WindDirection);
	static void GetWeatherType(class UObject* Context, class UObject* __WorldContext, Enum_WeatherType* WeatherType);
	static void GetWeatherIntensity(class UObject* Context, class UObject* __WorldContext, Enum_WeatherIntensity* Intensity);
	static void GetNikkiBodyTemperatureType(class UObject* Context, class UObject* __WorldContext, Enum_TemperatureBodyType* Type);
	static void GetEnvTemperature(class UObject* Context, class UObject* __WorldContext, int32* Temperature);
	static void CheckUseServerTime(class UObject* Context, class UObject* __WorldContext);
	static void ChangeWindLocal(class UObject* Context, Enum_WindDirection WindDirection, Enum_WindIntensity windIntensity, class UObject* __WorldContext);
	static void ChangeWeatherLocal(class UObject* Context, Enum_WeatherType WeatherType, Enum_WeatherType WeatherIntensity, bool Immediate, double TransitionTime, class UObject* __WorldContext);
	static void ChangeFunctionalAtmosphereForScene(Enum_FunctionalAtmosphereType Type, bool atOnce, double TransitionTime, class UObject* __WorldContext);
	static void Change_Weather_Local_by_Name(class UObject* Context, const class FString& WeatherName, Enum_WeatherIntensity WeatherIntensity, bool Immediate, double TransitionTime, class UObject* __WorldContext);
	static void CancelFunctionalAtmosphereForScene(bool atOnce, double TransitionTime, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"X6DynamicEnvironmentLibrary_C">();
	}
	static class UX6DynamicEnvironmentLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6DynamicEnvironmentLibrary_C>();
	}
};
static_assert(alignof(UX6DynamicEnvironmentLibrary_C) == 0x000008, "Wrong alignment on UX6DynamicEnvironmentLibrary_C");
static_assert(sizeof(UX6DynamicEnvironmentLibrary_C) == 0x000028, "Wrong size on UX6DynamicEnvironmentLibrary_C");

}

