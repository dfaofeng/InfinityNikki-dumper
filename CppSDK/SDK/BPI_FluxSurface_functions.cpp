#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_FluxSurface

#include "Basic.hpp"

#include "BPI_FluxSurface_classes.hpp"
#include "BPI_FluxSurface_parameters.hpp"


namespace SDK
{

// Function BPI_FluxSurface.BPI_FluxSurface_C.ApplyColorProfiles
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_FluxSurface_C::ApplyColorProfiles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxSurface_C", "ApplyColorProfiles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_FluxSurface.BPI_FluxSurface_C.ApplyMask
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_FluxSurface_C::ApplyMask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxSurface_C", "ApplyMask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_FluxSurface.BPI_FluxSurface_C.ApplyPainter
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_FluxSurface_C::ApplyPainter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxSurface_C", "ApplyPainter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_FluxSurface.BPI_FluxSurface_C.ApplySurfaceMaterialData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class UMaterialInstanceDynamic*>&Materials                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void IBPI_FluxSurface_C::ApplySurfaceMaterialData(const TArray<class UMaterialInstanceDynamic*>& Materials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxSurface_C", "ApplySurfaceMaterialData");

	Params::BPI_FluxSurface_C_ApplySurfaceMaterialData Parms{};

	Parms.Materials = std::move(Materials);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_FluxSurface.BPI_FluxSurface_C.ApplySurfaceNiagaraData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNiagaraComponent*                ParticleSystem                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    RequiredGround                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RequiredWave                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_FluxSurface_C::ApplySurfaceNiagaraData(class UNiagaraComponent* ParticleSystem, bool RequiredGround, bool RequiredWave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxSurface_C", "ApplySurfaceNiagaraData");

	Params::BPI_FluxSurface_C_ApplySurfaceNiagaraData Parms{};

	Parms.ParticleSystem = ParticleSystem;
	Parms.RequiredGround = RequiredGround;
	Parms.RequiredWave = RequiredWave;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_FluxSurface.BPI_FluxSurface_C.InitializeAllStates
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_FluxSurface_C::InitializeAllStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxSurface_C", "InitializeAllStates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_FluxSurface.BPI_FluxSurface_C.SetCoastlineState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPDA_FluxCoastlineState_C*        State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_FluxSurface_C::SetCoastlineState(class UPDA_FluxCoastlineState_C* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxSurface_C", "SetCoastlineState");

	Params::BPI_FluxSurface_C_SetCoastlineState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_FluxSurface.BPI_FluxSurface_C.SetSimulationState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPDA_FluxSimulationState_C*       State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_FluxSurface_C::SetSimulationState(class UPDA_FluxSimulationState_C* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxSurface_C", "SetSimulationState");

	Params::BPI_FluxSurface_C_SetSimulationState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_FluxSurface.BPI_FluxSurface_C.SetStateHeightWetMap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture*                         Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_FluxSurface_C::SetStateHeightWetMap(class UTexture* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxSurface_C", "SetStateHeightWetMap");

	Params::BPI_FluxSurface_C_SetStateHeightWetMap Parms{};

	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_FluxSurface.BPI_FluxSurface_C.SpawnSplashAtLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_FluxSurface_C::SpawnSplashAtLocation(const struct FVector& Location, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxSurface_C", "SpawnSplashAtLocation");

	Params::BPI_FluxSurface_C_SpawnSplashAtLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_FluxSurface.BPI_FluxSurface_C.GetVolumeCollision
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UPrimitiveComponent**             Volume                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_FluxSurface_C::GetVolumeCollision(class UPrimitiveComponent** Volume) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_FluxSurface_C", "GetVolumeCollision");

	Params::BPI_FluxSurface_C_GetVolumeCollision Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Volume != nullptr)
		*Volume = Parms.Volume;
}

}

