#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StarSeaDust

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "EStarSeaDust_Type_structs.hpp"
#include "X6Game_classes.hpp"
#include "E_InteractionProcess_structs.hpp"
#include "X6StateMachine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_StarSeaDust.BP_StarSeaDust_C
// 0x01A8 (0x05E0 - 0x0438)
class ABP_StarSeaDust_C final : public AX6Actor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0438(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Niagara_Collect;                                   // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_HandleInteractionLogic_C*           BP_HandleInteractionLogic;                         // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStarSeaObject_StateMachine_C*          StarSeaObject_StateMachine;                        // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractiveActorComponent_C*        BP_InteractiveActorComponent;                      // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       InteractiveCollision;                              // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Dust;                                              // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnCollectDispatcher;                               // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EStarSeaDust_Type                             MeshType;                                          // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SphereRadius;                                      // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaSeconds;                                      // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlyUp;                                            // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlyUpTime;                                         // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ForceSuccessTime;                               // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_FlyDelayTime;                                   // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ForceSuccessTimerHandle;                           // 0x04C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FlyUpStartLoc;                                     // 0x04D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E8[0x8];                                      // 0x04E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurveTransform;                                    // 0x04F0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_FlyStartSpeed;                                  // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentFlySpeed;                                   // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_FlyAccelerateSpeed;                             // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaDistance;                                     // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerDistanceVec;                                 // 0x0570(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ForceInteractDistanceSquared;                   // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           FlyUpCurve;                                        // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0598(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<EStarSeaDust_Type>                     EnumArr;                                           // 0x05B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bMoving;                                           // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceSuccess;                                     // 0x05C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C2[0x2];                                      // 0x05C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      GlimmerCombine;                                    // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_StarSeaDustCombine_C*               StarSeaCombine;                                    // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_StarSeaDust_BP_InteractiveActorComponent_K2Node_ComponentBoundEvent_2_ActiveInteractive__DelegateSignature(E_InteractionProcess Process, int64 InteractMasterNetID, class AActor* InteractMasterActor, bool IsPressBtnInteraction, class AActor* InteractedActor, class UBP_InterAction_State_C* InterAction_State);
	void BndEvt__BP_StarSeaDust_Niagara_Collect_K2Node_ComponentBoundEvent_1_OnNiagaraSystemFinished__DelegateSignature(class UNiagaraComponent* PSystem);
	void BndEvt__BP_StarSeaDust_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BP_ForceInteractSuccess();
	void BP_IsArriveAtPlayer(bool* isArrive);
	void BP_NotifySpawned();
	void BP_OnOtherCollect();
	void BP_OnSelfCollect();
	void BP_StartFly();
	void BP_UpdateActorLocationOnCurve();
	void BP_UpdateLocation(double DeltaTime);
	void BP_UpdateMesh();
	void BP_UpdateMeshAndRotation();
	void ExecuteUbergraph_BP_StarSeaDust(int32 EntryPoint);
	void RandomRotAndType();
	void ReceiveTick(float DeltaSeconds_0);
	void ServerInit(bool bServer);
	void UserConstructionScript();

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StarSeaDust_C">();
	}
	static class ABP_StarSeaDust_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_StarSeaDust_C>();
	}
};
static_assert(alignof(ABP_StarSeaDust_C) == 0x000010, "Wrong alignment on ABP_StarSeaDust_C");
static_assert(sizeof(ABP_StarSeaDust_C) == 0x0005E0, "Wrong size on ABP_StarSeaDust_C");
static_assert(offsetof(ABP_StarSeaDust_C, UberGraphFrame) == 0x000438, "Member 'ABP_StarSeaDust_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, Niagara_Collect) == 0x000440, "Member 'ABP_StarSeaDust_C::Niagara_Collect' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, Niagara) == 0x000448, "Member 'ABP_StarSeaDust_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, BP_HandleInteractionLogic) == 0x000450, "Member 'ABP_StarSeaDust_C::BP_HandleInteractionLogic' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, StarSeaObject_StateMachine) == 0x000458, "Member 'ABP_StarSeaDust_C::StarSeaObject_StateMachine' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, Sphere) == 0x000460, "Member 'ABP_StarSeaDust_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, BP_InteractiveActorComponent) == 0x000468, "Member 'ABP_StarSeaDust_C::BP_InteractiveActorComponent' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, InteractiveCollision) == 0x000470, "Member 'ABP_StarSeaDust_C::InteractiveCollision' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, Dust) == 0x000478, "Member 'ABP_StarSeaDust_C::Dust' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, OnCollectDispatcher) == 0x000480, "Member 'ABP_StarSeaDust_C::OnCollectDispatcher' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, MeshType) == 0x000490, "Member 'ABP_StarSeaDust_C::MeshType' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, SphereRadius) == 0x000498, "Member 'ABP_StarSeaDust_C::SphereRadius' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, DeltaSeconds) == 0x0004A0, "Member 'ABP_StarSeaDust_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, bFlyUp) == 0x0004A8, "Member 'ABP_StarSeaDust_C::bFlyUp' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, FlyUpTime) == 0x0004B0, "Member 'ABP_StarSeaDust_C::FlyUpTime' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, BP_ForceSuccessTime) == 0x0004B8, "Member 'ABP_StarSeaDust_C::BP_ForceSuccessTime' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, BP_FlyDelayTime) == 0x0004C0, "Member 'ABP_StarSeaDust_C::BP_FlyDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, ForceSuccessTimerHandle) == 0x0004C8, "Member 'ABP_StarSeaDust_C::ForceSuccessTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, FlyUpStartLoc) == 0x0004D0, "Member 'ABP_StarSeaDust_C::FlyUpStartLoc' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, CurveTransform) == 0x0004F0, "Member 'ABP_StarSeaDust_C::CurveTransform' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, BP_FlyStartSpeed) == 0x000550, "Member 'ABP_StarSeaDust_C::BP_FlyStartSpeed' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, CurrentFlySpeed) == 0x000558, "Member 'ABP_StarSeaDust_C::CurrentFlySpeed' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, BP_FlyAccelerateSpeed) == 0x000560, "Member 'ABP_StarSeaDust_C::BP_FlyAccelerateSpeed' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, DeltaDistance) == 0x000568, "Member 'ABP_StarSeaDust_C::DeltaDistance' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, PlayerDistanceVec) == 0x000570, "Member 'ABP_StarSeaDust_C::PlayerDistanceVec' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, BP_ForceInteractDistanceSquared) == 0x000588, "Member 'ABP_StarSeaDust_C::BP_ForceInteractDistanceSquared' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, FlyUpCurve) == 0x000590, "Member 'ABP_StarSeaDust_C::FlyUpCurve' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, Rotation) == 0x000598, "Member 'ABP_StarSeaDust_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, EnumArr) == 0x0005B0, "Member 'ABP_StarSeaDust_C::EnumArr' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, bMoving) == 0x0005C0, "Member 'ABP_StarSeaDust_C::bMoving' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, bForceSuccess) == 0x0005C1, "Member 'ABP_StarSeaDust_C::bForceSuccess' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, ID) == 0x0005C4, "Member 'ABP_StarSeaDust_C::ID' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, GlimmerCombine) == 0x0005C8, "Member 'ABP_StarSeaDust_C::GlimmerCombine' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaDust_C, StarSeaCombine) == 0x0005D0, "Member 'ABP_StarSeaDust_C::StarSeaCombine' has a wrong offset!");

}

