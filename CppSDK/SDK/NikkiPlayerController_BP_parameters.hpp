#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NikkiPlayerController_BP

#include "Basic.hpp"


namespace SDK::Params
{

// Function NikkiPlayerController_BP.NikkiPlayerController_BP_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct NikkiPlayerController_BP_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NikkiPlayerController_BP_C_ReceiveTick) == 0x000004, "Wrong alignment on NikkiPlayerController_BP_C_ReceiveTick");
static_assert(sizeof(NikkiPlayerController_BP_C_ReceiveTick) == 0x000004, "Wrong size on NikkiPlayerController_BP_C_ReceiveTick");
static_assert(offsetof(NikkiPlayerController_BP_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'NikkiPlayerController_BP_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function NikkiPlayerController_BP.NikkiPlayerController_BP_C.ReceivePossess
// 0x0008 (0x0008 - 0x0000)
struct NikkiPlayerController_BP_C_ReceivePossess final
{
public:
	class APawn*                                  PossessedPawn;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NikkiPlayerController_BP_C_ReceivePossess) == 0x000008, "Wrong alignment on NikkiPlayerController_BP_C_ReceivePossess");
static_assert(sizeof(NikkiPlayerController_BP_C_ReceivePossess) == 0x000008, "Wrong size on NikkiPlayerController_BP_C_ReceivePossess");
static_assert(offsetof(NikkiPlayerController_BP_C_ReceivePossess, PossessedPawn) == 0x000000, "Member 'NikkiPlayerController_BP_C_ReceivePossess::PossessedPawn' has a wrong offset!");

// Function NikkiPlayerController_BP.NikkiPlayerController_BP_C.GetActiveDlgStatus
// 0x0003 (0x0003 - 0x0000)
struct NikkiPlayerController_BP_C_GetActiveDlgStatus final
{
public:
	bool                                          Is_Any_Dialogue_Active;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Need_Player_Movement_Lock;                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NikkiPlayerController_BP_C_GetActiveDlgStatus) == 0x000001, "Wrong alignment on NikkiPlayerController_BP_C_GetActiveDlgStatus");
static_assert(sizeof(NikkiPlayerController_BP_C_GetActiveDlgStatus) == 0x000003, "Wrong size on NikkiPlayerController_BP_C_GetActiveDlgStatus");
static_assert(offsetof(NikkiPlayerController_BP_C_GetActiveDlgStatus, Is_Any_Dialogue_Active) == 0x000000, "Member 'NikkiPlayerController_BP_C_GetActiveDlgStatus::Is_Any_Dialogue_Active' has a wrong offset!");
static_assert(offsetof(NikkiPlayerController_BP_C_GetActiveDlgStatus, Need_Player_Movement_Lock) == 0x000001, "Member 'NikkiPlayerController_BP_C_GetActiveDlgStatus::Need_Player_Movement_Lock' has a wrong offset!");
static_assert(offsetof(NikkiPlayerController_BP_C_GetActiveDlgStatus, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'NikkiPlayerController_BP_C_GetActiveDlgStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function NikkiPlayerController_BP.NikkiPlayerController_BP_C.ExecuteUbergraph_NikkiPlayerController_BP
// 0x0018 (0x0018 - 0x0000)
struct NikkiPlayerController_BP_C_ExecuteUbergraph_NikkiPlayerController_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_PossessedPawn;                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NikkiPlayerController_BP_C_ExecuteUbergraph_NikkiPlayerController_BP) == 0x000008, "Wrong alignment on NikkiPlayerController_BP_C_ExecuteUbergraph_NikkiPlayerController_BP");
static_assert(sizeof(NikkiPlayerController_BP_C_ExecuteUbergraph_NikkiPlayerController_BP) == 0x000018, "Wrong size on NikkiPlayerController_BP_C_ExecuteUbergraph_NikkiPlayerController_BP");
static_assert(offsetof(NikkiPlayerController_BP_C_ExecuteUbergraph_NikkiPlayerController_BP, EntryPoint) == 0x000000, "Member 'NikkiPlayerController_BP_C_ExecuteUbergraph_NikkiPlayerController_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(NikkiPlayerController_BP_C_ExecuteUbergraph_NikkiPlayerController_BP, K2Node_Event_PossessedPawn) == 0x000008, "Member 'NikkiPlayerController_BP_C_ExecuteUbergraph_NikkiPlayerController_BP::K2Node_Event_PossessedPawn' has a wrong offset!");
static_assert(offsetof(NikkiPlayerController_BP_C_ExecuteUbergraph_NikkiPlayerController_BP, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'NikkiPlayerController_BP_C_ExecuteUbergraph_NikkiPlayerController_BP::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function NikkiPlayerController_BP.NikkiPlayerController_BP_C.Debug_SwitchDamiaoPossess
// 0x0001 (0x0001 - 0x0000)
struct NikkiPlayerController_BP_C_Debug_SwitchDamiaoPossess final
{
public:
	bool                                          bDamiaoPossessed;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NikkiPlayerController_BP_C_Debug_SwitchDamiaoPossess) == 0x000001, "Wrong alignment on NikkiPlayerController_BP_C_Debug_SwitchDamiaoPossess");
static_assert(sizeof(NikkiPlayerController_BP_C_Debug_SwitchDamiaoPossess) == 0x000001, "Wrong size on NikkiPlayerController_BP_C_Debug_SwitchDamiaoPossess");
static_assert(offsetof(NikkiPlayerController_BP_C_Debug_SwitchDamiaoPossess, bDamiaoPossessed) == 0x000000, "Member 'NikkiPlayerController_BP_C_Debug_SwitchDamiaoPossess::bDamiaoPossessed' has a wrong offset!");

// Function NikkiPlayerController_BP.NikkiPlayerController_BP_C.BP_Private_OnPawnPossess
// 0x0008 (0x0008 - 0x0000)
struct NikkiPlayerController_BP_C_BP_Private_OnPawnPossess final
{
public:
	class APawn*                                  Pawn_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NikkiPlayerController_BP_C_BP_Private_OnPawnPossess) == 0x000008, "Wrong alignment on NikkiPlayerController_BP_C_BP_Private_OnPawnPossess");
static_assert(sizeof(NikkiPlayerController_BP_C_BP_Private_OnPawnPossess) == 0x000008, "Wrong size on NikkiPlayerController_BP_C_BP_Private_OnPawnPossess");
static_assert(offsetof(NikkiPlayerController_BP_C_BP_Private_OnPawnPossess, Pawn_0) == 0x000000, "Member 'NikkiPlayerController_BP_C_BP_Private_OnPawnPossess::Pawn_0' has a wrong offset!");

// Function NikkiPlayerController_BP.NikkiPlayerController_BP_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct NikkiPlayerController_BP_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(NikkiPlayerController_BP_C_GetModuleName) == 0x000008, "Wrong alignment on NikkiPlayerController_BP_C_GetModuleName");
static_assert(sizeof(NikkiPlayerController_BP_C_GetModuleName) == 0x000010, "Wrong size on NikkiPlayerController_BP_C_GetModuleName");
static_assert(offsetof(NikkiPlayerController_BP_C_GetModuleName, ReturnValue) == 0x000000, "Member 'NikkiPlayerController_BP_C_GetModuleName::ReturnValue' has a wrong offset!");

}

