#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MiniGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_MiniGame.BP_MiniGame_C.SyncLocation
// 0x0130 (0x0130 - 0x0000)
struct BP_MiniGame_C_SyncLocation final
{
public:
	class ACharacter*                             CallFunc_GetLocalPlayerPawn_LocalPlayerPawn;       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetTimeSeconds_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0030(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_SyncLocation) == 0x000008, "Wrong alignment on BP_MiniGame_C_SyncLocation");
static_assert(sizeof(BP_MiniGame_C_SyncLocation) == 0x000130, "Wrong size on BP_MiniGame_C_SyncLocation");
static_assert(offsetof(BP_MiniGame_C_SyncLocation, CallFunc_GetLocalPlayerPawn_LocalPlayerPawn) == 0x000000, "Member 'BP_MiniGame_C_SyncLocation::CallFunc_GetLocalPlayerPawn_LocalPlayerPawn' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_SyncLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_MiniGame_C_SyncLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_SyncLocation, CallFunc_GetTimeSeconds_ReturnValue) == 0x000020, "Member 'BP_MiniGame_C_SyncLocation::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_SyncLocation, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_MiniGame_C_SyncLocation::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_SyncLocation, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000030, "Member 'BP_MiniGame_C_SyncLocation::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_SyncLocation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000128, "Member 'BP_MiniGame_C_SyncLocation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.SetInRestart
// 0x0001 (0x0001 - 0x0000)
struct BP_MiniGame_C_SetInRestart final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_SetInRestart) == 0x000001, "Wrong alignment on BP_MiniGame_C_SetInRestart");
static_assert(sizeof(BP_MiniGame_C_SetInRestart) == 0x000001, "Wrong size on BP_MiniGame_C_SetInRestart");
static_assert(offsetof(BP_MiniGame_C_SetInRestart, State) == 0x000000, "Member 'BP_MiniGame_C_SetInRestart::State' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_MiniGame_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_MiniGame_C_ReceiveTick");
static_assert(sizeof(BP_MiniGame_C_ReceiveTick) == 0x000004, "Wrong size on BP_MiniGame_C_ReceiveTick");
static_assert(offsetof(BP_MiniGame_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_MiniGame_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_MiniGame_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_MiniGame_C_ReceiveEndPlay");
static_assert(sizeof(BP_MiniGame_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_MiniGame_C_ReceiveEndPlay");
static_assert(offsetof(BP_MiniGame_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_MiniGame_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.OnSpawnFinished_A54188144860CD3130B1879F6F97432E
// 0x0018 (0x0018 - 0x0000)
struct BP_MiniGame_C_OnSpawnFinished_A54188144860CD3130B1879F6F97432E final
{
public:
	TArray<class AActor*>                         ReturnActor;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int64                                         SpawnerGroupID;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_OnSpawnFinished_A54188144860CD3130B1879F6F97432E) == 0x000008, "Wrong alignment on BP_MiniGame_C_OnSpawnFinished_A54188144860CD3130B1879F6F97432E");
static_assert(sizeof(BP_MiniGame_C_OnSpawnFinished_A54188144860CD3130B1879F6F97432E) == 0x000018, "Wrong size on BP_MiniGame_C_OnSpawnFinished_A54188144860CD3130B1879F6F97432E");
static_assert(offsetof(BP_MiniGame_C_OnSpawnFinished_A54188144860CD3130B1879F6F97432E, ReturnActor) == 0x000000, "Member 'BP_MiniGame_C_OnSpawnFinished_A54188144860CD3130B1879F6F97432E::ReturnActor' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_OnSpawnFinished_A54188144860CD3130B1879F6F97432E, SpawnerGroupID) == 0x000010, "Member 'BP_MiniGame_C_OnSpawnFinished_A54188144860CD3130B1879F6F97432E::SpawnerGroupID' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.OnDeactiveSpawnerGroup_FB03D3184DD49DD6237125A20B652FE2
// 0x0010 (0x0010 - 0x0000)
struct BP_MiniGame_C_OnDeactiveSpawnerGroup_FB03D3184DD49DD6237125A20B652FE2 final
{
public:
	bool                                          IsSuccess;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SpawnerGroupID;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_OnDeactiveSpawnerGroup_FB03D3184DD49DD6237125A20B652FE2) == 0x000008, "Wrong alignment on BP_MiniGame_C_OnDeactiveSpawnerGroup_FB03D3184DD49DD6237125A20B652FE2");
static_assert(sizeof(BP_MiniGame_C_OnDeactiveSpawnerGroup_FB03D3184DD49DD6237125A20B652FE2) == 0x000010, "Wrong size on BP_MiniGame_C_OnDeactiveSpawnerGroup_FB03D3184DD49DD6237125A20B652FE2");
static_assert(offsetof(BP_MiniGame_C_OnDeactiveSpawnerGroup_FB03D3184DD49DD6237125A20B652FE2, IsSuccess) == 0x000000, "Member 'BP_MiniGame_C_OnDeactiveSpawnerGroup_FB03D3184DD49DD6237125A20B652FE2::IsSuccess' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_OnDeactiveSpawnerGroup_FB03D3184DD49DD6237125A20B652FE2, SpawnerGroupID) == 0x000008, "Member 'BP_MiniGame_C_OnDeactiveSpawnerGroup_FB03D3184DD49DD6237125A20B652FE2::SpawnerGroupID' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.OnDeactiveSpawnerGroup_33B6663B49CC633B7D787981678F6280
// 0x0010 (0x0010 - 0x0000)
struct BP_MiniGame_C_OnDeactiveSpawnerGroup_33B6663B49CC633B7D787981678F6280 final
{
public:
	bool                                          IsSuccess;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SpawnerGroupID;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_OnDeactiveSpawnerGroup_33B6663B49CC633B7D787981678F6280) == 0x000008, "Wrong alignment on BP_MiniGame_C_OnDeactiveSpawnerGroup_33B6663B49CC633B7D787981678F6280");
static_assert(sizeof(BP_MiniGame_C_OnDeactiveSpawnerGroup_33B6663B49CC633B7D787981678F6280) == 0x000010, "Wrong size on BP_MiniGame_C_OnDeactiveSpawnerGroup_33B6663B49CC633B7D787981678F6280");
static_assert(offsetof(BP_MiniGame_C_OnDeactiveSpawnerGroup_33B6663B49CC633B7D787981678F6280, IsSuccess) == 0x000000, "Member 'BP_MiniGame_C_OnDeactiveSpawnerGroup_33B6663B49CC633B7D787981678F6280::IsSuccess' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_OnDeactiveSpawnerGroup_33B6663B49CC633B7D787981678F6280, SpawnerGroupID) == 0x000008, "Member 'BP_MiniGame_C_OnDeactiveSpawnerGroup_33B6663B49CC633B7D787981678F6280::SpawnerGroupID' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.OnDeactiveSpawner_79F168B54B47C7613B7F1A80A40E52F7
// 0x0001 (0x0001 - 0x0000)
struct BP_MiniGame_C_OnDeactiveSpawner_79F168B54B47C7613B7F1A80A40E52F7 final
{
public:
	bool                                          IsSuccess;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_OnDeactiveSpawner_79F168B54B47C7613B7F1A80A40E52F7) == 0x000001, "Wrong alignment on BP_MiniGame_C_OnDeactiveSpawner_79F168B54B47C7613B7F1A80A40E52F7");
static_assert(sizeof(BP_MiniGame_C_OnDeactiveSpawner_79F168B54B47C7613B7F1A80A40E52F7) == 0x000001, "Wrong size on BP_MiniGame_C_OnDeactiveSpawner_79F168B54B47C7613B7F1A80A40E52F7");
static_assert(offsetof(BP_MiniGame_C_OnDeactiveSpawner_79F168B54B47C7613B7F1A80A40E52F7, IsSuccess) == 0x000000, "Member 'BP_MiniGame_C_OnDeactiveSpawner_79F168B54B47C7613B7F1A80A40E52F7::IsSuccess' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.IsComplete
// 0x0001 (0x0001 - 0x0000)
struct BP_MiniGame_C_IsComplete final
{
public:
	bool                                          IsComplete_0;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_IsComplete) == 0x000001, "Wrong alignment on BP_MiniGame_C_IsComplete");
static_assert(sizeof(BP_MiniGame_C_IsComplete) == 0x000001, "Wrong size on BP_MiniGame_C_IsComplete");
static_assert(offsetof(BP_MiniGame_C_IsComplete, IsComplete_0) == 0x000000, "Member 'BP_MiniGame_C_IsComplete::IsComplete_0' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.InitGroupInfo
// 0x0008 (0x0008 - 0x0000)
struct BP_MiniGame_C_InitGroupInfo final
{
public:
	int64                                         GroupID_0;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_InitGroupInfo) == 0x000008, "Wrong alignment on BP_MiniGame_C_InitGroupInfo");
static_assert(sizeof(BP_MiniGame_C_InitGroupInfo) == 0x000008, "Wrong size on BP_MiniGame_C_InitGroupInfo");
static_assert(offsetof(BP_MiniGame_C_InitGroupInfo, GroupID_0) == 0x000000, "Member 'BP_MiniGame_C_InitGroupInfo::GroupID_0' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.GetInRestart
// 0x0001 (0x0001 - 0x0000)
struct BP_MiniGame_C_GetInRestart final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_GetInRestart) == 0x000001, "Wrong alignment on BP_MiniGame_C_GetInRestart");
static_assert(sizeof(BP_MiniGame_C_GetInRestart) == 0x000001, "Wrong size on BP_MiniGame_C_GetInRestart");
static_assert(offsetof(BP_MiniGame_C_GetInRestart, State) == 0x000000, "Member 'BP_MiniGame_C_GetInRestart::State' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.ExecuteUbergraph_BP_MiniGame
// 0x00F8 (0x00F8 - 0x0000)
struct BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool IsSuccess)>               K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool IsSuccess, int64 SpawnerGroupID)> K2Node_CreateDelegate_OutputDelegate_1;    // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_CustomEvent_ReturnActor;                    // 0x0028(0x0010)(ReferenceParm)
	int64                                         K2Node_CustomEvent_SpawnerGroupID_2;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_X6AsyncTask_RequestActiveSpawnerGroup_C* CallFunc_SpawnObject_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsSuccess_2;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         K2Node_CustomEvent_SpawnerGroupID_1;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_InovkeAsyncTaskStart_EventName;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsSuccess_1;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_X6AsyncTask_RequestDeactiveSpawnerGroup_C* CallFunc_SpawnObject_ReturnValue_1;         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_InovkeAsyncTaskStart_EventName_1;         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_X6AsyncTask_RequestDeactiveSpawner_C* CallFunc_SpawnObject_ReturnValue_2;              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0080(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_InovkeAsyncTaskStart_EventName_2;         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsSuccess;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         K2Node_CustomEvent_SpawnerGroupID;                 // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_X6AsyncTask_RequestDeactiveSpawnerGroup_C* CallFunc_SpawnObject_ReturnValue_3;         // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_InovkeAsyncTaskStart_EventName_3;         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool IsSuccess, int64 SpawnerGroupID)> K2Node_CreateDelegate_OutputDelegate_3;    // 0x00C0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_Int64Int64_ReturnValue;           // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<class AActor*>& ReturnActor, int64 SpawnerGroupID)> K2Node_CreateDelegate_OutputDelegate_4; // 0x00D4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_BP_GetActorSpawnerID_SpawnerID;           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame) == 0x000008, "Wrong alignment on BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame");
static_assert(sizeof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame) == 0x0000F8, "Wrong size on BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, EntryPoint) == 0x000000, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CustomEvent_ReturnActor) == 0x000028, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CustomEvent_ReturnActor' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CustomEvent_SpawnerGroupID_2) == 0x000038, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CustomEvent_SpawnerGroupID_2' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_SpawnObject_ReturnValue) == 0x000040, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CustomEvent_IsSuccess_2) == 0x000048, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CustomEvent_IsSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CustomEvent_SpawnerGroupID_1) == 0x000050, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CustomEvent_SpawnerGroupID_1' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_InovkeAsyncTaskStart_EventName) == 0x000058, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_InovkeAsyncTaskStart_EventName' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CustomEvent_IsSuccess_1) == 0x000060, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CustomEvent_IsSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_SpawnObject_ReturnValue_1) == 0x000068, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_SpawnObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_InovkeAsyncTaskStart_EventName_1) == 0x000070, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_InovkeAsyncTaskStart_EventName_1' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_SpawnObject_ReturnValue_2) == 0x000078, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_SpawnObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CreateDelegate_OutputDelegate_2) == 0x000080, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_InovkeAsyncTaskStart_EventName_2) == 0x000090, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_InovkeAsyncTaskStart_EventName_2' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000098, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CustomEvent_IsSuccess) == 0x0000A0, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CustomEvent_IsSuccess' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CustomEvent_SpawnerGroupID) == 0x0000A8, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CustomEvent_SpawnerGroupID' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_SpawnObject_ReturnValue_3) == 0x0000B0, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_SpawnObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_InovkeAsyncTaskStart_EventName_3) == 0x0000B8, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_InovkeAsyncTaskStart_EventName_3' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000C0, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_Greater_Int64Int64_ReturnValue) == 0x0000D0, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_Greater_Int64Int64_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000D4, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_BP_GetActorSpawnerID_SpawnerID) == 0x0000E8, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_BP_GetActorSpawnerID_SpawnerID' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_Event_DeltaSeconds) == 0x0000F0, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, CallFunc_BooleanAND_ReturnValue) == 0x0000F4, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame, K2Node_Event_EndPlayReason) == 0x0000F5, "Member 'BP_MiniGame_C_ExecuteUbergraph_BP_MiniGame::K2Node_Event_EndPlayReason' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.CanStartGame
// 0x0001 (0x0001 - 0x0000)
struct BP_MiniGame_C_CanStartGame final
{
public:
	bool                                          CanStart;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_CanStartGame) == 0x000001, "Wrong alignment on BP_MiniGame_C_CanStartGame");
static_assert(sizeof(BP_MiniGame_C_CanStartGame) == 0x000001, "Wrong size on BP_MiniGame_C_CanStartGame");
static_assert(offsetof(BP_MiniGame_C_CanStartGame, CanStart) == 0x000000, "Member 'BP_MiniGame_C_CanStartGame::CanStart' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.BP_PopTip
// 0x0020 (0x0020 - 0x0000)
struct BP_MiniGame_C_BP_PopTip final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 customStr;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          autoHide;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Time;                                              // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_BP_PopTip) == 0x000008, "Wrong alignment on BP_MiniGame_C_BP_PopTip");
static_assert(sizeof(BP_MiniGame_C_BP_PopTip) == 0x000020, "Wrong size on BP_MiniGame_C_BP_PopTip");
static_assert(offsetof(BP_MiniGame_C_BP_PopTip, Type) == 0x000000, "Member 'BP_MiniGame_C_BP_PopTip::Type' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_BP_PopTip, customStr) == 0x000008, "Member 'BP_MiniGame_C_BP_PopTip::customStr' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_BP_PopTip, autoHide) == 0x000018, "Member 'BP_MiniGame_C_BP_PopTip::autoHide' has a wrong offset!");
static_assert(offsetof(BP_MiniGame_C_BP_PopTip, Time) == 0x00001C, "Member 'BP_MiniGame_C_BP_PopTip::Time' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.BP_MiniGameChangeScore
// 0x0004 (0x0004 - 0x0000)
struct BP_MiniGame_C_BP_MiniGameChangeScore final
{
public:
	int32                                         ChangeScore;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_BP_MiniGameChangeScore) == 0x000004, "Wrong alignment on BP_MiniGame_C_BP_MiniGameChangeScore");
static_assert(sizeof(BP_MiniGame_C_BP_MiniGameChangeScore) == 0x000004, "Wrong size on BP_MiniGame_C_BP_MiniGameChangeScore");
static_assert(offsetof(BP_MiniGame_C_BP_MiniGameChangeScore, ChangeScore) == 0x000000, "Member 'BP_MiniGame_C_BP_MiniGameChangeScore::ChangeScore' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.BP_MiniGameChangeGameTime
// 0x0004 (0x0004 - 0x0000)
struct BP_MiniGame_C_BP_MiniGameChangeGameTime final
{
public:
	int32                                         ChangeGameTime;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_BP_MiniGameChangeGameTime) == 0x000004, "Wrong alignment on BP_MiniGame_C_BP_MiniGameChangeGameTime");
static_assert(sizeof(BP_MiniGame_C_BP_MiniGameChangeGameTime) == 0x000004, "Wrong size on BP_MiniGame_C_BP_MiniGameChangeGameTime");
static_assert(offsetof(BP_MiniGame_C_BP_MiniGameChangeGameTime, ChangeGameTime) == 0x000000, "Member 'BP_MiniGame_C_BP_MiniGameChangeGameTime::ChangeGameTime' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.BP_GetGameCostTime
// 0x0008 (0x0008 - 0x0000)
struct BP_MiniGame_C_BP_GetGameCostTime final
{
public:
	double                                        CostTime;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_BP_GetGameCostTime) == 0x000008, "Wrong alignment on BP_MiniGame_C_BP_GetGameCostTime");
static_assert(sizeof(BP_MiniGame_C_BP_GetGameCostTime) == 0x000008, "Wrong size on BP_MiniGame_C_BP_GetGameCostTime");
static_assert(offsetof(BP_MiniGame_C_BP_GetGameCostTime, CostTime) == 0x000000, "Member 'BP_MiniGame_C_BP_GetGameCostTime::CostTime' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.BP_GetBuriedData
// 0x0004 (0x0004 - 0x0000)
struct BP_MiniGame_C_BP_GetBuriedData final
{
public:
	int32                                         OutNumber;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_BP_GetBuriedData) == 0x000004, "Wrong alignment on BP_MiniGame_C_BP_GetBuriedData");
static_assert(sizeof(BP_MiniGame_C_BP_GetBuriedData) == 0x000004, "Wrong size on BP_MiniGame_C_BP_GetBuriedData");
static_assert(offsetof(BP_MiniGame_C_BP_GetBuriedData, OutNumber) == 0x000000, "Member 'BP_MiniGame_C_BP_GetBuriedData::OutNumber' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.BP_EnableMarkerWhiteList
// 0x0010 (0x0010 - 0x0000)
struct BP_MiniGame_C_BP_EnableMarkerWhiteList final
{
public:
	TArray<class UBP_Marker_C*>                   markerCfgIDArray;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_MiniGame_C_BP_EnableMarkerWhiteList) == 0x000008, "Wrong alignment on BP_MiniGame_C_BP_EnableMarkerWhiteList");
static_assert(sizeof(BP_MiniGame_C_BP_EnableMarkerWhiteList) == 0x000010, "Wrong size on BP_MiniGame_C_BP_EnableMarkerWhiteList");
static_assert(offsetof(BP_MiniGame_C_BP_EnableMarkerWhiteList, markerCfgIDArray) == 0x000000, "Member 'BP_MiniGame_C_BP_EnableMarkerWhiteList::markerCfgIDArray' has a wrong offset!");

// Function BP_MiniGame.BP_MiniGame_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_MiniGame_C_GetModuleName final
{
public:
	class FString                                 ReturnValue_0;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_MiniGame_C_GetModuleName) == 0x000008, "Wrong alignment on BP_MiniGame_C_GetModuleName");
static_assert(sizeof(BP_MiniGame_C_GetModuleName) == 0x000010, "Wrong size on BP_MiniGame_C_GetModuleName");
static_assert(offsetof(BP_MiniGame_C_GetModuleName, ReturnValue_0) == 0x000000, "Member 'BP_MiniGame_C_GetModuleName::ReturnValue_0' has a wrong offset!");

}

