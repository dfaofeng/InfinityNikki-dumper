#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SoundAndParticleComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "F_FootstepSurfaceTypeSoundStruct_structs.hpp"
#include "Enum_ShrubEnum_structs.hpp"
#include "X6Game_structs.hpp"
#include "F_FootstepGaitTypeSoundStruct_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.SetVolumeSurfaceTypeValue
// 0x0030 (0x0030 - 0x0000)
struct BP_SoundAndParticleComponent_C_SetVolumeSurfaceTypeValue final
{
public:
	struct FF_FootstepSurfaceTypeSoundStruct      SurfaceTypeValue;                                  // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_SetVolumeSurfaceTypeValue) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_SetVolumeSurfaceTypeValue");
static_assert(sizeof(BP_SoundAndParticleComponent_C_SetVolumeSurfaceTypeValue) == 0x000030, "Wrong size on BP_SoundAndParticleComponent_C_SetVolumeSurfaceTypeValue");
static_assert(offsetof(BP_SoundAndParticleComponent_C_SetVolumeSurfaceTypeValue, SurfaceTypeValue) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_SetVolumeSurfaceTypeValue::SurfaceTypeValue' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.SetIsInFSTSwitchVolume
// 0x0001 (0x0001 - 0x0000)
struct BP_SoundAndParticleComponent_C_SetIsInFSTSwitchVolume final
{
public:
	bool                                          bInFSTSwitchVolume_0;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_SetIsInFSTSwitchVolume) == 0x000001, "Wrong alignment on BP_SoundAndParticleComponent_C_SetIsInFSTSwitchVolume");
static_assert(sizeof(BP_SoundAndParticleComponent_C_SetIsInFSTSwitchVolume) == 0x000001, "Wrong size on BP_SoundAndParticleComponent_C_SetIsInFSTSwitchVolume");
static_assert(offsetof(BP_SoundAndParticleComponent_C_SetIsInFSTSwitchVolume, bInFSTSwitchVolume_0) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_SetIsInFSTSwitchVolume::bInFSTSwitchVolume_0' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.IsInBush
// 0x0002 (0x0002 - 0x0000)
struct BP_SoundAndParticleComponent_C_IsInBush final
{
public:
	bool                                          bInBush_0;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_IsInBush) == 0x000001, "Wrong alignment on BP_SoundAndParticleComponent_C_IsInBush");
static_assert(sizeof(BP_SoundAndParticleComponent_C_IsInBush) == 0x000002, "Wrong size on BP_SoundAndParticleComponent_C_IsInBush");
static_assert(offsetof(BP_SoundAndParticleComponent_C_IsInBush, bInBush_0) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_IsInBush::bInBush_0' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_IsInBush, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'BP_SoundAndParticleComponent_C_IsInBush::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.GetSoftObjectPtrByPath
// 0x00B8 (0x00B8 - 0x0000)
struct BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath final
{
public:
	class FString                                 PathString;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 SWITCH;                                            // 0x0018(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	TSoftObjectPtr<class UAkSwitchValue>          NewLocalVar;                                       // 0x0040(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSoftObjectPath                        CallFunc_MakeSoftObjectPath_ReturnValue;           // 0x0068(0x0020)(ZeroConstructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 CallFunc_Conv_SoftObjPathToSoftObjRef_ReturnValue; // 0x0088(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath");
static_assert(sizeof(BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath) == 0x0000B8, "Wrong size on BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath, PathString) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath::PathString' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath, Found) == 0x000010, "Member 'BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath::Found' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath, SWITCH) == 0x000018, "Member 'BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath::SWITCH' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath, NewLocalVar) == 0x000040, "Member 'BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath::NewLocalVar' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath, CallFunc_MakeSoftObjectPath_ReturnValue) == 0x000068, "Member 'BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath::CallFunc_MakeSoftObjectPath_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath, CallFunc_Conv_SoftObjPathToSoftObjRef_ReturnValue) == 0x000088, "Member 'BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath::CallFunc_Conv_SoftObjPathToSoftObjRef_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x0000B0, "Member 'BP_SoundAndParticleComponent_C_GetSoftObjectPtrByPath::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.GetShrubType
// 0x0009 (0x0009 - 0x0000)
struct BP_SoundAndParticleComponent_C_GetShrubType final
{
public:
	Enum_ShrubEnum                                ShrubType;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBushType                                     Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ShrubEnum                                Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ShrubEnum                                Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ShrubEnum                                Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ShrubEnum                                Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ShrubEnum                                K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_GetShrubType) == 0x000001, "Wrong alignment on BP_SoundAndParticleComponent_C_GetShrubType");
static_assert(sizeof(BP_SoundAndParticleComponent_C_GetShrubType) == 0x000009, "Wrong size on BP_SoundAndParticleComponent_C_GetShrubType");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetShrubType, ShrubType) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_GetShrubType::ShrubType' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetShrubType, Temp_byte_Variable) == 0x000001, "Member 'BP_SoundAndParticleComponent_C_GetShrubType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetShrubType, Temp_byte_Variable_1) == 0x000002, "Member 'BP_SoundAndParticleComponent_C_GetShrubType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetShrubType, Temp_byte_Variable_2) == 0x000003, "Member 'BP_SoundAndParticleComponent_C_GetShrubType::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetShrubType, Temp_byte_Variable_3) == 0x000004, "Member 'BP_SoundAndParticleComponent_C_GetShrubType::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetShrubType, Temp_byte_Variable_4) == 0x000005, "Member 'BP_SoundAndParticleComponent_C_GetShrubType::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetShrubType, CallFunc_GetValidValue_ReturnValue) == 0x000006, "Member 'BP_SoundAndParticleComponent_C_GetShrubType::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetShrubType, K2Node_Select_Default) == 0x000007, "Member 'BP_SoundAndParticleComponent_C_GetShrubType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetShrubType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_GetShrubType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.GetShoeSwitchPath
// 0x0018 (0x0018 - 0x0000)
struct BP_SoundAndParticleComponent_C_GetShoeSwitchPath final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 ShoeSwitchPaths;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_GetShoeSwitchPath) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_GetShoeSwitchPath");
static_assert(sizeof(BP_SoundAndParticleComponent_C_GetShoeSwitchPath) == 0x000018, "Wrong size on BP_SoundAndParticleComponent_C_GetShoeSwitchPath");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetShoeSwitchPath, Comp) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_GetShoeSwitchPath::Comp' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetShoeSwitchPath, ShoeSwitchPaths) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_GetShoeSwitchPath::ShoeSwitchPaths' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.GetFootstepSoundMaterialSwitchPath
// 0x0020 (0x0020 - 0x0000)
struct BP_SoundAndParticleComponent_C_GetFootstepSoundMaterialSwitchPath final
{
public:
	class FString                                 OutMaterialTag;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 OutTypeTag;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_GetFootstepSoundMaterialSwitchPath) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_GetFootstepSoundMaterialSwitchPath");
static_assert(sizeof(BP_SoundAndParticleComponent_C_GetFootstepSoundMaterialSwitchPath) == 0x000020, "Wrong size on BP_SoundAndParticleComponent_C_GetFootstepSoundMaterialSwitchPath");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundMaterialSwitchPath, OutMaterialTag) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundMaterialSwitchPath::OutMaterialTag' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundMaterialSwitchPath, OutTypeTag) == 0x000010, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundMaterialSwitchPath::OutTypeTag' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.GetFootstepSoundGaitSwitch
// 0x0108 (0x0108 - 0x0000)
struct BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch final
{
public:
	class FString                                 InStr;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAkSwitchValue>          DefaultAkSwitch;                                   // 0x0010(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	TSoftObjectPtr<class UAkSwitchValue>          OutAkSwitch;                                       // 0x0038(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	TSoftObjectPtr<class UAkSwitchValue>          FoundAkSwitch;                                     // 0x0060(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x00A8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_FootstepGaitTypeSoundStruct         CallFunc_GetDataTableRowFromName_OutRow;           // 0x00C8(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StriStri_ReturnValue;            // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Contains_ReturnValue;                     // 0x0103(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch");
static_assert(sizeof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch) == 0x000108, "Wrong size on BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, InStr) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::InStr' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, DefaultAkSwitch) == 0x000010, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::DefaultAkSwitch' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, OutAkSwitch) == 0x000038, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::OutAkSwitch' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, FoundAkSwitch) == 0x000060, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::FoundAkSwitch' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, Temp_bool_True_if_break_was_hit_Variable) == 0x000088, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_Not_PreBool_ReturnValue) == 0x000090, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, Temp_int_Loop_Counter_Variable) == 0x000094, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000098, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000A0, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_IsEmpty_ReturnValue) == 0x0000A1, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_GetDataTableRowNames_OutRowNames) == 0x0000A8, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_Array_Get_Item) == 0x0000BC, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_Less_IntInt_ReturnValue) == 0x0000C4, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000C8, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000100, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_BooleanAND_ReturnValue) == 0x000101, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_NotEqual_StriStri_ReturnValue) == 0x000102, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_NotEqual_StriStri_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch, CallFunc_Contains_ReturnValue) == 0x000103, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundGaitSwitch::CallFunc_Contains_ReturnValue' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.GetFootstepSoundFloorSwitch
// 0x01D8 (0x01D8 - 0x0000)
struct BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch final
{
public:
	TSoftObjectPtr<class UAkSwitchValue>          SwitchValue;                                       // 0x0000(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	TSoftObjectPtr<class UAkSwitchValue>          FoundSwitch;                                       // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash)
	EPhysicalSurface                              SurfaceType;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkSwitchValue>          CallFunc_GetSurfaceTypeSwitchValue_ReturnValue;    // 0x0058(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkSwitchValue>          CallFunc_GetSurfaceTypeSwitchValue_ReturnValue_1;  // 0x0088(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetOwnerFloorSurfaceType_OutHitResult;    // 0x00D0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	EPhysicalSurface                              CallFunc_GetOwnerFloorSurfaceType_OutSurfaceType;  // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetOwnerFloorSurfaceType_ReturnValue;     // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CB[0x5];                                      // 0x01CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch");
static_assert(sizeof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch) == 0x0001D8, "Wrong size on BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, SwitchValue) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::SwitchValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, FoundSwitch) == 0x000028, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::FoundSwitch' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, SurfaceType) == 0x000050, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::SurfaceType' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, CallFunc_GetSurfaceTypeSwitchValue_ReturnValue) == 0x000058, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::CallFunc_GetSurfaceTypeSwitchValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000080, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, CallFunc_GetSurfaceTypeSwitchValue_ReturnValue_1) == 0x000088, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::CallFunc_GetSurfaceTypeSwitchValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, CallFunc_GetOwner_ReturnValue) == 0x0000B0, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B8, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, CallFunc_GetOwnerFloorSurfaceType_OutHitResult) == 0x0000D0, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::CallFunc_GetOwnerFloorSurfaceType_OutHitResult' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, CallFunc_GetOwnerFloorSurfaceType_OutSurfaceType) == 0x0001C8, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::CallFunc_GetOwnerFloorSurfaceType_OutSurfaceType' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, CallFunc_GetOwnerFloorSurfaceType_ReturnValue) == 0x0001C9, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::CallFunc_GetOwnerFloorSurfaceType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0001CA, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0001D0, "Member 'BP_SoundAndParticleComponent_C_GetFootstepSoundFloorSwitch::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.CompressPosition
// 0x00E0 (0x00E0 - 0x0000)
struct BP_SoundAndParticleComponent_C_CompressPosition final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Offset_X;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Offset_Y;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Offset_Z;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CompressdPosition;                                 // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_1;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_4;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_2;                      // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_5;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_CompressPosition) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_CompressPosition");
static_assert(sizeof(BP_SoundAndParticleComponent_C_CompressPosition) == 0x0000E0, "Wrong size on BP_SoundAndParticleComponent_C_CompressPosition");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, InPosition) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::InPosition' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, Offset_X) == 0x000018, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::Offset_X' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, Offset_Y) == 0x00001C, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::Offset_Y' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, Offset_Z) == 0x000020, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::Offset_Z' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CompressdPosition) == 0x000028, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CompressdPosition' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_BreakVector_X) == 0x000040, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_BreakVector_Y) == 0x000048, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_BreakVector_Z) == 0x000050, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000058, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000060, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Round_ReturnValue) == 0x000088, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Round_ReturnValue_1) == 0x00008C, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Round_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000090, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x000098, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Conv_IntToDouble_ReturnValue_4) == 0x0000A0, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Conv_IntToDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x0000A8, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x0000B0, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Round_ReturnValue_2) == 0x0000B8, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Round_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_Conv_IntToDouble_ReturnValue_5) == 0x0000C0, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_Conv_IntToDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_CompressPosition, CallFunc_MakeVector_ReturnValue) == 0x0000C8, "Member 'BP_SoundAndParticleComponent_C_CompressPosition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnX6PlayFootstepEffect
// 0x0078 (0x0078 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect final
{
public:
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocationOffset;                                    // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationOffset;                                    // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDestroyImmediately;                               // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttached;                                         // 0x0059(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Duration;                                          // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 RowName;                                           // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect) == 0x000078, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect, MeshComponent) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect::MeshComponent' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect, SocketName) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect::SocketName' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect, LocationOffset) == 0x000010, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect::LocationOffset' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect, RotationOffset) == 0x000028, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect::RotationOffset' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect, Scale) == 0x000040, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect::Scale' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect, bDestroyImmediately) == 0x000058, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect::bDestroyImmediately' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect, bAttached) == 0x000059, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect::bAttached' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect, Duration) == 0x000060, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect::Duration' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect, RowName) == 0x000068, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnX6PlayFootstepEffect::RowName' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnUpdateMaterialEffect
// 0x0010 (0x0010 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnUpdateMaterialEffect final
{
public:
	class UObject*                                NotifyObject;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        FrameDeltaTime;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnUpdateMaterialEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnUpdateMaterialEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnUpdateMaterialEffect) == 0x000010, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnUpdateMaterialEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnUpdateMaterialEffect, NotifyObject) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnUpdateMaterialEffect::NotifyObject' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnUpdateMaterialEffect, FrameDeltaTime) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnUpdateMaterialEffect::FrameDeltaTime' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnRunStepSoundEffectV2
// 0x00F8 (0x00F8 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2 final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEvent;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FString                                 MaterialTag;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class USceneComponent*                        Comp;                                              // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachName;                                        // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UObject>>         StepSwitchSoftRefs;                                // 0x0048(0x0010)(Edit, BlueprintVisible)
	bool                                          CallFunc_GetSoftObjectPtrByPath_Found;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 CallFunc_GetSoftObjectPtrByPath_Switch;            // 0x0060(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ShrubEnum                                CallFunc_GetShrubType_ShrubType;                   // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInBush_bInBush;                         // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkSwitchValue>          CallFunc_Map_Find_Value;                           // 0x0090(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAkSwitchValue>          CallFunc_GetFootstepSoundFloorSwitch_SwitchValue;  // 0x00C0(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2) == 0x0000F8, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, AkEvent) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::AkEvent' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, MaterialTag) == 0x000028, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::MaterialTag' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, Comp) == 0x000038, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::Comp' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, AttachName) == 0x000040, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::AttachName' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, StepSwitchSoftRefs) == 0x000048, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::StepSwitchSoftRefs' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_GetSoftObjectPtrByPath_Found) == 0x000058, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_GetSoftObjectPtrByPath_Found' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_GetSoftObjectPtrByPath_Switch) == 0x000060, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_GetSoftObjectPtrByPath_Switch' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_Array_Add_ReturnValue) == 0x000088, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00008C, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_GetShrubType_ShrubType) == 0x00008D, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_GetShrubType_ShrubType' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_IsInBush_bInBush) == 0x00008E, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_IsInBush_bInBush' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_Map_Find_Value) == 0x000090, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_Map_Find_ReturnValue) == 0x0000B8, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_BooleanAND_ReturnValue) == 0x0000B9, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_Array_Add_ReturnValue_1) == 0x0000BC, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_GetFootstepSoundFloorSwitch_SwitchValue) == 0x0000C0, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_GetFootstepSoundFloorSwitch_SwitchValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_Array_Add_ReturnValue_2) == 0x0000E8, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x0000F0, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffectV2::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnRunStepSoundEffect
// 0x0220 (0x0220 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect final
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AkEvent;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class USceneComponent*                        Comp;                                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachName;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 AnimName;                                          // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAkSwitchValue>          DefaultGaitAkSwitch;                               // 0x0048(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FString                                 CacheTypeTag;                                      // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CacheMaterialTag;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UObject>>         SwitchSoftRefs;                                    // 0x0090(0x0010)(Edit, BlueprintVisible)
	class FString                                 CallFunc_GetFootstepSoundMaterialSwitchPath_OutMaterialTag; // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetFootstepSoundMaterialSwitchPath_OutTypeTag; // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSoftObjectPtrByPath_Found;             // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 CallFunc_GetSoftObjectPtrByPath_Switch;            // 0x00C8(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSoftObjectPtrByPath_Found_1;           // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 CallFunc_GetSoftObjectPtrByPath_Switch_1;          // 0x00F8(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ShrubEnum                                CallFunc_GetShrubType_ShrubType;                   // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInBush_bInBush;                         // 0x0126(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_127[0x1];                                      // 0x0127(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkSwitchValue>          CallFunc_Map_Find_Value;                           // 0x0128(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkSwitchValue>          CallFunc_GetFootstepSoundFloorSwitch_SwitchValue;  // 0x0158(0x0028)(HasGetValueTypeHash)
	TSoftObjectPtr<class UAkSwitchValue>          CallFunc_GetFootstepSoundGaitSwitch_OutAkSwitch;   // 0x0180(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetShoeSwitchPath_ShoeSwitchPaths;        // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        CallFunc_MakeSoftObjectPath_ReturnValue;           // 0x01C8(0x0020)(ZeroConstructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 CallFunc_Conv_SoftObjPathToSoftObjRef_ReturnValue; // 0x01E8(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect) == 0x000220, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, AkEvent) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::AkEvent' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, Comp) == 0x000028, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::Comp' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, AttachName) == 0x000030, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::AttachName' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, AnimName) == 0x000038, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::AnimName' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, DefaultGaitAkSwitch) == 0x000048, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::DefaultGaitAkSwitch' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CacheTypeTag) == 0x000070, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CacheTypeTag' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CacheMaterialTag) == 0x000080, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CacheMaterialTag' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, SwitchSoftRefs) == 0x000090, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::SwitchSoftRefs' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_GetFootstepSoundMaterialSwitchPath_OutMaterialTag) == 0x0000A0, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_GetFootstepSoundMaterialSwitchPath_OutMaterialTag' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_GetFootstepSoundMaterialSwitchPath_OutTypeTag) == 0x0000B0, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_GetFootstepSoundMaterialSwitchPath_OutTypeTag' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_GetSoftObjectPtrByPath_Found) == 0x0000C0, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_GetSoftObjectPtrByPath_Found' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_GetSoftObjectPtrByPath_Switch) == 0x0000C8, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_GetSoftObjectPtrByPath_Switch' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_Array_Add_ReturnValue) == 0x0000F0, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_GetSoftObjectPtrByPath_Found_1) == 0x0000F4, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_GetSoftObjectPtrByPath_Found_1' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_GetSoftObjectPtrByPath_Switch_1) == 0x0000F8, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_GetSoftObjectPtrByPath_Switch_1' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_Array_Add_ReturnValue_1) == 0x000120, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000124, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_GetShrubType_ShrubType) == 0x000125, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_GetShrubType_ShrubType' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_IsInBush_bInBush) == 0x000126, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_IsInBush_bInBush' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_Map_Find_Value) == 0x000128, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_Map_Find_ReturnValue) == 0x000150, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_BooleanAND_ReturnValue) == 0x000151, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_GetFootstepSoundFloorSwitch_SwitchValue) == 0x000158, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_GetFootstepSoundFloorSwitch_SwitchValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_GetFootstepSoundGaitSwitch_OutAkSwitch) == 0x000180, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_GetFootstepSoundGaitSwitch_OutAkSwitch' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_Array_Add_ReturnValue_2) == 0x0001A8, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x0001AC, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_GetShoeSwitchPath_ShoeSwitchPaths) == 0x0001B0, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_GetShoeSwitchPath_ShoeSwitchPaths' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_Array_Add_ReturnValue_3) == 0x0001C0, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_MakeSoftObjectPath_ReturnValue) == 0x0001C8, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_MakeSoftObjectPath_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_Conv_SoftObjPathToSoftObjRef_ReturnValue) == 0x0001E8, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_Conv_SoftObjPathToSoftObjRef_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_Array_Add_ReturnValue_4) == 0x000210, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_Array_Add_ReturnValue_5) == 0x000214, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000218, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnRunStepSoundEffect::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnPlayRejumpEffect
// 0x0078 (0x0078 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect final
{
public:
	class UObject*                                NotifyObject;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CharacterEffectTag;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocationOffset;                                    // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationOffset;                                    // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Scale;                                             // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAbsoluteScale;                                    // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttached;                                         // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoDestroy;                                      // 0x006A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TotalDuration;                                     // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect) == 0x000078, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect, NotifyObject) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect::NotifyObject' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect, CharacterEffectTag) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect::CharacterEffectTag' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect, MeshComponent) == 0x000010, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect::MeshComponent' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect, SocketName) == 0x000018, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect::SocketName' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect, LocationOffset) == 0x000020, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect::LocationOffset' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect, RotationOffset) == 0x000038, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect::RotationOffset' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect, Scale) == 0x000050, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect::Scale' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect, bAbsoluteScale) == 0x000068, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect::bAbsoluteScale' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect, bAttached) == 0x000069, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect::bAttached' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect, bAutoDestroy) == 0x00006A, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect, TotalDuration) == 0x000070, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayRejumpEffect::TotalDuration' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnPlayMaterialEffect
// 0x0018 (0x0018 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayMaterialEffect final
{
public:
	class UObject*                                NotifyObject;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CharacterEffectTag;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	double                                        TotalDuration;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayMaterialEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayMaterialEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayMaterialEffect) == 0x000018, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayMaterialEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayMaterialEffect, NotifyObject) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayMaterialEffect::NotifyObject' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayMaterialEffect, CharacterEffectTag) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayMaterialEffect::CharacterEffectTag' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayMaterialEffect, TotalDuration) == 0x000010, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayMaterialEffect::TotalDuration' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnPlayLSEffect
// 0x0038 (0x0038 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayLSEffect final
{
public:
	const class UAnimNotifyState*                 NotifyObject;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          LevelSequenceRef;                                  // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	double                                        TotalDuration;                                     // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayLSEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayLSEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayLSEffect) == 0x000038, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayLSEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayLSEffect, NotifyObject) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayLSEffect::NotifyObject' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayLSEffect, LevelSequenceRef) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayLSEffect::LevelSequenceRef' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayLSEffect, TotalDuration) == 0x000030, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayLSEffect::TotalDuration' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnPlayCharacterEffect
// 0x0078 (0x0078 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect final
{
public:
	class UObject*                                NotifyObject;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CharacterEffectTag;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocationOffset;                                    // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationOffset;                                    // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Scale;                                             // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAbsoluteScale;                                    // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttached;                                         // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoDestroy;                                      // 0x006A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TotalDuration;                                     // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect) == 0x000078, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect, NotifyObject) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect::NotifyObject' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect, CharacterEffectTag) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect::CharacterEffectTag' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect, MeshComponent) == 0x000010, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect::MeshComponent' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect, SocketName) == 0x000018, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect::SocketName' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect, LocationOffset) == 0x000020, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect::LocationOffset' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect, RotationOffset) == 0x000038, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect::RotationOffset' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect, Scale) == 0x000050, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect::Scale' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect, bAbsoluteScale) == 0x000068, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect::bAbsoluteScale' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect, bAttached) == 0x000069, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect::bAttached' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect, bAutoDestroy) == 0x00006A, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect, TotalDuration) == 0x000070, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnPlayCharacterEffect::TotalDuration' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnEndMaterialEffect
// 0x0008 (0x0008 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndMaterialEffect final
{
public:
	class UObject*                                NotifyObject;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndMaterialEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndMaterialEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndMaterialEffect) == 0x000008, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndMaterialEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndMaterialEffect, NotifyObject) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndMaterialEffect::NotifyObject' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnEndLSEffect
// 0x0010 (0x0010 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndLSEffect final
{
public:
	const class UAnimNotifyState*                 NotifyObject;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bWaitForLSFinish;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndLSEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndLSEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndLSEffect) == 0x000010, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndLSEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndLSEffect, NotifyObject) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndLSEffect::NotifyObject' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndLSEffect, bWaitForLSFinish) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndLSEffect::bWaitForLSFinish' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnEndCharacterEffect
// 0x0018 (0x0018 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndCharacterEffect final
{
public:
	class UObject*                                NotifyObject;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bDestroyAtEnd;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndCharacterEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndCharacterEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndCharacterEffect) == 0x000018, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndCharacterEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndCharacterEffect, NotifyObject) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndCharacterEffect::NotifyObject' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndCharacterEffect, MeshComponent) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndCharacterEffect::MeshComponent' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndCharacterEffect, bDestroyAtEnd) == 0x000010, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnEndCharacterEffect::bDestroyAtEnd' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnClothesTypeEffect
// 0x0010 (0x0010 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesTypeEffect final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesTypeEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesTypeEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesTypeEffect) == 0x000010, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesTypeEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesTypeEffect, Comp) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesTypeEffect::Comp' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesTypeEffect, AkEvent) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesTypeEffect::AkEvent' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.BPAnimNotify_OnClothesMaterialEffect
// 0x0010 (0x0010 - 0x0000)
struct BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesMaterialEffect final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesMaterialEffect) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesMaterialEffect");
static_assert(sizeof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesMaterialEffect) == 0x000010, "Wrong size on BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesMaterialEffect");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesMaterialEffect, Comp) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesMaterialEffect::Comp' has a wrong offset!");
static_assert(offsetof(BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesMaterialEffect, AkEvent) == 0x000008, "Member 'BP_SoundAndParticleComponent_C_BPAnimNotify_OnClothesMaterialEffect::AkEvent' has a wrong offset!");

// Function BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_SoundAndParticleComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_SoundAndParticleComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_SoundAndParticleComponent_C_GetModuleName");
static_assert(sizeof(BP_SoundAndParticleComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_SoundAndParticleComponent_C_GetModuleName");
static_assert(offsetof(BP_SoundAndParticleComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_SoundAndParticleComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

