#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6BlueprintMinBPLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "MessageHUDEnum_structs.hpp"
#include "MessageBoxModeEnum_structs.hpp"
#include "MessageHUDHead_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass X6BlueprintMinBPLibrary.X6BlueprintMinBPLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UX6BlueprintMinBPLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void TrySendMsgToStartGame(class AActor* actorWithEntryComp, int64 miniGameId, class UObject* __WorldContext);
	static void Test_ClearAllMiniGameLvlSeqPlayRecord(class UObject* __WorldContext);
	static void TeleportPlayerToActor(class AActor* TargetLocation, class UObject* __WorldContext);
	static void TeleportPlayerByTag(const class FString& TeleportTag, bool bNoFadeOutIn, const struct FVector& PosOffset, double RotationOffsetY, bool bSkipLoadingCheck, bool bRotateCamera, class UObject* __WorldContext);
	static void TeleportPlayer(class ACharacter* Player, const struct FVector& TargettLocation, const struct FRotator& TargetRotation, bool bNoFadeOutIn, class UObject* __WorldContext);
	static void SpawnActor(class UClass* SpawnClass, const struct FVector& Position, const struct FRotator& Rotation, class UObject* __WorldContext, class AActor** Value);
	static void ShowMessageOnScreen(double TextDuration, EMessageHUDEnum MessageType, EMessageHUDHead HeadImage, TArray<class FString>& MessageID, class UObject* __WorldContext);
	static void ShowMessageHUDOnScreen(TArray<class FText>& Messages, double TextDuration, EMessageHUDEnum MessageType, EMessageHUDHead HeadImage, EMessageBoxModeEnum PopupMode, bool DaMiaoHudTextAutoEnd, TArray<class FString>& MessageID, class UObject* __WorldContext);
	static void SetSimulatePhysics(class UPrimitiveComponent* Target, bool bSimulate, class UObject* __WorldContext);
	static void SetMiniGameLvlSeqPlayed(class ABP_MiniGame_C* MiniGame, bool bPlayed, class UObject* __WorldContext);
	static void ResumeGame(class UObject* __WorldContext);
	static void RemoveMiniGameMoveCameraState(class UObject* __WorldContext);
	static void PuzzleSpawnerInGroupResetFinishCB(class AActor* SpawnerActor, bool bSuccess, class UObject* __WorldContext);
	static void PlayMiniGameLvlSeq(class ABP_MiniGame_C* MiniGame, class ULevelSequence* Sequence, class UObject* __WorldContext, class ALevelSequenceActor** SequenceActor, class ULevelSequencePlayer** SequencePlayer);
	static void PauseGame(class UObject* __WorldContext);
	static void OverLapRequestHistoryToStartGame(class AActor* actorWithEntryComp, int64 miniGameId, class UObject* __WorldContext);
	static void LaunchPlayer(class ACharacter* Character, const struct FVector& LaunchVelocity, bool XYOverride, bool ZOverride, class UObject* __WorldContext);
	static void IsMiniGameLvlSeqPlayed(class ABP_MiniGame_C* MiniGame, class UObject* __WorldContext, bool* bIsPlayed);
	static void HideActor(class AX6Actor* Target, bool bHidden, class UObject* __WorldContext);
	static void GetLocalPlayerPawn(class UObject* __WorldContext, class ACharacter** LocalPlayerPawn);
	static void DestroyMiniGame(class AActor* entryActor, class UObject* __WorldContext);
	static void DestroyActor(class AX6Actor* Target, class UObject* __WorldContext);
	static void CreateMiniGame(class AActor* entryActor, class UObject* __WorldContext);
	static void CheckHaveVoucherCost(int64 miniGameId, class UObject* __WorldContext, bool* bHave);
	static void CheckHaveVoucher(int64 miniGameId, class UObject* __WorldContext, bool* bHave);
	static void BP_QuitCurrentSuitAbility(class UObject* __WorldContext);
	static void BP_GetActorsBySpawnGroupID(int64 SpawnGroupID, class UObject* __WorldContext, TArray<class AActor*>* Actors);
	static void BP_GetActorBySpawnerID(int64 SpawnerID, class UObject* __WorldContext, class AActor** Actor);
	static void AddMiniGameMoveCameraState(class UObject* __WorldContext);
	static void ActorRotateToTarget(class AActor* Actor, class AActor* Target, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"X6BlueprintMinBPLibrary_C">();
	}
	static class UX6BlueprintMinBPLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6BlueprintMinBPLibrary_C>();
	}
};
static_assert(alignof(UX6BlueprintMinBPLibrary_C) == 0x000008, "Wrong alignment on UX6BlueprintMinBPLibrary_C");
static_assert(sizeof(UX6BlueprintMinBPLibrary_C) == 0x000028, "Wrong size on UX6BlueprintMinBPLibrary_C");

}

