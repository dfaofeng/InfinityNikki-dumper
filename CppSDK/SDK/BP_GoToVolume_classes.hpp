#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GoToVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GoToVolume.BP_GoToVolume_C
// 0x0030 (0x03E8 - 0x03B8)
class ABP_GoToVolume_C final : public AStaticMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         MeshType;                                          // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ObjectiveID;                                       // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 ObjectiveTag;                                      // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)

public:
	void ShowVolumn(bool CanShow);
	void SetTransformInfo(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
	void SetMeshType(int32 MeshType_0);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void OnOverlapEnd(class AActor* Actor);
	void OnOverlapBegin(class AActor* Actor);
	void ExecuteUbergraph_BP_GoToVolume(int32 EntryPoint);
	void EnableOverlap();
	void DisableOverlap();

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GoToVolume_C">();
	}
	static class ABP_GoToVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GoToVolume_C>();
	}
};
static_assert(alignof(ABP_GoToVolume_C) == 0x000008, "Wrong alignment on ABP_GoToVolume_C");
static_assert(sizeof(ABP_GoToVolume_C) == 0x0003E8, "Wrong size on ABP_GoToVolume_C");
static_assert(offsetof(ABP_GoToVolume_C, UberGraphFrame) == 0x0003B8, "Member 'ABP_GoToVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GoToVolume_C, MeshType) == 0x0003C0, "Member 'ABP_GoToVolume_C::MeshType' has a wrong offset!");
static_assert(offsetof(ABP_GoToVolume_C, ObjectiveID) == 0x0003C8, "Member 'ABP_GoToVolume_C::ObjectiveID' has a wrong offset!");
static_assert(offsetof(ABP_GoToVolume_C, ObjectiveTag) == 0x0003D8, "Member 'ABP_GoToVolume_C::ObjectiveTag' has a wrong offset!");

}

