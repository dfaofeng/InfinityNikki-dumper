#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PCG_SplineMesh_MulArray

#include "Basic.hpp"

#include "PCG_SplineMesh_MulArray_classes.hpp"
#include "PCG_SplineMesh_MulArray_parameters.hpp"


namespace SDK
{

// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.AddHISMComponent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInstancedStaticMeshComponent**   InstancedComponent                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void APCG_SplineMesh_MulArray_C::AddHISMComponent(class UInstancedStaticMeshComponent** InstancedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "AddHISMComponent");

	Params::PCG_SplineMesh_MulArray_C_AddHISMComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InstancedComponent != nullptr)
		*InstancedComponent = Parms.InstancedComponent;
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.AddInstanceAlongSpline
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Mesh_Length                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      Add_Mesh                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               Add_Mesh_Material                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UInstancedStaticMeshComponent*    InstanceComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Scale_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESplineMeshAxis                         Forward                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSidePivot_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class UMaterialInterface*>&      Add_Material_All                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    MeshFlip                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APCG_SplineMesh_MulArray_C::AddInstanceAlongSpline(double Mesh_Length, class UStaticMesh* Add_Mesh, class UMaterialInterface* Add_Mesh_Material, class UInstancedStaticMeshComponent* InstanceComponent, const struct FVector& Offset, const struct FVector& Scale_0, ESplineMeshAxis Forward, bool IsSidePivot_0, const struct FRotator& Rotation, TArray<class UMaterialInterface*>& Add_Material_All, bool MeshFlip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "AddInstanceAlongSpline");

	Params::PCG_SplineMesh_MulArray_C_AddInstanceAlongSpline Parms{};

	Parms.Mesh_Length = Mesh_Length;
	Parms.Add_Mesh = Add_Mesh;
	Parms.Add_Mesh_Material = Add_Mesh_Material;
	Parms.InstanceComponent = InstanceComponent;
	Parms.Offset = std::move(Offset);
	Parms.Scale_0 = std::move(Scale_0);
	Parms.Forward = Forward;
	Parms.IsSidePivot_0 = IsSidePivot_0;
	Parms.Rotation = std::move(Rotation);
	Parms.Add_Material_All = std::move(Add_Material_All);
	Parms.MeshFlip = MeshFlip;

	UObject::ProcessEvent(Func, &Parms);

	Add_Material_All = std::move(Parms.Add_Material_All);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.AddInstancedComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInstancedStaticMeshComponent**   InstancedComponent                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void APCG_SplineMesh_MulArray_C::AddInstancedComponent(class UInstancedStaticMeshComponent** InstancedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "AddInstancedComponent");

	Params::PCG_SplineMesh_MulArray_C_AddInstancedComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InstancedComponent != nullptr)
		*InstancedComponent = Parms.InstancedComponent;
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.AddISMComponent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInstancedStaticMeshComponent**   InstancedComponent                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void APCG_SplineMesh_MulArray_C::AddISMComponent(class UInstancedStaticMeshComponent** InstancedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "AddISMComponent");

	Params::PCG_SplineMesh_MulArray_C_AddISMComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InstancedComponent != nullptr)
		*InstancedComponent = Parms.InstancedComponent;
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.AddMeshAlongSpline
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Mesh_Length                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      Add_Mesh                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               Add_Mesh_Material                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USplineComponent*                 SplineActor_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Scale_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESplineMeshAxis                         Forward                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInterface*>&      Add_Material_All                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void APCG_SplineMesh_MulArray_C::AddMeshAlongSpline(double Mesh_Length, class UStaticMesh* Add_Mesh, class UMaterialInterface* Add_Mesh_Material, class USplineComponent* SplineActor_0, const struct FVector& Offset, double Scale_0, ESplineMeshAxis Forward, TArray<class UMaterialInterface*>& Add_Material_All)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "AddMeshAlongSpline");

	Params::PCG_SplineMesh_MulArray_C_AddMeshAlongSpline Parms{};

	Parms.Mesh_Length = Mesh_Length;
	Parms.Add_Mesh = Add_Mesh;
	Parms.Add_Mesh_Material = Add_Mesh_Material;
	Parms.SplineActor_0 = SplineActor_0;
	Parms.Offset = std::move(Offset);
	Parms.Scale_0 = Scale_0;
	Parms.Forward = Forward;
	Parms.Add_Material_All = std::move(Add_Material_All);

	UObject::ProcessEvent(Func, &Parms);

	Add_Material_All = std::move(Parms.Add_Material_All);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.Copy Spline
// (BlueprintCallable, BlueprintEvent)

void APCG_SplineMesh_MulArray_C::Copy_Spline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "Copy Spline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.CustomTemplateMap
// (Public, BlueprintCallable, BlueprintEvent)

void APCG_SplineMesh_MulArray_C::CustomTemplateMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "CustomTemplateMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.ExecuteUbergraph_PCG_SplineMesh_MulArray
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APCG_SplineMesh_MulArray_C::ExecuteUbergraph_PCG_SplineMesh_MulArray(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "ExecuteUbergraph_PCG_SplineMesh_MulArray");

	Params::PCG_SplineMesh_MulArray_C_ExecuteUbergraph_PCG_SplineMesh_MulArray Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.GetMeshLengthByAxis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Scale_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 MeshLength                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APCG_SplineMesh_MulArray_C::GetMeshLengthByAxis(class UStaticMesh* StaticMesh, double Scale_0, double* MeshLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "GetMeshLengthByAxis");

	Params::PCG_SplineMesh_MulArray_C_GetMeshLengthByAxis Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.Scale_0 = Scale_0;

	UObject::ProcessEvent(Func, &Parms);

	if (MeshLength != nullptr)
		*MeshLength = Parms.MeshLength;
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.PlaceAllMiddleMeshes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TotalLength                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APCG_SplineMesh_MulArray_C::PlaceAllMiddleMeshes(double TotalLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "PlaceAllMiddleMeshes");

	Params::PCG_SplineMesh_MulArray_C_PlaceAllMiddleMeshes Parms{};

	Parms.TotalLength = TotalLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.PlaceObjectElement
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMain                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  LastLength                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APCG_SplineMesh_MulArray_C::PlaceObjectElement(bool IsMain, int32 Index_0, double LastLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "PlaceObjectElement");

	Params::PCG_SplineMesh_MulArray_C_PlaceObjectElement Parms{};

	Parms.IsMain = IsMain;
	Parms.Index_0 = Index_0;
	Parms.LastLength = LastLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.Set InstanceMesh Attrib
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInstancedStaticMeshComponent*    InstanceComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      AddMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               AddMesh_Material                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInterface*>&      Add_Material_All                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  BoundsLength                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APCG_SplineMesh_MulArray_C::Set_InstanceMesh_Attrib(class UInstancedStaticMeshComponent* InstanceComponent, class UStaticMesh* AddMesh, class UMaterialInterface* AddMesh_Material, TArray<class UMaterialInterface*>& Add_Material_All, double BoundsLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "Set InstanceMesh Attrib");

	Params::PCG_SplineMesh_MulArray_C_Set_InstanceMesh_Attrib Parms{};

	Parms.InstanceComponent = InstanceComponent;
	Parms.AddMesh = AddMesh;
	Parms.AddMesh_Material = AddMesh_Material;
	Parms.Add_Material_All = std::move(Add_Material_All);
	Parms.BoundsLength = BoundsLength;

	UObject::ProcessEvent(Func, &Parms);

	Add_Material_All = std::move(Parms.Add_Material_All);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.Set SplinMesh Attrib
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineMeshComponent*             mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      AddMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               AddMesh_Material                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Scale_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESplineMeshAxis                         Forward                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   UpDir                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInterface*>&      Add_Material_All                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  BoundsLength                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APCG_SplineMesh_MulArray_C::Set_SplinMesh_Attrib(class USplineMeshComponent* mesh, class UStaticMesh* AddMesh, class UMaterialInterface* AddMesh_Material, double Scale_0, ESplineMeshAxis Forward, const struct FVector& UpDir, TArray<class UMaterialInterface*>& Add_Material_All, double BoundsLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "Set SplinMesh Attrib");

	Params::PCG_SplineMesh_MulArray_C_Set_SplinMesh_Attrib Parms{};

	Parms.mesh = mesh;
	Parms.AddMesh = AddMesh;
	Parms.AddMesh_Material = AddMesh_Material;
	Parms.Scale_0 = Scale_0;
	Parms.Forward = Forward;
	Parms.UpDir = std::move(UpDir);
	Parms.Add_Material_All = std::move(Add_Material_All);
	Parms.BoundsLength = BoundsLength;

	UObject::ProcessEvent(Func, &Parms);

	Add_Material_All = std::move(Parms.Add_Material_All);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.SetAllMaterials
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<class UMaterialInterface*>&      Materials                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void APCG_SplineMesh_MulArray_C::SetAllMaterials(class UPrimitiveComponent* Component, TArray<class UMaterialInterface*>& Materials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "SetAllMaterials");

	Params::PCG_SplineMesh_MulArray_C_SetAllMaterials Parms{};

	Parms.Component = Component;
	Parms.Materials = std::move(Materials);

	UObject::ProcessEvent(Func, &Parms);

	Materials = std::move(Parms.Materials);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.SetSplineMesh
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void APCG_SplineMesh_MulArray_C::SetSplineMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "SetSplineMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.Update Spline Mesh
// (Exec, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void APCG_SplineMesh_MulArray_C::Update_Spline_Mesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "Update Spline Mesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void APCG_SplineMesh_MulArray_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PCG_SplineMesh_MulArray.PCG_SplineMesh_MulArray_C.曲线贴地
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void APCG_SplineMesh_MulArray_C::曲线贴地()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PCG_SplineMesh_MulArray_C", "曲线贴地");

	UObject::ProcessEvent(Func, nullptr);
}

}

