#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperSDKCross

#include "Basic.hpp"

#include "PSDKConfig_structs.hpp"
#include "PSDKBasic_structs.hpp"


namespace SDK
{

// ScriptStruct PaperSDKCross.PCSDKLanguagesRow
// 0x0000 (0x00D8 - 0x00D8)
struct FPCSDKLanguagesRow final : public FPSDKLanguageTableRowBase
{
};
static_assert(alignof(FPCSDKLanguagesRow) == 0x000008, "Wrong alignment on FPCSDKLanguagesRow");
static_assert(sizeof(FPCSDKLanguagesRow) == 0x0000D8, "Wrong size on FPCSDKLanguagesRow");

// ScriptStruct PaperSDKCross.PSBindAccount
// 0x0008 (0x0008 - 0x0000)
struct FPSBindAccount final
{
public:
	int32                                         account_type;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSBindAccount) == 0x000004, "Wrong alignment on FPSBindAccount");
static_assert(sizeof(FPSBindAccount) == 0x000008, "Wrong size on FPSBindAccount");
static_assert(offsetof(FPSBindAccount, account_type) == 0x000000, "Member 'FPSBindAccount::account_type' has a wrong offset!");
static_assert(offsetof(FPSBindAccount, Force) == 0x000004, "Member 'FPSBindAccount::Force' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSAccountLocation
// 0x0060 (0x0060 - 0x0000)
struct FPSAccountLocation final
{
public:
	class FString                                 Continent_Code;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Continent_Name;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country_Iso_Code;                                  // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Country_Name;                                      // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Province_Code;                                     // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Province_Name;                                     // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSAccountLocation) == 0x000008, "Wrong alignment on FPSAccountLocation");
static_assert(sizeof(FPSAccountLocation) == 0x000060, "Wrong size on FPSAccountLocation");
static_assert(offsetof(FPSAccountLocation, Continent_Code) == 0x000000, "Member 'FPSAccountLocation::Continent_Code' has a wrong offset!");
static_assert(offsetof(FPSAccountLocation, Continent_Name) == 0x000010, "Member 'FPSAccountLocation::Continent_Name' has a wrong offset!");
static_assert(offsetof(FPSAccountLocation, Country_Iso_Code) == 0x000020, "Member 'FPSAccountLocation::Country_Iso_Code' has a wrong offset!");
static_assert(offsetof(FPSAccountLocation, Country_Name) == 0x000030, "Member 'FPSAccountLocation::Country_Name' has a wrong offset!");
static_assert(offsetof(FPSAccountLocation, Province_Code) == 0x000040, "Member 'FPSAccountLocation::Province_Code' has a wrong offset!");
static_assert(offsetof(FPSAccountLocation, Province_Name) == 0x000050, "Member 'FPSAccountLocation::Province_Name' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSThirdPartyDetailInfo
// 0x0060 (0x0060 - 0x0000)
struct FPSThirdPartyDetailInfo final
{
public:
	class FString                                 Account_Id;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Online_Id;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Third_User_Name;                                   // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Third_User_Picture;                                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSThirdPartyDetailInfo) == 0x000008, "Wrong alignment on FPSThirdPartyDetailInfo");
static_assert(sizeof(FPSThirdPartyDetailInfo) == 0x000060, "Wrong size on FPSThirdPartyDetailInfo");
static_assert(offsetof(FPSThirdPartyDetailInfo, Account_Id) == 0x000000, "Member 'FPSThirdPartyDetailInfo::Account_Id' has a wrong offset!");
static_assert(offsetof(FPSThirdPartyDetailInfo, Online_Id) == 0x000010, "Member 'FPSThirdPartyDetailInfo::Online_Id' has a wrong offset!");
static_assert(offsetof(FPSThirdPartyDetailInfo, Region) == 0x000020, "Member 'FPSThirdPartyDetailInfo::Region' has a wrong offset!");
static_assert(offsetof(FPSThirdPartyDetailInfo, Third_User_Name) == 0x000030, "Member 'FPSThirdPartyDetailInfo::Third_User_Name' has a wrong offset!");
static_assert(offsetof(FPSThirdPartyDetailInfo, Third_User_Picture) == 0x000040, "Member 'FPSThirdPartyDetailInfo::Third_User_Picture' has a wrong offset!");
static_assert(offsetof(FPSThirdPartyDetailInfo, Email) == 0x000050, "Member 'FPSThirdPartyDetailInfo::Email' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSAccountYouthMsg
// 0x0068 (0x0068 - 0x0000)
struct FPSAccountYouthMsg final
{
public:
	int32                                         LimitType;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AuthStatus;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RealId;                                            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 realname;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoginBan;                                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginBanBeg;                                       // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginBanEnd;                                       // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnlineToday;                                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Age;                                               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Is_Guest;                                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HasRealInfo;                                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Is_Holiday;                                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSAccountYouthMsg) == 0x000008, "Wrong alignment on FPSAccountYouthMsg");
static_assert(sizeof(FPSAccountYouthMsg) == 0x000068, "Wrong size on FPSAccountYouthMsg");
static_assert(offsetof(FPSAccountYouthMsg, LimitType) == 0x000000, "Member 'FPSAccountYouthMsg::LimitType' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, AuthStatus) == 0x000004, "Member 'FPSAccountYouthMsg::AuthStatus' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, RealId) == 0x000008, "Member 'FPSAccountYouthMsg::RealId' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, realname) == 0x000018, "Member 'FPSAccountYouthMsg::realname' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, Limit) == 0x000028, "Member 'FPSAccountYouthMsg::Limit' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, LoginBan) == 0x00002C, "Member 'FPSAccountYouthMsg::LoginBan' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, LoginBanBeg) == 0x000030, "Member 'FPSAccountYouthMsg::LoginBanBeg' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, LoginBanEnd) == 0x000040, "Member 'FPSAccountYouthMsg::LoginBanEnd' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, OnlineToday) == 0x000050, "Member 'FPSAccountYouthMsg::OnlineToday' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, Age) == 0x000054, "Member 'FPSAccountYouthMsg::Age' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, Is_Guest) == 0x000058, "Member 'FPSAccountYouthMsg::Is_Guest' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, HasRealInfo) == 0x00005C, "Member 'FPSAccountYouthMsg::HasRealInfo' has a wrong offset!");
static_assert(offsetof(FPSAccountYouthMsg, Is_Holiday) == 0x000060, "Member 'FPSAccountYouthMsg::Is_Holiday' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSRoleInfoModel
// 0x0028 (0x0028 - 0x0000)
struct FPSRoleInfoModel final
{
public:
	class FString                                 AccntID;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccntLevel;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AccntName;                                         // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSRoleInfoModel) == 0x000008, "Wrong alignment on FPSRoleInfoModel");
static_assert(sizeof(FPSRoleInfoModel) == 0x000028, "Wrong size on FPSRoleInfoModel");
static_assert(offsetof(FPSRoleInfoModel, AccntID) == 0x000000, "Member 'FPSRoleInfoModel::AccntID' has a wrong offset!");
static_assert(offsetof(FPSRoleInfoModel, AccntLevel) == 0x000010, "Member 'FPSRoleInfoModel::AccntLevel' has a wrong offset!");
static_assert(offsetof(FPSRoleInfoModel, AccntName) == 0x000018, "Member 'FPSRoleInfoModel::AccntName' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSAccountInfoModel
// 0x01E8 (0x01E8 - 0x0000)
struct FPSAccountInfoModel final
{
public:
	int32                                         Qrcode_Status;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Action;                                            // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPSRoleInfoModel>               RoleList;                                          // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Is_Bind;                                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Real_Switch;                                       // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Youth_Switch;                                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Guest_Need_Bind;                                   // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Third_Nid;                                         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Third_Token;                                       // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Account;                                           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nid;                                               // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Refresh_Token;                                     // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          need_bind_phone;                                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          need_real_link;                                    // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IsNew;                                             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsGuest;                                           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountType;                                       // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoleId;                                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Extra;                                             // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPSAccountYouthMsg                     Youth_Msg;                                         // 0x00B8(0x0068)(NativeAccessSpecifierPublic)
	struct FPSThirdPartyDetailInfo                Detail;                                            // 0x0120(0x0060)(NativeAccessSpecifierPublic)
	struct FPSAccountLocation                     Location;                                          // 0x0180(0x0060)(NativeAccessSpecifierPublic)
	struct FPSBindAccount                         Bind_Account;                                      // 0x01E0(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSAccountInfoModel) == 0x000008, "Wrong alignment on FPSAccountInfoModel");
static_assert(sizeof(FPSAccountInfoModel) == 0x0001E8, "Wrong size on FPSAccountInfoModel");
static_assert(offsetof(FPSAccountInfoModel, Qrcode_Status) == 0x000000, "Member 'FPSAccountInfoModel::Qrcode_Status' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Action) == 0x000008, "Member 'FPSAccountInfoModel::Action' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, RoleList) == 0x000018, "Member 'FPSAccountInfoModel::RoleList' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Is_Bind) == 0x000028, "Member 'FPSAccountInfoModel::Is_Bind' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Real_Switch) == 0x000029, "Member 'FPSAccountInfoModel::Real_Switch' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Youth_Switch) == 0x00002A, "Member 'FPSAccountInfoModel::Youth_Switch' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Guest_Need_Bind) == 0x00002B, "Member 'FPSAccountInfoModel::Guest_Need_Bind' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Third_Nid) == 0x000030, "Member 'FPSAccountInfoModel::Third_Nid' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Third_Token) == 0x000040, "Member 'FPSAccountInfoModel::Third_Token' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Account) == 0x000050, "Member 'FPSAccountInfoModel::Account' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Nid) == 0x000060, "Member 'FPSAccountInfoModel::Nid' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Token) == 0x000070, "Member 'FPSAccountInfoModel::Token' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Refresh_Token) == 0x000080, "Member 'FPSAccountInfoModel::Refresh_Token' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, need_bind_phone) == 0x000090, "Member 'FPSAccountInfoModel::need_bind_phone' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, need_real_link) == 0x000091, "Member 'FPSAccountInfoModel::need_real_link' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, IsNew) == 0x000094, "Member 'FPSAccountInfoModel::IsNew' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, IsGuest) == 0x000098, "Member 'FPSAccountInfoModel::IsGuest' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, AccountType) == 0x00009C, "Member 'FPSAccountInfoModel::AccountType' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, RoleId) == 0x0000A0, "Member 'FPSAccountInfoModel::RoleId' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Extra) == 0x0000A8, "Member 'FPSAccountInfoModel::Extra' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Youth_Msg) == 0x0000B8, "Member 'FPSAccountInfoModel::Youth_Msg' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Detail) == 0x000120, "Member 'FPSAccountInfoModel::Detail' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Location) == 0x000180, "Member 'FPSAccountInfoModel::Location' has a wrong offset!");
static_assert(offsetof(FPSAccountInfoModel, Bind_Account) == 0x0001E0, "Member 'FPSAccountInfoModel::Bind_Account' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSBffLoginInfoModel
// 0x01E8 (0x0220 - 0x0038)
struct FPSBffLoginInfoModel final : public FPSBffBasicModel
{
public:
	struct FPSAccountInfoModel                    Data;                                              // 0x0038(0x01E8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSBffLoginInfoModel) == 0x000008, "Wrong alignment on FPSBffLoginInfoModel");
static_assert(sizeof(FPSBffLoginInfoModel) == 0x000220, "Wrong size on FPSBffLoginInfoModel");
static_assert(offsetof(FPSBffLoginInfoModel, Data) == 0x000038, "Member 'FPSBffLoginInfoModel::Data' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSRealNameInfoModel
// 0x0068 (0x0068 - 0x0000)
struct FPSRealNameInfoModel final
{
public:
	struct FPSAccountYouthMsg                     Youth_Msg;                                         // 0x0000(0x0068)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSRealNameInfoModel) == 0x000008, "Wrong alignment on FPSRealNameInfoModel");
static_assert(sizeof(FPSRealNameInfoModel) == 0x000068, "Wrong size on FPSRealNameInfoModel");
static_assert(offsetof(FPSRealNameInfoModel, Youth_Msg) == 0x000000, "Member 'FPSRealNameInfoModel::Youth_Msg' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSBffAddRealNameResultModel
// 0x0068 (0x00A0 - 0x0038)
struct FPSBffAddRealNameResultModel final : public FPSBffBasicModel
{
public:
	struct FPSRealNameInfoModel                   Data;                                              // 0x0038(0x0068)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSBffAddRealNameResultModel) == 0x000008, "Wrong alignment on FPSBffAddRealNameResultModel");
static_assert(sizeof(FPSBffAddRealNameResultModel) == 0x0000A0, "Wrong size on FPSBffAddRealNameResultModel");
static_assert(offsetof(FPSBffAddRealNameResultModel, Data) == 0x000038, "Member 'FPSBffAddRealNameResultModel::Data' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSAccountExistsInfoModel
// 0x0001 (0x0001 - 0x0000)
struct FPSAccountExistsInfoModel final
{
public:
	bool                                          Exists;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSAccountExistsInfoModel) == 0x000001, "Wrong alignment on FPSAccountExistsInfoModel");
static_assert(sizeof(FPSAccountExistsInfoModel) == 0x000001, "Wrong size on FPSAccountExistsInfoModel");
static_assert(offsetof(FPSAccountExistsInfoModel, Exists) == 0x000000, "Member 'FPSAccountExistsInfoModel::Exists' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSBffAccountExistsModel
// 0x0008 (0x0040 - 0x0038)
struct FPSBffAccountExistsModel final : public FPSBffBasicModel
{
public:
	struct FPSAccountExistsInfoModel              Data;                                              // 0x0038(0x0001)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSBffAccountExistsModel) == 0x000008, "Wrong alignment on FPSBffAccountExistsModel");
static_assert(sizeof(FPSBffAccountExistsModel) == 0x000040, "Wrong size on FPSBffAccountExistsModel");
static_assert(offsetof(FPSBffAccountExistsModel, Data) == 0x000038, "Member 'FPSBffAccountExistsModel::Data' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSUserProfileModel
// 0x0028 (0x0028 - 0x0000)
struct FPSUserProfileModel final
{
public:
	class FString                                 Email;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 phone;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Has_Email;                                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Has_Phone;                                         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSUserProfileModel) == 0x000008, "Wrong alignment on FPSUserProfileModel");
static_assert(sizeof(FPSUserProfileModel) == 0x000028, "Wrong size on FPSUserProfileModel");
static_assert(offsetof(FPSUserProfileModel, Email) == 0x000000, "Member 'FPSUserProfileModel::Email' has a wrong offset!");
static_assert(offsetof(FPSUserProfileModel, phone) == 0x000010, "Member 'FPSUserProfileModel::phone' has a wrong offset!");
static_assert(offsetof(FPSUserProfileModel, Has_Email) == 0x000020, "Member 'FPSUserProfileModel::Has_Email' has a wrong offset!");
static_assert(offsetof(FPSUserProfileModel, Has_Phone) == 0x000021, "Member 'FPSUserProfileModel::Has_Phone' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSBffUserProfileModel
// 0x0028 (0x0060 - 0x0038)
struct FPSBffUserProfileModel final : public FPSBffBasicModel
{
public:
	struct FPSUserProfileModel                    Data;                                              // 0x0038(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSBffUserProfileModel) == 0x000008, "Wrong alignment on FPSBffUserProfileModel");
static_assert(sizeof(FPSBffUserProfileModel) == 0x000060, "Wrong size on FPSBffUserProfileModel");
static_assert(offsetof(FPSBffUserProfileModel, Data) == 0x000038, "Member 'FPSBffUserProfileModel::Data' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSQrCodeInfo
// 0x0030 (0x0030 - 0x0000)
struct FPSQrCodeInfo final
{
public:
	class FString                                 Qrcode_Id;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Qrcode_Url;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Expire_In;                                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Polling_Interval;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPSQrCodeInfo) == 0x000008, "Wrong alignment on FPSQrCodeInfo");
static_assert(sizeof(FPSQrCodeInfo) == 0x000030, "Wrong size on FPSQrCodeInfo");
static_assert(offsetof(FPSQrCodeInfo, Qrcode_Id) == 0x000000, "Member 'FPSQrCodeInfo::Qrcode_Id' has a wrong offset!");
static_assert(offsetof(FPSQrCodeInfo, Qrcode_Url) == 0x000010, "Member 'FPSQrCodeInfo::Qrcode_Url' has a wrong offset!");
static_assert(offsetof(FPSQrCodeInfo, Expire_In) == 0x000020, "Member 'FPSQrCodeInfo::Expire_In' has a wrong offset!");
static_assert(offsetof(FPSQrCodeInfo, Polling_Interval) == 0x000028, "Member 'FPSQrCodeInfo::Polling_Interval' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSBffQrCodeInfo
// 0x0030 (0x0068 - 0x0038)
struct FPSBffQrCodeInfo final : public FPSBffBasicModel
{
public:
	struct FPSQrCodeInfo                          Data;                                              // 0x0038(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSBffQrCodeInfo) == 0x000008, "Wrong alignment on FPSBffQrCodeInfo");
static_assert(sizeof(FPSBffQrCodeInfo) == 0x000068, "Wrong size on FPSBffQrCodeInfo");
static_assert(offsetof(FPSBffQrCodeInfo, Data) == 0x000038, "Member 'FPSBffQrCodeInfo::Data' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSBffOverseasRealNameLinkInfoModel
// 0x0010 (0x0010 - 0x0000)
struct FPSBffOverseasRealNameLinkInfoModel final
{
public:
	class FString                                 Real_Url;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSBffOverseasRealNameLinkInfoModel) == 0x000008, "Wrong alignment on FPSBffOverseasRealNameLinkInfoModel");
static_assert(sizeof(FPSBffOverseasRealNameLinkInfoModel) == 0x000010, "Wrong size on FPSBffOverseasRealNameLinkInfoModel");
static_assert(offsetof(FPSBffOverseasRealNameLinkInfoModel, Real_Url) == 0x000000, "Member 'FPSBffOverseasRealNameLinkInfoModel::Real_Url' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSBffOverseasRealNameLinkModel
// 0x0010 (0x0048 - 0x0038)
struct FPSBffOverseasRealNameLinkModel final : public FPSBffBasicModel
{
public:
	struct FPSBffOverseasRealNameLinkInfoModel    Data;                                              // 0x0038(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSBffOverseasRealNameLinkModel) == 0x000008, "Wrong alignment on FPSBffOverseasRealNameLinkModel");
static_assert(sizeof(FPSBffOverseasRealNameLinkModel) == 0x000048, "Wrong size on FPSBffOverseasRealNameLinkModel");
static_assert(offsetof(FPSBffOverseasRealNameLinkModel, Data) == 0x000038, "Member 'FPSBffOverseasRealNameLinkModel::Data' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSdkGamePadLanguagesRow
// 0x0000 (0x00D8 - 0x00D8)
struct FPSdkGamePadLanguagesRow final : public FPSDKLanguageTableRowBase
{
};
static_assert(alignof(FPSdkGamePadLanguagesRow) == 0x000008, "Wrong alignment on FPSdkGamePadLanguagesRow");
static_assert(sizeof(FPSdkGamePadLanguagesRow) == 0x0000D8, "Wrong size on FPSdkGamePadLanguagesRow");

// ScriptStruct PaperSDKCross.PSProtocolEntry
// 0x0020 (0x0020 - 0x0000)
struct FPSProtocolEntry final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSProtocolEntry) == 0x000008, "Wrong alignment on FPSProtocolEntry");
static_assert(sizeof(FPSProtocolEntry) == 0x000020, "Wrong size on FPSProtocolEntry");
static_assert(offsetof(FPSProtocolEntry, Name) == 0x000000, "Member 'FPSProtocolEntry::Name' has a wrong offset!");
static_assert(offsetof(FPSProtocolEntry, URL) == 0x000010, "Member 'FPSProtocolEntry::URL' has a wrong offset!");

// ScriptStruct PaperSDKCross.PSLoginUIConfig
// 0x04B0 (0x04B0 - 0x0000)
struct FPSLoginUIConfig final
{
public:
	class FString                                 LoginUiOverlayColor;                               // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackIcon;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExitIcon;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LargeLogoIcon;                                     // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogBackground;                                  // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ButtonBackground;                                  // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginButtonColor;                                  // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ButtonColor;                                       // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomerServiceUrl;                                // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProtocolColor;                                     // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProtocolCommonColor;                               // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPSProtocolEntry>               ProtocolMap;                                       // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PromptTextColor;                                   // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PromptTextBackground;                              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PromptTextClockIcon;                               // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InputFocusedBackground;                            // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InputNormalBackground;                             // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InputTextColor;                                    // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginTipBackground;                                // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PhoneIcon;                                         // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailIcon;                                         // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuestIcon;                                         // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountDeleteIcon;                                 // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecordListAccountColor;                            // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecordListPromptColor;                             // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VerifyCodeEnableColor;                             // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VerifyCodeDisableColor;                            // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VerifyCodeSplitLineColor;                          // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreeIcon;                                         // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisagreeIcon;                                      // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PasswordInvisibleIcon;                             // 0x01E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PasswordVisibleIcon;                               // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomerServiceIcon;                               // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecentTextColor;                                   // 0x0210(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecentBackgroundIcon;                              // 0x0220(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OftenTextColor;                                    // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OftenBackgroundIcon;                               // 0x0240(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ToastTextColor;                                    // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ToastBackgroundColor;                              // 0x0260(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QrButtonBackground;                                // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountButtonBackground;                           // 0x0280(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecordItemSelectedBackground;                      // 0x0290(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecordItemNormalBackground;                        // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementUiOverlayColor;                           // 0x02B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementUiBackground;                             // 0x02C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementUiDisagreeButtonBackground;               // 0x02D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementUiDisagreeButtonTextColor;                // 0x02E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementUiAgreeButtonBackground;                  // 0x02F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementUiAgreeButtonTextColor;                   // 0x0300(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AgreementUiTitleColor;                             // 0x0310(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PasswordTipBackground;                             // 0x0320(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PasswordTipTextColor;                              // 0x0330(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExplanationTitleIcon;                              // 0x0340(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExplanationTitleColor;                             // 0x0350(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExplanationBorderColor;                            // 0x0360(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Explanation1Color;                                 // 0x0370(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Explanation4Color;                                 // 0x0380(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ExtendTextColor;                                   // 0x0390(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExplanationBackground;                             // 0x03A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExplanationUnCheckedIcon;                          // 0x03B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExplanationCheckedIcon;                            // 0x03C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExplanationProtocolColor;                          // 0x03D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExplanationProtocolCommonColor;                    // 0x03E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AccountOrder;                                      // 0x03F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FacebookIcon;                                      // 0x0400(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GoogleIcon;                                        // 0x0410(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppleIcon;                                         // 0x0420(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PSNIcon;                                           // 0x0430(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TapTapIcon;                                        // 0x0440(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SplitColor;                                        // 0x0450(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SplitTextColor;                                    // 0x0460(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QrCodeRefreshIcon;                                 // 0x0470(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QrCodeSuccessIcon;                                 // 0x0480(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QrCodePromptTextColor;                             // 0x0490(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QrCodePromptSmallTextColor;                        // 0x04A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSLoginUIConfig) == 0x000008, "Wrong alignment on FPSLoginUIConfig");
static_assert(sizeof(FPSLoginUIConfig) == 0x0004B0, "Wrong size on FPSLoginUIConfig");
static_assert(offsetof(FPSLoginUIConfig, LoginUiOverlayColor) == 0x000000, "Member 'FPSLoginUIConfig::LoginUiOverlayColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, BackIcon) == 0x000010, "Member 'FPSLoginUIConfig::BackIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ExitIcon) == 0x000020, "Member 'FPSLoginUIConfig::ExitIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, LargeLogoIcon) == 0x000030, "Member 'FPSLoginUIConfig::LargeLogoIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, DialogBackground) == 0x000040, "Member 'FPSLoginUIConfig::DialogBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ButtonBackground) == 0x000050, "Member 'FPSLoginUIConfig::ButtonBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, LoginButtonColor) == 0x000060, "Member 'FPSLoginUIConfig::LoginButtonColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ButtonColor) == 0x000070, "Member 'FPSLoginUIConfig::ButtonColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, CustomerServiceUrl) == 0x000080, "Member 'FPSLoginUIConfig::CustomerServiceUrl' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ProtocolColor) == 0x000090, "Member 'FPSLoginUIConfig::ProtocolColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ProtocolCommonColor) == 0x0000A0, "Member 'FPSLoginUIConfig::ProtocolCommonColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ProtocolMap) == 0x0000B0, "Member 'FPSLoginUIConfig::ProtocolMap' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, PromptTextColor) == 0x0000C0, "Member 'FPSLoginUIConfig::PromptTextColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, PromptTextBackground) == 0x0000D0, "Member 'FPSLoginUIConfig::PromptTextBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, PromptTextClockIcon) == 0x0000E0, "Member 'FPSLoginUIConfig::PromptTextClockIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, InputFocusedBackground) == 0x0000F0, "Member 'FPSLoginUIConfig::InputFocusedBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, InputNormalBackground) == 0x000100, "Member 'FPSLoginUIConfig::InputNormalBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, InputTextColor) == 0x000110, "Member 'FPSLoginUIConfig::InputTextColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, LoginTipBackground) == 0x000120, "Member 'FPSLoginUIConfig::LoginTipBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, PhoneIcon) == 0x000130, "Member 'FPSLoginUIConfig::PhoneIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, EmailIcon) == 0x000140, "Member 'FPSLoginUIConfig::EmailIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, GuestIcon) == 0x000150, "Member 'FPSLoginUIConfig::GuestIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AccountDeleteIcon) == 0x000160, "Member 'FPSLoginUIConfig::AccountDeleteIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, RecordListAccountColor) == 0x000170, "Member 'FPSLoginUIConfig::RecordListAccountColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, RecordListPromptColor) == 0x000180, "Member 'FPSLoginUIConfig::RecordListPromptColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, VerifyCodeEnableColor) == 0x000190, "Member 'FPSLoginUIConfig::VerifyCodeEnableColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, VerifyCodeDisableColor) == 0x0001A0, "Member 'FPSLoginUIConfig::VerifyCodeDisableColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, VerifyCodeSplitLineColor) == 0x0001B0, "Member 'FPSLoginUIConfig::VerifyCodeSplitLineColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AgreeIcon) == 0x0001C0, "Member 'FPSLoginUIConfig::AgreeIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, DisagreeIcon) == 0x0001D0, "Member 'FPSLoginUIConfig::DisagreeIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, PasswordInvisibleIcon) == 0x0001E0, "Member 'FPSLoginUIConfig::PasswordInvisibleIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, PasswordVisibleIcon) == 0x0001F0, "Member 'FPSLoginUIConfig::PasswordVisibleIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, CustomerServiceIcon) == 0x000200, "Member 'FPSLoginUIConfig::CustomerServiceIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, RecentTextColor) == 0x000210, "Member 'FPSLoginUIConfig::RecentTextColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, RecentBackgroundIcon) == 0x000220, "Member 'FPSLoginUIConfig::RecentBackgroundIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, OftenTextColor) == 0x000230, "Member 'FPSLoginUIConfig::OftenTextColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, OftenBackgroundIcon) == 0x000240, "Member 'FPSLoginUIConfig::OftenBackgroundIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ToastTextColor) == 0x000250, "Member 'FPSLoginUIConfig::ToastTextColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ToastBackgroundColor) == 0x000260, "Member 'FPSLoginUIConfig::ToastBackgroundColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, QrButtonBackground) == 0x000270, "Member 'FPSLoginUIConfig::QrButtonBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AccountButtonBackground) == 0x000280, "Member 'FPSLoginUIConfig::AccountButtonBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, RecordItemSelectedBackground) == 0x000290, "Member 'FPSLoginUIConfig::RecordItemSelectedBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, RecordItemNormalBackground) == 0x0002A0, "Member 'FPSLoginUIConfig::RecordItemNormalBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AgreementUiOverlayColor) == 0x0002B0, "Member 'FPSLoginUIConfig::AgreementUiOverlayColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AgreementUiBackground) == 0x0002C0, "Member 'FPSLoginUIConfig::AgreementUiBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AgreementUiDisagreeButtonBackground) == 0x0002D0, "Member 'FPSLoginUIConfig::AgreementUiDisagreeButtonBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AgreementUiDisagreeButtonTextColor) == 0x0002E0, "Member 'FPSLoginUIConfig::AgreementUiDisagreeButtonTextColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AgreementUiAgreeButtonBackground) == 0x0002F0, "Member 'FPSLoginUIConfig::AgreementUiAgreeButtonBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AgreementUiAgreeButtonTextColor) == 0x000300, "Member 'FPSLoginUIConfig::AgreementUiAgreeButtonTextColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AgreementUiTitleColor) == 0x000310, "Member 'FPSLoginUIConfig::AgreementUiTitleColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, PasswordTipBackground) == 0x000320, "Member 'FPSLoginUIConfig::PasswordTipBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, PasswordTipTextColor) == 0x000330, "Member 'FPSLoginUIConfig::PasswordTipTextColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ExplanationTitleIcon) == 0x000340, "Member 'FPSLoginUIConfig::ExplanationTitleIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ExplanationTitleColor) == 0x000350, "Member 'FPSLoginUIConfig::ExplanationTitleColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ExplanationBorderColor) == 0x000360, "Member 'FPSLoginUIConfig::ExplanationBorderColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, Explanation1Color) == 0x000370, "Member 'FPSLoginUIConfig::Explanation1Color' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, Explanation4Color) == 0x000380, "Member 'FPSLoginUIConfig::Explanation4Color' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ExtendTextColor) == 0x000390, "Member 'FPSLoginUIConfig::ExtendTextColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ExplanationBackground) == 0x0003A0, "Member 'FPSLoginUIConfig::ExplanationBackground' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ExplanationUnCheckedIcon) == 0x0003B0, "Member 'FPSLoginUIConfig::ExplanationUnCheckedIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ExplanationCheckedIcon) == 0x0003C0, "Member 'FPSLoginUIConfig::ExplanationCheckedIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ExplanationProtocolColor) == 0x0003D0, "Member 'FPSLoginUIConfig::ExplanationProtocolColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, ExplanationProtocolCommonColor) == 0x0003E0, "Member 'FPSLoginUIConfig::ExplanationProtocolCommonColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AccountOrder) == 0x0003F0, "Member 'FPSLoginUIConfig::AccountOrder' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, FacebookIcon) == 0x000400, "Member 'FPSLoginUIConfig::FacebookIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, GoogleIcon) == 0x000410, "Member 'FPSLoginUIConfig::GoogleIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, AppleIcon) == 0x000420, "Member 'FPSLoginUIConfig::AppleIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, PSNIcon) == 0x000430, "Member 'FPSLoginUIConfig::PSNIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, TapTapIcon) == 0x000440, "Member 'FPSLoginUIConfig::TapTapIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, SplitColor) == 0x000450, "Member 'FPSLoginUIConfig::SplitColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, SplitTextColor) == 0x000460, "Member 'FPSLoginUIConfig::SplitTextColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, QrCodeRefreshIcon) == 0x000470, "Member 'FPSLoginUIConfig::QrCodeRefreshIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, QrCodeSuccessIcon) == 0x000480, "Member 'FPSLoginUIConfig::QrCodeSuccessIcon' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, QrCodePromptTextColor) == 0x000490, "Member 'FPSLoginUIConfig::QrCodePromptTextColor' has a wrong offset!");
static_assert(offsetof(FPSLoginUIConfig, QrCodePromptSmallTextColor) == 0x0004A0, "Member 'FPSLoginUIConfig::QrCodePromptSmallTextColor' has a wrong offset!");

// ScriptStruct PaperSDKCross.PlatformSDKPSLoginRecord
// 0x0070 (0x0070 - 0x0000)
struct FPlatformSDKPSLoginRecord final
{
public:
	class FString                                 Account;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 thridAvatar;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsGuest;                                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsNew;                                             // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nid;                                               // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Refresh_Token;                                     // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AccountType;                                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         loginTimes;                                        // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCommonUse;                                       // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastLoginAccount;                                  // 0x0065(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Ret;                                               // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlatformSDKPSLoginRecord) == 0x000008, "Wrong alignment on FPlatformSDKPSLoginRecord");
static_assert(sizeof(FPlatformSDKPSLoginRecord) == 0x000070, "Wrong size on FPlatformSDKPSLoginRecord");
static_assert(offsetof(FPlatformSDKPSLoginRecord, Account) == 0x000000, "Member 'FPlatformSDKPSLoginRecord::Account' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, thridAvatar) == 0x000010, "Member 'FPlatformSDKPSLoginRecord::thridAvatar' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, IsGuest) == 0x000020, "Member 'FPlatformSDKPSLoginRecord::IsGuest' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, IsNew) == 0x000024, "Member 'FPlatformSDKPSLoginRecord::IsNew' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, Nid) == 0x000028, "Member 'FPlatformSDKPSLoginRecord::Nid' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, Token) == 0x000038, "Member 'FPlatformSDKPSLoginRecord::Token' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, Refresh_Token) == 0x000048, "Member 'FPlatformSDKPSLoginRecord::Refresh_Token' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, AccountType) == 0x000058, "Member 'FPlatformSDKPSLoginRecord::AccountType' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, Time) == 0x00005C, "Member 'FPlatformSDKPSLoginRecord::Time' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, loginTimes) == 0x000060, "Member 'FPlatformSDKPSLoginRecord::loginTimes' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, isCommonUse) == 0x000064, "Member 'FPlatformSDKPSLoginRecord::isCommonUse' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, LastLoginAccount) == 0x000065, "Member 'FPlatformSDKPSLoginRecord::LastLoginAccount' has a wrong offset!");
static_assert(offsetof(FPlatformSDKPSLoginRecord, Ret) == 0x000068, "Member 'FPlatformSDKPSLoginRecord::Ret' has a wrong offset!");

// ScriptStruct PaperSDKCross.PlatformSDKPSLoginRecords
// 0x0010 (0x0010 - 0x0000)
struct FPlatformSDKPSLoginRecords final
{
public:
	TArray<struct FPlatformSDKPSLoginRecord>      Records;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlatformSDKPSLoginRecords) == 0x000008, "Wrong alignment on FPlatformSDKPSLoginRecords");
static_assert(sizeof(FPlatformSDKPSLoginRecords) == 0x000010, "Wrong size on FPlatformSDKPSLoginRecords");
static_assert(offsetof(FPlatformSDKPSLoginRecords, Records) == 0x000000, "Member 'FPlatformSDKPSLoginRecords::Records' has a wrong offset!");

}

