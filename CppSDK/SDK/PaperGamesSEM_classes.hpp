#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperGamesSEM

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PaperGamesSEM_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class PaperGamesSEM.PaperGamesSEMAbility
// 0x0010 (0x0038 - 0x0028)
class UPaperGamesSEMAbility final : public UObject
{
public:
	class FString                                 ResLayerName;                                      // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMAbility">();
	}
	static class UPaperGamesSEMAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGamesSEMAbility>();
	}
};
static_assert(alignof(UPaperGamesSEMAbility) == 0x000008, "Wrong alignment on UPaperGamesSEMAbility");
static_assert(sizeof(UPaperGamesSEMAbility) == 0x000038, "Wrong size on UPaperGamesSEMAbility");
static_assert(offsetof(UPaperGamesSEMAbility, ResLayerName) == 0x000028, "Member 'UPaperGamesSEMAbility::ResLayerName' has a wrong offset!");

// Class PaperGamesSEM.PaperGamesSEMDataHostBase
// 0x0110 (0x04B8 - 0x03A8)
class APaperGamesSEMDataHostBase : public AActor
{
public:
	class UShapeComponent*                        CollisionComponent;                                // 0x03A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B0[0x70];                                     // 0x03B0(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ObjectType;                                        // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ActorUniqueId;                                     // 0x0428(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_430[0x88];                                     // 0x0430(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetActorType();
	class UUserDefinedStruct* GetDefaultStruct();
	int32 GetObjectID();
	int32 GetSourceId();
	struct FVector GetTriggerData();
	void OnDefaultStructPropertyChanged(const class FString& PropertyName);
	void OnFinishSpawn();
	void OnUpdateDefaultStruct();
	void PostUpdateSplineComponent(const class FString& PointsListStr, ESplinePointType PointType);
	void ResnapActorToGround();
	void SetSourceId(int32 SourceId);
	void SetTriggerData(const struct FVector& InTriggerData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMDataHostBase">();
	}
	static class APaperGamesSEMDataHostBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGamesSEMDataHostBase>();
	}
};
static_assert(alignof(APaperGamesSEMDataHostBase) == 0x000008, "Wrong alignment on APaperGamesSEMDataHostBase");
static_assert(sizeof(APaperGamesSEMDataHostBase) == 0x0004B8, "Wrong size on APaperGamesSEMDataHostBase");
static_assert(offsetof(APaperGamesSEMDataHostBase, CollisionComponent) == 0x0003A8, "Member 'APaperGamesSEMDataHostBase::CollisionComponent' has a wrong offset!");
static_assert(offsetof(APaperGamesSEMDataHostBase, ObjectType) == 0x000420, "Member 'APaperGamesSEMDataHostBase::ObjectType' has a wrong offset!");
static_assert(offsetof(APaperGamesSEMDataHostBase, ActorUniqueId) == 0x000428, "Member 'APaperGamesSEMDataHostBase::ActorUniqueId' has a wrong offset!");

// Class PaperGamesSEM.PaperGamesSEMAttractorNode
// 0x0090 (0x0548 - 0x04B8)
class APaperGamesSEMAttractorNode final : public APaperGamesSEMDataHostBase
{
public:
	uint8                                         Pad_4B8[0x60];                                     // 0x04B8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       SplineComponent;                                   // 0x0518(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APaperGamesSEMAttractorNode*            GroupLeader;                                       // 0x0520(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_528[0x20];                                     // 0x0528(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMAttractorNode">();
	}
	static class APaperGamesSEMAttractorNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGamesSEMAttractorNode>();
	}
};
static_assert(alignof(APaperGamesSEMAttractorNode) == 0x000008, "Wrong alignment on APaperGamesSEMAttractorNode");
static_assert(sizeof(APaperGamesSEMAttractorNode) == 0x000548, "Wrong size on APaperGamesSEMAttractorNode");
static_assert(offsetof(APaperGamesSEMAttractorNode, SplineComponent) == 0x000518, "Member 'APaperGamesSEMAttractorNode::SplineComponent' has a wrong offset!");
static_assert(offsetof(APaperGamesSEMAttractorNode, GroupLeader) == 0x000520, "Member 'APaperGamesSEMAttractorNode::GroupLeader' has a wrong offset!");

// Class PaperGamesSEM.PaperSEMDataSetWrapper
// 0x0040 (0x0068 - 0x0028)
class UPaperSEMDataSetWrapper final : public UObject
{
public:
	TArray<struct FSoftObjectPath>                DataSetList;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FExcelWarperData>               ExcelDataList;                                     // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinkDtData                            LinkDt;                                            // 0x0048(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FName                                   RelatedNodeName;                                   // 0x0058(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RelatedPinName;                                    // 0x0060(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperSEMDataSetWrapper">();
	}
	static class UPaperSEMDataSetWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperSEMDataSetWrapper>();
	}
};
static_assert(alignof(UPaperSEMDataSetWrapper) == 0x000008, "Wrong alignment on UPaperSEMDataSetWrapper");
static_assert(sizeof(UPaperSEMDataSetWrapper) == 0x000068, "Wrong size on UPaperSEMDataSetWrapper");
static_assert(offsetof(UPaperSEMDataSetWrapper, DataSetList) == 0x000028, "Member 'UPaperSEMDataSetWrapper::DataSetList' has a wrong offset!");
static_assert(offsetof(UPaperSEMDataSetWrapper, ExcelDataList) == 0x000038, "Member 'UPaperSEMDataSetWrapper::ExcelDataList' has a wrong offset!");
static_assert(offsetof(UPaperSEMDataSetWrapper, LinkDt) == 0x000048, "Member 'UPaperSEMDataSetWrapper::LinkDt' has a wrong offset!");
static_assert(offsetof(UPaperSEMDataSetWrapper, RelatedNodeName) == 0x000058, "Member 'UPaperSEMDataSetWrapper::RelatedNodeName' has a wrong offset!");
static_assert(offsetof(UPaperSEMDataSetWrapper, RelatedPinName) == 0x000060, "Member 'UPaperSEMDataSetWrapper::RelatedPinName' has a wrong offset!");

// Class PaperGamesSEM.PaperGamesSEMMacroBlueprint
// 0x00A0 (0x0148 - 0x00A8)
class UPaperGamesSEMMacroBlueprint final : public UBlueprint
{
public:
	TMap<class FName, struct FPaperSEMMacroNodeData> NodeDataMap;                                    // 0x00A8(0x0050)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class UPaperSEMDataSetWrapper*> DataSetWrapperMap;                           // 0x00F8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMMacroBlueprint">();
	}
	static class UPaperGamesSEMMacroBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGamesSEMMacroBlueprint>();
	}
};
static_assert(alignof(UPaperGamesSEMMacroBlueprint) == 0x000008, "Wrong alignment on UPaperGamesSEMMacroBlueprint");
static_assert(sizeof(UPaperGamesSEMMacroBlueprint) == 0x000148, "Wrong size on UPaperGamesSEMMacroBlueprint");
static_assert(offsetof(UPaperGamesSEMMacroBlueprint, NodeDataMap) == 0x0000A8, "Member 'UPaperGamesSEMMacroBlueprint::NodeDataMap' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMMacroBlueprint, DataSetWrapperMap) == 0x0000F8, "Member 'UPaperGamesSEMMacroBlueprint::DataSetWrapperMap' has a wrong offset!");

// Class PaperGamesSEM.PaperGamesSEMBlueprint
// 0x0000 (0x00A8 - 0x00A8)
class UPaperGamesSEMBlueprint final : public UBlueprint
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMBlueprint">();
	}
	static class UPaperGamesSEMBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGamesSEMBlueprint>();
	}
};
static_assert(alignof(UPaperGamesSEMBlueprint) == 0x000008, "Wrong alignment on UPaperGamesSEMBlueprint");
static_assert(sizeof(UPaperGamesSEMBlueprint) == 0x0000A8, "Wrong size on UPaperGamesSEMBlueprint");

// Class PaperGamesSEM.PaperGamesSEMBpGeneratedClass
// 0x0000 (0x0360 - 0x0360)
class UPaperGamesSEMBpGeneratedClass final : public UBlueprintGeneratedClass
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMBpGeneratedClass">();
	}
	static class UPaperGamesSEMBpGeneratedClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGamesSEMBpGeneratedClass>();
	}
};
static_assert(alignof(UPaperGamesSEMBpGeneratedClass) == 0x000008, "Wrong alignment on UPaperGamesSEMBpGeneratedClass");
static_assert(sizeof(UPaperGamesSEMBpGeneratedClass) == 0x000360, "Wrong size on UPaperGamesSEMBpGeneratedClass");

// Class PaperGamesSEM.PaperGamesSEMLane
// 0x0018 (0x04D0 - 0x04B8)
class APaperGamesSEMLane final : public APaperGamesSEMDataHostBase
{
public:
	uint8                                         Pad_4B8[0x18];                                     // 0x04B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMLane">();
	}
	static class APaperGamesSEMLane* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGamesSEMLane>();
	}
};
static_assert(alignof(APaperGamesSEMLane) == 0x000008, "Wrong alignment on APaperGamesSEMLane");
static_assert(sizeof(APaperGamesSEMLane) == 0x0004D0, "Wrong size on APaperGamesSEMLane");

// Class PaperGamesSEM.PaperGamesSEMLaneNode
// 0x0028 (0x04E0 - 0x04B8)
class APaperGamesSEMLaneNode final : public APaperGamesSEMDataHostBase
{
public:
	uint8                                         Pad_4B8[0x28];                                     // 0x04B8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMLaneNode">();
	}
	static class APaperGamesSEMLaneNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGamesSEMLaneNode>();
	}
};
static_assert(alignof(APaperGamesSEMLaneNode) == 0x000008, "Wrong alignment on APaperGamesSEMLaneNode");
static_assert(sizeof(APaperGamesSEMLaneNode) == 0x0004E0, "Wrong size on APaperGamesSEMLaneNode");

// Class PaperGamesSEM.PaperGamesSEMLeadingPoint
// 0x0000 (0x04B8 - 0x04B8)
class APaperGamesSEMLeadingPoint final : public APaperGamesSEMDataHostBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMLeadingPoint">();
	}
	static class APaperGamesSEMLeadingPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGamesSEMLeadingPoint>();
	}
};
static_assert(alignof(APaperGamesSEMLeadingPoint) == 0x000008, "Wrong alignment on APaperGamesSEMLeadingPoint");
static_assert(sizeof(APaperGamesSEMLeadingPoint) == 0x0004B8, "Wrong size on APaperGamesSEMLeadingPoint");

// Class PaperGamesSEM.PaperGamesSEMRoad
// 0x0030 (0x04E8 - 0x04B8)
class APaperGamesSEMRoad final : public APaperGamesSEMDataHostBase
{
public:
	uint8                                         Pad_4B8[0x30];                                     // 0x04B8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMRoad">();
	}
	static class APaperGamesSEMRoad* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGamesSEMRoad>();
	}
};
static_assert(alignof(APaperGamesSEMRoad) == 0x000008, "Wrong alignment on APaperGamesSEMRoad");
static_assert(sizeof(APaperGamesSEMRoad) == 0x0004E8, "Wrong size on APaperGamesSEMRoad");

// Class PaperGamesSEM.PaperGamesSEMRoadBox
// 0x0008 (0x04C0 - 0x04B8)
class APaperGamesSEMRoadBox final : public APaperGamesSEMDataHostBase
{
public:
	class UBoxComponent*                          Box;                                               // 0x04B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMRoadBox">();
	}
	static class APaperGamesSEMRoadBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGamesSEMRoadBox>();
	}
};
static_assert(alignof(APaperGamesSEMRoadBox) == 0x000008, "Wrong alignment on APaperGamesSEMRoadBox");
static_assert(sizeof(APaperGamesSEMRoadBox) == 0x0004C0, "Wrong size on APaperGamesSEMRoadBox");
static_assert(offsetof(APaperGamesSEMRoadBox, Box) == 0x0004B8, "Member 'APaperGamesSEMRoadBox::Box' has a wrong offset!");

// Class PaperGamesSEM.PaperGamesSEMRoadData
// 0x0050 (0x0078 - 0x0028)
class UPaperGamesSEMRoadData final : public UObject
{
public:
	TMap<int64, struct FSEMSplineData>            SplineMap;                                         // 0x0028(0x0050)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMRoadData">();
	}
	static class UPaperGamesSEMRoadData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGamesSEMRoadData>();
	}
};
static_assert(alignof(UPaperGamesSEMRoadData) == 0x000008, "Wrong alignment on UPaperGamesSEMRoadData");
static_assert(sizeof(UPaperGamesSEMRoadData) == 0x000078, "Wrong size on UPaperGamesSEMRoadData");
static_assert(offsetof(UPaperGamesSEMRoadData, SplineMap) == 0x000028, "Member 'UPaperGamesSEMRoadData::SplineMap' has a wrong offset!");

// Class PaperGamesSEM.PaperGamesSEMRoadNode
// 0x0018 (0x04D0 - 0x04B8)
class APaperGamesSEMRoadNode final : public APaperGamesSEMDataHostBase
{
public:
	uint8                                         Pad_4B8[0x18];                                     // 0x04B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMRoadNode">();
	}
	static class APaperGamesSEMRoadNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGamesSEMRoadNode>();
	}
};
static_assert(alignof(APaperGamesSEMRoadNode) == 0x000008, "Wrong alignment on APaperGamesSEMRoadNode");
static_assert(sizeof(APaperGamesSEMRoadNode) == 0x0004D0, "Wrong size on APaperGamesSEMRoadNode");

// Class PaperGamesSEM.PaperGamesSEMSettings
// 0x0690 (0x06C8 - 0x0038)
class UPaperGamesSEMSettings final : public UDeveloperSettings
{
public:
	class FString                                 PrevSourceDataPath;                                // 0x0038(0x0010)(Edit, ZeroConstructor, Config, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShowTipsDialog;                                    // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceDataPath;                                    // 0x0050(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 DataLayerRoot;                                     // 0x0060(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 LevelConfigPath;                                   // 0x0070(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         ActivityLevelConfigPath;                           // 0x0080(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	class FString                                 LevelConfigSheet;                                  // 0x0090(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LevelConfigDataStartRow;                           // 0x00A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LevelConfigFieldStartRow;                          // 0x00A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SnapToTerrainCollectionName;                       // 0x00A8(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SnapToTerrainOfsset;                               // 0x00B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESnapToTerrainType                            SpawnerSnapType;                                   // 0x00BC(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DalayerPreviewGridSize;                            // 0x00C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FDatalayerRequireTagsData> DatalayerRequireTags;                              // 0x00C8(0x0050)(Edit, Config, Protected, NativeAccessSpecifierProtected)
	int32                                         LevelIDColumn;                                     // 0x0118(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LevelResColumn;                                    // 0x011C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 LevelIDColumnName;                                 // 0x0120(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 LevelResColumnName;                                // 0x0130(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 EventDataExportPath;                               // 0x0140(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SpawnerInfoExportPath;                             // 0x0150(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 P4ServerURLPath;                                   // 0x0160(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadNetWorkServerInfoExportPath;                   // 0x0170(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 RoadNetWorkClientInfoExportPath;                   // 0x0180(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 AttractorSplineExportPath;                         // 0x0190(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadNodeGapMin;                                    // 0x01A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadHeight;                                        // 0x01A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadNodeGap;                                       // 0x01A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ObjectiveCategory;                                 // 0x01B0(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RoadNetWorkLineSize;                               // 0x01C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RoadNetWorkLineArrowSize;                          // 0x01C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 RoadBoxLinkLineColor;                              // 0x01C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoadBoxLinkLineThickness;                          // 0x01CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsExportSplineUseWorldPosition;                   // 0x01D0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsLoadSplineUseWorldPosition;                     // 0x01D1(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D2[0x2];                                      // 0x01D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoadPtCheckTolerance;                              // 0x01D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 AttractorTemplateRootPath;                         // 0x01D8(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 AttractorGPPDataPath;                              // 0x01E8(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SmartObjectDAPath;                                 // 0x01F8(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 AttractorGroupGPPDataPath;                         // 0x0208(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 X6DesginerConfigsRootPath;                         // 0x0218(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGraphDefaultCreateNodeInfo>    X6CreateQuestDefaultNodes;                         // 0x0228(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	class FString                                 GraphChangelistDescPrefix;                         // 0x0238(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        MarcoFunctionTypeEnumPath;                         // 0x0248(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        MarcoFunctionTypeStructPath;                       // 0x0268(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        MarcoFunctionTypeInfoTablePath;                    // 0x0288(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 FunctionTypeColumnName;                            // 0x02A8(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 FunctionTypeIconColumnName;                        // 0x02B8(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        MarcoDataSetLinkDT;                                // 0x02C8(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 LinkDTTablesColumnName;                            // 0x02E8(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsGraphCheckCircle;                                // 0x02F8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FString>                           SupportCircleNodeCheckSet;                         // 0x0300(0x0050)(Edit, Config, Protected, NativeAccessSpecifierProtected)
	TSet<class FString>                           CircleNodeCheckSet;                                // 0x0350(0x0050)(Edit, Config, Protected, NativeAccessSpecifierProtected)
	TSet<class FString>                           IgnoreCircleNodeCheckSet;                          // 0x03A0(0x0050)(Edit, Config, Protected, NativeAccessSpecifierProtected)
	bool                                          IsConditionNodeExportWithJson;                     // 0x03F0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InputDataDesiredPath;                              // 0x03F8(0x0010)(Edit, ZeroConstructor, Config, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EnableCmdLetParseStyle;                            // 0x0408(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DataParseCmdLetName;                               // 0x0410(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 DataParseCmdLetParam1Name;                         // 0x0420(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 DataParseCmdLetParam2Name;                         // 0x0430(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        ConditionTypeEnumAsset;                            // 0x0440(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        ConditionDataTableAsset;                           // 0x0460(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ConditionCategory;                                 // 0x0480(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        ObjGroupTypeEnumAsset;                             // 0x0490(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        ObjGroupDataTableAsset;                            // 0x04B0(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ObjGroupCategory;                                  // 0x04D0(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSuccessOutputNum;                               // 0x04E0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxFailOutputNum;                                  // 0x04E4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        FuncEventDataTableAsset;                           // 0x04E8(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 FuncEventCategory;                                 // 0x0508(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UUserDefinedEnum>        EventTypeEnum;                                     // 0x0518(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              PlacementInfoDt;                                   // 0x0540(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              ExcelInfoDt;                                       // 0x0568(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSoftObjectPath>                GraphInfoDataTableAssetList;                       // 0x0590(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        GraphCategoryEnumAsset;                            // 0x05A0(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 GraphTagFieldName;                                 // 0x05C0(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 GraphCategoryFieldName;                            // 0x05D0(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 StoryDataExportPath;                               // 0x05E0(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        StoryParamStructAsset;                             // 0x05F0(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ForceIgnoreP4vControl;                             // 0x0610(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PrivateGroupTemplateRootPath;                      // 0x0618(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PublicGroupTemplateRootPath;                       // 0x0628(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSoftObjectPath>                AgileNodeConfigList;                               // 0x0638(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        CustomObjectiveConfig;                             // 0x0648(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        DataLayerTagPath;                                  // 0x0668(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        GameFetureTagPath;                                 // 0x0688(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        SpawnTagPath;                                      // 0x06A8(0x0020)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMSettings">();
	}
	static class UPaperGamesSEMSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGamesSEMSettings>();
	}
};
static_assert(alignof(UPaperGamesSEMSettings) == 0x000008, "Wrong alignment on UPaperGamesSEMSettings");
static_assert(sizeof(UPaperGamesSEMSettings) == 0x0006C8, "Wrong size on UPaperGamesSEMSettings");
static_assert(offsetof(UPaperGamesSEMSettings, PrevSourceDataPath) == 0x000038, "Member 'UPaperGamesSEMSettings::PrevSourceDataPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, ShowTipsDialog) == 0x000048, "Member 'UPaperGamesSEMSettings::ShowTipsDialog' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, SourceDataPath) == 0x000050, "Member 'UPaperGamesSEMSettings::SourceDataPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, DataLayerRoot) == 0x000060, "Member 'UPaperGamesSEMSettings::DataLayerRoot' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, LevelConfigPath) == 0x000070, "Member 'UPaperGamesSEMSettings::LevelConfigPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, ActivityLevelConfigPath) == 0x000080, "Member 'UPaperGamesSEMSettings::ActivityLevelConfigPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, LevelConfigSheet) == 0x000090, "Member 'UPaperGamesSEMSettings::LevelConfigSheet' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, LevelConfigDataStartRow) == 0x0000A0, "Member 'UPaperGamesSEMSettings::LevelConfigDataStartRow' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, LevelConfigFieldStartRow) == 0x0000A4, "Member 'UPaperGamesSEMSettings::LevelConfigFieldStartRow' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, SnapToTerrainCollectionName) == 0x0000A8, "Member 'UPaperGamesSEMSettings::SnapToTerrainCollectionName' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, SnapToTerrainOfsset) == 0x0000B8, "Member 'UPaperGamesSEMSettings::SnapToTerrainOfsset' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, SpawnerSnapType) == 0x0000BC, "Member 'UPaperGamesSEMSettings::SpawnerSnapType' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, DalayerPreviewGridSize) == 0x0000C0, "Member 'UPaperGamesSEMSettings::DalayerPreviewGridSize' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, DatalayerRequireTags) == 0x0000C8, "Member 'UPaperGamesSEMSettings::DatalayerRequireTags' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, LevelIDColumn) == 0x000118, "Member 'UPaperGamesSEMSettings::LevelIDColumn' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, LevelResColumn) == 0x00011C, "Member 'UPaperGamesSEMSettings::LevelResColumn' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, LevelIDColumnName) == 0x000120, "Member 'UPaperGamesSEMSettings::LevelIDColumnName' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, LevelResColumnName) == 0x000130, "Member 'UPaperGamesSEMSettings::LevelResColumnName' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, EventDataExportPath) == 0x000140, "Member 'UPaperGamesSEMSettings::EventDataExportPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, SpawnerInfoExportPath) == 0x000150, "Member 'UPaperGamesSEMSettings::SpawnerInfoExportPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, P4ServerURLPath) == 0x000160, "Member 'UPaperGamesSEMSettings::P4ServerURLPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, RoadNetWorkServerInfoExportPath) == 0x000170, "Member 'UPaperGamesSEMSettings::RoadNetWorkServerInfoExportPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, RoadNetWorkClientInfoExportPath) == 0x000180, "Member 'UPaperGamesSEMSettings::RoadNetWorkClientInfoExportPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, AttractorSplineExportPath) == 0x000190, "Member 'UPaperGamesSEMSettings::AttractorSplineExportPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, RoadNodeGapMin) == 0x0001A0, "Member 'UPaperGamesSEMSettings::RoadNodeGapMin' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, RoadHeight) == 0x0001A4, "Member 'UPaperGamesSEMSettings::RoadHeight' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, RoadNodeGap) == 0x0001A8, "Member 'UPaperGamesSEMSettings::RoadNodeGap' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, ObjectiveCategory) == 0x0001B0, "Member 'UPaperGamesSEMSettings::ObjectiveCategory' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, RoadNetWorkLineSize) == 0x0001C0, "Member 'UPaperGamesSEMSettings::RoadNetWorkLineSize' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, RoadNetWorkLineArrowSize) == 0x0001C4, "Member 'UPaperGamesSEMSettings::RoadNetWorkLineArrowSize' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, RoadBoxLinkLineColor) == 0x0001C8, "Member 'UPaperGamesSEMSettings::RoadBoxLinkLineColor' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, RoadBoxLinkLineThickness) == 0x0001CC, "Member 'UPaperGamesSEMSettings::RoadBoxLinkLineThickness' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, bIsExportSplineUseWorldPosition) == 0x0001D0, "Member 'UPaperGamesSEMSettings::bIsExportSplineUseWorldPosition' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, bIsLoadSplineUseWorldPosition) == 0x0001D1, "Member 'UPaperGamesSEMSettings::bIsLoadSplineUseWorldPosition' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, RoadPtCheckTolerance) == 0x0001D4, "Member 'UPaperGamesSEMSettings::RoadPtCheckTolerance' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, AttractorTemplateRootPath) == 0x0001D8, "Member 'UPaperGamesSEMSettings::AttractorTemplateRootPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, AttractorGPPDataPath) == 0x0001E8, "Member 'UPaperGamesSEMSettings::AttractorGPPDataPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, SmartObjectDAPath) == 0x0001F8, "Member 'UPaperGamesSEMSettings::SmartObjectDAPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, AttractorGroupGPPDataPath) == 0x000208, "Member 'UPaperGamesSEMSettings::AttractorGroupGPPDataPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, X6DesginerConfigsRootPath) == 0x000218, "Member 'UPaperGamesSEMSettings::X6DesginerConfigsRootPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, X6CreateQuestDefaultNodes) == 0x000228, "Member 'UPaperGamesSEMSettings::X6CreateQuestDefaultNodes' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, GraphChangelistDescPrefix) == 0x000238, "Member 'UPaperGamesSEMSettings::GraphChangelistDescPrefix' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, MarcoFunctionTypeEnumPath) == 0x000248, "Member 'UPaperGamesSEMSettings::MarcoFunctionTypeEnumPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, MarcoFunctionTypeStructPath) == 0x000268, "Member 'UPaperGamesSEMSettings::MarcoFunctionTypeStructPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, MarcoFunctionTypeInfoTablePath) == 0x000288, "Member 'UPaperGamesSEMSettings::MarcoFunctionTypeInfoTablePath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, FunctionTypeColumnName) == 0x0002A8, "Member 'UPaperGamesSEMSettings::FunctionTypeColumnName' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, FunctionTypeIconColumnName) == 0x0002B8, "Member 'UPaperGamesSEMSettings::FunctionTypeIconColumnName' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, MarcoDataSetLinkDT) == 0x0002C8, "Member 'UPaperGamesSEMSettings::MarcoDataSetLinkDT' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, LinkDTTablesColumnName) == 0x0002E8, "Member 'UPaperGamesSEMSettings::LinkDTTablesColumnName' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, IsGraphCheckCircle) == 0x0002F8, "Member 'UPaperGamesSEMSettings::IsGraphCheckCircle' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, SupportCircleNodeCheckSet) == 0x000300, "Member 'UPaperGamesSEMSettings::SupportCircleNodeCheckSet' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, CircleNodeCheckSet) == 0x000350, "Member 'UPaperGamesSEMSettings::CircleNodeCheckSet' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, IgnoreCircleNodeCheckSet) == 0x0003A0, "Member 'UPaperGamesSEMSettings::IgnoreCircleNodeCheckSet' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, IsConditionNodeExportWithJson) == 0x0003F0, "Member 'UPaperGamesSEMSettings::IsConditionNodeExportWithJson' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, InputDataDesiredPath) == 0x0003F8, "Member 'UPaperGamesSEMSettings::InputDataDesiredPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, EnableCmdLetParseStyle) == 0x000408, "Member 'UPaperGamesSEMSettings::EnableCmdLetParseStyle' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, DataParseCmdLetName) == 0x000410, "Member 'UPaperGamesSEMSettings::DataParseCmdLetName' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, DataParseCmdLetParam1Name) == 0x000420, "Member 'UPaperGamesSEMSettings::DataParseCmdLetParam1Name' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, DataParseCmdLetParam2Name) == 0x000430, "Member 'UPaperGamesSEMSettings::DataParseCmdLetParam2Name' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, ConditionTypeEnumAsset) == 0x000440, "Member 'UPaperGamesSEMSettings::ConditionTypeEnumAsset' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, ConditionDataTableAsset) == 0x000460, "Member 'UPaperGamesSEMSettings::ConditionDataTableAsset' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, ConditionCategory) == 0x000480, "Member 'UPaperGamesSEMSettings::ConditionCategory' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, ObjGroupTypeEnumAsset) == 0x000490, "Member 'UPaperGamesSEMSettings::ObjGroupTypeEnumAsset' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, ObjGroupDataTableAsset) == 0x0004B0, "Member 'UPaperGamesSEMSettings::ObjGroupDataTableAsset' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, ObjGroupCategory) == 0x0004D0, "Member 'UPaperGamesSEMSettings::ObjGroupCategory' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, MaxSuccessOutputNum) == 0x0004E0, "Member 'UPaperGamesSEMSettings::MaxSuccessOutputNum' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, MaxFailOutputNum) == 0x0004E4, "Member 'UPaperGamesSEMSettings::MaxFailOutputNum' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, FuncEventDataTableAsset) == 0x0004E8, "Member 'UPaperGamesSEMSettings::FuncEventDataTableAsset' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, FuncEventCategory) == 0x000508, "Member 'UPaperGamesSEMSettings::FuncEventCategory' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, EventTypeEnum) == 0x000518, "Member 'UPaperGamesSEMSettings::EventTypeEnum' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, PlacementInfoDt) == 0x000540, "Member 'UPaperGamesSEMSettings::PlacementInfoDt' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, ExcelInfoDt) == 0x000568, "Member 'UPaperGamesSEMSettings::ExcelInfoDt' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, GraphInfoDataTableAssetList) == 0x000590, "Member 'UPaperGamesSEMSettings::GraphInfoDataTableAssetList' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, GraphCategoryEnumAsset) == 0x0005A0, "Member 'UPaperGamesSEMSettings::GraphCategoryEnumAsset' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, GraphTagFieldName) == 0x0005C0, "Member 'UPaperGamesSEMSettings::GraphTagFieldName' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, GraphCategoryFieldName) == 0x0005D0, "Member 'UPaperGamesSEMSettings::GraphCategoryFieldName' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, StoryDataExportPath) == 0x0005E0, "Member 'UPaperGamesSEMSettings::StoryDataExportPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, StoryParamStructAsset) == 0x0005F0, "Member 'UPaperGamesSEMSettings::StoryParamStructAsset' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, ForceIgnoreP4vControl) == 0x000610, "Member 'UPaperGamesSEMSettings::ForceIgnoreP4vControl' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, PrivateGroupTemplateRootPath) == 0x000618, "Member 'UPaperGamesSEMSettings::PrivateGroupTemplateRootPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, PublicGroupTemplateRootPath) == 0x000628, "Member 'UPaperGamesSEMSettings::PublicGroupTemplateRootPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, AgileNodeConfigList) == 0x000638, "Member 'UPaperGamesSEMSettings::AgileNodeConfigList' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, CustomObjectiveConfig) == 0x000648, "Member 'UPaperGamesSEMSettings::CustomObjectiveConfig' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, DataLayerTagPath) == 0x000668, "Member 'UPaperGamesSEMSettings::DataLayerTagPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, GameFetureTagPath) == 0x000688, "Member 'UPaperGamesSEMSettings::GameFetureTagPath' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMSettings, SpawnTagPath) == 0x0006A8, "Member 'UPaperGamesSEMSettings::SpawnTagPath' has a wrong offset!");

// Class PaperGamesSEM.PaperGamesSEMCustomLocalSettings
// 0x0008 (0x0030 - 0x0028)
class UPaperGamesSEMCustomLocalSettings final : public UObject
{
public:
	bool                                          IsDatalayerAutoOpenWhenEditorStart;                // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMCustomLocalSettings">();
	}
	static class UPaperGamesSEMCustomLocalSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGamesSEMCustomLocalSettings>();
	}
};
static_assert(alignof(UPaperGamesSEMCustomLocalSettings) == 0x000008, "Wrong alignment on UPaperGamesSEMCustomLocalSettings");
static_assert(sizeof(UPaperGamesSEMCustomLocalSettings) == 0x000030, "Wrong size on UPaperGamesSEMCustomLocalSettings");
static_assert(offsetof(UPaperGamesSEMCustomLocalSettings, IsDatalayerAutoOpenWhenEditorStart) == 0x000028, "Member 'UPaperGamesSEMCustomLocalSettings::IsDatalayerAutoOpenWhenEditorStart' has a wrong offset!");

// Class PaperGamesSEM.PaperGamesSEMPublishSettings
// 0x0020 (0x0048 - 0x0028)
class UPaperGamesSEMPublishSettings final : public UObject
{
public:
	bool                                          UseDatalayerMoveForX6;                             // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDatalayerAutoOpenForX6;                         // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNewDatalayerCheckoutFunction;                   // 0x002A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNewDatalayerDisplayTagMode;                     // 0x002B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TestGFMapIds;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          EnableGraphRefToolTip;                             // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMPublishSettings">();
	}
	static class UPaperGamesSEMPublishSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGamesSEMPublishSettings>();
	}
};
static_assert(alignof(UPaperGamesSEMPublishSettings) == 0x000008, "Wrong alignment on UPaperGamesSEMPublishSettings");
static_assert(sizeof(UPaperGamesSEMPublishSettings) == 0x000048, "Wrong size on UPaperGamesSEMPublishSettings");
static_assert(offsetof(UPaperGamesSEMPublishSettings, UseDatalayerMoveForX6) == 0x000028, "Member 'UPaperGamesSEMPublishSettings::UseDatalayerMoveForX6' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMPublishSettings, UseDatalayerAutoOpenForX6) == 0x000029, "Member 'UPaperGamesSEMPublishSettings::UseDatalayerAutoOpenForX6' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMPublishSettings, UseNewDatalayerCheckoutFunction) == 0x00002A, "Member 'UPaperGamesSEMPublishSettings::UseNewDatalayerCheckoutFunction' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMPublishSettings, UseNewDatalayerDisplayTagMode) == 0x00002B, "Member 'UPaperGamesSEMPublishSettings::UseNewDatalayerDisplayTagMode' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMPublishSettings, TestGFMapIds) == 0x000030, "Member 'UPaperGamesSEMPublishSettings::TestGFMapIds' has a wrong offset!");
static_assert(offsetof(UPaperGamesSEMPublishSettings, EnableGraphRefToolTip) == 0x000040, "Member 'UPaperGamesSEMPublishSettings::EnableGraphRefToolTip' has a wrong offset!");

// Class PaperGamesSEM.PaperGamesSEMSplineRoad
// 0x0028 (0x04E0 - 0x04B8)
class APaperGamesSEMSplineRoad final : public APaperGamesSEMDataHostBase
{
public:
	class USplineComponent*                       Spline;                                            // 0x04B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             DTRoadTemp;                                        // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MyTempName;                                        // 0x04C8(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D8[0x8];                                      // 0x04D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	double GetSplineWidth();
	void OnSplineFinishedInitialize();
	void SetSplineColor(const class FString& ColorParamName);
	void SetSplineWidth(float InWidth);
	void SetTemplete(const class FString& TempName);
	void UpdateInstanceSplineMeshComponents();
	void UpdateSplineComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMSplineRoad">();
	}
	static class APaperGamesSEMSplineRoad* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperGamesSEMSplineRoad>();
	}
};
static_assert(alignof(APaperGamesSEMSplineRoad) == 0x000008, "Wrong alignment on APaperGamesSEMSplineRoad");
static_assert(sizeof(APaperGamesSEMSplineRoad) == 0x0004E0, "Wrong size on APaperGamesSEMSplineRoad");
static_assert(offsetof(APaperGamesSEMSplineRoad, Spline) == 0x0004B8, "Member 'APaperGamesSEMSplineRoad::Spline' has a wrong offset!");
static_assert(offsetof(APaperGamesSEMSplineRoad, DTRoadTemp) == 0x0004C0, "Member 'APaperGamesSEMSplineRoad::DTRoadTemp' has a wrong offset!");
static_assert(offsetof(APaperGamesSEMSplineRoad, MyTempName) == 0x0004C8, "Member 'APaperGamesSEMSplineRoad::MyTempName' has a wrong offset!");

// Class PaperGamesSEM.PaperGamesSEMObjectInfo
// 0x0038 (0x0060 - 0x0028)
class UPaperGamesSEMObjectInfo final : public UObject
{
public:
	uint8                                         Pad_28[0x28];                                      // 0x0028(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AssetPath;                                         // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGamesSEMObjectInfo">();
	}
	static class UPaperGamesSEMObjectInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGamesSEMObjectInfo>();
	}
};
static_assert(alignof(UPaperGamesSEMObjectInfo) == 0x000008, "Wrong alignment on UPaperGamesSEMObjectInfo");
static_assert(sizeof(UPaperGamesSEMObjectInfo) == 0x000060, "Wrong size on UPaperGamesSEMObjectInfo");
static_assert(offsetof(UPaperGamesSEMObjectInfo, AssetPath) == 0x000050, "Member 'UPaperGamesSEMObjectInfo::AssetPath' has a wrong offset!");

}

