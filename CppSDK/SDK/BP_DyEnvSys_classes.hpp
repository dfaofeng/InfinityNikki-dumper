#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DyEnvSys

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DynamicEnvironmentSystem_structs.hpp"
#include "BP_TODSystem_Master_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DyEnvSys.BP_DyEnvSys_C
// 0x0400 (0x1A90 - 0x1690)
class ABP_DyEnvSys_C final : public ABP_TODSystem_Master_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DyEnvSys_C;                      // 0x1688(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  PostProcessLut;                                    // 0x1690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EdCameraLocation;                                  // 0x1698(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BeginTime;                                         // 0x16B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DyEnvWeathers_C*                    Ref_DynamicWeathers;                               // 0x16B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          DyEnvTransitioning;                                // 0x16C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseServerTime;                                     // 0x16C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C2[0x6];                                     // 0x16C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DynamicWeatherInterp;                              // 0x16C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TransitionTime;                                    // 0x16D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VolumeImmediate;                                   // 0x16D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16D9[0x7];                                     // 0x16D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_DyEnvCamMgr_C*                      Ref_CamMgr;                                        // 0x16E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              ED_LampState;                                      // 0x16E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FWeatherBaseLerpConfig                 WeatherFinal;                                      // 0x16F8(0x0310)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        SunTrackModifier;                                  // 0x1A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ExternalLevelConfig;                               // 0x1A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SunShiftingCurve;                                  // 0x1A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        PinSunSetTime;                                     // 0x1A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PinSunRiseTime;                                    // 0x1A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          U;                                                 // 0x1A30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A31[0x7];                                     // 0x1A31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               vcMID;                                             // 0x1A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          UpdatePlayerPos;                                   // 0x1A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A41[0x3];                                     // 0x1A41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrecisionFocusShadowScale;                         // 0x1A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FocusShadowCurve;                                  // 0x1A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bPause;                                            // 0x1A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A51[0x7];                                     // 0x1A51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LightOnTime;                                       // 0x1A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightOffTime;                                      // 0x1A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SA_LUTFrameDistribute;                             // 0x1A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SA_LUTFrameDistribute_Intervention;                // 0x1A70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStarSea;                                         // 0x1A71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A72[0x2];                                     // 0x1A72(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StarSeaDayMode;                                    // 0x1A74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LerpingToHost;                                     // 0x1A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A79[0x7];                                     // 0x1A79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LerpingSpeed;                                      // 0x1A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ErrorTolerance;                                    // 0x1A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void World_Debug_Ash_Change(double Value);
	void UserConstructionScript();
	void UpdateVolumeSwap();
	void UpdateTimeStamp(const struct FTimeStamp& TimeStamp1, const struct FS_TimeStamp& TimeStamp);
	void UpdateStreetLight();
	void Update_Final_Param();
	void ToggleStreetLamps(bool On);
	void TOD_UpdateSunRotationByAbility(double PitchValue, double YawValue);
	void TOD_StopUpdateSunRotationByAbility();
	void Time_Update_LS();
	void Time_Update_From_Host(double* ToHost);
	void Time_Update();
	void StylizedLut(double LutIntensity);
	void SetUseServerTime(bool CanUse);
	void SetRegionLamps(double Percent, int32 RegionId);
	void SetMoonCurve(const struct FFloatCurve& Curve);
	void SetDenseFogColor(const struct FLinearColor& Color);
	void SetDenseFog(double Intensity, double TransitionTime_0);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void PrecisionShadow(bool isEnter);
	void PostConstruct();
	void OnActorBeginOverlapWithVolume(class ADynamicWeatherVolume* SrcVolume);
	void Manual_Operation_TOD(double Time);
	void Low_Platform_SkyAtmosphere();
	void LoadCurrentLightInfo();
	void Initi_Tod_Sys();
	void InitForLua();
	void GetWeatherFinal(struct FWeatherBaseLerpConfig* Weather_Setting);
	void GetTODFinal(struct FTODLerpConfig* TODSetting);
	void GetRoleFinal(struct FCharacterLerpConfig* Character_Setting);
	void GetEnvFinal(struct FEnvironmentLerpConfig* Environment_Setting);
	void ExecuteUbergraph_BP_DyEnvSys(int32 EntryPoint);
	void DeInitForLua();
	void ChangeDyEnvVolume();
	void Calculat_Dy_Env_Interp(double Duration, bool Immediate, bool Pause);
	void BPI_WeatherData(class UClass* WeatherPreset);
	void BPI_WeatherChanged(const class FString& RegionName, const class FString& UnloadWeatherName, const class FString& LoadWeatherName);
	void BPI_TODTime(double Time);
	void BPI_TodState();
	void BPI_SaveAsset(bool OnlySyncContent, bool OnlyWriteParam);
	void BPI_ReloadFile();
	void BPI_EditorUpdateRole(const struct FLinearColor& LocalLightColor);
	void BPI_EditorUpdate();
	void BPI_CLFSPostContruct();
	void BP_RemovePreRequisitePlayerPawn();
	void BP_AddPreRequisitePlayerPawn();
	void Blend_SkyTexture2D();
	void Blend_SkyLight_Cubemap();

	class FString GetModuleName() const;
	class FString Get_Module_Name() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DyEnvSys_C">();
	}
	static class ABP_DyEnvSys_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DyEnvSys_C>();
	}
};
static_assert(alignof(ABP_DyEnvSys_C) == 0x000010, "Wrong alignment on ABP_DyEnvSys_C");
static_assert(sizeof(ABP_DyEnvSys_C) == 0x001A90, "Wrong size on ABP_DyEnvSys_C");
static_assert(offsetof(ABP_DyEnvSys_C, UberGraphFrame_BP_DyEnvSys_C) == 0x001688, "Member 'ABP_DyEnvSys_C::UberGraphFrame_BP_DyEnvSys_C' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, PostProcessLut) == 0x001690, "Member 'ABP_DyEnvSys_C::PostProcessLut' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, EdCameraLocation) == 0x001698, "Member 'ABP_DyEnvSys_C::EdCameraLocation' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, BeginTime) == 0x0016B0, "Member 'ABP_DyEnvSys_C::BeginTime' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, Ref_DynamicWeathers) == 0x0016B8, "Member 'ABP_DyEnvSys_C::Ref_DynamicWeathers' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, DyEnvTransitioning) == 0x0016C0, "Member 'ABP_DyEnvSys_C::DyEnvTransitioning' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, UseServerTime) == 0x0016C1, "Member 'ABP_DyEnvSys_C::UseServerTime' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, DynamicWeatherInterp) == 0x0016C8, "Member 'ABP_DyEnvSys_C::DynamicWeatherInterp' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, TransitionTime) == 0x0016D0, "Member 'ABP_DyEnvSys_C::TransitionTime' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, VolumeImmediate) == 0x0016D8, "Member 'ABP_DyEnvSys_C::VolumeImmediate' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, Ref_CamMgr) == 0x0016E0, "Member 'ABP_DyEnvSys_C::Ref_CamMgr' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, ED_LampState) == 0x0016E8, "Member 'ABP_DyEnvSys_C::ED_LampState' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, WeatherFinal) == 0x0016F8, "Member 'ABP_DyEnvSys_C::WeatherFinal' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, SunTrackModifier) == 0x001A08, "Member 'ABP_DyEnvSys_C::SunTrackModifier' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, ExternalLevelConfig) == 0x001A10, "Member 'ABP_DyEnvSys_C::ExternalLevelConfig' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, SunShiftingCurve) == 0x001A18, "Member 'ABP_DyEnvSys_C::SunShiftingCurve' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, PinSunSetTime) == 0x001A20, "Member 'ABP_DyEnvSys_C::PinSunSetTime' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, PinSunRiseTime) == 0x001A28, "Member 'ABP_DyEnvSys_C::PinSunRiseTime' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, U) == 0x001A30, "Member 'ABP_DyEnvSys_C::U' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, vcMID) == 0x001A38, "Member 'ABP_DyEnvSys_C::vcMID' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, UpdatePlayerPos) == 0x001A40, "Member 'ABP_DyEnvSys_C::UpdatePlayerPos' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, PrecisionFocusShadowScale) == 0x001A44, "Member 'ABP_DyEnvSys_C::PrecisionFocusShadowScale' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, FocusShadowCurve) == 0x001A48, "Member 'ABP_DyEnvSys_C::FocusShadowCurve' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, bPause) == 0x001A50, "Member 'ABP_DyEnvSys_C::bPause' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, LightOnTime) == 0x001A58, "Member 'ABP_DyEnvSys_C::LightOnTime' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, LightOffTime) == 0x001A60, "Member 'ABP_DyEnvSys_C::LightOffTime' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, SA_LUTFrameDistribute) == 0x001A68, "Member 'ABP_DyEnvSys_C::SA_LUTFrameDistribute' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, SA_LUTFrameDistribute_Intervention) == 0x001A70, "Member 'ABP_DyEnvSys_C::SA_LUTFrameDistribute_Intervention' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, IsStarSea) == 0x001A71, "Member 'ABP_DyEnvSys_C::IsStarSea' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, StarSeaDayMode) == 0x001A74, "Member 'ABP_DyEnvSys_C::StarSeaDayMode' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, LerpingToHost) == 0x001A78, "Member 'ABP_DyEnvSys_C::LerpingToHost' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, LerpingSpeed) == 0x001A80, "Member 'ABP_DyEnvSys_C::LerpingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSys_C, ErrorTolerance) == 0x001A88, "Member 'ABP_DyEnvSys_C::ErrorTolerance' has a wrong offset!");

}

