#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6DynamicEnvironmentLibrary

#include "Basic.hpp"

#include "Enum_FunctionalAtmosphereType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DynamicEnvironmentSystem_structs.hpp"
#include "Enum_WeatherType_structs.hpp"
#include "Enum_WeatherIntensity_structs.hpp"
#include "Enum_WindDirection_structs.hpp"
#include "Enum_WindIntensity_structs.hpp"
#include "Enum_TemperatureBodyType_structs.hpp"
#include "S_WeatherState_structs.hpp"


namespace SDK::Params
{

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.UpdateWeatherInternal
// 0x0040 (0x0040 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_UpdateWeatherInternal final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_WeatherState                        weatherParams;                                     // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_UpdateWeatherInternal) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_UpdateWeatherInternal");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_UpdateWeatherInternal) == 0x000040, "Wrong size on X6DynamicEnvironmentLibrary_C_UpdateWeatherInternal");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeatherInternal, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeatherInternal::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeatherInternal, weatherParams) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeatherInternal::weatherParams' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeatherInternal, __WorldContext) == 0x000038, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeatherInternal::__WorldContext' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.UpdateWeather
// 0x0078 (0x0078 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_UpdateWeather final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 WeatherName;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Immediate;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DayNight;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Intensity;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransitionTime;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartBlendAlpha;                                   // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_WeatherState                        K2Node_MakeStruct_S_WeatherState;                  // 0x0048(0x0030)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_UpdateWeather) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_UpdateWeather");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_UpdateWeather) == 0x000078, "Wrong size on X6DynamicEnvironmentLibrary_C_UpdateWeather");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeather, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeather::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeather, WeatherName) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeather::WeatherName' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeather, Immediate) == 0x000018, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeather::Immediate' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeather, DayNight) == 0x00001C, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeather::DayNight' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeather, Intensity) == 0x000020, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeather::Intensity' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeather, TransitionTime) == 0x000028, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeather::TransitionTime' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeather, StartBlendAlpha) == 0x000030, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeather::StartBlendAlpha' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeather, __WorldContext) == 0x000038, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeather::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeather, CallFunc_Conv_StringToName_ReturnValue) == 0x000040, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeather::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_UpdateWeather, K2Node_MakeStruct_S_WeatherState) == 0x000048, "Member 'X6DynamicEnvironmentLibrary_C_UpdateWeather::K2Node_MakeStruct_S_WeatherState' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.ToggleStreetLamps
// 0x0018 (0x0018 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_ToggleStreetLamps final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          On;                                                // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_ToggleStreetLamps) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_ToggleStreetLamps");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_ToggleStreetLamps) == 0x000018, "Wrong size on X6DynamicEnvironmentLibrary_C_ToggleStreetLamps");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ToggleStreetLamps, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_ToggleStreetLamps::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ToggleStreetLamps, On) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_ToggleStreetLamps::On' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ToggleStreetLamps, __WorldContext) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_ToggleStreetLamps::__WorldContext' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.TODLevelBeginPlay
// 0x0040 (0x0040 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_TODLevelBeginPlay final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimeStamp                             TimeConfigInfo;                                    // 0x0010(0x002C)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_TODLevelBeginPlay) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_TODLevelBeginPlay");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_TODLevelBeginPlay) == 0x000040, "Wrong size on X6DynamicEnvironmentLibrary_C_TODLevelBeginPlay");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_TODLevelBeginPlay, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_TODLevelBeginPlay::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_TODLevelBeginPlay, __WorldContext) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_TODLevelBeginPlay::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_TODLevelBeginPlay, TimeConfigInfo) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_TODLevelBeginPlay::TimeConfigInfo' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.SetWindForce
// 0x0330 (0x0330 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_SetWindForce final
{
public:
	struct FLinearColor                           Force;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ExternalWeatherParam;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FWeatherBaseLerpConfig                 K2Node_SetFieldsInStruct_StructOut;                // 0x0020(0x0310)()
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_SetWindForce) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_SetWindForce");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_SetWindForce) == 0x000330, "Wrong size on X6DynamicEnvironmentLibrary_C_SetWindForce");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWindForce, Force) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_SetWindForce::Force' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWindForce, __WorldContext) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_SetWindForce::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWindForce, ExternalWeatherParam) == 0x000018, "Member 'X6DynamicEnvironmentLibrary_C_SetWindForce::ExternalWeatherParam' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWindForce, K2Node_SetFieldsInStruct_StructOut) == 0x000020, "Member 'X6DynamicEnvironmentLibrary_C_SetWindForce::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.SetWindCfg
// 0x0630 (0x0630 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_SetWindCfg final
{
public:
	struct FWeatherBaseLerpConfig                 cfg;                                               // 0x0000(0x0310)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ExternalWeatherParam;                              // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FWeatherBaseLerpConfig                 K2Node_SetFieldsInStruct_StructOut;                // 0x0320(0x0310)()
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_SetWindCfg) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_SetWindCfg");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_SetWindCfg) == 0x000630, "Wrong size on X6DynamicEnvironmentLibrary_C_SetWindCfg");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWindCfg, cfg) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_SetWindCfg::cfg' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWindCfg, __WorldContext) == 0x000310, "Member 'X6DynamicEnvironmentLibrary_C_SetWindCfg::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWindCfg, ExternalWeatherParam) == 0x000318, "Member 'X6DynamicEnvironmentLibrary_C_SetWindCfg::ExternalWeatherParam' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWindCfg, K2Node_SetFieldsInStruct_StructOut) == 0x000320, "Member 'X6DynamicEnvironmentLibrary_C_SetWindCfg::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.SetWeatherCfg
// 0x0630 (0x0630 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_SetWeatherCfg final
{
public:
	struct FWeatherBaseLerpConfig                 cfg;                                               // 0x0000(0x0310)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ExternalWeatherParam;                              // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FWeatherBaseLerpConfig                 K2Node_SetFieldsInStruct_StructOut;                // 0x0320(0x0310)()
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_SetWeatherCfg) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_SetWeatherCfg");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_SetWeatherCfg) == 0x000630, "Wrong size on X6DynamicEnvironmentLibrary_C_SetWeatherCfg");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWeatherCfg, cfg) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_SetWeatherCfg::cfg' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWeatherCfg, __WorldContext) == 0x000310, "Member 'X6DynamicEnvironmentLibrary_C_SetWeatherCfg::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWeatherCfg, ExternalWeatherParam) == 0x000318, "Member 'X6DynamicEnvironmentLibrary_C_SetWeatherCfg::ExternalWeatherParam' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetWeatherCfg, K2Node_SetFieldsInStruct_StructOut) == 0x000320, "Member 'X6DynamicEnvironmentLibrary_C_SetWeatherCfg::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.SetRegionLampsPercent
// 0x0018 (0x0018 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_SetRegionLampsPercent final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Percent;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_SetRegionLampsPercent) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_SetRegionLampsPercent");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_SetRegionLampsPercent) == 0x000018, "Wrong size on X6DynamicEnvironmentLibrary_C_SetRegionLampsPercent");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetRegionLampsPercent, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_SetRegionLampsPercent::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetRegionLampsPercent, Percent) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_SetRegionLampsPercent::Percent' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_SetRegionLampsPercent, __WorldContext) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_SetRegionLampsPercent::__WorldContext' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.ResumeWind
// 0x0010 (0x0010 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_ResumeWind final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_ResumeWind) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_ResumeWind");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_ResumeWind) == 0x000010, "Wrong size on X6DynamicEnvironmentLibrary_C_ResumeWind");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ResumeWind, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_ResumeWind::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ResumeWind, __WorldContext) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_ResumeWind::__WorldContext' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.GetWindIntensity
// 0x0018 (0x0018 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_GetWindIntensity final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	Enum_WindIntensity                            Intensity;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_GetWindIntensity) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_GetWindIntensity");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_GetWindIntensity) == 0x000018, "Wrong size on X6DynamicEnvironmentLibrary_C_GetWindIntensity");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindIntensity, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_GetWindIntensity::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindIntensity, __WorldContext) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_GetWindIntensity::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindIntensity, Intensity) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_GetWindIntensity::Intensity' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.GetWindForce
// 0x0020 (0x0020 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_GetWindForce final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Force;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ExternalWeatherParam;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_GetWindForce) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_GetWindForce");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_GetWindForce) == 0x000020, "Wrong size on X6DynamicEnvironmentLibrary_C_GetWindForce");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindForce, __WorldContext) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_GetWindForce::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindForce, Force) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_GetWindForce::Force' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindForce, ExternalWeatherParam) == 0x000018, "Member 'X6DynamicEnvironmentLibrary_C_GetWindForce::ExternalWeatherParam' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.GetWindDirectionVec
// 0x0028 (0x0028 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_GetWindDirectionVec final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_GetWindDirectionVec) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_GetWindDirectionVec");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_GetWindDirectionVec) == 0x000028, "Wrong size on X6DynamicEnvironmentLibrary_C_GetWindDirectionVec");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindDirectionVec, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_GetWindDirectionVec::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindDirectionVec, __WorldContext) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_GetWindDirectionVec::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindDirectionVec, Direction) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_GetWindDirectionVec::Direction' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.GetWindDirection
// 0x0018 (0x0018 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_GetWindDirection final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	Enum_WindDirection                            WindDirection;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_GetWindDirection) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_GetWindDirection");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_GetWindDirection) == 0x000018, "Wrong size on X6DynamicEnvironmentLibrary_C_GetWindDirection");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindDirection, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_GetWindDirection::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindDirection, __WorldContext) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_GetWindDirection::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWindDirection, WindDirection) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_GetWindDirection::WindDirection' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.GetWeatherType
// 0x0018 (0x0018 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_GetWeatherType final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	Enum_WeatherType                              WeatherType;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_GetWeatherType) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_GetWeatherType");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_GetWeatherType) == 0x000018, "Wrong size on X6DynamicEnvironmentLibrary_C_GetWeatherType");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWeatherType, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_GetWeatherType::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWeatherType, __WorldContext) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_GetWeatherType::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWeatherType, WeatherType) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_GetWeatherType::WeatherType' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.GetWeatherIntensity
// 0x0018 (0x0018 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_GetWeatherIntensity final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	Enum_WeatherIntensity                         Intensity;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_GetWeatherIntensity) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_GetWeatherIntensity");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_GetWeatherIntensity) == 0x000018, "Wrong size on X6DynamicEnvironmentLibrary_C_GetWeatherIntensity");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWeatherIntensity, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_GetWeatherIntensity::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWeatherIntensity, __WorldContext) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_GetWeatherIntensity::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetWeatherIntensity, Intensity) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_GetWeatherIntensity::Intensity' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.GetNikkiBodyTemperatureType
// 0x0018 (0x0018 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_GetNikkiBodyTemperatureType final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	Enum_TemperatureBodyType                      Type;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_GetNikkiBodyTemperatureType) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_GetNikkiBodyTemperatureType");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_GetNikkiBodyTemperatureType) == 0x000018, "Wrong size on X6DynamicEnvironmentLibrary_C_GetNikkiBodyTemperatureType");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetNikkiBodyTemperatureType, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_GetNikkiBodyTemperatureType::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetNikkiBodyTemperatureType, __WorldContext) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_GetNikkiBodyTemperatureType::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetNikkiBodyTemperatureType, Type) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_GetNikkiBodyTemperatureType::Type' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.GetEnvTemperature
// 0x0018 (0x0018 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_GetEnvTemperature final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temperature;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_GetEnvTemperature) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_GetEnvTemperature");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_GetEnvTemperature) == 0x000018, "Wrong size on X6DynamicEnvironmentLibrary_C_GetEnvTemperature");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetEnvTemperature, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_GetEnvTemperature::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetEnvTemperature, __WorldContext) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_GetEnvTemperature::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_GetEnvTemperature, Temperature) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_GetEnvTemperature::Temperature' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.CheckUseServerTime
// 0x0010 (0x0010 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_CheckUseServerTime final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_CheckUseServerTime) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_CheckUseServerTime");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_CheckUseServerTime) == 0x000010, "Wrong size on X6DynamicEnvironmentLibrary_C_CheckUseServerTime");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_CheckUseServerTime, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_CheckUseServerTime::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_CheckUseServerTime, __WorldContext) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_CheckUseServerTime::__WorldContext' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.ChangeWindLocal
// 0x0018 (0x0018 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_ChangeWindLocal final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	Enum_WindDirection                            WindDirection;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_WindIntensity                            windIntensity;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_ChangeWindLocal) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_ChangeWindLocal");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_ChangeWindLocal) == 0x000018, "Wrong size on X6DynamicEnvironmentLibrary_C_ChangeWindLocal");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeWindLocal, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_ChangeWindLocal::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeWindLocal, WindDirection) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_ChangeWindLocal::WindDirection' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeWindLocal, windIntensity) == 0x00000C, "Member 'X6DynamicEnvironmentLibrary_C_ChangeWindLocal::windIntensity' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeWindLocal, __WorldContext) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_ChangeWindLocal::__WorldContext' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.ChangeWeatherLocal
// 0x0028 (0x0028 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	Enum_WeatherType                              WeatherType;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_WeatherType                              WeatherIntensity;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Immediate;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransitionTime;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal) == 0x000028, "Wrong size on X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal, WeatherType) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal::WeatherType' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal, WeatherIntensity) == 0x00000C, "Member 'X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal::WeatherIntensity' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal, Immediate) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal::Immediate' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal, TransitionTime) == 0x000018, "Member 'X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal::TransitionTime' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal, __WorldContext) == 0x000020, "Member 'X6DynamicEnvironmentLibrary_C_ChangeWeatherLocal::__WorldContext' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.ChangeFunctionalAtmosphereForScene
// 0x0018 (0x0018 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene final
{
public:
	Enum_FunctionalAtmosphereType                 Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          atOnce;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransitionTime;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene) == 0x000018, "Wrong size on X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene, Type) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene::Type' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene, atOnce) == 0x000001, "Member 'X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene::atOnce' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene, TransitionTime) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene::TransitionTime' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene, __WorldContext) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_ChangeFunctionalAtmosphereForScene::__WorldContext' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.Change Weather Local by Name
// 0x0030 (0x0030 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 WeatherName;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	Enum_WeatherIntensity                         WeatherIntensity;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Immediate;                                         // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransitionTime;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name) == 0x000030, "Wrong size on X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name, Context) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name::Context' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name, WeatherName) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name::WeatherName' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name, WeatherIntensity) == 0x000018, "Member 'X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name::WeatherIntensity' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name, Immediate) == 0x00001C, "Member 'X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name::Immediate' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name, TransitionTime) == 0x000020, "Member 'X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name::TransitionTime' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name, __WorldContext) == 0x000028, "Member 'X6DynamicEnvironmentLibrary_C_Change_Weather_Local_by_Name::__WorldContext' has a wrong offset!");

// Function X6DynamicEnvironmentLibrary.X6DynamicEnvironmentLibrary_C.CancelFunctionalAtmosphereForScene
// 0x0018 (0x0018 - 0x0000)
struct X6DynamicEnvironmentLibrary_C_CancelFunctionalAtmosphereForScene final
{
public:
	bool                                          atOnce;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransitionTime;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6DynamicEnvironmentLibrary_C_CancelFunctionalAtmosphereForScene) == 0x000008, "Wrong alignment on X6DynamicEnvironmentLibrary_C_CancelFunctionalAtmosphereForScene");
static_assert(sizeof(X6DynamicEnvironmentLibrary_C_CancelFunctionalAtmosphereForScene) == 0x000018, "Wrong size on X6DynamicEnvironmentLibrary_C_CancelFunctionalAtmosphereForScene");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_CancelFunctionalAtmosphereForScene, atOnce) == 0x000000, "Member 'X6DynamicEnvironmentLibrary_C_CancelFunctionalAtmosphereForScene::atOnce' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_CancelFunctionalAtmosphereForScene, TransitionTime) == 0x000008, "Member 'X6DynamicEnvironmentLibrary_C_CancelFunctionalAtmosphereForScene::TransitionTime' has a wrong offset!");
static_assert(offsetof(X6DynamicEnvironmentLibrary_C_CancelFunctionalAtmosphereForScene, __WorldContext) == 0x000010, "Member 'X6DynamicEnvironmentLibrary_C_CancelFunctionalAtmosphereForScene::__WorldContext' has a wrong offset!");

}

