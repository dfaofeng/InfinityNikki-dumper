#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SmartObjectsModule

#include "Basic.hpp"

#include "StructUtils_structs.hpp"
#include "SmartObjectsModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AIModule_classes.hpp"
#include "WorldConditions_structs.hpp"
#include "WorldConditions_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class SmartObjectsModule.EnvQueryGenerator_SmartObjects
// 0x0120 (0x0170 - 0x0050)
class UEnvQueryGenerator_SmartObjects final : public UEnvQueryGenerator
{
public:
	TSubclassOf<class UEnvQueryContext>           QueryOriginContext;                                // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSmartObjectRequestFilter              SmartObjectRequestFilter;                          // 0x0060(0x00F0)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FVector                                QueryBoxExtent;                                    // 0x0150(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnlyClaimable;                                    // 0x0168(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryGenerator_SmartObjects">();
	}
	static class UEnvQueryGenerator_SmartObjects* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryGenerator_SmartObjects>();
	}
};
static_assert(alignof(UEnvQueryGenerator_SmartObjects) == 0x000010, "Wrong alignment on UEnvQueryGenerator_SmartObjects");
static_assert(sizeof(UEnvQueryGenerator_SmartObjects) == 0x000170, "Wrong size on UEnvQueryGenerator_SmartObjects");
static_assert(offsetof(UEnvQueryGenerator_SmartObjects, QueryOriginContext) == 0x000050, "Member 'UEnvQueryGenerator_SmartObjects::QueryOriginContext' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_SmartObjects, SmartObjectRequestFilter) == 0x000060, "Member 'UEnvQueryGenerator_SmartObjects::SmartObjectRequestFilter' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_SmartObjects, QueryBoxExtent) == 0x000150, "Member 'UEnvQueryGenerator_SmartObjects::QueryBoxExtent' has a wrong offset!");
static_assert(offsetof(UEnvQueryGenerator_SmartObjects, bOnlyClaimable) == 0x000168, "Member 'UEnvQueryGenerator_SmartObjects::bOnlyClaimable' has a wrong offset!");

// Class SmartObjectsModule.EnvQueryItemType_SmartObject
// 0x0000 (0x0030 - 0x0030)
class UEnvQueryItemType_SmartObject final : public UEnvQueryItemType_VectorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryItemType_SmartObject">();
	}
	static class UEnvQueryItemType_SmartObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryItemType_SmartObject>();
	}
};
static_assert(alignof(UEnvQueryItemType_SmartObject) == 0x000008, "Wrong alignment on UEnvQueryItemType_SmartObject");
static_assert(sizeof(UEnvQueryItemType_SmartObject) == 0x000030, "Wrong size on UEnvQueryItemType_SmartObject");

// Class SmartObjectsModule.SmartObjectSettings
// 0x0018 (0x0050 - 0x0038)
class USmartObjectSettings final : public UDeveloperSettings
{
public:
	ESmartObjectTagFilteringPolicy                DefaultUserTagsFilteringPolicy;                    // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESmartObjectTagMergingPolicy                  DefaultActivityTagsMergingPolicy;                  // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USmartObjectWorldConditionSchema> DefaultWorldConditionSchemaClass;            // 0x0040(0x0008)(Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldExcludePreConditionsOnDedicatedClient;      // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectSettings">();
	}
	static class USmartObjectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectSettings>();
	}
};
static_assert(alignof(USmartObjectSettings) == 0x000008, "Wrong alignment on USmartObjectSettings");
static_assert(sizeof(USmartObjectSettings) == 0x000050, "Wrong size on USmartObjectSettings");
static_assert(offsetof(USmartObjectSettings, DefaultUserTagsFilteringPolicy) == 0x000038, "Member 'USmartObjectSettings::DefaultUserTagsFilteringPolicy' has a wrong offset!");
static_assert(offsetof(USmartObjectSettings, DefaultActivityTagsMergingPolicy) == 0x000039, "Member 'USmartObjectSettings::DefaultActivityTagsMergingPolicy' has a wrong offset!");
static_assert(offsetof(USmartObjectSettings, DefaultWorldConditionSchemaClass) == 0x000040, "Member 'USmartObjectSettings::DefaultWorldConditionSchemaClass' has a wrong offset!");
static_assert(offsetof(USmartObjectSettings, bShouldExcludePreConditionsOnDedicatedClient) == 0x000048, "Member 'USmartObjectSettings::bShouldExcludePreConditionsOnDedicatedClient' has a wrong offset!");

// Class SmartObjectsModule.BlackboardKeyType_SOClaimHandle
// 0x0020 (0x0050 - 0x0030)
class UBlackboardKeyType_SOClaimHandle final : public UBlackboardKeyType
{
public:
	struct FSmartObjectClaimHandle                Handle;                                            // 0x0030(0x0020)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlackboardKeyType_SOClaimHandle">();
	}
	static class UBlackboardKeyType_SOClaimHandle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlackboardKeyType_SOClaimHandle>();
	}
};
static_assert(alignof(UBlackboardKeyType_SOClaimHandle) == 0x000008, "Wrong alignment on UBlackboardKeyType_SOClaimHandle");
static_assert(sizeof(UBlackboardKeyType_SOClaimHandle) == 0x000050, "Wrong size on UBlackboardKeyType_SOClaimHandle");
static_assert(offsetof(UBlackboardKeyType_SOClaimHandle, Handle) == 0x000030, "Member 'UBlackboardKeyType_SOClaimHandle::Handle' has a wrong offset!");

// Class SmartObjectsModule.GenericSmartObject
// 0x0008 (0x03B0 - 0x03A8)
class AGenericSmartObject final : public AActor
{
public:
	class USmartObjectComponent*                  SOComponent;                                       // 0x03A8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GenericSmartObject">();
	}
	static class AGenericSmartObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGenericSmartObject>();
	}
};
static_assert(alignof(AGenericSmartObject) == 0x000008, "Wrong alignment on AGenericSmartObject");
static_assert(sizeof(AGenericSmartObject) == 0x0003B0, "Wrong size on AGenericSmartObject");
static_assert(offsetof(AGenericSmartObject, SOComponent) == 0x0003A8, "Member 'AGenericSmartObject::SOComponent' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USmartObjectBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AddMultipleSmartObjects(const TArray<class AActor*>& SmartObjectActors);
	static bool AddOrRemoveMultipleSmartObjects(const TArray<class AActor*>& SmartObjectActors, const bool bAdd);
	static bool AddOrRemoveSmartObject(class AActor* SmartObject, const bool bEnabled);
	static bool AddSmartObject(class AActor* SmartObjectActor);
	static class FString Conv_SmartObjectClaimHandleToString(const struct FSmartObjectClaimHandle& Result);
	static class FString Conv_SmartObjectDefinitionToString(const class USmartObjectDefinition* Definition);
	static class FString Conv_SmartObjectHandleToString(const struct FSmartObjectHandle& Handle);
	static class FString Conv_SmartObjectRequestResultToString(const struct FSmartObjectRequestResult& Result);
	static class FString Conv_SmartObjectSlotHandleToString(const struct FSmartObjectSlotHandle& Handle);
	static bool Equal_SmartObjectHandleSmartObjectHandle(const struct FSmartObjectHandle& A, const struct FSmartObjectHandle& B);
	static bool Equal_SmartObjectSlotHandleSmartObjectSlotHandle(const struct FSmartObjectSlotHandle& A, const struct FSmartObjectSlotHandle& B);
	static bool FindSmartObjectsInActor(const struct FSmartObjectRequestFilter& Filter, class AActor* SearchActor, TArray<struct FSmartObjectRequestResult>* OutResults, const class AActor* UserActor);
	static bool FindSmartObjectsInComponent(const struct FSmartObjectRequestFilter& Filter, class USmartObjectComponent* SmartObjectComponent, TArray<struct FSmartObjectRequestResult>* OutResults, const class AActor* UserActor);
	static bool FindSmartObjectsInList(class UObject* WorldContextObject, const struct FSmartObjectRequestFilter& Filter, const TArray<class AActor*>& ActorList, TArray<struct FSmartObjectRequestResult>* OutResults, const class AActor* UserActor);
	static bool FindSmartObjectsInTargetingRequest(class UObject* WorldContextObject, const struct FSmartObjectRequestFilter& Filter, const struct FTargetingRequestHandle& TargetingHandle, TArray<struct FSmartObjectRequestResult>* OutResults, const class AActor* UserActor);
	static struct FSmartObjectClaimHandle GetBlackboardValueAsSOClaimHandle(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key);
	static struct FSmartObjectClaimHandle GetValueAsSOClaimHandle(class UBlackboardComponent* BlackboardComponent, const class FName& KeyName);
	static bool IsValidSmartObjectClaimHandle(const struct FSmartObjectClaimHandle& Handle);
	static bool IsValidSmartObjectHandle(const struct FSmartObjectHandle& Handle);
	static bool IsValidSmartObjectSlotHandle(const struct FSmartObjectSlotHandle& Handle);
	static struct FSmartObjectClaimHandle MarkSmartObjectSlotAsClaimed(class UObject* WorldContextObject, const struct FSmartObjectSlotHandle& SlotHandle, const class AActor* UserActor, ESmartObjectClaimPriority ClaimPriority);
	static bool MarkSmartObjectSlotAsFree(class UObject* WorldContextObject, const struct FSmartObjectClaimHandle& ClaimHandle);
	static const class USmartObjectBehaviorDefinition* MarkSmartObjectSlotAsOccupied(class UObject* WorldContextObject, const struct FSmartObjectClaimHandle& ClaimHandle, TSubclassOf<class USmartObjectBehaviorDefinition> DefinitionClass);
	static bool NotEqual_SmartObjectHandleSmartObjectHandle(const struct FSmartObjectHandle& A, const struct FSmartObjectHandle& B);
	static bool NotEqual_SmartObjectSlotHandleSmartObjectSlotHandle(const struct FSmartObjectSlotHandle& A, const struct FSmartObjectSlotHandle& B);
	static bool RemoveMultipleSmartObjects(const TArray<class AActor*>& SmartObjectActors);
	static bool RemoveSmartObject(class AActor* SmartObjectActor);
	static void SetBlackboardValueAsSOClaimHandle(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key, const struct FSmartObjectClaimHandle& Value);
	static bool SetMultipleSmartObjectsEnabled(const TArray<class AActor*>& SmartObjectActors, const bool bEnabled);
	static bool SetSmartObjectEnabled(class AActor* SmartObjectActor, const bool bEnabled);
	static void SetValueAsSOClaimHandle(class UBlackboardComponent* BlackboardComponent, const class FName& KeyName, const struct FSmartObjectClaimHandle& Value);
	static struct FSmartObjectClaimHandle SmartObjectClaimHandle_Invalid();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectBlueprintFunctionLibrary">();
	}
	static class USmartObjectBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(USmartObjectBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on USmartObjectBlueprintFunctionLibrary");
static_assert(sizeof(USmartObjectBlueprintFunctionLibrary) == 0x000028, "Wrong size on USmartObjectBlueprintFunctionLibrary");

// Class SmartObjectsModule.SmartObjectCollection
// 0x00B0 (0x0458 - 0x03A8)
class ASmartObjectCollection final : public AActor
{
public:
	struct FBox                                   Bounds;                                            // 0x03A8(0x0038)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSmartObjectCollectionEntry>    CollectionEntries;                                 // 0x03E0(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TMap<struct FSmartObjectHandle, struct FSoftObjectPath> RegisteredIdToObjectMap;                 // 0x03F0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<class USmartObjectDefinition*>         Definitions;                                       // 0x0440(0x0010)(Edit, ZeroConstructor, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_450[0x8];                                      // 0x0450(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectCollection">();
	}
	static class ASmartObjectCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASmartObjectCollection>();
	}
};
static_assert(alignof(ASmartObjectCollection) == 0x000008, "Wrong alignment on ASmartObjectCollection");
static_assert(sizeof(ASmartObjectCollection) == 0x000458, "Wrong size on ASmartObjectCollection");
static_assert(offsetof(ASmartObjectCollection, Bounds) == 0x0003A8, "Member 'ASmartObjectCollection::Bounds' has a wrong offset!");
static_assert(offsetof(ASmartObjectCollection, CollectionEntries) == 0x0003E0, "Member 'ASmartObjectCollection::CollectionEntries' has a wrong offset!");
static_assert(offsetof(ASmartObjectCollection, RegisteredIdToObjectMap) == 0x0003F0, "Member 'ASmartObjectCollection::RegisteredIdToObjectMap' has a wrong offset!");
static_assert(offsetof(ASmartObjectCollection, Definitions) == 0x000440, "Member 'ASmartObjectCollection::Definitions' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectComponent
// 0x0080 (0x02B0 - 0x0230)
class USmartObjectComponent final : public USceneComponent
{
public:
	TMulticastInlineDelegate<void(const struct FSmartObjectEventData& EventData, const class AActor* Interactor)> OnSmartObjectEvent; // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_240[0x18];                                     // 0x0240(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSmartObjectDefinitionReference        DefinitionRef;                                     // 0x0258(0x0028)(Edit, Net, Protected, NativeAccessSpecifierProtected)
	struct FSmartObjectHandle                     RegisteredHandle;                                  // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_288[0x10];                                     // 0x0288(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCanBePartOfCollection;                            // 0x0298(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USmartObjectDefinition*                 CachedDefinitionAssetVariation;                    // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ReceiveOnEvent(const struct FSmartObjectEventData& EventData, const class AActor* Interactor);
	void SetDefinition(class USmartObjectDefinition* DefinitionAsset);

	const class USmartObjectDefinition* GetDefinition() const;
	bool IsBoundToSimulation() const;
	bool IsSmartObjectEnabled() const;
	bool IsSmartObjectEnabledForReason(const struct FGameplayTag& ReasonTag) const;
	bool SetSmartObjectEnabled(const bool bEnable) const;
	bool SetSmartObjectEnabledForReason(const struct FGameplayTag& ReasonTag, const bool bEnabled) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectComponent">();
	}
	static class USmartObjectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectComponent>();
	}
};
static_assert(alignof(USmartObjectComponent) == 0x000010, "Wrong alignment on USmartObjectComponent");
static_assert(sizeof(USmartObjectComponent) == 0x0002B0, "Wrong size on USmartObjectComponent");
static_assert(offsetof(USmartObjectComponent, OnSmartObjectEvent) == 0x000230, "Member 'USmartObjectComponent::OnSmartObjectEvent' has a wrong offset!");
static_assert(offsetof(USmartObjectComponent, DefinitionRef) == 0x000258, "Member 'USmartObjectComponent::DefinitionRef' has a wrong offset!");
static_assert(offsetof(USmartObjectComponent, RegisteredHandle) == 0x000280, "Member 'USmartObjectComponent::RegisteredHandle' has a wrong offset!");
static_assert(offsetof(USmartObjectComponent, bCanBePartOfCollection) == 0x000298, "Member 'USmartObjectComponent::bCanBePartOfCollection' has a wrong offset!");
static_assert(offsetof(USmartObjectComponent, CachedDefinitionAssetVariation) == 0x0002A0, "Member 'USmartObjectComponent::CachedDefinitionAssetVariation' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectContainerRenderingComponent
// 0x0000 (0x05C0 - 0x05C0)
class USmartObjectContainerRenderingComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectContainerRenderingComponent">();
	}
	static class USmartObjectContainerRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectContainerRenderingComponent>();
	}
};
static_assert(alignof(USmartObjectContainerRenderingComponent) == 0x000010, "Wrong alignment on USmartObjectContainerRenderingComponent");
static_assert(sizeof(USmartObjectContainerRenderingComponent) == 0x0005C0, "Wrong size on USmartObjectContainerRenderingComponent");

// Class SmartObjectsModule.SmartObjectDebugRenderingComponent
// 0x0000 (0x0610 - 0x0610)
class USmartObjectDebugRenderingComponent : public UDebugDrawComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectDebugRenderingComponent">();
	}
	static class USmartObjectDebugRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectDebugRenderingComponent>();
	}
};
static_assert(alignof(USmartObjectDebugRenderingComponent) == 0x000010, "Wrong alignment on USmartObjectDebugRenderingComponent");
static_assert(sizeof(USmartObjectDebugRenderingComponent) == 0x000610, "Wrong size on USmartObjectDebugRenderingComponent");

// Class SmartObjectsModule.SmartObjectBehaviorDefinition
// 0x0000 (0x0028 - 0x0028)
class USmartObjectBehaviorDefinition final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectBehaviorDefinition">();
	}
	static class USmartObjectBehaviorDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectBehaviorDefinition>();
	}
};
static_assert(alignof(USmartObjectBehaviorDefinition) == 0x000008, "Wrong alignment on USmartObjectBehaviorDefinition");
static_assert(sizeof(USmartObjectBehaviorDefinition) == 0x000028, "Wrong size on USmartObjectBehaviorDefinition");

// Class SmartObjectsModule.SmartObjectDefinition
// 0x0110 (0x0140 - 0x0030)
class USmartObjectDefinition final : public UDataAsset
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstancedPropertyBag                  Parameters;                                        // 0x0040(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGuid                                  ParametersID;                                      // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  RootID;                                            // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FSmartObjectDefinitionPropertyBinding> PropertyBindings;                           // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSmartObjectSlotDefinition>     Slots;                                             // 0x0080(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USmartObjectBehaviorDefinition*> DefaultBehaviorDefinitions;                        // 0x0090(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FGameplayTagQuery                      UserTagFilter;                                     // 0x00A0(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FWorldConditionQueryDefinition         Preconditions;                                     // 0x00E8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  ActivityTags;                                      // 0x0100(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FSmartObjectDefinitionDataProxy> DefinitionData;                                   // 0x0120(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class USmartObjectWorldConditionSchema> WorldConditionSchemaClass;                   // 0x0130(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESmartObjectTagMergingPolicy                  ActivityTagsMergingPolicy;                         // 0x0138(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESmartObjectTagFilteringPolicy                UserTagsFilteringPolicy;                           // 0x0139(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSmartObjectSlotDefinition GetMutableSlot(const int32 Index_0);
	void SetUserTagFilter(const struct FGameplayTagQuery& InUserTagFilter);

	const struct FGameplayTagContainer GetActivityTags() const;
	struct FBox GetBounds() const;
	void GetSlotActivityTags(const int32 SlotIndex, struct FGameplayTagContainer* OutActivityTags) const;
	struct FTransform GetSlotWorldTransform(const int32 SlotIndex, const struct FTransform& OwnerTransform) const;
	const struct FGameplayTagQuery GetUserTagFilter() const;
	ESmartObjectTagFilteringPolicy GetUserTagsFilteringPolicy() const;
	bool IsValidSlotIndex(const int32 SlotIndex) const;
	const TArray<struct FSmartObjectSlotDefinition> K2_GetSlots() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectDefinition">();
	}
	static class USmartObjectDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectDefinition>();
	}
};
static_assert(alignof(USmartObjectDefinition) == 0x000008, "Wrong alignment on USmartObjectDefinition");
static_assert(sizeof(USmartObjectDefinition) == 0x000140, "Wrong size on USmartObjectDefinition");
static_assert(offsetof(USmartObjectDefinition, Parameters) == 0x000040, "Member 'USmartObjectDefinition::Parameters' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, ParametersID) == 0x000050, "Member 'USmartObjectDefinition::ParametersID' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, RootID) == 0x000060, "Member 'USmartObjectDefinition::RootID' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, PropertyBindings) == 0x000070, "Member 'USmartObjectDefinition::PropertyBindings' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, Slots) == 0x000080, "Member 'USmartObjectDefinition::Slots' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, DefaultBehaviorDefinitions) == 0x000090, "Member 'USmartObjectDefinition::DefaultBehaviorDefinitions' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, UserTagFilter) == 0x0000A0, "Member 'USmartObjectDefinition::UserTagFilter' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, Preconditions) == 0x0000E8, "Member 'USmartObjectDefinition::Preconditions' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, ActivityTags) == 0x000100, "Member 'USmartObjectDefinition::ActivityTags' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, DefinitionData) == 0x000120, "Member 'USmartObjectDefinition::DefinitionData' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, WorldConditionSchemaClass) == 0x000130, "Member 'USmartObjectDefinition::WorldConditionSchemaClass' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, ActivityTagsMergingPolicy) == 0x000138, "Member 'USmartObjectDefinition::ActivityTagsMergingPolicy' has a wrong offset!");
static_assert(offsetof(USmartObjectDefinition, UserTagsFilteringPolicy) == 0x000139, "Member 'USmartObjectDefinition::UserTagsFilteringPolicy' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectSpacePartition
// 0x0000 (0x0028 - 0x0028)
class USmartObjectSpacePartition : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectSpacePartition">();
	}
	static class USmartObjectSpacePartition* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectSpacePartition>();
	}
};
static_assert(alignof(USmartObjectSpacePartition) == 0x000008, "Wrong alignment on USmartObjectSpacePartition");
static_assert(sizeof(USmartObjectSpacePartition) == 0x000028, "Wrong size on USmartObjectSpacePartition");

// Class SmartObjectsModule.SmartObjectHashGrid
// 0x00A8 (0x00D0 - 0x0028)
class USmartObjectHashGrid final : public USmartObjectSpacePartition
{
public:
	uint8                                         Pad_28[0xA8];                                      // 0x0028(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectHashGrid">();
	}
	static class USmartObjectHashGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectHashGrid>();
	}
};
static_assert(alignof(USmartObjectHashGrid) == 0x000008, "Wrong alignment on USmartObjectHashGrid");
static_assert(sizeof(USmartObjectHashGrid) == 0x0000D0, "Wrong size on USmartObjectHashGrid");

// Class SmartObjectsModule.SmartObjectOctree
// 0x00C8 (0x00F0 - 0x0028)
class USmartObjectOctree final : public USmartObjectSpacePartition
{
public:
	uint8                                         Pad_28[0xC8];                                      // 0x0028(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectOctree">();
	}
	static class USmartObjectOctree* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectOctree>();
	}
};
static_assert(alignof(USmartObjectOctree) == 0x000008, "Wrong alignment on USmartObjectOctree");
static_assert(sizeof(USmartObjectOctree) == 0x0000F0, "Wrong size on USmartObjectOctree");

// Class SmartObjectsModule.SmartObjectPersistentCollection
// 0x00B8 (0x0460 - 0x03A8)
class ASmartObjectPersistentCollection final : public AActor
{
public:
	struct FSmartObjectContainer                  SmartObjectContainer;                              // 0x03A8(0x00B0)(Edit, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_458[0x8];                                      // 0x0458(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectPersistentCollection">();
	}
	static class ASmartObjectPersistentCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASmartObjectPersistentCollection>();
	}
};
static_assert(alignof(ASmartObjectPersistentCollection) == 0x000008, "Wrong alignment on ASmartObjectPersistentCollection");
static_assert(sizeof(ASmartObjectPersistentCollection) == 0x000460, "Wrong size on ASmartObjectPersistentCollection");
static_assert(offsetof(ASmartObjectPersistentCollection, SmartObjectContainer) == 0x0003A8, "Member 'ASmartObjectPersistentCollection::SmartObjectContainer' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectRenderingComponent
// 0x0000 (0x05C0 - 0x05C0)
class USmartObjectRenderingComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectRenderingComponent">();
	}
	static class USmartObjectRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectRenderingComponent>();
	}
};
static_assert(alignof(USmartObjectRenderingComponent) == 0x000010, "Wrong alignment on USmartObjectRenderingComponent");
static_assert(sizeof(USmartObjectRenderingComponent) == 0x0005C0, "Wrong size on USmartObjectRenderingComponent");

// Class SmartObjectsModule.SmartObjectSubsystem
// 0x0170 (0x01A0 - 0x0030)
class USmartObjectSubsystem final : public UWorldSubsystem
{
public:
	struct FSoftClassPath                         SpacePartitionClassName;                           // 0x0030(0x0020)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USmartObjectSpacePartition> SpacePartitionClass;                               // 0x0050(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USmartObjectSpacePartition*             SpacePartition;                                    // 0x0058(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASmartObjectSubsystemRenderingActor*    RenderingActor;                                    // 0x0060(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSmartObjectContainer                  SmartObjectContainer;                              // 0x0068(0x00B0)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FSmartObjectHandle, struct FSmartObjectRuntime> RuntimeSmartObjects;                 // 0x0128(0x0050)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class USmartObjectComponent*>          RegisteredSOComponents;                            // 0x0178(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class USmartObjectComponent*>          PendingSmartObjectRegistration;                    // 0x0188(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddTagToInstance(const struct FSmartObjectHandle& Handle, const struct FGameplayTag& Tag);
	void AddTagToSlot(const struct FSmartObjectSlotHandle& SlotHandle, const struct FGameplayTag& Tag);
	struct FSmartObjectClaimHandle Claim(const struct FSmartObjectRequestResult& RequestResult, const class AActor* UserActor);
	const class USmartObjectBehaviorDefinition* GetBehaviorDefinition(const struct FSmartObjectClaimHandle& ClaimHandle, TSubclassOf<class USmartObjectBehaviorDefinition> DefinitionClass);
	const class USmartObjectBehaviorDefinition* GetBehaviorDefinitionByRequestResult(const struct FSmartObjectRequestResult& RequestResult, TSubclassOf<class USmartObjectBehaviorDefinition> DefinitionClass);
	bool Release(const struct FSmartObjectClaimHandle& ClaimHandle);
	void RemoveTagFromInstance(const struct FSmartObjectHandle& Handle, const struct FGameplayTag& Tag);
	bool RemoveTagFromSlot(const struct FSmartObjectSlotHandle& SlotHandle, const struct FGameplayTag& Tag);
	bool SetEnabled(const struct FSmartObjectHandle& Handle, const bool bEnabled);
	bool SetEnabledForReason(const struct FSmartObjectHandle& Handle, const struct FGameplayTag& ReasonTag, const bool bEnabled);
	bool SetSlotEnabled(const struct FSmartObjectSlotHandle& SlotHandle, const bool bEnabled);
	const class USmartObjectBehaviorDefinition* Use(const struct FSmartObjectClaimHandle& ClaimHandle, TSubclassOf<class USmartObjectBehaviorDefinition> DefinitionClass);

	struct FSmartObjectRequestResult FindSmartObject(const struct FSmartObjectRequest& Request, const class AActor* UserActor) const;
	bool FindSmartObjects(const struct FSmartObjectRequest& Request, TArray<struct FSmartObjectRequestResult>* OutResults, const class AActor* UserActor) const;
	bool FindSmartObjects_BP(const struct FSmartObjectRequest& Request, TArray<struct FSmartObjectRequestResult>* OutResults, const class AActor* UserActor) const;
	void GetAllSlots(const struct FSmartObjectHandle& Handle, TArray<struct FSmartObjectSlotHandle>* OutSlots) const;
	const struct FGameplayTagContainer GetInstanceTags(const struct FSmartObjectHandle& Handle) const;
	bool GetSlotLocation(const struct FSmartObjectClaimHandle& ClaimHandle, struct FVector* OutSlotLocation) const;
	ESmartObjectSlotState GetSlotState(const struct FSmartObjectSlotHandle& SlotHandle) const;
	const struct FGameplayTagContainer GetSlotTags(const struct FSmartObjectSlotHandle& SlotHandle) const;
	bool GetSlotTransform(const struct FSmartObjectClaimHandle& ClaimHandle, struct FTransform* OutSlotTransform) const;
	bool GetSlotTransformFromRequestResult(const struct FSmartObjectRequestResult& RequestResult, struct FTransform* OutSlotTransform) const;
	class USmartObjectComponent* GetSmartObjectComponent(const struct FSmartObjectClaimHandle& ClaimHandle, ETrySpawnActorIfDehydrated TrySpawnActorIfDehydrated) const;
	class USmartObjectComponent* GetSmartObjectComponentByRequestResult(const struct FSmartObjectRequestResult& Result, ETrySpawnActorIfDehydrated TrySpawnActorIfDehydrated) const;
	bool IsEnabled(const struct FSmartObjectHandle& Handle) const;
	bool IsEnabledForReason(const struct FSmartObjectHandle& Handle, const struct FGameplayTag& ReasonTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectSubsystem">();
	}
	static class USmartObjectSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectSubsystem>();
	}
};
static_assert(alignof(USmartObjectSubsystem) == 0x000008, "Wrong alignment on USmartObjectSubsystem");
static_assert(sizeof(USmartObjectSubsystem) == 0x0001A0, "Wrong size on USmartObjectSubsystem");
static_assert(offsetof(USmartObjectSubsystem, SpacePartitionClassName) == 0x000030, "Member 'USmartObjectSubsystem::SpacePartitionClassName' has a wrong offset!");
static_assert(offsetof(USmartObjectSubsystem, SpacePartitionClass) == 0x000050, "Member 'USmartObjectSubsystem::SpacePartitionClass' has a wrong offset!");
static_assert(offsetof(USmartObjectSubsystem, SpacePartition) == 0x000058, "Member 'USmartObjectSubsystem::SpacePartition' has a wrong offset!");
static_assert(offsetof(USmartObjectSubsystem, RenderingActor) == 0x000060, "Member 'USmartObjectSubsystem::RenderingActor' has a wrong offset!");
static_assert(offsetof(USmartObjectSubsystem, SmartObjectContainer) == 0x000068, "Member 'USmartObjectSubsystem::SmartObjectContainer' has a wrong offset!");
static_assert(offsetof(USmartObjectSubsystem, RuntimeSmartObjects) == 0x000128, "Member 'USmartObjectSubsystem::RuntimeSmartObjects' has a wrong offset!");
static_assert(offsetof(USmartObjectSubsystem, RegisteredSOComponents) == 0x000178, "Member 'USmartObjectSubsystem::RegisteredSOComponents' has a wrong offset!");
static_assert(offsetof(USmartObjectSubsystem, PendingSmartObjectRegistration) == 0x000188, "Member 'USmartObjectSubsystem::PendingSmartObjectRegistration' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectSubsystemRenderingComponent
// 0x0000 (0x0610 - 0x0610)
class USmartObjectSubsystemRenderingComponent final : public USmartObjectDebugRenderingComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectSubsystemRenderingComponent">();
	}
	static class USmartObjectSubsystemRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectSubsystemRenderingComponent>();
	}
};
static_assert(alignof(USmartObjectSubsystemRenderingComponent) == 0x000010, "Wrong alignment on USmartObjectSubsystemRenderingComponent");
static_assert(sizeof(USmartObjectSubsystemRenderingComponent) == 0x000610, "Wrong size on USmartObjectSubsystemRenderingComponent");

// Class SmartObjectsModule.SmartObjectSubsystemRenderingActor
// 0x0008 (0x03B0 - 0x03A8)
class ASmartObjectSubsystemRenderingActor final : public AActor
{
public:
	class USmartObjectSubsystemRenderingComponent* RenderingComponent;                               // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectSubsystemRenderingActor">();
	}
	static class ASmartObjectSubsystemRenderingActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASmartObjectSubsystemRenderingActor>();
	}
};
static_assert(alignof(ASmartObjectSubsystemRenderingActor) == 0x000008, "Wrong alignment on ASmartObjectSubsystemRenderingActor");
static_assert(sizeof(ASmartObjectSubsystemRenderingActor) == 0x0003B0, "Wrong size on ASmartObjectSubsystemRenderingActor");
static_assert(offsetof(ASmartObjectSubsystemRenderingActor, RenderingComponent) == 0x0003A8, "Member 'ASmartObjectSubsystemRenderingActor::RenderingComponent' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectTest
// 0x0008 (0x0030 - 0x0028)
class USmartObjectTest : public UObject
{
public:
	class ASmartObjectTestingActor*               SmartObjectTestingActor;                           // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectTest">();
	}
	static class USmartObjectTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectTest>();
	}
};
static_assert(alignof(USmartObjectTest) == 0x000008, "Wrong alignment on USmartObjectTest");
static_assert(sizeof(USmartObjectTest) == 0x000030, "Wrong size on USmartObjectTest");
static_assert(offsetof(USmartObjectTest, SmartObjectTestingActor) == 0x000028, "Member 'USmartObjectTest::SmartObjectTestingActor' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectSimpleQueryTest
// 0x0140 (0x0170 - 0x0030)
class USmartObjectSimpleQueryTest final : public USmartObjectTest
{
public:
	struct FSmartObjectRequest                    Request;                                           // 0x0030(0x0130)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSmartObjectRequestResult>      Results;                                           // 0x0160(0x0010)(Edit, ZeroConstructor, Transient, EditConst, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectSimpleQueryTest">();
	}
	static class USmartObjectSimpleQueryTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectSimpleQueryTest>();
	}
};
static_assert(alignof(USmartObjectSimpleQueryTest) == 0x000010, "Wrong alignment on USmartObjectSimpleQueryTest");
static_assert(sizeof(USmartObjectSimpleQueryTest) == 0x000170, "Wrong size on USmartObjectSimpleQueryTest");
static_assert(offsetof(USmartObjectSimpleQueryTest, Request) == 0x000030, "Member 'USmartObjectSimpleQueryTest::Request' has a wrong offset!");
static_assert(offsetof(USmartObjectSimpleQueryTest, Results) == 0x000160, "Member 'USmartObjectSimpleQueryTest::Results' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectTestRenderingComponent
// 0x0000 (0x0610 - 0x0610)
class USmartObjectTestRenderingComponent final : public USmartObjectDebugRenderingComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectTestRenderingComponent">();
	}
	static class USmartObjectTestRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectTestRenderingComponent>();
	}
};
static_assert(alignof(USmartObjectTestRenderingComponent) == 0x000010, "Wrong alignment on USmartObjectTestRenderingComponent");
static_assert(sizeof(USmartObjectTestRenderingComponent) == 0x000610, "Wrong size on USmartObjectTestRenderingComponent");

// Class SmartObjectsModule.SmartObjectTestingActor
// 0x0028 (0x03D0 - 0x03A8)
class ASmartObjectTestingActor final : public AActor
{
public:
	TArray<class USmartObjectTest*>               Tests;                                             // 0x03A8(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class USmartObjectTestRenderingComponent*     RenderingComponent;                                // 0x03B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USmartObjectSubsystem*                  SmartObjectSubsystem;                              // 0x03C0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRunTestsEachFrame;                                // 0x03C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetTests();
	void RunTests();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectTestingActor">();
	}
	static class ASmartObjectTestingActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASmartObjectTestingActor>();
	}
};
static_assert(alignof(ASmartObjectTestingActor) == 0x000008, "Wrong alignment on ASmartObjectTestingActor");
static_assert(sizeof(ASmartObjectTestingActor) == 0x0003D0, "Wrong size on ASmartObjectTestingActor");
static_assert(offsetof(ASmartObjectTestingActor, Tests) == 0x0003A8, "Member 'ASmartObjectTestingActor::Tests' has a wrong offset!");
static_assert(offsetof(ASmartObjectTestingActor, RenderingComponent) == 0x0003B8, "Member 'ASmartObjectTestingActor::RenderingComponent' has a wrong offset!");
static_assert(offsetof(ASmartObjectTestingActor, SmartObjectSubsystem) == 0x0003C0, "Member 'ASmartObjectTestingActor::SmartObjectSubsystem' has a wrong offset!");
static_assert(offsetof(ASmartObjectTestingActor, bRunTestsEachFrame) == 0x0003C8, "Member 'ASmartObjectTestingActor::bRunTestsEachFrame' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectSlotValidationFilter
// 0x0108 (0x0130 - 0x0028)
class USmartObjectSlotValidationFilter final : public UObject
{
public:
	struct FSmartObjectSlotValidationParams       EntryParameters;                                   // 0x0028(0x0080)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseEntryParametersForExit;                        // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSmartObjectSlotValidationParams       ExitParameters;                                    // 0x00B0(0x0080)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectSlotValidationFilter">();
	}
	static class USmartObjectSlotValidationFilter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectSlotValidationFilter>();
	}
};
static_assert(alignof(USmartObjectSlotValidationFilter) == 0x000008, "Wrong alignment on USmartObjectSlotValidationFilter");
static_assert(sizeof(USmartObjectSlotValidationFilter) == 0x000130, "Wrong size on USmartObjectSlotValidationFilter");
static_assert(offsetof(USmartObjectSlotValidationFilter, EntryParameters) == 0x000028, "Member 'USmartObjectSlotValidationFilter::EntryParameters' has a wrong offset!");
static_assert(offsetof(USmartObjectSlotValidationFilter, bUseEntryParametersForExit) == 0x0000A8, "Member 'USmartObjectSlotValidationFilter::bUseEntryParametersForExit' has a wrong offset!");
static_assert(offsetof(USmartObjectSlotValidationFilter, ExitParameters) == 0x0000B0, "Member 'USmartObjectSlotValidationFilter::ExitParameters' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectUserComponent
// 0x0008 (0x00B0 - 0x00A8)
class USmartObjectUserComponent final : public UActorComponent
{
public:
	TSubclassOf<class USmartObjectSlotValidationFilter> ValidationFilter;                            // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectUserComponent">();
	}
	static class USmartObjectUserComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectUserComponent>();
	}
};
static_assert(alignof(USmartObjectUserComponent) == 0x000008, "Wrong alignment on USmartObjectUserComponent");
static_assert(sizeof(USmartObjectUserComponent) == 0x0000B0, "Wrong size on USmartObjectUserComponent");
static_assert(offsetof(USmartObjectUserComponent, ValidationFilter) == 0x0000A8, "Member 'USmartObjectUserComponent::ValidationFilter' has a wrong offset!");

// Class SmartObjectsModule.SmartObjectWorldConditionSchema
// 0x0040 (0x0078 - 0x0038)
class USmartObjectWorldConditionSchema final : public UWorldConditionSchema
{
public:
	uint8                                         Pad_38[0x40];                                      // 0x0038(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmartObjectWorldConditionSchema">();
	}
	static class USmartObjectWorldConditionSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmartObjectWorldConditionSchema>();
	}
};
static_assert(alignof(USmartObjectWorldConditionSchema) == 0x000008, "Wrong alignment on USmartObjectWorldConditionSchema");
static_assert(sizeof(USmartObjectWorldConditionSchema) == 0x000078, "Wrong size on USmartObjectWorldConditionSchema");

}

