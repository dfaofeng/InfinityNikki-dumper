#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerAnimStatesComponent

#include "Basic.hpp"

#include "X6Animation_structs.hpp"
#include "EPlayerRegularFlyingMovementType_structs.hpp"
#include "Engine_structs.hpp"
#include "EPlayerGamePlayMovementMode_structs.hpp"
#include "EPlayerMovementScenarios_structs.hpp"
#include "X6Game_structs.hpp"
#include "X6Game_classes.hpp"
#include "EPlayerRegularMovementType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_ClothesAnimationStateType_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FStylizedSimplyPivotState_structs.hpp"
#include "SMSystem_structs.hpp"
#include "Enum_WeaponHandMode_structs.hpp"
#include "ENPC_BodyType_structs.hpp"
#include "EPawnAnimStateTypes_structs.hpp"
#include "FStylizedSimplyStartState_structs.hpp"
#include "FStylizedMirror_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerAnimStatesComponent.BP_PlayerAnimStatesComponent_C
// 0x0748 (0x09F0 - 0x02A8)
class UBP_PlayerAnimStatesComponent_C final : public UX6GeneralAnimationDataComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          BP_IsChangingCloth;                                // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_IsLogicInStateInAir;                            // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_HighHeelAnkleAngle;                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_HasHiddenHandHoldingItem;                       // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Config_EnableDebugIK;                              // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerRegularMovementType                    BP_PlayerCurRegularMovementType;                   // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C3[0x5];                                      // 0x02C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_HighHeelHeight;                                 // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_HighHeelToeAngle;                               // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_FootOffsetLLocation;                            // 0x02D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BP_FootOffsetLRotation;                            // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               BP_FootOffsetRRotation;                            // 0x0308(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                BP_FootOffsetRLocation;                            // 0x0320(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_PelvisOffset;                                   // 0x0338(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_PelvisAlpha;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableFootIK;                                   // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_FootIKLAlpha;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_FootIKRAlpha;                                   // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        BP_CurFloorAngle;                                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EquipmentAdditiveEnabled;                       // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_BehaviorAdditiveEnabled;                        // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerGamePlayMovementMode                   BP_CurrentPlayerGameplayMode;                      // 0x037A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerMovementScenarios                      BP_PlayerCurrentMovementScenario;                  // 0x037B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bOffsetLHandIKPosition;                         // 0x037C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bOffsetLHandIKRotation;                         // 0x037D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bOffsetRHandIKRotation;                         // 0x037E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bOffsetRHandIKPosition;                         // 0x037F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_OffsetLHandIKPosition;                          // 0x0380(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BP_OffsetLHandIKRotation;                          // 0x0398(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                BP_OffsetRHandIKPosition;                          // 0x03B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BP_OffsetRHandIKRotation;                          // 0x03C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BP_bLockLHandIKPosition;                           // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bLockLHandIKRotation;                           // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bLockRHandIKPosition;                           // 0x03E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bLockRHandIKRotation;                           // 0x03E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BP_LockLHandIKPosition;                            // 0x03E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BP_LockLHandIKRotation;                            // 0x0400(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                BP_LockRHandIKPosition;                            // 0x0418(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BP_LockRHandIKRotation;                            // 0x0430(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        BP_NikkiPhysicsAlpha;                              // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	E_ClothesAnimationStateType                   BP_CurrentClotheAnimState;                         // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterGenAsset*                     BP_CharacterGenAsset;                              // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Interp, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        BP_CurrentRegularMovingType;                       // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_FootPlacementIKAlpha;                           // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_EquipmentAdditiveBlendTime;                     // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          BP_AdditivePoseToPreventClothesThreading;          // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BP_ActivePerformanceStanceTag;                     // 0x0480(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSMBlendSetting                        BP_BlendSetting;                                   // 0x0488(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UAnimSequenceBase*                      BP_StanceAnimSequence;                             // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      BP_GestureAnimSequence;                            // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      BP_TransitionAnimSequence;                         // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bFullBodyStance;                                // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bFullBodyGesture;                               // 0x04C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bEnableGestureAnim;                             // 0x04C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bExpectedAdditiveGesture;                       // 0x04C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnablePerformanceMirror;                        // 0x04C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bLeftInteractionPerformance;                    // 0x04C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bEnableInteractionPerformance;                  // 0x04C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C7[0x1];                                      // 0x04C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BP_ProceduralFootIKPosition_L;                     // 0x04C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_ProceduralFootIKPosition_R;                     // 0x04E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ProceduralFootIKAlpha_L;                        // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ProceduralFootIKAlpha_R;                        // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_508[0x8];                                      // 0x0508(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  BP_ProceduralFootIKRotation_L;                     // 0x0510(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  BP_ProceduralFootIKRotation_R;                     // 0x0530(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_FootIKLeftOffsetLocation;                       // 0x0550(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_FootIKTransitionLeftAlpha;                      // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_FootIKRightOffsetLocation;                      // 0x0570(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_FootIKTransitionRightAlpha;                     // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BP_FootIKLeftOffsetRotation;                       // 0x0590(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        BP_FootIKRotationLeftAlpha;                        // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BP_FootIKRightOffsetRotation;                      // 0x05B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        BP_FootIKRotationRightAlpha;                       // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, struct FTransform>        BP_IKSlotsInfo;                                    // 0x05D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          BP_bEnableInteractionIK;                           // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsLogicCanDoAction_MovementSituationalFeedbackPerformance; // 0x0621(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableEmotionPerformance;                       // 0x0622(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsLogicInInteractiveServiceState;               // 0x0623(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_UseFacialAnimFromSpecialFullBody;               // 0x0624(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableNikkiPhysicsNodeDuringDlg;                // 0x0625(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_626[0x2];                                      // 0x0626(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_Locomotion_AnimSetBase_C*           DA_LocomotionAnimSetOverride;                      // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSkirtClothesId;                             // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_DisableAllFacialBlendFlow;                      // 0x0634(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	Enum_WeaponHandMode                           BP_HandMode;                                       // 0x0635(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_SkipStopFlag;                                   // 0x0636(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_bSkipInteractionPerformanceWhenEnable;          // 0x0637(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_CurStanceAccumulatedTime;                       // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_DesiredStancePercent;                           // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_StancePlayRate;                                 // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENPC_BodyType                                 BP_NPCBodyType;                                    // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_651[0x7];                                      // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FacialSlotBlendAlpha;                              // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_ForceStopFlag;                                  // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_661[0x7];                                      // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Emotion_TurnTable_HorizontalValue;                 // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Emotion_TurnTable_VerticalValue;                   // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerRegularFlyingMovementType              BP_LocomotionType;                                 // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_679[0x7];                                      // 0x0679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BP_NavlinkTarget;                                  // 0x0680(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_InNavlink;                                      // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E1[0x7];                                      // 0x06E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_ExternalAccelerationDuration;                   // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_ExternalAcceleration;                           // 0x06F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableWindEffect;                               // 0x0708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnablePerformItemLeftHandIK;                    // 0x0709(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnablePerformItemRightHandIK;                   // 0x070A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnablePerformItemIK;                            // 0x070B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsLogicInStateAdjustForInteraction;             // 0x070C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_IsLogicInStateLimitSection;                     // 0x070D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableBonesAroundEyeMotion;                       // 0x070E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bPlayingLevelSequenceFromStage;                 // 0x070F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_WeaponBlendTime;                                // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsLogicInLevelSequenceState;                    // 0x0718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_EnableDressIK;                                  // 0x0719(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnablePerformItemAdditive;                      // 0x071A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71B[0x5];                                      // 0x071B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_HighHeelToeHeight;                              // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BP_StylizedClothID;                                // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableStylizedCloth;                            // 0x072C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72D[0x3];                                      // 0x072D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimationStylizedCloth                BP_StylizedClothData;                              // 0x0730(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnStylizedClothChanged;                            // 0x07F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EPawnAnimStateTypes                           BP_PawnAnimState;                                  // 0x0808(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_809[0x7];                                      // 0x0809(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnPawnAnimStateChanged;                            // 0x0810(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FFStylizedSimplyStartState             BP_StylizedStartAnim;                              // 0x0820(0x0078)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFStylizedSimplyPivotState             BP_Stylized_SimplyPivot;                           // 0x0898(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFStylizedMirror                       BP_Stylized_Mirror;                                // 0x08B0(0x0002)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B2[0x6];                                      // 0x08B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          BP_IdleTransitionAnim;                             // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UAnimSequence* Animation, bool bAdd)> OnIdleBreakAnimChanged; // 0x08C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UAnimSequence*>                  BP_IdleBreakAnims;                                 // 0x08D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        BP_DialogBlendInTime;                              // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_DialogBlendOutTime;                             // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bCustomDialogBlendInOutTime;                    // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableMaxAnkleAngleLimit;                       // 0x08F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F2[0x6];                                      // 0x08F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_ClothesFrontThickness_Follow;                   // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ClothesBackThickness_Follow;                    // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ClothesFrontThickness_Splay;                    // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ClothesBackThickness_Splay;                     // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bDuringAdjustTransform;                         // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_919[0x7];                                      // 0x0919(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BP_AdjustTargetTransform;                          // 0x0920(0x0060)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool EnableEmotionPerformance)> OnEmotionPerformanceChanged;       // 0x0980(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BP_InPhotograph;                                   // 0x0990(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_HasHoldDressCurveValue;                         // 0x0991(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_RefreshClothData;                               // 0x0992(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_993[0x5];                                      // 0x0993(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnClothThicknessDataChanged;                       // 0x0998(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        BP_NikkiRigLiftLegAlpha;                           // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsLogicInWaitingCinematicState;                 // 0x09B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_bBikeHandIKLockPosL;                            // 0x09B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bBikeHandIKLockPosR;                            // 0x09B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B3[0x5];                                      // 0x09B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_BikeHandIKAlpha;                                // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_BikeHandLockPosL;                               // 0x09C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_BikeHandLockPosR;                               // 0x09D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_PlayerAnimStatesComponent(int32 EntryPoint);
	void BPI_Get_CurrentAbilityStates(bool* IsLogicInStatePlayingSkill, bool* IsLogicInPlayingAbilityAnimState, double* CurrentAbilityAnimTimeRemaining, double* CurrentAbilityPlayRate, double* CurrentAbilityAnimTime);
	void BP_SetUseFacialAnimFromSpecialFullBody(bool bUse, const class FString& Reason);
	void BP_SetStylizedMirror(bool bMirror);
	void BP_SetPawnAnimState(EPawnAnimStateTypes NewPawnAnimState);
	void BP_SetFocusConfig(class ULookAtConfigTemplate* InFocusConfig);
	void BP_SetEnableEmotionPerformance(bool bEnableEmotionPerformance);
	void BP_SetCanInterruptPendingStopState(bool bCanInterrupt);
	void BP_RemoveIdleBreakAnim(class UAnimSequence* AnimSequence);
	void BP_RefreshClothThicknessData();
	void BP_OverrideCanOwnerDoLookAt(bool bCanDoLookAt);
	void BP_IsSkipStopStage(bool* SkipStopStage);
	void BP_IsForceStopStage(bool* ForceStopFlag);
	void BP_GetEnableEmotionPerformance(bool* EnableEmotionPerformance);
	void BP_GetDefaultClothesList(TArray<int32>* DefaultClothesList);
	void BP_GetCurrentDressID(int32* ID);
	void BP_GetCurrentClothesID(TArray<int32>* ClothesIDArray);
	void BP_EnableSkipStopStage();
	void BP_EnableForceStopStage();
	void BP_DisableSkipStopStage();
	void BP_DisableForceStopStage();
	void BP_ClearOverrideCanOwnerDoLookAt();
	void BP_AnimNotify_OnPlayerReliveEffectFinished();
	void BP_AnimNotify_OnPlayerMantleAnimationFinished();
	void BP_AnimNotify_OnPlayerDeathAnimationFinished();
	void BP_AnimNotify_InteractionPerformance_LeftGesture();
	void BP_AddIdleBreakAnim(class UAnimSequence* AnimSequence);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerAnimStatesComponent_C">();
	}
	static class UBP_PlayerAnimStatesComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerAnimStatesComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerAnimStatesComponent_C) == 0x000010, "Wrong alignment on UBP_PlayerAnimStatesComponent_C");
static_assert(sizeof(UBP_PlayerAnimStatesComponent_C) == 0x0009F0, "Wrong size on UBP_PlayerAnimStatesComponent_C");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, UberGraphFrame) == 0x0002A8, "Member 'UBP_PlayerAnimStatesComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_IsChangingCloth) == 0x0002B0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_IsChangingCloth' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_IsLogicInStateInAir) == 0x0002B1, "Member 'UBP_PlayerAnimStatesComponent_C::BP_IsLogicInStateInAir' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_HighHeelAnkleAngle) == 0x0002B8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_HighHeelAnkleAngle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_HasHiddenHandHoldingItem) == 0x0002C0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_HasHiddenHandHoldingItem' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, Config_EnableDebugIK) == 0x0002C1, "Member 'UBP_PlayerAnimStatesComponent_C::Config_EnableDebugIK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_PlayerCurRegularMovementType) == 0x0002C2, "Member 'UBP_PlayerAnimStatesComponent_C::BP_PlayerCurRegularMovementType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_HighHeelHeight) == 0x0002C8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_HighHeelHeight' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_HighHeelToeAngle) == 0x0002D0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_HighHeelToeAngle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootOffsetLLocation) == 0x0002D8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootOffsetLLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootOffsetLRotation) == 0x0002F0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootOffsetLRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootOffsetRRotation) == 0x000308, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootOffsetRRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootOffsetRLocation) == 0x000320, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootOffsetRLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_PelvisOffset) == 0x000338, "Member 'UBP_PlayerAnimStatesComponent_C::BP_PelvisOffset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_PelvisAlpha) == 0x000350, "Member 'UBP_PlayerAnimStatesComponent_C::BP_PelvisAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnableFootIK) == 0x000358, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnableFootIK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootIKLAlpha) == 0x000360, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootIKLAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootIKRAlpha) == 0x000368, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootIKRAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_CurFloorAngle) == 0x000370, "Member 'UBP_PlayerAnimStatesComponent_C::BP_CurFloorAngle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EquipmentAdditiveEnabled) == 0x000378, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EquipmentAdditiveEnabled' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_BehaviorAdditiveEnabled) == 0x000379, "Member 'UBP_PlayerAnimStatesComponent_C::BP_BehaviorAdditiveEnabled' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_CurrentPlayerGameplayMode) == 0x00037A, "Member 'UBP_PlayerAnimStatesComponent_C::BP_CurrentPlayerGameplayMode' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_PlayerCurrentMovementScenario) == 0x00037B, "Member 'UBP_PlayerAnimStatesComponent_C::BP_PlayerCurrentMovementScenario' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bOffsetLHandIKPosition) == 0x00037C, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bOffsetLHandIKPosition' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bOffsetLHandIKRotation) == 0x00037D, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bOffsetLHandIKRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bOffsetRHandIKRotation) == 0x00037E, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bOffsetRHandIKRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bOffsetRHandIKPosition) == 0x00037F, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bOffsetRHandIKPosition' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_OffsetLHandIKPosition) == 0x000380, "Member 'UBP_PlayerAnimStatesComponent_C::BP_OffsetLHandIKPosition' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_OffsetLHandIKRotation) == 0x000398, "Member 'UBP_PlayerAnimStatesComponent_C::BP_OffsetLHandIKRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_OffsetRHandIKPosition) == 0x0003B0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_OffsetRHandIKPosition' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_OffsetRHandIKRotation) == 0x0003C8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_OffsetRHandIKRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bLockLHandIKPosition) == 0x0003E0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bLockLHandIKPosition' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bLockLHandIKRotation) == 0x0003E1, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bLockLHandIKRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bLockRHandIKPosition) == 0x0003E2, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bLockRHandIKPosition' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bLockRHandIKRotation) == 0x0003E3, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bLockRHandIKRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_LockLHandIKPosition) == 0x0003E8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_LockLHandIKPosition' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_LockLHandIKRotation) == 0x000400, "Member 'UBP_PlayerAnimStatesComponent_C::BP_LockLHandIKRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_LockRHandIKPosition) == 0x000418, "Member 'UBP_PlayerAnimStatesComponent_C::BP_LockRHandIKPosition' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_LockRHandIKRotation) == 0x000430, "Member 'UBP_PlayerAnimStatesComponent_C::BP_LockRHandIKRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_NikkiPhysicsAlpha) == 0x000448, "Member 'UBP_PlayerAnimStatesComponent_C::BP_NikkiPhysicsAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_CurrentClotheAnimState) == 0x000450, "Member 'UBP_PlayerAnimStatesComponent_C::BP_CurrentClotheAnimState' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_CharacterGenAsset) == 0x000458, "Member 'UBP_PlayerAnimStatesComponent_C::BP_CharacterGenAsset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_CurrentRegularMovingType) == 0x000460, "Member 'UBP_PlayerAnimStatesComponent_C::BP_CurrentRegularMovingType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootPlacementIKAlpha) == 0x000468, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootPlacementIKAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EquipmentAdditiveBlendTime) == 0x000470, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EquipmentAdditiveBlendTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_AdditivePoseToPreventClothesThreading) == 0x000478, "Member 'UBP_PlayerAnimStatesComponent_C::BP_AdditivePoseToPreventClothesThreading' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ActivePerformanceStanceTag) == 0x000480, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ActivePerformanceStanceTag' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_BlendSetting) == 0x000488, "Member 'UBP_PlayerAnimStatesComponent_C::BP_BlendSetting' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_StanceAnimSequence) == 0x0004A8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_StanceAnimSequence' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_GestureAnimSequence) == 0x0004B0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_GestureAnimSequence' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_TransitionAnimSequence) == 0x0004B8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_TransitionAnimSequence' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bFullBodyStance) == 0x0004C0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bFullBodyStance' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bFullBodyGesture) == 0x0004C1, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bFullBodyGesture' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bEnableGestureAnim) == 0x0004C2, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bEnableGestureAnim' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bExpectedAdditiveGesture) == 0x0004C3, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bExpectedAdditiveGesture' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnablePerformanceMirror) == 0x0004C4, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnablePerformanceMirror' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bLeftInteractionPerformance) == 0x0004C5, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bLeftInteractionPerformance' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bEnableInteractionPerformance) == 0x0004C6, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bEnableInteractionPerformance' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ProceduralFootIKPosition_L) == 0x0004C8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ProceduralFootIKPosition_L' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ProceduralFootIKPosition_R) == 0x0004E0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ProceduralFootIKPosition_R' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ProceduralFootIKAlpha_L) == 0x0004F8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ProceduralFootIKAlpha_L' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ProceduralFootIKAlpha_R) == 0x000500, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ProceduralFootIKAlpha_R' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ProceduralFootIKRotation_L) == 0x000510, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ProceduralFootIKRotation_L' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ProceduralFootIKRotation_R) == 0x000530, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ProceduralFootIKRotation_R' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootIKLeftOffsetLocation) == 0x000550, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootIKLeftOffsetLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootIKTransitionLeftAlpha) == 0x000568, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootIKTransitionLeftAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootIKRightOffsetLocation) == 0x000570, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootIKRightOffsetLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootIKTransitionRightAlpha) == 0x000588, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootIKTransitionRightAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootIKLeftOffsetRotation) == 0x000590, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootIKLeftOffsetRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootIKRotationLeftAlpha) == 0x0005A8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootIKRotationLeftAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootIKRightOffsetRotation) == 0x0005B0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootIKRightOffsetRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_FootIKRotationRightAlpha) == 0x0005C8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_FootIKRotationRightAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_IKSlotsInfo) == 0x0005D0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_IKSlotsInfo' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bEnableInteractionIK) == 0x000620, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bEnableInteractionIK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_IsLogicCanDoAction_MovementSituationalFeedbackPerformance) == 0x000621, "Member 'UBP_PlayerAnimStatesComponent_C::BP_IsLogicCanDoAction_MovementSituationalFeedbackPerformance' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnableEmotionPerformance) == 0x000622, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnableEmotionPerformance' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_IsLogicInInteractiveServiceState) == 0x000623, "Member 'UBP_PlayerAnimStatesComponent_C::BP_IsLogicInInteractiveServiceState' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_UseFacialAnimFromSpecialFullBody) == 0x000624, "Member 'UBP_PlayerAnimStatesComponent_C::BP_UseFacialAnimFromSpecialFullBody' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnableNikkiPhysicsNodeDuringDlg) == 0x000625, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnableNikkiPhysicsNodeDuringDlg' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, DA_LocomotionAnimSetOverride) == 0x000628, "Member 'UBP_PlayerAnimStatesComponent_C::DA_LocomotionAnimSetOverride' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, CurrentSkirtClothesId) == 0x000630, "Member 'UBP_PlayerAnimStatesComponent_C::CurrentSkirtClothesId' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_DisableAllFacialBlendFlow) == 0x000634, "Member 'UBP_PlayerAnimStatesComponent_C::BP_DisableAllFacialBlendFlow' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_HandMode) == 0x000635, "Member 'UBP_PlayerAnimStatesComponent_C::BP_HandMode' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_SkipStopFlag) == 0x000636, "Member 'UBP_PlayerAnimStatesComponent_C::BP_SkipStopFlag' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bSkipInteractionPerformanceWhenEnable) == 0x000637, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bSkipInteractionPerformanceWhenEnable' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_CurStanceAccumulatedTime) == 0x000638, "Member 'UBP_PlayerAnimStatesComponent_C::BP_CurStanceAccumulatedTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_DesiredStancePercent) == 0x000640, "Member 'UBP_PlayerAnimStatesComponent_C::BP_DesiredStancePercent' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_StancePlayRate) == 0x000648, "Member 'UBP_PlayerAnimStatesComponent_C::BP_StancePlayRate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_NPCBodyType) == 0x000650, "Member 'UBP_PlayerAnimStatesComponent_C::BP_NPCBodyType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, FacialSlotBlendAlpha) == 0x000658, "Member 'UBP_PlayerAnimStatesComponent_C::FacialSlotBlendAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ForceStopFlag) == 0x000660, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ForceStopFlag' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, Emotion_TurnTable_HorizontalValue) == 0x000668, "Member 'UBP_PlayerAnimStatesComponent_C::Emotion_TurnTable_HorizontalValue' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, Emotion_TurnTable_VerticalValue) == 0x000670, "Member 'UBP_PlayerAnimStatesComponent_C::Emotion_TurnTable_VerticalValue' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_LocomotionType) == 0x000678, "Member 'UBP_PlayerAnimStatesComponent_C::BP_LocomotionType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_NavlinkTarget) == 0x000680, "Member 'UBP_PlayerAnimStatesComponent_C::BP_NavlinkTarget' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_InNavlink) == 0x0006E0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_InNavlink' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ExternalAccelerationDuration) == 0x0006E8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ExternalAccelerationDuration' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ExternalAcceleration) == 0x0006F0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ExternalAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnableWindEffect) == 0x000708, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnableWindEffect' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnablePerformItemLeftHandIK) == 0x000709, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnablePerformItemLeftHandIK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnablePerformItemRightHandIK) == 0x00070A, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnablePerformItemRightHandIK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnablePerformItemIK) == 0x00070B, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnablePerformItemIK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_IsLogicInStateAdjustForInteraction) == 0x00070C, "Member 'UBP_PlayerAnimStatesComponent_C::BP_IsLogicInStateAdjustForInteraction' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_IsLogicInStateLimitSection) == 0x00070D, "Member 'UBP_PlayerAnimStatesComponent_C::BP_IsLogicInStateLimitSection' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, bEnableBonesAroundEyeMotion) == 0x00070E, "Member 'UBP_PlayerAnimStatesComponent_C::bEnableBonesAroundEyeMotion' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bPlayingLevelSequenceFromStage) == 0x00070F, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bPlayingLevelSequenceFromStage' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_WeaponBlendTime) == 0x000710, "Member 'UBP_PlayerAnimStatesComponent_C::BP_WeaponBlendTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_IsLogicInLevelSequenceState) == 0x000718, "Member 'UBP_PlayerAnimStatesComponent_C::BP_IsLogicInLevelSequenceState' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnableDressIK) == 0x000719, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnableDressIK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnablePerformItemAdditive) == 0x00071A, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnablePerformItemAdditive' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_HighHeelToeHeight) == 0x000720, "Member 'UBP_PlayerAnimStatesComponent_C::BP_HighHeelToeHeight' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_StylizedClothID) == 0x000728, "Member 'UBP_PlayerAnimStatesComponent_C::BP_StylizedClothID' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnableStylizedCloth) == 0x00072C, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnableStylizedCloth' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_StylizedClothData) == 0x000730, "Member 'UBP_PlayerAnimStatesComponent_C::BP_StylizedClothData' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, OnStylizedClothChanged) == 0x0007F8, "Member 'UBP_PlayerAnimStatesComponent_C::OnStylizedClothChanged' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_PawnAnimState) == 0x000808, "Member 'UBP_PlayerAnimStatesComponent_C::BP_PawnAnimState' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, OnPawnAnimStateChanged) == 0x000810, "Member 'UBP_PlayerAnimStatesComponent_C::OnPawnAnimStateChanged' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_StylizedStartAnim) == 0x000820, "Member 'UBP_PlayerAnimStatesComponent_C::BP_StylizedStartAnim' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_Stylized_SimplyPivot) == 0x000898, "Member 'UBP_PlayerAnimStatesComponent_C::BP_Stylized_SimplyPivot' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_Stylized_Mirror) == 0x0008B0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_Stylized_Mirror' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_IdleTransitionAnim) == 0x0008B8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_IdleTransitionAnim' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, OnIdleBreakAnimChanged) == 0x0008C0, "Member 'UBP_PlayerAnimStatesComponent_C::OnIdleBreakAnimChanged' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_IdleBreakAnims) == 0x0008D0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_IdleBreakAnims' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_DialogBlendInTime) == 0x0008E0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_DialogBlendInTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_DialogBlendOutTime) == 0x0008E8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_DialogBlendOutTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bCustomDialogBlendInOutTime) == 0x0008F0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bCustomDialogBlendInOutTime' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_EnableMaxAnkleAngleLimit) == 0x0008F1, "Member 'UBP_PlayerAnimStatesComponent_C::BP_EnableMaxAnkleAngleLimit' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ClothesFrontThickness_Follow) == 0x0008F8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ClothesFrontThickness_Follow' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ClothesBackThickness_Follow) == 0x000900, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ClothesBackThickness_Follow' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ClothesFrontThickness_Splay) == 0x000908, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ClothesFrontThickness_Splay' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_ClothesBackThickness_Splay) == 0x000910, "Member 'UBP_PlayerAnimStatesComponent_C::BP_ClothesBackThickness_Splay' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bDuringAdjustTransform) == 0x000918, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bDuringAdjustTransform' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_AdjustTargetTransform) == 0x000920, "Member 'UBP_PlayerAnimStatesComponent_C::BP_AdjustTargetTransform' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, OnEmotionPerformanceChanged) == 0x000980, "Member 'UBP_PlayerAnimStatesComponent_C::OnEmotionPerformanceChanged' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_InPhotograph) == 0x000990, "Member 'UBP_PlayerAnimStatesComponent_C::BP_InPhotograph' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_HasHoldDressCurveValue) == 0x000991, "Member 'UBP_PlayerAnimStatesComponent_C::BP_HasHoldDressCurveValue' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_RefreshClothData) == 0x000992, "Member 'UBP_PlayerAnimStatesComponent_C::BP_RefreshClothData' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, OnClothThicknessDataChanged) == 0x000998, "Member 'UBP_PlayerAnimStatesComponent_C::OnClothThicknessDataChanged' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_NikkiRigLiftLegAlpha) == 0x0009A8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_NikkiRigLiftLegAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_IsLogicInWaitingCinematicState) == 0x0009B0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_IsLogicInWaitingCinematicState' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bBikeHandIKLockPosL) == 0x0009B1, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bBikeHandIKLockPosL' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_bBikeHandIKLockPosR) == 0x0009B2, "Member 'UBP_PlayerAnimStatesComponent_C::BP_bBikeHandIKLockPosR' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_BikeHandIKAlpha) == 0x0009B8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_BikeHandIKAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_BikeHandLockPosL) == 0x0009C0, "Member 'UBP_PlayerAnimStatesComponent_C::BP_BikeHandLockPosL' has a wrong offset!");
static_assert(offsetof(UBP_PlayerAnimStatesComponent_C, BP_BikeHandLockPosR) == 0x0009D8, "Member 'UBP_PlayerAnimStatesComponent_C::BP_BikeHandLockPosR' has a wrong offset!");

}

