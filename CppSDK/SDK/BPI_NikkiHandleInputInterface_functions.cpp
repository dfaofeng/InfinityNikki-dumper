#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NikkiHandleInputInterface

#include "Basic.hpp"

#include "BPI_NikkiHandleInputInterface_classes.hpp"
#include "BPI_NikkiHandleInputInterface_parameters.hpp"


namespace SDK
{

// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.BPI_OnCharacterMovementModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NikkiHandleInputInterface_C::BPI_OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "BPI_OnCharacterMovementModeChanged");

	Params::BPI_NikkiHandleInputInterface_C_BPI_OnCharacterMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.BPI_OnMovementModeDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NikkiHandleInputInterface_C::BPI_OnMovementModeDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "BPI_OnMovementModeDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.BPI_OnMovementModeEnabled
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NikkiHandleInputInterface_C::BPI_OnMovementModeEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "BPI_OnMovementModeEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.BPI_OnRotateCameraInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InputVector                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputDeviceKeyType                     DeviceType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NikkiHandleInputInterface_C::BPI_OnRotateCameraInput(const struct FVector& InputVector, EInputDeviceKeyType DeviceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "BPI_OnRotateCameraInput");

	Params::BPI_NikkiHandleInputInterface_C_BPI_OnRotateCameraInput Parms{};

	Parms.InputVector = std::move(InputVector);
	Parms.DeviceType = DeviceType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.BPI_OnSelfControlledByPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            PlayerPawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_NikkiHandleInputInterface_C::BPI_OnSelfControlledByPlayer(class APawn* PlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "BPI_OnSelfControlledByPlayer");

	Params::BPI_NikkiHandleInputInterface_C_BPI_OnSelfControlledByPlayer Parms{};

	Parms.PlayerPawn = PlayerPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.BPI_OnSelfLoseControlledByPlayer
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NikkiHandleInputInterface_C::BPI_OnSelfLoseControlledByPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "BPI_OnSelfLoseControlledByPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.BPI_SetPlayerToControlActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorToControl                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Controlled                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NikkiHandleInputInterface_C::BPI_SetPlayerToControlActor(class AActor* ActorToControl, bool* Controlled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "BPI_SetPlayerToControlActor");

	Params::BPI_NikkiHandleInputInterface_C_BPI_SetPlayerToControlActor Parms{};

	Parms.ActorToControl = ActorToControl;

	UObject::ProcessEvent(Func, &Parms);

	if (Controlled != nullptr)
		*Controlled = Parms.Controlled;
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.InputAction_Crash
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressedOrRelease                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NikkiHandleInputInterface_C::InputAction_Crash(bool PressedOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "InputAction_Crash");

	Params::BPI_NikkiHandleInputInterface_C_InputAction_Crash Parms{};

	Parms.PressedOrRelease = PressedOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.InputAction_Jump
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressedOrRelease                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NikkiHandleInputInterface_C::InputAction_Jump(bool PressedOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "InputAction_Jump");

	Params::BPI_NikkiHandleInputInterface_C_InputAction_Jump Parms{};

	Parms.PressedOrRelease = PressedOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.InputAction_Sprint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressedOrRelease                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NikkiHandleInputInterface_C::InputAction_Sprint(bool PressedOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "InputAction_Sprint");

	Params::BPI_NikkiHandleInputInterface_C_InputAction_Sprint Parms{};

	Parms.PressedOrRelease = PressedOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.InputAction_Walk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PressOrRelease                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NikkiHandleInputInterface_C::InputAction_Walk(bool PressOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "InputAction_Walk");

	Params::BPI_NikkiHandleInputInterface_C_InputAction_Walk Parms{};

	Parms.PressOrRelease = PressOrRelease;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.OnMovementMoveXAxisAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NikkiHandleInputInterface_C::OnMovementMoveXAxisAction(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "OnMovementMoveXAxisAction");

	Params::BPI_NikkiHandleInputInterface_C_OnMovementMoveXAxisAction Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_NikkiHandleInputInterface.BPI_NikkiHandleInputInterface_C.OnMovementMoveYAxisAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NikkiHandleInputInterface_C::OnMovementMoveYAxisAction(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_NikkiHandleInputInterface_C", "OnMovementMoveYAxisAction");

	Params::BPI_NikkiHandleInputInterface_C_OnMovementMoveYAxisAction Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}

}

