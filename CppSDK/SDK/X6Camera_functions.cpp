#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6Camera

#include "Basic.hpp"

#include "X6Camera_classes.hpp"
#include "X6Camera_parameters.hpp"


namespace SDK
{

// Function X6Camera.X6BaseCameraComponent.OnActorSetViewTarget
// (Event, Public, BlueprintEvent)

void UX6BaseCameraComponent::OnActorSetViewTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6BaseCameraComponent", "OnActorSetViewTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.AdvancedCamera.AddCameraConfigModifierByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TSubclassOf<class UX6CameraRuntimeConfigModifier>ModifierClass                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FX6CameraConfigBlendParams&CameraConfigBlendParams                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UX6CameraRuntimeConfigModifier*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UX6CameraRuntimeConfigModifier* UAdvancedCamera::AddCameraConfigModifierByClass(const TSubclassOf<class UX6CameraRuntimeConfigModifier> ModifierClass, const struct FX6CameraConfigBlendParams& CameraConfigBlendParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "AddCameraConfigModifierByClass");

	Params::AdvancedCamera_AddCameraConfigModifierByClass Parms{};

	Parms.ModifierClass = ModifierClass;
	Parms.CameraConfigBlendParams = std::move(CameraConfigBlendParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.BlendBackToFollow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FViewTargetTransitionParams&CameraBlendParams                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UAdvancedCamera::BlendBackToFollow(const struct FViewTargetTransitionParams& CameraBlendParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "BlendBackToFollow");

	Params::AdvancedCamera_BlendBackToFollow Parms{};

	Parms.CameraBlendParams = std::move(CameraBlendParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.BlendConfigFromCurrentCameraView
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const bool                              bOverrideTransitionParams                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FViewTargetTransitionParams&TransitionParams                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAdvancedCamera::BlendConfigFromCurrentCameraView(const bool bOverrideTransitionParams, const struct FViewTargetTransitionParams& TransitionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "BlendConfigFromCurrentCameraView");

	Params::AdvancedCamera_BlendConfigFromCurrentCameraView Parms{};

	Parms.bOverrideTransitionParams = bOverrideTransitionParams;
	Parms.TransitionParams = std::move(TransitionParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.BlendToCameraView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMinimalViewInfo&          NewCameraView                                          (Parm, NativeAccessSpecifierPublic)
// const struct FViewTargetTransitionParams&CameraBlendParams                                      (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UAdvancedCamera::BlendToCameraView(const struct FMinimalViewInfo& NewCameraView, const struct FViewTargetTransitionParams& CameraBlendParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "BlendToCameraView");

	Params::AdvancedCamera_BlendToCameraView Parms{};

	Parms.NewCameraView = std::move(NewCameraView);
	Parms.CameraBlendParams = std::move(CameraBlendParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.CreateCameraCollisionProcessInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UCameraCollisionProcess>NewCameraCollisionProcessClass                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::CreateCameraCollisionProcessInstance(TSubclassOf<class UCameraCollisionProcess> NewCameraCollisionProcessClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "CreateCameraCollisionProcessInstance");

	Params::AdvancedCamera_CreateCameraCollisionProcessInstance Parms{};

	Parms.NewCameraCollisionProcessClass = NewCameraCollisionProcessClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.CreateCameraLagInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UCameraLagProcess>    NewCameraLagProcessClass                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::CreateCameraLagInstance(TSubclassOf<class UCameraLagProcess> NewCameraLagProcessClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "CreateCameraLagInstance");

	Params::AdvancedCamera_CreateCameraLagInstance Parms{};

	Parms.NewCameraLagProcessClass = NewCameraLagProcessClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.DoFixCameraByBasedMovement
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBasedMovementFixCameraHelper&Helper                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAdvancedCamera::DoFixCameraByBasedMovement(const struct FBasedMovementFixCameraHelper& Helper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "DoFixCameraByBasedMovement");

	Params::AdvancedCamera_DoFixCameraByBasedMovement Parms{};

	Parms.Helper = std::move(Helper);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.ExitZoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAdvancedCamera::ExitZoom(const float BlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "ExitZoom");

	Params::AdvancedCamera_ExitZoom Parms{};

	Parms.BlendOutTime = BlendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.FindMostOpenSpaceRotation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                RelativeTrans                                          (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator*                        OutDeltaRot                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAdvancedCamera::FindMostOpenSpaceRotation(const struct FTransform& RelativeTrans, struct FRotator* OutDeltaRot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "FindMostOpenSpaceRotation");

	Params::AdvancedCamera_FindMostOpenSpaceRotation Parms{};

	Parms.RelativeTrans = std::move(RelativeTrans);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDeltaRot != nullptr)
		*OutDeltaRot = std::move(Parms.OutDeltaRot);

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.FindOrAddCameraConfigModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UX6CameraRuntimeConfigModifier*   NewModifier                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FX6CameraConfigBlendParams&CameraConfigBlendParams                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UX6CameraRuntimeConfigModifier*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UX6CameraRuntimeConfigModifier* UAdvancedCamera::FindOrAddCameraConfigModifier(class UX6CameraRuntimeConfigModifier* NewModifier, const struct FX6CameraConfigBlendParams& CameraConfigBlendParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "FindOrAddCameraConfigModifier");

	Params::AdvancedCamera_FindOrAddCameraConfigModifier Parms{};

	Parms.NewModifier = NewModifier;
	Parms.CameraConfigBlendParams = std::move(CameraConfigBlendParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.FixCameraByBasedMovement
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UAdvancedCamera::FixCameraByBasedMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "FixCameraByBasedMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.GetArmlengthLagSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ArmlengthLagSpeed                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAdvancedCamera::GetArmlengthLagSpeed(float ArmlengthLagSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetArmlengthLagSpeed");

	Params::AdvancedCamera_GetArmlengthLagSpeed Parms{};

	Parms.ArmlengthLagSpeed = ArmlengthLagSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetCameraRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UAdvancedCamera::GetCameraRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetCameraRotation");

	Params::AdvancedCamera_GetCameraRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetCameraRotationLagSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAdvancedCamera::GetCameraRotationLagSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetCameraRotationLagSpeed");

	Params::AdvancedCamera_GetCameraRotationLagSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.OnLookAtTargetBecomeViewTargetEvent
// (Event, Protected, BlueprintEvent)

void UAdvancedCamera::OnLookAtTargetBecomeViewTargetEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "OnLookAtTargetBecomeViewTargetEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.AdvancedCamera.OnLookAtTargetEndViewTargetEvent
// (Event, Protected, BlueprintEvent)

void UAdvancedCamera::OnLookAtTargetEndViewTargetEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "OnLookAtTargetEndViewTargetEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.AdvancedCamera.OnOwnerBecomeViewTargetEvent
// (Event, Protected, BlueprintEvent)

void UAdvancedCamera::OnOwnerBecomeViewTargetEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "OnOwnerBecomeViewTargetEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.AdvancedCamera.OnOwnerEndViewTargetEvent
// (Event, Protected, BlueprintEvent)

void UAdvancedCamera::OnOwnerEndViewTargetEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "OnOwnerEndViewTargetEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.AdvancedCamera.OnOwnerFullyBlendInViewTargetEvent
// (Event, Protected, BlueprintEvent)

void UAdvancedCamera::OnOwnerFullyBlendInViewTargetEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "OnOwnerFullyBlendInViewTargetEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.AdvancedCamera.OnOwnerFullyBlendOutViewTargetEvent
// (Event, Protected, BlueprintEvent)

void UAdvancedCamera::OnOwnerFullyBlendOutViewTargetEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "OnOwnerFullyBlendOutViewTargetEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.AdvancedCamera.OnRotateInput
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InputVector                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ElapsedTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::OnRotateInput(const struct FVector& InputVector, float ElapsedTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "OnRotateInput");

	Params::AdvancedCamera_OnRotateInput Parms{};

	Parms.InputVector = std::move(InputVector);
	Parms.ElapsedTime = ElapsedTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.OnZoomInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             InputValue                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::OnZoomInput(const float InputValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "OnZoomInput");

	Params::AdvancedCamera_OnZoomInput Parms{};

	Parms.InputValue = InputValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.PushBaseCameraConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ConfigKey                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAdvancedCamera::PushBaseCameraConfig(class FName ConfigKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "PushBaseCameraConfig");

	Params::AdvancedCamera_PushBaseCameraConfig Parms{};

	Parms.ConfigKey = ConfigKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.PushBaseParams
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCameraBaseParamsDefine&   BaseParams                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FX6CameraConfigBlendParams&CameraConfigBlendParams                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FX6CameraConfigPriority&   Priority                                               (ConstParm, Parm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAdvancedCamera::PushBaseParams(const struct FCameraBaseParamsDefine& BaseParams, const struct FX6CameraConfigBlendParams& CameraConfigBlendParams, const struct FX6CameraConfigPriority& Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "PushBaseParams");

	Params::AdvancedCamera_PushBaseParams Parms{};

	Parms.BaseParams = std::move(BaseParams);
	Parms.CameraConfigBlendParams = std::move(CameraConfigBlendParams);
	Parms.Priority = std::move(Priority);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.PushCameraConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraBaseParamsData*            TargetCameraDataBase                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TargetConfigKey                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideTransitionParams                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FViewTargetTransitionParams&TransitionParams                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAdvancedCamera::PushCameraConfig(class UCameraBaseParamsData* TargetCameraDataBase, class FName TargetConfigKey, bool bOverrideTransitionParams, const struct FViewTargetTransitionParams& TransitionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "PushCameraConfig");

	Params::AdvancedCamera_PushCameraConfig Parms{};

	Parms.TargetCameraDataBase = TargetCameraDataBase;
	Parms.TargetConfigKey = TargetConfigKey;
	Parms.bOverrideTransitionParams = bOverrideTransitionParams;
	Parms.TransitionParams = std::move(TransitionParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.PushCameraConfigOfCameraDataBase
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      TargetConfigKey                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FX6CameraConfigBlendParams&CameraConfigBlendParams                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAdvancedCamera::PushCameraConfigOfCameraDataBase(const class FName& TargetConfigKey, const struct FX6CameraConfigBlendParams& CameraConfigBlendParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "PushCameraConfigOfCameraDataBase");

	Params::AdvancedCamera_PushCameraConfigOfCameraDataBase Parms{};

	Parms.TargetConfigKey = TargetConfigKey;
	Parms.CameraConfigBlendParams = std::move(CameraConfigBlendParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.RecalculateCameraTransformIgnoreLag
// (Final, Native, Public, BlueprintCallable)

void UAdvancedCamera::RecalculateCameraTransformIgnoreLag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "RecalculateCameraTransformIgnoreLag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.ReceiveUpdateLookAtTarget
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class AActor*                     OldLookAtTarget                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     NewLookAtTarget                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::ReceiveUpdateLookAtTarget(const class AActor* OldLookAtTarget, const class AActor* NewLookAtTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "ReceiveUpdateLookAtTarget");

	Params::AdvancedCamera_ReceiveUpdateLookAtTarget Parms{};

	Parms.OldLookAtTarget = OldLookAtTarget;
	Parms.NewLookAtTarget = NewLookAtTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function X6Camera.AdvancedCamera.RemoveBaseCameraConfigByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideTransitionParams                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FViewTargetTransitionParams&TransitionParams                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UAdvancedCamera::RemoveBaseCameraConfigByIndex(int32 Index_0, bool bOverrideTransitionParams, const struct FViewTargetTransitionParams& TransitionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "RemoveBaseCameraConfigByIndex");

	Params::AdvancedCamera_RemoveBaseCameraConfigByIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.bOverrideTransitionParams = bOverrideTransitionParams;
	Parms.TransitionParams = std::move(TransitionParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.RemoveCameraConfigByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideTransitionParams                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FViewTargetTransitionParams&TransitionParams                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UAdvancedCamera::RemoveCameraConfigByIndex(int32 Index_0, bool bOverrideTransitionParams, const struct FViewTargetTransitionParams& TransitionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "RemoveCameraConfigByIndex");

	Params::AdvancedCamera_RemoveCameraConfigByIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.bOverrideTransitionParams = bOverrideTransitionParams;
	Parms.TransitionParams = std::move(TransitionParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.RemoveCameraConfigModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UX6CameraRuntimeConfigModifier*   Modifier                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FX6CameraConfigBlendParams&CameraConfigBlendParams                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UAdvancedCamera::RemoveCameraConfigModifier(class UX6CameraRuntimeConfigModifier* Modifier, const struct FX6CameraConfigBlendParams& CameraConfigBlendParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "RemoveCameraConfigModifier");

	Params::AdvancedCamera_RemoveCameraConfigModifier Parms{};

	Parms.Modifier = Modifier;
	Parms.CameraConfigBlendParams = std::move(CameraConfigBlendParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.ResetData
// (Final, Native, Public, BlueprintCallable)

void UAdvancedCamera::ResetData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "ResetData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.ResetToDefaultRelativeRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bApplyImmediate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bForceUpdateCamera                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::ResetToDefaultRelativeRotation(bool bApplyImmediate, const bool bForceUpdateCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "ResetToDefaultRelativeRotation");

	Params::AdvancedCamera_ResetToDefaultRelativeRotation Parms{};

	Parms.bApplyImmediate = bApplyImmediate;
	Parms.bForceUpdateCamera = bForceUpdateCamera;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetAcceptInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewAcceptInput                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetAcceptInput(bool bNewAcceptInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetAcceptInput");

	Params::AdvancedCamera_SetAcceptInput Parms{};

	Parms.bNewAcceptInput = bNewAcceptInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetAmbientConfigKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ConfigKey                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetAmbientConfigKey(class FName ConfigKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetAmbientConfigKey");

	Params::AdvancedCamera_SetAmbientConfigKey Parms{};

	Parms.ConfigKey = ConfigKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetArmlengthLagSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ArmlengthLagSpeed                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetArmlengthLagSpeed(float ArmlengthLagSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetArmlengthLagSpeed");

	Params::AdvancedCamera_SetArmlengthLagSpeed Parms{};

	Parms.ArmlengthLagSpeed = ArmlengthLagSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetCameraOrientationSynchronizer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UCameraOrientationSynchronizer>NewSynchronizerClass                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetCameraOrientationSynchronizer(TSubclassOf<class UCameraOrientationSynchronizer> NewSynchronizerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetCameraOrientationSynchronizer");

	Params::AdvancedCamera_SetCameraOrientationSynchronizer Parms{};

	Parms.NewSynchronizerClass = NewSynchronizerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetCameraRotationLagSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CameraRotationLagSpeed                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetCameraRotationLagSpeed(float CameraRotationLagSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetCameraRotationLagSpeed");

	Params::AdvancedCamera_SetCameraRotationLagSpeed Parms{};

	Parms.CameraRotationLagSpeed = CameraRotationLagSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetCameraWorldRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewDesireRotation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ApplyImmediate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetCameraWorldRotation(const struct FRotator& NewDesireRotation, bool ApplyImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetCameraWorldRotation");

	Params::AdvancedCamera_SetCameraWorldRotation Parms{};

	Parms.NewDesireRotation = std::move(NewDesireRotation);
	Parms.ApplyImmediate = ApplyImmediate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetDesiredFOV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewDesireFov                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ApplyImmediate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetDesiredFOV(float NewDesireFov, bool ApplyImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetDesiredFOV");

	Params::AdvancedCamera_SetDesiredFOV Parms{};

	Parms.NewDesireFov = NewDesireFov;
	Parms.ApplyImmediate = ApplyImmediate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetDesireLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewDesireLocation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ApplyImmediate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetDesireLocation(const struct FVector& NewDesireLocation, bool ApplyImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetDesireLocation");

	Params::AdvancedCamera_SetDesireLocation Parms{};

	Parms.NewDesireLocation = std::move(NewDesireLocation);
	Parms.ApplyImmediate = ApplyImmediate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetDesireRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewDesireRotation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ApplyImmediate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bForceUpdateCamera                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetDesireRotation(const struct FRotator& NewDesireRotation, bool ApplyImmediate, const bool bForceUpdateCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetDesireRotation");

	Params::AdvancedCamera_SetDesireRotation Parms{};

	Parms.NewDesireRotation = std::move(NewDesireRotation);
	Parms.ApplyImmediate = ApplyImmediate;
	Parms.bForceUpdateCamera = bForceUpdateCamera;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetDissolveEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetDissolveEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetDissolveEnable");

	Params::AdvancedCamera_SetDissolveEnable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetEnableZoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetEnableZoom(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetEnableZoom");

	Params::AdvancedCamera_SetEnableZoom Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetInterpLookAtLocationSpeedScale
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InInterpLookAtLocationSpeedScale                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetInterpLookAtLocationSpeedScale(const struct FVector& InInterpLookAtLocationSpeedScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetInterpLookAtLocationSpeedScale");

	Params::AdvancedCamera_SetInterpLookAtLocationSpeedScale Parms{};

	Parms.InInterpLookAtLocationSpeedScale = std::move(InInterpLookAtLocationSpeedScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetLockRelativeRotationToLookAtTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInLock                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetLockRelativeRotationToLookAtTarget(bool bInLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetLockRelativeRotationToLookAtTarget");

	Params::AdvancedCamera_SetLockRelativeRotationToLookAtTarget Parms{};

	Parms.bInLock = bInLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetLookAtRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewDesireRotation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ApplyImmediate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetLookAtRotation(const struct FRotator& NewDesireRotation, bool ApplyImmediate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetLookAtRotation");

	Params::AdvancedCamera_SetLookAtRotation Parms{};

	Parms.NewDesireRotation = std::move(NewDesireRotation);
	Parms.ApplyImmediate = ApplyImmediate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetMaxDistanceToInterpTargetScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMaxDistanceToInterpTargetScale                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetMaxDistanceToInterpTargetScale(float InMaxDistanceToInterpTargetScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetMaxDistanceToInterpTargetScale");

	Params::AdvancedCamera_SetMaxDistanceToInterpTargetScale Parms{};

	Parms.InMaxDistanceToInterpTargetScale = InMaxDistanceToInterpTargetScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetNeedInterpLookAtLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInNeedInterpLookAtLocation                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetNeedInterpLookAtLocation(bool bInNeedInterpLookAtLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetNeedInterpLookAtLocation");

	Params::AdvancedCamera_SetNeedInterpLookAtLocation Parms{};

	Parms.bInNeedInterpLookAtLocation = bInNeedInterpLookAtLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetOverrideCameraRotationLagSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bOverride                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CameraRotationLagSpeed                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetOverrideCameraRotationLagSpeed(bool bOverride, float CameraRotationLagSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetOverrideCameraRotationLagSpeed");

	Params::AdvancedCamera_SetOverrideCameraRotationLagSpeed Parms{};

	Parms.bOverride = bOverride;
	Parms.CameraRotationLagSpeed = CameraRotationLagSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetPassiveDesiredRotationBySpeed
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewDesireRotation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   AngularSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EViewTargetBlendFunction                BlendFunction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetPassiveDesiredRotationBySpeed(const struct FRotator& NewDesireRotation, float AngularSpeed, EViewTargetBlendFunction BlendFunction, float BlendExp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetPassiveDesiredRotationBySpeed");

	Params::AdvancedCamera_SetPassiveDesiredRotationBySpeed Parms{};

	Parms.NewDesireRotation = std::move(NewDesireRotation);
	Parms.AngularSpeed = AngularSpeed;
	Parms.BlendFunction = BlendFunction;
	Parms.BlendExp = BlendExp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetPassiveDesiredRotationByTime
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  NewDesireRotation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TotalTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EViewTargetBlendFunction                BlendFunction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetPassiveDesiredRotationByTime(const struct FRotator& NewDesireRotation, float TotalTime, EViewTargetBlendFunction BlendFunction, float BlendExp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetPassiveDesiredRotationByTime");

	Params::AdvancedCamera_SetPassiveDesiredRotationByTime Parms{};

	Parms.NewDesireRotation = std::move(NewDesireRotation);
	Parms.TotalTime = TotalTime;
	Parms.BlendFunction = BlendFunction;
	Parms.BlendExp = BlendExp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetUsingGamepad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInUsingGamepad                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetUsingGamepad(bool bInUsingGamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetUsingGamepad");

	Params::AdvancedCamera_SetUsingGamepad Parms{};

	Parms.bInUsingGamepad = bInUsingGamepad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetZoomedTargetOffsetZAdjustment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewZoomedTargetOffsetZAdjustment                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetZoomedTargetOffsetZAdjustment(const float NewZoomedTargetOffsetZAdjustment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetZoomedTargetOffsetZAdjustment");

	Params::AdvancedCamera_SetZoomedTargetOffsetZAdjustment Parms{};

	Parms.NewZoomedTargetOffsetZAdjustment = NewZoomedTargetOffsetZAdjustment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.StartAutoZoomOutCountDown
// (Final, Native, Public, BlueprintCallable)

void UAdvancedCamera::StartAutoZoomOutCountDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "StartAutoZoomOutCountDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.TransformVectorByRotation
// (Final, Native, Private, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  InRotation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   TransformVector                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UAdvancedCamera::TransformVectorByRotation(const struct FRotator& InRotation, const struct FVector& TransformVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "TransformVectorByRotation");

	Params::AdvancedCamera_TransformVectorByRotation Parms{};

	Parms.InRotation = std::move(InRotation);
	Parms.TransformVector = std::move(TransformVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.TriggerAutoZoomOut
// (Final, Native, Public)

void UAdvancedCamera::TriggerAutoZoomOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "TriggerAutoZoomOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.TryToUpdateBasedMovementHelper
// (Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAdvancedCamera::TryToUpdateBasedMovementHelper()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "TryToUpdateBasedMovementHelper");

	Params::AdvancedCamera_TryToUpdateBasedMovementHelper Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.UpdateBasedMovementHelper
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UCharacterMovementComponent*MovementComponent                                      (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                LastBaseTransform                                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                CurrentBaseTransform                                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                LastActorTransform                                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                CurrentActorTransform                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAdvancedCamera::UpdateBasedMovementHelper(const class UCharacterMovementComponent* MovementComponent, const struct FTransform& LastBaseTransform, const struct FTransform& CurrentBaseTransform, const struct FTransform& LastActorTransform, const struct FTransform& CurrentActorTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "UpdateBasedMovementHelper");

	Params::AdvancedCamera_UpdateBasedMovementHelper Parms{};

	Parms.MovementComponent = MovementComponent;
	Parms.LastBaseTransform = std::move(LastBaseTransform);
	Parms.CurrentBaseTransform = std::move(CurrentBaseTransform);
	Parms.LastActorTransform = std::move(LastActorTransform);
	Parms.CurrentActorTransform = std::move(CurrentActorTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.UpdateCameraConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::UpdateCameraConfig(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "UpdateCameraConfig");

	Params::AdvancedCamera_UpdateCameraConfig Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.UpdateDesiredArmLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDoTrace                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRotationLag                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLocationLag                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTargetArmlengthLag                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::UpdateDesiredArmLocation(bool bDoTrace, float DeltaTime, bool bRotationLag, bool bLocationLag, bool bTargetArmlengthLag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "UpdateDesiredArmLocation");

	Params::AdvancedCamera_UpdateDesiredArmLocation Parms{};

	Parms.bDoTrace = bDoTrace;
	Parms.DeltaTime = DeltaTime;
	Parms.bRotationLag = bRotationLag;
	Parms.bLocationLag = bLocationLag;
	Parms.bTargetArmlengthLag = bTargetArmlengthLag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.UpdateDesiredArmLocationFunction
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bDoTrace                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRotationLag                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLocationLag                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTargetArmlengthLag                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::UpdateDesiredArmLocationFunction(bool bDoTrace, float DeltaTime, bool bRotationLag, bool bLocationLag, bool bTargetArmlengthLag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "UpdateDesiredArmLocationFunction");

	Params::AdvancedCamera_UpdateDesiredArmLocationFunction Parms{};

	Parms.bDoTrace = bDoTrace;
	Parms.DeltaTime = DeltaTime;
	Parms.bRotationLag = bRotationLag;
	Parms.bLocationLag = bLocationLag;
	Parms.bTargetArmlengthLag = bTargetArmlengthLag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function X6Camera.AdvancedCamera.UpdatePassiveRotate
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator*                        DesiredRot                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::UpdatePassiveRotate(struct FRotator* DesiredRot, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "UpdatePassiveRotate");

	Params::AdvancedCamera_UpdatePassiveRotate Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DesiredRot != nullptr)
		*DesiredRot = std::move(Parms.DesiredRot);
}


// Function X6Camera.AdvancedCamera.CollectInputDebugOutput
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class FString>*                  InOutDebugInfoLines                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UAdvancedCamera::CollectInputDebugOutput(TArray<class FString>* InOutDebugInfoLines) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "CollectInputDebugOutput");

	Params::AdvancedCamera_CollectInputDebugOutput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutDebugInfoLines != nullptr)
		*InOutDebugInfoLines = std::move(Parms.InOutDebugInfoLines);
}


// Function X6Camera.AdvancedCamera.CollectLookAtTargetDebugOutput
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class FString>*                  InOutDebugInfoLines                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UAdvancedCamera::CollectLookAtTargetDebugOutput(TArray<class FString>* InOutDebugInfoLines) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "CollectLookAtTargetDebugOutput");

	Params::AdvancedCamera_CollectLookAtTargetDebugOutput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutDebugInfoLines != nullptr)
		*InOutDebugInfoLines = std::move(Parms.InOutDebugInfoLines);
}


// Function X6Camera.AdvancedCamera.CollectSpringArmDebugOutput
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class FString>*                  InOutDebugInfoLines                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UAdvancedCamera::CollectSpringArmDebugOutput(TArray<class FString>* InOutDebugInfoLines) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "CollectSpringArmDebugOutput");

	Params::AdvancedCamera_CollectSpringArmDebugOutput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutDebugInfoLines != nullptr)
		*InOutDebugInfoLines = std::move(Parms.InOutDebugInfoLines);
}


// Function X6Camera.AdvancedCamera.FixLocationByBasedMovement
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBasedMovementFixCameraHelper&Helper                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UAdvancedCamera::FixLocationByBasedMovement(const struct FBasedMovementFixCameraHelper& Helper, const struct FVector& InLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "FixLocationByBasedMovement");

	Params::AdvancedCamera_FixLocationByBasedMovement Parms{};

	Parms.Helper = std::move(Helper);
	Parms.InLocation = std::move(InLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.FixRotationByBasedMovement
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBasedMovementFixCameraHelper&Helper                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRotator&                  InRotation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UAdvancedCamera::FixRotationByBasedMovement(const struct FBasedMovementFixCameraHelper& Helper, const struct FRotator& InRotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "FixRotationByBasedMovement");

	Params::AdvancedCamera_FixRotationByBasedMovement Parms{};

	Parms.Helper = std::move(Helper);
	Parms.InRotation = std::move(InRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetCameraArmlength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAdvancedCamera::GetCameraArmlength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetCameraArmlength");

	Params::AdvancedCamera_GetCameraArmlength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetCameraConfigkey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UAdvancedCamera::GetCameraConfigkey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetCameraConfigkey");

	Params::AdvancedCamera_GetCameraConfigkey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetCameraOrientationSynchronizer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCameraOrientationSynchronizer*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraOrientationSynchronizer* UAdvancedCamera::GetCameraOrientationSynchronizer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetCameraOrientationSynchronizer");

	Params::AdvancedCamera_GetCameraOrientationSynchronizer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetCameraSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FX6CameraBlendableSettings ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FX6CameraBlendableSettings UAdvancedCamera::GetCameraSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetCameraSettings");

	Params::AdvancedCamera_GetCameraSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetCurrentSocketRotationOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UAdvancedCamera::GetCurrentSocketRotationOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetCurrentSocketRotationOffset");

	Params::AdvancedCamera_GetCurrentSocketRotationOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetDesiredFOV
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAdvancedCamera::GetDesiredFOV() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetDesiredFOV");

	Params::AdvancedCamera_GetDesiredFOV Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetDesiredLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UAdvancedCamera::GetDesiredLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetDesiredLocation");

	Params::AdvancedCamera_GetDesiredLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetDesiredRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UAdvancedCamera::GetDesiredRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetDesiredRotation");

	Params::AdvancedCamera_GetDesiredRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetLookAtTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UAdvancedCamera::GetLookAtTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetLookAtTarget");

	Params::AdvancedCamera_GetLookAtTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.GetPreviousArmOriginLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UAdvancedCamera::GetPreviousArmOriginLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "GetPreviousArmOriginLocation");

	Params::AdvancedCamera_GetPreviousArmOriginLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.IsZoomedIn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAdvancedCamera::IsZoomedIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "IsZoomedIn");

	Params::AdvancedCamera_IsZoomedIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.AdvancedCamera.SetEnableRotationPitchSync
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const bool                              bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetEnableRotationPitchSync(const bool bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetEnableRotationPitchSync");

	Params::AdvancedCamera_SetEnableRotationPitchSync Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetEnableRotationYawSync
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const bool                              bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetEnableRotationYawSync(const bool bEnable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetEnableRotationYawSync");

	Params::AdvancedCamera_SetEnableRotationYawSync Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.SetOrientationSyncCanResetPitch
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const bool                              bInEnabled                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdvancedCamera::SetOrientationSyncCanResetPitch(const bool bInEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "SetOrientationSyncCanResetPitch");

	Params::AdvancedCamera_SetOrientationSyncCanResetPitch Parms{};

	Parms.bInEnabled = bInEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCamera.StartResetRotation
// (Final, Native, Public, BlueprintCallable, Const)

void UAdvancedCamera::StartResetRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AdvancedCamera", "StartResetRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.AdvancedCameraBPFLibrary.GetOverriddenCameraBaseParams
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCameraBaseParamsDefine&   Origin                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FCameraBaseParamsDefine&   Override                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FCameraBaseParamsDefine*         OutOverridden                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UAdvancedCameraBPFLibrary::GetOverriddenCameraBaseParams(const struct FCameraBaseParamsDefine& Origin, const struct FCameraBaseParamsDefine& Override, struct FCameraBaseParamsDefine* OutOverridden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AdvancedCameraBPFLibrary", "GetOverriddenCameraBaseParams");

	Params::AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams Parms{};

	Parms.Origin = std::move(Origin);
	Parms.Override = std::move(Override);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOverridden != nullptr)
		*OutOverridden = std::move(Parms.OutOverridden);
}


// Function X6Camera.AdvancedCameraBPFLibrary.GetOverriddenCameraInputConfig
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FX6CameraInputConfig&      Origin                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FX6CameraInputConfig&      Override                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FX6CameraInputConfig*            OutOverridden                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UAdvancedCameraBPFLibrary::GetOverriddenCameraInputConfig(const struct FX6CameraInputConfig& Origin, const struct FX6CameraInputConfig& Override, struct FX6CameraInputConfig* OutOverridden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AdvancedCameraBPFLibrary", "GetOverriddenCameraInputConfig");

	Params::AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig Parms{};

	Parms.Origin = std::move(Origin);
	Parms.Override = std::move(Override);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOverridden != nullptr)
		*OutOverridden = std::move(Parms.OutOverridden);
}


// Function X6Camera.AdvancedCameraBPFLibrary.VectorSpringInterp
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector3f&                 Current                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector3f&                 Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVectorSpringStateInfo&          SpringState                                            (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Stiffness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CriticalDamping                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Mass                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetVelocityAmount                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bClamp                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector3f&                 MinValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector3f&                 MaxValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInitializeFromTarget                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector3f                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector3f UAdvancedCameraBPFLibrary::VectorSpringInterp(const struct FVector3f& Current, const struct FVector3f& Target, struct FVectorSpringStateInfo& SpringState, float Stiffness, float CriticalDamping, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, const struct FVector3f& MinValue, const struct FVector3f& MaxValue, bool bInitializeFromTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AdvancedCameraBPFLibrary", "VectorSpringInterp");

	Params::AdvancedCameraBPFLibrary_VectorSpringInterp Parms{};

	Parms.Current = std::move(Current);
	Parms.Target = std::move(Target);
	Parms.SpringState = std::move(SpringState);
	Parms.Stiffness = Stiffness;
	Parms.CriticalDamping = CriticalDamping;
	Parms.DeltaTime = DeltaTime;
	Parms.Mass = Mass;
	Parms.TargetVelocityAmount = TargetVelocityAmount;
	Parms.bClamp = bClamp;
	Parms.MinValue = std::move(MinValue);
	Parms.MaxValue = std::move(MaxValue);
	Parms.bInitializeFromTarget = bInitializeFromTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SpringState = std::move(Parms.SpringState);

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.AddCameraModifierToCustomList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraModifiersDetailData*       CameraModifierDataAsset                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::AddCameraModifierToCustomList(class UCameraModifiersDetailData* CameraModifierDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "AddCameraModifierToCustomList");

	Params::X6PlayerCameraManagerBase_AddCameraModifierToCustomList Parms{};

	Parms.CameraModifierDataAsset = CameraModifierDataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.BezierCurvePathBlend
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   BeginPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   EndPoint                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ControlPointVerticalLineDistance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExtremePointAlphy                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointFrequency                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DrawDebug                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::BezierCurvePathBlend(const struct FVector& BeginPoint, const struct FVector& EndPoint, const struct FVector& Direction, float ControlPointVerticalLineDistance, float ExtremePointAlphy, int32 PointFrequency, bool DrawDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "BezierCurvePathBlend");

	Params::X6PlayerCameraManagerBase_BezierCurvePathBlend Parms{};

	Parms.BeginPoint = std::move(BeginPoint);
	Parms.EndPoint = std::move(EndPoint);
	Parms.Direction = std::move(Direction);
	Parms.ControlPointVerticalLineDistance = ControlPointVerticalLineDistance;
	Parms.ExtremePointAlphy = ExtremePointAlphy;
	Parms.PointFrequency = PointFrequency;
	Parms.DrawDebug = DrawDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.BlendBackToFollow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FViewTargetTransitionParams&TransitionParams                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::BlendBackToFollow(const struct FViewTargetTransitionParams& TransitionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "BlendBackToFollow");

	Params::X6PlayerCameraManagerBase_BlendBackToFollow Parms{};

	Parms.TransitionParams = std::move(TransitionParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.BlendBackToViewTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FViewTargetTransitionParams&TransitionParams                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::BlendBackToViewTarget(const struct FViewTargetTransitionParams& TransitionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "BlendBackToViewTarget");

	Params::X6PlayerCameraManagerBase_BlendBackToViewTarget Parms{};

	Parms.TransitionParams = std::move(TransitionParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.BlendToNewViewInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMinimalViewInfo&          NewInfo                                                (Parm, NativeAccessSpecifierPublic)
// const struct FViewTargetTransitionParams&TransitionParams                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::BlendToNewViewInfo(const struct FMinimalViewInfo& NewInfo, const struct FViewTargetTransitionParams& TransitionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "BlendToNewViewInfo");

	Params::X6PlayerCameraManagerBase_BlendToNewViewInfo Parms{};

	Parms.NewInfo = std::move(NewInfo);
	Parms.TransitionParams = std::move(TransitionParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.ExitCameraZoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AX6PlayerCameraManagerBase::ExitCameraZoom(const float BlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "ExitCameraZoom");

	Params::X6PlayerCameraManagerBase_ExitCameraZoom Parms{};

	Parms.BlendOutTime = BlendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.GenCustomCurve_Parabola
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   StartPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   EndPoint                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ControllPoint                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTracePath                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ProjectileRadius                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SimFrequency                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxSimTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>*                 OutPathPositions                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector>*                 OutPathVelocitys                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::GenCustomCurve_Parabola(const struct FVector& StartPoint, const struct FVector& EndPoint, const struct FVector& ControllPoint, bool bTracePath, float ProjectileRadius, float SimFrequency, float MaxSimTime, TArray<struct FVector>* OutPathPositions, TArray<struct FVector>* OutPathVelocitys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GenCustomCurve_Parabola");

	Params::X6PlayerCameraManagerBase_GenCustomCurve_Parabola Parms{};

	Parms.StartPoint = std::move(StartPoint);
	Parms.EndPoint = std::move(EndPoint);
	Parms.ControllPoint = std::move(ControllPoint);
	Parms.bTracePath = bTracePath;
	Parms.ProjectileRadius = ProjectileRadius;
	Parms.SimFrequency = SimFrequency;
	Parms.MaxSimTime = MaxSimTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPathPositions != nullptr)
		*OutPathPositions = std::move(Parms.OutPathPositions);

	if (OutPathVelocitys != nullptr)
		*OutPathVelocitys = std::move(Parms.OutPathVelocitys);
}


// Function X6Camera.X6PlayerCameraManagerBase.GenSecondOrderBezierCurve
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   BeginPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   EndPoint                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InfluencePoint                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointFrequency                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DrawDebug                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::GenSecondOrderBezierCurve(const struct FVector& BeginPoint, const struct FVector& EndPoint, const struct FVector& InfluencePoint, int32 PointFrequency, bool DrawDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GenSecondOrderBezierCurve");

	Params::X6PlayerCameraManagerBase_GenSecondOrderBezierCurve Parms{};

	Parms.BeginPoint = std::move(BeginPoint);
	Parms.EndPoint = std::move(EndPoint);
	Parms.InfluencePoint = std::move(InfluencePoint);
	Parms.PointFrequency = PointFrequency;
	Parms.DrawDebug = DrawDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.GenThirdOrderBezierCurve
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   BeginPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   EndPoint                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InfluencePointA                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InfluencePointB                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointFrequency                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DrawDebug                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AX6PlayerCameraManagerBase::GenThirdOrderBezierCurve(const struct FVector& BeginPoint, const struct FVector& EndPoint, const struct FVector& InfluencePointA, const struct FVector& InfluencePointB, int32 PointFrequency, bool DrawDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GenThirdOrderBezierCurve");

	Params::X6PlayerCameraManagerBase_GenThirdOrderBezierCurve Parms{};

	Parms.BeginPoint = std::move(BeginPoint);
	Parms.EndPoint = std::move(EndPoint);
	Parms.InfluencePointA = std::move(InfluencePointA);
	Parms.InfluencePointB = std::move(InfluencePointB);
	Parms.PointFrequency = PointFrequency;
	Parms.DrawDebug = DrawDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.OnCameraRotateInput
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InputVector                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             ElapsedTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EX6CameraInputDeviceType          InputDeviceType                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::OnCameraRotateInput(const struct FVector& InputVector, const float ElapsedTime, const EX6CameraInputDeviceType InputDeviceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "OnCameraRotateInput");

	Params::X6PlayerCameraManagerBase_OnCameraRotateInput Parms{};

	Parms.InputVector = std::move(InputVector);
	Parms.ElapsedTime = ElapsedTime;
	Parms.InputDeviceType = InputDeviceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.OnCameraZoomInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             InputValue                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EX6CameraInputDeviceType          InputDeviceType                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::OnCameraZoomInput(const float InputValue, const EX6CameraInputDeviceType InputDeviceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "OnCameraZoomInput");

	Params::X6PlayerCameraManagerBase_OnCameraZoomInput Parms{};

	Parms.InputValue = InputValue;
	Parms.InputDeviceType = InputDeviceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.PopCameraState
// (Final, Native, Protected, BlueprintCallable)

void AX6PlayerCameraManagerBase::PopCameraState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "PopCameraState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.PostChangeCameraStates
// (Native, Protected, BlueprintCallable)

void AX6PlayerCameraManagerBase::PostChangeCameraStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "PostChangeCameraStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.PushCameraState
// (Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCameraStateViewTagetData*       InCameraState                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::PushCameraState(struct FCameraStateViewTagetData* InCameraState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "PushCameraState");

	Params::X6PlayerCameraManagerBase_PushCameraState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InCameraState != nullptr)
		*InCameraState = std::move(Parms.InCameraState);
}


// Function X6Camera.X6PlayerCameraManagerBase.RemoveCameraModifierFromCustomList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraModifiersDetailData*       CameraModifierDataAsset                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::RemoveCameraModifierFromCustomList(class UCameraModifiersDetailData* CameraModifierDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "RemoveCameraModifierFromCustomList");

	Params::X6PlayerCameraManagerBase_RemoveCameraModifierFromCustomList Parms{};

	Parms.CameraModifierDataAsset = CameraModifierDataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.RemoveCameraStateByIndex
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const int32                             IndexToRemove                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bAllowShrinking                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::RemoveCameraStateByIndex(const int32 IndexToRemove, const bool bAllowShrinking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "RemoveCameraStateByIndex");

	Params::X6PlayerCameraManagerBase_RemoveCameraStateByIndex Parms{};

	Parms.IndexToRemove = IndexToRemove;
	Parms.bAllowShrinking = bAllowShrinking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.SetCameraDrawDebug
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawDebugTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::SetCameraDrawDebug(bool bEnable, float DrawDebugTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SetCameraDrawDebug");

	Params::X6PlayerCameraManagerBase_SetCameraDrawDebug Parms{};

	Parms.bEnable = bEnable;
	Parms.DrawDebugTime = DrawDebugTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.SetCameraViewPointWithBlend
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMinimalViewInfo&          ViewInfo                                               (Parm, NativeAccessSpecifierPublic)
// const struct FViewTargetTransitionParams&TransitionParams                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::SetCameraViewPointWithBlend(const struct FMinimalViewInfo& ViewInfo, const struct FViewTargetTransitionParams& TransitionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SetCameraViewPointWithBlend");

	Params::X6PlayerCameraManagerBase_SetCameraViewPointWithBlend Parms{};

	Parms.ViewInfo = std::move(ViewInfo);
	Parms.TransitionParams = std::move(TransitionParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.SetEnableRotateInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::SetEnableRotateInput(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SetEnableRotateInput");

	Params::X6PlayerCameraManagerBase_SetEnableRotateInput Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.SetEnableZoomInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::SetEnableZoomInput(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SetEnableZoomInput");

	Params::X6PlayerCameraManagerBase_SetEnableZoomInput Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.SetPitchSyncSettingValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    PitchValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::SetPitchSyncSettingValue(bool PitchValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SetPitchSyncSettingValue");

	Params::X6PlayerCameraManagerBase_SetPitchSyncSettingValue Parms{};

	Parms.PitchValue = PitchValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.SetViewTargetBezierCurve
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FViewTargetTransitionParams&TransitionParams                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ControlPointVerticalLineDistance                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExtremePointAlphy                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PointFrequency                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::SetViewTargetBezierCurve(class AActor* Target, const struct FViewTargetTransitionParams& TransitionParams, const struct FVector& Direction, float ControlPointVerticalLineDistance, float ExtremePointAlphy, int32 PointFrequency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SetViewTargetBezierCurve");

	Params::X6PlayerCameraManagerBase_SetViewTargetBezierCurve Parms{};

	Parms.Target = Target;
	Parms.TransitionParams = std::move(TransitionParams);
	Parms.Direction = std::move(Direction);
	Parms.ControlPointVerticalLineDistance = ControlPointVerticalLineDistance;
	Parms.ExtremePointAlphy = ExtremePointAlphy;
	Parms.PointFrequency = PointFrequency;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.SetViewTargetWithParabolaPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FViewTargetCurveTransitionParams&TransitionParams                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   FrontViewAngleScope                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinHeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxHeight                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SimFrequency                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HeightTakePrecedence                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bErgodicFromMiddle                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AX6PlayerCameraManagerBase::SetViewTargetWithParabolaPath(class AActor* Target, const struct FViewTargetCurveTransitionParams& TransitionParams, float FrontViewAngleScope, float MinHeight, float MaxHeight, float SimFrequency, bool HeightTakePrecedence, bool bErgodicFromMiddle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SetViewTargetWithParabolaPath");

	Params::X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath Parms{};

	Parms.Target = Target;
	Parms.TransitionParams = std::move(TransitionParams);
	Parms.FrontViewAngleScope = FrontViewAngleScope;
	Parms.MinHeight = MinHeight;
	Parms.MaxHeight = MaxHeight;
	Parms.SimFrequency = SimFrequency;
	Parms.HeightTakePrecedence = HeightTakePrecedence;
	Parms.bErgodicFromMiddle = bErgodicFromMiddle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.SetX6CameraInputDeviceType
// (Final, Native, Protected)
// Parameters:
// const EX6CameraInputDeviceType          InputDeviceType                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::SetX6CameraInputDeviceType(const EX6CameraInputDeviceType InputDeviceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SetX6CameraInputDeviceType");

	Params::X6PlayerCameraManagerBase_SetX6CameraInputDeviceType Parms{};

	Parms.InputDeviceType = InputDeviceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.SetYawSyncSettingValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    YawValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::SetYawSyncSettingValue(bool YawValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SetYawSyncSettingValue");

	Params::X6PlayerCameraManagerBase_SetYawSyncSettingValue Parms{};

	Parms.YawValue = YawValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.SortCameraStatesByPriority
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              bDescendOrder                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AX6PlayerCameraManagerBase::SortCameraStatesByPriority(const bool bDescendOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SortCameraStatesByPriority");

	Params::X6PlayerCameraManagerBase_SortCameraStatesByPriority Parms{};

	Parms.bDescendOrder = bDescendOrder;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6PlayerCameraManagerBase.StartCustomizeCameraShake
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FROscillator&              ROscillator                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVOscillator&              VOscillator                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FFOscillator&              Oscillator                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UCameraShakeBase*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraShakeBase* AX6PlayerCameraManagerBase::StartCustomizeCameraShake(float Duration, float BlendInTime, float BlendOutTime, const struct FROscillator& ROscillator, const struct FVOscillator& VOscillator, const struct FFOscillator& Oscillator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "StartCustomizeCameraShake");

	Params::X6PlayerCameraManagerBase_StartCustomizeCameraShake Parms{};

	Parms.Duration = Duration;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.ROscillator = std::move(ROscillator);
	Parms.VOscillator = std::move(VOscillator);
	Parms.Oscillator = std::move(Oscillator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.SwitchCameraState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ConfigKey                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          TargetObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AX6PlayerCameraManagerBase::SwitchCameraState(const class FString& ConfigKey, class UObject* TargetObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SwitchCameraState");

	Params::X6PlayerCameraManagerBase_SwitchCameraState Parms{};

	Parms.ConfigKey = std::move(ConfigKey);
	Parms.TargetObject = TargetObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.SwitchToLastCameraState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewTarget                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AX6PlayerCameraManagerBase::SwitchToLastCameraState(class AActor* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "SwitchToLastCameraState");

	Params::X6PlayerCameraManagerBase_SwitchToLastCameraState Parms{};

	Parms.NewTarget = NewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.GetCameraPendingViewTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTViewTarget                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTViewTarget AX6PlayerCameraManagerBase::GetCameraPendingViewTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GetCameraPendingViewTarget");

	Params::X6PlayerCameraManagerBase_GetCameraPendingViewTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.GetCameraViewTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTViewTarget                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FTViewTarget AX6PlayerCameraManagerBase::GetCameraViewTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GetCameraViewTarget");

	Params::X6PlayerCameraManagerBase_GetCameraViewTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.GetEnableRotateInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AX6PlayerCameraManagerBase::GetEnableRotateInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GetEnableRotateInput");

	Params::X6PlayerCameraManagerBase_GetEnableRotateInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.GetEnableZoomInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AX6PlayerCameraManagerBase::GetEnableZoomInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GetEnableZoomInput");

	Params::X6PlayerCameraManagerBase_GetEnableZoomInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.GetLastCameraLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AX6PlayerCameraManagerBase::GetLastCameraLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GetLastCameraLocation");

	Params::X6PlayerCameraManagerBase_GetLastCameraLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.GetLastCameraRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator AX6PlayerCameraManagerBase::GetLastCameraRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GetLastCameraRotation");

	Params::X6PlayerCameraManagerBase_GetLastCameraRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.GetPlayerInputForwardVector
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AX6PlayerCameraManagerBase::GetPlayerInputForwardVector() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GetPlayerInputForwardVector");

	Params::X6PlayerCameraManagerBase_GetPlayerInputForwardVector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.GetPlayerInputRightVector
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector AX6PlayerCameraManagerBase::GetPlayerInputRightVector() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GetPlayerInputRightVector");

	Params::X6PlayerCameraManagerBase_GetPlayerInputRightVector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.GetX6CameraInputDeviceType
// (Final, Native, Public, Const)
// Parameters:
// EX6CameraInputDeviceType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EX6CameraInputDeviceType AX6PlayerCameraManagerBase::GetX6CameraInputDeviceType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GetX6CameraInputDeviceType");

	Params::X6PlayerCameraManagerBase_GetX6CameraInputDeviceType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.GetX6CameraPlatformType
// (Final, Native, Public, Const)
// Parameters:
// EX6CameraPlatformType                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EX6CameraPlatformType AX6PlayerCameraManagerBase::GetX6CameraPlatformType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "GetX6CameraPlatformType");

	Params::X6PlayerCameraManagerBase_GetX6CameraPlatformType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.IsCameraZoomedIn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AX6PlayerCameraManagerBase::IsCameraZoomedIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "IsCameraZoomedIn");

	Params::X6PlayerCameraManagerBase_IsCameraZoomedIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.K2_GetCameraStateData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCameraStateViewTagetData  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FCameraStateViewTagetData AX6PlayerCameraManagerBase::K2_GetCameraStateData(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "K2_GetCameraStateData");

	Params::X6PlayerCameraManagerBase_K2_GetCameraStateData Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.K2_GetCameraStateNum
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AX6PlayerCameraManagerBase::K2_GetCameraStateNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "K2_GetCameraStateNum");

	Params::X6PlayerCameraManagerBase_K2_GetCameraStateNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.K2_TopCameraState
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECameraState                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECameraState AX6PlayerCameraManagerBase::K2_TopCameraState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "K2_TopCameraState");

	Params::X6PlayerCameraManagerBase_K2_TopCameraState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6PlayerCameraManagerBase.K2_TopCameraStateData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FCameraStateViewTagetData  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FCameraStateViewTagetData AX6PlayerCameraManagerBase::K2_TopCameraStateData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6PlayerCameraManagerBase", "K2_TopCameraStateData");

	Params::X6PlayerCameraManagerBase_K2_TopCameraStateData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraCollisionProcess.InitActorsToIgnore
// (Final, Native, Public, BlueprintCallable)

void UCameraCollisionProcess::InitActorsToIgnore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCollisionProcess", "InitActorsToIgnore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraCollisionProcess.K2_GetValidCameraLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   LookAtTargetLoc                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ArmOriginLoc                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   DesiredLoc                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutFixedArmOriginLoc                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutValidCameraLoc                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCameraCollisionProcess::K2_GetValidCameraLocation(const struct FVector& LookAtTargetLoc, const struct FVector& ArmOriginLoc, const struct FVector& DesiredLoc, struct FVector* OutFixedArmOriginLoc, struct FVector* OutValidCameraLoc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCollisionProcess", "K2_GetValidCameraLocation");

	Params::CameraCollisionProcess_K2_GetValidCameraLocation Parms{};

	Parms.LookAtTargetLoc = std::move(LookAtTargetLoc);
	Parms.ArmOriginLoc = std::move(ArmOriginLoc);
	Parms.DesiredLoc = std::move(DesiredLoc);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFixedArmOriginLoc != nullptr)
		*OutFixedArmOriginLoc = std::move(Parms.OutFixedArmOriginLoc);

	if (OutValidCameraLoc != nullptr)
		*OutValidCameraLoc = std::move(Parms.OutValidCameraLoc);

	return Parms.ReturnValue;
}


// Function X6Camera.CameraCollisionProcess.K2_ProcessSpringArmCollision
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           LookAtTarget                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerCameraManager*             InPlayerCameraManager                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreviousExpectArmLength                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreviousActualArmLength                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ProbeSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   DesireLoc                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ArmOriginLoc                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutFixedArmOriginLoc                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutFixedResultLoc                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraCollisionProcess::K2_ProcessSpringArmCollision(const float DeltaTime, class AActor* LookAtTarget, class APlayerCameraManager* InPlayerCameraManager, float PreviousExpectArmLength, float PreviousActualArmLength, float ProbeSize, const struct FVector& DesireLoc, const struct FVector& ArmOriginLoc, struct FVector* OutFixedArmOriginLoc, struct FVector* OutFixedResultLoc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCollisionProcess", "K2_ProcessSpringArmCollision");

	Params::CameraCollisionProcess_K2_ProcessSpringArmCollision Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.LookAtTarget = LookAtTarget;
	Parms.InPlayerCameraManager = InPlayerCameraManager;
	Parms.PreviousExpectArmLength = PreviousExpectArmLength;
	Parms.PreviousActualArmLength = PreviousActualArmLength;
	Parms.ProbeSize = ProbeSize;
	Parms.DesireLoc = std::move(DesireLoc);
	Parms.ArmOriginLoc = std::move(ArmOriginLoc);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFixedArmOriginLoc != nullptr)
		*OutFixedArmOriginLoc = std::move(Parms.OutFixedArmOriginLoc);

	if (OutFixedResultLoc != nullptr)
		*OutFixedResultLoc = std::move(Parms.OutFixedResultLoc);
}


// Function X6Camera.CameraCollisionProcess.GetEnableCameraCollisionDebug
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCameraCollisionProcess::GetEnableCameraCollisionDebug() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCollisionProcess", "GetEnableCameraCollisionDebug");

	Params::CameraCollisionProcess_GetEnableCameraCollisionDebug Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraCollisionProcess.GetHeadInFixArmOrigin
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class AActor*                     InLookAtTarget                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutHeadLocation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutHeadSize                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCameraCollisionProcess::GetHeadInFixArmOrigin(const class AActor* InLookAtTarget, struct FVector* OutHeadLocation, float* OutHeadSize) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCollisionProcess", "GetHeadInFixArmOrigin");

	Params::CameraCollisionProcess_GetHeadInFixArmOrigin Parms{};

	Parms.InLookAtTarget = InLookAtTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHeadLocation != nullptr)
		*OutHeadLocation = std::move(Parms.OutHeadLocation);

	if (OutHeadSize != nullptr)
		*OutHeadSize = Parms.OutHeadSize;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraCollisionProcess.GetHeadOfActor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AActor*                     InActor                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutHeadLocation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutHeadSize                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCameraCollisionProcess::GetHeadOfActor(const class AActor* InActor, struct FVector* OutHeadLocation, float* OutHeadSize) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraCollisionProcess", "GetHeadOfActor");

	Params::CameraCollisionProcess_GetHeadOfActor Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHeadLocation != nullptr)
		*OutHeadLocation = std::move(Parms.OutHeadLocation);

	if (OutHeadSize != nullptr)
		*OutHeadSize = Parms.OutHeadSize;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraLagProcess.FixCameraByBasedMovement
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBasedMovementFixCameraHelper&Helper                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCameraLagProcess::FixCameraByBasedMovement(const struct FBasedMovementFixCameraHelper& Helper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraLagProcess", "FixCameraByBasedMovement");

	Params::CameraLagProcess_FixCameraByBasedMovement Parms{};

	Parms.Helper = std::move(Helper);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraLagProcess.GetLagRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  PreviousRotation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRotator&                  DesiredRot                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UCameraLagProcess::GetLagRotation(const struct FRotator& PreviousRotation, const struct FRotator& DesiredRot, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraLagProcess", "GetLagRotation");

	Params::CameraLagProcess_GetLagRotation Parms{};

	Parms.PreviousRotation = std::move(PreviousRotation);
	Parms.DesiredRot = std::move(DesiredRot);
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraLagProcess.GetLagSpringArm
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   PreviousArmlength                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   springArmLength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCameraLagProcess::GetLagSpringArm(float PreviousArmlength, float springArmLength, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraLagProcess", "GetLagSpringArm");

	Params::CameraLagProcess_GetLagSpringArm Parms{};

	Parms.PreviousArmlength = PreviousArmlength;
	Parms.springArmLength = springArmLength;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraLagProcess.GetLagSpringArmOrigin
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const bool                              bUseWorldSpaceLag                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     ReferenceActor                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   PreviousLocation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   FocusLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UCameraLagProcess::GetLagSpringArmOrigin(const bool bUseWorldSpaceLag, const class AActor* ReferenceActor, const struct FVector& PreviousLocation, const struct FVector& FocusLocation, const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraLagProcess", "GetLagSpringArmOrigin");

	Params::CameraLagProcess_GetLagSpringArmOrigin Parms{};

	Parms.bUseWorldSpaceLag = bUseWorldSpaceLag;
	Parms.ReferenceActor = ReferenceActor;
	Parms.PreviousLocation = std::move(PreviousLocation);
	Parms.FocusLocation = std::move(FocusLocation);
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraLagProcess.GetLocalLagRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                Transform                                              (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  PreviousRotation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRotator&                  DesiredRot                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UCameraLagProcess::GetLocalLagRotation(const struct FTransform& Transform, const struct FRotator& PreviousRotation, const struct FRotator& DesiredRot, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraLagProcess", "GetLocalLagRotation");

	Params::CameraLagProcess_GetLocalLagRotation Parms{};

	Parms.Transform = std::move(Transform);
	Parms.PreviousRotation = std::move(PreviousRotation);
	Parms.DesiredRot = std::move(DesiredRot);
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraLagProcess.RInterpTo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  Current                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRotator&                  Target                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UCameraLagProcess::RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraLagProcess", "RInterpTo");

	Params::CameraLagProcess_RInterpTo Parms{};

	Parms.Current = std::move(Current);
	Parms.Target = std::move(Target);
	Parms.DeltaTime = DeltaTime;
	Parms.InterpSpeed = InterpSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraModeInterface.OnCameraModeChanged
// (Native, Event, Public, BlueprintEvent)

void ICameraModeInterface::OnCameraModeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraModeInterface", "OnCameraModeChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraOrientationSynchronizer.BlueprintSyncCameraRotationPitch
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  InTargetRotation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UCameraOrientationSynchronizer::BlueprintSyncCameraRotationPitch(const float DeltaTime, const struct FRotator& InTargetRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraOrientationSynchronizer", "BlueprintSyncCameraRotationPitch");

	Params::CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.InTargetRotation = std::move(InTargetRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraOrientationSynchronizer.BlueprintSyncCameraRotationYaw
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  InTargetRotation                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UCameraOrientationSynchronizer::BlueprintSyncCameraRotationYaw(const float DeltaTime, const struct FRotator& InTargetRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraOrientationSynchronizer", "BlueprintSyncCameraRotationYaw");

	Params::CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.InTargetRotation = std::move(InTargetRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraOrientationSynchronizer.FixCameraByBasedMovement
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBasedMovementFixCameraHelper&Helper                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCameraOrientationSynchronizer::FixCameraByBasedMovement(const struct FBasedMovementFixCameraHelper& Helper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraOrientationSynchronizer", "FixCameraByBasedMovement");

	Params::CameraOrientationSynchronizer_FixCameraByBasedMovement Parms{};

	Parms.Helper = std::move(Helper);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraOrientationSynchronizer.ReceiveCameraRotateInput
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FRotator&                  InDeltaRotation                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UCameraOrientationSynchronizer::ReceiveCameraRotateInput(const struct FRotator& InDeltaRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraOrientationSynchronizer", "ReceiveCameraRotateInput");

	Params::CameraOrientationSynchronizer_ReceiveCameraRotateInput Parms{};

	Parms.InDeltaRotation = std::move(InDeltaRotation);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function X6Camera.CameraOrientationSynchronizer.ReceiveInit
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAdvancedCamera*                  InOwnerAdvancedCamera                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraOrientationSynchronizer::ReceiveInit(class UAdvancedCamera* InOwnerAdvancedCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraOrientationSynchronizer", "ReceiveInit");

	Params::CameraOrientationSynchronizer_ReceiveInit Parms{};

	Parms.InOwnerAdvancedCamera = InOwnerAdvancedCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function X6Camera.CameraOrientationSynchronizer.ReceiveShutdown
// (Event, Protected, BlueprintEvent)

void UCameraOrientationSynchronizer::ReceiveShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraOrientationSynchronizer", "ReceiveShutdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.CameraOrientationSynchronizer.SyncCameraPitchYawSyncSetting
// (Native, Protected)
// Parameters:
// bool                                    YawValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PitchValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraOrientationSynchronizer::SyncCameraPitchYawSyncSetting(bool YawValue, bool PitchValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraOrientationSynchronizer", "SyncCameraPitchYawSyncSetting");

	Params::CameraOrientationSynchronizer_SyncCameraPitchYawSyncSetting Parms{};

	Parms.YawValue = YawValue;
	Parms.PitchValue = PitchValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraOrientationSynchronizer.GetIsOwnerInAir
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCameraOrientationSynchronizer::GetIsOwnerInAir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraOrientationSynchronizer", "GetIsOwnerInAir");

	Params::CameraOrientationSynchronizer_GetIsOwnerInAir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraOrientationSynchronizer.GetIsOwnerMoving
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCameraOrientationSynchronizer::GetIsOwnerMoving() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraOrientationSynchronizer", "GetIsOwnerMoving");

	Params::CameraOrientationSynchronizer_GetIsOwnerMoving Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraStateInterface.HandleEnterCameraState
// (Native, Public, HasOutParams)
// Parameters:
// ECameraState                            LastState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECameraState                            NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FViewTargetTransitionParams*     TransitionParams                                       (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ICameraStateInterface::HandleEnterCameraState(ECameraState LastState, ECameraState NewState, struct FViewTargetTransitionParams* TransitionParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraStateInterface", "HandleEnterCameraState");

	Params::CameraStateInterface_HandleEnterCameraState Parms{};

	Parms.LastState = LastState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TransitionParams != nullptr)
		*TransitionParams = std::move(Parms.TransitionParams);

	return Parms.ReturnValue;
}


// Function X6Camera.CameraStateInterface.HandleExitCameraState
// (Native, Public)
// Parameters:
// ECameraState                            LastState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ICameraStateInterface::HandleExitCameraState(ECameraState LastState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraStateInterface", "HandleExitCameraState");

	Params::CameraStateInterface_HandleExitCameraState Parms{};

	Parms.LastState = LastState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraStateInterface.HandleFullyBlendedCameraState
// (Native, Public, HasOutParams)
// Parameters:
// ECameraState                            NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMinimalViewInfo*                NewPOV                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ICameraStateInterface::HandleFullyBlendedCameraState(ECameraState NewState, struct FMinimalViewInfo* NewPOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraStateInterface", "HandleFullyBlendedCameraState");

	Params::CameraStateInterface_HandleFullyBlendedCameraState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewPOV != nullptr)
		*NewPOV = std::move(Parms.NewPOV);

	return Parms.ReturnValue;
}


// Function X6Camera.CameraStateInterface.HandleGetCameraComponent
// (Native, Public)
// Parameters:
// class UCameraComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraComponent* ICameraStateInterface::HandleGetCameraComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraStateInterface", "HandleGetCameraComponent");

	Params::CameraStateInterface_HandleGetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraStateInterface.HandleUpdateBlendCameraState
// (Native, Public, HasOutParams)
// Parameters:
// ECameraState                            NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurationPct                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FViewTargetTransitionParams*     BlendParams                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FMinimalViewInfo*                NewPOV                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ICameraStateInterface::HandleUpdateBlendCameraState(ECameraState NewState, float DurationPct, struct FViewTargetTransitionParams* BlendParams, struct FMinimalViewInfo* NewPOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraStateInterface", "HandleUpdateBlendCameraState");

	Params::CameraStateInterface_HandleUpdateBlendCameraState Parms{};

	Parms.NewState = NewState;
	Parms.DurationPct = DurationPct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BlendParams != nullptr)
		*BlendParams = std::move(Parms.BlendParams);

	if (NewPOV != nullptr)
		*NewPOV = std::move(Parms.NewPOV);

	return Parms.ReturnValue;
}


// Function X6Camera.CameraStateInterface.OnEnterCameraState
// (Native, Public)
// Parameters:
// ECameraState                            LastMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECameraState                            NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCameraModifierBlendParam& ViewTargetTransitionParams                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           NewTarget                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ICameraStateInterface::OnEnterCameraState(ECameraState LastMode, ECameraState NewMode, const struct FCameraModifierBlendParam& ViewTargetTransitionParams, class AActor* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraStateInterface", "OnEnterCameraState");

	Params::CameraStateInterface_OnEnterCameraState Parms{};

	Parms.LastMode = LastMode;
	Parms.NewMode = NewMode;
	Parms.ViewTargetTransitionParams = std::move(ViewTargetTransitionParams);
	Parms.NewTarget = NewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraStateInterface.OnExitCameraState
// (Native, Public)

void ICameraStateInterface::OnExitCameraState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraStateInterface", "OnExitCameraState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraTaskExecuter.DoExecuteCameraTask
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<TSubclassOf<class UCameraTask>>&CameraTasks                                            (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class UCameraTaskExecuter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraTaskExecuter* UCameraTaskExecuter::DoExecuteCameraTask(class UObject* WorldContextObject, const TArray<TSubclassOf<class UCameraTask>>& CameraTasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraTaskExecuter", "DoExecuteCameraTask");

	Params::CameraTaskExecuter_DoExecuteCameraTask Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CameraTasks = std::move(CameraTasks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraTaskExecuter.DoExecuteCameraTask_LookAt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FViewTargetTransitionParams&Transition                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ECameraTaskLookAtType                   LookAtType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetArmLength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraTaskObject**               FocusDummy                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraTaskExecuter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraTaskExecuter* UCameraTaskExecuter::DoExecuteCameraTask_LookAt(class UObject* WorldContextObject, const struct FViewTargetTransitionParams& Transition, ECameraTaskLookAtType LookAtType, float TargetArmLength, float InterpSpeed, class UCameraTaskObject** FocusDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraTaskExecuter", "DoExecuteCameraTask_LookAt");

	Params::CameraTaskExecuter_DoExecuteCameraTask_LookAt Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Transition = std::move(Transition);
	Parms.LookAtType = LookAtType;
	Parms.TargetArmLength = TargetArmLength;
	Parms.InterpSpeed = InterpSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FocusDummy != nullptr)
		*FocusDummy = Parms.FocusDummy;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraTaskExecuter.DoExecuteCameraTask_LookAtWithFOVBlend
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FViewTargetTransitionParams&Transition                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// ECameraTaskLookAtType                   LookAtType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetArmLength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetFOV                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraTaskObject**               FocusDummy                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraTaskExecuter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraTaskExecuter* UCameraTaskExecuter::DoExecuteCameraTask_LookAtWithFOVBlend(class UObject* WorldContextObject, const struct FViewTargetTransitionParams& Transition, ECameraTaskLookAtType LookAtType, float TargetArmLength, float TargetFOV, float InterpSpeed, class UCameraTaskObject** FocusDummy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraTaskExecuter", "DoExecuteCameraTask_LookAtWithFOVBlend");

	Params::CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Transition = std::move(Transition);
	Parms.LookAtType = LookAtType;
	Parms.TargetArmLength = TargetArmLength;
	Parms.TargetFOV = TargetFOV;
	Parms.InterpSpeed = InterpSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FocusDummy != nullptr)
		*FocusDummy = Parms.FocusDummy;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraTaskExecuter.DoExecuteCameraTask_MoveTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FCameraTaskMoveToData>&MoveToData                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UCameraTaskExecuter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraTaskExecuter* UCameraTaskExecuter::DoExecuteCameraTask_MoveTo(class UObject* WorldContextObject, const TArray<struct FCameraTaskMoveToData>& MoveToData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraTaskExecuter", "DoExecuteCameraTask_MoveTo");

	Params::CameraTaskExecuter_DoExecuteCameraTask_MoveTo Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MoveToData = std::move(MoveToData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraTaskExecuter.DoExecuteCameraTask_Spline
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FViewTargetTransitionParams&BetweenTwoSplineTransition                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<struct FCameraTaskSplineBlendInfo>&FSplineCameraTaskDatas                                 (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bBackToPreViewTarget                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDrawDebug                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawDebugTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraTaskExecuter*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraTaskExecuter* UCameraTaskExecuter::DoExecuteCameraTask_Spline(class UObject* WorldContextObject, const struct FViewTargetTransitionParams& BetweenTwoSplineTransition, const TArray<struct FCameraTaskSplineBlendInfo>& FSplineCameraTaskDatas, bool bBackToPreViewTarget, bool bDrawDebug, float DrawDebugTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraTaskExecuter", "DoExecuteCameraTask_Spline");

	Params::CameraTaskExecuter_DoExecuteCameraTask_Spline Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BetweenTwoSplineTransition = std::move(BetweenTwoSplineTransition);
	Parms.FSplineCameraTaskDatas = std::move(FSplineCameraTaskDatas);
	Parms.bBackToPreViewTarget = bBackToPreViewTarget;
	Parms.bDrawDebug = bDrawDebug;
	Parms.DrawDebugTime = DrawDebugTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.FixedCameraVolumeActor.OnActorEnterVolume
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFixedCameraVolumeActor::OnActorEnterVolume(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FixedCameraVolumeActor", "OnActorEnterVolume");

	Params::FixedCameraVolumeActor_OnActorEnterVolume Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function X6Camera.FixedCameraVolumeActor.OnActorLeaveVolume
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFixedCameraVolumeActor::OnActorLeaveVolume(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FixedCameraVolumeActor", "OnActorLeaveVolume");

	Params::FixedCameraVolumeActor_OnActorLeaveVolume Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function X6Camera.FixedCameraVolumeActor.OnEnterBoxComponentBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFixedCameraVolumeActor::OnEnterBoxComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FixedCameraVolumeActor", "OnEnterBoxComponentBeginOverlap");

	Params::FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.FixedCameraVolumeActor.OnEnterCameraState
// (Native, Public, BlueprintCallable)
// Parameters:
// ECameraState                            LastMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECameraState                            NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCameraModifierBlendParam& ViewTargetTransitionParams                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           NewTarget                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFixedCameraVolumeActor::OnEnterCameraState(ECameraState LastMode, ECameraState NewMode, const struct FCameraModifierBlendParam& ViewTargetTransitionParams, class AActor* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FixedCameraVolumeActor", "OnEnterCameraState");

	Params::FixedCameraVolumeActor_OnEnterCameraState Parms{};

	Parms.LastMode = LastMode;
	Parms.NewMode = NewMode;
	Parms.ViewTargetTransitionParams = std::move(ViewTargetTransitionParams);
	Parms.NewTarget = NewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.FixedCameraVolumeActor.OnExitBoxBoxComponentEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFixedCameraVolumeActor::OnExitBoxBoxComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FixedCameraVolumeActor", "OnExitBoxBoxComponentEndOverlap");

	Params::FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.FixedCameraVolumeActor.OnExitCameraState
// (Native, Public, BlueprintCallable)

void AFixedCameraVolumeActor::OnExitCameraState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FixedCameraVolumeActor", "OnExitCameraState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.FixedCameraVolumeActor.SetViewTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCameraModifierBlendParam& BlendParam                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AFixedCameraVolumeActor::SetViewTarget(class AActor* NewViewTarget, const struct FCameraModifierBlendParam& BlendParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FixedCameraVolumeActor", "SetViewTarget");

	Params::FixedCameraVolumeActor_SetViewTarget Parms{};

	Parms.NewViewTarget = NewViewTarget;
	Parms.BlendParam = std::move(BlendParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.FixedCamera.EnterVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EViewTargetBlendFunction                BlendFunc                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLockOutgoing                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      InBlendCurve                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFixedCamera::EnterVolume(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, class UCurveFloat* InBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FixedCamera", "EnterVolume");

	Params::FixedCamera_EnterVolume Parms{};

	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;
	Parms.bLockOutgoing = bLockOutgoing;
	Parms.InBlendCurve = InBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.FixedCamera.LeaveVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EViewTargetBlendFunction                BlendFunc                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLockOutgoing                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      InBlendCurve                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFixedCamera::LeaveVolume(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, class UCurveFloat* InBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FixedCamera", "LeaveVolume");

	Params::FixedCamera_LeaveVolume Parms{};

	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;
	Parms.bLockOutgoing = bLockOutgoing;
	Parms.InBlendCurve = InBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.SplineCamera.EnterVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EViewTargetBlendFunction                BlendFunc                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLockOutgoing                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      InBlendCurve                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineCamera::EnterVolume(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, class UCurveFloat* InBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineCamera", "EnterVolume");

	Params::SplineCamera_EnterVolume Parms{};

	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;
	Parms.bLockOutgoing = bLockOutgoing;
	Parms.InBlendCurve = InBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.SplineCamera.LeaveVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EViewTargetBlendFunction                BlendFunc                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLockOutgoing                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      InBlendCurve                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineCamera::LeaveVolume(float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing, class UCurveFloat* InBlendCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineCamera", "LeaveVolume");

	Params::SplineCamera_LeaveVolume Parms{};

	Parms.BlendTime = BlendTime;
	Parms.BlendFunc = BlendFunc;
	Parms.BlendExp = BlendExp;
	Parms.bLockOutgoing = bLockOutgoing;
	Parms.InBlendCurve = InBlendCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.SplineCameraVolumeActor.OnActorEnterVolume
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASplineCameraVolumeActor::OnActorEnterVolume(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineCameraVolumeActor", "OnActorEnterVolume");

	Params::SplineCameraVolumeActor_OnActorEnterVolume Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function X6Camera.SplineCameraVolumeActor.OnActorLeaveVolume
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASplineCameraVolumeActor::OnActorLeaveVolume(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineCameraVolumeActor", "OnActorLeaveVolume");

	Params::SplineCameraVolumeActor_OnActorLeaveVolume Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function X6Camera.SplineCameraVolumeActor.OnEnterBoxComponentBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASplineCameraVolumeActor::OnEnterBoxComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineCameraVolumeActor", "OnEnterBoxComponentBeginOverlap");

	Params::SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.SplineCameraVolumeActor.OnExitBoxBoxComponentEndOverlap
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASplineCameraVolumeActor::OnExitBoxBoxComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineCameraVolumeActor", "OnExitBoxBoxComponentEndOverlap");

	Params::SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.SplineCameraVolumeActor.SetViewTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCameraModifierBlendParam& BlendParam                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ASplineCameraVolumeActor::SetViewTarget(class AActor* NewViewTarget, const struct FCameraModifierBlendParam& BlendParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineCameraVolumeActor", "SetViewTarget");

	Params::SplineCameraVolumeActor_SetViewTarget Parms{};

	Parms.NewViewTarget = NewViewTarget;
	Parms.BlendParam = std::move(BlendParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6CameraActor_VFX.OnActorBeginPlay
// (Event, Public, BlueprintEvent)

void AX6CameraActor_VFX::OnActorBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraActor_VFX", "OnActorBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.X6CameraActor_VFX.OnActorEndPlay
// (Event, Public, BlueprintEvent)

void AX6CameraActor_VFX::OnActorEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraActor_VFX", "OnActorEndPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.X6CameraConfigManager.IsCameraSettingsValueEqual
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FX6CameraBlendableSettings&A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FX6CameraBlendableSettings&B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UX6CameraConfigManager::IsCameraSettingsValueEqual(const struct FX6CameraBlendableSettings& A, const struct FX6CameraBlendableSettings& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("X6CameraConfigManager", "IsCameraSettingsValueEqual");

	Params::X6CameraConfigManager_IsCameraSettingsValueEqual Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6CameraConfigManager.CollectDebugOutput
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>*                  InOutDebugInfoLines                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UX6CameraConfigManager::CollectDebugOutput(TArray<class FString>* InOutDebugInfoLines) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraConfigManager", "CollectDebugOutput");

	Params::X6CameraConfigManager_CollectDebugOutput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutDebugInfoLines != nullptr)
		*InOutDebugInfoLines = std::move(Parms.InOutDebugInfoLines);
}


// Function X6Camera.X6CameraConfigManager.GetConfigDataList
// (Final, Native, Public, Const)
// Parameters:
// const TArray<struct FX6CameraConfigData>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FX6CameraConfigData> UX6CameraConfigManager::GetConfigDataList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraConfigManager", "GetConfigDataList");

	Params::X6CameraConfigManager_GetConfigDataList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6CameraRuntimeConfigModifier.BlueprintDeinitialize
// (Event, Protected, BlueprintEvent)

void UX6CameraRuntimeConfigModifier::BlueprintDeinitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraRuntimeConfigModifier", "BlueprintDeinitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.X6CameraRuntimeConfigModifier.BlueprintInitialize
// (Event, Protected, BlueprintEvent)

void UX6CameraRuntimeConfigModifier::BlueprintInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraRuntimeConfigModifier", "BlueprintInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.X6CameraRuntimeConfigModifier.BlueprintModifyCameraRuntimeConfig
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bRefreshConfigData                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FX6CameraInputConfig&      InInputConfig                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FCameraBaseParamsDefine&   InBaseParams                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FX6CameraInputConfig*            OutInputConfig                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FCameraBaseParamsDefine*         OutBaseParams                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UX6CameraRuntimeConfigModifier::BlueprintModifyCameraRuntimeConfig(const float DeltaTime, const bool bRefreshConfigData, const struct FX6CameraInputConfig& InInputConfig, const struct FCameraBaseParamsDefine& InBaseParams, struct FX6CameraInputConfig* OutInputConfig, struct FCameraBaseParamsDefine* OutBaseParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraRuntimeConfigModifier", "BlueprintModifyCameraRuntimeConfig");

	Params::X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.bRefreshConfigData = bRefreshConfigData;
	Parms.InInputConfig = std::move(InInputConfig);
	Parms.InBaseParams = std::move(InBaseParams);

	UObject::ProcessEvent(Func, &Parms);

	if (OutInputConfig != nullptr)
		*OutInputConfig = std::move(Parms.OutInputConfig);

	if (OutBaseParams != nullptr)
		*OutBaseParams = std::move(Parms.OutBaseParams);
}


// Function X6Camera.X6CameraRuntimeConfigModifier.GetConfigDataUniqueKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UX6CameraRuntimeConfigModifier::GetConfigDataUniqueKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraRuntimeConfigModifier", "GetConfigDataUniqueKey");

	Params::X6CameraRuntimeConfigModifier_GetConfigDataUniqueKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6CameraSettings.GetCameraStateName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const ECameraState                      CameraState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UX6CameraSettings::GetCameraStateName(const ECameraState CameraState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("X6CameraSettings", "GetCameraStateName");

	Params::X6CameraSettings_GetCameraStateName Parms{};

	Parms.CameraState = CameraState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6CameraSettings.GetCameraStateNameString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const ECameraState                      CameraState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UX6CameraSettings::GetCameraStateNameString(const ECameraState CameraState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("X6CameraSettings", "GetCameraStateNameString");

	Params::X6CameraSettings_GetCameraStateNameString Parms{};

	Parms.CameraState = CameraState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraTaskObject.SetActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewActive                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraTaskObject::SetActive(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraTaskObject", "SetActive");

	Params::CameraTaskObject_SetActive Parms{};

	Parms.bNewActive = bNewActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraTaskObject.SetArmlength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TargetArmLength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraTaskObject::SetArmlength(float TargetArmLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraTaskObject", "SetArmlength");

	Params::CameraTaskObject_SetArmlength Parms{};

	Parms.TargetArmLength = TargetArmLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraTaskObject.SetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraTaskObject::SetLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraTaskObject", "SetLocation");

	Params::CameraTaskObject_SetLocation Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraTaskObject.SetLocationAndRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UCameraTaskObject::SetLocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraTaskObject", "SetLocationAndRotation");

	Params::CameraTaskObject_SetLocationAndRotation Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraTaskObject.SetRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UCameraTaskObject::SetRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraTaskObject", "SetRotation");

	Params::CameraTaskObject_SetRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.CameraTaskObject.GetArmlength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCameraTaskObject::GetArmlength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraTaskObject", "GetArmlength");

	Params::CameraTaskObject_GetArmlength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraTaskObject.GetLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UCameraTaskObject::GetLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraTaskObject", "GetLocation");

	Params::CameraTaskObject_GetLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.CameraTaskObject.GetRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UCameraTaskObject::GetRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraTaskObject", "GetRotation");

	Params::CameraTaskObject_GetRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6CameraTaskBase.BeginTask
// (Native, Public, BlueprintCallable)

void UX6CameraTaskBase::BeginTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraTaskBase", "BeginTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6CameraTaskBase.CancelTask
// (Native, Public, BlueprintCallable)

void UX6CameraTaskBase::CancelTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraTaskBase", "CancelTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6CameraTaskBase.GetPlayerCameraManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AX6PlayerCameraManagerBase*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AX6PlayerCameraManagerBase* UX6CameraTaskBase::GetPlayerCameraManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraTaskBase", "GetPlayerCameraManager");

	Params::X6CameraTaskBase_GetPlayerCameraManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6CameraTaskBase.OnTaskActivate
// (Event, Public, BlueprintEvent)

void UX6CameraTaskBase::OnTaskActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraTaskBase", "OnTaskActivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.X6CameraTaskBase.OnTaskEnd
// (Event, Public, BlueprintEvent)

void UX6CameraTaskBase::OnTaskEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraTaskBase", "OnTaskEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function X6Camera.X6CameraTaskBase.PauseTask
// (Native, Public, BlueprintCallable)

void UX6CameraTaskBase::PauseTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraTaskBase", "PauseTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6CameraTaskBase.ReceiveBeginTask
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UX6CameraTaskBase::ReceiveBeginTask(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraTaskBase", "ReceiveBeginTask");

	Params::X6CameraTaskBase_ReceiveBeginTask Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function X6Camera.X6CameraTaskBase.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UX6CameraTaskBase::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraTaskBase", "ReceiveTick");

	Params::X6CameraTaskBase_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function X6Camera.X6CameraTaskBase.TryToEndTask
// (Final, Native, Public, BlueprintCallable)

void UX6CameraTaskBase::TryToEndTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraTaskBase", "TryToEndTask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Camera.X6CameraTaskBase.GetAvatar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UX6CameraTaskBase::GetAvatar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6CameraTaskBase", "GetAvatar");

	Params::X6CameraTaskBase_GetAvatar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function X6Camera.X6DebugCameraController.ToggleOriginControllerHandleInput
// (Final, Exec, Native, Public)

void AX6DebugCameraController::ToggleOriginControllerHandleInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6DebugCameraController", "ToggleOriginControllerHandleInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

