#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlintsEffectData

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GlintsEffectData.BP_GlintsEffectData_C
// 0x00A0 (0x00D0 - 0x0030)
class UBP_GlintsEffectData_C final : public UPrimaryDataAsset
{
public:
	struct FLinearColor                           GlintsColor;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlintsDensity;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlintsDensity_M;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              GlintsHueShiftRange;                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              GlintsIntensityMinMax;                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              GlintsIntensityMinMax_M;                           // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     GlintsMaterial;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        GlintsSizeMax;                                     // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlintsSizeMin;                                     // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlintsSizeThreshold;                               // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlintsSpeedMax;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlintsSpeedMax_M;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlintsSpeedMin;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlintsSpeedMin_M;                                  // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GlintsUVSet;                                       // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LargeGlintsDensityRate;                            // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GlintsEffectData_C">();
	}
	static class UBP_GlintsEffectData_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GlintsEffectData_C>();
	}
};
static_assert(alignof(UBP_GlintsEffectData_C) == 0x000008, "Wrong alignment on UBP_GlintsEffectData_C");
static_assert(sizeof(UBP_GlintsEffectData_C) == 0x0000D0, "Wrong size on UBP_GlintsEffectData_C");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsColor) == 0x000030, "Member 'UBP_GlintsEffectData_C::GlintsColor' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsDensity) == 0x000040, "Member 'UBP_GlintsEffectData_C::GlintsDensity' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsDensity_M) == 0x000048, "Member 'UBP_GlintsEffectData_C::GlintsDensity_M' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsHueShiftRange) == 0x000050, "Member 'UBP_GlintsEffectData_C::GlintsHueShiftRange' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsIntensityMinMax) == 0x000060, "Member 'UBP_GlintsEffectData_C::GlintsIntensityMinMax' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsIntensityMinMax_M) == 0x000070, "Member 'UBP_GlintsEffectData_C::GlintsIntensityMinMax_M' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsMaterial) == 0x000080, "Member 'UBP_GlintsEffectData_C::GlintsMaterial' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsSizeMax) == 0x000088, "Member 'UBP_GlintsEffectData_C::GlintsSizeMax' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsSizeMin) == 0x000090, "Member 'UBP_GlintsEffectData_C::GlintsSizeMin' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsSizeThreshold) == 0x000098, "Member 'UBP_GlintsEffectData_C::GlintsSizeThreshold' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsSpeedMax) == 0x0000A0, "Member 'UBP_GlintsEffectData_C::GlintsSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsSpeedMax_M) == 0x0000A8, "Member 'UBP_GlintsEffectData_C::GlintsSpeedMax_M' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsSpeedMin) == 0x0000B0, "Member 'UBP_GlintsEffectData_C::GlintsSpeedMin' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsSpeedMin_M) == 0x0000B8, "Member 'UBP_GlintsEffectData_C::GlintsSpeedMin_M' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, GlintsUVSet) == 0x0000C0, "Member 'UBP_GlintsEffectData_C::GlintsUVSet' has a wrong offset!");
static_assert(offsetof(UBP_GlintsEffectData_C, LargeGlintsDensityRate) == 0x0000C8, "Member 'UBP_GlintsEffectData_C::LargeGlintsDensityRate' has a wrong offset!");

}

