#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperCharWizard

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum PaperCharWizard.ECheckoutFaildType
// NumValues: 0x0005
enum class ECheckoutFaildType : uint8
{
	E_CheckoutFaildType_None                 = 0,
	E_CheckoutFaildType_NotExist             = 1,
	E_CheckoutFaildType_NotLatest            = 2,
	E_CheckoutFaildType_CheckoutByOther      = 3,
	E_CheckoutFaildType_MAX                  = 4,
};

// Enum PaperCharWizard.ESPCharType
// NumValues: 0x0003
enum class ESPCharType : uint8
{
	T1NPC                                    = 0,
	T2NPC                                    = 1,
	ESPCharType_MAX                          = 2,
};

// ScriptStruct PaperCharWizard.X6BuffIDConfigData
// 0x0018 (0x0018 - 0x0000)
struct FX6BuffIDConfigData final
{
public:
	int64                                         BuffID;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuffSelectType;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6BuffIDConfigData) == 0x000008, "Wrong alignment on FX6BuffIDConfigData");
static_assert(sizeof(FX6BuffIDConfigData) == 0x000018, "Wrong size on FX6BuffIDConfigData");
static_assert(offsetof(FX6BuffIDConfigData, BuffID) == 0x000000, "Member 'FX6BuffIDConfigData::BuffID' has a wrong offset!");
static_assert(offsetof(FX6BuffIDConfigData, BuffSelectType) == 0x000008, "Member 'FX6BuffIDConfigData::BuffSelectType' has a wrong offset!");

// ScriptStruct PaperCharWizard.CharBaseSPData
// 0x0090 (0x0090 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x10) FCharBaseSPData
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DAPath;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupOrder;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
#pragma pack(pop)
static_assert(alignof(FCharBaseSPData) == 0x000010, "Wrong alignment on FCharBaseSPData");
static_assert(sizeof(FCharBaseSPData) == 0x000090, "Wrong size on FCharBaseSPData");
static_assert(offsetof(FCharBaseSPData, Transform) == 0x000010, "Member 'FCharBaseSPData::Transform' has a wrong offset!");
static_assert(offsetof(FCharBaseSPData, DAPath) == 0x000070, "Member 'FCharBaseSPData::DAPath' has a wrong offset!");
static_assert(offsetof(FCharBaseSPData, GroupOrder) == 0x000080, "Member 'FCharBaseSPData::GroupOrder' has a wrong offset!");

// ScriptStruct PaperCharWizard.T2NpcSPData
// 0x0040 (0x00D0 - 0x0090)
struct FT2NpcSPData final : public FCharBaseSPData
{
public:
	class FString                                 AnimPath;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Expression;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReactToNikkiDA;                                    // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomiseReactDA;                                  // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReactToFloating;                                   // 0x00B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         HandheldItemPaths;                                 // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FT2NpcSPData) == 0x000010, "Wrong alignment on FT2NpcSPData");
static_assert(sizeof(FT2NpcSPData) == 0x0000D0, "Wrong size on FT2NpcSPData");
static_assert(offsetof(FT2NpcSPData, AnimPath) == 0x000088, "Member 'FT2NpcSPData::AnimPath' has a wrong offset!");
static_assert(offsetof(FT2NpcSPData, Expression) == 0x000098, "Member 'FT2NpcSPData::Expression' has a wrong offset!");
static_assert(offsetof(FT2NpcSPData, ReactToNikkiDA) == 0x0000A8, "Member 'FT2NpcSPData::ReactToNikkiDA' has a wrong offset!");
static_assert(offsetof(FT2NpcSPData, CustomiseReactDA) == 0x0000B8, "Member 'FT2NpcSPData::CustomiseReactDA' has a wrong offset!");
static_assert(offsetof(FT2NpcSPData, ReactToFloating) == 0x0000B9, "Member 'FT2NpcSPData::ReactToFloating' has a wrong offset!");
static_assert(offsetof(FT2NpcSPData, HandheldItemPaths) == 0x0000C0, "Member 'FT2NpcSPData::HandheldItemPaths' has a wrong offset!");

// ScriptStruct PaperCharWizard.AtmosphereItemData
// 0x0070 (0x0070 - 0x0000)
struct FAtmosphereItemData final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetPath;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtmosphereItemData) == 0x000010, "Wrong alignment on FAtmosphereItemData");
static_assert(sizeof(FAtmosphereItemData) == 0x000070, "Wrong size on FAtmosphereItemData");
static_assert(offsetof(FAtmosphereItemData, Transform) == 0x000000, "Member 'FAtmosphereItemData::Transform' has a wrong offset!");
static_assert(offsetof(FAtmosphereItemData, AssetPath) == 0x000060, "Member 'FAtmosphereItemData::AssetPath' has a wrong offset!");

// ScriptStruct PaperCharWizard.SceneObjectData
// 0x0070 (0x0070 - 0x0000)
struct FSceneObjectData final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoftSceneObject;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSceneObjectData) == 0x000010, "Wrong alignment on FSceneObjectData");
static_assert(sizeof(FSceneObjectData) == 0x000070, "Wrong size on FSceneObjectData");
static_assert(offsetof(FSceneObjectData, Transform) == 0x000000, "Member 'FSceneObjectData::Transform' has a wrong offset!");
static_assert(offsetof(FSceneObjectData, SoftSceneObject) == 0x000060, "Member 'FSceneObjectData::SoftSceneObject' has a wrong offset!");

// ScriptStruct PaperCharWizard.ChatbubbleData
// 0x0020 (0x0020 - 0x0000)
struct FChatbubbleData final
{
public:
	class FString                                 ChatbubbleId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Expressions;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChatbubbleData) == 0x000008, "Wrong alignment on FChatbubbleData");
static_assert(sizeof(FChatbubbleData) == 0x000020, "Wrong size on FChatbubbleData");
static_assert(offsetof(FChatbubbleData, ChatbubbleId) == 0x000000, "Member 'FChatbubbleData::ChatbubbleId' has a wrong offset!");
static_assert(offsetof(FChatbubbleData, Expressions) == 0x000010, "Member 'FChatbubbleData::Expressions' has a wrong offset!");

// ScriptStruct PaperCharWizard.OverhearDialogueData
// 0x0070 (0x0070 - 0x0000)
struct FOverhearDialogueData final
{
public:
	struct FTransform                             OverhearTransform;                                 // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueId;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOverhearDialogueData) == 0x000010, "Wrong alignment on FOverhearDialogueData");
static_assert(sizeof(FOverhearDialogueData) == 0x000070, "Wrong size on FOverhearDialogueData");
static_assert(offsetof(FOverhearDialogueData, OverhearTransform) == 0x000000, "Member 'FOverhearDialogueData::OverhearTransform' has a wrong offset!");
static_assert(offsetof(FOverhearDialogueData, DialogueId) == 0x000060, "Member 'FOverhearDialogueData::DialogueId' has a wrong offset!");

// ScriptStruct PaperCharWizard.AutoTriggerOverhearDialogueData
// 0x0010 (0x0010 - 0x0000)
struct FAutoTriggerOverhearDialogueData final
{
public:
	class FString                                 AutoTriggerOverhearDialogueId;                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAutoTriggerOverhearDialogueData) == 0x000008, "Wrong alignment on FAutoTriggerOverhearDialogueData");
static_assert(sizeof(FAutoTriggerOverhearDialogueData) == 0x000010, "Wrong size on FAutoTriggerOverhearDialogueData");
static_assert(offsetof(FAutoTriggerOverhearDialogueData, AutoTriggerOverhearDialogueId) == 0x000000, "Member 'FAutoTriggerOverhearDialogueData::AutoTriggerOverhearDialogueId' has a wrong offset!");

// ScriptStruct PaperCharWizard.AttachedParentData
// 0x0028 (0x0028 - 0x0000)
struct FAttachedParentData final
{
public:
	class FString                                 SoftAttachedParent;                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AttachedParentSpawnerID;                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachedParentComponentTag;                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttachedParentData) == 0x000008, "Wrong alignment on FAttachedParentData");
static_assert(sizeof(FAttachedParentData) == 0x000028, "Wrong size on FAttachedParentData");
static_assert(offsetof(FAttachedParentData, SoftAttachedParent) == 0x000000, "Member 'FAttachedParentData::SoftAttachedParent' has a wrong offset!");
static_assert(offsetof(FAttachedParentData, AttachedParentSpawnerID) == 0x000010, "Member 'FAttachedParentData::AttachedParentSpawnerID' has a wrong offset!");
static_assert(offsetof(FAttachedParentData, AttachedParentComponentTag) == 0x000018, "Member 'FAttachedParentData::AttachedParentComponentTag' has a wrong offset!");

// ScriptStruct PaperCharWizard.T2StaticNPCGroupCollisionData
// 0x0070 (0x0070 - 0x0000)
struct FT2StaticNPCGroupCollisionData final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableNPCActorCollision;                           // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FT2StaticNPCGroupCollisionData) == 0x000010, "Wrong alignment on FT2StaticNPCGroupCollisionData");
static_assert(sizeof(FT2StaticNPCGroupCollisionData) == 0x000070, "Wrong size on FT2StaticNPCGroupCollisionData");
static_assert(offsetof(FT2StaticNPCGroupCollisionData, Transform) == 0x000000, "Member 'FT2StaticNPCGroupCollisionData::Transform' has a wrong offset!");
static_assert(offsetof(FT2StaticNPCGroupCollisionData, HalfHeight) == 0x000060, "Member 'FT2StaticNPCGroupCollisionData::HalfHeight' has a wrong offset!");
static_assert(offsetof(FT2StaticNPCGroupCollisionData, Radius) == 0x000064, "Member 'FT2StaticNPCGroupCollisionData::Radius' has a wrong offset!");
static_assert(offsetof(FT2StaticNPCGroupCollisionData, EnableNPCActorCollision) == 0x000068, "Member 'FT2StaticNPCGroupCollisionData::EnableNPCActorCollision' has a wrong offset!");

// ScriptStruct PaperCharWizard.T2NpcSpawnMultConfig
// 0x00A0 (0x00A0 - 0x0000)
struct FT2NpcSpawnMultConfig final
{
public:
	class FString                                 Desc;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FT2NpcSPData>                   SPNpcs;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FChatbubbleData>                Chatbubbles;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FOverhearDialogueData>          OverhearDialogues;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FAutoTriggerOverhearDialogueData> AutoTriggerOverhearDialogues;                    // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         EnvSounds;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSceneObjectData>               SceneObjects;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FT2StaticNPCGroupCollisionData> T2StaticNPCGroupCollisions;                        // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                SpawnerLocation;                                   // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowActorSpeak;                                   // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FT2NpcSpawnMultConfig) == 0x000008, "Wrong alignment on FT2NpcSpawnMultConfig");
static_assert(sizeof(FT2NpcSpawnMultConfig) == 0x0000A0, "Wrong size on FT2NpcSpawnMultConfig");
static_assert(offsetof(FT2NpcSpawnMultConfig, Desc) == 0x000000, "Member 'FT2NpcSpawnMultConfig::Desc' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnMultConfig, SPNpcs) == 0x000010, "Member 'FT2NpcSpawnMultConfig::SPNpcs' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnMultConfig, Chatbubbles) == 0x000020, "Member 'FT2NpcSpawnMultConfig::Chatbubbles' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnMultConfig, OverhearDialogues) == 0x000030, "Member 'FT2NpcSpawnMultConfig::OverhearDialogues' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnMultConfig, AutoTriggerOverhearDialogues) == 0x000040, "Member 'FT2NpcSpawnMultConfig::AutoTriggerOverhearDialogues' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnMultConfig, EnvSounds) == 0x000050, "Member 'FT2NpcSpawnMultConfig::EnvSounds' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnMultConfig, SceneObjects) == 0x000060, "Member 'FT2NpcSpawnMultConfig::SceneObjects' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnMultConfig, T2StaticNPCGroupCollisions) == 0x000070, "Member 'FT2NpcSpawnMultConfig::T2StaticNPCGroupCollisions' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnMultConfig, SpawnerLocation) == 0x000080, "Member 'FT2NpcSpawnMultConfig::SpawnerLocation' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnMultConfig, AllowActorSpeak) == 0x000098, "Member 'FT2NpcSpawnMultConfig::AllowActorSpeak' has a wrong offset!");

// ScriptStruct PaperCharWizard.T2NpcSpawnConfig
// 0x0148 (0x0148 - 0x0000)
struct FT2NpcSpawnConfig final
{
public:
	bool                                          VersionActive;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SpawnerID;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DatalayerId;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DatalayerFullPath;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VersionNo;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnRate;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnTimestamp;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestroyTimestamp;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerformOnRaining;                                  // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MustSpawn;                                         // 0x0045(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Area;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtmosphereItemData>            AtmosphereItems;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FChatbubbleData>                NikkiChatbubbles;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAttachedParentData                    AttachedParentData;                                // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FT2NpcSpawnMultConfig>          MultConfigs;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0xA0];                                      // 0x00A8(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FT2NpcSpawnConfig) == 0x000008, "Wrong alignment on FT2NpcSpawnConfig");
static_assert(sizeof(FT2NpcSpawnConfig) == 0x000148, "Wrong size on FT2NpcSpawnConfig");
static_assert(offsetof(FT2NpcSpawnConfig, VersionActive) == 0x000000, "Member 'FT2NpcSpawnConfig::VersionActive' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, SpawnerID) == 0x000008, "Member 'FT2NpcSpawnConfig::SpawnerID' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, DatalayerId) == 0x000010, "Member 'FT2NpcSpawnConfig::DatalayerId' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, DatalayerFullPath) == 0x000018, "Member 'FT2NpcSpawnConfig::DatalayerFullPath' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, VersionNo) == 0x000028, "Member 'FT2NpcSpawnConfig::VersionNo' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, SpawnRate) == 0x000038, "Member 'FT2NpcSpawnConfig::SpawnRate' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, SpawnTimestamp) == 0x00003C, "Member 'FT2NpcSpawnConfig::SpawnTimestamp' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, DestroyTimestamp) == 0x000040, "Member 'FT2NpcSpawnConfig::DestroyTimestamp' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, PerformOnRaining) == 0x000044, "Member 'FT2NpcSpawnConfig::PerformOnRaining' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, MustSpawn) == 0x000045, "Member 'FT2NpcSpawnConfig::MustSpawn' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, Area) == 0x000048, "Member 'FT2NpcSpawnConfig::Area' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, AtmosphereItems) == 0x000050, "Member 'FT2NpcSpawnConfig::AtmosphereItems' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, NikkiChatbubbles) == 0x000060, "Member 'FT2NpcSpawnConfig::NikkiChatbubbles' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, AttachedParentData) == 0x000070, "Member 'FT2NpcSpawnConfig::AttachedParentData' has a wrong offset!");
static_assert(offsetof(FT2NpcSpawnConfig, MultConfigs) == 0x000098, "Member 'FT2NpcSpawnConfig::MultConfigs' has a wrong offset!");

// ScriptStruct PaperCharWizard.T2NpcVersionSpawnConfig
// 0x0058 (0x0058 - 0x0000)
struct FT2NpcVersionSpawnConfig final
{
public:
	int64                                         SpawnerID;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FT2NpcSpawnConfig> VersionSpawnConfigs;                               // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FT2NpcVersionSpawnConfig) == 0x000008, "Wrong alignment on FT2NpcVersionSpawnConfig");
static_assert(sizeof(FT2NpcVersionSpawnConfig) == 0x000058, "Wrong size on FT2NpcVersionSpawnConfig");
static_assert(offsetof(FT2NpcVersionSpawnConfig, SpawnerID) == 0x000000, "Member 'FT2NpcVersionSpawnConfig::SpawnerID' has a wrong offset!");
static_assert(offsetof(FT2NpcVersionSpawnConfig, VersionSpawnConfigs) == 0x000008, "Member 'FT2NpcVersionSpawnConfig::VersionSpawnConfigs' has a wrong offset!");

// ScriptStruct PaperCharWizard.DLSpawnConfig
// 0x0028 (0x0028 - 0x0000)
struct FDLSpawnConfig final
{
public:
	int64                                         DatalayerId;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DatalayerFullPath;                                 // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FT2NpcVersionSpawnConfig>       T2NpcVersionSpawnConfigs;                          // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDLSpawnConfig) == 0x000008, "Wrong alignment on FDLSpawnConfig");
static_assert(sizeof(FDLSpawnConfig) == 0x000028, "Wrong size on FDLSpawnConfig");
static_assert(offsetof(FDLSpawnConfig, DatalayerId) == 0x000000, "Member 'FDLSpawnConfig::DatalayerId' has a wrong offset!");
static_assert(offsetof(FDLSpawnConfig, DatalayerFullPath) == 0x000008, "Member 'FDLSpawnConfig::DatalayerFullPath' has a wrong offset!");
static_assert(offsetof(FDLSpawnConfig, T2NpcVersionSpawnConfigs) == 0x000018, "Member 'FDLSpawnConfig::T2NpcVersionSpawnConfigs' has a wrong offset!");

// ScriptStruct PaperCharWizard.T2MoveNPCPathNodeInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FT2MoveNPCPathNodeInfo final
{
public:
	int32                                         PathNodeIndex;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PathNodeLocation;                                  // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        IndrectNodes;                                      // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PathNodeRotationYaw;                               // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ArriveTangent;                                     // 0x0038(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeaveTangent;                                      // 0x0050(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHaveShowTime;                                     // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReactToFloating;                                   // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        ShowTimeAnim;                                      // 0x0070(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShowTimeAnimation;                                 // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowTimeLength;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FT2MoveNPCPathNodeInfo) == 0x000008, "Wrong alignment on FT2MoveNPCPathNodeInfo");
static_assert(sizeof(FT2MoveNPCPathNodeInfo) == 0x0000A8, "Wrong size on FT2MoveNPCPathNodeInfo");
static_assert(offsetof(FT2MoveNPCPathNodeInfo, PathNodeIndex) == 0x000000, "Member 'FT2MoveNPCPathNodeInfo::PathNodeIndex' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCPathNodeInfo, PathNodeLocation) == 0x000008, "Member 'FT2MoveNPCPathNodeInfo::PathNodeLocation' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCPathNodeInfo, IndrectNodes) == 0x000020, "Member 'FT2MoveNPCPathNodeInfo::IndrectNodes' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCPathNodeInfo, PathNodeRotationYaw) == 0x000030, "Member 'FT2MoveNPCPathNodeInfo::PathNodeRotationYaw' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCPathNodeInfo, ArriveTangent) == 0x000038, "Member 'FT2MoveNPCPathNodeInfo::ArriveTangent' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCPathNodeInfo, LeaveTangent) == 0x000050, "Member 'FT2MoveNPCPathNodeInfo::LeaveTangent' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCPathNodeInfo, bHaveShowTime) == 0x000068, "Member 'FT2MoveNPCPathNodeInfo::bHaveShowTime' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCPathNodeInfo, ReactToFloating) == 0x000069, "Member 'FT2MoveNPCPathNodeInfo::ReactToFloating' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCPathNodeInfo, ShowTimeAnim) == 0x000070, "Member 'FT2MoveNPCPathNodeInfo::ShowTimeAnim' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCPathNodeInfo, ShowTimeAnimation) == 0x000090, "Member 'FT2MoveNPCPathNodeInfo::ShowTimeAnimation' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCPathNodeInfo, ShowTimeLength) == 0x0000A0, "Member 'FT2MoveNPCPathNodeInfo::ShowTimeLength' has a wrong offset!");

// ScriptStruct PaperCharWizard.T2MoveNPCSpawnInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FT2MoveNPCSpawnInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DAPath;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReactToNikkiDA;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomiseReactDA;                                  // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         HandheldItemPaths;                                 // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         GroupOrder;                                        // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnRate;                                         // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FT2MoveNPCSpawnInfo) == 0x000010, "Wrong alignment on FT2MoveNPCSpawnInfo");
static_assert(sizeof(FT2MoveNPCSpawnInfo) == 0x0000B0, "Wrong size on FT2MoveNPCSpawnInfo");
static_assert(offsetof(FT2MoveNPCSpawnInfo, Transform) == 0x000010, "Member 'FT2MoveNPCSpawnInfo::Transform' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCSpawnInfo, DAPath) == 0x000070, "Member 'FT2MoveNPCSpawnInfo::DAPath' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCSpawnInfo, ReactToNikkiDA) == 0x000080, "Member 'FT2MoveNPCSpawnInfo::ReactToNikkiDA' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCSpawnInfo, CustomiseReactDA) == 0x000090, "Member 'FT2MoveNPCSpawnInfo::CustomiseReactDA' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCSpawnInfo, HandheldItemPaths) == 0x000098, "Member 'FT2MoveNPCSpawnInfo::HandheldItemPaths' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCSpawnInfo, GroupOrder) == 0x0000A8, "Member 'FT2MoveNPCSpawnInfo::GroupOrder' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCSpawnInfo, SpawnRate) == 0x0000AC, "Member 'FT2MoveNPCSpawnInfo::SpawnRate' has a wrong offset!");

// ScriptStruct PaperCharWizard.T2MoveNpcGroupInfo
// 0x0080 (0x0080 - 0x0000)
struct FT2MoveNpcGroupInfo final
{
public:
	bool                                          VersionActive;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SpawnerID;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VersionNo;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DatalayerId;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DatalayerFullPath;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnTimestamp;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestroyTimestamp;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCirclePath;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReturnWhenEnd;                              // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerformOnRaining;                                  // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReactToFloating;                                   // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToFloor;                                      // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GroupDescription;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MustSpawn;                                         // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Area;                                              // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FT2MoveNPCPathNodeInfo>         PathNodesInfo;                                     // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FT2MoveNPCSpawnInfo>            NPCSpawnConfigs;                                   // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FT2MoveNpcGroupInfo) == 0x000008, "Wrong alignment on FT2MoveNpcGroupInfo");
static_assert(sizeof(FT2MoveNpcGroupInfo) == 0x000080, "Wrong size on FT2MoveNpcGroupInfo");
static_assert(offsetof(FT2MoveNpcGroupInfo, VersionActive) == 0x000000, "Member 'FT2MoveNpcGroupInfo::VersionActive' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, SpawnerID) == 0x000008, "Member 'FT2MoveNpcGroupInfo::SpawnerID' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, VersionNo) == 0x000010, "Member 'FT2MoveNpcGroupInfo::VersionNo' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, DatalayerId) == 0x000020, "Member 'FT2MoveNpcGroupInfo::DatalayerId' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, DatalayerFullPath) == 0x000028, "Member 'FT2MoveNpcGroupInfo::DatalayerFullPath' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, SpawnTimestamp) == 0x000038, "Member 'FT2MoveNpcGroupInfo::SpawnTimestamp' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, DestroyTimestamp) == 0x00003C, "Member 'FT2MoveNpcGroupInfo::DestroyTimestamp' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, bUseCirclePath) == 0x000040, "Member 'FT2MoveNpcGroupInfo::bUseCirclePath' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, bShouldReturnWhenEnd) == 0x000041, "Member 'FT2MoveNpcGroupInfo::bShouldReturnWhenEnd' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, PerformOnRaining) == 0x000042, "Member 'FT2MoveNpcGroupInfo::PerformOnRaining' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, ReactToFloating) == 0x000043, "Member 'FT2MoveNpcGroupInfo::ReactToFloating' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, bSnapToFloor) == 0x000044, "Member 'FT2MoveNpcGroupInfo::bSnapToFloor' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, GroupDescription) == 0x000048, "Member 'FT2MoveNpcGroupInfo::GroupDescription' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, MustSpawn) == 0x000058, "Member 'FT2MoveNpcGroupInfo::MustSpawn' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, Area) == 0x00005C, "Member 'FT2MoveNpcGroupInfo::Area' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, PathNodesInfo) == 0x000060, "Member 'FT2MoveNpcGroupInfo::PathNodesInfo' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcGroupInfo, NPCSpawnConfigs) == 0x000070, "Member 'FT2MoveNpcGroupInfo::NPCSpawnConfigs' has a wrong offset!");

// ScriptStruct PaperCharWizard.T2MoveNpcVersionGroupInfo
// 0x0058 (0x0058 - 0x0000)
struct FT2MoveNpcVersionGroupInfo final
{
public:
	int64                                         SpawnerID;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FT2MoveNpcGroupInfo> VersionMoveNpcGroupInfos;                        // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FT2MoveNpcVersionGroupInfo) == 0x000008, "Wrong alignment on FT2MoveNpcVersionGroupInfo");
static_assert(sizeof(FT2MoveNpcVersionGroupInfo) == 0x000058, "Wrong size on FT2MoveNpcVersionGroupInfo");
static_assert(offsetof(FT2MoveNpcVersionGroupInfo, SpawnerID) == 0x000000, "Member 'FT2MoveNpcVersionGroupInfo::SpawnerID' has a wrong offset!");
static_assert(offsetof(FT2MoveNpcVersionGroupInfo, VersionMoveNpcGroupInfos) == 0x000008, "Member 'FT2MoveNpcVersionGroupInfo::VersionMoveNpcGroupInfos' has a wrong offset!");

// ScriptStruct PaperCharWizard.T2MoveNPCDLSpawnConfig
// 0x0028 (0x0028 - 0x0000)
struct FT2MoveNPCDLSpawnConfig final
{
public:
	int64                                         DatalayerId;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DatalayerFullPath;                                 // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FT2MoveNpcVersionGroupInfo>     NpcGroupSpawnConfigs;                              // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FT2MoveNPCDLSpawnConfig) == 0x000008, "Wrong alignment on FT2MoveNPCDLSpawnConfig");
static_assert(sizeof(FT2MoveNPCDLSpawnConfig) == 0x000028, "Wrong size on FT2MoveNPCDLSpawnConfig");
static_assert(offsetof(FT2MoveNPCDLSpawnConfig, DatalayerId) == 0x000000, "Member 'FT2MoveNPCDLSpawnConfig::DatalayerId' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCDLSpawnConfig, DatalayerFullPath) == 0x000008, "Member 'FT2MoveNPCDLSpawnConfig::DatalayerFullPath' has a wrong offset!");
static_assert(offsetof(FT2MoveNPCDLSpawnConfig, NpcGroupSpawnConfigs) == 0x000018, "Member 'FT2MoveNPCDLSpawnConfig::NpcGroupSpawnConfigs' has a wrong offset!");

}

