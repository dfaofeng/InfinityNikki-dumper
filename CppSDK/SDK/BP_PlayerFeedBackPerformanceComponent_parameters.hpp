#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerFeedBackPerformanceComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "EGroundedLocomotionScenarioType_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_ActionPoint_StartActionPoint
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartActionPoint final
{
public:
	class UBP_ActionPoint_TaskAnime_Template_C*   InActionPointDA;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        inDuration;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartActionPoint) == 0x000008, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartActionPoint");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartActionPoint) == 0x000010, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartActionPoint");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartActionPoint, InActionPointDA) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartActionPoint::InActionPointDA' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartActionPoint, inDuration) == 0x000008, "Member 'BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartActionPoint::inDuration' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_ActionPoint_StartGesture
// 0x000C (0x000C - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartGesture final
{
public:
	struct FGameplayTag                           InGestureTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bFullBodyGesture;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartGesture) == 0x000004, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartGesture");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartGesture) == 0x00000C, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartGesture");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartGesture, InGestureTag) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartGesture::InGestureTag' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartGesture, bFullBodyGesture) == 0x000008, "Member 'BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartGesture::bFullBodyGesture' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_ActionPoint_StartStance
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartStance final
{
public:
	struct FGameplayTag                           InStanceTag;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartStance) == 0x000004, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartStance");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartStance) == 0x000008, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartStance");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartStance, InStanceTag) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_BP_ActionPoint_StartStance::InStanceTag' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_DodgeMoveTo
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_BP_DodgeMoveTo final
{
public:
	struct FVector                                TargetDir;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_BP_DodgeMoveTo) == 0x000008, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_BP_DodgeMoveTo");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_BP_DodgeMoveTo) == 0x000018, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_BP_DodgeMoveTo");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_BP_DodgeMoveTo, TargetDir) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_BP_DodgeMoveTo::TargetDir' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.BP_RequestStartPerformance
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_BP_RequestStartPerformance final
{
public:
	struct FGameplayTag                           StanceTag;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_BP_RequestStartPerformance) == 0x000004, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_BP_RequestStartPerformance");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_BP_RequestStartPerformance) == 0x000008, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_BP_RequestStartPerformance");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_BP_RequestStartPerformance, StanceTag) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_BP_RequestStartPerformance::StanceTag' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent
// 0x000C (0x000C - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent) == 0x000004, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent) == 0x00000C, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent, K2Node_Event_EndPlayReason) == 0x000008, "Member 'BP_PlayerFeedBackPerformanceComponent_C_ExecuteUbergraph_BP_PlayerFeedBackPerformanceComponent::K2Node_Event_EndPlayReason' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.GetPendingKillTimeAfterUnbind
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_GetPendingKillTimeAfterUnbind final
{
public:
	double                                        Pendingking;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_GetPendingKillTimeAfterUnbind) == 0x000008, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_GetPendingKillTimeAfterUnbind");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_GetPendingKillTimeAfterUnbind) == 0x000008, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_GetPendingKillTimeAfterUnbind");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_GetPendingKillTimeAfterUnbind, Pendingking) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_GetPendingKillTimeAfterUnbind::Pendingking' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_ReceiveEndPlay");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_ReceiveEndPlay");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_ReceiveTick");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_ReceiveTick");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.RequestStartGesture
// 0x000C (0x000C - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_RequestStartGesture final
{
public:
	struct FGameplayTag                           GestureTag;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bFullBodyGesture;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_RequestStartGesture) == 0x000004, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_RequestStartGesture");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_RequestStartGesture) == 0x00000C, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_RequestStartGesture");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_RequestStartGesture, GestureTag) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_RequestStartGesture::GestureTag' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_RequestStartGesture, bFullBodyGesture) == 0x000008, "Member 'BP_PlayerFeedBackPerformanceComponent_C_RequestStartGesture::bFullBodyGesture' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.RequestStopPerformance
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_RequestStopPerformance final
{
public:
	bool                                          bIgnoreCollision;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFastTransition;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_RequestStopPerformance) == 0x000001, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_RequestStopPerformance");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_RequestStopPerformance) == 0x000002, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_RequestStopPerformance");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_RequestStopPerformance, bIgnoreCollision) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_RequestStopPerformance::bIgnoreCollision' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_RequestStopPerformance, bFastTransition) == 0x000001, "Member 'BP_PlayerFeedBackPerformanceComponent_C_RequestStopPerformance::bFastTransition' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.SetActorPushPlayerEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_SetActorPushPlayerEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_SetActorPushPlayerEnable) == 0x000001, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_SetActorPushPlayerEnable");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_SetActorPushPlayerEnable) == 0x000001, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_SetActorPushPlayerEnable");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_SetActorPushPlayerEnable, bEnable) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_SetActorPushPlayerEnable::bEnable' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.TraceGroundDistance
// 0x0230 (0x0230 - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance final
{
public:
	double                                        Distance;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0048(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0058(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_153[0x1];                                      // 0x0153(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_Distance_ImplicitCast;       // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance) == 0x000008, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance) == 0x000230, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, Distance) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::Distance' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_Add_VectorVector_ReturnValue) == 0x000020, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, K2Node_MakeArray_Array) == 0x000038, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, K2Node_MakeArray_Array_1) == 0x000048, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000058, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000150, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_bBlockingHit) == 0x000151, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_bInitialOverlap) == 0x000152, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_Time) == 0x000154, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_Distance) == 0x000158, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_Location) == 0x000160, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_ImpactPoint) == 0x000178, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_Normal) == 0x000190, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_ImpactNormal) == 0x0001A8, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_PhysMat) == 0x0001C0, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_HitActor) == 0x0001C8, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_HitComponent) == 0x0001D0, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_HitBoneName) == 0x0001D8, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_BoneName) == 0x0001E0, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_HitItem) == 0x0001E8, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_ElementIndex) == 0x0001EC, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_FaceIndex) == 0x0001F0, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_TraceStart) == 0x0001F8, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, CallFunc_BreakHitResult_TraceEnd) == 0x000210, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance, K2Node_FunctionResult_Distance_ImplicitCast) == 0x000228, "Member 'BP_PlayerFeedBackPerformanceComponent_C_TraceGroundDistance::K2Node_FunctionResult_Distance_ImplicitCast' has a wrong offset!");

// Function BP_PlayerFeedBackPerformanceComponent.BP_PlayerFeedBackPerformanceComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerFeedBackPerformanceComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerFeedBackPerformanceComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_PlayerFeedBackPerformanceComponent_C_GetModuleName");
static_assert(sizeof(BP_PlayerFeedBackPerformanceComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_PlayerFeedBackPerformanceComponent_C_GetModuleName");
static_assert(offsetof(BP_PlayerFeedBackPerformanceComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_PlayerFeedBackPerformanceComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

