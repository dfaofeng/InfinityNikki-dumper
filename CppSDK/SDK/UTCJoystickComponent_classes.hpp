#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UTCJoystickComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EUTCJoystickAxes_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UTCComponent_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass UTCJoystickComponent.UTCJoystickComponent_C
// 0x01A0 (0x0390 - 0x01F0)
class UUTCJoystickComponent_C : public UUTCComponent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_UTCJoystickComponent_C;             // 0x01F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                Press_Location;                                    // 0x01F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                Drag_Location;                                     // 0x0210(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0228(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Previous_Magnitude;                                // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Magnitude;                                         // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector2D                              Axes;                                              // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Max_Magnitude;                                     // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Clamping_Speed;                                    // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Joystick_Offset;                                   // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUTCJoystickAxes                              Lock_Axis;                                         // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Enable_Floating;                                   // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(double Value)>  On_X_Axis_Changed;                                 // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double Value)>  On_Y_Axis_Changed;                                 // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Released;                                          // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FVector& Location)> On_Joystick_Location_Changed;     // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FVector& Location)> On_Picker_Location_Changed;       // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FVector& Location)> On_Joystick_Pressed;              // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FVector& Location)> On_Joystick_Released;             // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double XAxis, double YAxis, const struct FVector& Direction)> On_Axes_Changed; // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	ETouchIndex                                   CurrentFingerIndex;                                // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUTCJoystickDebugWidget_C*              Debug_Widget;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UUserWidget*                            JoystickWidget;                                    // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Hide_On_Unpossession;                              // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Fixed_Location;                                // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Fixed_Location_In_Percentage;                  // 0x031A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Recalculate_Immediately;                           // 0x031B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Adjust_Bounds_to_Fixed_Location;                   // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Fixed_Location;                                    // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Widget_Size;                                   // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Fixed_Location____;                                // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PressEnabled;                                      // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Clamped;                                           // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanTickJoyStick;                                   // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CanTickPlayerPos;                                  // 0x034B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Delta;                                             // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              WidgetPickerSize;                                  // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              WidgetCenterInitPos;                               // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LockPos;                                           // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              EdgeGapSize;                                       // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateWidgetSize(class UClass* Widget_Class, bool Use_Widget_Size_0, bool Hide_If_Unpossessed, bool* Is_Initialized);
	void UpdateDebugWidget();
	void Update_Temp_Variables();
	void Update_Magnituge_By_Widget_Size();
	void Update_Lock_Axes();
	void Update_Floating(struct FVector* JoystickLocation, struct FVector* PickerLocation);
	void Update_Fixed_Location(bool Is_Viewport_Size_Changed);
	void Update_Axis_Vector(struct FVector2D* Axis);
	void Snap_Widget_to_Bounds();
	void Snap_Bounds_to_Fixed_Location();
	void SetWidgetVisibility(bool NewVisibility);
	void Setup_Widget(class UClass* Widget__with_IUTCWIdget_Interface_, bool Use_Widget_Size__back_texture_size_, bool Hide_if_Pawn_Unpossessed, class UUserWidget* JoystickWgt);
	void Setup_Fixed_Location(bool Is_Enabled, const struct FVector2D& Fixed_Location_0, bool In_Percent, bool Imeediate_Recalculation, bool Adjust_Bounds_to_Fixed_Location_0);
	void SetJoystickMode(bool JoystickMode);
	void ResetWidgetPos();
	void ResetClamped();
	void ReleaseTouch(const struct FVector& Location);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void On_Y_Axis_Changed_Event(double Value);
	void On_X_Axis_Changed_Event(double Value);
	void On_Viewport_Size_Is_Changed();
	void On_Viewport_Size_Changed_Event(const struct FVector2D& Previous_Size, const struct FVector2D& Updated_Size);
	void On_Picker_Location_Changed_Event(const struct FVector& Location);
	void On_Pawn_Unpossesed(class AController* Old_Controller);
	void On_Pawn_Possesed(class AController* New_Controller);
	void On_Joystick_Released_Event(const struct FVector& Location);
	void On_Joystick_Pressed_Event(const struct FVector& Location);
	void On_Joystick_Location_Changed_Event(const struct FVector& Location);
	void On_Event_Touch_Released(const struct FVector& Location, ETouchIndex FingerIndex);
	void On_Event_Touch_Pressed(const struct FVector& Location, ETouchIndex FingerIndex);
	void On_Event_Touch_Moved(const struct FVector& Location, ETouchIndex FingerIndex);
	void On_Event_Touch_Canceled(const struct FVector& Location, ETouchIndex FingerIndex);
	void On_Axes_Changed_Event(double XAxis, double YAxis, const struct FVector& Direction_0);
	void IsWidgetVisible(bool* IsVisible);
	void IsMagnitudeLowerThanMax(bool* IsLowerThanMax);
	void InitializeDebugWidget();
	void GetEdgeGapModifiedLocation(const struct FVector& PressLocation, struct FVector* ModifiedLocation);
	void Get_Joystick_Widget_Instance(class UUserWidget** Joystick_Widget_Instance);
	void ForceTickOnce();
	void ExecuteUbergraph_UTCJoystickComponent(int32 EntryPoint);
	void Destroy_Widget();
	void CheckJoystickMode(bool* CurrentJoystickMode);
	void AjustLocation(const struct FVector& Pos, bool* res);
	void AddEventInput(class FName PropertyName, const struct FVector& Value, bool IsAccumulate);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UTCJoystickComponent_C">();
	}
	static class UUTCJoystickComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUTCJoystickComponent_C>();
	}
};
static_assert(alignof(UUTCJoystickComponent_C) == 0x000008, "Wrong alignment on UUTCJoystickComponent_C");
static_assert(sizeof(UUTCJoystickComponent_C) == 0x000390, "Wrong size on UUTCJoystickComponent_C");
static_assert(offsetof(UUTCJoystickComponent_C, UberGraphFrame_UTCJoystickComponent_C) == 0x0001F0, "Member 'UUTCJoystickComponent_C::UberGraphFrame_UTCJoystickComponent_C' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Press_Location) == 0x0001F8, "Member 'UUTCJoystickComponent_C::Press_Location' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Drag_Location) == 0x000210, "Member 'UUTCJoystickComponent_C::Drag_Location' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Direction) == 0x000228, "Member 'UUTCJoystickComponent_C::Direction' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Previous_Magnitude) == 0x000240, "Member 'UUTCJoystickComponent_C::Previous_Magnitude' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Magnitude) == 0x000248, "Member 'UUTCJoystickComponent_C::Magnitude' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Angle) == 0x000250, "Member 'UUTCJoystickComponent_C::Angle' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Axes) == 0x000258, "Member 'UUTCJoystickComponent_C::Axes' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Max_Magnitude) == 0x000268, "Member 'UUTCJoystickComponent_C::Max_Magnitude' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Clamping_Speed) == 0x000270, "Member 'UUTCJoystickComponent_C::Clamping_Speed' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Joystick_Offset) == 0x000278, "Member 'UUTCJoystickComponent_C::Joystick_Offset' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Lock_Axis) == 0x000280, "Member 'UUTCJoystickComponent_C::Lock_Axis' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Enable_Floating) == 0x000281, "Member 'UUTCJoystickComponent_C::Enable_Floating' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, On_X_Axis_Changed) == 0x000288, "Member 'UUTCJoystickComponent_C::On_X_Axis_Changed' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, On_Y_Axis_Changed) == 0x000298, "Member 'UUTCJoystickComponent_C::On_Y_Axis_Changed' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Released) == 0x0002A8, "Member 'UUTCJoystickComponent_C::Released' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, On_Joystick_Location_Changed) == 0x0002B0, "Member 'UUTCJoystickComponent_C::On_Joystick_Location_Changed' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, On_Picker_Location_Changed) == 0x0002C0, "Member 'UUTCJoystickComponent_C::On_Picker_Location_Changed' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, On_Joystick_Pressed) == 0x0002D0, "Member 'UUTCJoystickComponent_C::On_Joystick_Pressed' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, On_Joystick_Released) == 0x0002E0, "Member 'UUTCJoystickComponent_C::On_Joystick_Released' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, On_Axes_Changed) == 0x0002F0, "Member 'UUTCJoystickComponent_C::On_Axes_Changed' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, CurrentFingerIndex) == 0x000300, "Member 'UUTCJoystickComponent_C::CurrentFingerIndex' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Debug_Widget) == 0x000308, "Member 'UUTCJoystickComponent_C::Debug_Widget' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, JoystickWidget) == 0x000310, "Member 'UUTCJoystickComponent_C::JoystickWidget' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Hide_On_Unpossession) == 0x000318, "Member 'UUTCJoystickComponent_C::Hide_On_Unpossession' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Use_Fixed_Location) == 0x000319, "Member 'UUTCJoystickComponent_C::Use_Fixed_Location' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Use_Fixed_Location_In_Percentage) == 0x00031A, "Member 'UUTCJoystickComponent_C::Use_Fixed_Location_In_Percentage' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Recalculate_Immediately) == 0x00031B, "Member 'UUTCJoystickComponent_C::Recalculate_Immediately' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Adjust_Bounds_to_Fixed_Location) == 0x00031C, "Member 'UUTCJoystickComponent_C::Adjust_Bounds_to_Fixed_Location' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Fixed_Location) == 0x000320, "Member 'UUTCJoystickComponent_C::Fixed_Location' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Use_Widget_Size) == 0x000330, "Member 'UUTCJoystickComponent_C::Use_Widget_Size' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Fixed_Location____) == 0x000338, "Member 'UUTCJoystickComponent_C::Fixed_Location____' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, PressEnabled) == 0x000348, "Member 'UUTCJoystickComponent_C::PressEnabled' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Clamped) == 0x000349, "Member 'UUTCJoystickComponent_C::Clamped' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, CanTickJoyStick) == 0x00034A, "Member 'UUTCJoystickComponent_C::CanTickJoyStick' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, CanTickPlayerPos) == 0x00034B, "Member 'UUTCJoystickComponent_C::CanTickPlayerPos' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, Delta) == 0x000350, "Member 'UUTCJoystickComponent_C::Delta' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, WidgetPickerSize) == 0x000358, "Member 'UUTCJoystickComponent_C::WidgetPickerSize' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, WidgetCenterInitPos) == 0x000368, "Member 'UUTCJoystickComponent_C::WidgetCenterInitPos' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, LockPos) == 0x000378, "Member 'UUTCJoystickComponent_C::LockPos' has a wrong offset!");
static_assert(offsetof(UUTCJoystickComponent_C, EdgeGapSize) == 0x000380, "Member 'UUTCJoystickComponent_C::EdgeGapSize' has a wrong offset!");

}

