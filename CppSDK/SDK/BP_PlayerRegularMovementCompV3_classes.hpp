#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerRegularMovementCompV3

#include "Basic.hpp"

#include "EInputDeviceKeyType_structs.hpp"
#include "Engine_structs.hpp"
#include "EPlayerMovementScenarios_structs.hpp"
#include "X6Game_structs.hpp"
#include "X6Game_classes.hpp"
#include "EPlayerAdditiveMovementMode_structs.hpp"
#include "EPlayerSprintType_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C
// 0x02F0 (0x0498 - 0x01A8)
class UBP_PlayerRegularMovementCompV3_C : public UX6RMWalkingComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          BP_IsLogicInStateMoving;                           // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_IsLogicRequireJump;                             // 0x01B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_IsLogicInStateInAir;                            // 0x01B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_1B3[0x5];                                      // 0x01B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_ConfigTurnAroundRotationSpeedVal;               // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        BP_ConfigWalkingRotationSpeedVal;                  // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        BP_ConfigRuningRotationSpeedVal;                   // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        BP_ConfigSprintingRotationSpeedVal;                // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_ConfigEnableMovementFeatureV2;                  // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_CurFloorAngle;                                  // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        BP_FootLockLAlpha;                                 // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                BP_FootLockLLocation;                              // 0x01F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               BP_FootLockLRotation;                              // 0x0208(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	double                                        BP_FootLockRAlpha;                                 // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                BP_FootLockRLocation;                              // 0x0228(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               BP_FootLockRRotation;                              // 0x0240(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	ERegularFloatingJumpStage                     BP_CurrentFloatingJumpStage;                       // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BP_FootOffsetLLocation;                            // 0x0260(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                BP_FootOffsetRLocation;                            // 0x0278(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRotator                               BP_FootOffsetLRotation;                            // 0x0290(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FRotator                               BP_FootOffsetRRotation;                            // 0x02A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	double                                        BP_PelvisAlpha;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                BP_PelvisOffset;                                   // 0x02C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        BP_FootIKLAlpha_;                                  // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        BP_FootIKRAlpha;                                   // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_EnableFootIK;                                   // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     BP_PreviousFloatingJumpStage;                      // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_CurTurnAroundAngle;                             // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_EnablePlayerRotationDebug;                      // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_EnableCurFloorAngleDebug;                       // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_PlayerStartMovingAngle;                         // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        BP_Alpha_LandPrediction;                           // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EPlayerSprintType                             BP_CurrentSprintType;                              // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_ForbidHandlePlayerInput;                        // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ERegularFloatingJumpStage NewStage, ERegularFloatingJumpStage OldStage)> Event_OnPlayerFloatingJumpStageChanged; // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, AdvancedDisplay, BlueprintCallable)
	bool                                          BP_EnableInputDebug;                               // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_IsCurInputValid;                                // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_EnableBehaviorDebug;                            // 0x0332(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_333[0x5];                                      // 0x0333(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_CurTurnAroundAngularSpeed;                      // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        BP_MaxTurnAroundAngularSpeed;                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                BP_CurInputMovingDirection;                        // 0x0348(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_IsPlayerMoving;                                 // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	ERegularLocomotionType                        BP_CurrentAllowedGait;                             // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	ERegularLocomotionType                        BP_CurrentActualGait;                              // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_363[0x1];                                      // 0x0363(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BP_ConfigDTReadRowName;                            // 0x0364(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UBP_MovementAllConfigTemplate_C> BP_PlayerDefaultMovementConfig;            // 0x0370(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TMap<EX6InputDeviceKeyType, TSoftObjectPtr<class UBP_MovementAllConfigTemplate_C>> BP_PlayerMovementConfigByDevice; // 0x0398(0x0050)(Edit, BlueprintVisible)
	TMulticastInlineDelegate<void(ERegularLocomotionType NewGait, ERegularLocomotionType OldGait)> Event_OnCurAllowedGaitChanged; // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, AdvancedDisplay, BlueprintCallable)
	bool                                          BP_IsLogicInStateAiming;                           // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<EPlayerAdditiveMovementMode>             BP_CurAdditiveMovementModesSet;                    // 0x0400(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	TMulticastInlineDelegate<void(EPlayerAdditiveMovementMode UpdatedMode, bool bAddOrRemoved)> Event_OnAdditiveMovementModeUpdate; // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, AdvancedDisplay, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Event_OnExitLocomotionStopState;                   // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Event_OnExitLocomotionStartState;                  // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class URMOutputContext_OnGround*              OutputContext_OnGround;                            // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BP_CurTurnInplaceAngle;                            // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          BP_EnableRegularMovementTickOptimization;          // 0x0490(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SyncAnimStatesWithTick();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void NotifyCurAllowedGaitChanged(ERegularLocomotionType NewGait, ERegularLocomotionType CurrentGait);
	void NotifyCurActualGaitChanged(ERegularLocomotionType NewGait, ERegularLocomotionType CurrentGait);
	void ExecuteUbergraph_BP_PlayerRegularMovementCompV3(int32 EntryPoint);
	void BPI_Get_PlayerStates(bool* IsInState_AimMode);
	void BPI_Get_MaxSpeedValues(double* CurMinAnalogWalkSpeed, double* CurConfigMaxSpeed, double* CurActualMaxSpeed);
	void BPI_Get_EssentialValues(struct FVector* InVelocity, struct FVector* InCurrentAcceleration, double* InMaxAcceleration, double* InTurnAroundAngle, double* InSlopeAngle, double* InStartTurnAroundAngle, double* InCurConfigMaxSpeed);
	void BPI_Get_CurrentGroundStates(EMovementMode* PawnMovementMode, ERegularLocomotionType* AllowedGait, EPlayerMovementScenarios* MovementScenario, EInputDeviceKeyType* CurInputDeviceKeyType);
	void BPI_Get_ConfigData(double* WalkSpeed, double* RunSpeed, double* SprintSpeed);
	void BPI_Get_BalanceBeamStates(bool* CanMoveOnValidInput, bool* IsEnterTowardSideOfBeam, bool* IsCurInputValid);
	void BP_VisitorSetAdditiveMovementMode_Aiming(bool bEnter);
	void BP_SyncCMCValue(class UCharacterMovementComponent* CMC, double MaxWalkSpeed, double MinAnalogWalkSpeed, double MaxAcceleration, double BrakingDecelerationWalking, double GroundFriction);
	void BP_SyncAnimStatesWithTickV2();
	void BP_SyncAnimStatesWithTick(double CurFloorAngle_0, double CurTurnAroundAngle, bool IsCurInputValid, ERegularLocomotionType CurrentAllowedGait_0, bool IsLogicInStateAiming);
	void BP_StopActiveTurnInplace();
	void BP_SetRegularMovementEnable(bool bEnable);
	void BP_SetInplaceTurnAroundAngle(double CurTargetTurnAroundAngle, double LowerBoundOfAngleOfTurnInplace, bool bPreventRotationMovementWhenTurningInPlace);
	void BP_SetForceMaxInput(bool bForceMaxInput);
	void BP_SetEnableFootIK(bool bEnable, bool bImmediately);
	void BP_SetAIInplaceTurnAroundAngle(double CurInplaceTurnAroundAngle);
	void BP_ResetOwnerMovementConfig();
	void BP_ResetMaxAccelerationConfigValue(double* OldMaxAcceleration);
	void BP_ResetGroundFrictionConfigValue(double* OldGroundFriction);
	void BP_ResetGlideMovementConfig();
	void BP_ResetGaitMaxWalkSpeedConfigValue(ERegularLocomotionType Gait);
	void BP_ResetBrakingDecelerationWalkingConfigValue(double* OldBrakingDecelerationWalking);
	void BP_ModifyOwnerMovementConfigByDA(class UBP_MovementAllConfigTemplate_C* NewDataAsset, class UBP_MovementAllConfigTemplate_C** OldDataAsset);
	void BP_ModifyMaxAccelerationConfigValue(double Value);
	void BP_ModifyGroundFrictionConfigValue(double Value);
	void BP_ModifyGlideMovementConfig(double NewMaxWalkSpeed, double NewRotationActorInterpSpeed);
	void BP_ModifyGaitMaxWalkSpeedConfigValue(ERegularLocomotionType Gait, double MaxWalkSpeedValue);
	void BP_ModifyCurLocomotionAnimSetBySoftRef(TSoftObjectPtr<class UBP_QuadrupedLocomotion_AnimSet_C> NewAnimSetSoftRef);
	void BP_ModifyCurLocomotionAnimSetByPath(const class FString& NewAnimSetPath);
	void BP_ModifyCurLocomotionAnimSet(class UBP_QuadrupedLocomotion_AnimSet_C* NewAnimSet);
	void BP_ModifyBrakingDecelerationWalkingConfigValue(double Value);
	void BP_InterruptAITurnAroundBehavior();
	void BP_GetPlayerCurTurnAroundAngle(double* CurrentTurnAroundAngle);
	void BP_GetPlayerCurLocomotionStateByCurSpeed(ERegularLocomotionType* CurLocomotionType);
	void BP_GetOwnerIsSimulated(bool* bOwnerSimulated);
	void BP_GetDesiredGait(ERegularLocomotionType* BP_CurrentAllowedGait_0);
	void BP_GetCurConfigMaxSpeed(double* CurConfigMaxSpeed);
	void BP_GetAllowGait(ERegularLocomotionType* NewParam);
	void BP_ForbidPlayerRegularMovementInput(bool Value, EPlayerRegularForbidInputType RegularForbidInputType);
	void BP_ExitAdditiveMovementMode_Aiming(class UBP_AimModeMovement_CT_C** OldAimingMovementModeConfig);
	void BP_EnterAdditiveMovementMode_Aiming(class UBP_AimModeMovement_CT_C* NewAimingMovementModeConfig, bool* Ret);
	void BP_EnableInplaceTurnAroundBehavior(bool bEnable);
	void BP_EnableAIInplaceTurnAroundBehavior(bool bEnable);
	void BP_DebugForceEnterSprintGait(bool bForceEnterSprintGait);
	void BP_ChangeDesiredGait(ERegularLocomotionType NewGait, bool bForceChangeOperationInput);
	void BP_AnimNotifyState_EnableEdgeProtection(bool bEnableEdgeProtection);
	void BP_AnimNotify_IsInStateStartMoving(bool bInStateStartMoving);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerRegularMovementCompV3_C">();
	}
	static class UBP_PlayerRegularMovementCompV3_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerRegularMovementCompV3_C>();
	}
};
static_assert(alignof(UBP_PlayerRegularMovementCompV3_C) == 0x000008, "Wrong alignment on UBP_PlayerRegularMovementCompV3_C");
static_assert(sizeof(UBP_PlayerRegularMovementCompV3_C) == 0x000498, "Wrong size on UBP_PlayerRegularMovementCompV3_C");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, UberGraphFrame) == 0x0001A8, "Member 'UBP_PlayerRegularMovementCompV3_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_IsLogicInStateMoving) == 0x0001B0, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_IsLogicInStateMoving' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_IsLogicRequireJump) == 0x0001B1, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_IsLogicRequireJump' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_IsLogicInStateInAir) == 0x0001B2, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_IsLogicInStateInAir' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_ConfigTurnAroundRotationSpeedVal) == 0x0001B8, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_ConfigTurnAroundRotationSpeedVal' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_ConfigWalkingRotationSpeedVal) == 0x0001C0, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_ConfigWalkingRotationSpeedVal' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_ConfigRuningRotationSpeedVal) == 0x0001C8, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_ConfigRuningRotationSpeedVal' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_ConfigSprintingRotationSpeedVal) == 0x0001D0, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_ConfigSprintingRotationSpeedVal' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_ConfigEnableMovementFeatureV2) == 0x0001D8, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_ConfigEnableMovementFeatureV2' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_CurFloorAngle) == 0x0001E0, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_CurFloorAngle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootLockLAlpha) == 0x0001E8, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootLockLAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootLockLLocation) == 0x0001F0, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootLockLLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootLockLRotation) == 0x000208, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootLockLRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootLockRAlpha) == 0x000220, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootLockRAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootLockRLocation) == 0x000228, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootLockRLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootLockRRotation) == 0x000240, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootLockRRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_CurrentFloatingJumpStage) == 0x000258, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_CurrentFloatingJumpStage' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootOffsetLLocation) == 0x000260, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootOffsetLLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootOffsetRLocation) == 0x000278, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootOffsetRLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootOffsetLRotation) == 0x000290, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootOffsetLRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootOffsetRRotation) == 0x0002A8, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootOffsetRRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_PelvisAlpha) == 0x0002C0, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_PelvisAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_PelvisOffset) == 0x0002C8, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_PelvisOffset' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootIKLAlpha_) == 0x0002E0, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootIKLAlpha_' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_FootIKRAlpha) == 0x0002E8, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_FootIKRAlpha' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_EnableFootIK) == 0x0002F0, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_EnableFootIK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_PreviousFloatingJumpStage) == 0x0002F1, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_PreviousFloatingJumpStage' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_CurTurnAroundAngle) == 0x0002F8, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_CurTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_EnablePlayerRotationDebug) == 0x000300, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_EnablePlayerRotationDebug' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_EnableCurFloorAngleDebug) == 0x000301, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_EnableCurFloorAngleDebug' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_PlayerStartMovingAngle) == 0x000308, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_PlayerStartMovingAngle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_Alpha_LandPrediction) == 0x000310, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_Alpha_LandPrediction' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_CurrentSprintType) == 0x000318, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_CurrentSprintType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_ForbidHandlePlayerInput) == 0x000319, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_ForbidHandlePlayerInput' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, Event_OnPlayerFloatingJumpStageChanged) == 0x000320, "Member 'UBP_PlayerRegularMovementCompV3_C::Event_OnPlayerFloatingJumpStageChanged' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_EnableInputDebug) == 0x000330, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_EnableInputDebug' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_IsCurInputValid) == 0x000331, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_IsCurInputValid' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_EnableBehaviorDebug) == 0x000332, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_EnableBehaviorDebug' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_CurTurnAroundAngularSpeed) == 0x000338, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_CurTurnAroundAngularSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_MaxTurnAroundAngularSpeed) == 0x000340, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_MaxTurnAroundAngularSpeed' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_CurInputMovingDirection) == 0x000348, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_CurInputMovingDirection' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_IsPlayerMoving) == 0x000360, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_IsPlayerMoving' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_CurrentAllowedGait) == 0x000361, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_CurrentAllowedGait' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_CurrentActualGait) == 0x000362, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_CurrentActualGait' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_ConfigDTReadRowName) == 0x000364, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_ConfigDTReadRowName' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_PlayerDefaultMovementConfig) == 0x000370, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_PlayerDefaultMovementConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_PlayerMovementConfigByDevice) == 0x000398, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_PlayerMovementConfigByDevice' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, Event_OnCurAllowedGaitChanged) == 0x0003E8, "Member 'UBP_PlayerRegularMovementCompV3_C::Event_OnCurAllowedGaitChanged' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_IsLogicInStateAiming) == 0x0003F8, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_IsLogicInStateAiming' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_CurAdditiveMovementModesSet) == 0x000400, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_CurAdditiveMovementModesSet' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, Event_OnAdditiveMovementModeUpdate) == 0x000450, "Member 'UBP_PlayerRegularMovementCompV3_C::Event_OnAdditiveMovementModeUpdate' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, Event_OnExitLocomotionStopState) == 0x000460, "Member 'UBP_PlayerRegularMovementCompV3_C::Event_OnExitLocomotionStopState' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, Event_OnExitLocomotionStartState) == 0x000470, "Member 'UBP_PlayerRegularMovementCompV3_C::Event_OnExitLocomotionStartState' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, OutputContext_OnGround) == 0x000480, "Member 'UBP_PlayerRegularMovementCompV3_C::OutputContext_OnGround' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_CurTurnInplaceAngle) == 0x000488, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_CurTurnInplaceAngle' has a wrong offset!");
static_assert(offsetof(UBP_PlayerRegularMovementCompV3_C, BP_EnableRegularMovementTickOptimization) == 0x000490, "Member 'UBP_PlayerRegularMovementCompV3_C::BP_EnableRegularMovementTickOptimization' has a wrong offset!");

}

