#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6Camera

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum X6Camera.ECameraViewTargetBlendType
// NumValues: 0x0003
enum class ECameraViewTargetBlendType : uint8
{
	CVBT_Normal                              = 0,
	CVBT_Follow                              = 1,
	CVBT_MAX                                 = 2,
};

// Enum X6Camera.ECameraRotationYawSyncMode
// NumValues: 0x0004
enum class ECameraRotationYawSyncMode : uint8
{
	FollowVelocityDirection                  = 0,
	FollowInputDirection                     = 1,
	FollowActorForwardDirection              = 2,
	ECameraRotationYawSyncMode_MAX           = 3,
};

// Enum X6Camera.EConsumeTimeMethod
// NumValues: 0x0004
enum class EConsumeTimeMethod : uint8
{
	ECM_ActiveConsume                        = 0,
	ECM_AlwaysConsume                        = 1,
	ECM_NoConsumeTime                        = 2,
	ECM_MAX                                  = 3,
};

// Enum X6Camera.ECameraTaskLookAtType
// NumValues: 0x0004
enum class ECameraTaskLookAtType : uint8
{
	ECTLT_Follow                             = 0,
	ECTLT_Fixed                              = 1,
	ECTLT_Focus                              = 2,
	ECTLT_MAX                                = 3,
};

// Enum X6Camera.EX6CameraDataPriority
// NumValues: 0x0006
enum class EX6CameraDataPriority : uint8
{
	X6CP_PRIORITY_1                          = 0,
	X6CP_PRIORITY_2                          = 1,
	X6CP_PRIORITY_3                          = 2,
	X6CP_PRIORITY_4                          = 3,
	X6CP_PRIORITY_5                          = 4,
	X6CP_PRIORITY_MAX                        = 5,
};

// Enum X6Camera.ECameraBlendPathType
// NumValues: 0x0007
enum class ECameraBlendPathType : uint8
{
	CBPT_Default                             = 0,
	CBPT_Follow                              = 1,
	CBPT_Curve                               = 2,
	CBPT_LookAt                              = 3,
	CBPT_Bezier                              = 4,
	CBPT_SpringArm                           = 5,
	CBPT_MAX                                 = 6,
};

// Enum X6Camera.ECameraLayer
// NumValues: 0x0006
enum class ECameraLayer : uint8
{
	CL_LAYER_1                               = 0,
	CL_LAYER_2                               = 1,
	CL_LAYER_3                               = 2,
	CL_LAYER_4                               = 3,
	CL_LAYER_5                               = 4,
	CL_LAYER_MAX                             = 5,
};

// Enum X6Camera.ECameraValueModifyType
// NumValues: 0x0004
enum class ECameraValueModifyType : uint8
{
	CVMT_ADDITIVE                            = 0,
	CVMT_OVERRIDE                            = 1,
	CVMT_BASE                                = 2,
	CVMT_MAX                                 = 3,
};

// Enum X6Camera.ECameraTransitionPermission
// NumValues: 0x0003
enum class ECameraTransitionPermission : uint8
{
	Permit                                   = 0,
	Refuse                                   = 1,
	ECameraTransitionPermission_MAX          = 2,
};

// Enum X6Camera.ECameraState
// NumValues: 0x0026
enum class ECameraState : uint8
{
	None                                     = 0,
	BirthMode                                = 1,
	DeathMode                                = 2,
	UIMode                                   = 3,
	InteractMode                             = 4,
	CombatMode                               = 5,
	SplineMode                               = 6,
	FixedMode                                = 7,
	FollowMode                               = 8,
	SequenceMode                             = 9,
	ArbitrarilyMode                          = 10,
	TransitionMode                           = 11,
	CameraMode_NativeBound                   = 12,
	CameraMode10                             = 13,
	CameraMode11                             = 14,
	CameraMode12                             = 15,
	CameraMode13                             = 16,
	CameraMode14                             = 17,
	CameraMode15                             = 18,
	CameraMode16                             = 19,
	CameraMode17                             = 20,
	CameraMode18                             = 21,
	CameraMode19                             = 22,
	CameraMode20                             = 23,
	CameraMode21                             = 24,
	CameraMode22                             = 25,
	CameraMode23                             = 26,
	CameraMode24                             = 27,
	CameraMode25                             = 28,
	CameraMode26                             = 29,
	CameraMode27                             = 30,
	CameraMode28                             = 31,
	CameraMode29                             = 32,
	CameraMode30                             = 33,
	CameraMode31                             = 34,
	CameraMode32                             = 35,
	CameraMode_MAX                           = 36,
	ECameraState_MAX                         = 37,
};

// Enum X6Camera.ECameraCollisionMoveMode
// NumValues: 0x0004
enum class ECameraCollisionMoveMode : uint8
{
	CCMM_INTER                               = 0,
	CCMM_SPRING                              = 1,
	CCMM_CONST_INTERP                        = 2,
	CCMM_MAX                                 = 3,
};

// Enum X6Camera.ECameraModifierStage
// NumValues: 0x0004
enum class ECameraModifierStage : uint8
{
	CMS_Blend                                = 0,
	CMS_Nomal                                = 1,
	CVMT_EndLife                             = 2,
	ECameraModifierStage_MAX                 = 3,
};

// Enum X6Camera.ECameraLagReferenceType
// NumValues: 0x0005
enum class ECameraLagReferenceType : uint8
{
	CameraForward                            = 0,
	ActorForward                             = 1,
	PawnVelocity                             = 2,
	PawnAcceleration                         = 3,
	ECameraLagReferenceType_MAX              = 4,
};

// Enum X6Camera.EX6CameraPlatformType
// NumValues: 0x0005
enum class EX6CameraPlatformType : uint8
{
	None                                     = 0,
	PC                                       = 1,
	Mobile                                   = 2,
	Console                                  = 3,
	EX6CameraPlatformType_MAX                = 4,
};

// Enum X6Camera.EX6CameraInputDeviceType
// NumValues: 0x0005
enum class EX6CameraInputDeviceType : uint8
{
	None                                     = 0,
	Mouse                                    = 1,
	Gamepad                                  = 2,
	TouchScreen                              = 3,
	EX6CameraInputDeviceType_MAX             = 4,
};

// ScriptStruct X6Camera.X6CameraConfigBlendParams
// 0x0028 (0x0028 - 0x0000)
struct FX6CameraConfigBlendParams final
{
public:
	bool                                          bOverrideTransitionParams;                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCacheCameraSettingsWhenLockOutgoingBlend;         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0008(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6CameraConfigBlendParams) == 0x000008, "Wrong alignment on FX6CameraConfigBlendParams");
static_assert(sizeof(FX6CameraConfigBlendParams) == 0x000028, "Wrong size on FX6CameraConfigBlendParams");
static_assert(offsetof(FX6CameraConfigBlendParams, bOverrideTransitionParams) == 0x000000, "Member 'FX6CameraConfigBlendParams::bOverrideTransitionParams' has a wrong offset!");
static_assert(offsetof(FX6CameraConfigBlendParams, bCacheCameraSettingsWhenLockOutgoingBlend) == 0x000001, "Member 'FX6CameraConfigBlendParams::bCacheCameraSettingsWhenLockOutgoingBlend' has a wrong offset!");
static_assert(offsetof(FX6CameraConfigBlendParams, TransitionParams) == 0x000008, "Member 'FX6CameraConfigBlendParams::TransitionParams' has a wrong offset!");

// ScriptStruct X6Camera.CameraOrientationSyncConfig
// 0x00B8 (0x00B8 - 0x0000)
struct FCameraOrientationSyncConfig final
{
public:
	float                                         StopYawSyncInputAngularThreshold;                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterruptResetInputAngularThreshold;               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResetYawSyncDelayTimeInputAngularThreshold;        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OwnerIsMovingSpeedTolerance;                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ResetRotationAngularSpeedCurve;                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResetRotationAngularSpeedIncreaseInterpSpeed;      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableYawSync;                                    // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoYawSyncWhenNotMoving;                           // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopYawSyncInAir;                                 // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StopYawSyncInAirDelaySeconds;                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraRotationYawSyncMode                    YawSyncMode;                                       // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnableCameraRotationSyncMinAngle;                  // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableCameraRotationSyncMaxAngle;                  // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableForwardRotationSyncMaxAngle;                 // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockFollowCameraWhenNoCameraInput;                // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartLockFollowCameraTolerance;                    // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartRotationSyncAngle;                            // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RotationYawSyncAngularSpeedCurve;                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RotationYawSyncAngularSpeedScaleCurve;             // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawSyncAngularSpeedIncreaseInterpSpeed;            // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartRotationYawSyncDelay;                         // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSyncEaseTime;                              // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   RotationSyncEaseType;                              // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCombatYawSync;                                    // 0x005D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayForFirstEngage;                               // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHorizontalDistance;                             // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalDistance;                               // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopRotationSyncMaxAngle;                          // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalCharacterRotationWeight;                      // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseForCharacterRotation;                      // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalCharacterDistanceWeight;                      // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseForCharacterDistance;                      // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalCameraRotationWeight;                         // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecreaseForCameraRotation;                         // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchThresholdRate;                               // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumWeightToEnableSync;                         // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePitchSync;                                  // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartRotationPitchSyncDelay;                       // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchSyncSpringSmoothTime;                         // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchSyncSpringDamp;                               // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           RotationPitchSyncMapCurve;                         // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchCheckChangeLength;                            // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchCheckYawRange;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirLandPitch;                                      // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraOrientationSyncConfig) == 0x000008, "Wrong alignment on FCameraOrientationSyncConfig");
static_assert(sizeof(FCameraOrientationSyncConfig) == 0x0000B8, "Wrong size on FCameraOrientationSyncConfig");
static_assert(offsetof(FCameraOrientationSyncConfig, StopYawSyncInputAngularThreshold) == 0x000000, "Member 'FCameraOrientationSyncConfig::StopYawSyncInputAngularThreshold' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, InterruptResetInputAngularThreshold) == 0x000004, "Member 'FCameraOrientationSyncConfig::InterruptResetInputAngularThreshold' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, ResetYawSyncDelayTimeInputAngularThreshold) == 0x000008, "Member 'FCameraOrientationSyncConfig::ResetYawSyncDelayTimeInputAngularThreshold' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, OwnerIsMovingSpeedTolerance) == 0x00000C, "Member 'FCameraOrientationSyncConfig::OwnerIsMovingSpeedTolerance' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, ResetRotationAngularSpeedCurve) == 0x000010, "Member 'FCameraOrientationSyncConfig::ResetRotationAngularSpeedCurve' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, ResetRotationAngularSpeedIncreaseInterpSpeed) == 0x000018, "Member 'FCameraOrientationSyncConfig::ResetRotationAngularSpeedIncreaseInterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, bEnableYawSync) == 0x00001C, "Member 'FCameraOrientationSyncConfig::bEnableYawSync' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, bDoYawSyncWhenNotMoving) == 0x00001D, "Member 'FCameraOrientationSyncConfig::bDoYawSyncWhenNotMoving' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, bStopYawSyncInAir) == 0x00001E, "Member 'FCameraOrientationSyncConfig::bStopYawSyncInAir' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, StopYawSyncInAirDelaySeconds) == 0x000020, "Member 'FCameraOrientationSyncConfig::StopYawSyncInAirDelaySeconds' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, YawSyncMode) == 0x000024, "Member 'FCameraOrientationSyncConfig::YawSyncMode' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, EnableCameraRotationSyncMinAngle) == 0x000028, "Member 'FCameraOrientationSyncConfig::EnableCameraRotationSyncMinAngle' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, EnableCameraRotationSyncMaxAngle) == 0x00002C, "Member 'FCameraOrientationSyncConfig::EnableCameraRotationSyncMaxAngle' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, EnableForwardRotationSyncMaxAngle) == 0x000030, "Member 'FCameraOrientationSyncConfig::EnableForwardRotationSyncMaxAngle' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, bLockFollowCameraWhenNoCameraInput) == 0x000034, "Member 'FCameraOrientationSyncConfig::bLockFollowCameraWhenNoCameraInput' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, StartLockFollowCameraTolerance) == 0x000038, "Member 'FCameraOrientationSyncConfig::StartLockFollowCameraTolerance' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, StartRotationSyncAngle) == 0x00003C, "Member 'FCameraOrientationSyncConfig::StartRotationSyncAngle' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, RotationYawSyncAngularSpeedCurve) == 0x000040, "Member 'FCameraOrientationSyncConfig::RotationYawSyncAngularSpeedCurve' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, RotationYawSyncAngularSpeedScaleCurve) == 0x000048, "Member 'FCameraOrientationSyncConfig::RotationYawSyncAngularSpeedScaleCurve' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, YawSyncAngularSpeedIncreaseInterpSpeed) == 0x000050, "Member 'FCameraOrientationSyncConfig::YawSyncAngularSpeedIncreaseInterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, StartRotationYawSyncDelay) == 0x000054, "Member 'FCameraOrientationSyncConfig::StartRotationYawSyncDelay' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, RotationSyncEaseTime) == 0x000058, "Member 'FCameraOrientationSyncConfig::RotationSyncEaseTime' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, RotationSyncEaseType) == 0x00005C, "Member 'FCameraOrientationSyncConfig::RotationSyncEaseType' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, bCombatYawSync) == 0x00005D, "Member 'FCameraOrientationSyncConfig::bCombatYawSync' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, DelayForFirstEngage) == 0x000060, "Member 'FCameraOrientationSyncConfig::DelayForFirstEngage' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, MaxHorizontalDistance) == 0x000064, "Member 'FCameraOrientationSyncConfig::MaxHorizontalDistance' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, MaxVerticalDistance) == 0x000068, "Member 'FCameraOrientationSyncConfig::MaxVerticalDistance' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, StopRotationSyncMaxAngle) == 0x00006C, "Member 'FCameraOrientationSyncConfig::StopRotationSyncMaxAngle' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, TotalCharacterRotationWeight) == 0x000070, "Member 'FCameraOrientationSyncConfig::TotalCharacterRotationWeight' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, DecreaseForCharacterRotation) == 0x000074, "Member 'FCameraOrientationSyncConfig::DecreaseForCharacterRotation' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, TotalCharacterDistanceWeight) == 0x000078, "Member 'FCameraOrientationSyncConfig::TotalCharacterDistanceWeight' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, DecreaseForCharacterDistance) == 0x00007C, "Member 'FCameraOrientationSyncConfig::DecreaseForCharacterDistance' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, TotalCameraRotationWeight) == 0x000080, "Member 'FCameraOrientationSyncConfig::TotalCameraRotationWeight' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, DecreaseForCameraRotation) == 0x000084, "Member 'FCameraOrientationSyncConfig::DecreaseForCameraRotation' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, SwitchThresholdRate) == 0x000088, "Member 'FCameraOrientationSyncConfig::SwitchThresholdRate' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, MinimumWeightToEnableSync) == 0x00008C, "Member 'FCameraOrientationSyncConfig::MinimumWeightToEnableSync' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, bEnablePitchSync) == 0x000090, "Member 'FCameraOrientationSyncConfig::bEnablePitchSync' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, StartRotationPitchSyncDelay) == 0x000094, "Member 'FCameraOrientationSyncConfig::StartRotationPitchSyncDelay' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, PitchSyncSpringSmoothTime) == 0x000098, "Member 'FCameraOrientationSyncConfig::PitchSyncSpringSmoothTime' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, PitchSyncSpringDamp) == 0x00009C, "Member 'FCameraOrientationSyncConfig::PitchSyncSpringDamp' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, RotationPitchSyncMapCurve) == 0x0000A0, "Member 'FCameraOrientationSyncConfig::RotationPitchSyncMapCurve' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, PitchCheckChangeLength) == 0x0000A8, "Member 'FCameraOrientationSyncConfig::PitchCheckChangeLength' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, PitchCheckYawRange) == 0x0000AC, "Member 'FCameraOrientationSyncConfig::PitchCheckYawRange' has a wrong offset!");
static_assert(offsetof(FCameraOrientationSyncConfig, AirLandPitch) == 0x0000B0, "Member 'FCameraOrientationSyncConfig::AirLandPitch' has a wrong offset!");

// ScriptStruct X6Camera.X6CameraInputConfig
// 0x00D0 (0x00D0 - 0x0000)
struct FX6CameraInputConfig final
{
public:
	uint8                                         bOverride_bAcceptInput : 1;                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bAcceptInput;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_InputXRotateSpeedFactor : 1;             // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputXRotateSpeedFactor;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_InputYRotateSpeedFactor : 1;             // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputYRotateSpeedFactor;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_CameraOrientationSyncConfig : 1;         // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraOrientationSyncConfig           CameraOrientationSyncConfig;                       // 0x0018(0x00B8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6CameraInputConfig) == 0x000008, "Wrong alignment on FX6CameraInputConfig");
static_assert(sizeof(FX6CameraInputConfig) == 0x0000D0, "Wrong size on FX6CameraInputConfig");
static_assert(offsetof(FX6CameraInputConfig, bAcceptInput) == 0x000001, "Member 'FX6CameraInputConfig::bAcceptInput' has a wrong offset!");
static_assert(offsetof(FX6CameraInputConfig, InputXRotateSpeedFactor) == 0x000004, "Member 'FX6CameraInputConfig::InputXRotateSpeedFactor' has a wrong offset!");
static_assert(offsetof(FX6CameraInputConfig, InputYRotateSpeedFactor) == 0x00000C, "Member 'FX6CameraInputConfig::InputYRotateSpeedFactor' has a wrong offset!");
static_assert(offsetof(FX6CameraInputConfig, CameraOrientationSyncConfig) == 0x000018, "Member 'FX6CameraInputConfig::CameraOrientationSyncConfig' has a wrong offset!");

// ScriptStruct X6Camera.CameraTaskEventData
// 0x0090 (0x0090 - 0x0000)
struct FCameraTaskEventData final
{
public:
	class FName                                   CameraTaskTag;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraTransfrom;                                   // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OldViewTarget;                                     // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraTaskEventData) == 0x000010, "Wrong alignment on FCameraTaskEventData");
static_assert(sizeof(FCameraTaskEventData) == 0x000090, "Wrong size on FCameraTaskEventData");
static_assert(offsetof(FCameraTaskEventData, CameraTaskTag) == 0x000000, "Member 'FCameraTaskEventData::CameraTaskTag' has a wrong offset!");
static_assert(offsetof(FCameraTaskEventData, CameraTransfrom) == 0x000010, "Member 'FCameraTaskEventData::CameraTransfrom' has a wrong offset!");
static_assert(offsetof(FCameraTaskEventData, TotalTime) == 0x000070, "Member 'FCameraTaskEventData::TotalTime' has a wrong offset!");
static_assert(offsetof(FCameraTaskEventData, OldViewTarget) == 0x000078, "Member 'FCameraTaskEventData::OldViewTarget' has a wrong offset!");
static_assert(offsetof(FCameraTaskEventData, NewViewTarget) == 0x000080, "Member 'FCameraTaskEventData::NewViewTarget' has a wrong offset!");

// ScriptStruct X6Camera.BasedMovementFixCameraHelper
// 0x0070 (0x0070 - 0x0000)
struct FBasedMovementFixCameraHelper final
{
public:
	struct FVector                                LastLocation;                                      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExpectLocation;                                    // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  DeltaQuat;                                         // 0x0030(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeltaLocation;                                     // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationChanged;                                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocationChanged;                                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaYaw;                                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBasedMovementFixCameraHelper) == 0x000010, "Wrong alignment on FBasedMovementFixCameraHelper");
static_assert(sizeof(FBasedMovementFixCameraHelper) == 0x000070, "Wrong size on FBasedMovementFixCameraHelper");
static_assert(offsetof(FBasedMovementFixCameraHelper, LastLocation) == 0x000000, "Member 'FBasedMovementFixCameraHelper::LastLocation' has a wrong offset!");
static_assert(offsetof(FBasedMovementFixCameraHelper, ExpectLocation) == 0x000018, "Member 'FBasedMovementFixCameraHelper::ExpectLocation' has a wrong offset!");
static_assert(offsetof(FBasedMovementFixCameraHelper, DeltaQuat) == 0x000030, "Member 'FBasedMovementFixCameraHelper::DeltaQuat' has a wrong offset!");
static_assert(offsetof(FBasedMovementFixCameraHelper, DeltaLocation) == 0x000050, "Member 'FBasedMovementFixCameraHelper::DeltaLocation' has a wrong offset!");
static_assert(offsetof(FBasedMovementFixCameraHelper, bRotationChanged) == 0x000068, "Member 'FBasedMovementFixCameraHelper::bRotationChanged' has a wrong offset!");
static_assert(offsetof(FBasedMovementFixCameraHelper, bLocationChanged) == 0x000069, "Member 'FBasedMovementFixCameraHelper::bLocationChanged' has a wrong offset!");
static_assert(offsetof(FBasedMovementFixCameraHelper, DeltaYaw) == 0x00006C, "Member 'FBasedMovementFixCameraHelper::DeltaYaw' has a wrong offset!");

// ScriptStruct X6Camera.VectorSpringStateInfo
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FVectorSpringStateInfo final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVectorSpringStateInfo) == 0x000004, "Wrong alignment on FVectorSpringStateInfo");
static_assert(sizeof(FVectorSpringStateInfo) == 0x00001C, "Wrong size on FVectorSpringStateInfo");

// ScriptStruct X6Camera.ViewTargetCurveTransitionParams
// 0x0020 (0x0020 - 0x0000)
struct FViewTargetCurveTransitionParams final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunction;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLockOutgoing : 1;                                 // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCustomRotateBlend;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateToVelocityDirection;                        // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationBlendToVelocityDirectionInOutTime;         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      RotationBlendFunction;                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationBlendExp;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FViewTargetCurveTransitionParams) == 0x000004, "Wrong alignment on FViewTargetCurveTransitionParams");
static_assert(sizeof(FViewTargetCurveTransitionParams) == 0x000020, "Wrong size on FViewTargetCurveTransitionParams");
static_assert(offsetof(FViewTargetCurveTransitionParams, BlendTime) == 0x000000, "Member 'FViewTargetCurveTransitionParams::BlendTime' has a wrong offset!");
static_assert(offsetof(FViewTargetCurveTransitionParams, BlendFunction) == 0x000004, "Member 'FViewTargetCurveTransitionParams::BlendFunction' has a wrong offset!");
static_assert(offsetof(FViewTargetCurveTransitionParams, BlendExp) == 0x000008, "Member 'FViewTargetCurveTransitionParams::BlendExp' has a wrong offset!");
static_assert(offsetof(FViewTargetCurveTransitionParams, bCustomRotateBlend) == 0x000010, "Member 'FViewTargetCurveTransitionParams::bCustomRotateBlend' has a wrong offset!");
static_assert(offsetof(FViewTargetCurveTransitionParams, bRotateToVelocityDirection) == 0x000011, "Member 'FViewTargetCurveTransitionParams::bRotateToVelocityDirection' has a wrong offset!");
static_assert(offsetof(FViewTargetCurveTransitionParams, RotationBlendToVelocityDirectionInOutTime) == 0x000014, "Member 'FViewTargetCurveTransitionParams::RotationBlendToVelocityDirectionInOutTime' has a wrong offset!");
static_assert(offsetof(FViewTargetCurveTransitionParams, RotationBlendFunction) == 0x000018, "Member 'FViewTargetCurveTransitionParams::RotationBlendFunction' has a wrong offset!");
static_assert(offsetof(FViewTargetCurveTransitionParams, RotationBlendExp) == 0x00001C, "Member 'FViewTargetCurveTransitionParams::RotationBlendExp' has a wrong offset!");

// ScriptStruct X6Camera.TransCameraViewData
// 0x0990 (0x0990 - 0x0000)
struct FTransCameraViewData final
{
public:
	struct FMinimalViewInfo                       NewCameraView;                                     // 0x0000(0x0970)(NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0970(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransCameraViewData) == 0x000010, "Wrong alignment on FTransCameraViewData");
static_assert(sizeof(FTransCameraViewData) == 0x000990, "Wrong size on FTransCameraViewData");
static_assert(offsetof(FTransCameraViewData, NewCameraView) == 0x000000, "Member 'FTransCameraViewData::NewCameraView' has a wrong offset!");
static_assert(offsetof(FTransCameraViewData, TransitionParams) == 0x000970, "Member 'FTransCameraViewData::TransitionParams' has a wrong offset!");

// ScriptStruct X6Camera.CameraStateViewTagetData
// 0x0020 (0x0020 - 0x0000)
struct FCameraStateViewTagetData final
{
public:
	ECameraState                                  CameraState;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ViewTargetActor;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bRemoveWhenNotOnTop;                               // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraStateViewTagetData) == 0x000008, "Wrong alignment on FCameraStateViewTagetData");
static_assert(sizeof(FCameraStateViewTagetData) == 0x000020, "Wrong size on FCameraStateViewTagetData");
static_assert(offsetof(FCameraStateViewTagetData, CameraState) == 0x000000, "Member 'FCameraStateViewTagetData::CameraState' has a wrong offset!");
static_assert(offsetof(FCameraStateViewTagetData, ViewTargetActor) == 0x000008, "Member 'FCameraStateViewTagetData::ViewTargetActor' has a wrong offset!");
static_assert(offsetof(FCameraStateViewTagetData, Priority) == 0x000010, "Member 'FCameraStateViewTagetData::Priority' has a wrong offset!");
static_assert(offsetof(FCameraStateViewTagetData, bRemoveWhenNotOnTop) == 0x000018, "Member 'FCameraStateViewTagetData::bRemoveWhenNotOnTop' has a wrong offset!");

// ScriptStruct X6Camera.CameraInputOptimizationConfig
// 0x0028 (0x0028 - 0x0000)
struct FCameraInputOptimizationConfig final
{
public:
	uint8                                         CacheCameraInputFrameNum;                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Input2UnValidToleranceTime;                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 RatioArray;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FirstFrameAllowMaxSpeed;                           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllowMaxSpeed;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SpeedMapScaleCurve;                                // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraInputOptimizationConfig) == 0x000008, "Wrong alignment on FCameraInputOptimizationConfig");
static_assert(sizeof(FCameraInputOptimizationConfig) == 0x000028, "Wrong size on FCameraInputOptimizationConfig");
static_assert(offsetof(FCameraInputOptimizationConfig, CacheCameraInputFrameNum) == 0x000000, "Member 'FCameraInputOptimizationConfig::CacheCameraInputFrameNum' has a wrong offset!");
static_assert(offsetof(FCameraInputOptimizationConfig, Input2UnValidToleranceTime) == 0x000004, "Member 'FCameraInputOptimizationConfig::Input2UnValidToleranceTime' has a wrong offset!");
static_assert(offsetof(FCameraInputOptimizationConfig, RatioArray) == 0x000008, "Member 'FCameraInputOptimizationConfig::RatioArray' has a wrong offset!");
static_assert(offsetof(FCameraInputOptimizationConfig, FirstFrameAllowMaxSpeed) == 0x000018, "Member 'FCameraInputOptimizationConfig::FirstFrameAllowMaxSpeed' has a wrong offset!");
static_assert(offsetof(FCameraInputOptimizationConfig, AllowMaxSpeed) == 0x00001C, "Member 'FCameraInputOptimizationConfig::AllowMaxSpeed' has a wrong offset!");
static_assert(offsetof(FCameraInputOptimizationConfig, SpeedMapScaleCurve) == 0x000020, "Member 'FCameraInputOptimizationConfig::SpeedMapScaleCurve' has a wrong offset!");

// ScriptStruct X6Camera.X6CameraBlendableSettings
// 0x0118 (0x0118 - 0x0000)
struct FX6CameraBlendableSettings
{
public:
	uint8                                         bOverride_FOV : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOV;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_BirthRotation : 1;                       // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               BirthRotation;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bOverride_OriginRotation : 1;                      // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OriginRotation;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bOverride_MaxPitchAngle : 1;                       // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxPitchAngle;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_MinPitchAngle : 1;                       // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinPitchAngle;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_MaxYawAngle : 1;                         // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxYawAngle;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_MinYawAngle : 1;                         // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinYawAngle;                                       // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_BaseArmLength : 1;                       // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseArmLength;                                     // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_bEnableInfluencedByPitch : 1;            // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bEnableInfluencedByPitch;                          // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ArmlengthCurveByPitch : 1;               // 0x0072(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ArmlengthCurveByPitch;                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x4];                                       // 0x0080(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverride_MaxArmLength : 1;                        // 0x0084(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxArmLength;                                      // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_MinArmLength : 1;                        // 0x008C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinArmLength;                                      // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_bEnableInfluenceOffsetByPitch : 1;       // 0x0094(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bEnableInfluenceOffsetByPitch;                     // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_OffsetCurveByPitch : 1;                  // 0x0096(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_97[0x1];                                       // 0x0097(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           OffsetCurveByPitch;                                // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bOverride_SocketOffset : 1;                        // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SocketOffset;                                      // 0x00C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_SocketRotationOffset : 1;                // 0x00D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               SocketRotationOffset;                              // 0x00E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bOverride_TargetOffset : 1;                        // 0x00F8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetOffset;                                      // 0x0100(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6CameraBlendableSettings) == 0x000008, "Wrong alignment on FX6CameraBlendableSettings");
static_assert(sizeof(FX6CameraBlendableSettings) == 0x000118, "Wrong size on FX6CameraBlendableSettings");
static_assert(offsetof(FX6CameraBlendableSettings, FOV) == 0x000004, "Member 'FX6CameraBlendableSettings::FOV' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, BirthRotation) == 0x000010, "Member 'FX6CameraBlendableSettings::BirthRotation' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, OriginRotation) == 0x000030, "Member 'FX6CameraBlendableSettings::OriginRotation' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, MaxPitchAngle) == 0x00004C, "Member 'FX6CameraBlendableSettings::MaxPitchAngle' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, MinPitchAngle) == 0x000054, "Member 'FX6CameraBlendableSettings::MinPitchAngle' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, MaxYawAngle) == 0x00005C, "Member 'FX6CameraBlendableSettings::MaxYawAngle' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, MinYawAngle) == 0x000064, "Member 'FX6CameraBlendableSettings::MinYawAngle' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, BaseArmLength) == 0x00006C, "Member 'FX6CameraBlendableSettings::BaseArmLength' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, bEnableInfluencedByPitch) == 0x000071, "Member 'FX6CameraBlendableSettings::bEnableInfluencedByPitch' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, ArmlengthCurveByPitch) == 0x000078, "Member 'FX6CameraBlendableSettings::ArmlengthCurveByPitch' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, MaxArmLength) == 0x000088, "Member 'FX6CameraBlendableSettings::MaxArmLength' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, MinArmLength) == 0x000090, "Member 'FX6CameraBlendableSettings::MinArmLength' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, bEnableInfluenceOffsetByPitch) == 0x000095, "Member 'FX6CameraBlendableSettings::bEnableInfluenceOffsetByPitch' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, OffsetCurveByPitch) == 0x000098, "Member 'FX6CameraBlendableSettings::OffsetCurveByPitch' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, SocketOffset) == 0x0000C0, "Member 'FX6CameraBlendableSettings::SocketOffset' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, SocketRotationOffset) == 0x0000E0, "Member 'FX6CameraBlendableSettings::SocketRotationOffset' has a wrong offset!");
static_assert(offsetof(FX6CameraBlendableSettings, TargetOffset) == 0x000100, "Member 'FX6CameraBlendableSettings::TargetOffset' has a wrong offset!");

// ScriptStruct X6Camera.CameraBaseParamsDefine
// 0x0048 (0x0160 - 0x0118)
struct FCameraBaseParamsDefine final : public FX6CameraBlendableSettings
{
public:
	uint8                                         bOverride_bDoCollisionTest : 1;                    // 0x0118(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bDoCollisionTest;                                  // 0x0119(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ProbeSize : 1;                           // 0x011A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11B[0x1];                                      // 0x011B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProbeSize;                                         // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_CameraCollisionProcessClass : 1;         // 0x0120(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraCollisionProcess>    CameraCollisionProcessClass;                       // 0x0128(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_bDoLocationLag : 1;                      // 0x0130(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bDoLocationLag;                                    // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_bDoRotationLag : 1;                      // 0x0132(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bDoRotationLag;                                    // 0x0133(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_bDoTargetArmlengthLag : 1;               // 0x0134(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bDoTargetArmlengthLag;                             // 0x0135(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_CameraLagProcessClass : 1;               // 0x0136(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_137[0x1];                                      // 0x0137(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraLagProcess>          CameraLagProcessClass;                             // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_LocationBlendSpeed : 1;                  // 0x0140(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocationBlendSpeed;                                // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_FOVBlendSpeed : 1;                       // 0x0148(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOVBlendSpeed;                                     // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_MaxBlendTime : 1;                        // 0x0150(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBlendTime;                                      // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_MaxBlendSpeed : 1;                       // 0x0158(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBlendSpeed;                                     // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraBaseParamsDefine) == 0x000008, "Wrong alignment on FCameraBaseParamsDefine");
static_assert(sizeof(FCameraBaseParamsDefine) == 0x000160, "Wrong size on FCameraBaseParamsDefine");
static_assert(offsetof(FCameraBaseParamsDefine, bDoCollisionTest) == 0x000119, "Member 'FCameraBaseParamsDefine::bDoCollisionTest' has a wrong offset!");
static_assert(offsetof(FCameraBaseParamsDefine, ProbeSize) == 0x00011C, "Member 'FCameraBaseParamsDefine::ProbeSize' has a wrong offset!");
static_assert(offsetof(FCameraBaseParamsDefine, CameraCollisionProcessClass) == 0x000128, "Member 'FCameraBaseParamsDefine::CameraCollisionProcessClass' has a wrong offset!");
static_assert(offsetof(FCameraBaseParamsDefine, bDoLocationLag) == 0x000131, "Member 'FCameraBaseParamsDefine::bDoLocationLag' has a wrong offset!");
static_assert(offsetof(FCameraBaseParamsDefine, bDoRotationLag) == 0x000133, "Member 'FCameraBaseParamsDefine::bDoRotationLag' has a wrong offset!");
static_assert(offsetof(FCameraBaseParamsDefine, bDoTargetArmlengthLag) == 0x000135, "Member 'FCameraBaseParamsDefine::bDoTargetArmlengthLag' has a wrong offset!");
static_assert(offsetof(FCameraBaseParamsDefine, CameraLagProcessClass) == 0x000138, "Member 'FCameraBaseParamsDefine::CameraLagProcessClass' has a wrong offset!");
static_assert(offsetof(FCameraBaseParamsDefine, LocationBlendSpeed) == 0x000144, "Member 'FCameraBaseParamsDefine::LocationBlendSpeed' has a wrong offset!");
static_assert(offsetof(FCameraBaseParamsDefine, FOVBlendSpeed) == 0x00014C, "Member 'FCameraBaseParamsDefine::FOVBlendSpeed' has a wrong offset!");
static_assert(offsetof(FCameraBaseParamsDefine, MaxBlendTime) == 0x000154, "Member 'FCameraBaseParamsDefine::MaxBlendTime' has a wrong offset!");
static_assert(offsetof(FCameraBaseParamsDefine, MaxBlendSpeed) == 0x00015C, "Member 'FCameraBaseParamsDefine::MaxBlendSpeed' has a wrong offset!");

// ScriptStruct X6Camera.X6CameraConfigPriority
// 0x0030 (0x0030 - 0x0000)
struct FX6CameraConfigPriority final
{
public:
	struct FGameplayTag                           CameraTypeTag;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RejectTagContainer;                                // 0x0008(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bRejectTagContainerExactMatch;                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FX6CameraConfigPriority) == 0x000008, "Wrong alignment on FX6CameraConfigPriority");
static_assert(sizeof(FX6CameraConfigPriority) == 0x000030, "Wrong size on FX6CameraConfigPriority");
static_assert(offsetof(FX6CameraConfigPriority, CameraTypeTag) == 0x000000, "Member 'FX6CameraConfigPriority::CameraTypeTag' has a wrong offset!");
static_assert(offsetof(FX6CameraConfigPriority, RejectTagContainer) == 0x000008, "Member 'FX6CameraConfigPriority::RejectTagContainer' has a wrong offset!");
static_assert(offsetof(FX6CameraConfigPriority, bRejectTagContainerExactMatch) == 0x000028, "Member 'FX6CameraConfigPriority::bRejectTagContainerExactMatch' has a wrong offset!");

// ScriptStruct X6Camera.X6CameraConfig
// 0x00D0 (0x00D0 - 0x0000)
struct FX6CameraConfig final
{
public:
	TMap<EX6CameraInputDeviceType, struct FX6CameraInputConfig> InputConfigMap;                      // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EX6CameraPlatformType, struct FCameraBaseParamsDefine> BaseParamsMap;                       // 0x0050(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FX6CameraConfigPriority                ConfigPriority;                                    // 0x00A0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6CameraConfig) == 0x000008, "Wrong alignment on FX6CameraConfig");
static_assert(sizeof(FX6CameraConfig) == 0x0000D0, "Wrong size on FX6CameraConfig");
static_assert(offsetof(FX6CameraConfig, InputConfigMap) == 0x000000, "Member 'FX6CameraConfig::InputConfigMap' has a wrong offset!");
static_assert(offsetof(FX6CameraConfig, BaseParamsMap) == 0x000050, "Member 'FX6CameraConfig::BaseParamsMap' has a wrong offset!");
static_assert(offsetof(FX6CameraConfig, ConfigPriority) == 0x0000A0, "Member 'FX6CameraConfig::ConfigPriority' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifierListData
// 0x0030 (0x0038 - 0x0008)
struct FCameraModifierListData final : public FTableRowBase
{
public:
	ECameraLayer                                  CameraLayer;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6CameraDataPriority                         Priority;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCameraModifiersDetailData> ModifierAssetToLoad;                            // 0x0010(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifierListData) == 0x000008, "Wrong alignment on FCameraModifierListData");
static_assert(sizeof(FCameraModifierListData) == 0x000038, "Wrong size on FCameraModifierListData");
static_assert(offsetof(FCameraModifierListData, CameraLayer) == 0x000008, "Member 'FCameraModifierListData::CameraLayer' has a wrong offset!");
static_assert(offsetof(FCameraModifierListData, Priority) == 0x000009, "Member 'FCameraModifierListData::Priority' has a wrong offset!");
static_assert(offsetof(FCameraModifierListData, ModifierAssetToLoad) == 0x000010, "Member 'FCameraModifierListData::ModifierAssetToLoad' has a wrong offset!");

// ScriptStruct X6Camera.CameraCollisionProcessData
// 0x0008 (0x0010 - 0x0008)
struct FCameraCollisionProcessData final : public FTableRowBase
{
public:
	bool                                          ThreeTracesToJump;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CollisionToJump;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TraceForHide;                                      // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraCollisionProcessData) == 0x000008, "Wrong alignment on FCameraCollisionProcessData");
static_assert(sizeof(FCameraCollisionProcessData) == 0x000010, "Wrong size on FCameraCollisionProcessData");
static_assert(offsetof(FCameraCollisionProcessData, ThreeTracesToJump) == 0x000008, "Member 'FCameraCollisionProcessData::ThreeTracesToJump' has a wrong offset!");
static_assert(offsetof(FCameraCollisionProcessData, CollisionToJump) == 0x000009, "Member 'FCameraCollisionProcessData::CollisionToJump' has a wrong offset!");
static_assert(offsetof(FCameraCollisionProcessData, TraceForHide) == 0x00000A, "Member 'FCameraCollisionProcessData::TraceForHide' has a wrong offset!");

// ScriptStruct X6Camera.CameraTransitionConfig
// 0x0028 (0x0028 - 0x0000)
struct FCameraTransitionConfig final
{
public:
	ECameraTransitionPermission                   Permission;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0008(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraTransitionConfig) == 0x000008, "Wrong alignment on FCameraTransitionConfig");
static_assert(sizeof(FCameraTransitionConfig) == 0x000028, "Wrong size on FCameraTransitionConfig");
static_assert(offsetof(FCameraTransitionConfig, Permission) == 0x000000, "Member 'FCameraTransitionConfig::Permission' has a wrong offset!");
static_assert(offsetof(FCameraTransitionConfig, TransitionParams) == 0x000008, "Member 'FCameraTransitionConfig::TransitionParams' has a wrong offset!");

// ScriptStruct X6Camera.CameraTransitionConfigData
// 0x0050 (0x0058 - 0x0008)
struct FCameraTransitionConfigData final : public FTableRowBase
{
public:
	TMap<ECameraState, struct FCameraTransitionConfig> TransitionMap;                                // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraTransitionConfigData) == 0x000008, "Wrong alignment on FCameraTransitionConfigData");
static_assert(sizeof(FCameraTransitionConfigData) == 0x000058, "Wrong size on FCameraTransitionConfigData");
static_assert(offsetof(FCameraTransitionConfigData, TransitionMap) == 0x000008, "Member 'FCameraTransitionConfigData::TransitionMap' has a wrong offset!");

// ScriptStruct X6Camera.CameraStatePriority
// 0x0008 (0x0010 - 0x0008)
struct FCameraStatePriority final : public FTableRowBase
{
public:
	ECameraState                                  CameraState;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CameraStatePriority;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraStatePriority) == 0x000008, "Wrong alignment on FCameraStatePriority");
static_assert(sizeof(FCameraStatePriority) == 0x000010, "Wrong size on FCameraStatePriority");
static_assert(offsetof(FCameraStatePriority, CameraState) == 0x000008, "Member 'FCameraStatePriority::CameraState' has a wrong offset!");
static_assert(offsetof(FCameraStatePriority, CameraStatePriority) == 0x00000C, "Member 'FCameraStatePriority::CameraStatePriority' has a wrong offset!");

// ScriptStruct X6Camera.DlgCineCameraConfig
// 0x0010 (0x0018 - 0x0008)
struct FDlgCineCameraConfig final : public FTableRowBase
{
public:
	float                                         FastForwardTime;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoPlayDelay;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CameraLookAtBone;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDlgCineCameraConfig) == 0x000008, "Wrong alignment on FDlgCineCameraConfig");
static_assert(sizeof(FDlgCineCameraConfig) == 0x000018, "Wrong size on FDlgCineCameraConfig");
static_assert(offsetof(FDlgCineCameraConfig, FastForwardTime) == 0x000008, "Member 'FDlgCineCameraConfig::FastForwardTime' has a wrong offset!");
static_assert(offsetof(FDlgCineCameraConfig, AutoPlayDelay) == 0x00000C, "Member 'FDlgCineCameraConfig::AutoPlayDelay' has a wrong offset!");
static_assert(offsetof(FDlgCineCameraConfig, CameraLookAtBone) == 0x000010, "Member 'FDlgCineCameraConfig::CameraLookAtBone' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifier_OffsetData
// 0x0018 (0x0018 - 0x0000)
struct FCameraModifier_OffsetData final
{
public:
	ECameraValueModifyType                        CameraValueModifyType;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValueScale;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifier_OffsetData) == 0x000008, "Wrong alignment on FCameraModifier_OffsetData");
static_assert(sizeof(FCameraModifier_OffsetData) == 0x000018, "Wrong size on FCameraModifier_OffsetData");
static_assert(offsetof(FCameraModifier_OffsetData, CameraValueModifyType) == 0x000000, "Member 'FCameraModifier_OffsetData::CameraValueModifyType' has a wrong offset!");
static_assert(offsetof(FCameraModifier_OffsetData, ValueScale) == 0x000004, "Member 'FCameraModifier_OffsetData::ValueScale' has a wrong offset!");
static_assert(offsetof(FCameraModifier_OffsetData, TimeScale) == 0x000008, "Member 'FCameraModifier_OffsetData::TimeScale' has a wrong offset!");
static_assert(offsetof(FCameraModifier_OffsetData, Curve) == 0x000010, "Member 'FCameraModifier_OffsetData::Curve' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifier_ArmlengthData
// 0x0018 (0x0018 - 0x0000)
struct FCameraModifier_ArmlengthData final
{
public:
	ECameraValueModifyType                        CameraValueModifyType;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValueScale;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifier_ArmlengthData) == 0x000008, "Wrong alignment on FCameraModifier_ArmlengthData");
static_assert(sizeof(FCameraModifier_ArmlengthData) == 0x000018, "Wrong size on FCameraModifier_ArmlengthData");
static_assert(offsetof(FCameraModifier_ArmlengthData, CameraValueModifyType) == 0x000000, "Member 'FCameraModifier_ArmlengthData::CameraValueModifyType' has a wrong offset!");
static_assert(offsetof(FCameraModifier_ArmlengthData, ValueScale) == 0x000004, "Member 'FCameraModifier_ArmlengthData::ValueScale' has a wrong offset!");
static_assert(offsetof(FCameraModifier_ArmlengthData, TimeScale) == 0x000008, "Member 'FCameraModifier_ArmlengthData::TimeScale' has a wrong offset!");
static_assert(offsetof(FCameraModifier_ArmlengthData, Curve) == 0x000010, "Member 'FCameraModifier_ArmlengthData::Curve' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifier_FovData
// 0x0018 (0x0018 - 0x0000)
struct FCameraModifier_FovData final
{
public:
	ECameraValueModifyType                        CameraValueModifyType;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValueScale;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifier_FovData) == 0x000008, "Wrong alignment on FCameraModifier_FovData");
static_assert(sizeof(FCameraModifier_FovData) == 0x000018, "Wrong size on FCameraModifier_FovData");
static_assert(offsetof(FCameraModifier_FovData, CameraValueModifyType) == 0x000000, "Member 'FCameraModifier_FovData::CameraValueModifyType' has a wrong offset!");
static_assert(offsetof(FCameraModifier_FovData, ValueScale) == 0x000004, "Member 'FCameraModifier_FovData::ValueScale' has a wrong offset!");
static_assert(offsetof(FCameraModifier_FovData, TimeScale) == 0x000008, "Member 'FCameraModifier_FovData::TimeScale' has a wrong offset!");
static_assert(offsetof(FCameraModifier_FovData, Curve) == 0x000010, "Member 'FCameraModifier_FovData::Curve' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifier_CameraShakeData
// 0x0008 (0x0008 - 0x0000)
struct FCameraModifier_CameraShakeData final
{
public:
	TSubclassOf<class UCameraShakeBase>           Source;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifier_CameraShakeData) == 0x000008, "Wrong alignment on FCameraModifier_CameraShakeData");
static_assert(sizeof(FCameraModifier_CameraShakeData) == 0x000008, "Wrong size on FCameraModifier_CameraShakeData");
static_assert(offsetof(FCameraModifier_CameraShakeData, Source) == 0x000000, "Member 'FCameraModifier_CameraShakeData::Source' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifier_VFX
// 0x0010 (0x0010 - 0x0000)
struct FCameraModifier_VFX final
{
public:
	class FName                                   VFXType;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifier_VFX) == 0x000008, "Wrong alignment on FCameraModifier_VFX");
static_assert(sizeof(FCameraModifier_VFX) == 0x000010, "Wrong size on FCameraModifier_VFX");
static_assert(offsetof(FCameraModifier_VFX, VFXType) == 0x000000, "Member 'FCameraModifier_VFX::VFXType' has a wrong offset!");
static_assert(offsetof(FCameraModifier_VFX, Curve) == 0x000008, "Member 'FCameraModifier_VFX::Curve' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifier_PostProcess
// 0x0020 (0x0020 - 0x0000)
struct FCameraModifier_PostProcess final
{
public:
	ECameraValueModifyType                        CameraValueModifyType;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValueScale;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraModifier>            CameraModifierSource;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifier_PostProcess) == 0x000008, "Wrong alignment on FCameraModifier_PostProcess");
static_assert(sizeof(FCameraModifier_PostProcess) == 0x000020, "Wrong size on FCameraModifier_PostProcess");
static_assert(offsetof(FCameraModifier_PostProcess, CameraValueModifyType) == 0x000000, "Member 'FCameraModifier_PostProcess::CameraValueModifyType' has a wrong offset!");
static_assert(offsetof(FCameraModifier_PostProcess, ValueScale) == 0x000004, "Member 'FCameraModifier_PostProcess::ValueScale' has a wrong offset!");
static_assert(offsetof(FCameraModifier_PostProcess, TimeScale) == 0x000008, "Member 'FCameraModifier_PostProcess::TimeScale' has a wrong offset!");
static_assert(offsetof(FCameraModifier_PostProcess, Curve) == 0x000010, "Member 'FCameraModifier_PostProcess::Curve' has a wrong offset!");
static_assert(offsetof(FCameraModifier_PostProcess, CameraModifierSource) == 0x000018, "Member 'FCameraModifier_PostProcess::CameraModifierSource' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifier_InterpLookAtLocData
// 0x0018 (0x0018 - 0x0000)
struct FCameraModifier_InterpLookAtLocData final
{
public:
	ECameraValueModifyType                        CameraValueModifyType;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistanceToInterpTargetScale;                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueScale;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifier_InterpLookAtLocData) == 0x000008, "Wrong alignment on FCameraModifier_InterpLookAtLocData");
static_assert(sizeof(FCameraModifier_InterpLookAtLocData) == 0x000018, "Wrong size on FCameraModifier_InterpLookAtLocData");
static_assert(offsetof(FCameraModifier_InterpLookAtLocData, CameraValueModifyType) == 0x000000, "Member 'FCameraModifier_InterpLookAtLocData::CameraValueModifyType' has a wrong offset!");
static_assert(offsetof(FCameraModifier_InterpLookAtLocData, MaxDistanceToInterpTargetScale) == 0x000004, "Member 'FCameraModifier_InterpLookAtLocData::MaxDistanceToInterpTargetScale' has a wrong offset!");
static_assert(offsetof(FCameraModifier_InterpLookAtLocData, ValueScale) == 0x000008, "Member 'FCameraModifier_InterpLookAtLocData::ValueScale' has a wrong offset!");
static_assert(offsetof(FCameraModifier_InterpLookAtLocData, TimeScale) == 0x00000C, "Member 'FCameraModifier_InterpLookAtLocData::TimeScale' has a wrong offset!");
static_assert(offsetof(FCameraModifier_InterpLookAtLocData, Curve) == 0x000010, "Member 'FCameraModifier_InterpLookAtLocData::Curve' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifierConfigData
// 0x00D0 (0x00D0 - 0x0000)
struct FCameraModifierConfigData final
{
public:
	bool                                          bUseModifyLocation;                                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifier_OffsetData             OffsetData;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseModifyArmlength;                               // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifier_ArmlengthData          ArmlengthData;                                     // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseModifyFov;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifier_FovData                FovData;                                           // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseModifyCameraShake;                             // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifier_CameraShakeData        CameraShakeData;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseModifyVFX;                                     // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCameraModifier_VFX>            VFXData;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseModifyPostProcess;                             // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifier_PostProcess            PostProcessData;                                   // 0x0090(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseModifyInterpLookAtLoc;                         // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifier_InterpLookAtLocData    InterpLookAtLocData;                               // 0x00B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifierConfigData) == 0x000008, "Wrong alignment on FCameraModifierConfigData");
static_assert(sizeof(FCameraModifierConfigData) == 0x0000D0, "Wrong size on FCameraModifierConfigData");
static_assert(offsetof(FCameraModifierConfigData, bUseModifyLocation) == 0x000000, "Member 'FCameraModifierConfigData::bUseModifyLocation' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, OffsetData) == 0x000008, "Member 'FCameraModifierConfigData::OffsetData' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, bUseModifyArmlength) == 0x000020, "Member 'FCameraModifierConfigData::bUseModifyArmlength' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, ArmlengthData) == 0x000028, "Member 'FCameraModifierConfigData::ArmlengthData' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, bUseModifyFov) == 0x000040, "Member 'FCameraModifierConfigData::bUseModifyFov' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, FovData) == 0x000048, "Member 'FCameraModifierConfigData::FovData' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, bUseModifyCameraShake) == 0x000060, "Member 'FCameraModifierConfigData::bUseModifyCameraShake' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, CameraShakeData) == 0x000068, "Member 'FCameraModifierConfigData::CameraShakeData' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, bUseModifyVFX) == 0x000070, "Member 'FCameraModifierConfigData::bUseModifyVFX' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, VFXData) == 0x000078, "Member 'FCameraModifierConfigData::VFXData' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, bUseModifyPostProcess) == 0x000088, "Member 'FCameraModifierConfigData::bUseModifyPostProcess' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, PostProcessData) == 0x000090, "Member 'FCameraModifierConfigData::PostProcessData' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, bUseModifyInterpLookAtLoc) == 0x0000B0, "Member 'FCameraModifierConfigData::bUseModifyInterpLookAtLoc' has a wrong offset!");
static_assert(offsetof(FCameraModifierConfigData, InterpLookAtLocData) == 0x0000B8, "Member 'FCameraModifierConfigData::InterpLookAtLocData' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifierEffect
// 0x00F0 (0x00F0 - 0x0000)
struct FCameraModifierEffect final
{
public:
	EX6CameraDataPriority                         Priority;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraLayer                                  CameraLayer;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifierConfigData              ModifierConfigData;                                // 0x0008(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x00D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x14];                                      // 0x00DC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraModifierEffect) == 0x000008, "Wrong alignment on FCameraModifierEffect");
static_assert(sizeof(FCameraModifierEffect) == 0x0000F0, "Wrong size on FCameraModifierEffect");
static_assert(offsetof(FCameraModifierEffect, Priority) == 0x000000, "Member 'FCameraModifierEffect::Priority' has a wrong offset!");
static_assert(offsetof(FCameraModifierEffect, CameraLayer) == 0x000001, "Member 'FCameraModifierEffect::CameraLayer' has a wrong offset!");
static_assert(offsetof(FCameraModifierEffect, ModifierConfigData) == 0x000008, "Member 'FCameraModifierEffect::ModifierConfigData' has a wrong offset!");
static_assert(offsetof(FCameraModifierEffect, LifeSpan) == 0x0000D8, "Member 'FCameraModifierEffect::LifeSpan' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifierSpecHandle
// 0x000C (0x000C - 0x0000)
struct FCameraModifierSpecHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Handle;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCameraModifierSpecHandle) == 0x000004, "Wrong alignment on FCameraModifierSpecHandle");
static_assert(sizeof(FCameraModifierSpecHandle) == 0x00000C, "Wrong size on FCameraModifierSpecHandle");
static_assert(offsetof(FCameraModifierSpecHandle, Handle) == 0x000008, "Member 'FCameraModifierSpecHandle::Handle' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifierEffectSpec
// 0x0118 (0x0118 - 0x0000)
struct FCameraModifierEffectSpec final
{
public:
	struct FCameraModifierEffect                  CameraModifierEffect;                              // 0x0000(0x00F0)(NativeAccessSpecifierPublic)
	struct FCameraModifierSpecHandle              Handle;                                            // 0x00F0(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x1C];                                      // 0x00FC(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraModifierEffectSpec) == 0x000008, "Wrong alignment on FCameraModifierEffectSpec");
static_assert(sizeof(FCameraModifierEffectSpec) == 0x000118, "Wrong size on FCameraModifierEffectSpec");
static_assert(offsetof(FCameraModifierEffectSpec, CameraModifierEffect) == 0x000000, "Member 'FCameraModifierEffectSpec::CameraModifierEffect' has a wrong offset!");
static_assert(offsetof(FCameraModifierEffectSpec, Handle) == 0x0000F0, "Member 'FCameraModifierEffectSpec::Handle' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifiersWrap
// 0x0038 (0x0038 - 0x0000)
struct FCameraModifiersWrap final
{
public:
	class UCameraModifier_LocationOffset*         Modifier_LocationOffset;                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier_SpringArmLength*        Modifier_SpringArmLength;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier_FOV*                    Modifier_FOV;                                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier_CameraShakeVessel*      Modifier_CameraShake;                              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier_CameraVFX*              Modifier_VFX;                                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier_CameraPostProcess*      Modifier_PostProcess;                              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier_InterpLookAtLoc*        Modifier_InterpLookAtLoc;                          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifiersWrap) == 0x000008, "Wrong alignment on FCameraModifiersWrap");
static_assert(sizeof(FCameraModifiersWrap) == 0x000038, "Wrong size on FCameraModifiersWrap");
static_assert(offsetof(FCameraModifiersWrap, Modifier_LocationOffset) == 0x000000, "Member 'FCameraModifiersWrap::Modifier_LocationOffset' has a wrong offset!");
static_assert(offsetof(FCameraModifiersWrap, Modifier_SpringArmLength) == 0x000008, "Member 'FCameraModifiersWrap::Modifier_SpringArmLength' has a wrong offset!");
static_assert(offsetof(FCameraModifiersWrap, Modifier_FOV) == 0x000010, "Member 'FCameraModifiersWrap::Modifier_FOV' has a wrong offset!");
static_assert(offsetof(FCameraModifiersWrap, Modifier_CameraShake) == 0x000018, "Member 'FCameraModifiersWrap::Modifier_CameraShake' has a wrong offset!");
static_assert(offsetof(FCameraModifiersWrap, Modifier_VFX) == 0x000020, "Member 'FCameraModifiersWrap::Modifier_VFX' has a wrong offset!");
static_assert(offsetof(FCameraModifiersWrap, Modifier_PostProcess) == 0x000028, "Member 'FCameraModifiersWrap::Modifier_PostProcess' has a wrong offset!");
static_assert(offsetof(FCameraModifiersWrap, Modifier_InterpLookAtLoc) == 0x000030, "Member 'FCameraModifiersWrap::Modifier_InterpLookAtLoc' has a wrong offset!");

// ScriptStruct X6Camera.CameraSpringArmPathBlend
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FCameraSpringArmPathBlend final
{
public:
	float                                         SpringArmBlendMaxRotateYaw;                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmBlendMaxOffsetYaw;                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalBlendMaxRotateYaw;                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultProbeSize;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CameraTraceChannel;                                // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxTraceTimes;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCollisionFixDistance;                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x54];                                      // 0x001C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraSpringArmPathBlend) == 0x000008, "Wrong alignment on FCameraSpringArmPathBlend");
static_assert(sizeof(FCameraSpringArmPathBlend) == 0x000070, "Wrong size on FCameraSpringArmPathBlend");
static_assert(offsetof(FCameraSpringArmPathBlend, SpringArmBlendMaxRotateYaw) == 0x000000, "Member 'FCameraSpringArmPathBlend::SpringArmBlendMaxRotateYaw' has a wrong offset!");
static_assert(offsetof(FCameraSpringArmPathBlend, SpringArmBlendMaxOffsetYaw) == 0x000004, "Member 'FCameraSpringArmPathBlend::SpringArmBlendMaxOffsetYaw' has a wrong offset!");
static_assert(offsetof(FCameraSpringArmPathBlend, NormalBlendMaxRotateYaw) == 0x000008, "Member 'FCameraSpringArmPathBlend::NormalBlendMaxRotateYaw' has a wrong offset!");
static_assert(offsetof(FCameraSpringArmPathBlend, DefaultProbeSize) == 0x00000C, "Member 'FCameraSpringArmPathBlend::DefaultProbeSize' has a wrong offset!");
static_assert(offsetof(FCameraSpringArmPathBlend, CameraTraceChannel) == 0x000010, "Member 'FCameraSpringArmPathBlend::CameraTraceChannel' has a wrong offset!");
static_assert(offsetof(FCameraSpringArmPathBlend, MaxTraceTimes) == 0x000014, "Member 'FCameraSpringArmPathBlend::MaxTraceTimes' has a wrong offset!");
static_assert(offsetof(FCameraSpringArmPathBlend, MaxCollisionFixDistance) == 0x000018, "Member 'FCameraSpringArmPathBlend::MaxCollisionFixDistance' has a wrong offset!");

// ScriptStruct X6Camera.CameraStateContext
// 0x09A0 (0x09A0 - 0x0000)
struct FCameraStateContext final
{
public:
	struct FTViewTarget                           ViewTarget;                                        // 0x0000(0x0990)(BlueprintVisible, NativeAccessSpecifierPublic)
	ECameraState                                  CameraState;                                       // 0x0990(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerPawn;                                     // 0x0991(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_992[0xE];                                      // 0x0992(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraStateContext) == 0x000010, "Wrong alignment on FCameraStateContext");
static_assert(sizeof(FCameraStateContext) == 0x0009A0, "Wrong size on FCameraStateContext");
static_assert(offsetof(FCameraStateContext, ViewTarget) == 0x000000, "Member 'FCameraStateContext::ViewTarget' has a wrong offset!");
static_assert(offsetof(FCameraStateContext, CameraState) == 0x000990, "Member 'FCameraStateContext::CameraState' has a wrong offset!");
static_assert(offsetof(FCameraStateContext, bIsPlayerPawn) == 0x000991, "Member 'FCameraStateContext::bIsPlayerPawn' has a wrong offset!");

// ScriptStruct X6Camera.CameraStateBase
// 0x09A0 (0x09A0 - 0x0000)
struct FCameraStateBase final
{
public:
	struct FTViewTarget                           ViewTarget;                                        // 0x0000(0x0990)(NativeAccessSpecifierPublic)
	ECameraState                                  CameraState;                                       // 0x0990(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerPawn;                                     // 0x0991(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_992[0xE];                                      // 0x0992(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraStateBase) == 0x000010, "Wrong alignment on FCameraStateBase");
static_assert(sizeof(FCameraStateBase) == 0x0009A0, "Wrong size on FCameraStateBase");
static_assert(offsetof(FCameraStateBase, ViewTarget) == 0x000000, "Member 'FCameraStateBase::ViewTarget' has a wrong offset!");
static_assert(offsetof(FCameraStateBase, CameraState) == 0x000990, "Member 'FCameraStateBase::CameraState' has a wrong offset!");
static_assert(offsetof(FCameraStateBase, bIsPlayerPawn) == 0x000991, "Member 'FCameraStateBase::bIsPlayerPawn' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifierBlendParam
// 0x0018 (0x0018 - 0x0000)
struct FCameraModifierBlendParam final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunction;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InBlendCurve;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifierBlendParam) == 0x000008, "Wrong alignment on FCameraModifierBlendParam");
static_assert(sizeof(FCameraModifierBlendParam) == 0x000018, "Wrong size on FCameraModifierBlendParam");
static_assert(offsetof(FCameraModifierBlendParam, BlendTime) == 0x000000, "Member 'FCameraModifierBlendParam::BlendTime' has a wrong offset!");
static_assert(offsetof(FCameraModifierBlendParam, BlendFunction) == 0x000004, "Member 'FCameraModifierBlendParam::BlendFunction' has a wrong offset!");
static_assert(offsetof(FCameraModifierBlendParam, BlendExp) == 0x000008, "Member 'FCameraModifierBlendParam::BlendExp' has a wrong offset!");
static_assert(offsetof(FCameraModifierBlendParam, bLockOutgoing) == 0x00000C, "Member 'FCameraModifierBlendParam::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(FCameraModifierBlendParam, InBlendCurve) == 0x000010, "Member 'FCameraModifierBlendParam::InBlendCurve' has a wrong offset!");

// ScriptStruct X6Camera.SpecialTransition
// 0x0020 (0x0020 - 0x0000)
struct FSpecialTransition final
{
public:
	ECameraState                                  LastMode;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifierBlendParam              TransitionParam;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialTransition) == 0x000008, "Wrong alignment on FSpecialTransition");
static_assert(sizeof(FSpecialTransition) == 0x000020, "Wrong size on FSpecialTransition");
static_assert(offsetof(FSpecialTransition, LastMode) == 0x000000, "Member 'FSpecialTransition::LastMode' has a wrong offset!");
static_assert(offsetof(FSpecialTransition, TransitionParam) == 0x000008, "Member 'FSpecialTransition::TransitionParam' has a wrong offset!");

// ScriptStruct X6Camera.CameraStateTransitionListData
// 0x0028 (0x0030 - 0x0008)
struct FCameraStateTransitionListData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UCameraStateTransitionData> CameraStateTransitionDataToLoad;                // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraStateTransitionListData) == 0x000008, "Wrong alignment on FCameraStateTransitionListData");
static_assert(sizeof(FCameraStateTransitionListData) == 0x000030, "Wrong size on FCameraStateTransitionListData");
static_assert(offsetof(FCameraStateTransitionListData, CameraStateTransitionDataToLoad) == 0x000008, "Member 'FCameraStateTransitionListData::CameraStateTransitionDataToLoad' has a wrong offset!");

// ScriptStruct X6Camera.CameraTaskMoveToData
// 0x0080 (0x0080 - 0x0000)
struct FCameraTaskMoveToData final
{
public:
	struct FTransform                             TargetCameraTransfrom;                             // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0060(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraTaskMoveToData) == 0x000010, "Wrong alignment on FCameraTaskMoveToData");
static_assert(sizeof(FCameraTaskMoveToData) == 0x000080, "Wrong size on FCameraTaskMoveToData");
static_assert(offsetof(FCameraTaskMoveToData, TargetCameraTransfrom) == 0x000000, "Member 'FCameraTaskMoveToData::TargetCameraTransfrom' has a wrong offset!");
static_assert(offsetof(FCameraTaskMoveToData, TransitionParams) == 0x000060, "Member 'FCameraTaskMoveToData::TransitionParams' has a wrong offset!");

// ScriptStruct X6Camera.CameraTaskSplineData
// 0x0010 (0x0010 - 0x0000)
struct FCameraTaskSplineData final
{
public:
	class USplineComponent*                       SplineComponent;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraTaskSplineData) == 0x000008, "Wrong alignment on FCameraTaskSplineData");
static_assert(sizeof(FCameraTaskSplineData) == 0x000010, "Wrong size on FCameraTaskSplineData");
static_assert(offsetof(FCameraTaskSplineData, SplineComponent) == 0x000000, "Member 'FCameraTaskSplineData::SplineComponent' has a wrong offset!");
static_assert(offsetof(FCameraTaskSplineData, TotalTime) == 0x000008, "Member 'FCameraTaskSplineData::TotalTime' has a wrong offset!");

// ScriptStruct X6Camera.X6CameraRuntimeConfig
// 0x0230 (0x0230 - 0x0000)
struct FX6CameraRuntimeConfig
{
public:
	struct FX6CameraInputConfig                   InputConfig;                                       // 0x0000(0x00D0)(NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraBaseParamsDefine                BaseParams;                                        // 0x00D0(0x0160)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6CameraRuntimeConfig) == 0x000008, "Wrong alignment on FX6CameraRuntimeConfig");
static_assert(sizeof(FX6CameraRuntimeConfig) == 0x000230, "Wrong size on FX6CameraRuntimeConfig");
static_assert(offsetof(FX6CameraRuntimeConfig, InputConfig) == 0x000000, "Member 'FX6CameraRuntimeConfig::InputConfig' has a wrong offset!");
static_assert(offsetof(FX6CameraRuntimeConfig, BaseParams) == 0x0000D0, "Member 'FX6CameraRuntimeConfig::BaseParams' has a wrong offset!");

// ScriptStruct X6Camera.X6CameraConfigData
// 0x00F8 (0x0328 - 0x0230)
struct FX6CameraConfigData final : public FX6CameraRuntimeConfig
{
public:
	class UCameraBaseParamsData*                  Data;                                              // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConfigKey;                                         // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FX6CameraConfig                        Config;                                            // 0x0240(0x00D0)(NativeAccessSpecifierPublic)
	class UX6CameraRuntimeConfigModifier*         ConfigModifier;                                    // 0x0310(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBaseConfig;                                       // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UniqueKey;                                         // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRejected;                                         // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FX6CameraConfigData) == 0x000008, "Wrong alignment on FX6CameraConfigData");
static_assert(sizeof(FX6CameraConfigData) == 0x000328, "Wrong size on FX6CameraConfigData");
static_assert(offsetof(FX6CameraConfigData, Data) == 0x000230, "Member 'FX6CameraConfigData::Data' has a wrong offset!");
static_assert(offsetof(FX6CameraConfigData, ConfigKey) == 0x000238, "Member 'FX6CameraConfigData::ConfigKey' has a wrong offset!");
static_assert(offsetof(FX6CameraConfigData, Config) == 0x000240, "Member 'FX6CameraConfigData::Config' has a wrong offset!");
static_assert(offsetof(FX6CameraConfigData, ConfigModifier) == 0x000310, "Member 'FX6CameraConfigData::ConfigModifier' has a wrong offset!");
static_assert(offsetof(FX6CameraConfigData, bBaseConfig) == 0x000318, "Member 'FX6CameraConfigData::bBaseConfig' has a wrong offset!");
static_assert(offsetof(FX6CameraConfigData, UniqueKey) == 0x00031C, "Member 'FX6CameraConfigData::UniqueKey' has a wrong offset!");
static_assert(offsetof(FX6CameraConfigData, bRejected) == 0x000320, "Member 'FX6CameraConfigData::bRejected' has a wrong offset!");

// ScriptStruct X6Camera.X6CameraModifiersProcessor
// 0x0140 (0x0140 - 0x0000)
struct FX6CameraModifiersProcessor final
{
public:
	class UDataTable*                             ModifiersConfig;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x138];                                      // 0x0008(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FX6CameraModifiersProcessor) == 0x000008, "Wrong alignment on FX6CameraModifiersProcessor");
static_assert(sizeof(FX6CameraModifiersProcessor) == 0x000140, "Wrong size on FX6CameraModifiersProcessor");
static_assert(offsetof(FX6CameraModifiersProcessor, ModifiersConfig) == 0x000000, "Member 'FX6CameraModifiersProcessor::ModifiersConfig' has a wrong offset!");

// ScriptStruct X6Camera.X6CustomCameraStateSetup
// 0x000C (0x000C - 0x0000)
struct FX6CustomCameraStateSetup final
{
public:
	ECameraState                                  CameraState;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6CustomCameraStateSetup) == 0x000004, "Wrong alignment on FX6CustomCameraStateSetup");
static_assert(sizeof(FX6CustomCameraStateSetup) == 0x00000C, "Wrong size on FX6CustomCameraStateSetup");
static_assert(offsetof(FX6CustomCameraStateSetup, CameraState) == 0x000000, "Member 'FX6CustomCameraStateSetup::CameraState' has a wrong offset!");
static_assert(offsetof(FX6CustomCameraStateSetup, Name) == 0x000004, "Member 'FX6CustomCameraStateSetup::Name' has a wrong offset!");

// ScriptStruct X6Camera.CameraTaskSplineBlendInfo
// 0x0048 (0x0048 - 0x0000)
struct FCameraTaskSplineBlendInfo final
{
public:
	class USplineComponent*                       SplineComponent;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       PointRotation;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0018(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 LookAtTarget;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookAtTargetMode;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraTaskSplineBlendInfo) == 0x000008, "Wrong alignment on FCameraTaskSplineBlendInfo");
static_assert(sizeof(FCameraTaskSplineBlendInfo) == 0x000048, "Wrong size on FCameraTaskSplineBlendInfo");
static_assert(offsetof(FCameraTaskSplineBlendInfo, SplineComponent) == 0x000000, "Member 'FCameraTaskSplineBlendInfo::SplineComponent' has a wrong offset!");
static_assert(offsetof(FCameraTaskSplineBlendInfo, PointRotation) == 0x000008, "Member 'FCameraTaskSplineBlendInfo::PointRotation' has a wrong offset!");
static_assert(offsetof(FCameraTaskSplineBlendInfo, TransitionParams) == 0x000018, "Member 'FCameraTaskSplineBlendInfo::TransitionParams' has a wrong offset!");
static_assert(offsetof(FCameraTaskSplineBlendInfo, LookAtTarget) == 0x000038, "Member 'FCameraTaskSplineBlendInfo::LookAtTarget' has a wrong offset!");
static_assert(offsetof(FCameraTaskSplineBlendInfo, bLookAtTargetMode) == 0x000040, "Member 'FCameraTaskSplineBlendInfo::bLookAtTargetMode' has a wrong offset!");

// ScriptStruct X6Camera.SplineCameraTaskData
// 0x0010 (0x0010 - 0x0000)
struct FSplineCameraTaskData final
{
public:
	TArray<struct FCameraTaskSplineBlendInfo>     SplineBlendInfo;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSplineCameraTaskData) == 0x000008, "Wrong alignment on FSplineCameraTaskData");
static_assert(sizeof(FSplineCameraTaskData) == 0x000010, "Wrong size on FSplineCameraTaskData");
static_assert(offsetof(FSplineCameraTaskData, SplineBlendInfo) == 0x000000, "Member 'FSplineCameraTaskData::SplineBlendInfo' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifierList
// 0x0010 (0x0010 - 0x0000)
struct FCameraModifierList final
{
public:
	TArray<class UCameraModifier*>                CameraModifierList;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifierList) == 0x000008, "Wrong alignment on FCameraModifierList");
static_assert(sizeof(FCameraModifierList) == 0x000010, "Wrong size on FCameraModifierList");
static_assert(offsetof(FCameraModifierList, CameraModifierList) == 0x000000, "Member 'FCameraModifierList::CameraModifierList' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifierContext
// 0x0001 (0x0001 - 0x0000)
struct FCameraModifierContext final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraModifierContext) == 0x000001, "Wrong alignment on FCameraModifierContext");
static_assert(sizeof(FCameraModifierContext) == 0x000001, "Wrong size on FCameraModifierContext");

// ScriptStruct X6Camera.DebugCameraReviseParam
// 0x0040 (0x0040 - 0x0000)
struct FDebugCameraReviseParam final
{
public:
	float                                         TargetArmLength;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousTargetArmLength;                           // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketOffset;                                      // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x0020(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugCameraReviseParam) == 0x000008, "Wrong alignment on FDebugCameraReviseParam");
static_assert(sizeof(FDebugCameraReviseParam) == 0x000040, "Wrong size on FDebugCameraReviseParam");
static_assert(offsetof(FDebugCameraReviseParam, TargetArmLength) == 0x000000, "Member 'FDebugCameraReviseParam::TargetArmLength' has a wrong offset!");
static_assert(offsetof(FDebugCameraReviseParam, PreviousTargetArmLength) == 0x000004, "Member 'FDebugCameraReviseParam::PreviousTargetArmLength' has a wrong offset!");
static_assert(offsetof(FDebugCameraReviseParam, SocketOffset) == 0x000008, "Member 'FDebugCameraReviseParam::SocketOffset' has a wrong offset!");
static_assert(offsetof(FDebugCameraReviseParam, TargetOffset) == 0x000020, "Member 'FDebugCameraReviseParam::TargetOffset' has a wrong offset!");
static_assert(offsetof(FDebugCameraReviseParam, FOV) == 0x000038, "Member 'FDebugCameraReviseParam::FOV' has a wrong offset!");

// ScriptStruct X6Camera.DebugCameraModifierStackInfo
// 0x0068 (0x0068 - 0x0000)
struct FDebugCameraModifierStackInfo final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AssetKey;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Handle;                                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainTime;                                        // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveLocation;                                   // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SocketOffset;                                      // 0x0028(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x0040(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveArmlength;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Armlength;                                         // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActiveFOV;                                        // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOV;                                               // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugCameraModifierStackInfo) == 0x000008, "Wrong alignment on FDebugCameraModifierStackInfo");
static_assert(sizeof(FDebugCameraModifierStackInfo) == 0x000068, "Wrong size on FDebugCameraModifierStackInfo");
static_assert(offsetof(FDebugCameraModifierStackInfo, bActive) == 0x000000, "Member 'FDebugCameraModifierStackInfo::bActive' has a wrong offset!");
static_assert(offsetof(FDebugCameraModifierStackInfo, AssetKey) == 0x000008, "Member 'FDebugCameraModifierStackInfo::AssetKey' has a wrong offset!");
static_assert(offsetof(FDebugCameraModifierStackInfo, Handle) == 0x000018, "Member 'FDebugCameraModifierStackInfo::Handle' has a wrong offset!");
static_assert(offsetof(FDebugCameraModifierStackInfo, Priority) == 0x00001C, "Member 'FDebugCameraModifierStackInfo::Priority' has a wrong offset!");
static_assert(offsetof(FDebugCameraModifierStackInfo, RemainTime) == 0x000020, "Member 'FDebugCameraModifierStackInfo::RemainTime' has a wrong offset!");
static_assert(offsetof(FDebugCameraModifierStackInfo, bActiveLocation) == 0x000024, "Member 'FDebugCameraModifierStackInfo::bActiveLocation' has a wrong offset!");
static_assert(offsetof(FDebugCameraModifierStackInfo, SocketOffset) == 0x000028, "Member 'FDebugCameraModifierStackInfo::SocketOffset' has a wrong offset!");
static_assert(offsetof(FDebugCameraModifierStackInfo, TargetOffset) == 0x000040, "Member 'FDebugCameraModifierStackInfo::TargetOffset' has a wrong offset!");
static_assert(offsetof(FDebugCameraModifierStackInfo, bActiveArmlength) == 0x000058, "Member 'FDebugCameraModifierStackInfo::bActiveArmlength' has a wrong offset!");
static_assert(offsetof(FDebugCameraModifierStackInfo, Armlength) == 0x00005C, "Member 'FDebugCameraModifierStackInfo::Armlength' has a wrong offset!");
static_assert(offsetof(FDebugCameraModifierStackInfo, bActiveFOV) == 0x000060, "Member 'FDebugCameraModifierStackInfo::bActiveFOV' has a wrong offset!");
static_assert(offsetof(FDebugCameraModifierStackInfo, FOV) == 0x000064, "Member 'FDebugCameraModifierStackInfo::FOV' has a wrong offset!");

// ScriptStruct X6Camera.CameraModifierBlendInOutParams
// 0x0038 (0x0038 - 0x0000)
struct FCameraModifierBlendInOutParams final
{
public:
	struct FCameraModifierBlendParam              BlendInParam;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifierBlendParam              BlendOutParam;                                     // 0x0020(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifierBlendInOutParams) == 0x000008, "Wrong alignment on FCameraModifierBlendInOutParams");
static_assert(sizeof(FCameraModifierBlendInOutParams) == 0x000038, "Wrong size on FCameraModifierBlendInOutParams");
static_assert(offsetof(FCameraModifierBlendInOutParams, BlendInParam) == 0x000000, "Member 'FCameraModifierBlendInOutParams::BlendInParam' has a wrong offset!");
static_assert(offsetof(FCameraModifierBlendInOutParams, Duration) == 0x000018, "Member 'FCameraModifierBlendInOutParams::Duration' has a wrong offset!");
static_assert(offsetof(FCameraModifierBlendInOutParams, BlendOutParam) == 0x000020, "Member 'FCameraModifierBlendInOutParams::BlendOutParam' has a wrong offset!");

// ScriptStruct X6Camera.LimitRotation
// 0x0010 (0x0010 - 0x0000)
struct FLimitRotation final
{
public:
	float                                         MaxYaw;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinYaw;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitch;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPitch;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLimitRotation) == 0x000004, "Wrong alignment on FLimitRotation");
static_assert(sizeof(FLimitRotation) == 0x000010, "Wrong size on FLimitRotation");
static_assert(offsetof(FLimitRotation, MaxYaw) == 0x000000, "Member 'FLimitRotation::MaxYaw' has a wrong offset!");
static_assert(offsetof(FLimitRotation, MinYaw) == 0x000004, "Member 'FLimitRotation::MinYaw' has a wrong offset!");
static_assert(offsetof(FLimitRotation, MaxPitch) == 0x000008, "Member 'FLimitRotation::MaxPitch' has a wrong offset!");
static_assert(offsetof(FLimitRotation, MinPitch) == 0x00000C, "Member 'FLimitRotation::MinPitch' has a wrong offset!");

// ScriptStruct X6Camera.CameraBlendParamSimple
// 0x0018 (0x0018 - 0x0000)
struct FCameraBlendParamSimple final
{
public:
	float                                         BlendTimeEnter;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFuncEnter;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExpEnter;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeExit;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFuncExit;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExpExit;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraBlendParamSimple) == 0x000004, "Wrong alignment on FCameraBlendParamSimple");
static_assert(sizeof(FCameraBlendParamSimple) == 0x000018, "Wrong size on FCameraBlendParamSimple");
static_assert(offsetof(FCameraBlendParamSimple, BlendTimeEnter) == 0x000000, "Member 'FCameraBlendParamSimple::BlendTimeEnter' has a wrong offset!");
static_assert(offsetof(FCameraBlendParamSimple, BlendFuncEnter) == 0x000004, "Member 'FCameraBlendParamSimple::BlendFuncEnter' has a wrong offset!");
static_assert(offsetof(FCameraBlendParamSimple, BlendExpEnter) == 0x000008, "Member 'FCameraBlendParamSimple::BlendExpEnter' has a wrong offset!");
static_assert(offsetof(FCameraBlendParamSimple, BlendTimeExit) == 0x00000C, "Member 'FCameraBlendParamSimple::BlendTimeExit' has a wrong offset!");
static_assert(offsetof(FCameraBlendParamSimple, BlendFuncExit) == 0x000010, "Member 'FCameraBlendParamSimple::BlendFuncExit' has a wrong offset!");
static_assert(offsetof(FCameraBlendParamSimple, BlendExpExit) == 0x000014, "Member 'FCameraBlendParamSimple::BlendExpExit' has a wrong offset!");

// ScriptStruct X6Camera.CameraVFXInfo
// 0x0010 (0x0010 - 0x0000)
struct FCameraVFXInfo final
{
public:
	class FName                                   VFXType;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraVFXInfo) == 0x000008, "Wrong alignment on FCameraVFXInfo");
static_assert(sizeof(FCameraVFXInfo) == 0x000010, "Wrong size on FCameraVFXInfo");
static_assert(offsetof(FCameraVFXInfo, VFXType) == 0x000000, "Member 'FCameraVFXInfo::VFXType' has a wrong offset!");
static_assert(offsetof(FCameraVFXInfo, Curve) == 0x000008, "Member 'FCameraVFXInfo::Curve' has a wrong offset!");

// ScriptStruct X6Camera.CameraSpringArmLength
// 0x0008 (0x0008 - 0x0000)
struct FCameraSpringArmLength final
{
public:
	ECameraValueModifyType                        CameraValueModifyType;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArmlengthModifier;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraSpringArmLength) == 0x000004, "Wrong alignment on FCameraSpringArmLength");
static_assert(sizeof(FCameraSpringArmLength) == 0x000008, "Wrong size on FCameraSpringArmLength");
static_assert(offsetof(FCameraSpringArmLength, CameraValueModifyType) == 0x000000, "Member 'FCameraSpringArmLength::CameraValueModifyType' has a wrong offset!");
static_assert(offsetof(FCameraSpringArmLength, ArmlengthModifier) == 0x000004, "Member 'FCameraSpringArmLength::ArmlengthModifier' has a wrong offset!");

// ScriptStruct X6Camera.CameraSpringArmLength_ModifierBlend
// 0x0040 (0x0040 - 0x0000)
struct FCameraSpringArmLength_ModifierBlend final
{
public:
	struct FCameraSpringArmLength                 CameraSpringArmLength;                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraModifierBlendInOutParams        BlendParams;                                       // 0x0008(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraSpringArmLength_ModifierBlend) == 0x000008, "Wrong alignment on FCameraSpringArmLength_ModifierBlend");
static_assert(sizeof(FCameraSpringArmLength_ModifierBlend) == 0x000040, "Wrong size on FCameraSpringArmLength_ModifierBlend");
static_assert(offsetof(FCameraSpringArmLength_ModifierBlend, CameraSpringArmLength) == 0x000000, "Member 'FCameraSpringArmLength_ModifierBlend::CameraSpringArmLength' has a wrong offset!");
static_assert(offsetof(FCameraSpringArmLength_ModifierBlend, BlendParams) == 0x000008, "Member 'FCameraSpringArmLength_ModifierBlend::BlendParams' has a wrong offset!");

// ScriptStruct X6Camera.CameraOffset
// 0x0040 (0x0040 - 0x0000)
struct FCameraOffset final
{
public:
	ECameraValueModifyType                        CameraValueModifyType;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetOffset;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetOffsetModifier;                              // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSocketOffset;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SocketOffsetModifier;                              // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraOffset) == 0x000008, "Wrong alignment on FCameraOffset");
static_assert(sizeof(FCameraOffset) == 0x000040, "Wrong size on FCameraOffset");
static_assert(offsetof(FCameraOffset, CameraValueModifyType) == 0x000000, "Member 'FCameraOffset::CameraValueModifyType' has a wrong offset!");
static_assert(offsetof(FCameraOffset, bTargetOffset) == 0x000001, "Member 'FCameraOffset::bTargetOffset' has a wrong offset!");
static_assert(offsetof(FCameraOffset, TargetOffsetModifier) == 0x000008, "Member 'FCameraOffset::TargetOffsetModifier' has a wrong offset!");
static_assert(offsetof(FCameraOffset, bSocketOffset) == 0x000020, "Member 'FCameraOffset::bSocketOffset' has a wrong offset!");
static_assert(offsetof(FCameraOffset, SocketOffsetModifier) == 0x000028, "Member 'FCameraOffset::SocketOffsetModifier' has a wrong offset!");

// ScriptStruct X6Camera.CameraFOV
// 0x0008 (0x0008 - 0x0000)
struct FCameraFOV final
{
public:
	float                                         FOVModifier;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraValueModifyType                        CameraValueModifyType;                             // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraFOV) == 0x000004, "Wrong alignment on FCameraFOV");
static_assert(sizeof(FCameraFOV) == 0x000008, "Wrong size on FCameraFOV");
static_assert(offsetof(FCameraFOV, FOVModifier) == 0x000000, "Member 'FCameraFOV::FOVModifier' has a wrong offset!");
static_assert(offsetof(FCameraFOV, CameraValueModifyType) == 0x000004, "Member 'FCameraFOV::CameraValueModifyType' has a wrong offset!");

// ScriptStruct X6Camera.CameraPostProcess_ModifierSpec
// 0x0038 (0x0038 - 0x0000)
struct FCameraPostProcess_ModifierSpec final
{
public:
	struct FCameraModifier_PostProcess            Modifier;                                          // 0x0000(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisabled;                                         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPendingDisable;                                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemove;                                           // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6CameraDataPriority                         Priority;                                          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifierSpecHandle              Handle;                                            // 0x0028(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraPostProcess_ModifierSpec) == 0x000008, "Wrong alignment on FCameraPostProcess_ModifierSpec");
static_assert(sizeof(FCameraPostProcess_ModifierSpec) == 0x000038, "Wrong size on FCameraPostProcess_ModifierSpec");
static_assert(offsetof(FCameraPostProcess_ModifierSpec, Modifier) == 0x000000, "Member 'FCameraPostProcess_ModifierSpec::Modifier' has a wrong offset!");
static_assert(offsetof(FCameraPostProcess_ModifierSpec, bActive) == 0x000020, "Member 'FCameraPostProcess_ModifierSpec::bActive' has a wrong offset!");
static_assert(offsetof(FCameraPostProcess_ModifierSpec, bDisabled) == 0x000021, "Member 'FCameraPostProcess_ModifierSpec::bDisabled' has a wrong offset!");
static_assert(offsetof(FCameraPostProcess_ModifierSpec, bPendingDisable) == 0x000022, "Member 'FCameraPostProcess_ModifierSpec::bPendingDisable' has a wrong offset!");
static_assert(offsetof(FCameraPostProcess_ModifierSpec, bRemove) == 0x000023, "Member 'FCameraPostProcess_ModifierSpec::bRemove' has a wrong offset!");
static_assert(offsetof(FCameraPostProcess_ModifierSpec, Priority) == 0x000024, "Member 'FCameraPostProcess_ModifierSpec::Priority' has a wrong offset!");
static_assert(offsetof(FCameraPostProcess_ModifierSpec, Handle) == 0x000028, "Member 'FCameraPostProcess_ModifierSpec::Handle' has a wrong offset!");

// ScriptStruct X6Camera.CameraShake_ModifierSpec
// 0x0020 (0x0020 - 0x0000)
struct FCameraShake_ModifierSpec final
{
public:
	struct FCameraModifier_CameraShakeData        Modifier;                                          // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisabled;                                         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPendingDisable;                                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemove;                                           // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6CameraDataPriority                         Priority;                                          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifierSpecHandle              Handle;                                            // 0x0010(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraShake_ModifierSpec) == 0x000008, "Wrong alignment on FCameraShake_ModifierSpec");
static_assert(sizeof(FCameraShake_ModifierSpec) == 0x000020, "Wrong size on FCameraShake_ModifierSpec");
static_assert(offsetof(FCameraShake_ModifierSpec, Modifier) == 0x000000, "Member 'FCameraShake_ModifierSpec::Modifier' has a wrong offset!");
static_assert(offsetof(FCameraShake_ModifierSpec, bActive) == 0x000008, "Member 'FCameraShake_ModifierSpec::bActive' has a wrong offset!");
static_assert(offsetof(FCameraShake_ModifierSpec, bDisabled) == 0x000009, "Member 'FCameraShake_ModifierSpec::bDisabled' has a wrong offset!");
static_assert(offsetof(FCameraShake_ModifierSpec, bPendingDisable) == 0x00000A, "Member 'FCameraShake_ModifierSpec::bPendingDisable' has a wrong offset!");
static_assert(offsetof(FCameraShake_ModifierSpec, bRemove) == 0x00000B, "Member 'FCameraShake_ModifierSpec::bRemove' has a wrong offset!");
static_assert(offsetof(FCameraShake_ModifierSpec, Priority) == 0x00000C, "Member 'FCameraShake_ModifierSpec::Priority' has a wrong offset!");
static_assert(offsetof(FCameraShake_ModifierSpec, Handle) == 0x000010, "Member 'FCameraShake_ModifierSpec::Handle' has a wrong offset!");

// ScriptStruct X6Camera.CameraInterpParams
// 0x0014 (0x0014 - 0x0000)
struct FCameraInterpParams final
{
public:
	ECameraCollisionMoveMode                      InterpMode;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalDamping;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraInterpParams) == 0x000004, "Wrong alignment on FCameraInterpParams");
static_assert(sizeof(FCameraInterpParams) == 0x000014, "Wrong size on FCameraInterpParams");
static_assert(offsetof(FCameraInterpParams, InterpMode) == 0x000000, "Member 'FCameraInterpParams::InterpMode' has a wrong offset!");
static_assert(offsetof(FCameraInterpParams, InterpSpeed) == 0x000004, "Member 'FCameraInterpParams::InterpSpeed' has a wrong offset!");
static_assert(offsetof(FCameraInterpParams, Stiffness) == 0x000008, "Member 'FCameraInterpParams::Stiffness' has a wrong offset!");
static_assert(offsetof(FCameraInterpParams, CriticalDamping) == 0x00000C, "Member 'FCameraInterpParams::CriticalDamping' has a wrong offset!");
static_assert(offsetof(FCameraInterpParams, Mass) == 0x000010, "Member 'FCameraInterpParams::Mass' has a wrong offset!");

// ScriptStruct X6Camera.CameraSpringBackSettings
// 0x0020 (0x0020 - 0x0000)
struct FCameraSpringBackSettings final
{
public:
	bool                                          bEnableSpringBackInterp;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinTriggerDistance;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraInterpParams                    InterpParams;                                      // 0x0008(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTraceForSpringBack;                               // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraSpringBackSettings) == 0x000004, "Wrong alignment on FCameraSpringBackSettings");
static_assert(sizeof(FCameraSpringBackSettings) == 0x000020, "Wrong size on FCameraSpringBackSettings");
static_assert(offsetof(FCameraSpringBackSettings, bEnableSpringBackInterp) == 0x000000, "Member 'FCameraSpringBackSettings::bEnableSpringBackInterp' has a wrong offset!");
static_assert(offsetof(FCameraSpringBackSettings, MinTriggerDistance) == 0x000004, "Member 'FCameraSpringBackSettings::MinTriggerDistance' has a wrong offset!");
static_assert(offsetof(FCameraSpringBackSettings, InterpParams) == 0x000008, "Member 'FCameraSpringBackSettings::InterpParams' has a wrong offset!");
static_assert(offsetof(FCameraSpringBackSettings, bTraceForSpringBack) == 0x00001C, "Member 'FCameraSpringBackSettings::bTraceForSpringBack' has a wrong offset!");

// ScriptStruct X6Camera.InputCacheData
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FInputCacheData final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputCacheData) == 0x000004, "Wrong alignment on FInputCacheData");
static_assert(sizeof(FInputCacheData) == 0x000014, "Wrong size on FInputCacheData");

// ScriptStruct X6Camera.InputCacheRuntimeArrayData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FInputCacheRuntimeArrayData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputCacheRuntimeArrayData) == 0x000008, "Wrong alignment on FInputCacheRuntimeArrayData");
static_assert(sizeof(FInputCacheRuntimeArrayData) == 0x000018, "Wrong size on FInputCacheRuntimeArrayData");

// ScriptStruct X6Camera.CameraConfigPriorityDataTableRow
// 0x0010 (0x0018 - 0x0008)
struct FCameraConfigPriorityDataTableRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           CameraConfigPriorityTag;                           // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriorityValue;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraConfigPriorityDataTableRow) == 0x000008, "Wrong alignment on FCameraConfigPriorityDataTableRow");
static_assert(sizeof(FCameraConfigPriorityDataTableRow) == 0x000018, "Wrong size on FCameraConfigPriorityDataTableRow");
static_assert(offsetof(FCameraConfigPriorityDataTableRow, CameraConfigPriorityTag) == 0x000008, "Member 'FCameraConfigPriorityDataTableRow::CameraConfigPriorityTag' has a wrong offset!");
static_assert(offsetof(FCameraConfigPriorityDataTableRow, PriorityValue) == 0x000010, "Member 'FCameraConfigPriorityDataTableRow::PriorityValue' has a wrong offset!");

// ScriptStruct X6Camera.X6CameraZoomCommonSettings
// 0x0080 (0x0080 - 0x0000)
struct FX6CameraZoomCommonSettings final
{
public:
	float                                         AutoZoomOutTime;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmLengthZoomSpeed;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmLengthAutoZoomOutSpeed;                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVZoomSpeed;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVAutoZoomOutSpeed;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSocketOffsetY;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomBlendOutTime;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetOffsetAlphaInterpSpeed;                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OwnerMovementTriggerAutoZoomOutThreshold;          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EX6CameraInputDeviceType, bool>          InputDeviceEnableSmoothing;                        // 0x0028(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         SmoothingFriction;                                 // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothingMaxDecelerateTime;                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FX6CameraZoomCommonSettings) == 0x000008, "Wrong alignment on FX6CameraZoomCommonSettings");
static_assert(sizeof(FX6CameraZoomCommonSettings) == 0x000080, "Wrong size on FX6CameraZoomCommonSettings");
static_assert(offsetof(FX6CameraZoomCommonSettings, AutoZoomOutTime) == 0x000000, "Member 'FX6CameraZoomCommonSettings::AutoZoomOutTime' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomCommonSettings, ArmLengthZoomSpeed) == 0x000004, "Member 'FX6CameraZoomCommonSettings::ArmLengthZoomSpeed' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomCommonSettings, ArmLengthAutoZoomOutSpeed) == 0x000008, "Member 'FX6CameraZoomCommonSettings::ArmLengthAutoZoomOutSpeed' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomCommonSettings, FOVZoomSpeed) == 0x00000C, "Member 'FX6CameraZoomCommonSettings::FOVZoomSpeed' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomCommonSettings, FOVAutoZoomOutSpeed) == 0x000010, "Member 'FX6CameraZoomCommonSettings::FOVAutoZoomOutSpeed' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomCommonSettings, MaxSocketOffsetY) == 0x000014, "Member 'FX6CameraZoomCommonSettings::MaxSocketOffsetY' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomCommonSettings, ZoomBlendOutTime) == 0x000018, "Member 'FX6CameraZoomCommonSettings::ZoomBlendOutTime' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomCommonSettings, TargetOffsetAlphaInterpSpeed) == 0x00001C, "Member 'FX6CameraZoomCommonSettings::TargetOffsetAlphaInterpSpeed' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomCommonSettings, OwnerMovementTriggerAutoZoomOutThreshold) == 0x000020, "Member 'FX6CameraZoomCommonSettings::OwnerMovementTriggerAutoZoomOutThreshold' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomCommonSettings, InputDeviceEnableSmoothing) == 0x000028, "Member 'FX6CameraZoomCommonSettings::InputDeviceEnableSmoothing' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomCommonSettings, SmoothingFriction) == 0x000078, "Member 'FX6CameraZoomCommonSettings::SmoothingFriction' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomCommonSettings, SmoothingMaxDecelerateTime) == 0x00007C, "Member 'FX6CameraZoomCommonSettings::SmoothingMaxDecelerateTime' has a wrong offset!");

// ScriptStruct X6Camera.X6CameraZoomProcessor
// 0x01A8 (0x01A8 - 0x0000)
struct FX6CameraZoomProcessor final
{
public:
	bool                                          bEnableZoom;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraZoomConfigDataAsset*             ZoomConfigDataAsset;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOwnerMovementTriggerAutoZoomOut;               // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZoomedTargetOffsetZAdjustment;                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x190];                                     // 0x0018(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FX6CameraZoomProcessor) == 0x000008, "Wrong alignment on FX6CameraZoomProcessor");
static_assert(sizeof(FX6CameraZoomProcessor) == 0x0001A8, "Wrong size on FX6CameraZoomProcessor");
static_assert(offsetof(FX6CameraZoomProcessor, bEnableZoom) == 0x000000, "Member 'FX6CameraZoomProcessor::bEnableZoom' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomProcessor, ZoomConfigDataAsset) == 0x000008, "Member 'FX6CameraZoomProcessor::ZoomConfigDataAsset' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomProcessor, bCanOwnerMovementTriggerAutoZoomOut) == 0x000010, "Member 'FX6CameraZoomProcessor::bCanOwnerMovementTriggerAutoZoomOut' has a wrong offset!");
static_assert(offsetof(FX6CameraZoomProcessor, ZoomedTargetOffsetZAdjustment) == 0x000014, "Member 'FX6CameraZoomProcessor::ZoomedTargetOffsetZAdjustment' has a wrong offset!");

}

