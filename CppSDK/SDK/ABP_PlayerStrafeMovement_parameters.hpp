#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_PlayerStrafeMovement

#include "Basic.hpp"

#include "EInputDeviceKeyType_structs.hpp"
#include "Engine_structs.hpp"
#include "ECardinalDirections_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "EPlayerMovementScenarios_structs.hpp"
#include "X6Game_structs.hpp"
#include "X6Animation_structs.hpp"


namespace SDK::Params
{

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimGraph");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimGraph) == 0x000010, "Wrong size on ABP_PlayerStrafeMovement_C_AnimGraph");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_AimOffset
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_AimOffset final
{
public:
	struct FPoseLink                              InPoseForAimOffset;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_AimOffset_0;                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_AimOffset) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_AimOffset");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_AimOffset) == 0x000020, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_AimOffset");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_AimOffset, InPoseForAimOffset) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_AimOffset::InPoseForAimOffset' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_AimOffset, AnimLayer_AimOffset_0) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_AimOffset::AnimLayer_AimOffset_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_BehaviorAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForPlayerBehavior;                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorAdditiveMode_0;                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorAdditiveMode) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorAdditiveMode");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorAdditiveMode) == 0x000020, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorAdditiveMode");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorAdditiveMode, InPoseForPlayerBehavior) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorAdditiveMode::InPoseForPlayerBehavior' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorAdditiveMode, AnimLayer_BehaviorAdditiveMode_0) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorAdditiveMode::AnimLayer_BehaviorAdditiveMode_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_BehaviorConnectionMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorConnectionMode final
{
public:
	struct FPoseLink                              InPoseToConnectionMode;                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorConnectionMode_0;                // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorConnectionMode) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorConnectionMode");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorConnectionMode) == 0x000020, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorConnectionMode");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorConnectionMode, InPoseToConnectionMode) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorConnectionMode::InPoseToConnectionMode' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorConnectionMode, AnimLayer_BehaviorConnectionMode_0) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_BehaviorConnectionMode::AnimLayer_BehaviorConnectionMode_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_CombatMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_CombatMovement final
{
public:
	struct FPoseLink                              AnimLayer_CombatMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_CombatMovement) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_CombatMovement");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_CombatMovement) == 0x000010, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_CombatMovement");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_CombatMovement, AnimLayer_CombatMovement_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_CombatMovement::AnimLayer_CombatMovement_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_EquipmentAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_EquipmentAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForEquipment;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_EquipmentAdditiveMode_0;                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_EquipmentAdditiveMode) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_EquipmentAdditiveMode");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_EquipmentAdditiveMode) == 0x000020, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_EquipmentAdditiveMode");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_EquipmentAdditiveMode, InPoseForEquipment) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_EquipmentAdditiveMode::InPoseForEquipment' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_EquipmentAdditiveMode, AnimLayer_EquipmentAdditiveMode_0) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_EquipmentAdditiveMode::AnimLayer_EquipmentAdditiveMode_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_Jump
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_Jump final
{
public:
	struct FPoseLink                              AnimLayer_Jump_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_Jump) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_Jump");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_Jump) == 0x000010, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_Jump");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_Jump, AnimLayer_Jump_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_Jump::AnimLayer_Jump_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_Land
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_Land final
{
public:
	struct FPoseLink                              AnimLayer_Land_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_Land) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_Land");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_Land) == 0x000010, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_Land");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_Land, AnimLayer_Land_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_Land::AnimLayer_Land_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_MovementDependObject
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_MovementDependObject final
{
public:
	struct FPoseLink                              AnimLayer_MovementDependObject_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_MovementDependObject) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_MovementDependObject");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_MovementDependObject) == 0x000010, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_MovementDependObject");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_MovementDependObject, AnimLayer_MovementDependObject_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_MovementDependObject::AnimLayer_MovementDependObject_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_NPCAdditiveBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_NPCAdditiveBehavior final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCAdditiveBehavior_0;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_NPCAdditiveBehavior) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_NPCAdditiveBehavior");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_NPCAdditiveBehavior) == 0x000020, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_NPCAdditiveBehavior");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_NPCAdditiveBehavior, InPose) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_NPCAdditiveBehavior::InPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_NPCAdditiveBehavior, AnimLayer_NPCAdditiveBehavior_0) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_NPCAdditiveBehavior::AnimLayer_NPCAdditiveBehavior_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_NPCBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_NPCBehavior final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCBehavior_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_NPCBehavior) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_NPCBehavior");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_NPCBehavior) == 0x000020, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_NPCBehavior");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_NPCBehavior, InPose_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_NPCBehavior::InPose_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_NPCBehavior, AnimLayer_NPCBehavior_0) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_NPCBehavior::AnimLayer_NPCBehavior_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_PlayerControllingTool
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_PlayerControllingTool final
{
public:
	struct FPoseLink                              AnimLayer_PlayerControllingTool_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_PlayerControllingTool) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_PlayerControllingTool");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_PlayerControllingTool) == 0x000010, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_PlayerControllingTool");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_PlayerControllingTool, AnimLayer_PlayerControllingTool_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_PlayerControllingTool::AnimLayer_PlayerControllingTool_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_PlayerRegularMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_PlayerRegularMovement final
{
public:
	struct FPoseLink                              AnimLayer_PlayerRegularMovement_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_PlayerRegularMovement) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_PlayerRegularMovement");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_PlayerRegularMovement) == 0x000010, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_PlayerRegularMovement");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_PlayerRegularMovement, AnimLayer_PlayerRegularMovement_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_PlayerRegularMovement::AnimLayer_PlayerRegularMovement_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_SpecialSurfaceMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_SpecialSurfaceMovement final
{
public:
	struct FPoseLink                              AnimLayer_SpecialSurfaceMovement_0;                // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_SpecialSurfaceMovement) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_SpecialSurfaceMovement");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_SpecialSurfaceMovement) == 0x000010, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_SpecialSurfaceMovement");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_SpecialSurfaceMovement, AnimLayer_SpecialSurfaceMovement_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_SpecialSurfaceMovement::AnimLayer_SpecialSurfaceMovement_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_StrafeMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_StrafeMovement final
{
public:
	struct FPoseLink                              AnimLayer_StrafeMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_StrafeMovement) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_StrafeMovement");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_StrafeMovement) == 0x000010, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_StrafeMovement");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_StrafeMovement, AnimLayer_StrafeMovement_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_StrafeMovement::AnimLayer_StrafeMovement_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_UsingCarrierMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_UsingCarrierMovement final
{
public:
	struct FPoseLink                              AnimLayer_UsingCarrierMovement_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_UsingCarrierMovement) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_UsingCarrierMovement");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_UsingCarrierMovement) == 0x000010, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_UsingCarrierMovement");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_UsingCarrierMovement, AnimLayer_UsingCarrierMovement_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_UsingCarrierMovement::AnimLayer_UsingCarrierMovement_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.AnimLayer_WhiteBoxMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerStrafeMovement_C_AnimLayer_WhiteBoxMovement final
{
public:
	struct FPoseLink                              AnimLayer_WhiteBoxMovement_0;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_AnimLayer_WhiteBoxMovement) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_AnimLayer_WhiteBoxMovement");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_AnimLayer_WhiteBoxMovement) == 0x000010, "Wrong size on ABP_PlayerStrafeMovement_C_AnimLayer_WhiteBoxMovement");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_AnimLayer_WhiteBoxMovement, AnimLayer_WhiteBoxMovement_0) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_AnimLayer_WhiteBoxMovement::AnimLayer_WhiteBoxMovement_0' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.BlueprintThreadSafeUpdateAnimation
// 0x0018 (0x0018 - 0x0000)
struct ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation) == 0x000018, "Wrong size on ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000004, "Member 'ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000008, "Member 'ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_BlueprintThreadSafeUpdateAnimation::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.CalcAngleOffset
// 0x0008 (0x0008 - 0x0000)
struct ABP_PlayerStrafeMovement_C_CalcAngleOffset final
{
public:
	int32                                         NewParam;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_CalcAngleOffset) == 0x000004, "Wrong alignment on ABP_PlayerStrafeMovement_C_CalcAngleOffset");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_CalcAngleOffset) == 0x000008, "Wrong size on ABP_PlayerStrafeMovement_C_CalcAngleOffset");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_CalcAngleOffset, NewParam) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_CalcAngleOffset::NewParam' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_CalcAngleOffset, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'ABP_PlayerStrafeMovement_C_CalcAngleOffset::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_CalcAngleOffset, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000005, "Member 'ABP_PlayerStrafeMovement_C_CalcAngleOffset::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_CalcAngleOffset, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000006, "Member 'ABP_PlayerStrafeMovement_C_CalcAngleOffset::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_CalcAngleOffset, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000007, "Member 'ABP_PlayerStrafeMovement_C_CalcAngleOffset::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.DeterminLandingAnimSequence
// 0x0098 (0x0098 - 0x0000)
struct ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence final
{
public:
	class UAnimSequence*                          Temp_object_Variable;                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_2;                            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Temp_object_Variable_3;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Temp_object_Variable_4;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Temp_object_Variable_5;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_1;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_2;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Select_Default_3;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence) == 0x000098, "Wrong size on ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, Temp_object_Variable) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, Temp_bool_Variable) == 0x000008, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, Temp_object_Variable_1) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, Temp_bool_Variable_1) == 0x000018, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, Temp_object_Variable_2) == 0x000020, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, Temp_object_Variable_3) == 0x000028, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, Temp_bool_Variable_2) == 0x000030, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, Temp_object_Variable_4) == 0x000038, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, Temp_object_Variable_5) == 0x000040, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, Temp_bool_Variable_3) == 0x000049, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00004A, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, K2Node_Select_Default) == 0x000050, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, K2Node_Select_Default_1) == 0x000058, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, K2Node_Select_Default_2) == 0x000060, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, K2Node_Select_Default_3) == 0x000068, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, CallFunc_BreakVector_X) == 0x000070, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, CallFunc_BreakVector_Y) == 0x000078, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, CallFunc_BreakVector_Z) == 0x000080, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, CallFunc_Abs_ReturnValue) == 0x000088, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000090, "Member 'ABP_PlayerStrafeMovement_C_DeterminLandingAnimSequence::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.Event_OnPlayerFloatingJumpStageChanged_Event
// 0x0002 (0x0002 - 0x0000)
struct ABP_PlayerStrafeMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event final
{
public:
	ERegularFloatingJumpStage                     NewStage;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     OldStage;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event) == 0x000001, "Wrong alignment on ABP_PlayerStrafeMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event) == 0x000002, "Wrong size on ABP_PlayerStrafeMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event, NewStage) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event::NewStage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event, OldStage) == 0x000001, "Member 'ABP_PlayerStrafeMovement_C_Event_OnPlayerFloatingJumpStageChanged_Event::OldStage' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.ExecuteUbergraph_ABP_PlayerStrafeMovement
// 0x0088 (0x0088 - 0x0000)
struct ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     K2Node_CustomEvent_NewStage;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     K2Node_CustomEvent_OldStage;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue_2;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(ERegularFloatingJumpStage NewStage, ERegularFloatingJumpStage OldStage)> K2Node_CreateDelegate_OutputDelegate; // 0x0030(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_CustomEvent_PrevMode;                       // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_CustomEvent_NewMode;                        // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeterminTransToRightFoot_bTranstoRight;   // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PrepareComponents_ReturnValue;            // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EMovementMode PrevMode, EMovementMode NewMode)> K2Node_CreateDelegate_OutputDelegate_1; // 0x005C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_1;    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_2;    // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement) == 0x000088, "Wrong size on ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, EntryPoint) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, K2Node_CustomEvent_NewStage) == 0x000004, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::K2Node_CustomEvent_NewStage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, K2Node_CustomEvent_OldStage) == 0x000005, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::K2Node_CustomEvent_OldStage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_GetRelevantAnimTime_ReturnValue) == 0x000008, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_GetRelevantAnimTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00000C, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00000D, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Not_PreBool_ReturnValue) == 0x00000E, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000F, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Not_PreBool_ReturnValue_2) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_GetRelevantAnimTime_ReturnValue_1) == 0x000014, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_GetRelevantAnimTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_BooleanAND_ReturnValue_1) == 0x000018, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Not_PreBool_ReturnValue_3) == 0x000019, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_BooleanAND_ReturnValue_2) == 0x00001A, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_SelectFloat_ReturnValue) == 0x000020, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_GetRelevantAnimTime_ReturnValue_2) == 0x000028, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_GetRelevantAnimTime_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x00002C, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x00002D, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_BooleanAND_ReturnValue_3) == 0x00002E, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, K2Node_CreateDelegate_OutputDelegate) == 0x000030, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_VSize_ReturnValue) == 0x000040, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000048, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, K2Node_CustomEvent_PrevMode) == 0x000049, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::K2Node_CustomEvent_PrevMode' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, K2Node_CustomEvent_NewMode) == 0x00004A, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::K2Node_CustomEvent_NewMode' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00004B, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00004C, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00004D, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00004E, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00004F, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_BooleanAND_ReturnValue_4) == 0x000050, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_BooleanAND_ReturnValue_5) == 0x000051, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Not_PreBool_ReturnValue_4) == 0x000052, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_BooleanAND_ReturnValue_6) == 0x000053, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_BooleanAND_ReturnValue_7) == 0x000054, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_BooleanAND_ReturnValue_8) == 0x000055, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000056, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_DeterminTransToRightFoot_bTranstoRight) == 0x000057, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_DeterminTransToRightFoot_bTranstoRight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Not_PreBool_ReturnValue_5) == 0x000058, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_PrepareComponents_ReturnValue) == 0x000059, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_PrepareComponents_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, K2Node_CreateDelegate_OutputDelegate_1) == 0x00005C, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000070, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Greater_DoubleDouble_A_ImplicitCast_1) == 0x000078, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Greater_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement, CallFunc_Greater_DoubleDouble_A_ImplicitCast_2) == 0x000080, "Member 'ABP_PlayerStrafeMovement_C_ExecuteUbergraph_ABP_PlayerStrafeMovement::CallFunc_Greater_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.OnMovementModeChanged_Event
// 0x0002 (0x0002 - 0x0000)
struct ABP_PlayerStrafeMovement_C_OnMovementModeChanged_Event final
{
public:
	EMovementMode                                 PrevMode;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 NewMode;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_OnMovementModeChanged_Event) == 0x000001, "Wrong alignment on ABP_PlayerStrafeMovement_C_OnMovementModeChanged_Event");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_OnMovementModeChanged_Event) == 0x000002, "Wrong size on ABP_PlayerStrafeMovement_C_OnMovementModeChanged_Event");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_OnMovementModeChanged_Event, PrevMode) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_OnMovementModeChanged_Event::PrevMode' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_OnMovementModeChanged_Event, NewMode) == 0x000001, "Member 'ABP_PlayerStrafeMovement_C_OnMovementModeChanged_Event::NewMode' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.PrepareComponents
// 0x0030 (0x0030 - 0x0000)
struct ABP_PlayerStrafeMovement_C_PrepareComponents final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerMoveableComponent_C*          CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerRegularInAirMovementComp_C*   CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerStrafeMovementComponent_C*    CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_PrepareComponents) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_PrepareComponents");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_PrepareComponents) == 0x000030, "Wrong size on ABP_PlayerStrafeMovement_C_PrepareComponents");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_PrepareComponents, ReturnValue) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_PrepareComponents::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_PrepareComponents, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000008, "Member 'ABP_PlayerStrafeMovement_C_PrepareComponents::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_PrepareComponents, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_PrepareComponents::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_PrepareComponents, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'ABP_PlayerStrafeMovement_C_PrepareComponents::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_PrepareComponents, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000020, "Member 'ABP_PlayerStrafeMovement_C_PrepareComponents::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_PrepareComponents, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000028, "Member 'ABP_PlayerStrafeMovement_C_PrepareComponents::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.SelectCardinalDirection
// 0x0078 (0x0078 - 0x0000)
struct ABP_PlayerStrafeMovement_C_SelectCardinalDirection final
{
public:
	ECardinalDirections                           Direction;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_MathExpression_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_MathExpression_ReturnValue_1;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MathExpression_ReturnValue_2;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_MathExpression_ReturnValue_3;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast_1;                     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_SelectCardinalDirection");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection) == 0x000078, "Wrong size on ABP_PlayerStrafeMovement_C_SelectCardinalDirection");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, Direction) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::Direction' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, K2Node_MathExpression_ReturnValue) == 0x000008, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, K2Node_MathExpression_ReturnValue_1) == 0x000018, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::K2Node_MathExpression_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, K2Node_MathExpression_ReturnValue_2) == 0x000020, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::K2Node_MathExpression_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000028, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, K2Node_MathExpression_ReturnValue_3) == 0x000030, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::K2Node_MathExpression_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000038, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, CallFunc_Abs_ReturnValue) == 0x000040, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000048, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, CallFunc_Abs_ReturnValue_1) == 0x000050, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000058, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000060, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, CallFunc_Abs_A_ImplicitCast) == 0x000068, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SelectCardinalDirection, CallFunc_Abs_A_ImplicitCast_1) == 0x000070, "Member 'ABP_PlayerStrafeMovement_C_SelectCardinalDirection::CallFunc_Abs_A_ImplicitCast_1' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.SetUpStartAnim
// 0x0058 (0x0058 - 0x0000)
struct ABP_PlayerStrafeMovement_C_SetUpStartAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	ECardinalDirections                           Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequence_ReturnValue;                  // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_SetUpStartAnim) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_SetUpStartAnim");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_SetUpStartAnim) == 0x000058, "Wrong size on ABP_PlayerStrafeMovement_C_SetUpStartAnim");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStartAnim, Context) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_SetUpStartAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStartAnim, Node) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_SetUpStartAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStartAnim, Temp_byte_Variable) == 0x000020, "Member 'ABP_PlayerStrafeMovement_C_SetUpStartAnim::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStartAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_PlayerStrafeMovement_C_SetUpStartAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStartAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_PlayerStrafeMovement_C_SetUpStartAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStartAnim, K2Node_Select_Default) == 0x000040, "Member 'ABP_PlayerStrafeMovement_C_SetUpStartAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStartAnim, CallFunc_SetSequence_ReturnValue) == 0x000048, "Member 'ABP_PlayerStrafeMovement_C_SetUpStartAnim::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.SetUpStartState
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerStrafeMovement_C_SetUpStartState final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_SetUpStartState) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_SetUpStartState");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_SetUpStartState) == 0x000020, "Wrong size on ABP_PlayerStrafeMovement_C_SetUpStartState");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStartState, Context) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_SetUpStartState::Context' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStartState, Node) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_SetUpStartState::Node' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.SetUpStopAnim
// 0x0058 (0x0058 - 0x0000)
struct ABP_PlayerStrafeMovement_C_SetUpStopAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	ECardinalDirections                           Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequence_ReturnValue;                  // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_SetUpStopAnim) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_SetUpStopAnim");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_SetUpStopAnim) == 0x000058, "Wrong size on ABP_PlayerStrafeMovement_C_SetUpStopAnim");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStopAnim, Context) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_SetUpStopAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStopAnim, Node) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_SetUpStopAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStopAnim, Temp_byte_Variable) == 0x000020, "Member 'ABP_PlayerStrafeMovement_C_SetUpStopAnim::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStopAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_PlayerStrafeMovement_C_SetUpStopAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStopAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_PlayerStrafeMovement_C_SetUpStopAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStopAnim, K2Node_Select_Default) == 0x000040, "Member 'ABP_PlayerStrafeMovement_C_SetUpStopAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_SetUpStopAnim, CallFunc_SetSequence_ReturnValue) == 0x000048, "Member 'ABP_PlayerStrafeMovement_C_SetUpStopAnim::CallFunc_SetSequence_ReturnValue' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.UpdateCycleAnim
// 0x0058 (0x0058 - 0x0000)
struct ABP_PlayerStrafeMovement_C_UpdateCycleAnim final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	ECardinalDirections                           Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0028(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_UpdateCycleAnim) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_UpdateCycleAnim");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_UpdateCycleAnim) == 0x000058, "Wrong size on ABP_PlayerStrafeMovement_C_UpdateCycleAnim");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateCycleAnim, Context) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_UpdateCycleAnim::Context' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateCycleAnim, Node) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_UpdateCycleAnim::Node' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateCycleAnim, Temp_byte_Variable) == 0x000020, "Member 'ABP_PlayerStrafeMovement_C_UpdateCycleAnim::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateCycleAnim, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000028, "Member 'ABP_PlayerStrafeMovement_C_UpdateCycleAnim::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateCycleAnim, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000038, "Member 'ABP_PlayerStrafeMovement_C_UpdateCycleAnim::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateCycleAnim, K2Node_Select_Default) == 0x000040, "Member 'ABP_PlayerStrafeMovement_C_UpdateCycleAnim::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateCycleAnim, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000048, "Member 'ABP_PlayerStrafeMovement_C_UpdateCycleAnim::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.UpdateEssentialStates
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerStrafeMovement_C_UpdateEssentialStates final
{
public:
	ERegularLocomotionType                        Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELocomotionGait                               Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELocomotionGait                               Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELocomotionGait                               Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELocomotionGait                               Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELocomotionGait                               Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Locomotion_GroundState_C> K2Node_DynamicCast_AsBPI_Locomotion_Ground_State; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 CallFunc_BPI_Get_CurrentGroundStates_PawnMovementMode; // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        CallFunc_BPI_Get_CurrentGroundStates_AllowedGait;  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerMovementScenarios                      CallFunc_BPI_Get_CurrentGroundStates_MovementScenario; // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDeviceKeyType                           CallFunc_BPI_Get_CurrentGroundStates_CurInputDeviceKeyType; // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELocomotionGait                               K2Node_Select_Default;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_UpdateEssentialStates");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates) == 0x000020, "Wrong size on ABP_PlayerStrafeMovement_C_UpdateEssentialStates");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, Temp_byte_Variable) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, Temp_byte_Variable_1) == 0x000001, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, Temp_byte_Variable_2) == 0x000002, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, Temp_byte_Variable_3) == 0x000003, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, Temp_byte_Variable_4) == 0x000004, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, Temp_byte_Variable_5) == 0x000005, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, K2Node_DynamicCast_AsBPI_Locomotion_Ground_State) == 0x000008, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::K2Node_DynamicCast_AsBPI_Locomotion_Ground_State' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, CallFunc_BPI_Get_CurrentGroundStates_PawnMovementMode) == 0x000019, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::CallFunc_BPI_Get_CurrentGroundStates_PawnMovementMode' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, CallFunc_BPI_Get_CurrentGroundStates_AllowedGait) == 0x00001A, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::CallFunc_BPI_Get_CurrentGroundStates_AllowedGait' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, CallFunc_BPI_Get_CurrentGroundStates_MovementScenario) == 0x00001B, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::CallFunc_BPI_Get_CurrentGroundStates_MovementScenario' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, CallFunc_BPI_Get_CurrentGroundStates_CurInputDeviceKeyType) == 0x00001C, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::CallFunc_BPI_Get_CurrentGroundStates_CurInputDeviceKeyType' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialStates, K2Node_Select_Default) == 0x00001D, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialStates::K2Node_Select_Default' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.UpdateEssentialValues
// 0x0008 (0x0008 - 0x0000)
struct ABP_PlayerStrafeMovement_C_UpdateEssentialValues final
{
public:
	double                                        CurrentMaxSpeed;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_UpdateEssentialValues) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_UpdateEssentialValues");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_UpdateEssentialValues) == 0x000008, "Wrong size on ABP_PlayerStrafeMovement_C_UpdateEssentialValues");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateEssentialValues, CurrentMaxSpeed) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_UpdateEssentialValues::CurrentMaxSpeed' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.UpdateMovementData
// 0x0040 (0x0040 - 0x0000)
struct ABP_PlayerStrafeMovement_C_UpdateMovementData final
{
public:
	TScriptInterface<class IBPI_Locomotion_GroundState_C> K2Node_DynamicCast_AsBPI_Locomotion_Ground_State; // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BPI_Get_ConfigData_WalkSpeed;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BPI_Get_ConfigData_RunSpeed;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BPI_Get_ConfigData_SprintSpeed;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAllowSpeed_InAllowWalkSpeed_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAllowSpeed_InAllowRunSpeed_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAllowSpeed_InAllowSprintSpeed_ImplicitCast; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_UpdateMovementData) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_UpdateMovementData");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_UpdateMovementData) == 0x000040, "Wrong size on ABP_PlayerStrafeMovement_C_UpdateMovementData");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateMovementData, K2Node_DynamicCast_AsBPI_Locomotion_Ground_State) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_UpdateMovementData::K2Node_DynamicCast_AsBPI_Locomotion_Ground_State' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateMovementData, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_UpdateMovementData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateMovementData, CallFunc_BPI_Get_ConfigData_WalkSpeed) == 0x000018, "Member 'ABP_PlayerStrafeMovement_C_UpdateMovementData::CallFunc_BPI_Get_ConfigData_WalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateMovementData, CallFunc_BPI_Get_ConfigData_RunSpeed) == 0x000020, "Member 'ABP_PlayerStrafeMovement_C_UpdateMovementData::CallFunc_BPI_Get_ConfigData_RunSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateMovementData, CallFunc_BPI_Get_ConfigData_SprintSpeed) == 0x000028, "Member 'ABP_PlayerStrafeMovement_C_UpdateMovementData::CallFunc_BPI_Get_ConfigData_SprintSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateMovementData, CallFunc_SetAllowSpeed_InAllowWalkSpeed_ImplicitCast) == 0x000030, "Member 'ABP_PlayerStrafeMovement_C_UpdateMovementData::CallFunc_SetAllowSpeed_InAllowWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateMovementData, CallFunc_SetAllowSpeed_InAllowRunSpeed_ImplicitCast) == 0x000034, "Member 'ABP_PlayerStrafeMovement_C_UpdateMovementData::CallFunc_SetAllowSpeed_InAllowRunSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateMovementData, CallFunc_SetAllowSpeed_InAllowSprintSpeed_ImplicitCast) == 0x000038, "Member 'ABP_PlayerStrafeMovement_C_UpdateMovementData::CallFunc_SetAllowSpeed_InAllowSprintSpeed_ImplicitCast' has a wrong offset!");

// Function ABP_PlayerStrafeMovement.ABP_PlayerStrafeMovement_C.UpdateStrafeData
// 0x0040 (0x0040 - 0x0000)
struct ABP_PlayerStrafeMovement_C_UpdateStrafeData final
{
public:
	int32                                         AngleRef;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcAngleOffset_NewParam;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_ReturnValue_1;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECardinalDirections                           CallFunc_SelectCardinalDirection_Direction;        // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_Angle_ImplicitCast;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_VelocityDirectionAngle_ImplicitCast; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerStrafeMovement_C_UpdateStrafeData) == 0x000008, "Wrong alignment on ABP_PlayerStrafeMovement_C_UpdateStrafeData");
static_assert(sizeof(ABP_PlayerStrafeMovement_C_UpdateStrafeData) == 0x000040, "Wrong size on ABP_PlayerStrafeMovement_C_UpdateStrafeData");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateStrafeData, AngleRef) == 0x000000, "Member 'ABP_PlayerStrafeMovement_C_UpdateStrafeData::AngleRef' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateStrafeData, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000008, "Member 'ABP_PlayerStrafeMovement_C_UpdateStrafeData::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateStrafeData, CallFunc_NormalizeAxis_ReturnValue) == 0x000010, "Member 'ABP_PlayerStrafeMovement_C_UpdateStrafeData::CallFunc_NormalizeAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateStrafeData, CallFunc_CalcAngleOffset_NewParam) == 0x000014, "Member 'ABP_PlayerStrafeMovement_C_UpdateStrafeData::CallFunc_CalcAngleOffset_NewParam' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateStrafeData, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'ABP_PlayerStrafeMovement_C_UpdateStrafeData::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateStrafeData, CallFunc_NormalizeAxis_ReturnValue_1) == 0x000020, "Member 'ABP_PlayerStrafeMovement_C_UpdateStrafeData::CallFunc_NormalizeAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateStrafeData, CallFunc_SelectCardinalDirection_Direction) == 0x000024, "Member 'ABP_PlayerStrafeMovement_C_UpdateStrafeData::CallFunc_SelectCardinalDirection_Direction' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateStrafeData, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000028, "Member 'ABP_PlayerStrafeMovement_C_UpdateStrafeData::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateStrafeData, CallFunc_NormalizeAxis_Angle_ImplicitCast) == 0x000030, "Member 'ABP_PlayerStrafeMovement_C_UpdateStrafeData::CallFunc_NormalizeAxis_Angle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_PlayerStrafeMovement_C_UpdateStrafeData, K2Node_VariableSet_VelocityDirectionAngle_ImplicitCast) == 0x000038, "Member 'ABP_PlayerStrafeMovement_C_UpdateStrafeData::K2Node_VariableSet_VelocityDirectionAngle_ImplicitCast' has a wrong offset!");

}

