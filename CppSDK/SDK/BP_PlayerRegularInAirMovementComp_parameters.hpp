#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerRegularInAirMovementComp

#include "Basic.hpp"

#include "X6Game_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_ActivateJumpFeature
// 0x000C (0x000C - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_ActivateJumpFeature final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Remove_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_ActivateJumpFeature) == 0x000004, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_ActivateJumpFeature");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_ActivateJumpFeature) == 0x00000C, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_ActivateJumpFeature");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_ActivateJumpFeature, Tag) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_ActivateJumpFeature::Tag' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_ActivateJumpFeature, CallFunc_Set_Remove_ReturnValue) == 0x000008, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_ActivateJumpFeature::CallFunc_Set_Remove_ReturnValue' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_CanActivateJumpFeature
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_CanActivateJumpFeature final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_IsEmpty_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_CanActivateJumpFeature) == 0x000001, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_CanActivateJumpFeature");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_CanActivateJumpFeature) == 0x000002, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_CanActivateJumpFeature");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_CanActivateJumpFeature, ReturnValue) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_CanActivateJumpFeature::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_CanActivateJumpFeature, CallFunc_Set_IsEmpty_ReturnValue) == 0x000001, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_CanActivateJumpFeature::CallFunc_Set_IsEmpty_ReturnValue' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_CanCrash
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_CanCrash final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_CanCrash) == 0x000001, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_CanCrash");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_CanCrash) == 0x000001, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_CanCrash");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_CanCrash, Ret) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_CanCrash::Ret' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_CanJump
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_CanJump final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_CanJump) == 0x000001, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_CanJump");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_CanJump) == 0x000001, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_CanJump");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_CanJump, Ret) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_CanJump::Ret' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_DeactivateJumpFeature
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_DeactivateJumpFeature final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_DeactivateJumpFeature) == 0x000004, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_DeactivateJumpFeature");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_DeactivateJumpFeature) == 0x000008, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_DeactivateJumpFeature");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_DeactivateJumpFeature, Tag) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_DeactivateJumpFeature::Tag' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_DoFloat
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_DoFloat final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_DoFloat) == 0x000001, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_DoFloat");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_DoFloat) == 0x000001, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_DoFloat");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_DoFloat, bForce) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_DoFloat::bForce' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_DoJump
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_DoJump final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularJumpMode                              JumpMode;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_DoJump) == 0x000001, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_DoJump");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_DoJump) == 0x000002, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_DoJump");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_DoJump, bForce) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_DoJump::bForce' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_DoJump, JumpMode) == 0x000001, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_DoJump::JumpMode' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_IsNormalJumpOnGround
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_IsNormalJumpOnGround final
{
public:
	bool                                          IsNormalJumpOnGround;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_IsNormalJumpOnGround) == 0x000001, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_IsNormalJumpOnGround");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_IsNormalJumpOnGround) == 0x000001, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_IsNormalJumpOnGround");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_IsNormalJumpOnGround, IsNormalJumpOnGround) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_IsNormalJumpOnGround::IsNormalJumpOnGround' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue) == 0x000008, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue) == 0x000008, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue, Value) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue::Value' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_ModifyOwnerJumpStageConfigByDA
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_ModifyOwnerJumpStageConfigByDA final
{
public:
	class UBP_JumpStage_ConfigTemplate_C*         NewDataAsset;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_JumpStage_ConfigTemplate_C*         OldDataAsset;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_ModifyOwnerJumpStageConfigByDA) == 0x000008, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_ModifyOwnerJumpStageConfigByDA");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_ModifyOwnerJumpStageConfigByDA) == 0x000010, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_ModifyOwnerJumpStageConfigByDA");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_ModifyOwnerJumpStageConfigByDA, NewDataAsset) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_ModifyOwnerJumpStageConfigByDA::NewDataAsset' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_ModifyOwnerJumpStageConfigByDA, OldDataAsset) == 0x000008, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_ModifyOwnerJumpStageConfigByDA::OldDataAsset' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_Multicast_ChangeJumpStage
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_Multicast_ChangeJumpStage final
{
public:
	ERegularFloatingJumpStage                     NewStage;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceUpdate;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_Multicast_ChangeJumpStage) == 0x000001, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_Multicast_ChangeJumpStage");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_Multicast_ChangeJumpStage) == 0x000002, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_Multicast_ChangeJumpStage");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_Multicast_ChangeJumpStage, NewStage) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_Multicast_ChangeJumpStage::NewStage' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_Multicast_ChangeJumpStage, bForceUpdate) == 0x000001, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_Multicast_ChangeJumpStage::bForceUpdate' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_OverrideCurrentGravityScale
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_OverrideCurrentGravityScale final
{
public:
	double                                        G;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_OverrideCurrentGravityScale) == 0x000008, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_OverrideCurrentGravityScale");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_OverrideCurrentGravityScale) == 0x000008, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_OverrideCurrentGravityScale");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_OverrideCurrentGravityScale, G) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_OverrideCurrentGravityScale::G' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_SetEnableSendJumpStageRPC
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSendJumpStageRPC final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSendJumpStageRPC) == 0x000001, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSendJumpStageRPC");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSendJumpStageRPC) == 0x000001, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSendJumpStageRPC");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSendJumpStageRPC, bEnable) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSendJumpStageRPC::bEnable' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_SetEnableSpecialJumpAnim
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSpecialJumpAnim final
{
public:
	bool                                          bEnableSpecialJumpAnim;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimaryDataAsset*                      SpecialJumpDA;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSpecialJumpAnim) == 0x000008, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSpecialJumpAnim");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSpecialJumpAnim) == 0x000010, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSpecialJumpAnim");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSpecialJumpAnim, bEnableSpecialJumpAnim) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSpecialJumpAnim::bEnableSpecialJumpAnim' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSpecialJumpAnim, SpecialJumpDA) == 0x000008, "Member 'BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSpecialJumpAnim::SpecialJumpDA' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BPI_Get_CurrentInAirStates
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates final
{
public:
	ERegularFloatingJumpStage                     FallStage;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInSpecialJumpAnim;                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularJumpMode                              RegularJumpMode;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumpingInAir;                                    // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates) == 0x000001, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates) == 0x000004, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates, FallStage) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates::FallStage' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates, IsInSpecialJumpAnim) == 0x000001, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates::IsInSpecialJumpAnim' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates, RegularJumpMode) == 0x000002, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates::RegularJumpMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates, IsJumpingInAir) == 0x000003, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates::IsJumpingInAir' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BPI_Get_CurrentInAirValues
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirValues final
{
public:
	double                                        InCurrentHeight;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimaryDataAsset*                      SpecialJumpDA;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirValues) == 0x000008, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirValues");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirValues) == 0x000010, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirValues");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirValues, InCurrentHeight) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirValues::InCurrentHeight' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirValues, SpecialJumpDA) == 0x000008, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirValues::SpecialJumpDA' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BPI_Get_EssentialValues
// 0x0040 (0x0040 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InCurrentAcceleration;                             // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InMaxAcceleration;                                 // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InTurnAroundAngle;                                 // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues) == 0x000008, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues) == 0x000040, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues, InVelocity) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues::InVelocity' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues, InCurrentAcceleration) == 0x000018, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues::InCurrentAcceleration' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues, InMaxAcceleration) == 0x000030, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues::InMaxAcceleration' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues, InTurnAroundAngle) == 0x000038, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues::InTurnAroundAngle' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BPI_Get_MaxSpeedValues
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues final
{
public:
	double                                        CurMinAnalogWalkSpeed;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurConfigMaxSpeed;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurActualMaxSpeed;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues) == 0x000008, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues) == 0x000018, "Wrong size on BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues, CurMinAnalogWalkSpeed) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues::CurMinAnalogWalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues, CurConfigMaxSpeed) == 0x000008, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues::CurConfigMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues, CurActualMaxSpeed) == 0x000010, "Member 'BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues::CurActualMaxSpeed' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.ExecuteUbergraph_BP_PlayerRegularInAirMovementComp
// 0x0030 (0x0030 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     K2Node_Event_FallStage;                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsSlide;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     K2Node_CustomEvent_NewStage;                       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bForceUpdate;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ENetRole                                      CallFunc_GetLocalRole_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMStateMachineContext_InAir*           CallFunc_GetStateMachineContext_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp) == 0x000008, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp) == 0x000030, "Wrong size on BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, EntryPoint) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, K2Node_Event_FallStage) == 0x000004, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::K2Node_Event_FallStage' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, K2Node_Event_IsSlide) == 0x000005, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::K2Node_Event_IsSlide' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, K2Node_CustomEvent_NewStage) == 0x000006, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::K2Node_CustomEvent_NewStage' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, K2Node_CustomEvent_bForceUpdate) == 0x000007, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::K2Node_CustomEvent_bForceUpdate' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, CallFunc_GetLocalRole_ReturnValue) == 0x000010, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::CallFunc_GetLocalRole_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, CallFunc_GetStateMachineContext_ReturnValue) == 0x000018, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::CallFunc_GetStateMachineContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000020, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, CallFunc_IsValid_ReturnValue_1) == 0x000022, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, CallFunc_IsValid_ReturnValue_2) == 0x000023, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, CallFunc_BooleanAND_ReturnValue_1) == 0x000025, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.MulticastRPC_ChangeJumpStage
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage final
{
public:
	ERegularFloatingJumpStage                     NewStage;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceUpdate;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENetRole                                      CallFunc_GetLocalRole_ReturnValue;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage) == 0x000008, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage) == 0x000018, "Wrong size on BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage, NewStage) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage::NewStage' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage, bForceUpdate) == 0x000001, "Member 'BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage::bForceUpdate' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage, CallFunc_GetLocalRole_ReturnValue) == 0x000011, "Member 'BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage::CallFunc_GetLocalRole_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage, CallFunc_BooleanAND_ReturnValue_1) == 0x000014, "Member 'BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_ReceiveTick");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerRegularInAirMovementComp_C_ReceiveTick");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.UpdateFallState
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_UpdateFallState final
{
public:
	ERegularFloatingJumpStage                     FallStage;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSlide;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_UpdateFallState) == 0x000001, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_UpdateFallState");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_UpdateFallState) == 0x000002, "Wrong size on BP_PlayerRegularInAirMovementComp_C_UpdateFallState");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_UpdateFallState, FallStage) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_UpdateFallState::FallStage' has a wrong offset!");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_UpdateFallState, IsSlide) == 0x000001, "Member 'BP_PlayerRegularInAirMovementComp_C_UpdateFallState::IsSlide' has a wrong offset!");

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerRegularInAirMovementComp_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerRegularInAirMovementComp_C_GetModuleName) == 0x000008, "Wrong alignment on BP_PlayerRegularInAirMovementComp_C_GetModuleName");
static_assert(sizeof(BP_PlayerRegularInAirMovementComp_C_GetModuleName) == 0x000010, "Wrong size on BP_PlayerRegularInAirMovementComp_C_GetModuleName");
static_assert(offsetof(BP_PlayerRegularInAirMovementComp_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_PlayerRegularInAirMovementComp_C_GetModuleName::ReturnValue' has a wrong offset!");

}

