#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MainCharacterInAirMovementComp

#include "Basic.hpp"

#include "EInt32PlayerPawnStateTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_PlayerRegularInAirMovementComp_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MainCharacterInAirMovementComp.BP_MainCharacterInAirMovementComp_C
// 0x0258 (0x0548 - 0x02F0)
class UBP_MainCharacterInAirMovementComp_C final : public UBP_PlayerRegularInAirMovementComp_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MainCharacterInAirMovementComp_C; // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_FloatingJumpAnimConfig_C*           BP_FloatingJumpAnimSet;                            // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnFloatSuitAbilityChanged;                         // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bEnableDrawCurve;                                  // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurJumpCurveLocation;                              // 0x0318(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurJumpCurveAcceleration;                          // 0x0330(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurJumpCurveVelocity;                              // 0x0348(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurJumpCurveDisplacementXYLength;                  // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurJumpCurveDuration;                              // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        CurJumpCurveLocationTrack;                         // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bCanReleaseToFall;                                 // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      NiagaraJumpPromptLine_Buttom;                      // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableJumpPromptLineFeature;                      // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      NiagaraJumpPromptLine_Middle;                      // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NiagaraJumpPromptLine_Top;                         // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NiagaraJumpPromptAimPoint;                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableDebugDrawJumpPromptLine;                  // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerMantleComponent_C*            MantleComp;                                        // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         BP_MaxSpeed_Walk;                                  // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BP_MaxSpeed_Run;                                   // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMultiCurve*                            BP_SlopeMoveCurve;                                 // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FString                                 BP_SlopeMoveCurve_GeneralMaxSpeedFactor_Name;      // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UBP_MainCharacterRegularMovementComp_C* MainCharacterRMComp;                               // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CurCharacter;                                      // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_JumpCurveCanShow;                               // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableDrawCurve_RealTime;                         // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F2[0x6];                                      // 0x03F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_JumpPromptLine_RealTime_AppearSpeed;            // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_JumpPromptLine_RealTime_DisappearSpeed;         // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<class FName>                             BP_EnableJumpPromptLineFeatureByTagSet;            // 0x0408(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSet<EInt32PlayerPawnStateTypes>              BP_PlayerStatesWhichCanHiddenJumpPromptLine;       // 0x0458(0x0050)(Edit, BlueprintVisible)
	bool                                          BP_HasPlayerStateToHideJumpCurve;                  // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<EInt32PlayerPawnStateTypes>              BP_HideJumpPromptLineFeatureByPlayerStatesSet;     // 0x04B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        BP_MinAdvanceTime;                                 // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BP_JumpPromptLineProcessorClass;                   // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerJumpPromptLineProcessor_C*    CurJumpPromptLineProcessor;                        // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_UseSpecifyFoot;                                 // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_SpecifyStartToRightFoot;                        // 0x0519(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51A[0x6];                                      // 0x051A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BP_Replicated_PlayerFloatSetting;                  // 0x0520(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	bool                                          BP_Replicated_InPhxRebirthState;                   // 0x0530(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsPhxFloat;                                     // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_PhxUseJumpInAirToFloat;                         // 0x0532(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_533[0x5];                                      // 0x0533(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_HoldHandLeaderInput;                            // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_SkipFloatEnterAnim;                             // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_SkipJumpInAirAnim;                              // 0x0541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_GetumpPromptLineProcessor(class UBP_PlayerJumpPromptLineProcessor_C** CurJumpPromptLineProcessor_0);
	void BP_OnMulticast_JumpRelease();
	void BP_OnMulticast_PhxLeaderEnterFloat(bool bPhxFloat, int32 FloatCount);
	void BP_OnMulticast_PlayPhxSwitchAnim();
	void BP_TryPointToPointJumping(const struct FVector& SourcePoint, const struct FVector& TargetPoint, float SteppingSimulationTime, float CosntGravityZ, float MaxSimulationTime, bool EnableDebugDraw, bool* bCanJump, struct FVector* OutVelocity);
	void CaculateSinglePredictLineByGravityScaleCurve(TArray<struct FVector>& CurveTrack, double JumpVelocityZ, double InitVelocityZ, double InitStartTime, double TargetVelocityZ, class UCurveFloat* UpGravityScaleCurve, class UCurveFloat* DownGravityScaleCurve, double AddtiveUpGravityScale, double AddtiveDownGravityScale, const struct FVector& CurCharacterVelocity, double AdvanceTime, double ConstGravityZ, double MaxSimulationTime, struct FVector* EndLocation);
	void CanDrawPredictJumpCurve(bool* Ret);
	void CanDrawRealTimeJumpCurve(double CurrentSpeedXY, bool* Ret);
	void DebugDrawPredicJumpCurveLineInWorldSpace(const struct FVector& WorldStartLocation, TArray<struct FVector>& CurveTrack, const struct FLinearColor& LineColor);
	void EnableJumpPromptLineFeature(bool bEnable, class FName Tag);
	void ExecuteUbergraph_BP_MainCharacterInAirMovementComp(int32 EntryPoint);
	void Multicast_JumpRelease();
	void Multicast_PhxLeaderEnterFloat(bool bPhxFloat, int32 FloatCount);
	void Multicast_PlayPhxSwitchAnim();
	void OnEnableJumpPromptLineFeatureComplete_Event();
	void OnRep_BP_Replicated_PlayerFloatSetting();
	void ReceiveBeginPlay();
	void ReceivePostPhysicsTick(float DeltaTime);
	void ReceiveTick(float DeltaSeconds);
	void SweepLastPostionByProjectilePath(TArray<struct FVector>& RelativeCurvePostitionPath, const struct FVector& AbsoluteCurveStartLocation, TArray<struct FVector>* RealCurvePositionTrace, struct FHitResult* HitResult, double* CurveLength);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MainCharacterInAirMovementComp_C">();
	}
	static class UBP_MainCharacterInAirMovementComp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MainCharacterInAirMovementComp_C>();
	}
};
static_assert(alignof(UBP_MainCharacterInAirMovementComp_C) == 0x000008, "Wrong alignment on UBP_MainCharacterInAirMovementComp_C");
static_assert(sizeof(UBP_MainCharacterInAirMovementComp_C) == 0x000548, "Wrong size on UBP_MainCharacterInAirMovementComp_C");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, UberGraphFrame_BP_MainCharacterInAirMovementComp_C) == 0x0002F0, "Member 'UBP_MainCharacterInAirMovementComp_C::UberGraphFrame_BP_MainCharacterInAirMovementComp_C' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_FloatingJumpAnimSet) == 0x0002F8, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_FloatingJumpAnimSet' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, OnFloatSuitAbilityChanged) == 0x000300, "Member 'UBP_MainCharacterInAirMovementComp_C::OnFloatSuitAbilityChanged' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, bEnableDrawCurve) == 0x000310, "Member 'UBP_MainCharacterInAirMovementComp_C::bEnableDrawCurve' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, CurJumpCurveLocation) == 0x000318, "Member 'UBP_MainCharacterInAirMovementComp_C::CurJumpCurveLocation' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, CurJumpCurveAcceleration) == 0x000330, "Member 'UBP_MainCharacterInAirMovementComp_C::CurJumpCurveAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, CurJumpCurveVelocity) == 0x000348, "Member 'UBP_MainCharacterInAirMovementComp_C::CurJumpCurveVelocity' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, CurJumpCurveDisplacementXYLength) == 0x000360, "Member 'UBP_MainCharacterInAirMovementComp_C::CurJumpCurveDisplacementXYLength' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, CurJumpCurveDuration) == 0x000368, "Member 'UBP_MainCharacterInAirMovementComp_C::CurJumpCurveDuration' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, CurJumpCurveLocationTrack) == 0x000370, "Member 'UBP_MainCharacterInAirMovementComp_C::CurJumpCurveLocationTrack' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, bCanReleaseToFall) == 0x000380, "Member 'UBP_MainCharacterInAirMovementComp_C::bCanReleaseToFall' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, NiagaraJumpPromptLine_Buttom) == 0x000388, "Member 'UBP_MainCharacterInAirMovementComp_C::NiagaraJumpPromptLine_Buttom' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, bEnableJumpPromptLineFeature) == 0x000390, "Member 'UBP_MainCharacterInAirMovementComp_C::bEnableJumpPromptLineFeature' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, NiagaraJumpPromptLine_Middle) == 0x000398, "Member 'UBP_MainCharacterInAirMovementComp_C::NiagaraJumpPromptLine_Middle' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, NiagaraJumpPromptLine_Top) == 0x0003A0, "Member 'UBP_MainCharacterInAirMovementComp_C::NiagaraJumpPromptLine_Top' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, NiagaraJumpPromptAimPoint) == 0x0003A8, "Member 'UBP_MainCharacterInAirMovementComp_C::NiagaraJumpPromptAimPoint' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_EnableDebugDrawJumpPromptLine) == 0x0003B0, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_EnableDebugDrawJumpPromptLine' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, MantleComp) == 0x0003B8, "Member 'UBP_MainCharacterInAirMovementComp_C::MantleComp' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_MaxSpeed_Walk) == 0x0003C0, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_MaxSpeed_Walk' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_MaxSpeed_Run) == 0x0003C4, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_MaxSpeed_Run' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_SlopeMoveCurve) == 0x0003C8, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_SlopeMoveCurve' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_SlopeMoveCurve_GeneralMaxSpeedFactor_Name) == 0x0003D0, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_SlopeMoveCurve_GeneralMaxSpeedFactor_Name' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, MainCharacterRMComp) == 0x0003E0, "Member 'UBP_MainCharacterInAirMovementComp_C::MainCharacterRMComp' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, CurCharacter) == 0x0003E8, "Member 'UBP_MainCharacterInAirMovementComp_C::CurCharacter' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_JumpCurveCanShow) == 0x0003F0, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_JumpCurveCanShow' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, bEnableDrawCurve_RealTime) == 0x0003F1, "Member 'UBP_MainCharacterInAirMovementComp_C::bEnableDrawCurve_RealTime' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_JumpPromptLine_RealTime_AppearSpeed) == 0x0003F8, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_JumpPromptLine_RealTime_AppearSpeed' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_JumpPromptLine_RealTime_DisappearSpeed) == 0x000400, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_JumpPromptLine_RealTime_DisappearSpeed' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_EnableJumpPromptLineFeatureByTagSet) == 0x000408, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_EnableJumpPromptLineFeatureByTagSet' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_PlayerStatesWhichCanHiddenJumpPromptLine) == 0x000458, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_PlayerStatesWhichCanHiddenJumpPromptLine' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_HasPlayerStateToHideJumpCurve) == 0x0004A8, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_HasPlayerStateToHideJumpCurve' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_HideJumpPromptLineFeatureByPlayerStatesSet) == 0x0004B0, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_HideJumpPromptLineFeatureByPlayerStatesSet' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_MinAdvanceTime) == 0x000500, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_MinAdvanceTime' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_JumpPromptLineProcessorClass) == 0x000508, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_JumpPromptLineProcessorClass' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, CurJumpPromptLineProcessor) == 0x000510, "Member 'UBP_MainCharacterInAirMovementComp_C::CurJumpPromptLineProcessor' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_UseSpecifyFoot) == 0x000518, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_UseSpecifyFoot' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_SpecifyStartToRightFoot) == 0x000519, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_SpecifyStartToRightFoot' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_Replicated_PlayerFloatSetting) == 0x000520, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_Replicated_PlayerFloatSetting' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_Replicated_InPhxRebirthState) == 0x000530, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_Replicated_InPhxRebirthState' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_IsPhxFloat) == 0x000531, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_IsPhxFloat' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_PhxUseJumpInAirToFloat) == 0x000532, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_PhxUseJumpInAirToFloat' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_HoldHandLeaderInput) == 0x000538, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_HoldHandLeaderInput' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_SkipFloatEnterAnim) == 0x000540, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_SkipFloatEnterAnim' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterInAirMovementComp_C, BP_SkipJumpInAirAnim) == 0x000541, "Member 'UBP_MainCharacterInAirMovementComp_C::BP_SkipJumpInAirAnim' has a wrong offset!");

}

