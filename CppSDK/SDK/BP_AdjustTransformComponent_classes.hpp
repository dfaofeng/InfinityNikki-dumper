#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AdjustTransformComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "X6Game_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AdjustTransformComponent.BP_AdjustTransformComponent_C
// 0x00B8 (0x0160 - 0x00A8)
class UBP_AdjustTransformComponent_C final : public UX6ActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMulticastInlineDelegate<void()>              AdjustTransformStartDelegate;                      // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftObjectPtr<class UPrimaryDataAsset>       BP_Data;                                           // 0x00C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	double                                        BP_MaxStepDistance;                                // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_WarpingAngle;                                   // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_WarpingDistance;                                // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MinSyncAngle;                                   // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MinSyncDistance;                                // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            BP_ReplantSpeedCurve;                              // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            BP_ReplantHeightCurve;                             // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ProceduralPlayRatio;                            // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_LerpRotSpeed;                                   // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_LerpLocSpeed;                                   // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                BP_WarpingAngleLimitList;                          // 0x0138(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           KeepAM;                                            // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_T2Npc_SyncData_Template_C*          BP_OverrideSyncDataTable;                          // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            BP_LerpCurve;                                      // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BP_DebugAdjust();
	void BP_DebugGetBase(class AActor** base);
	void BP_DebugRotation(double Angle);
	void ExecuteUbergraph_BP_AdjustTransformComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AdjustTransformComponent_C">();
	}
	static class UBP_AdjustTransformComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AdjustTransformComponent_C>();
	}
};
static_assert(alignof(UBP_AdjustTransformComponent_C) == 0x000008, "Wrong alignment on UBP_AdjustTransformComponent_C");
static_assert(sizeof(UBP_AdjustTransformComponent_C) == 0x000160, "Wrong size on UBP_AdjustTransformComponent_C");
static_assert(offsetof(UBP_AdjustTransformComponent_C, UberGraphFrame) == 0x0000A8, "Member 'UBP_AdjustTransformComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, AdjustTransformStartDelegate) == 0x0000B0, "Member 'UBP_AdjustTransformComponent_C::AdjustTransformStartDelegate' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_Data) == 0x0000C0, "Member 'UBP_AdjustTransformComponent_C::BP_Data' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_MaxStepDistance) == 0x0000E8, "Member 'UBP_AdjustTransformComponent_C::BP_MaxStepDistance' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_WarpingAngle) == 0x0000F0, "Member 'UBP_AdjustTransformComponent_C::BP_WarpingAngle' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_WarpingDistance) == 0x0000F8, "Member 'UBP_AdjustTransformComponent_C::BP_WarpingDistance' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_MinSyncAngle) == 0x000100, "Member 'UBP_AdjustTransformComponent_C::BP_MinSyncAngle' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_MinSyncDistance) == 0x000108, "Member 'UBP_AdjustTransformComponent_C::BP_MinSyncDistance' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_ReplantSpeedCurve) == 0x000110, "Member 'UBP_AdjustTransformComponent_C::BP_ReplantSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_ReplantHeightCurve) == 0x000118, "Member 'UBP_AdjustTransformComponent_C::BP_ReplantHeightCurve' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_ProceduralPlayRatio) == 0x000120, "Member 'UBP_AdjustTransformComponent_C::BP_ProceduralPlayRatio' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_LerpRotSpeed) == 0x000128, "Member 'UBP_AdjustTransformComponent_C::BP_LerpRotSpeed' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_LerpLocSpeed) == 0x000130, "Member 'UBP_AdjustTransformComponent_C::BP_LerpLocSpeed' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_WarpingAngleLimitList) == 0x000138, "Member 'UBP_AdjustTransformComponent_C::BP_WarpingAngleLimitList' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, KeepAM) == 0x000148, "Member 'UBP_AdjustTransformComponent_C::KeepAM' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_OverrideSyncDataTable) == 0x000150, "Member 'UBP_AdjustTransformComponent_C::BP_OverrideSyncDataTable' has a wrong offset!");
static_assert(offsetof(UBP_AdjustTransformComponent_C, BP_LerpCurve) == 0x000158, "Member 'UBP_AdjustTransformComponent_C::BP_LerpCurve' has a wrong offset!");

}

