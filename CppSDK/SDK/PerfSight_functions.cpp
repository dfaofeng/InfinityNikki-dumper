#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PerfSight

#include "Basic.hpp"

#include "PerfSight_classes.hpp"
#include "PerfSight_parameters.hpp"


namespace SDK
{

// Function PerfSight.PerfSightHelper.BeginExclude
// (Final, Native, Static, Public, BlueprintCallable)

void UPerfSightHelper::BeginExclude()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "BeginExclude");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.BeginExtTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    TagName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::BeginExtTag(const class FString& TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "BeginExtTag");

	Params::PerfSightHelper_BeginExtTag Parms{};

	Parms.TagName = std::move(TagName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.BeginTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    TagName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::BeginTag(const class FString& TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "BeginTag");

	Params::PerfSightHelper_BeginTag Parms{};

	Parms.TagName = std::move(TagName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.BeginTupleWrap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::BeginTupleWrap(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "BeginTupleWrap");

	Params::PerfSightHelper_BeginTupleWrap Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.EnableDebugMode
// (Final, Native, Static, Public, BlueprintCallable)

void UPerfSightHelper::EnableDebugMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "EnableDebugMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.EndExclude
// (Final, Native, Static, Public, BlueprintCallable)

void UPerfSightHelper::EndExclude()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "EndExclude");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.EndExtTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    TagName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::EndExtTag(const class FString& TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "EndExtTag");

	Params::PerfSightHelper_EndExtTag Parms{};

	Parms.TagName = std::move(TagName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.EndTag
// (Final, Native, Static, Public, BlueprintCallable)

void UPerfSightHelper::EndTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "EndTag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.EndTupleWrap
// (Final, Native, Static, Public, BlueprintCallable)

void UPerfSightHelper::EndTupleWrap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "EndTupleWrap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.GetDeviceLevelByQcc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    configName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    gpuFamily                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPerfSightHelper::GetDeviceLevelByQcc(const class FString& configName, const class FString& gpuFamily)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "GetDeviceLevelByQcc");

	Params::PerfSightHelper_GetDeviceLevelByQcc Parms{};

	Parms.configName = std::move(configName);
	Parms.gpuFamily = std::move(gpuFamily);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PerfSight.PerfSightHelper.InitContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    AppID                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::InitContext(const class FString& AppID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "InitContext");

	Params::PerfSightHelper_InitContext Parms{};

	Parms.AppID = std::move(AppID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.LoadPerfSightConfig
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPerfSightHelper::LoadPerfSightConfig(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "LoadPerfSightConfig");

	Params::PerfSightHelper_LoadPerfSightConfig Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PerfSight.PerfSightHelper.MarkLevelFin
// (Final, Native, Static, Public, BlueprintCallable)

void UPerfSightHelper::MarkLevelFin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "MarkLevelFin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.MarkLevelLoad
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SceneName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quality                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::MarkLevelLoad(const class FString& SceneName, int32 Quality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "MarkLevelLoad");

	Params::PerfSightHelper_MarkLevelLoad Parms{};

	Parms.SceneName = std::move(SceneName);
	Parms.Quality = Quality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.MarkLevelLoadCompleted
// (Final, Native, Static, Public, BlueprintCallable)

void UPerfSightHelper::MarkLevelLoadCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "MarkLevelLoadCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.PostEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Info                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::PostEvent(int32 Key, const class FString& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "PostEvent");

	Params::PerfSightHelper_PostEvent Parms{};

	Parms.Key = Key;
	Parms.Info = std::move(Info);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.PostFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::PostFrame(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "PostFrame");

	Params::PerfSightHelper_PostFrame Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.PostNetworkLatency
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   latency                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    customInfo                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ipAddress                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::PostNetworkLatency(int32 latency, const class FString& customInfo, const class FString& ipAddress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "PostNetworkLatency");

	Params::PerfSightHelper_PostNetworkLatency Parms{};

	Parms.latency = latency;
	Parms.customInfo = std::move(customInfo);
	Parms.ipAddress = std::move(ipAddress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.PostValueF1
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    catgory                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::PostValueF1(const class FString& catgory, const class FString& Key, float A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "PostValueF1");

	Params::PerfSightHelper_PostValueF1 Parms{};

	Parms.catgory = std::move(catgory);
	Parms.Key = std::move(Key);
	Parms.A = A;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.PostValueF2
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    catgory                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::PostValueF2(const class FString& catgory, const class FString& Key, float A, float B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "PostValueF2");

	Params::PerfSightHelper_PostValueF2 Parms{};

	Parms.catgory = std::move(catgory);
	Parms.Key = std::move(Key);
	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.PostValueF3
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    catgory                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::PostValueF3(const class FString& catgory, const class FString& Key, float A, float B, float C)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "PostValueF3");

	Params::PerfSightHelper_PostValueF3 Parms{};

	Parms.catgory = std::move(catgory);
	Parms.Key = std::move(Key);
	Parms.A = A;
	Parms.B = B;
	Parms.C = C;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.PostValueI1
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    catgory                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::PostValueI1(const class FString& catgory, const class FString& Key, int32 A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "PostValueI1");

	Params::PerfSightHelper_PostValueI1 Parms{};

	Parms.catgory = std::move(catgory);
	Parms.Key = std::move(Key);
	Parms.A = A;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.PostValueI2
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    catgory                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::PostValueI2(const class FString& catgory, const class FString& Key, int32 A, int32 B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "PostValueI2");

	Params::PerfSightHelper_PostValueI2 Parms{};

	Parms.catgory = std::move(catgory);
	Parms.Key = std::move(Key);
	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.PostValueI3
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    catgory                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::PostValueI3(const class FString& catgory, const class FString& Key, int32 A, int32 B, int32 C)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "PostValueI3");

	Params::PerfSightHelper_PostValueI3 Parms{};

	Parms.catgory = std::move(catgory);
	Parms.Key = std::move(Key);
	Parms.A = A;
	Parms.B = B;
	Parms.C = C;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.PostValueS
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    catgory                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::PostValueS(const class FString& catgory, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "PostValueS");

	Params::PerfSightHelper_PostValueS Parms{};

	Parms.catgory = std::move(catgory);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.SetCustomizedDeviceClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::SetCustomizedDeviceClass(int32 DeviceLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "SetCustomizedDeviceClass");

	Params::PerfSightHelper_SetCustomizedDeviceClass Parms{};

	Parms.DeviceLevel = DeviceLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.SetMatchId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    MatchID                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::SetMatchId(const class FString& MatchID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "SetMatchId");

	Params::PerfSightHelper_SetMatchId Parms{};

	Parms.MatchID = std::move(MatchID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.SetPCAppVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    appVer                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::SetPCAppVersion(const class FString& appVer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "SetPCAppVersion");

	Params::PerfSightHelper_SetPCAppVersion Parms{};

	Parms.appVer = std::move(appVer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.SetPCServerURL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::SetPCServerURL(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "SetPCServerURL");

	Params::PerfSightHelper_SetPCServerURL Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.SetPostValueStrMaxLen
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Length                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::SetPostValueStrMaxLen(int32 Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "SetPostValueStrMaxLen");

	Params::PerfSightHelper_SetPostValueStrMaxLen Parms{};

	Parms.Length = Length;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.SetQuality
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Quality                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::SetQuality(int32 Quality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "SetQuality");

	Params::PerfSightHelper_SetQuality Parms{};

	Parms.Quality = Quality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.SetTargetFrameRate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::SetTargetFrameRate(int32 Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "SetTargetFrameRate");

	Params::PerfSightHelper_SetTargetFrameRate Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.SetUploadServerURL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::SetUploadServerURL(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "SetUploadServerURL");

	Params::PerfSightHelper_SetUploadServerURL Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.SetUserId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::SetUserId(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "SetUserId");

	Params::PerfSightHelper_SetUserId Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.SetVersionIden
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    versionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::SetVersionIden(const class FString& versionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "SetVersionIden");

	Params::PerfSightHelper_SetVersionIden Parms{};

	Parms.versionName = std::move(versionName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PerfSight.PerfSightHelper.UpdateNetLatency
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   latency                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    customInfo                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ipAddress                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPerfSightHelper::UpdateNetLatency(int32 latency, const class FString& customInfo, const class FString& ipAddress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PerfSightHelper", "UpdateNetLatency");

	Params::PerfSightHelper_UpdateNetLatency Parms{};

	Parms.latency = latency;
	Parms.customInfo = std::move(customInfo);
	Parms.ipAddress = std::move(ipAddress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

