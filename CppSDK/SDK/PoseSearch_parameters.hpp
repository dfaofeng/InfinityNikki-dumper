#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PoseSearch

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PoseSearch_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function PoseSearch.MotionMatchingAnimNodeLibrary.ConvertToMotionMatchingNode
// 0x0028 (0x0028 - 0x0000)
struct MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMotionMatchingAnimNodeReference       ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode) == 0x000028, "Wrong size on MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode, Node) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode::Node' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode, Result) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode::Result' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode, ReturnValue) == 0x000018, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode::ReturnValue' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.ConvertToMotionMatchingNodePure
// 0x0028 (0x0028 - 0x0000)
struct MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure) == 0x000028, "Wrong size on MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure, Node) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure::Node' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure, MotionMatchingNode) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure, Result) == 0x000020, "Member 'MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure::Result' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.GetMotionMatchingSearchResult
// 0x0058 (0x0058 - 0x0000)
struct MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult final
{
public:
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseSearchBlueprintResult             Result;                                            // 0x0010(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsResultValid;                                    // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult) == 0x000058, "Wrong size on MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult, MotionMatchingNode) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult, Result) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult::Result' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult, bIsResultValid) == 0x000050, "Member 'MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult::bIsResultValid' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.ResetDatabasesToSearch
// 0x0018 (0x0018 - 0x0000)
struct MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch final
{
public:
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EPoseSearchInterruptMode                      InterruptMode;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch) == 0x000018, "Wrong size on MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch, MotionMatchingNode) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch, InterruptMode) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch::InterruptMode' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.SetDatabasesToSearch
// 0x0028 (0x0028 - 0x0000)
struct MotionMatchingAnimNodeLibrary_SetDatabasesToSearch final
{
public:
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UPoseSearchDatabase*>            Databases;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPoseSearchInterruptMode                      InterruptMode;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_SetDatabasesToSearch) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_SetDatabasesToSearch");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_SetDatabasesToSearch) == 0x000028, "Wrong size on MotionMatchingAnimNodeLibrary_SetDatabasesToSearch");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabasesToSearch, MotionMatchingNode) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_SetDatabasesToSearch::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabasesToSearch, Databases) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_SetDatabasesToSearch::Databases' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabasesToSearch, InterruptMode) == 0x000020, "Member 'MotionMatchingAnimNodeLibrary_SetDatabasesToSearch::InterruptMode' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.SetDatabaseToSearch
// 0x0020 (0x0020 - 0x0000)
struct MotionMatchingAnimNodeLibrary_SetDatabaseToSearch final
{
public:
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPoseSearchDatabase*                    Database;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseSearchInterruptMode                      InterruptMode;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_SetDatabaseToSearch) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_SetDatabaseToSearch");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_SetDatabaseToSearch) == 0x000020, "Wrong size on MotionMatchingAnimNodeLibrary_SetDatabaseToSearch");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabaseToSearch, MotionMatchingNode) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_SetDatabaseToSearch::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabaseToSearch, Database) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_SetDatabaseToSearch::Database' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetDatabaseToSearch, InterruptMode) == 0x000018, "Member 'MotionMatchingAnimNodeLibrary_SetDatabaseToSearch::InterruptMode' has a wrong offset!");

// Function PoseSearch.MotionMatchingAnimNodeLibrary.SetInterruptMode
// 0x0018 (0x0018 - 0x0000)
struct MotionMatchingAnimNodeLibrary_SetInterruptMode final
{
public:
	struct FMotionMatchingAnimNodeReference       MotionMatchingNode;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EPoseSearchInterruptMode                      InterruptMode;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionMatchingAnimNodeLibrary_SetInterruptMode) == 0x000008, "Wrong alignment on MotionMatchingAnimNodeLibrary_SetInterruptMode");
static_assert(sizeof(MotionMatchingAnimNodeLibrary_SetInterruptMode) == 0x000018, "Wrong size on MotionMatchingAnimNodeLibrary_SetInterruptMode");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetInterruptMode, MotionMatchingNode) == 0x000000, "Member 'MotionMatchingAnimNodeLibrary_SetInterruptMode::MotionMatchingNode' has a wrong offset!");
static_assert(offsetof(MotionMatchingAnimNodeLibrary_SetInterruptMode, InterruptMode) == 0x000010, "Member 'MotionMatchingAnimNodeLibrary_SetInterruptMode::InterruptMode' has a wrong offset!");

// Function PoseSearch.PoseSearchFeatureChannel_Heading.BP_GetWorldRotation
// 0x0030 (0x0030 - 0x0000)
struct PoseSearchFeatureChannel_Heading_BP_GetWorldRotation final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoseSearchFeatureChannel_Heading_BP_GetWorldRotation) == 0x000010, "Wrong alignment on PoseSearchFeatureChannel_Heading_BP_GetWorldRotation");
static_assert(sizeof(PoseSearchFeatureChannel_Heading_BP_GetWorldRotation) == 0x000030, "Wrong size on PoseSearchFeatureChannel_Heading_BP_GetWorldRotation");
static_assert(offsetof(PoseSearchFeatureChannel_Heading_BP_GetWorldRotation, AnimInstance) == 0x000000, "Member 'PoseSearchFeatureChannel_Heading_BP_GetWorldRotation::AnimInstance' has a wrong offset!");
static_assert(offsetof(PoseSearchFeatureChannel_Heading_BP_GetWorldRotation, ReturnValue) == 0x000010, "Member 'PoseSearchFeatureChannel_Heading_BP_GetWorldRotation::ReturnValue' has a wrong offset!");

// Function PoseSearch.PoseSearchFeatureChannel_Position.BP_GetWorldPosition
// 0x0020 (0x0020 - 0x0000)
struct PoseSearchFeatureChannel_Position_BP_GetWorldPosition final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoseSearchFeatureChannel_Position_BP_GetWorldPosition) == 0x000008, "Wrong alignment on PoseSearchFeatureChannel_Position_BP_GetWorldPosition");
static_assert(sizeof(PoseSearchFeatureChannel_Position_BP_GetWorldPosition) == 0x000020, "Wrong size on PoseSearchFeatureChannel_Position_BP_GetWorldPosition");
static_assert(offsetof(PoseSearchFeatureChannel_Position_BP_GetWorldPosition, AnimInstance) == 0x000000, "Member 'PoseSearchFeatureChannel_Position_BP_GetWorldPosition::AnimInstance' has a wrong offset!");
static_assert(offsetof(PoseSearchFeatureChannel_Position_BP_GetWorldPosition, ReturnValue) == 0x000008, "Member 'PoseSearchFeatureChannel_Position_BP_GetWorldPosition::ReturnValue' has a wrong offset!");

// Function PoseSearch.PoseSearchFeatureChannel_TimeToEvent.BP_GetTimeToEvent
// 0x0010 (0x0010 - 0x0000)
struct PoseSearchFeatureChannel_TimeToEvent_BP_GetTimeToEvent final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PoseSearchFeatureChannel_TimeToEvent_BP_GetTimeToEvent) == 0x000008, "Wrong alignment on PoseSearchFeatureChannel_TimeToEvent_BP_GetTimeToEvent");
static_assert(sizeof(PoseSearchFeatureChannel_TimeToEvent_BP_GetTimeToEvent) == 0x000010, "Wrong size on PoseSearchFeatureChannel_TimeToEvent_BP_GetTimeToEvent");
static_assert(offsetof(PoseSearchFeatureChannel_TimeToEvent_BP_GetTimeToEvent, AnimInstance) == 0x000000, "Member 'PoseSearchFeatureChannel_TimeToEvent_BP_GetTimeToEvent::AnimInstance' has a wrong offset!");
static_assert(offsetof(PoseSearchFeatureChannel_TimeToEvent_BP_GetTimeToEvent, ReturnValue) == 0x000008, "Member 'PoseSearchFeatureChannel_TimeToEvent_BP_GetTimeToEvent::ReturnValue' has a wrong offset!");

// Function PoseSearch.PoseSearchFeatureChannel_Velocity.BP_GetWorldVelocity
// 0x0020 (0x0020 - 0x0000)
struct PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity) == 0x000008, "Wrong alignment on PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity");
static_assert(sizeof(PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity) == 0x000020, "Wrong size on PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity");
static_assert(offsetof(PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity, AnimInstance) == 0x000000, "Member 'PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity::AnimInstance' has a wrong offset!");
static_assert(offsetof(PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity, ReturnValue) == 0x000008, "Member 'PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity::ReturnValue' has a wrong offset!");

// Function PoseSearch.PoseSearchHistoryCollectorAnimNodeLibrary.ConvertToPoseHistoryNode
// 0x0028 (0x0028 - 0x0000)
struct PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSearchHistoryCollectorAnimNodeReference ReturnValue;                                 // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode) == 0x000008, "Wrong alignment on PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode");
static_assert(sizeof(PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode) == 0x000028, "Wrong size on PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode");
static_assert(offsetof(PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode, Node) == 0x000000, "Member 'PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode::Node' has a wrong offset!");
static_assert(offsetof(PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode, Result) == 0x000010, "Member 'PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode::Result' has a wrong offset!");
static_assert(offsetof(PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode, ReturnValue) == 0x000018, "Member 'PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode::ReturnValue' has a wrong offset!");

// Function PoseSearch.PoseSearchHistoryCollectorAnimNodeLibrary.ConvertToPoseHistoryNodePure
// 0x0028 (0x0028 - 0x0000)
struct PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseSearchHistoryCollectorAnimNodeReference PoseSearchHistoryCollectorNode;              // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure) == 0x000008, "Wrong alignment on PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure");
static_assert(sizeof(PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure) == 0x000028, "Wrong size on PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure");
static_assert(offsetof(PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure, Node) == 0x000000, "Member 'PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure::Node' has a wrong offset!");
static_assert(offsetof(PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure, PoseSearchHistoryCollectorNode) == 0x000010, "Member 'PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure::PoseSearchHistoryCollectorNode' has a wrong offset!");
static_assert(offsetof(PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure, Result) == 0x000020, "Member 'PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure::Result' has a wrong offset!");

// Function PoseSearch.PoseSearchHistoryCollectorAnimNodeLibrary.GetPoseHistoryNodeTrajectory
// 0x0020 (0x0020 - 0x0000)
struct PoseSearchHistoryCollectorAnimNodeLibrary_GetPoseHistoryNodeTrajectory final
{
public:
	struct FPoseSearchHistoryCollectorAnimNodeReference PoseSearchHistoryCollectorNode;              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseSearchQueryTrajectory             Trajectory;                                        // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoseSearchHistoryCollectorAnimNodeLibrary_GetPoseHistoryNodeTrajectory) == 0x000008, "Wrong alignment on PoseSearchHistoryCollectorAnimNodeLibrary_GetPoseHistoryNodeTrajectory");
static_assert(sizeof(PoseSearchHistoryCollectorAnimNodeLibrary_GetPoseHistoryNodeTrajectory) == 0x000020, "Wrong size on PoseSearchHistoryCollectorAnimNodeLibrary_GetPoseHistoryNodeTrajectory");
static_assert(offsetof(PoseSearchHistoryCollectorAnimNodeLibrary_GetPoseHistoryNodeTrajectory, PoseSearchHistoryCollectorNode) == 0x000000, "Member 'PoseSearchHistoryCollectorAnimNodeLibrary_GetPoseHistoryNodeTrajectory::PoseSearchHistoryCollectorNode' has a wrong offset!");
static_assert(offsetof(PoseSearchHistoryCollectorAnimNodeLibrary_GetPoseHistoryNodeTrajectory, Trajectory) == 0x000010, "Member 'PoseSearchHistoryCollectorAnimNodeLibrary_GetPoseHistoryNodeTrajectory::Trajectory' has a wrong offset!");

// Function PoseSearch.PoseSearchHistoryCollectorAnimNodeLibrary.SetPoseHistoryNodeTrajectory
// 0x0020 (0x0020 - 0x0000)
struct PoseSearchHistoryCollectorAnimNodeLibrary_SetPoseHistoryNodeTrajectory final
{
public:
	struct FPoseSearchHistoryCollectorAnimNodeReference PoseSearchHistoryCollectorNode;              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseSearchQueryTrajectory             Trajectory;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoseSearchHistoryCollectorAnimNodeLibrary_SetPoseHistoryNodeTrajectory) == 0x000008, "Wrong alignment on PoseSearchHistoryCollectorAnimNodeLibrary_SetPoseHistoryNodeTrajectory");
static_assert(sizeof(PoseSearchHistoryCollectorAnimNodeLibrary_SetPoseHistoryNodeTrajectory) == 0x000020, "Wrong size on PoseSearchHistoryCollectorAnimNodeLibrary_SetPoseHistoryNodeTrajectory");
static_assert(offsetof(PoseSearchHistoryCollectorAnimNodeLibrary_SetPoseHistoryNodeTrajectory, PoseSearchHistoryCollectorNode) == 0x000000, "Member 'PoseSearchHistoryCollectorAnimNodeLibrary_SetPoseHistoryNodeTrajectory::PoseSearchHistoryCollectorNode' has a wrong offset!");
static_assert(offsetof(PoseSearchHistoryCollectorAnimNodeLibrary_SetPoseHistoryNodeTrajectory, Trajectory) == 0x000010, "Member 'PoseSearchHistoryCollectorAnimNodeLibrary_SetPoseHistoryNodeTrajectory::Trajectory' has a wrong offset!");

// Function PoseSearch.PoseSearchMultiSequence.GetSequence
// 0x0010 (0x0010 - 0x0000)
struct PoseSearchMultiSequence_GetSequence final
{
public:
	class FName                                   Role;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoseSearchMultiSequence_GetSequence) == 0x000008, "Wrong alignment on PoseSearchMultiSequence_GetSequence");
static_assert(sizeof(PoseSearchMultiSequence_GetSequence) == 0x000010, "Wrong size on PoseSearchMultiSequence_GetSequence");
static_assert(offsetof(PoseSearchMultiSequence_GetSequence, Role) == 0x000000, "Member 'PoseSearchMultiSequence_GetSequence::Role' has a wrong offset!");
static_assert(offsetof(PoseSearchMultiSequence_GetSequence, ReturnValue) == 0x000008, "Member 'PoseSearchMultiSequence_GetSequence::ReturnValue' has a wrong offset!");

// Function PoseSearch.PoseSearchTrajectoryLibrary.GetTrajectorySampleAtTime
// 0x0070 (0x0070 - 0x0000)
struct PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime final
{
public:
	struct FPoseSearchQueryTrajectory             InTrajectory;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSearchQueryTrajectorySample       OutTrajectorySample;                               // 0x0020(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExtrapolate;                                      // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime) == 0x000010, "Wrong alignment on PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime");
static_assert(sizeof(PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime) == 0x000070, "Wrong size on PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime");
static_assert(offsetof(PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime, InTrajectory) == 0x000000, "Member 'PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime::InTrajectory' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime, Time) == 0x000010, "Member 'PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime::Time' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime, OutTrajectorySample) == 0x000020, "Member 'PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime::OutTrajectorySample' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime, bExtrapolate) == 0x000060, "Member 'PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime::bExtrapolate' has a wrong offset!");

// Function PoseSearch.PoseSearchTrajectoryLibrary.HandleTrajectoryWorldCollisions
// 0x0088 (0x0088 - 0x0000)
struct PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimInstance*                    AnimInstance;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSearchQueryTrajectory             InTrajectory;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bApplyGravity;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloorCollisionsOffset;                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSearchQueryTrajectory             OutTrajectory;                                     // 0x0028(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FPoseSearchTrajectory_WorldCollisionResults CollisionResult;                              // 0x0038(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxObstacleHeight;                                 // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceColor;                                        // 0x0060(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x0070(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions) == 0x000008, "Wrong alignment on PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions");
static_assert(sizeof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions) == 0x000088, "Wrong size on PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, WorldContextObject) == 0x000000, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, AnimInstance) == 0x000008, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::AnimInstance' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, InTrajectory) == 0x000010, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::InTrajectory' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, bApplyGravity) == 0x000020, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::bApplyGravity' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, FloorCollisionsOffset) == 0x000024, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::FloorCollisionsOffset' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, OutTrajectory) == 0x000028, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::OutTrajectory' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, CollisionResult) == 0x000038, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::CollisionResult' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, TraceChannel) == 0x000040, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::TraceChannel' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, bTraceComplex) == 0x000041, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::bTraceComplex' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, ActorsToIgnore) == 0x000048, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, DrawDebugType) == 0x000058, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::DrawDebugType' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, bIgnoreSelf) == 0x000059, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, MaxObstacleHeight) == 0x00005C, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::MaxObstacleHeight' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, TraceColor) == 0x000060, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::TraceColor' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, TraceHitColor) == 0x000070, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::TraceHitColor' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions, DrawTime) == 0x000080, "Member 'PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions::DrawTime' has a wrong offset!");

// Function PoseSearch.PoseSearchTrajectoryLibrary.PoseSearchGenerateTrajectory
// 0x0170 (0x0170 - 0x0000)
struct PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory final
{
public:
	const class UAnimInstance*                    InAnimInstance;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSearchTrajectoryData              InTrajectoryData;                                  // 0x0008(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InDeltaTime;                                       // 0x0130(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSearchQueryTrajectory             InOutTrajectory;                                   // 0x0138(0x0010)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InOutDesiredControllerYawLastUpdate;               // 0x0148(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSearchQueryTrajectory             OutTrajectory;                                     // 0x0150(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	float                                         InHistorySamplingInterval;                         // 0x0160(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTrajectoryHistoryCount;                          // 0x0164(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPredictionSamplingInterval;                      // 0x0168(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTrajectoryPredictionCount;                       // 0x016C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory) == 0x000008, "Wrong alignment on PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory");
static_assert(sizeof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory) == 0x000170, "Wrong size on PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory");
static_assert(offsetof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory, InAnimInstance) == 0x000000, "Member 'PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory::InAnimInstance' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory, InTrajectoryData) == 0x000008, "Member 'PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory::InTrajectoryData' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory, InDeltaTime) == 0x000130, "Member 'PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory::InDeltaTime' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory, InOutTrajectory) == 0x000138, "Member 'PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory::InOutTrajectory' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory, InOutDesiredControllerYawLastUpdate) == 0x000148, "Member 'PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory::InOutDesiredControllerYawLastUpdate' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory, OutTrajectory) == 0x000150, "Member 'PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory::OutTrajectory' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory, InHistorySamplingInterval) == 0x000160, "Member 'PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory::InHistorySamplingInterval' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory, InTrajectoryHistoryCount) == 0x000164, "Member 'PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory::InTrajectoryHistoryCount' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory, InPredictionSamplingInterval) == 0x000168, "Member 'PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory::InPredictionSamplingInterval' has a wrong offset!");
static_assert(offsetof(PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory, InTrajectoryPredictionCount) == 0x00016C, "Member 'PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory::InTrajectoryPredictionCount' has a wrong offset!");

// Function PoseSearch.PoseSearchLibrary.MotionMatch
// 0x0078 (0x0078 - 0x0000)
struct PoseSearchLibrary_MotionMatch final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        AssetsToSearch;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PoseHistoryName;                                   // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSearchFutureProperties            Future;                                            // 0x0020(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseSearchBlueprintResult             Result;                                            // 0x0030(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         DebugSessionUniqueIdentifier;                      // 0x0070(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PoseSearchLibrary_MotionMatch) == 0x000008, "Wrong alignment on PoseSearchLibrary_MotionMatch");
static_assert(sizeof(PoseSearchLibrary_MotionMatch) == 0x000078, "Wrong size on PoseSearchLibrary_MotionMatch");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, AnimInstance) == 0x000000, "Member 'PoseSearchLibrary_MotionMatch::AnimInstance' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, AssetsToSearch) == 0x000008, "Member 'PoseSearchLibrary_MotionMatch::AssetsToSearch' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, PoseHistoryName) == 0x000018, "Member 'PoseSearchLibrary_MotionMatch::PoseHistoryName' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, Future) == 0x000020, "Member 'PoseSearchLibrary_MotionMatch::Future' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, Result) == 0x000030, "Member 'PoseSearchLibrary_MotionMatch::Result' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatch, DebugSessionUniqueIdentifier) == 0x000070, "Member 'PoseSearchLibrary_MotionMatch::DebugSessionUniqueIdentifier' has a wrong offset!");

// Function PoseSearch.PoseSearchLibrary.MotionMatchMulti
// 0x0080 (0x0080 - 0x0000)
struct PoseSearchLibrary_MotionMatchMulti final
{
public:
	TArray<class ACharacter*>                     AnimInstances;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Roles;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        AssetsToSearch;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PoseHistoryName;                                   // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSearchBlueprintResult             Result;                                            // 0x0038(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         DebugSessionUniqueIdentifier;                      // 0x0078(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PoseSearchLibrary_MotionMatchMulti) == 0x000008, "Wrong alignment on PoseSearchLibrary_MotionMatchMulti");
static_assert(sizeof(PoseSearchLibrary_MotionMatchMulti) == 0x000080, "Wrong size on PoseSearchLibrary_MotionMatchMulti");
static_assert(offsetof(PoseSearchLibrary_MotionMatchMulti, AnimInstances) == 0x000000, "Member 'PoseSearchLibrary_MotionMatchMulti::AnimInstances' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatchMulti, Roles) == 0x000010, "Member 'PoseSearchLibrary_MotionMatchMulti::Roles' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatchMulti, AssetsToSearch) == 0x000020, "Member 'PoseSearchLibrary_MotionMatchMulti::AssetsToSearch' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatchMulti, PoseHistoryName) == 0x000030, "Member 'PoseSearchLibrary_MotionMatchMulti::PoseHistoryName' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatchMulti, Result) == 0x000038, "Member 'PoseSearchLibrary_MotionMatchMulti::Result' has a wrong offset!");
static_assert(offsetof(PoseSearchLibrary_MotionMatchMulti, DebugSessionUniqueIdentifier) == 0x000078, "Member 'PoseSearchLibrary_MotionMatchMulti::DebugSessionUniqueIdentifier' has a wrong offset!");

}

