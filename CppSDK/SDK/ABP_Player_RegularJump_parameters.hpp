#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Player_RegularJump

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "EMantleType_structs.hpp"
#include "X6Game_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AllowGaitChanged
// 0x0002 (0x0002 - 0x0000)
struct ABP_Player_RegularJump_C_AllowGaitChanged final
{
public:
	ERegularLocomotionType                        NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        OldGait;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_AllowGaitChanged) == 0x000001, "Wrong alignment on ABP_Player_RegularJump_C_AllowGaitChanged");
static_assert(sizeof(ABP_Player_RegularJump_C_AllowGaitChanged) == 0x000002, "Wrong size on ABP_Player_RegularJump_C_AllowGaitChanged");
static_assert(offsetof(ABP_Player_RegularJump_C_AllowGaitChanged, NewGait) == 0x000000, "Member 'ABP_Player_RegularJump_C_AllowGaitChanged::NewGait' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_AllowGaitChanged, OldGait) == 0x000001, "Member 'ABP_Player_RegularJump_C_AllowGaitChanged::OldGait' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_RegularJump_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimGraph");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimGraph) == 0x000010, "Wrong size on ABP_Player_RegularJump_C_AnimGraph");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_AimOffset
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_AimOffset final
{
public:
	struct FPoseLink                              InPoseForAimOffset;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_AimOffset_0;                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_AimOffset) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_AimOffset");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_AimOffset) == 0x000020, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_AimOffset");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_AimOffset, InPoseForAimOffset) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_AimOffset::InPoseForAimOffset' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_AimOffset, AnimLayer_AimOffset_0) == 0x000010, "Member 'ABP_Player_RegularJump_C_AnimLayer_AimOffset::AnimLayer_AimOffset_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_BehaviorAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_BehaviorAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForPlayerBehavior;                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorAdditiveMode_0;                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_BehaviorAdditiveMode) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_BehaviorAdditiveMode");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_BehaviorAdditiveMode) == 0x000020, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_BehaviorAdditiveMode");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_BehaviorAdditiveMode, InPoseForPlayerBehavior) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_BehaviorAdditiveMode::InPoseForPlayerBehavior' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_BehaviorAdditiveMode, AnimLayer_BehaviorAdditiveMode_0) == 0x000010, "Member 'ABP_Player_RegularJump_C_AnimLayer_BehaviorAdditiveMode::AnimLayer_BehaviorAdditiveMode_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_BehaviorConnectionMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_BehaviorConnectionMode final
{
public:
	struct FPoseLink                              InPoseToConnectionMode;                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorConnectionMode_0;                // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_BehaviorConnectionMode) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_BehaviorConnectionMode");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_BehaviorConnectionMode) == 0x000020, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_BehaviorConnectionMode");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_BehaviorConnectionMode, InPoseToConnectionMode) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_BehaviorConnectionMode::InPoseToConnectionMode' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_BehaviorConnectionMode, AnimLayer_BehaviorConnectionMode_0) == 0x000010, "Member 'ABP_Player_RegularJump_C_AnimLayer_BehaviorConnectionMode::AnimLayer_BehaviorConnectionMode_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_CombatMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_CombatMovement final
{
public:
	struct FPoseLink                              AnimLayer_CombatMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_CombatMovement) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_CombatMovement");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_CombatMovement) == 0x000010, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_CombatMovement");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_CombatMovement, AnimLayer_CombatMovement_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_CombatMovement::AnimLayer_CombatMovement_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_EquipmentAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_EquipmentAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForEquipment;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_EquipmentAdditiveMode_0;                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_EquipmentAdditiveMode) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_EquipmentAdditiveMode");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_EquipmentAdditiveMode) == 0x000020, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_EquipmentAdditiveMode");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_EquipmentAdditiveMode, InPoseForEquipment) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_EquipmentAdditiveMode::InPoseForEquipment' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_EquipmentAdditiveMode, AnimLayer_EquipmentAdditiveMode_0) == 0x000010, "Member 'ABP_Player_RegularJump_C_AnimLayer_EquipmentAdditiveMode::AnimLayer_EquipmentAdditiveMode_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_Jump
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_Jump final
{
public:
	struct FPoseLink                              AnimLayer_Jump_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_Jump) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_Jump");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_Jump) == 0x000010, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_Jump");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_Jump, AnimLayer_Jump_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_Jump::AnimLayer_Jump_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_Land
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_Land final
{
public:
	struct FPoseLink                              AnimLayer_Land_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_Land) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_Land");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_Land) == 0x000010, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_Land");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_Land, AnimLayer_Land_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_Land::AnimLayer_Land_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_MovementDependObject
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_MovementDependObject final
{
public:
	struct FPoseLink                              AnimLayer_MovementDependObject_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_MovementDependObject) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_MovementDependObject");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_MovementDependObject) == 0x000010, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_MovementDependObject");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_MovementDependObject, AnimLayer_MovementDependObject_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_MovementDependObject::AnimLayer_MovementDependObject_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_NPCAdditiveBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_NPCAdditiveBehavior final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCAdditiveBehavior_0;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_NPCAdditiveBehavior) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_NPCAdditiveBehavior");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_NPCAdditiveBehavior) == 0x000020, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_NPCAdditiveBehavior");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_NPCAdditiveBehavior, InPose) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_NPCAdditiveBehavior::InPose' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_NPCAdditiveBehavior, AnimLayer_NPCAdditiveBehavior_0) == 0x000010, "Member 'ABP_Player_RegularJump_C_AnimLayer_NPCAdditiveBehavior::AnimLayer_NPCAdditiveBehavior_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_NPCBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_NPCBehavior final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCBehavior_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_NPCBehavior) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_NPCBehavior");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_NPCBehavior) == 0x000020, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_NPCBehavior");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_NPCBehavior, InPose_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_NPCBehavior::InPose_0' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_NPCBehavior, AnimLayer_NPCBehavior_0) == 0x000010, "Member 'ABP_Player_RegularJump_C_AnimLayer_NPCBehavior::AnimLayer_NPCBehavior_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_PlayerControllingTool
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_PlayerControllingTool final
{
public:
	struct FPoseLink                              AnimLayer_PlayerControllingTool_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_PlayerControllingTool) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_PlayerControllingTool");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_PlayerControllingTool) == 0x000010, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_PlayerControllingTool");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_PlayerControllingTool, AnimLayer_PlayerControllingTool_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_PlayerControllingTool::AnimLayer_PlayerControllingTool_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_PlayerRegularMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_PlayerRegularMovement final
{
public:
	struct FPoseLink                              AnimLayer_PlayerRegularMovement_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_PlayerRegularMovement) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_PlayerRegularMovement");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_PlayerRegularMovement) == 0x000010, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_PlayerRegularMovement");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_PlayerRegularMovement, AnimLayer_PlayerRegularMovement_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_PlayerRegularMovement::AnimLayer_PlayerRegularMovement_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_SpecialSurfaceMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_SpecialSurfaceMovement final
{
public:
	struct FPoseLink                              AnimLayer_SpecialSurfaceMovement_0;                // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_SpecialSurfaceMovement) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_SpecialSurfaceMovement");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_SpecialSurfaceMovement) == 0x000010, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_SpecialSurfaceMovement");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_SpecialSurfaceMovement, AnimLayer_SpecialSurfaceMovement_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_SpecialSurfaceMovement::AnimLayer_SpecialSurfaceMovement_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_StrafeMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_StrafeMovement final
{
public:
	struct FPoseLink                              AnimLayer_StrafeMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_StrafeMovement) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_StrafeMovement");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_StrafeMovement) == 0x000010, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_StrafeMovement");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_StrafeMovement, AnimLayer_StrafeMovement_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_StrafeMovement::AnimLayer_StrafeMovement_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_UsingCarrierMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_UsingCarrierMovement final
{
public:
	struct FPoseLink                              AnimLayer_UsingCarrierMovement_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_UsingCarrierMovement) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_UsingCarrierMovement");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_UsingCarrierMovement) == 0x000010, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_UsingCarrierMovement");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_UsingCarrierMovement, AnimLayer_UsingCarrierMovement_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_UsingCarrierMovement::AnimLayer_UsingCarrierMovement_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.AnimLayer_WhiteBoxMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_RegularJump_C_AnimLayer_WhiteBoxMovement final
{
public:
	struct FPoseLink                              AnimLayer_WhiteBoxMovement_0;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_AnimLayer_WhiteBoxMovement) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_AnimLayer_WhiteBoxMovement");
static_assert(sizeof(ABP_Player_RegularJump_C_AnimLayer_WhiteBoxMovement) == 0x000010, "Wrong size on ABP_Player_RegularJump_C_AnimLayer_WhiteBoxMovement");
static_assert(offsetof(ABP_Player_RegularJump_C_AnimLayer_WhiteBoxMovement, AnimLayer_WhiteBoxMovement_0) == 0x000000, "Member 'ABP_Player_RegularJump_C_AnimLayer_WhiteBoxMovement::AnimLayer_WhiteBoxMovement_0' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.BlueprintCustomPreUpdate
// 0x0004 (0x0004 - 0x0000)
struct ABP_Player_RegularJump_C_BlueprintCustomPreUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_BlueprintCustomPreUpdate) == 0x000004, "Wrong alignment on ABP_Player_RegularJump_C_BlueprintCustomPreUpdate");
static_assert(sizeof(ABP_Player_RegularJump_C_BlueprintCustomPreUpdate) == 0x000004, "Wrong size on ABP_Player_RegularJump_C_BlueprintCustomPreUpdate");
static_assert(offsetof(ABP_Player_RegularJump_C_BlueprintCustomPreUpdate, DeltaSeconds) == 0x000000, "Member 'ABP_Player_RegularJump_C_BlueprintCustomPreUpdate::DeltaSeconds' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.BlueprintCustomUpdate
// 0x0004 (0x0004 - 0x0000)
struct ABP_Player_RegularJump_C_BlueprintCustomUpdate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_BlueprintCustomUpdate) == 0x000004, "Wrong alignment on ABP_Player_RegularJump_C_BlueprintCustomUpdate");
static_assert(sizeof(ABP_Player_RegularJump_C_BlueprintCustomUpdate) == 0x000004, "Wrong size on ABP_Player_RegularJump_C_BlueprintCustomUpdate");
static_assert(offsetof(ABP_Player_RegularJump_C_BlueprintCustomUpdate, DeltaSeconds) == 0x000000, "Member 'ABP_Player_RegularJump_C_BlueprintCustomUpdate::DeltaSeconds' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.DetermineFloatingShiftAnimDuration
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration final
{
public:
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_A_ImplicitCast;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration");
static_assert(sizeof(ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration) == 0x000020, "Wrong size on ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration");
static_assert(offsetof(ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration, CallFunc_SafeDivide_ReturnValue) == 0x000000, "Member 'ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration, CallFunc_Abs_ReturnValue) == 0x000008, "Member 'ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration, CallFunc_SafeDivide_A_ImplicitCast) == 0x000010, "Member 'ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration::CallFunc_SafeDivide_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration, CallFunc_SafeDivide_B_ImplicitCast) == 0x000018, "Member 'ABP_Player_RegularJump_C_DetermineFloatingShiftAnimDuration::CallFunc_SafeDivide_B_ImplicitCast' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.DetermineMentalAnimation
// 0x0018 (0x0018 - 0x0000)
struct ABP_Player_RegularJump_C_DetermineMentalAnimation final
{
public:
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerMantleComponent_C*            CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMantleType                                   CallFunc_BP_GetCurrentMantleType_MantleType;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_DetermineMentalAnimation) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_DetermineMentalAnimation");
static_assert(sizeof(ABP_Player_RegularJump_C_DetermineMentalAnimation) == 0x000018, "Wrong size on ABP_Player_RegularJump_C_DetermineMentalAnimation");
static_assert(offsetof(ABP_Player_RegularJump_C_DetermineMentalAnimation, CallFunc_GetOwningActor_ReturnValue) == 0x000000, "Member 'ABP_Player_RegularJump_C_DetermineMentalAnimation::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_DetermineMentalAnimation, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'ABP_Player_RegularJump_C_DetermineMentalAnimation::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_DetermineMentalAnimation, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ABP_Player_RegularJump_C_DetermineMentalAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_DetermineMentalAnimation, CallFunc_BP_GetCurrentMantleType_MantleType) == 0x000011, "Member 'ABP_Player_RegularJump_C_DetermineMentalAnimation::CallFunc_BP_GetCurrentMantleType_MantleType' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_DetermineMentalAnimation, CallFunc_IsValid_ReturnValue_1) == 0x000012, "Member 'ABP_Player_RegularJump_C_DetermineMentalAnimation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.ExecuteUbergraph_ABP_Player_RegularJump
// 0x0150 (0x0150 - 0x0000)
struct ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Locomotion_FallState_C> CallFunc_BPI_Get_CurrentInAirStates_self_CastInput; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     CallFunc_BPI_Get_CurrentInAirStates_FallStage;     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_Get_CurrentInAirStates_IsInSpecialJumpAnim; // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularJumpMode                              CallFunc_BPI_Get_CurrentInAirStates_RegularJumpMode; // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_Get_CurrentInAirStates_IsJumpingInAir; // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_1;     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_2;     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_10;       // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_11;       // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_12;       // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_13;       // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_14;       // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_3;     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_4;          // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceCurrentStateElapsedTime_ReturnValue; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            K2Node_Select_Default;                             // 0x0090(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_4;     // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace*                            K2Node_Select_Default_1;                           // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TDelegate<void(EMovementMode PrevMode, EMovementMode NewMode)> K2Node_CreateDelegate_OutputDelegate; // 0x00C0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds_1;                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Prepare_Components_ReturnValue;           // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_5;          // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_CustomEvent_Mode;                           // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_CustomEvent_PreMode;                        // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        K2Node_CustomEvent_NewGait;                        // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        K2Node_CustomEvent_OldGait;                        // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_6;          // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     K2Node_CustomEvent_NewStage;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     K2Node_CustomEvent_OldStage;                       // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterSituationType                       K2Node_CustomEvent_CharacterSituationType;         // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_AddOrRemove;                    // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeterminTransToRightFoot_bTranstoRight;   // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_15;       // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_16;       // 0x00E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_17;       // 0x00E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_18;       // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Select_Default_2;                           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_19;       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_20;       // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast;         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_1;  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_1;       // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1;   // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast_2;       // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump");
static_assert(sizeof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump) == 0x000150, "Wrong size on ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, EntryPoint) == 0x000000, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_BPI_Get_CurrentInAirStates_self_CastInput) == 0x000008, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_BPI_Get_CurrentInAirStates_self_CastInput' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_BPI_Get_CurrentInAirStates_FallStage) == 0x000018, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_BPI_Get_CurrentInAirStates_FallStage' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_BPI_Get_CurrentInAirStates_IsInSpecialJumpAnim) == 0x000019, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_BPI_Get_CurrentInAirStates_IsInSpecialJumpAnim' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_BPI_Get_CurrentInAirStates_RegularJumpMode) == 0x00001A, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_BPI_Get_CurrentInAirStates_RegularJumpMode' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_BPI_Get_CurrentInAirStates_IsJumpingInAir) == 0x00001B, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_BPI_Get_CurrentInAirStates_IsJumpingInAir' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_SwitchEnum_CmpSuccess) == 0x00001C, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001D, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001E, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00001F, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000020, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000021, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_SwitchEnum_CmpSuccess_1) == 0x000022, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x000024, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000028, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000029, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x00002A, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x00002B, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Not_PreBool_ReturnValue) == 0x00002C, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_BooleanAND_ReturnValue) == 0x00002D, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_GetInstanceStateWeight_ReturnValue) == 0x000030, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_GetInstanceStateWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000038, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_GetInstanceStateWeight_ReturnValue_1) == 0x000040, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_GetInstanceStateWeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, Temp_bool_Variable) == 0x000044, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_GetInstanceStateWeight_ReturnValue_2) == 0x000048, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_GetInstanceStateWeight_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x00004C, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00004D, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x00004E, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1) == 0x000050, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000054, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x000055, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_10) == 0x000056, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_11) == 0x000057, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_BooleanOR_ReturnValue) == 0x000058, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_12) == 0x000059, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2) == 0x00005C, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000060, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_13) == 0x000061, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_14) == 0x000062, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x000063, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_BooleanAND_ReturnValue_1) == 0x000064, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_BooleanAND_ReturnValue_2) == 0x000065, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Not_PreBool_ReturnValue_1) == 0x000066, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_BooleanAND_ReturnValue_3) == 0x000067, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_GetInstanceStateWeight_ReturnValue_3) == 0x000068, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_GetInstanceStateWeight_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x00006C, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_NotEqual_ByteByte_ReturnValue_4) == 0x00006D, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_NotEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x000070, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000078, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, Temp_bool_Variable_1) == 0x000080, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, Temp_bool_Variable_2) == 0x000081, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_GetInstanceCurrentStateElapsedTime_ReturnValue) == 0x000084, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_GetInstanceCurrentStateElapsedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, Temp_bool_Variable_3) == 0x000088, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_Select_Default) == 0x000090, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_FClamp_ReturnValue) == 0x0000A0, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, Temp_bool_Variable_4) == 0x0000A8, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000A9, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_GetInstanceStateWeight_ReturnValue_4) == 0x0000AC, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_GetInstanceStateWeight_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000B0, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_Select_Default_1) == 0x0000B8, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_CreateDelegate_OutputDelegate) == 0x0000C0, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_Event_DeltaSeconds_1) == 0x0000D0, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_Event_DeltaSeconds_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_Event_DeltaSeconds) == 0x0000D4, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Prepare_Components_ReturnValue) == 0x0000D8, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Prepare_Components_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000D9, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_NotEqual_ByteByte_ReturnValue_5) == 0x0000DA, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_NotEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_CustomEvent_Mode) == 0x0000DB, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_CustomEvent_Mode' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_CustomEvent_PreMode) == 0x0000DC, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_CustomEvent_PreMode' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_CustomEvent_NewGait) == 0x0000DD, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_CustomEvent_NewGait' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_CustomEvent_OldGait) == 0x0000DE, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_CustomEvent_OldGait' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_NotEqual_ByteByte_ReturnValue_6) == 0x0000DF, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_NotEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_CustomEvent_NewStage) == 0x0000E0, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_CustomEvent_NewStage' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_CustomEvent_OldStage) == 0x0000E1, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_CustomEvent_OldStage' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_CustomEvent_CharacterSituationType) == 0x0000E2, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_CustomEvent_CharacterSituationType' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_CustomEvent_AddOrRemove) == 0x0000E3, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_CustomEvent_AddOrRemove' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_DeterminTransToRightFoot_bTranstoRight) == 0x0000E4, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_DeterminTransToRightFoot_bTranstoRight' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_15) == 0x0000E5, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_16) == 0x0000E6, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_17) == 0x0000E7, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, Temp_bool_Variable_5) == 0x0000E8, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_18) == 0x0000E9, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_Select_Default_2) == 0x0000F0, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_19) == 0x0000F8, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_BooleanAND_ReturnValue_4) == 0x0000F9, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_EqualEqual_ByteByte_ReturnValue_20) == 0x0000FA, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_EqualEqual_ByteByte_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000100, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000108, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_StructMemberSet_Alpha_ImplicitCast) == 0x000110, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_StructMemberSet_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000118, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_1) == 0x000120, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000128, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_StructMemberSet_Alpha_ImplicitCast_1) == 0x000130, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_StructMemberSet_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000138, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1) == 0x000140, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump, K2Node_StructMemberSet_Alpha_ImplicitCast_2) == 0x000148, "Member 'ABP_Player_RegularJump_C_ExecuteUbergraph_ABP_Player_RegularJump::K2Node_StructMemberSet_Alpha_ImplicitCast_2' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.FloatLoop_SP_FloatLoop_OnBecomeRelevant
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_RegularJump_C_FloatLoop_SP_FloatLoop_OnBecomeRelevant final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_FloatLoop_SP_FloatLoop_OnBecomeRelevant) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_FloatLoop_SP_FloatLoop_OnBecomeRelevant");
static_assert(sizeof(ABP_Player_RegularJump_C_FloatLoop_SP_FloatLoop_OnBecomeRelevant) == 0x000020, "Wrong size on ABP_Player_RegularJump_C_FloatLoop_SP_FloatLoop_OnBecomeRelevant");
static_assert(offsetof(ABP_Player_RegularJump_C_FloatLoop_SP_FloatLoop_OnBecomeRelevant, Context) == 0x000000, "Member 'ABP_Player_RegularJump_C_FloatLoop_SP_FloatLoop_OnBecomeRelevant::Context' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_FloatLoop_SP_FloatLoop_OnBecomeRelevant, Node) == 0x000010, "Member 'ABP_Player_RegularJump_C_FloatLoop_SP_FloatLoop_OnBecomeRelevant::Node' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.InAirStateChanged
// 0x0002 (0x0002 - 0x0000)
struct ABP_Player_RegularJump_C_InAirStateChanged final
{
public:
	ERegularFloatingJumpStage                     NewStage;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     OldStage;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_InAirStateChanged) == 0x000001, "Wrong alignment on ABP_Player_RegularJump_C_InAirStateChanged");
static_assert(sizeof(ABP_Player_RegularJump_C_InAirStateChanged) == 0x000002, "Wrong size on ABP_Player_RegularJump_C_InAirStateChanged");
static_assert(offsetof(ABP_Player_RegularJump_C_InAirStateChanged, NewStage) == 0x000000, "Member 'ABP_Player_RegularJump_C_InAirStateChanged::NewStage' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_InAirStateChanged, OldStage) == 0x000001, "Member 'ABP_Player_RegularJump_C_InAirStateChanged::OldStage' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant
// 0x0048 (0x0048 - 0x0000)
struct ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetAccumulatedTime_ReturnValue;           // 0x0038(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant");
static_assert(sizeof(ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant) == 0x000048, "Wrong size on ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant");
static_assert(offsetof(ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant, Context) == 0x000000, "Member 'ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant::Context' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant, Node) == 0x000010, "Member 'ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant::Node' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant, CallFunc_SetAccumulatedTime_ReturnValue) == 0x000038, "Member 'ABP_Player_RegularJump_C_JumpInAirToFloat_SP_JumpInAirAnimation_OnBecomeRelevant::CallFunc_SetAccumulatedTime_ReturnValue' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.JumpState_SP_JumpInAirAnimation_OnUpdate
// 0x0038 (0x0038 - 0x0000)
struct ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAccumulatedTime_ReturnValue;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate");
static_assert(sizeof(ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate) == 0x000038, "Wrong size on ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate");
static_assert(offsetof(ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate, Context) == 0x000000, "Member 'ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate::Context' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate, Node) == 0x000010, "Member 'ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate::Node' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate, CallFunc_GetAccumulatedTime_ReturnValue) == 0x000034, "Member 'ABP_Player_RegularJump_C_JumpState_SP_JumpInAirAnimation_OnUpdate::CallFunc_GetAccumulatedTime_ReturnValue' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.On Movement Mode Changed
// 0x0002 (0x0002 - 0x0000)
struct ABP_Player_RegularJump_C_On_Movement_Mode_Changed final
{
public:
	EMovementMode                                 Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 PreMode;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_On_Movement_Mode_Changed) == 0x000001, "Wrong alignment on ABP_Player_RegularJump_C_On_Movement_Mode_Changed");
static_assert(sizeof(ABP_Player_RegularJump_C_On_Movement_Mode_Changed) == 0x000002, "Wrong size on ABP_Player_RegularJump_C_On_Movement_Mode_Changed");
static_assert(offsetof(ABP_Player_RegularJump_C_On_Movement_Mode_Changed, Mode) == 0x000000, "Member 'ABP_Player_RegularJump_C_On_Movement_Mode_Changed::Mode' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_On_Movement_Mode_Changed, PreMode) == 0x000001, "Member 'ABP_Player_RegularJump_C_On_Movement_Mode_Changed::PreMode' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.On Prepare Finish
// 0x0040 (0x0040 - 0x0000)
struct ABP_Player_RegularJump_C_On_Prepare_Finish final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ECharacterSituationType CharacterSituationType, bool AddOrRemove)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERegularFloatingJumpStage NewStage, ERegularFloatingJumpStage OldStage)> K2Node_CreateDelegate_OutputDelegate_2; // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERegularLocomotionType NewGait, ERegularLocomotionType OldGait)> K2Node_CreateDelegate_OutputDelegate_3; // 0x0030(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_On_Prepare_Finish) == 0x000004, "Wrong alignment on ABP_Player_RegularJump_C_On_Prepare_Finish");
static_assert(sizeof(ABP_Player_RegularJump_C_On_Prepare_Finish) == 0x000040, "Wrong size on ABP_Player_RegularJump_C_On_Prepare_Finish");
static_assert(offsetof(ABP_Player_RegularJump_C_On_Prepare_Finish, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'ABP_Player_RegularJump_C_On_Prepare_Finish::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_On_Prepare_Finish, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'ABP_Player_RegularJump_C_On_Prepare_Finish::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_On_Prepare_Finish, K2Node_CreateDelegate_OutputDelegate_2) == 0x000020, "Member 'ABP_Player_RegularJump_C_On_Prepare_Finish::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_On_Prepare_Finish, K2Node_CreateDelegate_OutputDelegate_3) == 0x000030, "Member 'ABP_Player_RegularJump_C_On_Prepare_Finish::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.OnContextualChanged
// 0x0002 (0x0002 - 0x0000)
struct ABP_Player_RegularJump_C_OnContextualChanged final
{
public:
	ECharacterSituationType                       CharacterSituationType;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddOrRemove;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_OnContextualChanged) == 0x000001, "Wrong alignment on ABP_Player_RegularJump_C_OnContextualChanged");
static_assert(sizeof(ABP_Player_RegularJump_C_OnContextualChanged) == 0x000002, "Wrong size on ABP_Player_RegularJump_C_OnContextualChanged");
static_assert(offsetof(ABP_Player_RegularJump_C_OnContextualChanged, CharacterSituationType) == 0x000000, "Member 'ABP_Player_RegularJump_C_OnContextualChanged::CharacterSituationType' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_OnContextualChanged, AddOrRemove) == 0x000001, "Member 'ABP_Player_RegularJump_C_OnContextualChanged::AddOrRemove' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.Prepare Components
// 0x0070 (0x0070 - 0x0000)
struct ABP_Player_RegularJump_C_Prepare_Components final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerAnimStatesComponent_C*        CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6GeneralAnimationDataComponent*       CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MainCharacterInAirMovementComp_C*   CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerRegularMovementCompV3_C*      CallFunc_GetComponentByClass_ReturnValue_3;        // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetComponentByClass_ReturnValue_4;        // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerInAirMoveableComponent_C*     CallFunc_GetComponentByClass_ReturnValue_5;        // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CallFunc_GetComponentByClass_ReturnValue_6;        // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerMoveableComponent_C*          CallFunc_GetComponentByClass_ReturnValue_7;        // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_Prepare_Components) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_Prepare_Components");
static_assert(sizeof(ABP_Player_RegularJump_C_Prepare_Components) == 0x000070, "Wrong size on ABP_Player_RegularJump_C_Prepare_Components");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, ReturnValue) == 0x000000, "Member 'ABP_Player_RegularJump_C_Prepare_Components::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_IsValid_ReturnValue_2) == 0x000003, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_IsValid_ReturnValue_3) == 0x000004, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_IsValid_ReturnValue_4) == 0x000005, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_IsValid_ReturnValue_5) == 0x000006, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_IsValid_ReturnValue_6) == 0x000007, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_IsValid_ReturnValue_7) == 0x000008, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000010, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_IsValid_ReturnValue_8) == 0x000019, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_BooleanAND_ReturnValue_1) == 0x00001A, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_BooleanAND_ReturnValue_2) == 0x00001B, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_BooleanAND_ReturnValue_3) == 0x000028, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_BooleanAND_ReturnValue_4) == 0x000029, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000030, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_BooleanAND_ReturnValue_5) == 0x000038, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_BooleanAND_ReturnValue_6) == 0x000039, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000040, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_GetComponentByClass_ReturnValue_3) == 0x000048, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_GetComponentByClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_GetComponentByClass_ReturnValue_4) == 0x000050, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_GetComponentByClass_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_GetComponentByClass_ReturnValue_5) == 0x000058, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_GetComponentByClass_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_GetComponentByClass_ReturnValue_6) == 0x000060, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_GetComponentByClass_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Prepare_Components, CallFunc_GetComponentByClass_ReturnValue_7) == 0x000068, "Member 'ABP_Player_RegularJump_C_Prepare_Components::CallFunc_GetComponentByClass_ReturnValue_7' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.Update Values
// 0x0088 (0x0088 - 0x0000)
struct ABP_Player_RegularJump_C_Update_Values final
{
public:
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_1;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SafeDivide_A_ImplicitCast;                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_A_ImplicitCast_1;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_Update_Values) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_Update_Values");
static_assert(sizeof(ABP_Player_RegularJump_C_Update_Values) == 0x000088, "Wrong size on ABP_Player_RegularJump_C_Update_Values");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_BreakRotator_Roll) == 0x000000, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_BreakRotator_Pitch) == 0x000004, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_BreakRotator_Yaw) == 0x000008, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000010, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_VSizeXY_ReturnValue) == 0x000028, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000030, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000031, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_BreakVector_X) == 0x000038, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_BreakVector_Y) == 0x000040, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_BreakVector_Z) == 0x000048, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_Abs_ReturnValue) == 0x000050, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000058, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_SafeDivide_ReturnValue) == 0x000060, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_SafeDivide_ReturnValue_1) == 0x000068, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000070, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_SafeDivide_A_ImplicitCast) == 0x000078, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_SafeDivide_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_Update_Values, CallFunc_SafeDivide_A_ImplicitCast_1) == 0x000080, "Member 'ABP_Player_RegularJump_C_Update_Values::CallFunc_SafeDivide_A_ImplicitCast_1' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.UpdateEssentialValues
// 0x0080 (0x0080 - 0x0000)
struct ABP_Player_RegularJump_C_UpdateEssentialValues final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Locomotion_FallState_C> K2Node_DynamicCast_AsBPI_Locomotion_Fall_State; // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BPI_Get_EssentialValues_InVelocity;       // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BPI_Get_EssentialValues_InCurrentAcceleration; // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BPI_Get_EssentialValues_InMaxAcceleration; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BPI_Get_EssentialValues_InTurnAroundAngle; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Option_0_ImplicitCast;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateLocomotionLogicValues_InMaxAcceleration_ImplicitCast; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateLocomotionLogicValues_InTurnAngle_ImplicitCast; // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_UpdateEssentialValues) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_UpdateEssentialValues");
static_assert(sizeof(ABP_Player_RegularJump_C_UpdateEssentialValues) == 0x000080, "Wrong size on ABP_Player_RegularJump_C_UpdateEssentialValues");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, Temp_bool_Variable) == 0x000000, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, Temp_bool_Variable_1) == 0x000001, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000002, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, K2Node_Select_Default) == 0x000008, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, K2Node_Select_Default_1) == 0x000010, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, K2Node_DynamicCast_AsBPI_Locomotion_Fall_State) == 0x000018, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::K2Node_DynamicCast_AsBPI_Locomotion_Fall_State' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, CallFunc_BPI_Get_EssentialValues_InVelocity) == 0x000030, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::CallFunc_BPI_Get_EssentialValues_InVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, CallFunc_BPI_Get_EssentialValues_InCurrentAcceleration) == 0x000048, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::CallFunc_BPI_Get_EssentialValues_InCurrentAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, CallFunc_BPI_Get_EssentialValues_InMaxAcceleration) == 0x000060, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::CallFunc_BPI_Get_EssentialValues_InMaxAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, CallFunc_BPI_Get_EssentialValues_InTurnAroundAngle) == 0x000068, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::CallFunc_BPI_Get_EssentialValues_InTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, K2Node_Select_Option_0_ImplicitCast) == 0x000070, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::K2Node_Select_Option_0_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, CallFunc_UpdateLocomotionLogicValues_InMaxAcceleration_ImplicitCast) == 0x000078, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::CallFunc_UpdateLocomotionLogicValues_InMaxAcceleration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateEssentialValues, CallFunc_UpdateLocomotionLogicValues_InTurnAngle_ImplicitCast) == 0x00007C, "Member 'ABP_Player_RegularJump_C_UpdateEssentialValues::CallFunc_UpdateLocomotionLogicValues_InTurnAngle_ImplicitCast' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.UpdateFloatingTurnAroundValue
// 0x0018 (0x0018 - 0x0000)
struct ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue final
{
public:
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue");
static_assert(sizeof(ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue) == 0x000018, "Wrong size on ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue, CallFunc_Abs_ReturnValue) == 0x000000, "Member 'ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000009, "Member 'ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue, CallFunc_BooleanAND_ReturnValue_1) == 0x00000B, "Member 'ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue, CallFunc_Abs_A_ImplicitCast) == 0x000010, "Member 'ABP_Player_RegularJump_C_UpdateFloatingTurnAroundValue::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");

// Function ABP_Player_RegularJump.ABP_Player_RegularJump_C.UpdateMovementData
// 0x0030 (0x0030 - 0x0000)
struct ABP_Player_RegularJump_C_UpdateMovementData final
{
public:
	TScriptInterface<class IBPI_Locomotion_GroundState_C> K2Node_DynamicCast_AsBPI_Locomotion_Ground_State; // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BPI_Get_ConfigData_WalkSpeed;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BPI_Get_ConfigData_RunSpeed;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BPI_Get_ConfigData_SprintSpeed;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_RegularJump_C_UpdateMovementData) == 0x000008, "Wrong alignment on ABP_Player_RegularJump_C_UpdateMovementData");
static_assert(sizeof(ABP_Player_RegularJump_C_UpdateMovementData) == 0x000030, "Wrong size on ABP_Player_RegularJump_C_UpdateMovementData");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateMovementData, K2Node_DynamicCast_AsBPI_Locomotion_Ground_State) == 0x000000, "Member 'ABP_Player_RegularJump_C_UpdateMovementData::K2Node_DynamicCast_AsBPI_Locomotion_Ground_State' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateMovementData, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_Player_RegularJump_C_UpdateMovementData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateMovementData, CallFunc_BPI_Get_ConfigData_WalkSpeed) == 0x000018, "Member 'ABP_Player_RegularJump_C_UpdateMovementData::CallFunc_BPI_Get_ConfigData_WalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateMovementData, CallFunc_BPI_Get_ConfigData_RunSpeed) == 0x000020, "Member 'ABP_Player_RegularJump_C_UpdateMovementData::CallFunc_BPI_Get_ConfigData_RunSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Player_RegularJump_C_UpdateMovementData, CallFunc_BPI_Get_ConfigData_SprintSpeed) == 0x000028, "Member 'ABP_Player_RegularJump_C_UpdateMovementData::CallFunc_BPI_Get_ConfigData_SprintSpeed' has a wrong offset!");

}

