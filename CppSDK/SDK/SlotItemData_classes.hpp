#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SlotItemData

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SlotItemData.SlotItemData_C
// 0x00A8 (0x00D0 - 0x0028)
class USlotItemData_C final : public UObject
{
public:
	class FString                                 Name_0;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FString                                 Desc;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	int64                                         ItemId;                                            // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         ItemBaseId;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         ObtainTime;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Quantifier;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Quality;                                           // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         MajorType;                                         // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         MinorType;                                         // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Locked;                                            // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Sprite;                                            // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         ContainerType;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_UI_ItemSlot_C*                     ItemDataHost;                                      // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UObject*                                QualityIcon;                                       // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NormalShow;                                        // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDressDisplayResult;                               // 0x00A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconPath;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          ShowTips;                                          // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Level;                                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         Star;                                              // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void IsNull(bool* Valid);
	void UpdateData();
	void UpdateIcon();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SlotItemData_C">();
	}
	static class USlotItemData_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlotItemData_C>();
	}
};
static_assert(alignof(USlotItemData_C) == 0x000008, "Wrong alignment on USlotItemData_C");
static_assert(sizeof(USlotItemData_C) == 0x0000D0, "Wrong size on USlotItemData_C");
static_assert(offsetof(USlotItemData_C, Name_0) == 0x000028, "Member 'USlotItemData_C::Name_0' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, Desc) == 0x000038, "Member 'USlotItemData_C::Desc' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, ItemId) == 0x000048, "Member 'USlotItemData_C::ItemId' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, ItemBaseId) == 0x000050, "Member 'USlotItemData_C::ItemBaseId' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, Amount) == 0x000054, "Member 'USlotItemData_C::Amount' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, ObtainTime) == 0x000058, "Member 'USlotItemData_C::ObtainTime' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, Quantifier) == 0x000060, "Member 'USlotItemData_C::Quantifier' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, Quality) == 0x000070, "Member 'USlotItemData_C::Quality' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, MajorType) == 0x000074, "Member 'USlotItemData_C::MajorType' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, MinorType) == 0x000078, "Member 'USlotItemData_C::MinorType' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, Locked) == 0x00007C, "Member 'USlotItemData_C::Locked' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, Sprite) == 0x000080, "Member 'USlotItemData_C::Sprite' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, ContainerType) == 0x000088, "Member 'USlotItemData_C::ContainerType' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, ItemDataHost) == 0x000090, "Member 'USlotItemData_C::ItemDataHost' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, QualityIcon) == 0x000098, "Member 'USlotItemData_C::QualityIcon' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, Index_0) == 0x0000A0, "Member 'USlotItemData_C::Index_0' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, NormalShow) == 0x0000A4, "Member 'USlotItemData_C::NormalShow' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, bDressDisplayResult) == 0x0000A5, "Member 'USlotItemData_C::bDressDisplayResult' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, IconPath) == 0x0000A8, "Member 'USlotItemData_C::IconPath' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, ShowTips) == 0x0000B8, "Member 'USlotItemData_C::ShowTips' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, Level) == 0x0000C0, "Member 'USlotItemData_C::Level' has a wrong offset!");
static_assert(offsetof(USlotItemData_C, Star) == 0x0000C8, "Member 'USlotItemData_C::Star' has a wrong offset!");

}

