#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MonsterPerformanceProcessorComponent

#include "Basic.hpp"

#include "BP_MonsterPerformanceProcessorComponent_classes.hpp"
#include "BP_MonsterPerformanceProcessorComponent_parameters.hpp"


namespace SDK
{

// Function BP_MonsterPerformanceProcessorComponent.BP_MonsterPerformanceProcessorComponent_C.BPI_SetCustomBossCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCameraBaseParamsData*            BossCameraConfig                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&BlendInParam                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class UClass*                           CameraSynchronizerClass                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_MonsterPerformanceProcessorComponent_C::BPI_SetCustomBossCamera(class UCameraBaseParamsData* BossCameraConfig, const struct FViewTargetTransitionParams& BlendInParam, class UClass* CameraSynchronizerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MonsterPerformanceProcessorComponent_C", "BPI_SetCustomBossCamera");

	Params::BP_MonsterPerformanceProcessorComponent_C_BPI_SetCustomBossCamera Parms{};

	Parms.BossCameraConfig = BossCameraConfig;
	Parms.BlendInParam = std::move(BlendInParam);
	Parms.CameraSynchronizerClass = CameraSynchronizerClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MonsterPerformanceProcessorComponent.BP_MonsterPerformanceProcessorComponent_C.BPI_ResetCustomBossCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FViewTargetTransitionParams&BlendOutParam                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_MonsterPerformanceProcessorComponent_C::BPI_ResetCustomBossCamera(const struct FViewTargetTransitionParams& BlendOutParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MonsterPerformanceProcessorComponent_C", "BPI_ResetCustomBossCamera");

	Params::BP_MonsterPerformanceProcessorComponent_C_BPI_ResetCustomBossCamera Parms{};

	Parms.BlendOutParam = std::move(BlendOutParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MonsterPerformanceProcessorComponent.BP_MonsterPerformanceProcessorComponent_C.BPI_PartDissolve
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   MaterialIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      DissolveCurve                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_MonsterPerformanceProcessorComponent_C::BPI_PartDissolve(class UMeshComponent* mesh, int32 MaterialIndex, class UCurveFloat* DissolveCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MonsterPerformanceProcessorComponent_C", "BPI_PartDissolve");

	Params::BP_MonsterPerformanceProcessorComponent_C_BPI_PartDissolve Parms{};

	Parms.mesh = mesh;
	Parms.MaterialIndex = MaterialIndex;
	Parms.DissolveCurve = DissolveCurve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MonsterPerformanceProcessorComponent.BP_MonsterPerformanceProcessorComponent_C.BP_SetHPForceHide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bForceHide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_MonsterPerformanceProcessorComponent_C::BP_SetHPForceHide(bool bForceHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MonsterPerformanceProcessorComponent_C", "BP_SetHPForceHide");

	Params::BP_MonsterPerformanceProcessorComponent_C_BP_SetHPForceHide Parms{};

	Parms.bForceHide = bForceHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MonsterPerformanceProcessorComponent.BP_MonsterPerformanceProcessorComponent_C.BP_BreakHPLock
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_MonsterPerformanceProcessorComponent_C::BP_BreakHPLock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MonsterPerformanceProcessorComponent_C", "BP_BreakHPLock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MonsterPerformanceProcessorComponent.BP_MonsterPerformanceProcessorComponent_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_MonsterPerformanceProcessorComponent_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MonsterPerformanceProcessorComponent_C", "GetModuleName");

	Params::BP_MonsterPerformanceProcessorComponent_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

