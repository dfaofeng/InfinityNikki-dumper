#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PoseSearch

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "PoseSearch_structs.hpp"
#include "StructUtils_structs.hpp"


namespace SDK
{

// Class PoseSearch.MotionMatchingAnimNodeLibrary
// 0x0000 (0x0028 - 0x0028)
class UMotionMatchingAnimNodeLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FMotionMatchingAnimNodeReference ConvertToMotionMatchingNode(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result);
	static void ConvertToMotionMatchingNodePure(const struct FAnimNodeReference& Node, struct FMotionMatchingAnimNodeReference* MotionMatchingNode, bool* Result);
	static void GetMotionMatchingSearchResult(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, struct FPoseSearchBlueprintResult* Result, bool* bIsResultValid);
	static void ResetDatabasesToSearch(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, EPoseSearchInterruptMode InterruptMode);
	static void SetDatabasesToSearch(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, const TArray<class UPoseSearchDatabase*>& Databases, EPoseSearchInterruptMode InterruptMode);
	static void SetDatabaseToSearch(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, class UPoseSearchDatabase* Database, EPoseSearchInterruptMode InterruptMode);
	static void SetInterruptMode(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, EPoseSearchInterruptMode InterruptMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MotionMatchingAnimNodeLibrary">();
	}
	static class UMotionMatchingAnimNodeLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMotionMatchingAnimNodeLibrary>();
	}
};
static_assert(alignof(UMotionMatchingAnimNodeLibrary) == 0x000008, "Wrong alignment on UMotionMatchingAnimNodeLibrary");
static_assert(sizeof(UMotionMatchingAnimNodeLibrary) == 0x000028, "Wrong size on UMotionMatchingAnimNodeLibrary");

// Class PoseSearch.PoseSearchDatabase
// 0x0148 (0x0178 - 0x0030)
class UPoseSearchDatabase final : public UDataAsset
{
public:
	class UPoseSearchSchema*                      Schema;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContinuingPoseCostBias;                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseCostBias;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopingCostBias;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInstancedStruct>               AnimationAssets;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EPoseSearchMode                               PoseSearchMode;                                    // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KDTreeQueryNumNeighbors;                           // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KDTreeQueryNumNeighborsWithDuplicates;             // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x104];                                     // 0x0074(0x0104)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchDatabase">();
	}
	static class UPoseSearchDatabase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchDatabase>();
	}
};
static_assert(alignof(UPoseSearchDatabase) == 0x000008, "Wrong alignment on UPoseSearchDatabase");
static_assert(sizeof(UPoseSearchDatabase) == 0x000178, "Wrong size on UPoseSearchDatabase");
static_assert(offsetof(UPoseSearchDatabase, Schema) == 0x000030, "Member 'UPoseSearchDatabase::Schema' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, ContinuingPoseCostBias) == 0x000038, "Member 'UPoseSearchDatabase::ContinuingPoseCostBias' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, BaseCostBias) == 0x00003C, "Member 'UPoseSearchDatabase::BaseCostBias' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, LoopingCostBias) == 0x000040, "Member 'UPoseSearchDatabase::LoopingCostBias' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, AnimationAssets) == 0x000048, "Member 'UPoseSearchDatabase::AnimationAssets' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, Tags) == 0x000058, "Member 'UPoseSearchDatabase::Tags' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, PoseSearchMode) == 0x000068, "Member 'UPoseSearchDatabase::PoseSearchMode' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, KDTreeQueryNumNeighbors) == 0x00006C, "Member 'UPoseSearchDatabase::KDTreeQueryNumNeighbors' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, KDTreeQueryNumNeighborsWithDuplicates) == 0x000070, "Member 'UPoseSearchDatabase::KDTreeQueryNumNeighborsWithDuplicates' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel
// 0x0018 (0x0040 - 0x0028)
class UPoseSearchFeatureChannel : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChannelDataOffset;                                 // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ChannelCardinality;                                // 0x003C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel">();
	}
	static class UPoseSearchFeatureChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel");
static_assert(sizeof(UPoseSearchFeatureChannel) == 0x000040, "Wrong size on UPoseSearchFeatureChannel");
static_assert(offsetof(UPoseSearchFeatureChannel, ChannelDataOffset) == 0x000038, "Member 'UPoseSearchFeatureChannel::ChannelDataOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel, ChannelCardinality) == 0x00003C, "Member 'UPoseSearchFeatureChannel::ChannelCardinality' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_FilterCrashingLegs
// 0x0058 (0x0098 - 0x0040)
class UPoseSearchFeatureChannel_FilterCrashingLegs final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         LeftThigh;                                         // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightThigh;                                        // 0x0050(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftFoot;                                          // 0x0060(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightFoot;                                         // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SampleRole;                                        // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          LeftThighIdx;                                      // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          RightThighIdx;                                     // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          LeftFootIdx;                                       // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          RightFootIdx;                                      // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllowedTolerance;                                  // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_FilterCrashingLegs">();
	}
	static class UPoseSearchFeatureChannel_FilterCrashingLegs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_FilterCrashingLegs>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_FilterCrashingLegs) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_FilterCrashingLegs");
static_assert(sizeof(UPoseSearchFeatureChannel_FilterCrashingLegs) == 0x000098, "Wrong size on UPoseSearchFeatureChannel_FilterCrashingLegs");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftThigh) == 0x000040, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftThigh' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightThigh) == 0x000050, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightThigh' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftFoot) == 0x000060, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftFoot' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightFoot) == 0x000070, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightFoot' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, SampleRole) == 0x000080, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::SampleRole' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, Weight) == 0x000088, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftThighIdx) == 0x00008C, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftThighIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightThighIdx) == 0x00008D, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightThighIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftFootIdx) == 0x00008E, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftFootIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightFootIdx) == 0x00008F, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightFootIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, InputQueryPose) == 0x000090, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, AllowedTolerance) == 0x000094, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::AllowedTolerance' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_GroupBase
// 0x0008 (0x0048 - 0x0040)
class UPoseSearchFeatureChannel_GroupBase : public UPoseSearchFeatureChannel
{
public:
	class FName                                   SampleRole;                                        // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_GroupBase">();
	}
	static class UPoseSearchFeatureChannel_GroupBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_GroupBase>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_GroupBase) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_GroupBase");
static_assert(sizeof(UPoseSearchFeatureChannel_GroupBase) == 0x000048, "Wrong size on UPoseSearchFeatureChannel_GroupBase");
static_assert(offsetof(UPoseSearchFeatureChannel_GroupBase, SampleRole) == 0x000040, "Member 'UPoseSearchFeatureChannel_GroupBase::SampleRole' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Group
// 0x0010 (0x0058 - 0x0048)
class UPoseSearchFeatureChannel_Group final : public UPoseSearchFeatureChannel_GroupBase
{
public:
	TArray<class UPoseSearchFeatureChannel*>      SubChannels;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Group">();
	}
	static class UPoseSearchFeatureChannel_Group* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Group>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Group) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Group");
static_assert(sizeof(UPoseSearchFeatureChannel_Group) == 0x000058, "Wrong size on UPoseSearchFeatureChannel_Group");
static_assert(offsetof(UPoseSearchFeatureChannel_Group, SubChannels) == 0x000048, "Member 'UPoseSearchFeatureChannel_Group::SubChannels' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Heading
// 0x0048 (0x0088 - 0x0040)
class UPoseSearchFeatureChannel_Heading final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         bone;                                              // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SampleRole;                                        // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         OriginBone;                                        // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   OriginRole;                                        // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplingAttributeId;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleTimeOffset;                                  // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginTimeOffset;                                  // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeadingAxis                                  HeadingAxis;                                       // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaBoneIdx;                                     // 0x007D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaOriginBoneIdx;                               // 0x007E(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x007F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentStrippingVector                     ComponentStripping;                                // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPermutationTimeType                          PermutationTimeType;                               // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FQuat BP_GetWorldRotation(const class UAnimInstance* AnimInstance) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Heading">();
	}
	static class UPoseSearchFeatureChannel_Heading* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Heading>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Heading) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Heading");
static_assert(sizeof(UPoseSearchFeatureChannel_Heading) == 0x000088, "Wrong size on UPoseSearchFeatureChannel_Heading");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, bone) == 0x000040, "Member 'UPoseSearchFeatureChannel_Heading::bone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, SampleRole) == 0x000050, "Member 'UPoseSearchFeatureChannel_Heading::SampleRole' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, OriginBone) == 0x000058, "Member 'UPoseSearchFeatureChannel_Heading::OriginBone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, OriginRole) == 0x000068, "Member 'UPoseSearchFeatureChannel_Heading::OriginRole' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, SamplingAttributeId) == 0x000070, "Member 'UPoseSearchFeatureChannel_Heading::SamplingAttributeId' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, SampleTimeOffset) == 0x000074, "Member 'UPoseSearchFeatureChannel_Heading::SampleTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, OriginTimeOffset) == 0x000078, "Member 'UPoseSearchFeatureChannel_Heading::OriginTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, HeadingAxis) == 0x00007C, "Member 'UPoseSearchFeatureChannel_Heading::HeadingAxis' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, SchemaBoneIdx) == 0x00007D, "Member 'UPoseSearchFeatureChannel_Heading::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, SchemaOriginBoneIdx) == 0x00007E, "Member 'UPoseSearchFeatureChannel_Heading::SchemaOriginBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, InputQueryPose) == 0x00007F, "Member 'UPoseSearchFeatureChannel_Heading::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, ComponentStripping) == 0x000080, "Member 'UPoseSearchFeatureChannel_Heading::ComponentStripping' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, PermutationTimeType) == 0x000081, "Member 'UPoseSearchFeatureChannel_Heading::PermutationTimeType' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Padding
// 0x0008 (0x0048 - 0x0040)
class UPoseSearchFeatureChannel_Padding final : public UPoseSearchFeatureChannel
{
public:
	int32                                         PaddingSize;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Padding">();
	}
	static class UPoseSearchFeatureChannel_Padding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Padding>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Padding) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Padding");
static_assert(sizeof(UPoseSearchFeatureChannel_Padding) == 0x000048, "Wrong size on UPoseSearchFeatureChannel_Padding");
static_assert(offsetof(UPoseSearchFeatureChannel_Padding, PaddingSize) == 0x000040, "Member 'UPoseSearchFeatureChannel_Padding::PaddingSize' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_PermutationTime
// 0x0000 (0x0040 - 0x0040)
class UPoseSearchFeatureChannel_PermutationTime final : public UPoseSearchFeatureChannel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_PermutationTime">();
	}
	static class UPoseSearchFeatureChannel_PermutationTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_PermutationTime>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_PermutationTime) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_PermutationTime");
static_assert(sizeof(UPoseSearchFeatureChannel_PermutationTime) == 0x000040, "Wrong size on UPoseSearchFeatureChannel_PermutationTime");

// Class PoseSearch.PoseSearchFeatureChannel_Phase
// 0x0020 (0x0060 - 0x0040)
class UPoseSearchFeatureChannel_Phase final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         bone;                                              // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SampleRole;                                        // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaBoneIdx;                                     // 0x0058(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x0059(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Phase">();
	}
	static class UPoseSearchFeatureChannel_Phase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Phase>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Phase) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Phase");
static_assert(sizeof(UPoseSearchFeatureChannel_Phase) == 0x000060, "Wrong size on UPoseSearchFeatureChannel_Phase");
static_assert(offsetof(UPoseSearchFeatureChannel_Phase, bone) == 0x000040, "Member 'UPoseSearchFeatureChannel_Phase::bone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Phase, SampleRole) == 0x000050, "Member 'UPoseSearchFeatureChannel_Phase::SampleRole' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Phase, SchemaBoneIdx) == 0x000058, "Member 'UPoseSearchFeatureChannel_Phase::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Phase, InputQueryPose) == 0x000059, "Member 'UPoseSearchFeatureChannel_Phase::InputQueryPose' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Pose
// 0x0038 (0x0080 - 0x0048)
class UPoseSearchFeatureChannel_Pose final : public UPoseSearchFeatureChannel_GroupBase
{
public:
	TArray<struct FPoseSearchBone>                SampledBones;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int8>                                  SchemaBoneIdx;                                     // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCharacterSpaceVelocities;                      // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPoseSearchFeatureChannel*>      SubChannels;                                       // 0x0070(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Pose">();
	}
	static class UPoseSearchFeatureChannel_Pose* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Pose>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Pose) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Pose");
static_assert(sizeof(UPoseSearchFeatureChannel_Pose) == 0x000080, "Wrong size on UPoseSearchFeatureChannel_Pose");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, SampledBones) == 0x000048, "Member 'UPoseSearchFeatureChannel_Pose::SampledBones' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, SchemaBoneIdx) == 0x000058, "Member 'UPoseSearchFeatureChannel_Pose::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, InputQueryPose) == 0x000068, "Member 'UPoseSearchFeatureChannel_Pose::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, bUseCharacterSpaceVelocities) == 0x000069, "Member 'UPoseSearchFeatureChannel_Pose::bUseCharacterSpaceVelocities' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, SubChannels) == 0x000070, "Member 'UPoseSearchFeatureChannel_Pose::SubChannels' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Position
// 0x0048 (0x0088 - 0x0040)
class UPoseSearchFeatureChannel_Position final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         bone;                                              // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SampleRole;                                        // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         OriginBone;                                        // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   OriginRole;                                        // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplingAttributeId;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleTimeOffset;                                  // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginTimeOffset;                                  // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaBoneIdx;                                     // 0x007C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaOriginBoneIdx;                               // 0x007D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x007E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentStrippingVector                     ComponentStripping;                                // 0x007F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPermutationTimeType                          PermutationTimeType;                               // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector BP_GetWorldPosition(const class UAnimInstance* AnimInstance) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Position">();
	}
	static class UPoseSearchFeatureChannel_Position* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Position>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Position) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Position");
static_assert(sizeof(UPoseSearchFeatureChannel_Position) == 0x000088, "Wrong size on UPoseSearchFeatureChannel_Position");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, bone) == 0x000040, "Member 'UPoseSearchFeatureChannel_Position::bone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, SampleRole) == 0x000050, "Member 'UPoseSearchFeatureChannel_Position::SampleRole' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, OriginBone) == 0x000058, "Member 'UPoseSearchFeatureChannel_Position::OriginBone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, OriginRole) == 0x000068, "Member 'UPoseSearchFeatureChannel_Position::OriginRole' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, SamplingAttributeId) == 0x000070, "Member 'UPoseSearchFeatureChannel_Position::SamplingAttributeId' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, SampleTimeOffset) == 0x000074, "Member 'UPoseSearchFeatureChannel_Position::SampleTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, OriginTimeOffset) == 0x000078, "Member 'UPoseSearchFeatureChannel_Position::OriginTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, SchemaBoneIdx) == 0x00007C, "Member 'UPoseSearchFeatureChannel_Position::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, SchemaOriginBoneIdx) == 0x00007D, "Member 'UPoseSearchFeatureChannel_Position::SchemaOriginBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, InputQueryPose) == 0x00007E, "Member 'UPoseSearchFeatureChannel_Position::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, ComponentStripping) == 0x00007F, "Member 'UPoseSearchFeatureChannel_Position::ComponentStripping' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, PermutationTimeType) == 0x000080, "Member 'UPoseSearchFeatureChannel_Position::PermutationTimeType' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_SamplingTime
// 0x0008 (0x0048 - 0x0040)
class UPoseSearchFeatureChannel_SamplingTime final : public UPoseSearchFeatureChannel
{
public:
	float                                         Weight;                                            // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToMatch;                                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_SamplingTime">();
	}
	static class UPoseSearchFeatureChannel_SamplingTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_SamplingTime>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_SamplingTime) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_SamplingTime");
static_assert(sizeof(UPoseSearchFeatureChannel_SamplingTime) == 0x000048, "Wrong size on UPoseSearchFeatureChannel_SamplingTime");
static_assert(offsetof(UPoseSearchFeatureChannel_SamplingTime, Weight) == 0x000040, "Member 'UPoseSearchFeatureChannel_SamplingTime::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_SamplingTime, TimeToMatch) == 0x000044, "Member 'UPoseSearchFeatureChannel_SamplingTime::TimeToMatch' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_TimeToEvent
// 0x0010 (0x0050 - 0x0040)
class UPoseSearchFeatureChannel_TimeToEvent final : public UPoseSearchFeatureChannel
{
public:
	float                                         Weight;                                            // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplingAttributeId;                               // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float BP_GetTimeToEvent(const class UAnimInstance* AnimInstance) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_TimeToEvent">();
	}
	static class UPoseSearchFeatureChannel_TimeToEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_TimeToEvent>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_TimeToEvent) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_TimeToEvent");
static_assert(sizeof(UPoseSearchFeatureChannel_TimeToEvent) == 0x000050, "Wrong size on UPoseSearchFeatureChannel_TimeToEvent");
static_assert(offsetof(UPoseSearchFeatureChannel_TimeToEvent, Weight) == 0x000040, "Member 'UPoseSearchFeatureChannel_TimeToEvent::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_TimeToEvent, SamplingAttributeId) == 0x000044, "Member 'UPoseSearchFeatureChannel_TimeToEvent::SamplingAttributeId' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Trajectory
// 0x0020 (0x0068 - 0x0048)
class UPoseSearchFeatureChannel_Trajectory final : public UPoseSearchFeatureChannel_GroupBase
{
public:
	TArray<struct FPoseSearchTrajectorySample>    Samples;                                           // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPoseSearchFeatureChannel*>      SubChannels;                                       // 0x0058(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Trajectory">();
	}
	static class UPoseSearchFeatureChannel_Trajectory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Trajectory>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Trajectory) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Trajectory");
static_assert(sizeof(UPoseSearchFeatureChannel_Trajectory) == 0x000068, "Wrong size on UPoseSearchFeatureChannel_Trajectory");
static_assert(offsetof(UPoseSearchFeatureChannel_Trajectory, Samples) == 0x000048, "Member 'UPoseSearchFeatureChannel_Trajectory::Samples' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Trajectory, SubChannels) == 0x000058, "Member 'UPoseSearchFeatureChannel_Trajectory::SubChannels' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Velocity
// 0x0048 (0x0088 - 0x0040)
class UPoseSearchFeatureChannel_Velocity final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         bone;                                              // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SampleRole;                                        // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         OriginBone;                                        // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   OriginRole;                                        // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplingAttributeId;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleTimeOffset;                                  // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginTimeOffset;                                  // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaBoneIdx;                                     // 0x007C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaOriginBoneIdx;                               // 0x007D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x007E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCharacterSpaceVelocities;                      // 0x007F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormalize;                                        // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentStrippingVector                     ComponentStripping;                                // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPermutationTimeType                          PermutationTimeType;                               // 0x0082(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector BP_GetWorldVelocity(const class UAnimInstance* AnimInstance) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Velocity">();
	}
	static class UPoseSearchFeatureChannel_Velocity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Velocity>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Velocity) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Velocity");
static_assert(sizeof(UPoseSearchFeatureChannel_Velocity) == 0x000088, "Wrong size on UPoseSearchFeatureChannel_Velocity");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, bone) == 0x000040, "Member 'UPoseSearchFeatureChannel_Velocity::bone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, SampleRole) == 0x000050, "Member 'UPoseSearchFeatureChannel_Velocity::SampleRole' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, OriginBone) == 0x000058, "Member 'UPoseSearchFeatureChannel_Velocity::OriginBone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, OriginRole) == 0x000068, "Member 'UPoseSearchFeatureChannel_Velocity::OriginRole' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, SamplingAttributeId) == 0x000070, "Member 'UPoseSearchFeatureChannel_Velocity::SamplingAttributeId' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, SampleTimeOffset) == 0x000074, "Member 'UPoseSearchFeatureChannel_Velocity::SampleTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, OriginTimeOffset) == 0x000078, "Member 'UPoseSearchFeatureChannel_Velocity::OriginTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, SchemaBoneIdx) == 0x00007C, "Member 'UPoseSearchFeatureChannel_Velocity::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, SchemaOriginBoneIdx) == 0x00007D, "Member 'UPoseSearchFeatureChannel_Velocity::SchemaOriginBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, InputQueryPose) == 0x00007E, "Member 'UPoseSearchFeatureChannel_Velocity::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, bUseCharacterSpaceVelocities) == 0x00007F, "Member 'UPoseSearchFeatureChannel_Velocity::bUseCharacterSpaceVelocities' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, bNormalize) == 0x000080, "Member 'UPoseSearchFeatureChannel_Velocity::bNormalize' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, ComponentStripping) == 0x000081, "Member 'UPoseSearchFeatureChannel_Velocity::ComponentStripping' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Velocity, PermutationTimeType) == 0x000082, "Member 'UPoseSearchFeatureChannel_Velocity::PermutationTimeType' has a wrong offset!");

// Class PoseSearch.PoseSearchHistoryCollectorAnimNodeLibrary
// 0x0000 (0x0028 - 0x0028)
class UPoseSearchHistoryCollectorAnimNodeLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FPoseSearchHistoryCollectorAnimNodeReference ConvertToPoseHistoryNode(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result);
	static void ConvertToPoseHistoryNodePure(const struct FAnimNodeReference& Node, struct FPoseSearchHistoryCollectorAnimNodeReference* PoseSearchHistoryCollectorNode, bool* Result);
	static void GetPoseHistoryNodeTrajectory(const struct FPoseSearchHistoryCollectorAnimNodeReference& PoseSearchHistoryCollectorNode, struct FPoseSearchQueryTrajectory* Trajectory);
	static void SetPoseHistoryNodeTrajectory(const struct FPoseSearchHistoryCollectorAnimNodeReference& PoseSearchHistoryCollectorNode, const struct FPoseSearchQueryTrajectory& Trajectory);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchHistoryCollectorAnimNodeLibrary">();
	}
	static class UPoseSearchHistoryCollectorAnimNodeLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchHistoryCollectorAnimNodeLibrary>();
	}
};
static_assert(alignof(UPoseSearchHistoryCollectorAnimNodeLibrary) == 0x000008, "Wrong alignment on UPoseSearchHistoryCollectorAnimNodeLibrary");
static_assert(sizeof(UPoseSearchHistoryCollectorAnimNodeLibrary) == 0x000028, "Wrong size on UPoseSearchHistoryCollectorAnimNodeLibrary");

// Class PoseSearch.PoseSearchMultiSequence
// 0x0010 (0x0040 - 0x0030)
class UPoseSearchMultiSequence final : public UDataAsset
{
public:
	TArray<struct FPoseSearchMultiSequenceItem>   Items;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	class UAnimSequenceBase* GetSequence(const class FName& Role) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchMultiSequence">();
	}
	static class UPoseSearchMultiSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchMultiSequence>();
	}
};
static_assert(alignof(UPoseSearchMultiSequence) == 0x000008, "Wrong alignment on UPoseSearchMultiSequence");
static_assert(sizeof(UPoseSearchMultiSequence) == 0x000040, "Wrong size on UPoseSearchMultiSequence");
static_assert(offsetof(UPoseSearchMultiSequence, Items) == 0x000030, "Member 'UPoseSearchMultiSequence::Items' has a wrong offset!");

// Class PoseSearch.PoseSearchNormalizationSet
// 0x0010 (0x0040 - 0x0030)
class UPoseSearchNormalizationSet final : public UDataAsset
{
public:
	TArray<class UPoseSearchDatabase*>            Databases;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchNormalizationSet">();
	}
	static class UPoseSearchNormalizationSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchNormalizationSet>();
	}
};
static_assert(alignof(UPoseSearchNormalizationSet) == 0x000008, "Wrong alignment on UPoseSearchNormalizationSet");
static_assert(sizeof(UPoseSearchNormalizationSet) == 0x000040, "Wrong size on UPoseSearchNormalizationSet");
static_assert(offsetof(UPoseSearchNormalizationSet, Databases) == 0x000030, "Member 'UPoseSearchNormalizationSet::Databases' has a wrong offset!");

// Class PoseSearch.PoseSearchSchema
// 0x0050 (0x0080 - 0x0030)
class UPoseSearchSchema final : public UDataAsset
{
public:
	class USkeleton*                              Skeleton;                                          // 0x0030(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPoseSearchRoledSkeleton>       Skeletons;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UPoseSearchFeatureChannel*>      Channels;                                          // 0x0050(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UPoseSearchFeatureChannel*>      FinalizedChannels;                                 // 0x0060(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UMirrorDataTable*                       MirrorDataTable;                                   // 0x0070(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SchemaCardinality;                                 // 0x0078(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddDataPadding;                                   // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInjectAdditionalDebugChannels;                    // 0x007D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchSchema">();
	}
	static class UPoseSearchSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchSchema>();
	}
};
static_assert(alignof(UPoseSearchSchema) == 0x000008, "Wrong alignment on UPoseSearchSchema");
static_assert(sizeof(UPoseSearchSchema) == 0x000080, "Wrong size on UPoseSearchSchema");
static_assert(offsetof(UPoseSearchSchema, Skeleton) == 0x000030, "Member 'UPoseSearchSchema::Skeleton' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, SampleRate) == 0x000038, "Member 'UPoseSearchSchema::SampleRate' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, Skeletons) == 0x000040, "Member 'UPoseSearchSchema::Skeletons' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, Channels) == 0x000050, "Member 'UPoseSearchSchema::Channels' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, FinalizedChannels) == 0x000060, "Member 'UPoseSearchSchema::FinalizedChannels' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, MirrorDataTable) == 0x000070, "Member 'UPoseSearchSchema::MirrorDataTable' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, SchemaCardinality) == 0x000078, "Member 'UPoseSearchSchema::SchemaCardinality' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, bAddDataPadding) == 0x00007C, "Member 'UPoseSearchSchema::bAddDataPadding' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, bInjectAdditionalDebugChannels) == 0x00007D, "Member 'UPoseSearchSchema::bInjectAdditionalDebugChannels' has a wrong offset!");

// Class PoseSearch.PoseSearchTrajectoryLibrary
// 0x0000 (0x0028 - 0x0028)
class UPoseSearchTrajectoryLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void GetTrajectorySampleAtTime(const struct FPoseSearchQueryTrajectory& InTrajectory, float Time, struct FPoseSearchQueryTrajectorySample* OutTrajectorySample, bool bExtrapolate);
	static void HandleTrajectoryWorldCollisions(const class UObject* WorldContextObject, const class UAnimInstance* AnimInstance, const struct FPoseSearchQueryTrajectory& InTrajectory, bool bApplyGravity, float FloorCollisionsOffset, struct FPoseSearchQueryTrajectory* OutTrajectory, struct FPoseSearchTrajectory_WorldCollisionResults* CollisionResult, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, bool bIgnoreSelf, float MaxObstacleHeight, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	static void PoseSearchGenerateTrajectory(const class UAnimInstance* InAnimInstance, const struct FPoseSearchTrajectoryData& InTrajectoryData, float InDeltaTime, struct FPoseSearchQueryTrajectory& InOutTrajectory, float& InOutDesiredControllerYawLastUpdate, struct FPoseSearchQueryTrajectory* OutTrajectory, float InHistorySamplingInterval, int32 InTrajectoryHistoryCount, float InPredictionSamplingInterval, int32 InTrajectoryPredictionCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchTrajectoryLibrary">();
	}
	static class UPoseSearchTrajectoryLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchTrajectoryLibrary>();
	}
};
static_assert(alignof(UPoseSearchTrajectoryLibrary) == 0x000008, "Wrong alignment on UPoseSearchTrajectoryLibrary");
static_assert(sizeof(UPoseSearchTrajectoryLibrary) == 0x000028, "Wrong size on UPoseSearchTrajectoryLibrary");

// Class PoseSearch.AnimNotifyState_PoseSearchBase
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_PoseSearchBase : public UAnimNotifyState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchBase">();
	}
	static class UAnimNotifyState_PoseSearchBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchBase>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchBase) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchBase");
static_assert(sizeof(UAnimNotifyState_PoseSearchBase) == 0x000030, "Wrong size on UAnimNotifyState_PoseSearchBase");

// Class PoseSearch.AnimNotifyState_PoseSearchExcludeFromDatabase
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_PoseSearchExcludeFromDatabase final : public UAnimNotifyState_PoseSearchBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchExcludeFromDatabase">();
	}
	static class UAnimNotifyState_PoseSearchExcludeFromDatabase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchExcludeFromDatabase>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchExcludeFromDatabase) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchExcludeFromDatabase");
static_assert(sizeof(UAnimNotifyState_PoseSearchExcludeFromDatabase) == 0x000030, "Wrong size on UAnimNotifyState_PoseSearchExcludeFromDatabase");

// Class PoseSearch.AnimNotifyState_PoseSearchBlockTransition
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_PoseSearchBlockTransition final : public UAnimNotifyState_PoseSearchBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchBlockTransition">();
	}
	static class UAnimNotifyState_PoseSearchBlockTransition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchBlockTransition>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchBlockTransition) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchBlockTransition");
static_assert(sizeof(UAnimNotifyState_PoseSearchBlockTransition) == 0x000030, "Wrong size on UAnimNotifyState_PoseSearchBlockTransition");

// Class PoseSearch.AnimNotifyState_PoseSearchModifyCost
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_PoseSearchModifyCost final : public UAnimNotifyState_PoseSearchBase
{
public:
	float                                         CostAddend;                                        // 0x0030(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchModifyCost">();
	}
	static class UAnimNotifyState_PoseSearchModifyCost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchModifyCost>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchModifyCost) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchModifyCost");
static_assert(sizeof(UAnimNotifyState_PoseSearchModifyCost) == 0x000038, "Wrong size on UAnimNotifyState_PoseSearchModifyCost");
static_assert(offsetof(UAnimNotifyState_PoseSearchModifyCost, CostAddend) == 0x000030, "Member 'UAnimNotifyState_PoseSearchModifyCost::CostAddend' has a wrong offset!");

// Class PoseSearch.AnimNotifyState_PoseSearchOverrideContinuingPoseCostBias
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias final : public UAnimNotifyState_PoseSearchBase
{
public:
	float                                         CostAddend;                                        // 0x0030(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchOverrideContinuingPoseCostBias">();
	}
	static class UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias");
static_assert(sizeof(UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias) == 0x000038, "Wrong size on UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias");
static_assert(offsetof(UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias, CostAddend) == 0x000030, "Member 'UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias::CostAddend' has a wrong offset!");

// Class PoseSearch.AnimNotifyState_PoseSearchSamplingEvent
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_PoseSearchSamplingEvent : public UAnimNotifyState_PoseSearchBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchSamplingEvent">();
	}
	static class UAnimNotifyState_PoseSearchSamplingEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchSamplingEvent>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchSamplingEvent) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchSamplingEvent");
static_assert(sizeof(UAnimNotifyState_PoseSearchSamplingEvent) == 0x000030, "Wrong size on UAnimNotifyState_PoseSearchSamplingEvent");

// Class PoseSearch.AnimNotifyState_PoseSearchSamplingAttribute
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_PoseSearchSamplingAttribute final : public UAnimNotifyState_PoseSearchSamplingEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchSamplingAttribute">();
	}
	static class UAnimNotifyState_PoseSearchSamplingAttribute* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchSamplingAttribute>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchSamplingAttribute) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchSamplingAttribute");
static_assert(sizeof(UAnimNotifyState_PoseSearchSamplingAttribute) == 0x000030, "Wrong size on UAnimNotifyState_PoseSearchSamplingAttribute");

// Class PoseSearch.AnimNotifyState_PoseSearchBranchIn
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_PoseSearchBranchIn final : public UAnimNotifyState_PoseSearchBase
{
public:
	class UPoseSearchDatabase*                    Database;                                          // 0x0030(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchBranchIn">();
	}
	static class UAnimNotifyState_PoseSearchBranchIn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchBranchIn>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchBranchIn) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchBranchIn");
static_assert(sizeof(UAnimNotifyState_PoseSearchBranchIn) == 0x000038, "Wrong size on UAnimNotifyState_PoseSearchBranchIn");
static_assert(offsetof(UAnimNotifyState_PoseSearchBranchIn, Database) == 0x000030, "Member 'UAnimNotifyState_PoseSearchBranchIn::Database' has a wrong offset!");

// Class PoseSearch.PoseSearchLibrary
// 0x0000 (0x0028 - 0x0028)
class UPoseSearchLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void MotionMatch(class UAnimInstance* AnimInstance, const TArray<class UObject*>& AssetsToSearch, const class FName PoseHistoryName, const struct FPoseSearchFutureProperties& Future, struct FPoseSearchBlueprintResult* Result, const int32 DebugSessionUniqueIdentifier);
	static void MotionMatchMulti(const TArray<class ACharacter*>& AnimInstances, const TArray<class FName>& Roles, const TArray<class UObject*>& AssetsToSearch, const class FName PoseHistoryName, struct FPoseSearchBlueprintResult* Result, const int32 DebugSessionUniqueIdentifier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchLibrary">();
	}
	static class UPoseSearchLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchLibrary>();
	}
};
static_assert(alignof(UPoseSearchLibrary) == 0x000008, "Wrong alignment on UPoseSearchLibrary");
static_assert(sizeof(UPoseSearchLibrary) == 0x000028, "Wrong size on UPoseSearchLibrary");

}

