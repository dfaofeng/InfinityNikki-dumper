#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperAnalyticsHelper

#include "Basic.hpp"

#include "PaperAnalyticsHelper_classes.hpp"
#include "PaperAnalyticsHelper_parameters.hpp"


namespace SDK
{

// Function PaperAnalyticsHelper.PaperAnalyticsLibrary.EndPerformanceEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperAnalyticsLibrary::EndPerformanceEvent(const class FString& EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperAnalyticsLibrary", "EndPerformanceEvent");

	Params::PaperAnalyticsLibrary_EndPerformanceEvent Parms{};

	Parms.EventName = std::move(EventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperAnalyticsHelper.PaperAnalyticsLibrary.EndPerformanceEventWithAttributes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&Attributes                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPaperAnalyticsLibrary::EndPerformanceEventWithAttributes(const class FString& EventName, const TMap<class FString, class FString>& Attributes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperAnalyticsLibrary", "EndPerformanceEventWithAttributes");

	Params::PaperAnalyticsLibrary_EndPerformanceEventWithAttributes Parms{};

	Parms.EventName = std::move(EventName);
	Parms.Attributes = std::move(Attributes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperAnalyticsHelper.PaperAnalyticsLibrary.StartPerformanceEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    StrMapName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceTopName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperAnalyticsLibrary::StartPerformanceEvent(const class FString& StrMapName, bool ForceTopName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperAnalyticsLibrary", "StartPerformanceEvent");

	Params::PaperAnalyticsLibrary_StartPerformanceEvent Parms{};

	Parms.StrMapName = std::move(StrMapName);
	Parms.ForceTopName = ForceTopName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperAnalyticsHelper.PaperAnalyticsLibrary.StartPerformanceEventWithAttributes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FString, class FString>&Attributes                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ForceTopName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperAnalyticsLibrary::StartPerformanceEventWithAttributes(const class FString& EventName, const TMap<class FString, class FString>& Attributes, bool ForceTopName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperAnalyticsLibrary", "StartPerformanceEventWithAttributes");

	Params::PaperAnalyticsLibrary_StartPerformanceEventWithAttributes Parms{};

	Parms.EventName = std::move(EventName);
	Parms.Attributes = std::move(Attributes);
	Parms.ForceTopName = ForceTopName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

