#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimToTexture

#include "Basic.hpp"

#include "AnimToTexture_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class AnimToTexture.AnimToTextureDataAsset
// 0x0230 (0x0260 - 0x0030)
class UAnimToTextureDataAsset final : public UPrimaryDataAsset
{
public:
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkeletalLODIndex;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0060(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StaticLODIndex;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UVChannel;                                         // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDriverTriangles;                                // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sigma;                                             // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHeight;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWidth;                                          // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforcePowerOfTwo;                                // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimToTexturePrecision                       Precision;                                         // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimToTextureMode                            Mode;                                              // 0x00A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              VertexPositionTexture;                             // 0x00A8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              VertexNormalTexture;                               // 0x00D0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BonePositionTexture;                               // 0x00F8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BoneRotationTexture;                               // 0x0120(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BoneWeightTexture;                                 // 0x0148(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             RootTransform;                                     // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachToSocket;                                    // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleRate;                                        // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimToTextureAnimSequenceInfo> AnimSequences;                                     // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AnimationIndex;                                    // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frame;                                             // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimToTextureNumBoneInfluences               NumBoneInfluences;                                 // 0x01FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumFrames;                                         // 0x0200(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumBones;                                          // 0x0204(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VertexRowsPerFrame;                                // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              VertexMinBBox;                                     // 0x020C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              VertexSizeBBox;                                    // 0x0218(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneWeightRowsPerFrame;                            // 0x0224(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneRowsPerFrame;                                  // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              BoneMinBBox;                                       // 0x022C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              BoneSizeBBox;                                      // 0x0238(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimToTextureAnimInfo>         Animations;                                        // 0x0248(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTexture2D* BP_GetBonePositionTexture();
	class UTexture2D* BP_GetBoneRotationTexture();
	class UTexture2D* BP_GetBoneWeightTexture();
	class USkeletalMesh* BP_GetSkeletalMesh();
	class UStaticMesh* BP_GetStaticMesh();
	int32 GetIndexFromAnimSequence(const class UAnimSequence* Sequence);
	void ResetInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimToTextureDataAsset">();
	}
	static class UAnimToTextureDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimToTextureDataAsset>();
	}
};
static_assert(alignof(UAnimToTextureDataAsset) == 0x000010, "Wrong alignment on UAnimToTextureDataAsset");
static_assert(sizeof(UAnimToTextureDataAsset) == 0x000260, "Wrong size on UAnimToTextureDataAsset");
static_assert(offsetof(UAnimToTextureDataAsset, SkeletalMesh) == 0x000030, "Member 'UAnimToTextureDataAsset::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, SkeletalLODIndex) == 0x000058, "Member 'UAnimToTextureDataAsset::SkeletalLODIndex' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, StaticMesh) == 0x000060, "Member 'UAnimToTextureDataAsset::StaticMesh' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, StaticLODIndex) == 0x000088, "Member 'UAnimToTextureDataAsset::StaticLODIndex' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, UVChannel) == 0x00008C, "Member 'UAnimToTextureDataAsset::UVChannel' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, NumDriverTriangles) == 0x000090, "Member 'UAnimToTextureDataAsset::NumDriverTriangles' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, Sigma) == 0x000094, "Member 'UAnimToTextureDataAsset::Sigma' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, MaxHeight) == 0x000098, "Member 'UAnimToTextureDataAsset::MaxHeight' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, MaxWidth) == 0x00009C, "Member 'UAnimToTextureDataAsset::MaxWidth' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, bEnforcePowerOfTwo) == 0x0000A0, "Member 'UAnimToTextureDataAsset::bEnforcePowerOfTwo' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, Precision) == 0x0000A1, "Member 'UAnimToTextureDataAsset::Precision' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, Mode) == 0x0000A2, "Member 'UAnimToTextureDataAsset::Mode' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, VertexPositionTexture) == 0x0000A8, "Member 'UAnimToTextureDataAsset::VertexPositionTexture' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, VertexNormalTexture) == 0x0000D0, "Member 'UAnimToTextureDataAsset::VertexNormalTexture' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, BonePositionTexture) == 0x0000F8, "Member 'UAnimToTextureDataAsset::BonePositionTexture' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, BoneRotationTexture) == 0x000120, "Member 'UAnimToTextureDataAsset::BoneRotationTexture' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, BoneWeightTexture) == 0x000148, "Member 'UAnimToTextureDataAsset::BoneWeightTexture' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, RootTransform) == 0x000170, "Member 'UAnimToTextureDataAsset::RootTransform' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, AttachToSocket) == 0x0001D0, "Member 'UAnimToTextureDataAsset::AttachToSocket' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, SampleRate) == 0x0001D8, "Member 'UAnimToTextureDataAsset::SampleRate' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, AnimSequences) == 0x0001E0, "Member 'UAnimToTextureDataAsset::AnimSequences' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, bAutoPlay) == 0x0001F0, "Member 'UAnimToTextureDataAsset::bAutoPlay' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, AnimationIndex) == 0x0001F4, "Member 'UAnimToTextureDataAsset::AnimationIndex' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, Frame) == 0x0001F8, "Member 'UAnimToTextureDataAsset::Frame' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, NumBoneInfluences) == 0x0001FC, "Member 'UAnimToTextureDataAsset::NumBoneInfluences' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, NumFrames) == 0x000200, "Member 'UAnimToTextureDataAsset::NumFrames' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, NumBones) == 0x000204, "Member 'UAnimToTextureDataAsset::NumBones' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, VertexRowsPerFrame) == 0x000208, "Member 'UAnimToTextureDataAsset::VertexRowsPerFrame' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, VertexMinBBox) == 0x00020C, "Member 'UAnimToTextureDataAsset::VertexMinBBox' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, VertexSizeBBox) == 0x000218, "Member 'UAnimToTextureDataAsset::VertexSizeBBox' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, BoneWeightRowsPerFrame) == 0x000224, "Member 'UAnimToTextureDataAsset::BoneWeightRowsPerFrame' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, BoneRowsPerFrame) == 0x000228, "Member 'UAnimToTextureDataAsset::BoneRowsPerFrame' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, BoneMinBBox) == 0x00022C, "Member 'UAnimToTextureDataAsset::BoneMinBBox' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, BoneSizeBBox) == 0x000238, "Member 'UAnimToTextureDataAsset::BoneSizeBBox' has a wrong offset!");
static_assert(offsetof(UAnimToTextureDataAsset, Animations) == 0x000248, "Member 'UAnimToTextureDataAsset::Animations' has a wrong offset!");

// Class AnimToTexture.AnimToTextureInstancePlaybackLibrary
// 0x0000 (0x0028 - 0x0028)
class UAnimToTextureInstancePlaybackLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool BatchUpdateInstancesAutoPlayData(class UInstancedStaticMeshComponent* InstancedMeshComponent, const TArray<struct FAnimToTextureAutoPlayData>& AutoPlayData, const TArray<struct FMatrix>& Transforms, bool bMarkRenderStateDirty);
	static bool BatchUpdateInstancesFrameData(class UInstancedStaticMeshComponent* InstancedMeshComponent, const TArray<struct FAnimToTextureFrameData>& FrameData, const TArray<struct FMatrix>& Transforms, bool bMarkRenderStateDirty);
	static bool GetAutoPlayDataFromDataAsset(const class UAnimToTextureDataAsset* DataAsset, int32 AnimationIndex, struct FAnimToTextureAutoPlayData* AutoPlayData, float TimeOffset, float PlayRate);
	static float GetFrame(float Time, float StartFrame, float EndFrame, float TimeOffset, float PlayRate, float SampleRate);
	static bool GetFrameDataFromDataAsset(const class UAnimToTextureDataAsset* DataAsset, int32 AnimationIndex, float Time, struct FAnimToTextureFrameData* AutoPlayData, float TimeOffset, float PlayRate);
	static bool SetupInstancedMeshComponent(class UInstancedStaticMeshComponent* InstancedMeshComponent, int32 NumInstances, bool bAutoPlay);
	static bool UpdateInstanceAutoPlayData(class UInstancedStaticMeshComponent* InstancedMeshComponent, int32 InstanceIndex, const struct FAnimToTextureAutoPlayData& AutoPlayData, bool bMarkRenderStateDirty);
	static bool UpdateInstanceFrameData(class UInstancedStaticMeshComponent* InstancedMeshComponent, int32 InstanceIndex, const struct FAnimToTextureFrameData& FrameData, bool bMarkRenderStateDirty);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimToTextureInstancePlaybackLibrary">();
	}
	static class UAnimToTextureInstancePlaybackLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimToTextureInstancePlaybackLibrary>();
	}
};
static_assert(alignof(UAnimToTextureInstancePlaybackLibrary) == 0x000008, "Wrong alignment on UAnimToTextureInstancePlaybackLibrary");
static_assert(sizeof(UAnimToTextureInstancePlaybackLibrary) == 0x000028, "Wrong size on UAnimToTextureInstancePlaybackLibrary");

}

