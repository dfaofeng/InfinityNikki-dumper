#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6SplineRoad

#include "Basic.hpp"

#include "PaperGamesSEM_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function X6SplineRoad.X6SplineRoad.SetRoadData
// 0x0090 (0x0090 - 0x0000)
struct X6SplineRoad_SetRoadData final
{
public:
	int64                                         ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSEMSplineData                         InRoadData;                                        // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SplineRoad_SetRoadData) == 0x000008, "Wrong alignment on X6SplineRoad_SetRoadData");
static_assert(sizeof(X6SplineRoad_SetRoadData) == 0x000090, "Wrong size on X6SplineRoad_SetRoadData");
static_assert(offsetof(X6SplineRoad_SetRoadData, ID) == 0x000000, "Member 'X6SplineRoad_SetRoadData::ID' has a wrong offset!");
static_assert(offsetof(X6SplineRoad_SetRoadData, InRoadData) == 0x000008, "Member 'X6SplineRoad_SetRoadData::InRoadData' has a wrong offset!");

// Function X6SplineRoad.X6SplineRoad.GetDistanceAlongSplineAtSplinePoint
// 0x0008 (0x0008 - 0x0000)
struct X6SplineRoad_GetDistanceAlongSplineAtSplinePoint final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SplineRoad_GetDistanceAlongSplineAtSplinePoint) == 0x000004, "Wrong alignment on X6SplineRoad_GetDistanceAlongSplineAtSplinePoint");
static_assert(sizeof(X6SplineRoad_GetDistanceAlongSplineAtSplinePoint) == 0x000008, "Wrong size on X6SplineRoad_GetDistanceAlongSplineAtSplinePoint");
static_assert(offsetof(X6SplineRoad_GetDistanceAlongSplineAtSplinePoint, PointIndex) == 0x000000, "Member 'X6SplineRoad_GetDistanceAlongSplineAtSplinePoint::PointIndex' has a wrong offset!");
static_assert(offsetof(X6SplineRoad_GetDistanceAlongSplineAtSplinePoint, ReturnValue) == 0x000004, "Member 'X6SplineRoad_GetDistanceAlongSplineAtSplinePoint::ReturnValue' has a wrong offset!");

// Function X6SplineRoad.X6SplineRoad.GetLocationAtDistanceAlongSpline
// 0x0020 (0x0020 - 0x0000)
struct X6SplineRoad_GetLocationAtDistanceAlongSpline final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SplineRoad_GetLocationAtDistanceAlongSpline) == 0x000008, "Wrong alignment on X6SplineRoad_GetLocationAtDistanceAlongSpline");
static_assert(sizeof(X6SplineRoad_GetLocationAtDistanceAlongSpline) == 0x000020, "Wrong size on X6SplineRoad_GetLocationAtDistanceAlongSpline");
static_assert(offsetof(X6SplineRoad_GetLocationAtDistanceAlongSpline, Distance) == 0x000000, "Member 'X6SplineRoad_GetLocationAtDistanceAlongSpline::Distance' has a wrong offset!");
static_assert(offsetof(X6SplineRoad_GetLocationAtDistanceAlongSpline, ReturnValue) == 0x000008, "Member 'X6SplineRoad_GetLocationAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function X6SplineRoad.X6SplineRoad.GetLocationAtSplineInputKey
// 0x0020 (0x0020 - 0x0000)
struct X6SplineRoad_GetLocationAtSplineInputKey final
{
public:
	float                                         InKey;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SplineRoad_GetLocationAtSplineInputKey) == 0x000008, "Wrong alignment on X6SplineRoad_GetLocationAtSplineInputKey");
static_assert(sizeof(X6SplineRoad_GetLocationAtSplineInputKey) == 0x000020, "Wrong size on X6SplineRoad_GetLocationAtSplineInputKey");
static_assert(offsetof(X6SplineRoad_GetLocationAtSplineInputKey, InKey) == 0x000000, "Member 'X6SplineRoad_GetLocationAtSplineInputKey::InKey' has a wrong offset!");
static_assert(offsetof(X6SplineRoad_GetLocationAtSplineInputKey, ReturnValue) == 0x000008, "Member 'X6SplineRoad_GetLocationAtSplineInputKey::ReturnValue' has a wrong offset!");

// Function X6SplineRoad.X6SplineRoad.GetLocationAtSplinePoint
// 0x0020 (0x0020 - 0x0000)
struct X6SplineRoad_GetLocationAtSplinePoint final
{
public:
	int32                                         PointIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SplineRoad_GetLocationAtSplinePoint) == 0x000008, "Wrong alignment on X6SplineRoad_GetLocationAtSplinePoint");
static_assert(sizeof(X6SplineRoad_GetLocationAtSplinePoint) == 0x000020, "Wrong size on X6SplineRoad_GetLocationAtSplinePoint");
static_assert(offsetof(X6SplineRoad_GetLocationAtSplinePoint, PointIndex) == 0x000000, "Member 'X6SplineRoad_GetLocationAtSplinePoint::PointIndex' has a wrong offset!");
static_assert(offsetof(X6SplineRoad_GetLocationAtSplinePoint, ReturnValue) == 0x000008, "Member 'X6SplineRoad_GetLocationAtSplinePoint::ReturnValue' has a wrong offset!");

// Function X6SplineRoad.X6SplineRoad.GetRoadID
// 0x0008 (0x0008 - 0x0000)
struct X6SplineRoad_GetRoadID final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SplineRoad_GetRoadID) == 0x000008, "Wrong alignment on X6SplineRoad_GetRoadID");
static_assert(sizeof(X6SplineRoad_GetRoadID) == 0x000008, "Wrong size on X6SplineRoad_GetRoadID");
static_assert(offsetof(X6SplineRoad_GetRoadID, ReturnValue) == 0x000000, "Member 'X6SplineRoad_GetRoadID::ReturnValue' has a wrong offset!");

// Function X6SplineRoad.X6SplineRoad.GetRoadNodeNum
// 0x0004 (0x0004 - 0x0000)
struct X6SplineRoad_GetRoadNodeNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SplineRoad_GetRoadNodeNum) == 0x000004, "Wrong alignment on X6SplineRoad_GetRoadNodeNum");
static_assert(sizeof(X6SplineRoad_GetRoadNodeNum) == 0x000004, "Wrong size on X6SplineRoad_GetRoadNodeNum");
static_assert(offsetof(X6SplineRoad_GetRoadNodeNum, ReturnValue) == 0x000000, "Member 'X6SplineRoad_GetRoadNodeNum::ReturnValue' has a wrong offset!");

// Function X6SplineRoad.X6SplineRoad.GetRoadNodes
// 0x0010 (0x0010 - 0x0000)
struct X6SplineRoad_GetRoadNodes final
{
public:
	TArray<int64>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SplineRoad_GetRoadNodes) == 0x000008, "Wrong alignment on X6SplineRoad_GetRoadNodes");
static_assert(sizeof(X6SplineRoad_GetRoadNodes) == 0x000010, "Wrong size on X6SplineRoad_GetRoadNodes");
static_assert(offsetof(X6SplineRoad_GetRoadNodes, ReturnValue) == 0x000000, "Member 'X6SplineRoad_GetRoadNodes::ReturnValue' has a wrong offset!");

// Function X6SplineRoad.X6SplineRoad.GetSplineLength
// 0x0004 (0x0004 - 0x0000)
struct X6SplineRoad_GetSplineLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SplineRoad_GetSplineLength) == 0x000004, "Wrong alignment on X6SplineRoad_GetSplineLength");
static_assert(sizeof(X6SplineRoad_GetSplineLength) == 0x000004, "Wrong size on X6SplineRoad_GetSplineLength");
static_assert(offsetof(X6SplineRoad_GetSplineLength, ReturnValue) == 0x000000, "Member 'X6SplineRoad_GetSplineLength::ReturnValue' has a wrong offset!");

// Function X6SplineRoad.X6SplineRoad.GetTangentAtSplineInputKey
// 0x0020 (0x0020 - 0x0000)
struct X6SplineRoad_GetTangentAtSplineInputKey final
{
public:
	float                                         InKey;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6SplineRoad_GetTangentAtSplineInputKey) == 0x000008, "Wrong alignment on X6SplineRoad_GetTangentAtSplineInputKey");
static_assert(sizeof(X6SplineRoad_GetTangentAtSplineInputKey) == 0x000020, "Wrong size on X6SplineRoad_GetTangentAtSplineInputKey");
static_assert(offsetof(X6SplineRoad_GetTangentAtSplineInputKey, InKey) == 0x000000, "Member 'X6SplineRoad_GetTangentAtSplineInputKey::InKey' has a wrong offset!");
static_assert(offsetof(X6SplineRoad_GetTangentAtSplineInputKey, ReturnValue) == 0x000008, "Member 'X6SplineRoad_GetTangentAtSplineInputKey::ReturnValue' has a wrong offset!");

}

