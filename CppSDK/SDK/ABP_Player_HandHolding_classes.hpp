#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Player_HandHolding

#include "Basic.hpp"

#include "PBIK_structs.hpp"
#include "ABP_Player_HandHolding_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "X6Animation_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Player_HandHolding.ABP_Player_HandHolding_C
// 0x5CE0 (0x60B0 - 0x03D0)
class UABP_Player_HandHolding_C final : public UAnimInstance
{
public:
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Player_HandHolding::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;       // 0x03D8(0x0044)(HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0420(0x0008)()
	struct FAnimSubsystemInstance_NodeRelevancy   AnimBlueprintExtension_NodeRelevancy;              // 0x0428(0x00A8)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x04D0(0x0008)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_5;                   // 0x04D8(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_16;                             // 0x0590(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_4;                   // 0x05B0(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_15;                             // 0x0668(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_14;                             // 0x0688(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_13;                             // 0x06A8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_12;                             // 0x06C8(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_3;                   // 0x06E8(0x00B8)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig_1;                        // 0x07A0(0x04D0)(ContainsInstancedReference)
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_5;                    // 0x0C70(0x0080)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_26;                 // 0x0CF0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_25;                 // 0x0D18(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_24;                 // 0x0D40(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_23;                 // 0x0D68(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_22;                 // 0x0D90(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_21;                 // 0x0DB8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_20;                 // 0x0DE0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_19;                 // 0x0E08(0x0028)()
	struct FAnimNode_Mirror                       AnimGraphNode_Mirror_9;                            // 0x0E30(0x0048)()
	struct FAnimNode_Mirror                       AnimGraphNode_Mirror_8;                            // 0x0E78(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_16;                   // 0x0EC0(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_13;                  // 0x0F08(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_15;                   // 0x0F50(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_20;                      // 0x0F98(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_18;                 // 0x0FB8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_17;                 // 0x0FE0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_16;                 // 0x1008(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_15;                 // 0x1030(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x1058(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x1080(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x10A8(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_12;                  // 0x10D0(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_15;                    // 0x1118(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x1140(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_14;                    // 0x1168(0x0028)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x1190(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_14;                   // 0x1258(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_13;                    // 0x12A0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_12;                    // 0x12C8(0x0028)()
	struct FAnimNode_X6OverlayBlend               AnimGraphNode_X6OverlayBlend_2;                    // 0x12F0(0x0258)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_19;                      // 0x1548(0x0020)()
	struct FAnimNode_Mirror                       AnimGraphNode_Mirror_7;                            // 0x1568(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_13;                   // 0x15B0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_18;                      // 0x15F8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_7;                      // 0x1618(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_17;                      // 0x16E0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_12;                   // 0x1700(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_11;                    // 0x1748(0x0028)()
	struct FAnimNode_X6OverlayBlend               AnimGraphNode_X6OverlayBlend_1;                    // 0x1770(0x0258)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x19C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x19F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x1A18(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x1A40(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_5;                  // 0x1A68(0x0078)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x1AE0(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_11;                   // 0x1BA8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_16;                      // 0x1BF0(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_4;                  // 0x1C10(0x0078)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x1C88(0x00C8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_11;                  // 0x1D50(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_10;                   // 0x1D98(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x1DE0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_15;                      // 0x1E28(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_10;                    // 0x1E48(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_14;                      // 0x1E70(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_6;                      // 0x1E90(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_13;                      // 0x1F58(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_5;                      // 0x1F78(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_12;                      // 0x2040(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x2060(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_11;                      // 0x20A8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x20C8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_10;                      // 0x2110(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_4;                      // 0x2130(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x21F8(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x2218(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x2240(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x2268(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_9;                     // 0x2290(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x22B8(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_8;                     // 0x22D8(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_10;                  // 0x2300(0x0048)()
	struct FAnimNode_Mirror                       AnimGraphNode_Mirror_6;                            // 0x2348(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x2390(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x23D8(0x0020)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_9;                   // 0x23F8(0x0048)()
	struct FAnimNode_Mirror                       AnimGraphNode_Mirror_5;                            // 0x2440(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x2488(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x24D0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x2518(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_3;                      // 0x2538(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x2600(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x2620(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x2648(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x2670(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x2698(0x0028)()
	struct FAnimNode_Mirror                       AnimGraphNode_Mirror_4;                            // 0x26C0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x2708(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x2750(0x0020)()
	struct FAnimNode_Mirror                       AnimGraphNode_Mirror_3;                            // 0x2770(0x0048)()
	struct FAnimNode_Mirror                       AnimGraphNode_Mirror_2;                            // 0x27B8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x2800(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x2848(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_8;                   // 0x2890(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x28D8(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_7;                     // 0x28F8(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x2920(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x2940(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x2A08(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x2A28(0x00C8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_3;                  // 0x2AF0(0x0078)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x2B68(0x0078)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x2BE0(0x0078)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x2C58(0x0078)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_7;                   // 0x2CD0(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_6;                   // 0x2D18(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_5;                   // 0x2D60(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x2DA8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x2DC8(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_4;                    // 0x2E90(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x2F10(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x2F58(0x0048)()
	struct FAnimNode_X6SequencePlayer             AnimGraphNode_X6SequencePlayer_3;                  // 0x2FA0(0x0108)()
	struct FAnimNode_X6SequencePlayer             AnimGraphNode_X6SequencePlayer_2;                  // 0x30A8(0x0108)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_3;                    // 0x31B0(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x3230(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x3258(0x0048)()
	struct FAnimNode_X6OverlayBlend               AnimGraphNode_X6OverlayBlend;                      // 0x32A0(0x0258)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x34F8(0x0028)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x3520(0x0020)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_3;                          // 0x3540(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_2;                          // 0x3630(0x00F0)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x3720(0x0020)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_1;                          // 0x3740(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone;                            // 0x3830(0x00F0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x3920(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x39A0(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x39C8(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x39F0(0x0048)()
	uint8                                         Pad_3A38[0x8];                                     // 0x3A38(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_Inertialization              AnimGraphNode_Inertialization;                     // 0x3A40(0x0450)()
	struct FAnimNode_Root                         AnimGraphNode_Root_11;                             // 0x3E90(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_2;                   // 0x3EB0(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_10;                             // 0x3F68(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_9;                              // 0x3F88(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_8;                              // 0x3FA8(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_1;                   // 0x3FC8(0x00B8)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_5;                        // 0x4080(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_4;                        // 0x41A8(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x42D0(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x43F8(0x0128)()
	struct FAnimNode_Root                         AnimGraphNode_Root_7;                              // 0x4520(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x4540(0x00B8)()
	struct FAnimNode_Root                         AnimGraphNode_Root_6;                              // 0x45F8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_5;                              // 0x4618(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_4;                              // 0x4638(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_3;                              // 0x4658(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_2;                              // 0x4678(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x4698(0x0020)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x46B8(0x04D0)(ContainsInstancedReference)
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x4B88(0x0128)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x4CB0(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x4CD0(0x0020)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x4CF0(0x00F0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x4DE0(0x0028)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x4E08(0x0128)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x4F30(0x0048)()
	struct FAnimNode_X6SequencePlayer             AnimGraphNode_X6SequencePlayer_1;                  // 0x4F78(0x0108)()
	struct FAnimNode_Mirror                       AnimGraphNode_Mirror_1;                            // 0x5080(0x0048)()
	struct FAnimNode_X6SequencePlayer             AnimGraphNode_X6SequencePlayer;                    // 0x50C8(0x0108)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x51D0(0x0048)()
	struct FAnimNode_Mirror                       AnimGraphNode_Mirror;                              // 0x5218(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x5260(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x52E0(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x5360(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x5388(0x0028)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x53B0(0x0020)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer;                     // 0x53D0(0x00C8)()
	bool                                          K2Node_PropertyAccess_50;                          // 0x5498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_49;                          // 0x5499(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_48;                          // 0x549A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_47;                          // 0x549B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_46;                          // 0x549C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_45;                          // 0x549D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_44;                          // 0x549E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_43;                          // 0x549F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_42;                          // 0x54A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_41;                          // 0x54A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54A2[0x6];                                     // 0x54A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_PropertyAccess_38;                          // 0x54A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_37;                          // 0x54B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_36;                          // 0x54B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPBIKBoneSetting>               __CustomProperty_BP_RightBoneSettings_7210B0B64352C427F13AD195DAD7484C; // 0x54C0(0x0010)()
	TArray<struct FPBIKBoneSetting>               __CustomProperty_BP_LeftBoneSettings_7210B0B64352C427F13AD195DAD7484C; // 0x54D0(0x0010)()
	bool                                          __CustomProperty_BP_IsLeftHand_7210B0B64352C427F13AD195DAD7484C; // 0x54E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_BP_IsLeader_7210B0B64352C427F13AD195DAD7484C; // 0x54E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_BP_Enable_7210B0B64352C427F13AD195DAD7484C; // 0x54E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54E3[0xD];                                     // 0x54E3(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             __CustomProperty_HP_Weapon_L_ctrl_C5DBCE78497E872B150307A58B10052C; // 0x54F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             __CustomProperty_HP_Weapon_R_ctrl_C5DBCE78497E872B150307A58B10052C; // 0x5550(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_EnableHoldingHandIK_C5DBCE78497E872B150307A58B10052C; // 0x55B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __CustomProperty_HoldingRightHandOrLeftHand_C5DBCE78497E872B150307A58B10052C; // 0x55B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55B2[0x6];                                     // 0x55B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                __CustomProperty_TargetLocation_C5DBCE78497E872B150307A58B10052C; // 0x55B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_35;                          // 0x55D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_34;                          // 0x55D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_33;                          // 0x55E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_32;                          // 0x55E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_31;                          // 0x55F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_30;                          // 0x55F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_29;                          // 0x5600(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_28;                          // 0x5618(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_27;                          // 0x5630(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_26;                          // 0x5648(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FName                                   K2Node_PropertyAccess_25;                          // 0x5650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_PropertyAccess_24;                          // 0x5658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_23;                          // 0x5660(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_22;                          // 0x5668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_21;                          // 0x5670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_20;                          // 0x5678(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_19;                          // 0x5680(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_18;                          // 0x5688(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_17;                          // 0x5690(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_16;                          // 0x5698(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_15;                          // 0x56A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_14;                          // 0x56A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_13;                          // 0x56B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_12;                          // 0x56B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_PropertyAccess_11;                          // 0x56C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess_10;                          // 0x56C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_9;                           // 0x56D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_8;                           // 0x56E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_7;                           // 0x5700(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_6;                           // 0x5718(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_5;                           // 0x5730(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_4;                           // 0x5748(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_3;                           // 0x5760(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_2;                           // 0x5778(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_PropertyAccess_1;                           // 0x5790(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_PropertyAccess;                             // 0x57F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_MultiPlayerGroupMovementComponent_C* BP_MultiPlayerGroupMovementComponent;             // 0x57F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_HoldingRightHandOrLeftHand;                     // 0x5800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsHoldingHands;                                 // 0x5801(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsInvitingToHoldHands;                          // 0x5802(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5803[0x1];                                     // 0x5803(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BP_CurrentStateName;                               // 0x5804(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BP_PreStateName;                                   // 0x580C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsLeader;                                       // 0x5814(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5815[0x3];                                     // 0x5815(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BP_OtherHandBoneNameToBeHeld;                      // 0x5818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BP_MyHandBoneNameToBeHeld;                         // 0x5820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             BP_OtherCharacterToBeingHeldHand;                  // 0x5828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             BP_OwnerCharacter;                                 // 0x5830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   BP_HandToBeHeld_Left_IKBoneName;                   // 0x5838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BP_HandToBeHeld_Right_IKBoneName;                  // 0x5840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_HoldingHandTargetLocation;                      // 0x5848(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableHoldingHandsIK;                           // 0x5860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5861[0x7];                                     // 0x5861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             BP_LeaderCharacter;                                // 0x5868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNikkiAnim_BPNew_C*                     X6NikkiMainAnimInstance;                           // 0x5870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             BP_FollowerCharacter;                              // 0x5878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_HoldingHandsMovement_ConfigTemplate_C* BP_HoldingHandsConfig;                          // 0x5880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerAnimStatesComponent_C*        PlayerAnimStatesComp;                              // 0x5888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UX6CharacterMovementComponent*          CharacterMovementComp;                             // 0x5890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UX6RMInAirComponent*                    RMInAirComp;                                       // 0x5898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentAcceleration;                               // 0x58A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMovementInput;                                  // 0x58B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsHoldingHandsFloatMoving;                      // 0x58B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsBeingPulledToAnchorPoint;                     // 0x58BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58BB[0x5];                                     // 0x58BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_CurDistanceBetweenCharacters;                   // 0x58C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_WithinTheMinimumDistanceForActivatingHandHoldingAdditionalAnimationEffect; // 0x58C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _BP_EnablePoseOverlay;                             // 0x58C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableHandInHandGesture;                        // 0x58CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58CB[0x5];                                     // 0x58CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NikkiDeltaHeight;                                  // 0x58D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58D8[0x8];                                     // 0x58D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BP_HoldHandingSelfSocketLocalTransform_Left;       // 0x58E0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_HoldHandingSelfSocketLocalTransform_Right;      // 0x5940(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinimumDistanceForActivatingHandHoldingScale;      // 0x59A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBreakInviteAnim;                                // 0x59A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_IsWaitingForOthersToCompleteInvitation;         // 0x59A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59AA[0x6];                                     // 0x59AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_UpdateHoldingHandsFloatMovingTurnAngle;         // 0x59B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableHoldingHandsIKAnimCtrl;                     // 0x59B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59B9[0x7];                                     // 0x59B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Anim_IkAlpha;                                      // 0x59C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Anim_GestureAlpha;                                 // 0x59C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_LimbMaxLength;                                  // 0x59D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_LeaderMutiplier;                                // 0x59D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_FollowerMultiplier;                             // 0x59E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59E8[0x8];                                     // 0x59E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BP_LeaderShoulderTransform;                        // 0x59F0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_LeaderWristTransform;                           // 0x5A50(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_FollowerShoulderTransform;                      // 0x5AB0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_FollowerWristTransform;                         // 0x5B10(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_LeaderLimbLength;                               // 0x5B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_FollowerLimbLength;                             // 0x5B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_CurrentShoulderDist;                            // 0x5B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B88[0x8];                                     // 0x5B88(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BP_LeftIKTargetWorld;                              // 0x5B90(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_RightIKTargetWorld;                             // 0x5BF0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_LeftIKFollowerTargetWorld;                      // 0x5C50(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_RightIKFollowerTargetWorld;                     // 0x5CB0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_LeftIKTargetWorld_Calibrated;                   // 0x5D10(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_RightIKTargetWorld_Calibrated;                  // 0x5D70(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_LeftIKFollowerTargetWorld_Calibrated;           // 0x5DD0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_RightIKFollowerTargetWorld_Calibrated;          // 0x5E30(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_LeftIKTargetComp;                               // 0x5E90(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             BP_RightIKTargetComp;                              // 0x5EF0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_LeaderShoulderLocation;                         // 0x5F50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_FollowerShoulderLocation;                       // 0x5F68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_LeaderToFollowerNormal;                         // 0x5F80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_IntersectionLocation;                           // 0x5F98(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_HoldingHandBakedPoseData_C*         PoseData;                                          // 0x5FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      LeaderPose;                                        // 0x5FB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimSequenceBase*                      FollowerPose;                                      // 0x5FC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        BP_PoseShoulderDist;                               // 0x5FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             HandRelativeTransform;                             // 0x5FD0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_HandLink;                                       // 0x6030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6031[0x3];                                     // 0x6031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BP_BestPoseIndex;                                  // 0x6034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AX6NikkiPawn*                           BP_TestNikkiOwner;                                 // 0x6038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_TargetUpdated;                                  // 0x6040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableNHH;                                      // 0x6041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6042[0x6];                                     // 0x6042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BP_NHHHeightOffset;                                // 0x6048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_NHHDebug;                                       // 0x6060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6061[0x7];                                     // 0x6061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_InteractionRadius;                              // 0x6068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPBIKBoneSetting>               BP_LeaderLeftBoneSettings;                         // 0x6070(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FPBIKBoneSetting>               BP_LeaderRightBoneSettings;                        // 0x6080(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FPBIKBoneSetting>               BP_FollowerLeftBoneSettings;                       // 0x6090(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FPBIKBoneSetting>               BP_FollowerRightBoneSettings;                      // 0x60A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void UpdateLeaderHandTarget(double DeltaTime);
	void UpdateIkAndGestureAlphaByCurve();
	void UpdateHoldingHandsFloatMovingTurnAngle();
	void UpdateHoldHandingSelfSocketTransform();
	void UpdateHandHoldTarget(double DeltaTime);
	void UpdateFollowerHandTarget();
	void StoreNHHFrameData();
	void OnUpdate_SM_Behavior_HoldHands(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnStateEntry_InviteToHoldHands(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnStateEntry_HandHolding(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnStateEntry_ContextPose(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnBecomeRelevant_StartHoldingHands(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnBecomeRelevant_SM_ContextPose(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnBecomeRelevant_HoldingHands(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void IsValidLinkPoint(bool* Valid);
	void IsPrepare(bool* Ret);
	void IsNHHDebug(bool* DrawDebug);
	void GetNikkiDeltaHeight(double* Result);
	void GetMultiPlayerGroupMovementComponent();
	void GetHoldingHandTargetPositionV3(struct FVector* HoldingHandTargetPosition);
	void GetHoldingHandTargetPositionV2(struct FVector* HoldingHandTargetPosition);
	void GetHoldingHandTargetPosition(struct FVector* HoldingHandTargetPosition);
	void GetHoldingHandIsForwardAlpha(double* Ret);
	void GatherLogicData();
	void FindPointToSpot();
	void FindBestTarget(double DeltaTime);
	void FindBestHandPose();
	void ExecuteUbergraph_ABP_Player_HandHolding(int32 EntryPoint);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_X6OverlayBlend_6D2DB7864BE232935F6E49BBD2BAF298();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_X6OverlayBlend_499DB9474C1D64EA05CB82949C8D627A();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_X6OverlayBlend_430A8E634CC056DD6124C6B7D79B4686();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_F02750244D9F5F3C908E6982DC12B6D3();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_DE69877B43520077B7C51799A2E03802();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_D70D1EA3486AFA7A57C7AFBB3F326907();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_D22ED9A04C6D2D2F81E711AA41025503();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_9FE5A83542FA1F349AFC2AAEC87EEF44();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_981517F149D2D2F7EAA12681FBCD13C1();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_67AEB0614D6DBACDFAD2B9AB1A40866D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_491095F144072E041112028D6492702F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_427AC7D5477A577888B186A19A4F8BDE();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_24782D20423BB07062E9EA86C8F4F78E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_19E0C40A4912F8E3D18657B1CFD7F247();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_TransitionResult_0578AC834028E6A92F34A39605F1806D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_ModifyBone_E38FBA954AF005B24652C59D41415B6E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_ModifyBone_6D830F6E403454FC73CE1CAD4CDBE517();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_ControlRig_C5DBCE78497E872B150307A58B10052C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_ControlRig_7210B0B64352C427F13AD195DAD7484C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_BlendSpacePlayer_D0A86523497ED0E71C4B81AEFCE983AF();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_BlendSpacePlayer_A7F3182748D2ADFDE8EC1889995B07AF();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_BlendSpacePlayer_6CD1543040D282D1FEADAD85FD41B0C1();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_BlendSpacePlayer_5FD5975E45286B343CC22BBA35BFA026();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Player_HandHolding_AnimGraphNode_BlendListByBool_445A41174E8AE107A9F3BCA741E0EC2E();
	void DebugDrawHandHoldTarget();
	void CalculateLastFrameInfo();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void BlueprintInitializeAnimation();
	void AnimLayer_WhiteBoxMovement(struct FPoseLink* AnimLayer_WhiteBoxMovement_0);
	void AnimLayer_UsingCarrierMovement(struct FPoseLink* AnimLayer_UsingCarrierMovement_0);
	void AnimLayer_StrafeMovement(struct FPoseLink* AnimLayer_StrafeMovement_0);
	void AnimLayer_SpecialSurfaceMovement(struct FPoseLink* AnimLayer_SpecialSurfaceMovement_0);
	void AnimLayer_PlayerRegularMovement(struct FPoseLink* AnimLayer_PlayerRegularMovement_0);
	void AnimLayer_PlayerControllingTool(struct FPoseLink* AnimLayer_PlayerControllingTool_0);
	void AnimLayer_NPCBehavior(const struct FPoseLink& InPose_0, struct FPoseLink* AnimLayer_NPCBehavior_0);
	void AnimLayer_NPCAdditiveBehavior(const struct FPoseLink& InPose, struct FPoseLink* AnimLayer_NPCAdditiveBehavior_0);
	void AnimLayer_MovementDependObject(struct FPoseLink* AnimLayer_MovementDependObject_0);
	void AnimLayer_Land(struct FPoseLink* AnimLayer_Land_0);
	void AnimLayer_Jump(struct FPoseLink* AnimLayer_Jump_0);
	void AnimLayer_EquipmentAdditiveMode(const struct FPoseLink& InPoseForEquipment, struct FPoseLink* AnimLayer_EquipmentAdditiveMode_0);
	void AnimLayer_CombatMovement(struct FPoseLink* AnimLayer_CombatMovement_0);
	void AnimLayer_BehaviorConnectionMode(const struct FPoseLink& InPoseToConnectionMode, struct FPoseLink* AnimLayer_BehaviorConnectionMode_0);
	void AnimLayer_BehaviorAdditiveMode(const struct FPoseLink& InPoseForPlayerBehavior, struct FPoseLink* AnimLayer_BehaviorAdditiveMode_0);
	void AnimLayer_AimOffset(const struct FPoseLink& InPoseForAimOffset, struct FPoseLink* AnimLayer_AimOffset_0);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Player_HandHolding_C">();
	}
	static class UABP_Player_HandHolding_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Player_HandHolding_C>();
	}
};
static_assert(alignof(UABP_Player_HandHolding_C) == 0x000010, "Wrong alignment on UABP_Player_HandHolding_C");
static_assert(sizeof(UABP_Player_HandHolding_C) == 0x0060B0, "Wrong size on UABP_Player_HandHolding_C");
static_assert(offsetof(UABP_Player_HandHolding_C, UberGraphFrame) == 0x0003D0, "Member 'UABP_Player_HandHolding_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, __AnimBlueprintMutables) == 0x0003D8, "Member 'UABP_Player_HandHolding_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimBlueprintExtension_PropertyAccess) == 0x000420, "Member 'UABP_Player_HandHolding_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimBlueprintExtension_NodeRelevancy) == 0x000428, "Member 'UABP_Player_HandHolding_C::AnimBlueprintExtension_NodeRelevancy' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimBlueprintExtension_Base) == 0x0004D0, "Member 'UABP_Player_HandHolding_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_LinkedInputPose_5) == 0x0004D8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_LinkedInputPose_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_16) == 0x000590, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_16' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_LinkedInputPose_4) == 0x0005B0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_LinkedInputPose_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_15) == 0x000668, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_15' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_14) == 0x000688, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_14' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_13) == 0x0006A8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_13' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_12) == 0x0006C8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_12' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_LinkedInputPose_3) == 0x0006E8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_LinkedInputPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ControlRig_1) == 0x0007A0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ControlRig_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SaveCachedPose_5) == 0x000C70, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SaveCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_26) == 0x000CF0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_26' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_25) == 0x000D18, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_25' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_24) == 0x000D40, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_24' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_23) == 0x000D68, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_23' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_22) == 0x000D90, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_22' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_21) == 0x000DB8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_21' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_20) == 0x000DE0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_20' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_19) == 0x000E08, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_19' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Mirror_9) == 0x000E30, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Mirror_9' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Mirror_8) == 0x000E78, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Mirror_8' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_16) == 0x000EC0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_16' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_13) == 0x000F08, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_13' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_15) == 0x000F50, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_15' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_20) == 0x000F98, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_20' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_18) == 0x000FB8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_18' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_17) == 0x000FE0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_17' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_16) == 0x001008, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_16' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_15) == 0x001030, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_15' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_14) == 0x001058, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_13) == 0x001080, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_12) == 0x0010A8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_12) == 0x0010D0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_12' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_15) == 0x001118, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_15' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_11) == 0x001140, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_14) == 0x001168, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_14' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TwoWayBlend) == 0x001190, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_14) == 0x001258, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_14' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_13) == 0x0012A0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_13' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_12) == 0x0012C8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_12' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_X6OverlayBlend_2) == 0x0012F0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_X6OverlayBlend_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_19) == 0x001548, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_19' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Mirror_7) == 0x001568, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Mirror_7' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_13) == 0x0015B0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_13' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_18) == 0x0015F8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_18' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateMachine_7) == 0x001618, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateMachine_7' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_17) == 0x0016E0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_17' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_12) == 0x001700, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_12' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_11) == 0x001748, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_11' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_X6OverlayBlend_1) == 0x001770, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_X6OverlayBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_10) == 0x0019C8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_9) == 0x0019F0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_8) == 0x001A18, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_7) == 0x001A40, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendSpacePlayer_5) == 0x001A68, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendSpacePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ApplyAdditive_1) == 0x001AE0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_11) == 0x001BA8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_11' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_16) == 0x001BF0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_16' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendSpacePlayer_4) == 0x001C10, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendSpacePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ApplyAdditive) == 0x001C88, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_11) == 0x001D50, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_11' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_10) == 0x001D98, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_10' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_9) == 0x001DE0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_15) == 0x001E28, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_15' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_10) == 0x001E48, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_10' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_14) == 0x001E70, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_14' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateMachine_6) == 0x001E90, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateMachine_6' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_13) == 0x001F58, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_13' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateMachine_5) == 0x001F78, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateMachine_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_12) == 0x002040, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_12' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_8) == 0x002060, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_11) == 0x0020A8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_11' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_7) == 0x0020C8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_10) == 0x002110, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_10' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateMachine_4) == 0x002130, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateMachine_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_9) == 0x0021F8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_6) == 0x002218, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_5) == 0x002240, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_4) == 0x002268, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_9) == 0x002290, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_9' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_8) == 0x0022B8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_8) == 0x0022D8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_8' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_10) == 0x002300, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_10' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Mirror_6) == 0x002348, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Mirror_6' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_6) == 0x002390, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_7) == 0x0023D8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_9) == 0x0023F8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_9' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Mirror_5) == 0x002440, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Mirror_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_5) == 0x002488, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_4) == 0x0024D0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_6) == 0x002518, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateMachine_3) == 0x002538, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateMachine_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_5) == 0x002600, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_3) == 0x002620, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_2) == 0x002648, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult_1) == 0x002670, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_TransitionResult) == 0x002698, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Mirror_4) == 0x0026C0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Mirror_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_3) == 0x002708, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_4) == 0x002750, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Mirror_3) == 0x002770, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Mirror_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Mirror_2) == 0x0027B8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Mirror_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_2) == 0x002800, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer_1) == 0x002848, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_8) == 0x002890, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_8' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_3) == 0x0028D8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_7) == 0x0028F8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_7' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_2) == 0x002920, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateMachine_2) == 0x002940, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult_1) == 0x002A08, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateMachine_1) == 0x002A28, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendSpacePlayer_3) == 0x002AF0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendSpacePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendSpacePlayer_2) == 0x002B68, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendSpacePlayer_1) == 0x002BE0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendSpacePlayer) == 0x002C58, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_7) == 0x002CD0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_7' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_6) == 0x002D18, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_6' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_5) == 0x002D60, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateResult) == 0x002DA8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_StateMachine) == 0x002DC8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SaveCachedPose_4) == 0x002E90, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SaveCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_4) == 0x002F10, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_3) == 0x002F58, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_X6SequencePlayer_3) == 0x002FA0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_X6SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_X6SequencePlayer_2) == 0x0030A8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_X6SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SaveCachedPose_3) == 0x0031B0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SaveCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_6) == 0x003230, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SequencePlayer) == 0x003258, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_X6OverlayBlend) == 0x0032A0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_X6OverlayBlend' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_5) == 0x0034F8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_LocalToComponentSpace_1) == 0x003520, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_CopyBone_3) == 0x003540, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_CopyBone_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_CopyBone_2) == 0x003630, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_CopyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x003720, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_CopyBone_1) == 0x003740, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_CopyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_CopyBone) == 0x003830, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_CopyBone' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SaveCachedPose_2) == 0x003920, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_4) == 0x0039A0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_3) == 0x0039C8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_2) == 0x0039F0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Inertialization) == 0x003A40, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Inertialization' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_11) == 0x003E90, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_11' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_LinkedInputPose_2) == 0x003EB0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_LinkedInputPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_10) == 0x003F68, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_10' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_9) == 0x003F88, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_9' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_8) == 0x003FA8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_8' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_LinkedInputPose_1) == 0x003FC8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_LinkedInputPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ModifyBone_5) == 0x004080, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ModifyBone_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ModifyBone_4) == 0x0041A8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ModifyBone_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ModifyBone_3) == 0x0042D0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ModifyBone_2) == 0x0043F8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_7) == 0x004520, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_7' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_LinkedInputPose) == 0x004540, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_6) == 0x0045F8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_6' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_5) == 0x004618, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_4) == 0x004638, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_3) == 0x004658, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_2) == 0x004678, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root_1) == 0x004698, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ControlRig) == 0x0046B8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ModifyBone_1) == 0x004B88, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_LocalToComponentSpace) == 0x004CB0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ComponentToLocalSpace) == 0x004CD0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_LayeredBoneBlend) == 0x004CF0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_2) == 0x004DE0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_ModifyBone) == 0x004E08, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool_1) == 0x004F30, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_X6SequencePlayer_1) == 0x004F78, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_X6SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Mirror_1) == 0x005080, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Mirror_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_X6SequencePlayer) == 0x0050C8, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_X6SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_BlendListByBool) == 0x0051D0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Mirror) == 0x005218, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Mirror' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SaveCachedPose_1) == 0x005260, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_SaveCachedPose) == 0x0052E0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose_1) == 0x005360, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_UseCachedPose) == 0x005388, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_Root) == 0x0053B0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, AnimGraphNode_LinkedAnimLayer) == 0x0053D0, "Member 'UABP_Player_HandHolding_C::AnimGraphNode_LinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_50) == 0x005498, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_50' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_49) == 0x005499, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_49' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_48) == 0x00549A, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_48' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_47) == 0x00549B, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_47' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_46) == 0x00549C, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_46' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_45) == 0x00549D, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_45' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_44) == 0x00549E, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_44' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_43) == 0x00549F, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_43' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_42) == 0x0054A0, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_42' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_41) == 0x0054A1, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_41' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_38) == 0x0054A8, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_38' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_37) == 0x0054B0, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_37' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_36) == 0x0054B8, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_36' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, __CustomProperty_BP_RightBoneSettings_7210B0B64352C427F13AD195DAD7484C) == 0x0054C0, "Member 'UABP_Player_HandHolding_C::__CustomProperty_BP_RightBoneSettings_7210B0B64352C427F13AD195DAD7484C' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, __CustomProperty_BP_LeftBoneSettings_7210B0B64352C427F13AD195DAD7484C) == 0x0054D0, "Member 'UABP_Player_HandHolding_C::__CustomProperty_BP_LeftBoneSettings_7210B0B64352C427F13AD195DAD7484C' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, __CustomProperty_BP_IsLeftHand_7210B0B64352C427F13AD195DAD7484C) == 0x0054E0, "Member 'UABP_Player_HandHolding_C::__CustomProperty_BP_IsLeftHand_7210B0B64352C427F13AD195DAD7484C' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, __CustomProperty_BP_IsLeader_7210B0B64352C427F13AD195DAD7484C) == 0x0054E1, "Member 'UABP_Player_HandHolding_C::__CustomProperty_BP_IsLeader_7210B0B64352C427F13AD195DAD7484C' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, __CustomProperty_BP_Enable_7210B0B64352C427F13AD195DAD7484C) == 0x0054E2, "Member 'UABP_Player_HandHolding_C::__CustomProperty_BP_Enable_7210B0B64352C427F13AD195DAD7484C' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, __CustomProperty_HP_Weapon_L_ctrl_C5DBCE78497E872B150307A58B10052C) == 0x0054F0, "Member 'UABP_Player_HandHolding_C::__CustomProperty_HP_Weapon_L_ctrl_C5DBCE78497E872B150307A58B10052C' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, __CustomProperty_HP_Weapon_R_ctrl_C5DBCE78497E872B150307A58B10052C) == 0x005550, "Member 'UABP_Player_HandHolding_C::__CustomProperty_HP_Weapon_R_ctrl_C5DBCE78497E872B150307A58B10052C' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, __CustomProperty_EnableHoldingHandIK_C5DBCE78497E872B150307A58B10052C) == 0x0055B0, "Member 'UABP_Player_HandHolding_C::__CustomProperty_EnableHoldingHandIK_C5DBCE78497E872B150307A58B10052C' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, __CustomProperty_HoldingRightHandOrLeftHand_C5DBCE78497E872B150307A58B10052C) == 0x0055B1, "Member 'UABP_Player_HandHolding_C::__CustomProperty_HoldingRightHandOrLeftHand_C5DBCE78497E872B150307A58B10052C' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, __CustomProperty_TargetLocation_C5DBCE78497E872B150307A58B10052C) == 0x0055B8, "Member 'UABP_Player_HandHolding_C::__CustomProperty_TargetLocation_C5DBCE78497E872B150307A58B10052C' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_35) == 0x0055D0, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_35' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_34) == 0x0055D8, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_34' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_33) == 0x0055E0, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_33' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_32) == 0x0055E8, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_32' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_31) == 0x0055F0, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_31' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_30) == 0x0055F8, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_30' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_29) == 0x005600, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_29' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_28) == 0x005618, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_28' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_27) == 0x005630, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_27' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_26) == 0x005648, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_26' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_25) == 0x005650, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_25' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_24) == 0x005658, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_24' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_23) == 0x005660, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_23' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_22) == 0x005668, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_22' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_21) == 0x005670, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_21' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_20) == 0x005678, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_20' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_19) == 0x005680, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_19' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_18) == 0x005688, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_18' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_17) == 0x005690, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_17' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_16) == 0x005698, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_16' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_15) == 0x0056A0, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_15' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_14) == 0x0056A8, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_14' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_13) == 0x0056B0, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_13' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_12) == 0x0056B8, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_12' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_11) == 0x0056C0, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_11' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_10) == 0x0056C8, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_10' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_9) == 0x0056D0, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_9' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_8) == 0x0056E8, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_8' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_7) == 0x005700, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_7' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_6) == 0x005718, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_6' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_5) == 0x005730, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_5' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_4) == 0x005748, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_4' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_3) == 0x005760, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_3' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_2) == 0x005778, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_2' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess_1) == 0x005790, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess_1' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, K2Node_PropertyAccess) == 0x0057F0, "Member 'UABP_Player_HandHolding_C::K2Node_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_MultiPlayerGroupMovementComponent) == 0x0057F8, "Member 'UABP_Player_HandHolding_C::BP_MultiPlayerGroupMovementComponent' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_HoldingRightHandOrLeftHand) == 0x005800, "Member 'UABP_Player_HandHolding_C::BP_HoldingRightHandOrLeftHand' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_IsHoldingHands) == 0x005801, "Member 'UABP_Player_HandHolding_C::BP_IsHoldingHands' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_IsInvitingToHoldHands) == 0x005802, "Member 'UABP_Player_HandHolding_C::BP_IsInvitingToHoldHands' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_CurrentStateName) == 0x005804, "Member 'UABP_Player_HandHolding_C::BP_CurrentStateName' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_PreStateName) == 0x00580C, "Member 'UABP_Player_HandHolding_C::BP_PreStateName' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_IsLeader) == 0x005814, "Member 'UABP_Player_HandHolding_C::BP_IsLeader' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_OtherHandBoneNameToBeHeld) == 0x005818, "Member 'UABP_Player_HandHolding_C::BP_OtherHandBoneNameToBeHeld' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_MyHandBoneNameToBeHeld) == 0x005820, "Member 'UABP_Player_HandHolding_C::BP_MyHandBoneNameToBeHeld' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_OtherCharacterToBeingHeldHand) == 0x005828, "Member 'UABP_Player_HandHolding_C::BP_OtherCharacterToBeingHeldHand' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_OwnerCharacter) == 0x005830, "Member 'UABP_Player_HandHolding_C::BP_OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_HandToBeHeld_Left_IKBoneName) == 0x005838, "Member 'UABP_Player_HandHolding_C::BP_HandToBeHeld_Left_IKBoneName' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_HandToBeHeld_Right_IKBoneName) == 0x005840, "Member 'UABP_Player_HandHolding_C::BP_HandToBeHeld_Right_IKBoneName' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_HoldingHandTargetLocation) == 0x005848, "Member 'UABP_Player_HandHolding_C::BP_HoldingHandTargetLocation' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_EnableHoldingHandsIK) == 0x005860, "Member 'UABP_Player_HandHolding_C::BP_EnableHoldingHandsIK' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeaderCharacter) == 0x005868, "Member 'UABP_Player_HandHolding_C::BP_LeaderCharacter' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, X6NikkiMainAnimInstance) == 0x005870, "Member 'UABP_Player_HandHolding_C::X6NikkiMainAnimInstance' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_FollowerCharacter) == 0x005878, "Member 'UABP_Player_HandHolding_C::BP_FollowerCharacter' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_HoldingHandsConfig) == 0x005880, "Member 'UABP_Player_HandHolding_C::BP_HoldingHandsConfig' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, PlayerAnimStatesComp) == 0x005888, "Member 'UABP_Player_HandHolding_C::PlayerAnimStatesComp' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, CharacterMovementComp) == 0x005890, "Member 'UABP_Player_HandHolding_C::CharacterMovementComp' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, RMInAirComp) == 0x005898, "Member 'UABP_Player_HandHolding_C::RMInAirComp' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, CurrentAcceleration) == 0x0058A0, "Member 'UABP_Player_HandHolding_C::CurrentAcceleration' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, HasMovementInput) == 0x0058B8, "Member 'UABP_Player_HandHolding_C::HasMovementInput' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_IsHoldingHandsFloatMoving) == 0x0058B9, "Member 'UABP_Player_HandHolding_C::BP_IsHoldingHandsFloatMoving' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_IsBeingPulledToAnchorPoint) == 0x0058BA, "Member 'UABP_Player_HandHolding_C::BP_IsBeingPulledToAnchorPoint' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_CurDistanceBetweenCharacters) == 0x0058C0, "Member 'UABP_Player_HandHolding_C::BP_CurDistanceBetweenCharacters' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_WithinTheMinimumDistanceForActivatingHandHoldingAdditionalAnimationEffect) == 0x0058C8, "Member 'UABP_Player_HandHolding_C::BP_WithinTheMinimumDistanceForActivatingHandHoldingAdditionalAnimationEffect' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, _BP_EnablePoseOverlay) == 0x0058C9, "Member 'UABP_Player_HandHolding_C::_BP_EnablePoseOverlay' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_EnableHandInHandGesture) == 0x0058CA, "Member 'UABP_Player_HandHolding_C::BP_EnableHandInHandGesture' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, NikkiDeltaHeight) == 0x0058D0, "Member 'UABP_Player_HandHolding_C::NikkiDeltaHeight' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_HoldHandingSelfSocketLocalTransform_Left) == 0x0058E0, "Member 'UABP_Player_HandHolding_C::BP_HoldHandingSelfSocketLocalTransform_Left' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_HoldHandingSelfSocketLocalTransform_Right) == 0x005940, "Member 'UABP_Player_HandHolding_C::BP_HoldHandingSelfSocketLocalTransform_Right' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, MinimumDistanceForActivatingHandHoldingScale) == 0x0059A0, "Member 'UABP_Player_HandHolding_C::MinimumDistanceForActivatingHandHoldingScale' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, CanBreakInviteAnim) == 0x0059A8, "Member 'UABP_Player_HandHolding_C::CanBreakInviteAnim' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_IsWaitingForOthersToCompleteInvitation) == 0x0059A9, "Member 'UABP_Player_HandHolding_C::BP_IsWaitingForOthersToCompleteInvitation' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_UpdateHoldingHandsFloatMovingTurnAngle) == 0x0059B0, "Member 'UABP_Player_HandHolding_C::BP_UpdateHoldingHandsFloatMovingTurnAngle' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, bEnableHoldingHandsIKAnimCtrl) == 0x0059B8, "Member 'UABP_Player_HandHolding_C::bEnableHoldingHandsIKAnimCtrl' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, Anim_IkAlpha) == 0x0059C0, "Member 'UABP_Player_HandHolding_C::Anim_IkAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, Anim_GestureAlpha) == 0x0059C8, "Member 'UABP_Player_HandHolding_C::Anim_GestureAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LimbMaxLength) == 0x0059D0, "Member 'UABP_Player_HandHolding_C::BP_LimbMaxLength' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeaderMutiplier) == 0x0059D8, "Member 'UABP_Player_HandHolding_C::BP_LeaderMutiplier' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_FollowerMultiplier) == 0x0059E0, "Member 'UABP_Player_HandHolding_C::BP_FollowerMultiplier' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeaderShoulderTransform) == 0x0059F0, "Member 'UABP_Player_HandHolding_C::BP_LeaderShoulderTransform' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeaderWristTransform) == 0x005A50, "Member 'UABP_Player_HandHolding_C::BP_LeaderWristTransform' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_FollowerShoulderTransform) == 0x005AB0, "Member 'UABP_Player_HandHolding_C::BP_FollowerShoulderTransform' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_FollowerWristTransform) == 0x005B10, "Member 'UABP_Player_HandHolding_C::BP_FollowerWristTransform' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeaderLimbLength) == 0x005B70, "Member 'UABP_Player_HandHolding_C::BP_LeaderLimbLength' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_FollowerLimbLength) == 0x005B78, "Member 'UABP_Player_HandHolding_C::BP_FollowerLimbLength' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_CurrentShoulderDist) == 0x005B80, "Member 'UABP_Player_HandHolding_C::BP_CurrentShoulderDist' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeftIKTargetWorld) == 0x005B90, "Member 'UABP_Player_HandHolding_C::BP_LeftIKTargetWorld' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_RightIKTargetWorld) == 0x005BF0, "Member 'UABP_Player_HandHolding_C::BP_RightIKTargetWorld' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeftIKFollowerTargetWorld) == 0x005C50, "Member 'UABP_Player_HandHolding_C::BP_LeftIKFollowerTargetWorld' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_RightIKFollowerTargetWorld) == 0x005CB0, "Member 'UABP_Player_HandHolding_C::BP_RightIKFollowerTargetWorld' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeftIKTargetWorld_Calibrated) == 0x005D10, "Member 'UABP_Player_HandHolding_C::BP_LeftIKTargetWorld_Calibrated' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_RightIKTargetWorld_Calibrated) == 0x005D70, "Member 'UABP_Player_HandHolding_C::BP_RightIKTargetWorld_Calibrated' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeftIKFollowerTargetWorld_Calibrated) == 0x005DD0, "Member 'UABP_Player_HandHolding_C::BP_LeftIKFollowerTargetWorld_Calibrated' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_RightIKFollowerTargetWorld_Calibrated) == 0x005E30, "Member 'UABP_Player_HandHolding_C::BP_RightIKFollowerTargetWorld_Calibrated' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeftIKTargetComp) == 0x005E90, "Member 'UABP_Player_HandHolding_C::BP_LeftIKTargetComp' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_RightIKTargetComp) == 0x005EF0, "Member 'UABP_Player_HandHolding_C::BP_RightIKTargetComp' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeaderShoulderLocation) == 0x005F50, "Member 'UABP_Player_HandHolding_C::BP_LeaderShoulderLocation' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_FollowerShoulderLocation) == 0x005F68, "Member 'UABP_Player_HandHolding_C::BP_FollowerShoulderLocation' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeaderToFollowerNormal) == 0x005F80, "Member 'UABP_Player_HandHolding_C::BP_LeaderToFollowerNormal' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_IntersectionLocation) == 0x005F98, "Member 'UABP_Player_HandHolding_C::BP_IntersectionLocation' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, PoseData) == 0x005FB0, "Member 'UABP_Player_HandHolding_C::PoseData' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, LeaderPose) == 0x005FB8, "Member 'UABP_Player_HandHolding_C::LeaderPose' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, FollowerPose) == 0x005FC0, "Member 'UABP_Player_HandHolding_C::FollowerPose' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_PoseShoulderDist) == 0x005FC8, "Member 'UABP_Player_HandHolding_C::BP_PoseShoulderDist' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, HandRelativeTransform) == 0x005FD0, "Member 'UABP_Player_HandHolding_C::HandRelativeTransform' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_HandLink) == 0x006030, "Member 'UABP_Player_HandHolding_C::BP_HandLink' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_BestPoseIndex) == 0x006034, "Member 'UABP_Player_HandHolding_C::BP_BestPoseIndex' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_TestNikkiOwner) == 0x006038, "Member 'UABP_Player_HandHolding_C::BP_TestNikkiOwner' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_TargetUpdated) == 0x006040, "Member 'UABP_Player_HandHolding_C::BP_TargetUpdated' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_EnableNHH) == 0x006041, "Member 'UABP_Player_HandHolding_C::BP_EnableNHH' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_NHHHeightOffset) == 0x006048, "Member 'UABP_Player_HandHolding_C::BP_NHHHeightOffset' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_NHHDebug) == 0x006060, "Member 'UABP_Player_HandHolding_C::BP_NHHDebug' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_InteractionRadius) == 0x006068, "Member 'UABP_Player_HandHolding_C::BP_InteractionRadius' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeaderLeftBoneSettings) == 0x006070, "Member 'UABP_Player_HandHolding_C::BP_LeaderLeftBoneSettings' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_LeaderRightBoneSettings) == 0x006080, "Member 'UABP_Player_HandHolding_C::BP_LeaderRightBoneSettings' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_FollowerLeftBoneSettings) == 0x006090, "Member 'UABP_Player_HandHolding_C::BP_FollowerLeftBoneSettings' has a wrong offset!");
static_assert(offsetof(UABP_Player_HandHolding_C, BP_FollowerRightBoneSettings) == 0x0060A0, "Member 'UABP_Player_HandHolding_C::BP_FollowerRightBoneSettings' has a wrong offset!");

}

