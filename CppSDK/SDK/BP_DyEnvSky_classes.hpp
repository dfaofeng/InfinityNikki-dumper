#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DyEnvSky

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DyEnvSky.BP_DyEnvSky_C
// 0x0280 (0x0628 - 0x03A8)
class ABP_DyEnvSky_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   LensFlare01Mobile;                                 // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MoonMask;                                          // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LensFlareMask;                                     // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Special;                                        // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_SkyHemiSphereDome_Clouds;                       // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        SunLimitedArrow;                                   // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        MoonLimitedArrow;                                  // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SunSpotLimited;                                    // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    MoonSpotLimited;                                   // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LensFlare;                                         // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Starfield;                                      // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ShinePlane;                                        // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Moon;                                              // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        NightScene;                                        // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SkyScene;                                          // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ControlRig_Circle_1mm2;                            // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ControlRig_Circle_1mm1;                            // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ControlRig_Circle_1mm;                             // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ground;                                            // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        SunFreeArrow;                                      // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        MoonFreeArrow;                                     // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    MoonSpot;                                          // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SunSpot;                                           // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SunSpotRotator;                                    // 0x0470(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               MoonSpotRotator;                                   // 0x0488(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCurveVector*                           CV_SunRotCurve;                                    // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           CV_MoonRotCurve;                                   // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TOD_SunLimitRotFinal;                              // 0x04B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                FixedSunRot;                                       // 0x04C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FixedMoonRot;                                      // 0x04E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceAtmoLitFixedRot;                              // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TOD_MoonLimitRotFinal;                             // 0x0500(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABP_DyEnvSys_C*                         Ref_DyEnvSys;                                      // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               GizmoMID;                                          // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MoonAngularDiameter;                               // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      DirectionalLight;                                  // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      DirectionalLight_Moon;                             // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        SwapHeight;                                        // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ManualRotAlphalpha;                                // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ManualRot;                                         // 0x0550(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               FixedTODRot;                                       // 0x0568(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            RoleDistRampCurve;                                 // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CascadeRemapCurve;                                 // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSpecialLayer;                                   // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               SpecialLayerRotator;                               // 0x0598(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TSoftObjectPtr<class UMaterialInterface>      LensMat;                                           // 0x05B0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      LensMat_Mobile;                                    // 0x05D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_LensFlare;                                     // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         MoonPhaseSelector;                                 // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MobileFixed_X__Roll_;                              // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         MobileFixed_Y__Pitch_;                             // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         MobileFixed_Z__Yaw_;                               // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_Moon;                                          // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AEnvironmentLevelConfigManager*         Ref_LevelConfigMgr;                                // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SetupStarfield();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void PostConstruct0();
	void PostConstruct();
	void OnLoaded_75399A6F4F15C2371B910B86BCB7B2D2(class UObject* Loaded);
	void Manual_Operation_TOD(double Time);
	void LimitSunRotator(const struct FSunLightLerpConfig& Final_Sun_Light_Setting, class ADirectionalLight* Sun_Light, class ADirectionalLight* Moon_Light, double Free, double Limited, double Swap_Factor);
	void Gizmo();
	void ExecuteUbergraph_BP_DyEnvSky(int32 EntryPoint);
	void DrawTrack();
	void CalculatorFinalDirLitRot(double InRotFree, double InRotLimited, double InRotFreeMoon);
	void BPI_WeatherData(class UClass* WeatherPreset);
	void BPI_WeatherChanged(const class FString& RegionName, const class FString& UnloadWeatherName, const class FString& LoadWeatherName);
	void BPI_TODTime(double Time);
	void BPI_TodState();
	void BPI_SaveAsset(bool OnlySyncContent, bool OnlyWriteParam);
	void BPI_ReloadFile();
	void BPI_EditorUpdateRole(const struct FLinearColor& LocalLightColor);
	void BPI_EditorUpdate();
	void BPI_CLFSPostContruct();
	void Blend_SkyLayerTexture2D();
	void Blend_SkyBoxTexture2D();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DyEnvSky_C">();
	}
	static class ABP_DyEnvSky_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DyEnvSky_C>();
	}
};
static_assert(alignof(ABP_DyEnvSky_C) == 0x000008, "Wrong alignment on ABP_DyEnvSky_C");
static_assert(sizeof(ABP_DyEnvSky_C) == 0x000628, "Wrong size on ABP_DyEnvSky_C");
static_assert(offsetof(ABP_DyEnvSky_C, UberGraphFrame) == 0x0003A8, "Member 'ABP_DyEnvSky_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, LensFlare01Mobile) == 0x0003B0, "Member 'ABP_DyEnvSky_C::LensFlare01Mobile' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MoonMask) == 0x0003B8, "Member 'ABP_DyEnvSky_C::MoonMask' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, LensFlareMask) == 0x0003C0, "Member 'ABP_DyEnvSky_C::LensFlareMask' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, SM_Special) == 0x0003C8, "Member 'ABP_DyEnvSky_C::SM_Special' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, SM_SkyHemiSphereDome_Clouds) == 0x0003D0, "Member 'ABP_DyEnvSky_C::SM_SkyHemiSphereDome_Clouds' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, SunLimitedArrow) == 0x0003D8, "Member 'ABP_DyEnvSky_C::SunLimitedArrow' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MoonLimitedArrow) == 0x0003E0, "Member 'ABP_DyEnvSky_C::MoonLimitedArrow' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, SunSpotLimited) == 0x0003E8, "Member 'ABP_DyEnvSky_C::SunSpotLimited' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MoonSpotLimited) == 0x0003F0, "Member 'ABP_DyEnvSky_C::MoonSpotLimited' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, LensFlare) == 0x0003F8, "Member 'ABP_DyEnvSky_C::LensFlare' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, SM_Starfield) == 0x000400, "Member 'ABP_DyEnvSky_C::SM_Starfield' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, ShinePlane) == 0x000408, "Member 'ABP_DyEnvSky_C::ShinePlane' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, Moon) == 0x000410, "Member 'ABP_DyEnvSky_C::Moon' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, NightScene) == 0x000418, "Member 'ABP_DyEnvSky_C::NightScene' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, SkyScene) == 0x000420, "Member 'ABP_DyEnvSky_C::SkyScene' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, ControlRig_Circle_1mm2) == 0x000428, "Member 'ABP_DyEnvSky_C::ControlRig_Circle_1mm2' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, ControlRig_Circle_1mm1) == 0x000430, "Member 'ABP_DyEnvSky_C::ControlRig_Circle_1mm1' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, ControlRig_Circle_1mm) == 0x000438, "Member 'ABP_DyEnvSky_C::ControlRig_Circle_1mm' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, Ground) == 0x000440, "Member 'ABP_DyEnvSky_C::Ground' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, SunFreeArrow) == 0x000448, "Member 'ABP_DyEnvSky_C::SunFreeArrow' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MoonFreeArrow) == 0x000450, "Member 'ABP_DyEnvSky_C::MoonFreeArrow' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MoonSpot) == 0x000458, "Member 'ABP_DyEnvSky_C::MoonSpot' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, SunSpot) == 0x000460, "Member 'ABP_DyEnvSky_C::SunSpot' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, DefaultSceneRoot) == 0x000468, "Member 'ABP_DyEnvSky_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, SunSpotRotator) == 0x000470, "Member 'ABP_DyEnvSky_C::SunSpotRotator' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MoonSpotRotator) == 0x000488, "Member 'ABP_DyEnvSky_C::MoonSpotRotator' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, CV_SunRotCurve) == 0x0004A0, "Member 'ABP_DyEnvSky_C::CV_SunRotCurve' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, CV_MoonRotCurve) == 0x0004A8, "Member 'ABP_DyEnvSky_C::CV_MoonRotCurve' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, TOD_SunLimitRotFinal) == 0x0004B0, "Member 'ABP_DyEnvSky_C::TOD_SunLimitRotFinal' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, FixedSunRot) == 0x0004C8, "Member 'ABP_DyEnvSky_C::FixedSunRot' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, FixedMoonRot) == 0x0004E0, "Member 'ABP_DyEnvSky_C::FixedMoonRot' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, ForceAtmoLitFixedRot) == 0x0004F8, "Member 'ABP_DyEnvSky_C::ForceAtmoLitFixedRot' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, TOD_MoonLimitRotFinal) == 0x000500, "Member 'ABP_DyEnvSky_C::TOD_MoonLimitRotFinal' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, Ref_DyEnvSys) == 0x000518, "Member 'ABP_DyEnvSky_C::Ref_DyEnvSys' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, GizmoMID) == 0x000520, "Member 'ABP_DyEnvSky_C::GizmoMID' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MoonAngularDiameter) == 0x000528, "Member 'ABP_DyEnvSky_C::MoonAngularDiameter' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, DirectionalLight) == 0x000530, "Member 'ABP_DyEnvSky_C::DirectionalLight' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, DirectionalLight_Moon) == 0x000538, "Member 'ABP_DyEnvSky_C::DirectionalLight_Moon' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, SwapHeight) == 0x000540, "Member 'ABP_DyEnvSky_C::SwapHeight' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, ManualRotAlphalpha) == 0x000548, "Member 'ABP_DyEnvSky_C::ManualRotAlphalpha' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, ManualRot) == 0x000550, "Member 'ABP_DyEnvSky_C::ManualRot' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, FixedTODRot) == 0x000568, "Member 'ABP_DyEnvSky_C::FixedTODRot' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, RoleDistRampCurve) == 0x000580, "Member 'ABP_DyEnvSky_C::RoleDistRampCurve' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, CascadeRemapCurve) == 0x000588, "Member 'ABP_DyEnvSky_C::CascadeRemapCurve' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, UseSpecialLayer) == 0x000590, "Member 'ABP_DyEnvSky_C::UseSpecialLayer' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, SpecialLayerRotator) == 0x000598, "Member 'ABP_DyEnvSky_C::SpecialLayerRotator' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, LensMat) == 0x0005B0, "Member 'ABP_DyEnvSky_C::LensMat' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, LensMat_Mobile) == 0x0005D8, "Member 'ABP_DyEnvSky_C::LensMat_Mobile' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MID_LensFlare) == 0x000600, "Member 'ABP_DyEnvSky_C::MID_LensFlare' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MoonPhaseSelector) == 0x000608, "Member 'ABP_DyEnvSky_C::MoonPhaseSelector' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MobileFixed_X__Roll_) == 0x00060C, "Member 'ABP_DyEnvSky_C::MobileFixed_X__Roll_' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MobileFixed_Y__Pitch_) == 0x000610, "Member 'ABP_DyEnvSky_C::MobileFixed_Y__Pitch_' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MobileFixed_Z__Yaw_) == 0x000614, "Member 'ABP_DyEnvSky_C::MobileFixed_Z__Yaw_' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, MID_Moon) == 0x000618, "Member 'ABP_DyEnvSky_C::MID_Moon' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvSky_C, Ref_LevelConfigMgr) == 0x000620, "Member 'ABP_DyEnvSky_C::Ref_LevelConfigMgr' has a wrong offset!");

}

