#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperCharWizard

#include "Basic.hpp"

#include "PaperCharWizard_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class PaperCharWizard.PaperCharWizardGlobalMgr
// 0x0000 (0x0028 - 0x0028)
class UPaperCharWizardGlobalMgr final : public UObject
{
public:
	void Receive_Init();
	void Receive_UnInit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperCharWizardGlobalMgr">();
	}
	static class UPaperCharWizardGlobalMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperCharWizardGlobalMgr>();
	}
};
static_assert(alignof(UPaperCharWizardGlobalMgr) == 0x000008, "Wrong alignment on UPaperCharWizardGlobalMgr");
static_assert(sizeof(UPaperCharWizardGlobalMgr) == 0x000028, "Wrong size on UPaperCharWizardGlobalMgr");

// Class PaperCharWizard.X6PaperCharAIWizardLibrary
// 0x0000 (0x0028 - 0x0028)
class UX6PaperCharAIWizardLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ActivateGameViewport();
	static class UObject* AIWizardLib_GetObject(class UObject* WidgetObject);
	static class FName AIWizardLib_GetPropertyName(class UObject* WidgetObject);
	static void AIWizardLib_SetNameOverride(class UObject* WidgetObject, const class FText& NewPropertyName);
	static void AIWizardLib_SetObject(class UObject* WidgetObject, class UObject* InNewObject);
	static void AIWizardLib_SetPropertiesNameOverride(class UObject* WidgetObject, const TMap<class FName, class FName>& InPropertiesNameOverride);
	static void AIWizardLib_SetPropertyName(class UObject* WidgetObject, class FName NewPropertyName);
	static void AIWizardLib_SetShowPropertyName(class UObject* WidgetObject, bool NewShowPropertyName);
	static void CallFunctionByObjectParam(class UObject* Object, class FName FunctionName, class UObject* ParamObject);
	static bool CallFunctionByObjectPropertyName(class UObject* Object, class FName FunctionName, class UObject* ParamObject, class FName ParamPropertyName);
	static bool CanFileCheckout(const class FString& InFile, ECheckoutFaildType* CheckoutFaildType);
	static class UObject* CopyObject(class UObject* Object);
	static bool CopyObjectProperties(class UObject* SrcObject, class UObject* TargetObject, const TArray<class FName>& SrcPropertyNames, const TArray<class FName>& TargetPropertyNames);
	static bool CreateObjectToFile(TSubclassOf<class UObject> ObjectClass, TSoftObjectPtr<class UObject> SoftObjectClass, const class FString& DefaultPath, class FString* OutFilePath, class UObject** OutObject, const class FString& AssetName, bool ShowSelectPathPanel);
	static bool ExportDAAsset(class UObject* Object);
	static bool ExportDTAsset(class UDataTable* DataTable, const class FString& ExcelFileName, const class FString& ExcelSheetName, const TArray<class FString>& TbNames, class FString* ErrorMsg, bool NeedGenTb, bool NeedCheckOut);
	static bool ExportGameplayTags(class FString* OutMsg, class FString* OutXmlPath, class FString* OutExcelPath);
	static bool GenerateConfigByTime(class FString* OutMsg);
	static bool GetDataTableRowDependenceAssetPaths(class UDataTable* DataTable, class FName RowName, TArray<class FString>* OutPackagePaths);
	static TMap<class FString, int32> GetEnumValueDisplayNameMap(const class FString& EnumNameOrPath, bool IsBlueprintEnum);
	static int64 GetHashID(const class FString& InString);
	static TArray<class FName> GetPropertyNamesByCategoriesWithIgnore(class UObject* Object, const TArray<class FName>& Categories, const TArray<class FName>& IgnoreNames);
	static TArray<class FName> GetPropertyNamesByCategory(class UObject* Object, class FName CategoryName);
	static bool IsAssetDirty(class UObject* Object);
	static bool IsFileCheckedOut(const class FString& InFile);
	static bool P4CheckOutFile(const class FString& InFile);
	static bool P4DeleteFile(const class FString& InFile);
	static void RenameAsset(class UObject* Object, const class FString& NewName);
	static bool ReplaceObject(class UObject* SrcObject, class UObject* TargetObject, bool UseStandaloneAssetFlag);
	static bool SaveAndCheckOutAsset(class UObject* Object);
	static bool SaveObject(class UObject* Object);
	static bool SaveObjectToFile(class UObject* Object, const class FString& DefaultPath, class FString* OutFilePath, class UObject** OutObject, const class FString& AssetName, bool ShowSelectPathPanel);
	static class UObject* SelectAssetFromContentBrowser(const class FString& AssetPath, TSubclassOf<class UObject> AssetClass);
	static void SyncPackagesFromSourceControl(const TArray<class FString>& PackageNames);
	static bool UpdatePackageByPaths(const TArray<class FString>& PackagePaths, TArray<class FString>* CheckoutByOtherList, TArray<class FString>* NotLatestList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6PaperCharAIWizardLibrary">();
	}
	static class UX6PaperCharAIWizardLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6PaperCharAIWizardLibrary>();
	}
};
static_assert(alignof(UX6PaperCharAIWizardLibrary) == 0x000008, "Wrong alignment on UX6PaperCharAIWizardLibrary");
static_assert(sizeof(UX6PaperCharAIWizardLibrary) == 0x000028, "Wrong size on UX6PaperCharAIWizardLibrary");

// Class PaperCharWizard.X6T2MoveNPCPathNode
// 0x0000 (0x03A8 - 0x03A8)
class AX6T2MoveNPCPathNode final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6T2MoveNPCPathNode">();
	}
	static class AX6T2MoveNPCPathNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AX6T2MoveNPCPathNode>();
	}
};
static_assert(alignof(AX6T2MoveNPCPathNode) == 0x000008, "Wrong alignment on AX6T2MoveNPCPathNode");
static_assert(sizeof(AX6T2MoveNPCPathNode) == 0x0003A8, "Wrong size on AX6T2MoveNPCPathNode");

// Class PaperCharWizard.X6T2NpcConfigMgr
// 0x0250 (0x0278 - 0x0028)
class UX6T2NpcConfigMgr final : public UObject
{
public:
	TMulticastInlineDelegate<void(const int64& DatalayerId)> OnT2NPCSpawnerDataLoaded;               // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x230];                                     // 0x0038(0x0230)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const int64& DatalayerId)> OnT2MoveNPCSpawnerDataLoaded;           // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UX6T2NpcConfigMgr* GetInstance();

	void GetAllMovableNPCDatas(TArray<struct FT2MoveNpcVersionGroupInfo>* Spawners);
	void GetAllStaticNPCDatas(TArray<struct FT2NpcVersionSpawnConfig>* Spawners);
	bool GetT2MoveNPCSpawnerCharData(const int64 SpawnerID, const int64 DatalayerId, struct FT2MoveNpcVersionGroupInfo* OutSpawnerConfig);
	bool GetT2MoveNPCSpawnerCharDataWithVersionNo(const int64 SpawnerID, const int64 DatalayerId, struct FT2MoveNpcGroupInfo* OutSpawnerConfig, const class FString& VersionNo);
	void GetT2NPCSpawnerCharDataInLayer(const int64& DatalayerId, TMap<int64, struct FT2NpcVersionSpawnConfig>* Result);
	bool IsT2MoveNPCSpawnerCharDataLoaded(const int64& DatalayerId, const int64& SpawnerID);
	bool IsT2NPCSpawnerCharDataLoaded(const int64& DatalayerId, const int64& SpawnerID);
	void LoadT2MoveNPCSpawnerCharDataAsync(const int64& DatalayerId);
	void LoadT2NPCSpawnerCharDataAsync(const int64& DatalayerId);
	void RemoveSpawnerCharData(const int64& DatalayerId, const int64& SpawnerID);
	void RemoveT2MoveNPCSpawnerCharData(const int64& DatalayerId, const int64& SpawnerID);
	bool TryGetSpawnerCharData(const int64& SpawnerID, const int64& DatalayerId, struct FT2NpcVersionSpawnConfig* versionSpawnerConfig);
	bool TryGetSpawnerCharDataWithVersion(const int64& SpawnerID, const int64& DatalayerId, struct FT2NpcSpawnConfig* spawnerConfig, const class FString& VersionNo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6T2NpcConfigMgr">();
	}
	static class UX6T2NpcConfigMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6T2NpcConfigMgr>();
	}
};
static_assert(alignof(UX6T2NpcConfigMgr) == 0x000008, "Wrong alignment on UX6T2NpcConfigMgr");
static_assert(sizeof(UX6T2NpcConfigMgr) == 0x000278, "Wrong size on UX6T2NpcConfigMgr");
static_assert(offsetof(UX6T2NpcConfigMgr, OnT2NPCSpawnerDataLoaded) == 0x000028, "Member 'UX6T2NpcConfigMgr::OnT2NPCSpawnerDataLoaded' has a wrong offset!");
static_assert(offsetof(UX6T2NpcConfigMgr, OnT2MoveNPCSpawnerDataLoaded) == 0x000268, "Member 'UX6T2NpcConfigMgr::OnT2MoveNPCSpawnerDataLoaded' has a wrong offset!");

}

