#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PSDKNetCheck

#include "Basic.hpp"

#include "PSDKBasic_structs.hpp"
#include "PSDKConfig_structs.hpp"


namespace SDK
{

// Enum PSDKNetCheck.EParentType
// NumValues: 0x0004
enum class EParentType : uint8
{
	EPT_LOCALNET                             = 0,
	EPT_ACCOUNT                              = 1,
	EPT_GAMESERVE                            = 2,
	EPT_MAX                                  = 3,
};

// Enum PSDKNetCheck.ESubType
// NumValues: 0x000A
enum class ESubType : uint8
{
	EST_SIGNAL                               = 0,
	EST_PROXY                                = 1,
	EST_DNS                                  = 2,
	EST_PUBLICNETAVAILABLE                   = 3,
	EST_ACCOUNTSERVE                         = 4,
	EST_CDNLINK                              = 5,
	EST_CDNDOWNLOAD                          = 6,
	EST_GATEWAYDELAY                         = 7,
	EST_GATEWAYCHECK                         = 8,
	EST_MAX                                  = 9,
};

// Enum PSDKNetCheck.EMonitorType
// NumValues: 0x0006
enum class EMonitorType : uint8
{
	EMT_NULL                                 = 0,
	EMT_PING                                 = 1,
	EMT_MTR                                  = 2,
	EMT_HTTP                                 = 3,
	EMT_TELNET                               = 4,
	EMT_MAX                                  = 5,
};

// Enum PSDKNetCheck.ECheckState
// NumValues: 0x0005
enum class ECheckState : uint8
{
	ECS_NULL                                 = 0,
	ECS_NOTSTART                             = 1,
	ECS_CHECKING                             = 2,
	ECS_FINISHED                             = 3,
	ECS_MAX                                  = 4,
};

// ScriptStruct PSDKNetCheck.NetworkCheckParameter
// 0x01C0 (0x0278 - 0x00B8)
struct FNetworkCheckParameter final : public FJsonData
{
public:
	class FString                                 customerServiceLink;                               // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 customerServiceEmail;                              // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 basicCloseIcon;                                    // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 basicBgIcon;                                       // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 basicProgressIcon;                                 // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 basicBackIcon;                                     // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 basicTitleColor;                                   // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkTipTitleColor;                                // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkButtonIcon;                                   // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkButtonTitleColor;                             // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingHeadTipNumberColor;                        // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingHeadTipIcon;                               // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingSuperTitleColor;                           // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingSubTitleColor;                             // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingQuestionTitleColor;                        // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingStateCheckIcon;                            // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingStateDoneIcon;                             // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingStateWrongIcon;                            // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingCopyIcon;                                  // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingCopyTitleColor;                            // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingServiceColor;                              // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingLoadingIcon;                               // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 checkingLoadingTipColor;                           // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 diagnosisHeadBgColor;                              // 0x0228(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 diagnosisHeadIcon;                                 // 0x0238(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 diagnosisHeadTitleColor;                           // 0x0248(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 diagnosisTitleColor;                               // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 diagnosisContentColor;                             // 0x0268(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetworkCheckParameter) == 0x000008, "Wrong alignment on FNetworkCheckParameter");
static_assert(sizeof(FNetworkCheckParameter) == 0x000278, "Wrong size on FNetworkCheckParameter");
static_assert(offsetof(FNetworkCheckParameter, customerServiceLink) == 0x0000B8, "Member 'FNetworkCheckParameter::customerServiceLink' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, customerServiceEmail) == 0x0000C8, "Member 'FNetworkCheckParameter::customerServiceEmail' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, basicCloseIcon) == 0x0000D8, "Member 'FNetworkCheckParameter::basicCloseIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, basicBgIcon) == 0x0000E8, "Member 'FNetworkCheckParameter::basicBgIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, basicProgressIcon) == 0x0000F8, "Member 'FNetworkCheckParameter::basicProgressIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, basicBackIcon) == 0x000108, "Member 'FNetworkCheckParameter::basicBackIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, basicTitleColor) == 0x000118, "Member 'FNetworkCheckParameter::basicTitleColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkTipTitleColor) == 0x000128, "Member 'FNetworkCheckParameter::checkTipTitleColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkButtonIcon) == 0x000138, "Member 'FNetworkCheckParameter::checkButtonIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkButtonTitleColor) == 0x000148, "Member 'FNetworkCheckParameter::checkButtonTitleColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingHeadTipNumberColor) == 0x000158, "Member 'FNetworkCheckParameter::checkingHeadTipNumberColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingHeadTipIcon) == 0x000168, "Member 'FNetworkCheckParameter::checkingHeadTipIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingSuperTitleColor) == 0x000178, "Member 'FNetworkCheckParameter::checkingSuperTitleColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingSubTitleColor) == 0x000188, "Member 'FNetworkCheckParameter::checkingSubTitleColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingQuestionTitleColor) == 0x000198, "Member 'FNetworkCheckParameter::checkingQuestionTitleColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingStateCheckIcon) == 0x0001A8, "Member 'FNetworkCheckParameter::checkingStateCheckIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingStateDoneIcon) == 0x0001B8, "Member 'FNetworkCheckParameter::checkingStateDoneIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingStateWrongIcon) == 0x0001C8, "Member 'FNetworkCheckParameter::checkingStateWrongIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingCopyIcon) == 0x0001D8, "Member 'FNetworkCheckParameter::checkingCopyIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingCopyTitleColor) == 0x0001E8, "Member 'FNetworkCheckParameter::checkingCopyTitleColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingServiceColor) == 0x0001F8, "Member 'FNetworkCheckParameter::checkingServiceColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingLoadingIcon) == 0x000208, "Member 'FNetworkCheckParameter::checkingLoadingIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, checkingLoadingTipColor) == 0x000218, "Member 'FNetworkCheckParameter::checkingLoadingTipColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, diagnosisHeadBgColor) == 0x000228, "Member 'FNetworkCheckParameter::diagnosisHeadBgColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, diagnosisHeadIcon) == 0x000238, "Member 'FNetworkCheckParameter::diagnosisHeadIcon' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, diagnosisHeadTitleColor) == 0x000248, "Member 'FNetworkCheckParameter::diagnosisHeadTitleColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, diagnosisTitleColor) == 0x000258, "Member 'FNetworkCheckParameter::diagnosisTitleColor' has a wrong offset!");
static_assert(offsetof(FNetworkCheckParameter, diagnosisContentColor) == 0x000268, "Member 'FNetworkCheckParameter::diagnosisContentColor' has a wrong offset!");

// ScriptStruct PSDKNetCheck.CheckChild
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FCheckChild final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCheckChild) == 0x000008, "Wrong alignment on FCheckChild");
static_assert(sizeof(FCheckChild) == 0x000058, "Wrong size on FCheckChild");

// ScriptStruct PSDKNetCheck.CheckContent
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FCheckContent final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCheckContent) == 0x000008, "Wrong alignment on FCheckContent");
static_assert(sizeof(FCheckContent) == 0x000028, "Wrong size on FCheckContent");

// ScriptStruct PSDKNetCheck.PingRecord
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FPingRecord final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPingRecord) == 0x000008, "Wrong alignment on FPingRecord");
static_assert(sizeof(FPingRecord) == 0x000028, "Wrong size on FPingRecord");

// ScriptStruct PSDKNetCheck.PSdkNetCheckLanguagesRow
// 0x0000 (0x00D8 - 0x00D8)
struct FPSdkNetCheckLanguagesRow final : public FPSDKLanguageTableRowBase
{
};
static_assert(alignof(FPSdkNetCheckLanguagesRow) == 0x000008, "Wrong alignment on FPSdkNetCheckLanguagesRow");
static_assert(sizeof(FPSdkNetCheckLanguagesRow) == 0x0000D8, "Wrong size on FPSdkNetCheckLanguagesRow");

}

