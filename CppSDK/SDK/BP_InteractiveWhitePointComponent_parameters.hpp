#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractiveWhitePointComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_InteractiveWhitePointComponent.BP_InteractiveWhitePointComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_InteractiveWhitePointComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractiveWhitePointComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_InteractiveWhitePointComponent_C_ReceiveTick");
static_assert(sizeof(BP_InteractiveWhitePointComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_InteractiveWhitePointComponent_C_ReceiveTick");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_InteractiveWhitePointComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_InteractiveWhitePointComponent.BP_InteractiveWhitePointComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractiveWhitePointComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractiveWhitePointComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_InteractiveWhitePointComponent_C_ReceiveEndPlay");
static_assert(sizeof(BP_InteractiveWhitePointComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_InteractiveWhitePointComponent_C_ReceiveEndPlay");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_InteractiveWhitePointComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_InteractiveWhitePointComponent.BP_InteractiveWhitePointComponent_C.ExecuteUbergraph_BP_InteractiveWhitePointComponent
// 0x000C (0x000C - 0x0000)
struct BP_InteractiveWhitePointComponent_C_ExecuteUbergraph_BP_InteractiveWhitePointComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractiveWhitePointComponent_C_ExecuteUbergraph_BP_InteractiveWhitePointComponent) == 0x000004, "Wrong alignment on BP_InteractiveWhitePointComponent_C_ExecuteUbergraph_BP_InteractiveWhitePointComponent");
static_assert(sizeof(BP_InteractiveWhitePointComponent_C_ExecuteUbergraph_BP_InteractiveWhitePointComponent) == 0x00000C, "Wrong size on BP_InteractiveWhitePointComponent_C_ExecuteUbergraph_BP_InteractiveWhitePointComponent");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_ExecuteUbergraph_BP_InteractiveWhitePointComponent, EntryPoint) == 0x000000, "Member 'BP_InteractiveWhitePointComponent_C_ExecuteUbergraph_BP_InteractiveWhitePointComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_ExecuteUbergraph_BP_InteractiveWhitePointComponent, K2Node_Event_EndPlayReason) == 0x000004, "Member 'BP_InteractiveWhitePointComponent_C_ExecuteUbergraph_BP_InteractiveWhitePointComponent::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_ExecuteUbergraph_BP_InteractiveWhitePointComponent, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_InteractiveWhitePointComponent_C_ExecuteUbergraph_BP_InteractiveWhitePointComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_InteractiveWhitePointComponent.BP_InteractiveWhitePointComponent_C.BP_StartCheckTimer
// 0x0018 (0x0018 - 0x0000)
struct BP_InteractiveWhitePointComponent_C_BP_StartCheckTimer final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractiveWhitePointComponent_C_BP_StartCheckTimer) == 0x000008, "Wrong alignment on BP_InteractiveWhitePointComponent_C_BP_StartCheckTimer");
static_assert(sizeof(BP_InteractiveWhitePointComponent_C_BP_StartCheckTimer) == 0x000018, "Wrong size on BP_InteractiveWhitePointComponent_C_BP_StartCheckTimer");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_StartCheckTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_InteractiveWhitePointComponent_C_BP_StartCheckTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_StartCheckTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000010, "Member 'BP_InteractiveWhitePointComponent_C_BP_StartCheckTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function BP_InteractiveWhitePointComponent.BP_InteractiveWhitePointComponent_C.BP_LineTrace
// 0x0160 (0x0160 - 0x0000)
struct BP_InteractiveWhitePointComponent_C_BP_LineTrace final
{
public:
	struct FVector                                End;                                               // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 WhitePointActor;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PlayerActor;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bHit;                                              // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0060(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractiveWhitePointComponent_C_BP_LineTrace) == 0x000008, "Wrong alignment on BP_InteractiveWhitePointComponent_C_BP_LineTrace");
static_assert(sizeof(BP_InteractiveWhitePointComponent_C_BP_LineTrace) == 0x000160, "Wrong size on BP_InteractiveWhitePointComponent_C_BP_LineTrace");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_LineTrace, End) == 0x000000, "Member 'BP_InteractiveWhitePointComponent_C_BP_LineTrace::End' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_LineTrace, WhitePointActor) == 0x000018, "Member 'BP_InteractiveWhitePointComponent_C_BP_LineTrace::WhitePointActor' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_LineTrace, PlayerActor) == 0x000020, "Member 'BP_InteractiveWhitePointComponent_C_BP_LineTrace::PlayerActor' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_LineTrace, bHit) == 0x000028, "Member 'BP_InteractiveWhitePointComponent_C_BP_LineTrace::bHit' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_LineTrace, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000030, "Member 'BP_InteractiveWhitePointComponent_C_BP_LineTrace::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_LineTrace, K2Node_MakeArray_Array) == 0x000038, "Member 'BP_InteractiveWhitePointComponent_C_BP_LineTrace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_LineTrace, CallFunc_GetCameraLocation_ReturnValue) == 0x000048, "Member 'BP_InteractiveWhitePointComponent_C_BP_LineTrace::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_LineTrace, CallFunc_LineTraceSingle_OutHit) == 0x000060, "Member 'BP_InteractiveWhitePointComponent_C_BP_LineTrace::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_LineTrace, CallFunc_LineTraceSingle_ReturnValue) == 0x000158, "Member 'BP_InteractiveWhitePointComponent_C_BP_LineTrace::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function BP_InteractiveWhitePointComponent.BP_InteractiveWhitePointComponent_C.BP_CheckTimerIsValid
// 0x0002 (0x0002 - 0x0000)
struct BP_InteractiveWhitePointComponent_C_BP_CheckTimerIsValid final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractiveWhitePointComponent_C_BP_CheckTimerIsValid) == 0x000001, "Wrong alignment on BP_InteractiveWhitePointComponent_C_BP_CheckTimerIsValid");
static_assert(sizeof(BP_InteractiveWhitePointComponent_C_BP_CheckTimerIsValid) == 0x000002, "Wrong size on BP_InteractiveWhitePointComponent_C_BP_CheckTimerIsValid");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_CheckTimerIsValid, NewParam) == 0x000000, "Member 'BP_InteractiveWhitePointComponent_C_BP_CheckTimerIsValid::NewParam' has a wrong offset!");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_BP_CheckTimerIsValid, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000001, "Member 'BP_InteractiveWhitePointComponent_C_BP_CheckTimerIsValid::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");

// Function BP_InteractiveWhitePointComponent.BP_InteractiveWhitePointComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_InteractiveWhitePointComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractiveWhitePointComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_InteractiveWhitePointComponent_C_GetModuleName");
static_assert(sizeof(BP_InteractiveWhitePointComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_InteractiveWhitePointComponent_C_GetModuleName");
static_assert(offsetof(BP_InteractiveWhitePointComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_InteractiveWhitePointComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

