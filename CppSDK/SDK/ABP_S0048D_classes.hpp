#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_S0048D

#include "Basic.hpp"

#include "E_ClothesAnimationStateType_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "NikkiPhysics_structs.hpp"
#include "X6Game_structs.hpp"
#include "X6Game_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "EMantleType_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_S0048D.ABP_S0048D_C
// 0x2EC0 (0x3310 - 0x0450)
class UABP_S0048D_C final : public UNikkiClothAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0450(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0458(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0460(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0468(0x0020)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0488(0x0080)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_14;                 // 0x0508(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x0530(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x0558(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x0580(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x05A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x05D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x05F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0620(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0648(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0670(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0698(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_10;                      // 0x06C0(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x06E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0708(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0730(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x0778(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0798(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x07E0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_4;                      // 0x0800(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x08C8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x08E8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0930(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_3;                      // 0x0950(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0A18(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0A38(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0A60(0x0028)()
	struct FAnimNode_CopyPoseFromMesh             AnimGraphNode_CopyPoseFromMesh_3;                  // 0x0A88(0x0158)(ContainsInstancedReference)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0BE0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0C00(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0C48(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x0C68(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0D30(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0D50(0x00C8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0E18(0x0020)()
	struct FAnimNode_CopyPoseFromMesh             AnimGraphNode_CopyPoseFromMesh_2;                  // 0x0E38(0x0158)(ContainsInstancedReference)
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0F90(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0FB0(0x00C8)()
	uint8                                         Pad_1078[0x8];                                     // 0x1078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_Inertialization              AnimGraphNode_Inertialization;                     // 0x1080(0x0450)()
	struct FAnimNode_CopyPoseFromMesh             AnimGraphNode_CopyPoseFromMesh_1;                  // 0x14D0(0x0158)(ContainsInstancedReference)
	uint8                                         Pad_1628[0x8];                                     // 0x1628(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_NikkiPhysics                 AnimGraphNode_NikkiPhysics;                        // 0x1630(0x11F0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x2820(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x2840(0x0020)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x2860(0x00F0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x2950(0x0028)()
	struct FAnimNode_NikkiLiftLegRig              AnimGraphNode_NikkiLiftLegRig;                     // 0x2978(0x0060)()
	struct FAnimNode_NikkiArmSkirtRig             AnimGraphNode_NikkiArmSkirtRig;                    // 0x29D8(0x0060)()
	uint8                                         Pad_2A38[0x8];                                     // 0x2A38(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_NikkiHorizontalRig           AnimGraphNode_NikkiHorizontalRig;                  // 0x2A40(0x05E0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x3020(0x00F0)()
	struct FAnimNode_CopyPoseFromMesh             AnimGraphNode_CopyPoseFromMesh;                    // 0x3110(0x0158)(ContainsInstancedReference)
	class UAnimSequence*                          Anim_Jump_Start;                                   // 0x3268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Anim_Jump_Fly;                                     // 0x3270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_ClothesAnimationStateType                   BP_Current_Clothe_Anim_State;                      // 0x3278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3279[0x7];                                     // 0x3279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PhysicsBlendAlpha;                                 // 0x3280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUp;                                              // 0x3288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3289[0x7];                                     // 0x3289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentPhysicBlendAlpha;                           // 0x3290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMantle;                                          // 0x3298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFloat;                                           // 0x3299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPrepareFinished;                                 // 0x329A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329B[0x5];                                     // 0x329B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerRegularInAirMovementComp_C*   InAirRegularMoveableComponent;                     // 0x32A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerInAirMoveableComponent_C*     InAirMoveableComponent;                            // 0x32A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 MovementMode;                                      // 0x32B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     JumpStage;                                         // 0x32B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRejump;                                           // 0x32B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B3[0x5];                                     // 0x32B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ExternalAcceleration;                              // 0x32B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExternalAccelerationDuration;                      // 0x32D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumpingInAir;                                    // 0x32D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D9[0x7];                                     // 0x32D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            CharacterMovementComp;                             // 0x32E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerMantleComponent_C*            PlayerMantleComp;                                  // 0x32E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         NikkiPhysicsPreDoStep;                             // 0x32F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendPoseWeight;                                   // 0x32F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NikkiPhysicsPartSelfCollsion;                      // 0x32F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ENikki_HeightFieldMethod                      NikkiPhysicsHeightFieldMethod;                     // 0x32F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32FA[0x6];                                     // 0x32FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rig_LiftLegAlpha;                                  // 0x3300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void CustomEvent(ERegularFloatingJumpStage NewStage, ERegularFloatingJumpStage OldStage);
	void DetermineMantleSequence();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_S0048D_AnimGraphNode_TransitionResult_0E41EFBF40C2E0F423E9748D7F0FB71B();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_S0048D_AnimGraphNode_TransitionResult_171ECA024A299DE7040A7F84E1AD9D55();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_S0048D_AnimGraphNode_TransitionResult_27D1910648E29E76985A89A069722241();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_S0048D_AnimGraphNode_TransitionResult_3E87A518420F503F9A74E7A53FB9C78D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_S0048D_AnimGraphNode_TransitionResult_55F47DA944A250FB3991ED94EFD40C76();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_S0048D_AnimGraphNode_TransitionResult_599342674A258AB3B1C263A40C084791();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_S0048D_AnimGraphNode_TransitionResult_6DD8DA844BC7049917EAB9872A2131B3();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_S0048D_AnimGraphNode_TransitionResult_8229BF4F4B88E148A40F73B6DEDB0F35();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_S0048D_AnimGraphNode_TransitionResult_9E09E4B746B3107D51C2DBA6D5A99934();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_S0048D_AnimGraphNode_TransitionResult_C12C267146758D2CEF7515A7D875D3EB();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_S0048D_AnimGraphNode_TransitionResult_E4A65CE3435D3A99DF646C86FD7EABCA();
	void ExecuteUbergraph_ABP_S0048D(int32 EntryPoint);
	void FloatingAnimationDetermine();
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	bool Prepare();
	void UpdateBlendAlphaWithPhysics(double* Output_Get);
	void UpdateRejump();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_S0048D_C">();
	}
	static class UABP_S0048D_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_S0048D_C>();
	}
};
static_assert(alignof(UABP_S0048D_C) == 0x000010, "Wrong alignment on UABP_S0048D_C");
static_assert(sizeof(UABP_S0048D_C) == 0x003310, "Wrong size on UABP_S0048D_C");
static_assert(offsetof(UABP_S0048D_C, UberGraphFrame) == 0x000450, "Member 'UABP_S0048D_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimBlueprintExtension_PropertyAccess) == 0x000458, "Member 'UABP_S0048D_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimBlueprintExtension_Base) == 0x000460, "Member 'UABP_S0048D_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_Root) == 0x000468, "Member 'UABP_S0048D_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_SaveCachedPose) == 0x000488, "Member 'UABP_S0048D_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_14) == 0x000508, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_14' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_13) == 0x000530, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_12) == 0x000558, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_11) == 0x000580, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_10) == 0x0005A8, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_9) == 0x0005D0, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_8) == 0x0005F8, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_7) == 0x000620, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_6) == 0x000648, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_5) == 0x000670, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_4) == 0x000698, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateResult_10) == 0x0006C0, "Member 'UABP_S0048D_C::AnimGraphNode_StateResult_10' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_3) == 0x0006E0, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_2) == 0x000708, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_SequencePlayer_3) == 0x000730, "Member 'UABP_S0048D_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateResult_9) == 0x000778, "Member 'UABP_S0048D_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_SequencePlayer_2) == 0x000798, "Member 'UABP_S0048D_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateResult_8) == 0x0007E0, "Member 'UABP_S0048D_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateMachine_4) == 0x000800, "Member 'UABP_S0048D_C::AnimGraphNode_StateMachine_4' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateResult_7) == 0x0008C8, "Member 'UABP_S0048D_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_SequencePlayer_1) == 0x0008E8, "Member 'UABP_S0048D_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateResult_6) == 0x000930, "Member 'UABP_S0048D_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateMachine_3) == 0x000950, "Member 'UABP_S0048D_C::AnimGraphNode_StateMachine_3' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateResult_5) == 0x000A18, "Member 'UABP_S0048D_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult_1) == 0x000A38, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_TransitionResult) == 0x000A60, "Member 'UABP_S0048D_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_CopyPoseFromMesh_3) == 0x000A88, "Member 'UABP_S0048D_C::AnimGraphNode_CopyPoseFromMesh_3' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateResult_4) == 0x000BE0, "Member 'UABP_S0048D_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_SequencePlayer) == 0x000C00, "Member 'UABP_S0048D_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateResult_3) == 0x000C48, "Member 'UABP_S0048D_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateMachine_2) == 0x000C68, "Member 'UABP_S0048D_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateResult_2) == 0x000D30, "Member 'UABP_S0048D_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateMachine_1) == 0x000D50, "Member 'UABP_S0048D_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateResult_1) == 0x000E18, "Member 'UABP_S0048D_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_CopyPoseFromMesh_2) == 0x000E38, "Member 'UABP_S0048D_C::AnimGraphNode_CopyPoseFromMesh_2' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateResult) == 0x000F90, "Member 'UABP_S0048D_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_StateMachine) == 0x000FB0, "Member 'UABP_S0048D_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_Inertialization) == 0x001080, "Member 'UABP_S0048D_C::AnimGraphNode_Inertialization' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_CopyPoseFromMesh_1) == 0x0014D0, "Member 'UABP_S0048D_C::AnimGraphNode_CopyPoseFromMesh_1' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_NikkiPhysics) == 0x001630, "Member 'UABP_S0048D_C::AnimGraphNode_NikkiPhysics' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_LocalToComponentSpace) == 0x002820, "Member 'UABP_S0048D_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_ComponentToLocalSpace) == 0x002840, "Member 'UABP_S0048D_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_LayeredBoneBlend_1) == 0x002860, "Member 'UABP_S0048D_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_UseCachedPose) == 0x002950, "Member 'UABP_S0048D_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_NikkiLiftLegRig) == 0x002978, "Member 'UABP_S0048D_C::AnimGraphNode_NikkiLiftLegRig' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_NikkiArmSkirtRig) == 0x0029D8, "Member 'UABP_S0048D_C::AnimGraphNode_NikkiArmSkirtRig' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_NikkiHorizontalRig) == 0x002A40, "Member 'UABP_S0048D_C::AnimGraphNode_NikkiHorizontalRig' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_LayeredBoneBlend) == 0x003020, "Member 'UABP_S0048D_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, AnimGraphNode_CopyPoseFromMesh) == 0x003110, "Member 'UABP_S0048D_C::AnimGraphNode_CopyPoseFromMesh' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, Anim_Jump_Start) == 0x003268, "Member 'UABP_S0048D_C::Anim_Jump_Start' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, Anim_Jump_Fly) == 0x003270, "Member 'UABP_S0048D_C::Anim_Jump_Fly' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, BP_Current_Clothe_Anim_State) == 0x003278, "Member 'UABP_S0048D_C::BP_Current_Clothe_Anim_State' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, PhysicsBlendAlpha) == 0x003280, "Member 'UABP_S0048D_C::PhysicsBlendAlpha' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, IsUp) == 0x003288, "Member 'UABP_S0048D_C::IsUp' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, CurrentPhysicBlendAlpha) == 0x003290, "Member 'UABP_S0048D_C::CurrentPhysicBlendAlpha' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, IsMantle) == 0x003298, "Member 'UABP_S0048D_C::IsMantle' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, IsFloat) == 0x003299, "Member 'UABP_S0048D_C::IsFloat' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, IsPrepareFinished) == 0x00329A, "Member 'UABP_S0048D_C::IsPrepareFinished' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, InAirRegularMoveableComponent) == 0x0032A0, "Member 'UABP_S0048D_C::InAirRegularMoveableComponent' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, InAirMoveableComponent) == 0x0032A8, "Member 'UABP_S0048D_C::InAirMoveableComponent' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, MovementMode) == 0x0032B0, "Member 'UABP_S0048D_C::MovementMode' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, JumpStage) == 0x0032B1, "Member 'UABP_S0048D_C::JumpStage' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, bRejump) == 0x0032B2, "Member 'UABP_S0048D_C::bRejump' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, ExternalAcceleration) == 0x0032B8, "Member 'UABP_S0048D_C::ExternalAcceleration' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, ExternalAccelerationDuration) == 0x0032D0, "Member 'UABP_S0048D_C::ExternalAccelerationDuration' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, IsJumpingInAir) == 0x0032D8, "Member 'UABP_S0048D_C::IsJumpingInAir' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, CharacterMovementComp) == 0x0032E0, "Member 'UABP_S0048D_C::CharacterMovementComp' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, PlayerMantleComp) == 0x0032E8, "Member 'UABP_S0048D_C::PlayerMantleComp' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, NikkiPhysicsPreDoStep) == 0x0032F0, "Member 'UABP_S0048D_C::NikkiPhysicsPreDoStep' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, BlendPoseWeight) == 0x0032F4, "Member 'UABP_S0048D_C::BlendPoseWeight' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, NikkiPhysicsPartSelfCollsion) == 0x0032F8, "Member 'UABP_S0048D_C::NikkiPhysicsPartSelfCollsion' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, NikkiPhysicsHeightFieldMethod) == 0x0032F9, "Member 'UABP_S0048D_C::NikkiPhysicsHeightFieldMethod' has a wrong offset!");
static_assert(offsetof(UABP_S0048D_C, Rig_LiftLegAlpha) == 0x003300, "Member 'UABP_S0048D_C::Rig_LiftLegAlpha' has a wrong offset!");

}

