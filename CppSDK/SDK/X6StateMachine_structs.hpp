#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6StateMachine

#include "Basic.hpp"


namespace SDK
{

// Enum X6StateMachine.FSM_Transition
// NumValues: 0x0004
enum class EFSM_Transition : uint8
{
	Aborted                                  = 0,
	Succeeded                                = 1,
	DoNothing                                = 2,
	FSM_MAX                                  = 3,
};

// ScriptStruct X6StateMachine.SM_BeginEvent
// 0x000C (0x000C - 0x0000)
struct FSM_BeginEvent final
{
public:
	uint8                                         StateID;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousStateID;                                   // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PreviousStateName;                                 // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSM_BeginEvent) == 0x000004, "Wrong alignment on FSM_BeginEvent");
static_assert(sizeof(FSM_BeginEvent) == 0x00000C, "Wrong size on FSM_BeginEvent");
static_assert(offsetof(FSM_BeginEvent, StateID) == 0x000000, "Member 'FSM_BeginEvent::StateID' has a wrong offset!");
static_assert(offsetof(FSM_BeginEvent, PreviousStateID) == 0x000001, "Member 'FSM_BeginEvent::PreviousStateID' has a wrong offset!");
static_assert(offsetof(FSM_BeginEvent, PreviousStateName) == 0x000004, "Member 'FSM_BeginEvent::PreviousStateName' has a wrong offset!");

// ScriptStruct X6StateMachine.SM_UpdateEvent
// 0x0008 (0x0008 - 0x0000)
struct FSM_UpdateEvent final
{
public:
	uint8                                         StateID;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateTime;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSM_UpdateEvent) == 0x000004, "Wrong alignment on FSM_UpdateEvent");
static_assert(sizeof(FSM_UpdateEvent) == 0x000008, "Wrong size on FSM_UpdateEvent");
static_assert(offsetof(FSM_UpdateEvent, StateID) == 0x000000, "Member 'FSM_UpdateEvent::StateID' has a wrong offset!");
static_assert(offsetof(FSM_UpdateEvent, StateTime) == 0x000004, "Member 'FSM_UpdateEvent::StateTime' has a wrong offset!");

// ScriptStruct X6StateMachine.SM_ExitEvent
// 0x000C (0x000C - 0x0000)
struct FSM_ExitEvent final
{
public:
	uint8                                         StateID;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NextStateID;                                       // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NextStateName;                                     // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSM_ExitEvent) == 0x000004, "Wrong alignment on FSM_ExitEvent");
static_assert(sizeof(FSM_ExitEvent) == 0x00000C, "Wrong size on FSM_ExitEvent");
static_assert(offsetof(FSM_ExitEvent, StateID) == 0x000000, "Member 'FSM_ExitEvent::StateID' has a wrong offset!");
static_assert(offsetof(FSM_ExitEvent, NextStateID) == 0x000001, "Member 'FSM_ExitEvent::NextStateID' has a wrong offset!");
static_assert(offsetof(FSM_ExitEvent, NextStateName) == 0x000004, "Member 'FSM_ExitEvent::NextStateName' has a wrong offset!");

// ScriptStruct X6StateMachine.SM_ChangeStateEvent
// 0x000C (0x000C - 0x0000)
struct FSM_ChangeStateEvent final
{
public:
	uint8                                         StateID;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NextStateID;                                       // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NextStateName;                                     // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSM_ChangeStateEvent) == 0x000004, "Wrong alignment on FSM_ChangeStateEvent");
static_assert(sizeof(FSM_ChangeStateEvent) == 0x00000C, "Wrong size on FSM_ChangeStateEvent");
static_assert(offsetof(FSM_ChangeStateEvent, StateID) == 0x000000, "Member 'FSM_ChangeStateEvent::StateID' has a wrong offset!");
static_assert(offsetof(FSM_ChangeStateEvent, NextStateID) == 0x000001, "Member 'FSM_ChangeStateEvent::NextStateID' has a wrong offset!");
static_assert(offsetof(FSM_ChangeStateEvent, NextStateName) == 0x000004, "Member 'FSM_ChangeStateEvent::NextStateName' has a wrong offset!");

// ScriptStruct X6StateMachine.SM_State
// 0x0008 (0x0008 - 0x0000)
struct FSM_State final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSM_State) == 0x000004, "Wrong alignment on FSM_State");
static_assert(sizeof(FSM_State) == 0x000008, "Wrong size on FSM_State");
static_assert(offsetof(FSM_State, Name) == 0x000000, "Member 'FSM_State::Name' has a wrong offset!");

}

