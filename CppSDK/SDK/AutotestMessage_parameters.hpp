#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AutotestMessage

#include "Basic.hpp"


namespace SDK::Params
{

// Function AutotestMessage.XYReplayState.GetCurGameTimeHour
// 0x0010 (0x0010 - 0x0000)
struct XYReplayState_GetCurGameTimeHour final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayState_GetCurGameTimeHour) == 0x000008, "Wrong alignment on XYReplayState_GetCurGameTimeHour");
static_assert(sizeof(XYReplayState_GetCurGameTimeHour) == 0x000010, "Wrong size on XYReplayState_GetCurGameTimeHour");
static_assert(offsetof(XYReplayState_GetCurGameTimeHour, ReturnValue) == 0x000000, "Member 'XYReplayState_GetCurGameTimeHour::ReturnValue' has a wrong offset!");

// Function AutotestMessage.XYReplayState.GetDemoCurrentTime
// 0x0004 (0x0004 - 0x0000)
struct XYReplayState_GetDemoCurrentTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayState_GetDemoCurrentTime) == 0x000004, "Wrong alignment on XYReplayState_GetDemoCurrentTime");
static_assert(sizeof(XYReplayState_GetDemoCurrentTime) == 0x000004, "Wrong size on XYReplayState_GetDemoCurrentTime");
static_assert(offsetof(XYReplayState_GetDemoCurrentTime, ReturnValue) == 0x000000, "Member 'XYReplayState_GetDemoCurrentTime::ReturnValue' has a wrong offset!");

// Function AutotestMessage.XYReplayState.GetLoginPlayerName
// 0x0010 (0x0010 - 0x0000)
struct XYReplayState_GetLoginPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayState_GetLoginPlayerName) == 0x000008, "Wrong alignment on XYReplayState_GetLoginPlayerName");
static_assert(sizeof(XYReplayState_GetLoginPlayerName) == 0x000010, "Wrong size on XYReplayState_GetLoginPlayerName");
static_assert(offsetof(XYReplayState_GetLoginPlayerName, ReturnValue) == 0x000000, "Member 'XYReplayState_GetLoginPlayerName::ReturnValue' has a wrong offset!");

// Function AutotestMessage.XYReplayState.GetLoginServerName
// 0x0010 (0x0010 - 0x0000)
struct XYReplayState_GetLoginServerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayState_GetLoginServerName) == 0x000008, "Wrong alignment on XYReplayState_GetLoginServerName");
static_assert(sizeof(XYReplayState_GetLoginServerName) == 0x000010, "Wrong size on XYReplayState_GetLoginServerName");
static_assert(offsetof(XYReplayState_GetLoginServerName, ReturnValue) == 0x000000, "Member 'XYReplayState_GetLoginServerName::ReturnValue' has a wrong offset!");

// Function AutotestMessage.XYReplayState.GetRecordState
// 0x0001 (0x0001 - 0x0000)
struct XYReplayState_GetRecordState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayState_GetRecordState) == 0x000001, "Wrong alignment on XYReplayState_GetRecordState");
static_assert(sizeof(XYReplayState_GetRecordState) == 0x000001, "Wrong size on XYReplayState_GetRecordState");
static_assert(offsetof(XYReplayState_GetRecordState, ReturnValue) == 0x000000, "Member 'XYReplayState_GetRecordState::ReturnValue' has a wrong offset!");

// Function AutotestMessage.XYReplayState.GetReplayFrame
// 0x0004 (0x0004 - 0x0000)
struct XYReplayState_GetReplayFrame final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayState_GetReplayFrame) == 0x000004, "Wrong alignment on XYReplayState_GetReplayFrame");
static_assert(sizeof(XYReplayState_GetReplayFrame) == 0x000004, "Wrong size on XYReplayState_GetReplayFrame");
static_assert(offsetof(XYReplayState_GetReplayFrame, ReturnValue) == 0x000000, "Member 'XYReplayState_GetReplayFrame::ReturnValue' has a wrong offset!");

// Function AutotestMessage.XYReplayState.GetRunningState
// 0x0001 (0x0001 - 0x0000)
struct XYReplayState_GetRunningState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayState_GetRunningState) == 0x000001, "Wrong alignment on XYReplayState_GetRunningState");
static_assert(sizeof(XYReplayState_GetRunningState) == 0x000001, "Wrong size on XYReplayState_GetRunningState");
static_assert(offsetof(XYReplayState_GetRunningState, ReturnValue) == 0x000000, "Member 'XYReplayState_GetRunningState::ReturnValue' has a wrong offset!");

// Function AutotestMessage.XYReplayState.GetTotalSecond
// 0x0010 (0x0010 - 0x0000)
struct XYReplayState_GetTotalSecond final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayState_GetTotalSecond) == 0x000008, "Wrong alignment on XYReplayState_GetTotalSecond");
static_assert(sizeof(XYReplayState_GetTotalSecond) == 0x000010, "Wrong size on XYReplayState_GetTotalSecond");
static_assert(offsetof(XYReplayState_GetTotalSecond, ReturnValue) == 0x000000, "Member 'XYReplayState_GetTotalSecond::ReturnValue' has a wrong offset!");

// Function AutotestMessage.XYReplayState.GetXYReplayName
// 0x0010 (0x0010 - 0x0000)
struct XYReplayState_GetXYReplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayState_GetXYReplayName) == 0x000008, "Wrong alignment on XYReplayState_GetXYReplayName");
static_assert(sizeof(XYReplayState_GetXYReplayName) == 0x000010, "Wrong size on XYReplayState_GetXYReplayName");
static_assert(offsetof(XYReplayState_GetXYReplayName, ReturnValue) == 0x000000, "Member 'XYReplayState_GetXYReplayName::ReturnValue' has a wrong offset!");

// Function AutotestMessage.XYReplayState.IsSuspend
// 0x0001 (0x0001 - 0x0000)
struct XYReplayState_IsSuspend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayState_IsSuspend) == 0x000001, "Wrong alignment on XYReplayState_IsSuspend");
static_assert(sizeof(XYReplayState_IsSuspend) == 0x000001, "Wrong size on XYReplayState_IsSuspend");
static_assert(offsetof(XYReplayState_IsSuspend, ReturnValue) == 0x000000, "Member 'XYReplayState_IsSuspend::ReturnValue' has a wrong offset!");

// Function AutotestMessage.AutotestMessageManager.Get
// 0x0008 (0x0008 - 0x0000)
struct AutotestMessageManager_Get final
{
public:
	class UAutotestMessageManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutotestMessageManager_Get) == 0x000008, "Wrong alignment on AutotestMessageManager_Get");
static_assert(sizeof(AutotestMessageManager_Get) == 0x000008, "Wrong size on AutotestMessageManager_Get");
static_assert(offsetof(AutotestMessageManager_Get, ReturnValue) == 0x000000, "Member 'AutotestMessageManager_Get::ReturnValue' has a wrong offset!");

// Function AutotestMessage.AutotestMessageManager.SendSynchronous
// 0x0020 (0x0020 - 0x0000)
struct AutotestMessageManager_SendSynchronous final
{
public:
	class FString                                 OutData;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutotestMessageManager_SendSynchronous) == 0x000008, "Wrong alignment on AutotestMessageManager_SendSynchronous");
static_assert(sizeof(AutotestMessageManager_SendSynchronous) == 0x000020, "Wrong size on AutotestMessageManager_SendSynchronous");
static_assert(offsetof(AutotestMessageManager_SendSynchronous, OutData) == 0x000000, "Member 'AutotestMessageManager_SendSynchronous::OutData' has a wrong offset!");
static_assert(offsetof(AutotestMessageManager_SendSynchronous, EventName) == 0x000010, "Member 'AutotestMessageManager_SendSynchronous::EventName' has a wrong offset!");

// Function AutotestMessage.AutotestMessageManager.TrigerEvent
// 0x0020 (0x0020 - 0x0000)
struct AutotestMessageManager_TrigerEvent final
{
public:
	class FString                                 Event;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Args;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutotestMessageManager_TrigerEvent) == 0x000008, "Wrong alignment on AutotestMessageManager_TrigerEvent");
static_assert(sizeof(AutotestMessageManager_TrigerEvent) == 0x000020, "Wrong size on AutotestMessageManager_TrigerEvent");
static_assert(offsetof(AutotestMessageManager_TrigerEvent, Event) == 0x000000, "Member 'AutotestMessageManager_TrigerEvent::Event' has a wrong offset!");
static_assert(offsetof(AutotestMessageManager_TrigerEvent, Args) == 0x000010, "Member 'AutotestMessageManager_TrigerEvent::Args' has a wrong offset!");

}

