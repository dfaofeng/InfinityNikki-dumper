#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_ACM_LandQuadruped_IdlePerformance

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "X6BTTask_LuaBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_ACM_LandQuadruped_IdlePerformance.BTT_ACM_LandQuadruped_IdlePerformance_C
// 0x0030 (0x00E8 - 0x00B8)
class UBTT_ACM_LandQuadruped_IdlePerformance_C final : public UX6BTTask_LuaBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BTT_ACM_LandQuadruped_IdlePerformance_C; // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ACharacter*                             OwnerCharacter;                                    // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        WaitStanceTimeOut;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StanceNearlyFinishTolerance;                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRandomRelaxPose;                                  // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BehaviorType;                                      // 0x00DC(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          bLoop;                                             // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ExecuteUbergraph_BTT_ACM_LandQuadruped_IdlePerformance(int32 EntryPoint);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_ACM_LandQuadruped_IdlePerformance_C">();
	}
	static class UBTT_ACM_LandQuadruped_IdlePerformance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_ACM_LandQuadruped_IdlePerformance_C>();
	}
};
static_assert(alignof(UBTT_ACM_LandQuadruped_IdlePerformance_C) == 0x000008, "Wrong alignment on UBTT_ACM_LandQuadruped_IdlePerformance_C");
static_assert(sizeof(UBTT_ACM_LandQuadruped_IdlePerformance_C) == 0x0000E8, "Wrong size on UBTT_ACM_LandQuadruped_IdlePerformance_C");
static_assert(offsetof(UBTT_ACM_LandQuadruped_IdlePerformance_C, UberGraphFrame_BTT_ACM_LandQuadruped_IdlePerformance_C) == 0x0000B8, "Member 'UBTT_ACM_LandQuadruped_IdlePerformance_C::UberGraphFrame_BTT_ACM_LandQuadruped_IdlePerformance_C' has a wrong offset!");
static_assert(offsetof(UBTT_ACM_LandQuadruped_IdlePerformance_C, OwnerCharacter) == 0x0000C0, "Member 'UBTT_ACM_LandQuadruped_IdlePerformance_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UBTT_ACM_LandQuadruped_IdlePerformance_C, WaitStanceTimeOut) == 0x0000C8, "Member 'UBTT_ACM_LandQuadruped_IdlePerformance_C::WaitStanceTimeOut' has a wrong offset!");
static_assert(offsetof(UBTT_ACM_LandQuadruped_IdlePerformance_C, StanceNearlyFinishTolerance) == 0x0000D0, "Member 'UBTT_ACM_LandQuadruped_IdlePerformance_C::StanceNearlyFinishTolerance' has a wrong offset!");
static_assert(offsetof(UBTT_ACM_LandQuadruped_IdlePerformance_C, bRandomRelaxPose) == 0x0000D8, "Member 'UBTT_ACM_LandQuadruped_IdlePerformance_C::bRandomRelaxPose' has a wrong offset!");
static_assert(offsetof(UBTT_ACM_LandQuadruped_IdlePerformance_C, BehaviorType) == 0x0000DC, "Member 'UBTT_ACM_LandQuadruped_IdlePerformance_C::BehaviorType' has a wrong offset!");
static_assert(offsetof(UBTT_ACM_LandQuadruped_IdlePerformance_C, bLoop) == 0x0000E4, "Member 'UBTT_ACM_LandQuadruped_IdlePerformance_C::bLoop' has a wrong offset!");

}

