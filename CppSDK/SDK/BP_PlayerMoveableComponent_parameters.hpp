#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerMoveableComponent

#include "Basic.hpp"

#include "EInputDeviceKeyType_structs.hpp"
#include "Engine_structs.hpp"
#include "EPlayerGamePlayMovementMode_structs.hpp"
#include "EPlayerMovementScenarios_structs.hpp"
#include "X6Game_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_DebugVisualizeLocomotionInputData
// 0x01F0 (0x01F0 - 0x0000)
struct BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_IntToVector_ReturnValue;             // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_Vector2dToString_ReturnValue;        // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_2;      // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector2D_Y_ImplicitCast;              // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast; // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector2D_X_ImplicitCast;              // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast_1; // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData) == 0x0001F0, "Wrong size on BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, DeltaSeconds) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Conv_IntToVector_ReturnValue) == 0x000008, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Conv_IntToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000020, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000028, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000040, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_MakeVector2D_ReturnValue) == 0x000058, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_BreakRotator_Roll) == 0x000068, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_BreakRotator_Pitch) == 0x00006C, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_BreakRotator_Yaw) == 0x000070, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Conv_Vector2dToString_ReturnValue) == 0x000078, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Conv_Vector2dToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_MakeRotator_ReturnValue) == 0x000088, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Concat_StrStr_ReturnValue) == 0x0000A0, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_GetRightVector_ReturnValue) == 0x0000B0, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000C8, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000D8, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000F0, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_MakeRotator_ReturnValue_1) == 0x000100, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_GetForwardVector_ReturnValue) == 0x000118, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000130, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_GetOwner_ReturnValue) == 0x000148, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000150, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_IsValid_ReturnValue) == 0x000168, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Add_VectorVector_ReturnValue) == 0x000170, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Multiply_VectorVector_ReturnValue_2) == 0x000188, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Multiply_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001A0, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0001B8, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_MakeVector2D_Y_ImplicitCast) == 0x0001D0, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_MakeVector2D_Y_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast) == 0x0001D8, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_MakeVector2D_X_ImplicitCast) == 0x0001E0, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_MakeVector2D_X_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData, CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast_1) == 0x0001E8, "Member 'BP_PlayerMoveableComponent_C_BP_DebugVisualizeLocomotionInputData::CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast_1' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_GetCurInputContext
// 0x00B8 (0x00B8 - 0x0000)
struct BP_PlayerMoveableComponent_C_BP_GetCurInputContext final
{
public:
	struct FRMInputContext                        BP_CurRMInputContext;                              // 0x0000(0x00B8)(Parm, OutParm)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BP_GetCurInputContext) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_BP_GetCurInputContext");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BP_GetCurInputContext) == 0x0000B8, "Wrong size on BP_PlayerMoveableComponent_C_BP_GetCurInputContext");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_GetCurInputContext, BP_CurRMInputContext) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BP_GetCurInputContext::BP_CurRMInputContext' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_GetCurrentActiveMovementMode
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMoveableComponent_C_BP_GetCurrentActiveMovementMode final
{
public:
	EPlayerGamePlayMovementMode                   Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BP_GetCurrentActiveMovementMode) == 0x000001, "Wrong alignment on BP_PlayerMoveableComponent_C_BP_GetCurrentActiveMovementMode");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BP_GetCurrentActiveMovementMode) == 0x000001, "Wrong size on BP_PlayerMoveableComponent_C_BP_GetCurrentActiveMovementMode");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_GetCurrentActiveMovementMode, Ret) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BP_GetCurrentActiveMovementMode::Ret' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_OnCharacterMovementModeChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_PlayerMoveableComponent_C_BP_OnCharacterMovementModeChanged final
{
public:
	EMovementMode                                 PrevMovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PreviousCustomMode;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BP_OnCharacterMovementModeChanged) == 0x000001, "Wrong alignment on BP_PlayerMoveableComponent_C_BP_OnCharacterMovementModeChanged");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BP_OnCharacterMovementModeChanged) == 0x000002, "Wrong size on BP_PlayerMoveableComponent_C_BP_OnCharacterMovementModeChanged");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_OnCharacterMovementModeChanged, PrevMovementMode) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BP_OnCharacterMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_OnCharacterMovementModeChanged, PreviousCustomMode) == 0x000001, "Member 'BP_PlayerMoveableComponent_C_BP_OnCharacterMovementModeChanged::PreviousCustomMode' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_OnX6CharacterPossessed
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerMoveableComponent_C_BP_OnX6CharacterPossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BP_OnX6CharacterPossessed) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_BP_OnX6CharacterPossessed");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BP_OnX6CharacterPossessed) == 0x000008, "Wrong size on BP_PlayerMoveableComponent_C_BP_OnX6CharacterPossessed");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_OnX6CharacterPossessed, NewController) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BP_OnX6CharacterPossessed::NewController' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_OnX6CharacterUnPossessed
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerMoveableComponent_C_BP_OnX6CharacterUnPossessed final
{
public:
	class AController*                            PreviousController;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BP_OnX6CharacterUnPossessed) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_BP_OnX6CharacterUnPossessed");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BP_OnX6CharacterUnPossessed) == 0x000008, "Wrong size on BP_PlayerMoveableComponent_C_BP_OnX6CharacterUnPossessed");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_OnX6CharacterUnPossessed, PreviousController) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BP_OnX6CharacterUnPossessed::PreviousController' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BP_Public_SwitchNikkiGamePlayMovementMode
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMoveableComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode final
{
public:
	EPlayerGamePlayMovementMode                   NewGamePlayMovementMode;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode) == 0x000001, "Wrong alignment on BP_PlayerMoveableComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode) == 0x000001, "Wrong size on BP_PlayerMoveableComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode, NewGamePlayMovementMode) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BP_Public_SwitchNikkiGamePlayMovementMode::NewGamePlayMovementMode' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_BalanceBeamStates
// 0x0003 (0x0003 - 0x0000)
struct BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates final
{
public:
	bool                                          CanMoveOnValidInput;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnterTowardSideOfBeam;                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCurInputValid;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates) == 0x000001, "Wrong alignment on BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates) == 0x000003, "Wrong size on BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates, CanMoveOnValidInput) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates::CanMoveOnValidInput' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates, IsEnterTowardSideOfBeam) == 0x000001, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates::IsEnterTowardSideOfBeam' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates, IsCurInputValid) == 0x000002, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_BalanceBeamStates::IsCurInputValid' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_ConfigData
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerMoveableComponent_C_BPI_Get_ConfigData final
{
public:
	double                                        WalkSpeed;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RunSpeed;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SprintSpeed;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BPI_Get_ConfigData) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_BPI_Get_ConfigData");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BPI_Get_ConfigData) == 0x000018, "Wrong size on BP_PlayerMoveableComponent_C_BPI_Get_ConfigData");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_ConfigData, WalkSpeed) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_ConfigData::WalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_ConfigData, RunSpeed) == 0x000008, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_ConfigData::RunSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_ConfigData, SprintSpeed) == 0x000010, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_ConfigData::SprintSpeed' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_CurrentGroundStates
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates final
{
public:
	EMovementMode                                 PawnMovementMode;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        AllowedGait;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerMovementScenarios                      MovementScenario;                                  // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDeviceKeyType                           CurInputDeviceKeyType;                             // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates) == 0x000001, "Wrong alignment on BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates) == 0x000004, "Wrong size on BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates, PawnMovementMode) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates::PawnMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates, AllowedGait) == 0x000001, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates::AllowedGait' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates, MovementScenario) == 0x000002, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates::MovementScenario' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates, CurInputDeviceKeyType) == 0x000003, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_CurrentGroundStates::CurInputDeviceKeyType' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_EssentialValues
// 0x0058 (0x0058 - 0x0000)
struct BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InCurrentAcceleration;                             // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InMaxAcceleration;                                 // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InTurnAroundAngle;                                 // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InSlopeAngle;                                      // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InStartTurnAroundAngle;                            // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InCurConfigMaxSpeed;                               // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues) == 0x000058, "Wrong size on BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues, InVelocity) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues::InVelocity' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues, InCurrentAcceleration) == 0x000018, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues::InCurrentAcceleration' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues, InMaxAcceleration) == 0x000030, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues::InMaxAcceleration' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues, InTurnAroundAngle) == 0x000038, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues::InTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues, InSlopeAngle) == 0x000040, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues::InSlopeAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues, InStartTurnAroundAngle) == 0x000048, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues::InStartTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues, InCurConfigMaxSpeed) == 0x000050, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_EssentialValues::InCurConfigMaxSpeed' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_MaxSpeedValues
// 0x0018 (0x0018 - 0x0000)
struct BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues final
{
public:
	double                                        CurMinAnalogWalkSpeed;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurConfigMaxSpeed;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurActualMaxSpeed;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues) == 0x000018, "Wrong size on BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues, CurMinAnalogWalkSpeed) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues::CurMinAnalogWalkSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues, CurConfigMaxSpeed) == 0x000008, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues::CurConfigMaxSpeed' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues, CurActualMaxSpeed) == 0x000010, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_MaxSpeedValues::CurActualMaxSpeed' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_Get_PlayerStates
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMoveableComponent_C_BPI_Get_PlayerStates final
{
public:
	bool                                          IsInState_AimMode;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BPI_Get_PlayerStates) == 0x000001, "Wrong alignment on BP_PlayerMoveableComponent_C_BPI_Get_PlayerStates");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BPI_Get_PlayerStates) == 0x000001, "Wrong size on BP_PlayerMoveableComponent_C_BPI_Get_PlayerStates");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_Get_PlayerStates, IsInState_AimMode) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BPI_Get_PlayerStates::IsInState_AimMode' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_OnCharacterMovementModeChanged
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged final
{
public:
	EMovementMode                                 PrevMovementMode;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 NewMovementMode;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PrevCustomMode;                                    // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NewCustomMode;                                     // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged) == 0x000001, "Wrong alignment on BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged) == 0x000004, "Wrong size on BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged, PrevMovementMode) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged, NewMovementMode) == 0x000001, "Member 'BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged::NewMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged, PrevCustomMode) == 0x000002, "Member 'BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged::PrevCustomMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged, NewCustomMode) == 0x000003, "Member 'BP_PlayerMoveableComponent_C_BPI_OnCharacterMovementModeChanged::NewCustomMode' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_OnRotateCameraInput
// 0x0020 (0x0020 - 0x0000)
struct BP_PlayerMoveableComponent_C_BPI_OnRotateCameraInput final
{
public:
	struct FVector                                InputVector;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDeviceKeyType                           DeviceType;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BPI_OnRotateCameraInput) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_BPI_OnRotateCameraInput");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BPI_OnRotateCameraInput) == 0x000020, "Wrong size on BP_PlayerMoveableComponent_C_BPI_OnRotateCameraInput");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_OnRotateCameraInput, InputVector) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BPI_OnRotateCameraInput::InputVector' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_OnRotateCameraInput, DeviceType) == 0x000018, "Member 'BP_PlayerMoveableComponent_C_BPI_OnRotateCameraInput::DeviceType' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_OnSelfControlledByPlayer
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerMoveableComponent_C_BPI_OnSelfControlledByPlayer final
{
public:
	class APawn*                                  PlayerPawn;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BPI_OnSelfControlledByPlayer) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_BPI_OnSelfControlledByPlayer");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BPI_OnSelfControlledByPlayer) == 0x000008, "Wrong size on BP_PlayerMoveableComponent_C_BPI_OnSelfControlledByPlayer");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_OnSelfControlledByPlayer, PlayerPawn) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BPI_OnSelfControlledByPlayer::PlayerPawn' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.BPI_SetPlayerToControlActor
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerMoveableComponent_C_BPI_SetPlayerToControlActor final
{
public:
	class AActor*                                 ActorToControl;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Controlled;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_BPI_SetPlayerToControlActor) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_BPI_SetPlayerToControlActor");
static_assert(sizeof(BP_PlayerMoveableComponent_C_BPI_SetPlayerToControlActor) == 0x000010, "Wrong size on BP_PlayerMoveableComponent_C_BPI_SetPlayerToControlActor");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_SetPlayerToControlActor, ActorToControl) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_BPI_SetPlayerToControlActor::ActorToControl' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_BPI_SetPlayerToControlActor, Controlled) == 0x000008, "Member 'BP_PlayerMoveableComponent_C_BPI_SetPlayerToControlActor::Controlled' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.ExecuteUbergraph_BP_PlayerMoveableComponent
// 0x0050 (0x0050 - 0x0000)
struct BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PressedOrRelease_2;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PressedOrRelease_1;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_Event_PrevMovementMode;                     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_Event_NewMovementMode;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_PrevCustomMode;                       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Event_NewCustomMode;                        // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_InputVector;                          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDeviceKeyType                           K2Node_Event_DeviceType;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PressOrRelease;                       // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PressedOrRelease;                     // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_AxisValue_1;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_AxisValue;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_PlayerPawn;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BP_DebugVisualizeLocomotionInputData_DeltaSeconds_ImplicitCast; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent");
static_assert(sizeof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent) == 0x000050, "Wrong size on BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, EntryPoint) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_PressedOrRelease_2) == 0x000008, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_PressedOrRelease_2' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_PressedOrRelease_1) == 0x000009, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_PressedOrRelease_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_PrevMovementMode) == 0x00000A, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_NewMovementMode) == 0x00000B, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_NewMovementMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_PrevCustomMode) == 0x00000C, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_PrevCustomMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_NewCustomMode) == 0x00000D, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_NewCustomMode' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_InputVector) == 0x000010, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_InputVector' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_DeviceType) == 0x000028, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_DeviceType' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_PressOrRelease) == 0x000029, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_PressOrRelease' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_PressedOrRelease) == 0x00002A, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_PressedOrRelease' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_AxisValue_1) == 0x000030, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_AxisValue_1' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_AxisValue) == 0x000038, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, K2Node_Event_PlayerPawn) == 0x000040, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::K2Node_Event_PlayerPawn' has a wrong offset!");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent, CallFunc_BP_DebugVisualizeLocomotionInputData_DeltaSeconds_ImplicitCast) == 0x000048, "Member 'BP_PlayerMoveableComponent_C_ExecuteUbergraph_BP_PlayerMoveableComponent::CallFunc_BP_DebugVisualizeLocomotionInputData_DeltaSeconds_ImplicitCast' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.InputAction_Crash
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMoveableComponent_C_InputAction_Crash final
{
public:
	bool                                          PressedOrRelease;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_InputAction_Crash) == 0x000001, "Wrong alignment on BP_PlayerMoveableComponent_C_InputAction_Crash");
static_assert(sizeof(BP_PlayerMoveableComponent_C_InputAction_Crash) == 0x000001, "Wrong size on BP_PlayerMoveableComponent_C_InputAction_Crash");
static_assert(offsetof(BP_PlayerMoveableComponent_C_InputAction_Crash, PressedOrRelease) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_InputAction_Crash::PressedOrRelease' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.InputAction_Jump
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMoveableComponent_C_InputAction_Jump final
{
public:
	bool                                          PressedOrRelease;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_InputAction_Jump) == 0x000001, "Wrong alignment on BP_PlayerMoveableComponent_C_InputAction_Jump");
static_assert(sizeof(BP_PlayerMoveableComponent_C_InputAction_Jump) == 0x000001, "Wrong size on BP_PlayerMoveableComponent_C_InputAction_Jump");
static_assert(offsetof(BP_PlayerMoveableComponent_C_InputAction_Jump, PressedOrRelease) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_InputAction_Jump::PressedOrRelease' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.InputAction_Sprint
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMoveableComponent_C_InputAction_Sprint final
{
public:
	bool                                          PressedOrRelease;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_InputAction_Sprint) == 0x000001, "Wrong alignment on BP_PlayerMoveableComponent_C_InputAction_Sprint");
static_assert(sizeof(BP_PlayerMoveableComponent_C_InputAction_Sprint) == 0x000001, "Wrong size on BP_PlayerMoveableComponent_C_InputAction_Sprint");
static_assert(offsetof(BP_PlayerMoveableComponent_C_InputAction_Sprint, PressedOrRelease) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_InputAction_Sprint::PressedOrRelease' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.InputAction_Walk
// 0x0001 (0x0001 - 0x0000)
struct BP_PlayerMoveableComponent_C_InputAction_Walk final
{
public:
	bool                                          PressOrRelease;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_InputAction_Walk) == 0x000001, "Wrong alignment on BP_PlayerMoveableComponent_C_InputAction_Walk");
static_assert(sizeof(BP_PlayerMoveableComponent_C_InputAction_Walk) == 0x000001, "Wrong size on BP_PlayerMoveableComponent_C_InputAction_Walk");
static_assert(offsetof(BP_PlayerMoveableComponent_C_InputAction_Walk, PressOrRelease) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_InputAction_Walk::PressOrRelease' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.OnMovementMoveXAxisAction
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerMoveableComponent_C_OnMovementMoveXAxisAction final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_OnMovementMoveXAxisAction) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_OnMovementMoveXAxisAction");
static_assert(sizeof(BP_PlayerMoveableComponent_C_OnMovementMoveXAxisAction) == 0x000008, "Wrong size on BP_PlayerMoveableComponent_C_OnMovementMoveXAxisAction");
static_assert(offsetof(BP_PlayerMoveableComponent_C_OnMovementMoveXAxisAction, AxisValue) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_OnMovementMoveXAxisAction::AxisValue' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.OnMovementMoveYAxisAction
// 0x0008 (0x0008 - 0x0000)
struct BP_PlayerMoveableComponent_C_OnMovementMoveYAxisAction final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_OnMovementMoveYAxisAction) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_OnMovementMoveYAxisAction");
static_assert(sizeof(BP_PlayerMoveableComponent_C_OnMovementMoveYAxisAction) == 0x000008, "Wrong size on BP_PlayerMoveableComponent_C_OnMovementMoveYAxisAction");
static_assert(offsetof(BP_PlayerMoveableComponent_C_OnMovementMoveYAxisAction, AxisValue) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_OnMovementMoveYAxisAction::AxisValue' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PlayerMoveableComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PlayerMoveableComponent_C_ReceiveTick");
static_assert(sizeof(BP_PlayerMoveableComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PlayerMoveableComponent_C_ReceiveTick");
static_assert(offsetof(BP_PlayerMoveableComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_PlayerMoveableComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_PlayerMoveableComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_PlayerMoveableComponent_C_GetModuleName");
static_assert(sizeof(BP_PlayerMoveableComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_PlayerMoveableComponent_C_GetModuleName");
static_assert(offsetof(BP_PlayerMoveableComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_PlayerMoveableComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

