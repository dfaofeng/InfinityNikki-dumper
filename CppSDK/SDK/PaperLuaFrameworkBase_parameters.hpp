#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperLuaFrameworkBase

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "PaperLuaFrameworkBase_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PaperLuaFrameworkBase.BinMMapMgr.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct BinMMapMgr_GetInstance final
{
public:
	class UBinMMapMgr*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BinMMapMgr_GetInstance) == 0x000008, "Wrong alignment on BinMMapMgr_GetInstance");
static_assert(sizeof(BinMMapMgr_GetInstance) == 0x000008, "Wrong size on BinMMapMgr_GetInstance");
static_assert(offsetof(BinMMapMgr_GetInstance, ReturnValue) == 0x000000, "Member 'BinMMapMgr_GetInstance::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.BinMMapMgr.AddBuffer
// 0x0010 (0x0010 - 0x0000)
struct BinMMapMgr_AddBuffer final
{
public:
	class FString                                 InBinName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BinMMapMgr_AddBuffer) == 0x000008, "Wrong alignment on BinMMapMgr_AddBuffer");
static_assert(sizeof(BinMMapMgr_AddBuffer) == 0x000010, "Wrong size on BinMMapMgr_AddBuffer");
static_assert(offsetof(BinMMapMgr_AddBuffer, InBinName) == 0x000000, "Member 'BinMMapMgr_AddBuffer::InBinName' has a wrong offset!");

// Function PaperLuaFrameworkBase.BinMMapMgr.SetMMapTag
// 0x0001 (0x0001 - 0x0000)
struct BinMMapMgr_SetMMapTag final
{
public:
	bool                                          InMMapTag;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BinMMapMgr_SetMMapTag) == 0x000001, "Wrong alignment on BinMMapMgr_SetMMapTag");
static_assert(sizeof(BinMMapMgr_SetMMapTag) == 0x000001, "Wrong size on BinMMapMgr_SetMMapTag");
static_assert(offsetof(BinMMapMgr_SetMMapTag, InMMapTag) == 0x000000, "Member 'BinMMapMgr_SetMMapTag::InMMapTag' has a wrong offset!");

// Function PaperLuaFrameworkBase.BinMMapMgr.SetRootDir
// 0x0010 (0x0010 - 0x0000)
struct BinMMapMgr_SetRootDir final
{
public:
	class FString                                 InRootDir;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BinMMapMgr_SetRootDir) == 0x000008, "Wrong alignment on BinMMapMgr_SetRootDir");
static_assert(sizeof(BinMMapMgr_SetRootDir) == 0x000010, "Wrong size on BinMMapMgr_SetRootDir");
static_assert(offsetof(BinMMapMgr_SetRootDir, InRootDir) == 0x000000, "Member 'BinMMapMgr_SetRootDir::InRootDir' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperAssetManager.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct PaperAssetManager_GetInstance final
{
public:
	class UPaperAssetManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAssetManager_GetInstance) == 0x000008, "Wrong alignment on PaperAssetManager_GetInstance");
static_assert(sizeof(PaperAssetManager_GetInstance) == 0x000008, "Wrong size on PaperAssetManager_GetInstance");
static_assert(offsetof(PaperAssetManager_GetInstance, ReturnValue) == 0x000000, "Member 'PaperAssetManager_GetInstance::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperAssetManager.AsyncLoadPrimaryAssetEx
// 0x0018 (0x0018 - 0x0000)
struct PaperAssetManager_AsyncLoadPrimaryAssetEx final
{
public:
	TArray<class FString>                         InAssetsToLoad;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InTimeLimit;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperAssetManager_AsyncLoadPrimaryAssetEx) == 0x000008, "Wrong alignment on PaperAssetManager_AsyncLoadPrimaryAssetEx");
static_assert(sizeof(PaperAssetManager_AsyncLoadPrimaryAssetEx) == 0x000018, "Wrong size on PaperAssetManager_AsyncLoadPrimaryAssetEx");
static_assert(offsetof(PaperAssetManager_AsyncLoadPrimaryAssetEx, InAssetsToLoad) == 0x000000, "Member 'PaperAssetManager_AsyncLoadPrimaryAssetEx::InAssetsToLoad' has a wrong offset!");
static_assert(offsetof(PaperAssetManager_AsyncLoadPrimaryAssetEx, InTimeLimit) == 0x000010, "Member 'PaperAssetManager_AsyncLoadPrimaryAssetEx::InTimeLimit' has a wrong offset!");
static_assert(offsetof(PaperAssetManager_AsyncLoadPrimaryAssetEx, ReturnValue) == 0x000014, "Member 'PaperAssetManager_AsyncLoadPrimaryAssetEx::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperAssetManager.CancelAsyncLoadingWithAsyncID
// 0x0004 (0x0004 - 0x0000)
struct PaperAssetManager_CancelAsyncLoadingWithAsyncID final
{
public:
	int32                                         AsyncId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAssetManager_CancelAsyncLoadingWithAsyncID) == 0x000004, "Wrong alignment on PaperAssetManager_CancelAsyncLoadingWithAsyncID");
static_assert(sizeof(PaperAssetManager_CancelAsyncLoadingWithAsyncID) == 0x000004, "Wrong size on PaperAssetManager_CancelAsyncLoadingWithAsyncID");
static_assert(offsetof(PaperAssetManager_CancelAsyncLoadingWithAsyncID, AsyncId) == 0x000000, "Member 'PaperAssetManager_CancelAsyncLoadingWithAsyncID::AsyncId' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperAssetManager.GetAsyncLoadingProgessWithAsyncID
// 0x0008 (0x0008 - 0x0000)
struct PaperAssetManager_GetAsyncLoadingProgessWithAsyncID final
{
public:
	int32                                         AsyncId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAssetManager_GetAsyncLoadingProgessWithAsyncID) == 0x000004, "Wrong alignment on PaperAssetManager_GetAsyncLoadingProgessWithAsyncID");
static_assert(sizeof(PaperAssetManager_GetAsyncLoadingProgessWithAsyncID) == 0x000008, "Wrong size on PaperAssetManager_GetAsyncLoadingProgessWithAsyncID");
static_assert(offsetof(PaperAssetManager_GetAsyncLoadingProgessWithAsyncID, AsyncId) == 0x000000, "Member 'PaperAssetManager_GetAsyncLoadingProgessWithAsyncID::AsyncId' has a wrong offset!");
static_assert(offsetof(PaperAssetManager_GetAsyncLoadingProgessWithAsyncID, ReturnValue) == 0x000004, "Member 'PaperAssetManager_GetAsyncLoadingProgessWithAsyncID::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperAssetManager.GetCurrentAsyncID
// 0x0004 (0x0004 - 0x0000)
struct PaperAssetManager_GetCurrentAsyncID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAssetManager_GetCurrentAsyncID) == 0x000004, "Wrong alignment on PaperAssetManager_GetCurrentAsyncID");
static_assert(sizeof(PaperAssetManager_GetCurrentAsyncID) == 0x000004, "Wrong size on PaperAssetManager_GetCurrentAsyncID");
static_assert(offsetof(PaperAssetManager_GetCurrentAsyncID, ReturnValue) == 0x000000, "Member 'PaperAssetManager_GetCurrentAsyncID::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperAssetManager.NormalizeAssetPathAndResolve
// 0x0018 (0x0018 - 0x0000)
struct PaperAssetManager_NormalizeAssetPathAndResolve final
{
public:
	class FString                                 InAssetPath;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAssetManager_NormalizeAssetPathAndResolve) == 0x000008, "Wrong alignment on PaperAssetManager_NormalizeAssetPathAndResolve");
static_assert(sizeof(PaperAssetManager_NormalizeAssetPathAndResolve) == 0x000018, "Wrong size on PaperAssetManager_NormalizeAssetPathAndResolve");
static_assert(offsetof(PaperAssetManager_NormalizeAssetPathAndResolve, InAssetPath) == 0x000000, "Member 'PaperAssetManager_NormalizeAssetPathAndResolve::InAssetPath' has a wrong offset!");
static_assert(offsetof(PaperAssetManager_NormalizeAssetPathAndResolve, ReturnValue) == 0x000010, "Member 'PaperAssetManager_NormalizeAssetPathAndResolve::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperAssetManager.SyncLoadPrimaryAssetEx
// 0x0018 (0x0018 - 0x0000)
struct PaperAssetManager_SyncLoadPrimaryAssetEx final
{
public:
	TArray<class FString>                         InAssetsToLoad;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InTimeLimit;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperAssetManager_SyncLoadPrimaryAssetEx) == 0x000008, "Wrong alignment on PaperAssetManager_SyncLoadPrimaryAssetEx");
static_assert(sizeof(PaperAssetManager_SyncLoadPrimaryAssetEx) == 0x000018, "Wrong size on PaperAssetManager_SyncLoadPrimaryAssetEx");
static_assert(offsetof(PaperAssetManager_SyncLoadPrimaryAssetEx, InAssetsToLoad) == 0x000000, "Member 'PaperAssetManager_SyncLoadPrimaryAssetEx::InAssetsToLoad' has a wrong offset!");
static_assert(offsetof(PaperAssetManager_SyncLoadPrimaryAssetEx, InTimeLimit) == 0x000010, "Member 'PaperAssetManager_SyncLoadPrimaryAssetEx::InTimeLimit' has a wrong offset!");
static_assert(offsetof(PaperAssetManager_SyncLoadPrimaryAssetEx, ReturnValue) == 0x000014, "Member 'PaperAssetManager_SyncLoadPrimaryAssetEx::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperConsoleManager.RegisterLuaCommand
// 0x0020 (0x0020 - 0x0000)
struct PaperConsoleManager_RegisterLuaCommand final
{
public:
	class FString                                 Cmd;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Help;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperConsoleManager_RegisterLuaCommand) == 0x000008, "Wrong alignment on PaperConsoleManager_RegisterLuaCommand");
static_assert(sizeof(PaperConsoleManager_RegisterLuaCommand) == 0x000020, "Wrong size on PaperConsoleManager_RegisterLuaCommand");
static_assert(offsetof(PaperConsoleManager_RegisterLuaCommand, Cmd) == 0x000000, "Member 'PaperConsoleManager_RegisterLuaCommand::Cmd' has a wrong offset!");
static_assert(offsetof(PaperConsoleManager_RegisterLuaCommand, Help) == 0x000010, "Member 'PaperConsoleManager_RegisterLuaCommand::Help' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperConsoleManager.UnregisterLuaCommand
// 0x0010 (0x0010 - 0x0000)
struct PaperConsoleManager_UnregisterLuaCommand final
{
public:
	class FString                                 Cmd;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperConsoleManager_UnregisterLuaCommand) == 0x000008, "Wrong alignment on PaperConsoleManager_UnregisterLuaCommand");
static_assert(sizeof(PaperConsoleManager_UnregisterLuaCommand) == 0x000010, "Wrong size on PaperConsoleManager_UnregisterLuaCommand");
static_assert(offsetof(PaperConsoleManager_UnregisterLuaCommand, Cmd) == 0x000000, "Member 'PaperConsoleManager_UnregisterLuaCommand::Cmd' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.BindAnalogInputEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_BindAnalogInputEvent final
{
public:
	TDelegate<void(const struct FAnalogInputEvent& AnalogInputEvent)> InOnAnalogInput;               // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_BindAnalogInputEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_BindAnalogInputEvent");
static_assert(sizeof(PaperInputProcessorHelper_BindAnalogInputEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_BindAnalogInputEvent");
static_assert(offsetof(PaperInputProcessorHelper_BindAnalogInputEvent, InOnAnalogInput) == 0x000000, "Member 'PaperInputProcessorHelper_BindAnalogInputEvent::InOnAnalogInput' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_BindAnalogInputEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_BindAnalogInputEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.BindGestureEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_BindGestureEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnGesture;                             // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_BindGestureEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_BindGestureEvent");
static_assert(sizeof(PaperInputProcessorHelper_BindGestureEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_BindGestureEvent");
static_assert(offsetof(PaperInputProcessorHelper_BindGestureEvent, InOnGesture) == 0x000000, "Member 'PaperInputProcessorHelper_BindGestureEvent::InOnGesture' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_BindGestureEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_BindGestureEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.BindInputDeviceEvent
// 0x0010 (0x0010 - 0x0000)
struct PaperInputProcessorHelper_BindInputDeviceEvent final
{
public:
	TDelegate<void(EPaperInputDeviceKeyType InputDeviceKeyType)> InOnInputDevice;                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_BindInputDeviceEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_BindInputDeviceEvent");
static_assert(sizeof(PaperInputProcessorHelper_BindInputDeviceEvent) == 0x000010, "Wrong size on PaperInputProcessorHelper_BindInputDeviceEvent");
static_assert(offsetof(PaperInputProcessorHelper_BindInputDeviceEvent, InOnInputDevice) == 0x000000, "Member 'PaperInputProcessorHelper_BindInputDeviceEvent::InOnInputDevice' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.BindKeyDownEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_BindKeyDownEvent final
{
public:
	TDelegate<void(const struct FKeyEvent& KeyEvent)> InOnKeyDown;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_BindKeyDownEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_BindKeyDownEvent");
static_assert(sizeof(PaperInputProcessorHelper_BindKeyDownEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_BindKeyDownEvent");
static_assert(offsetof(PaperInputProcessorHelper_BindKeyDownEvent, InOnKeyDown) == 0x000000, "Member 'PaperInputProcessorHelper_BindKeyDownEvent::InOnKeyDown' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_BindKeyDownEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_BindKeyDownEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.BindKeyUpEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_BindKeyUpEvent final
{
public:
	TDelegate<void(const struct FKeyEvent& KeyEvent)> InOnKeyUp;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_BindKeyUpEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_BindKeyUpEvent");
static_assert(sizeof(PaperInputProcessorHelper_BindKeyUpEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_BindKeyUpEvent");
static_assert(offsetof(PaperInputProcessorHelper_BindKeyUpEvent, InOnKeyUp) == 0x000000, "Member 'PaperInputProcessorHelper_BindKeyUpEvent::InOnKeyUp' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_BindKeyUpEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_BindKeyUpEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.BindMotionDetectedEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_BindMotionDetectedEvent final
{
public:
	TDelegate<void(const struct FMotionEvent& MotionEvent)> InOnMotionDetected;                      // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_BindMotionDetectedEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_BindMotionDetectedEvent");
static_assert(sizeof(PaperInputProcessorHelper_BindMotionDetectedEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_BindMotionDetectedEvent");
static_assert(offsetof(PaperInputProcessorHelper_BindMotionDetectedEvent, InOnMotionDetected) == 0x000000, "Member 'PaperInputProcessorHelper_BindMotionDetectedEvent::InOnMotionDetected' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_BindMotionDetectedEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_BindMotionDetectedEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.BindMouseButtonDoubleClickEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_BindMouseButtonDoubleClickEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnMouseButtonDoubleClick;              // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_BindMouseButtonDoubleClickEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_BindMouseButtonDoubleClickEvent");
static_assert(sizeof(PaperInputProcessorHelper_BindMouseButtonDoubleClickEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_BindMouseButtonDoubleClickEvent");
static_assert(offsetof(PaperInputProcessorHelper_BindMouseButtonDoubleClickEvent, InOnMouseButtonDoubleClick) == 0x000000, "Member 'PaperInputProcessorHelper_BindMouseButtonDoubleClickEvent::InOnMouseButtonDoubleClick' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_BindMouseButtonDoubleClickEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_BindMouseButtonDoubleClickEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.BindMouseButtonDownEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_BindMouseButtonDownEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnMouseButtonDown;                     // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_BindMouseButtonDownEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_BindMouseButtonDownEvent");
static_assert(sizeof(PaperInputProcessorHelper_BindMouseButtonDownEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_BindMouseButtonDownEvent");
static_assert(offsetof(PaperInputProcessorHelper_BindMouseButtonDownEvent, InOnMouseButtonDown) == 0x000000, "Member 'PaperInputProcessorHelper_BindMouseButtonDownEvent::InOnMouseButtonDown' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_BindMouseButtonDownEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_BindMouseButtonDownEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.BindMouseButtonUpEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_BindMouseButtonUpEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnMouseButtonUp;                       // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_BindMouseButtonUpEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_BindMouseButtonUpEvent");
static_assert(sizeof(PaperInputProcessorHelper_BindMouseButtonUpEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_BindMouseButtonUpEvent");
static_assert(offsetof(PaperInputProcessorHelper_BindMouseButtonUpEvent, InOnMouseButtonUp) == 0x000000, "Member 'PaperInputProcessorHelper_BindMouseButtonUpEvent::InOnMouseButtonUp' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_BindMouseButtonUpEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_BindMouseButtonUpEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.BindMouseMoveEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_BindMouseMoveEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnMouseMove;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_BindMouseMoveEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_BindMouseMoveEvent");
static_assert(sizeof(PaperInputProcessorHelper_BindMouseMoveEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_BindMouseMoveEvent");
static_assert(offsetof(PaperInputProcessorHelper_BindMouseMoveEvent, InOnMouseMove) == 0x000000, "Member 'PaperInputProcessorHelper_BindMouseMoveEvent::InOnMouseMove' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_BindMouseMoveEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_BindMouseMoveEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.BindMouseWheelEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_BindMouseWheelEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnMouseWheel;                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_BindMouseWheelEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_BindMouseWheelEvent");
static_assert(sizeof(PaperInputProcessorHelper_BindMouseWheelEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_BindMouseWheelEvent");
static_assert(offsetof(PaperInputProcessorHelper_BindMouseWheelEvent, InOnMouseWheel) == 0x000000, "Member 'PaperInputProcessorHelper_BindMouseWheelEvent::InOnMouseWheel' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_BindMouseWheelEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_BindMouseWheelEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.GetCurInputDeviceKeyType
// 0x0001 (0x0001 - 0x0000)
struct PaperInputProcessorHelper_GetCurInputDeviceKeyType final
{
public:
	EPaperInputDeviceKeyType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_GetCurInputDeviceKeyType) == 0x000001, "Wrong alignment on PaperInputProcessorHelper_GetCurInputDeviceKeyType");
static_assert(sizeof(PaperInputProcessorHelper_GetCurInputDeviceKeyType) == 0x000001, "Wrong size on PaperInputProcessorHelper_GetCurInputDeviceKeyType");
static_assert(offsetof(PaperInputProcessorHelper_GetCurInputDeviceKeyType, ReturnValue) == 0x000000, "Member 'PaperInputProcessorHelper_GetCurInputDeviceKeyType::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.GetMouseResponseDisabled
// 0x0001 (0x0001 - 0x0000)
struct PaperInputProcessorHelper_GetMouseResponseDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_GetMouseResponseDisabled) == 0x000001, "Wrong alignment on PaperInputProcessorHelper_GetMouseResponseDisabled");
static_assert(sizeof(PaperInputProcessorHelper_GetMouseResponseDisabled) == 0x000001, "Wrong size on PaperInputProcessorHelper_GetMouseResponseDisabled");
static_assert(offsetof(PaperInputProcessorHelper_GetMouseResponseDisabled, ReturnValue) == 0x000000, "Member 'PaperInputProcessorHelper_GetMouseResponseDisabled::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.SetInputDeviceIgnoreValue
// 0x0004 (0x0004 - 0x0000)
struct PaperInputProcessorHelper_SetInputDeviceIgnoreValue final
{
public:
	float                                         InInputDeviceIgnoreValue;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_SetInputDeviceIgnoreValue) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_SetInputDeviceIgnoreValue");
static_assert(sizeof(PaperInputProcessorHelper_SetInputDeviceIgnoreValue) == 0x000004, "Wrong size on PaperInputProcessorHelper_SetInputDeviceIgnoreValue");
static_assert(offsetof(PaperInputProcessorHelper_SetInputDeviceIgnoreValue, InInputDeviceIgnoreValue) == 0x000000, "Member 'PaperInputProcessorHelper_SetInputDeviceIgnoreValue::InInputDeviceIgnoreValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.SetMouseResponseDisabled
// 0x0002 (0x0002 - 0x0000)
struct PaperInputProcessorHelper_SetMouseResponseDisabled final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_SetMouseResponseDisabled) == 0x000001, "Wrong alignment on PaperInputProcessorHelper_SetMouseResponseDisabled");
static_assert(sizeof(PaperInputProcessorHelper_SetMouseResponseDisabled) == 0x000002, "Wrong size on PaperInputProcessorHelper_SetMouseResponseDisabled");
static_assert(offsetof(PaperInputProcessorHelper_SetMouseResponseDisabled, bDisable) == 0x000000, "Member 'PaperInputProcessorHelper_SetMouseResponseDisabled::bDisable' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_SetMouseResponseDisabled, ReturnValue) == 0x000001, "Member 'PaperInputProcessorHelper_SetMouseResponseDisabled::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.UnbindAnalogInputEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_UnbindAnalogInputEvent final
{
public:
	TDelegate<void(const struct FAnalogInputEvent& AnalogInputEvent)> InOnAnalogInput;               // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_UnbindAnalogInputEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_UnbindAnalogInputEvent");
static_assert(sizeof(PaperInputProcessorHelper_UnbindAnalogInputEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_UnbindAnalogInputEvent");
static_assert(offsetof(PaperInputProcessorHelper_UnbindAnalogInputEvent, InOnAnalogInput) == 0x000000, "Member 'PaperInputProcessorHelper_UnbindAnalogInputEvent::InOnAnalogInput' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_UnbindAnalogInputEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_UnbindAnalogInputEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.UnbindGestureEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_UnbindGestureEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnGesture;                             // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_UnbindGestureEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_UnbindGestureEvent");
static_assert(sizeof(PaperInputProcessorHelper_UnbindGestureEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_UnbindGestureEvent");
static_assert(offsetof(PaperInputProcessorHelper_UnbindGestureEvent, InOnGesture) == 0x000000, "Member 'PaperInputProcessorHelper_UnbindGestureEvent::InOnGesture' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_UnbindGestureEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_UnbindGestureEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.UnbindInputDeviceEvent
// 0x0010 (0x0010 - 0x0000)
struct PaperInputProcessorHelper_UnbindInputDeviceEvent final
{
public:
	TDelegate<void(EPaperInputDeviceKeyType InputDeviceKeyType)> InOnInputDevice;                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_UnbindInputDeviceEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_UnbindInputDeviceEvent");
static_assert(sizeof(PaperInputProcessorHelper_UnbindInputDeviceEvent) == 0x000010, "Wrong size on PaperInputProcessorHelper_UnbindInputDeviceEvent");
static_assert(offsetof(PaperInputProcessorHelper_UnbindInputDeviceEvent, InOnInputDevice) == 0x000000, "Member 'PaperInputProcessorHelper_UnbindInputDeviceEvent::InOnInputDevice' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.UnbindKeyDownEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_UnbindKeyDownEvent final
{
public:
	TDelegate<void(const struct FKeyEvent& KeyEvent)> InOnKeyDown;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_UnbindKeyDownEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_UnbindKeyDownEvent");
static_assert(sizeof(PaperInputProcessorHelper_UnbindKeyDownEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_UnbindKeyDownEvent");
static_assert(offsetof(PaperInputProcessorHelper_UnbindKeyDownEvent, InOnKeyDown) == 0x000000, "Member 'PaperInputProcessorHelper_UnbindKeyDownEvent::InOnKeyDown' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_UnbindKeyDownEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_UnbindKeyDownEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.UnbindKeyUpEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_UnbindKeyUpEvent final
{
public:
	TDelegate<void(const struct FKeyEvent& KeyEvent)> InOnKeyUp;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_UnbindKeyUpEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_UnbindKeyUpEvent");
static_assert(sizeof(PaperInputProcessorHelper_UnbindKeyUpEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_UnbindKeyUpEvent");
static_assert(offsetof(PaperInputProcessorHelper_UnbindKeyUpEvent, InOnKeyUp) == 0x000000, "Member 'PaperInputProcessorHelper_UnbindKeyUpEvent::InOnKeyUp' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_UnbindKeyUpEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_UnbindKeyUpEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.UnbindMotionDetectedEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_UnbindMotionDetectedEvent final
{
public:
	TDelegate<void(const struct FMotionEvent& MotionEvent)> InOnMotionDetected;                      // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_UnbindMotionDetectedEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_UnbindMotionDetectedEvent");
static_assert(sizeof(PaperInputProcessorHelper_UnbindMotionDetectedEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_UnbindMotionDetectedEvent");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMotionDetectedEvent, InOnMotionDetected) == 0x000000, "Member 'PaperInputProcessorHelper_UnbindMotionDetectedEvent::InOnMotionDetected' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMotionDetectedEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_UnbindMotionDetectedEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.UnbindMouseButtonDoubleClickEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_UnbindMouseButtonDoubleClickEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnMouseButtonDoubleClick;              // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_UnbindMouseButtonDoubleClickEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_UnbindMouseButtonDoubleClickEvent");
static_assert(sizeof(PaperInputProcessorHelper_UnbindMouseButtonDoubleClickEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_UnbindMouseButtonDoubleClickEvent");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMouseButtonDoubleClickEvent, InOnMouseButtonDoubleClick) == 0x000000, "Member 'PaperInputProcessorHelper_UnbindMouseButtonDoubleClickEvent::InOnMouseButtonDoubleClick' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMouseButtonDoubleClickEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_UnbindMouseButtonDoubleClickEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.UnbindMouseButtonDownEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_UnbindMouseButtonDownEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnMouseButtonDown;                     // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_UnbindMouseButtonDownEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_UnbindMouseButtonDownEvent");
static_assert(sizeof(PaperInputProcessorHelper_UnbindMouseButtonDownEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_UnbindMouseButtonDownEvent");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMouseButtonDownEvent, InOnMouseButtonDown) == 0x000000, "Member 'PaperInputProcessorHelper_UnbindMouseButtonDownEvent::InOnMouseButtonDown' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMouseButtonDownEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_UnbindMouseButtonDownEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.UnbindMouseButtonUpEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_UnbindMouseButtonUpEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnMouseButtonUp;                       // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_UnbindMouseButtonUpEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_UnbindMouseButtonUpEvent");
static_assert(sizeof(PaperInputProcessorHelper_UnbindMouseButtonUpEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_UnbindMouseButtonUpEvent");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMouseButtonUpEvent, InOnMouseButtonUp) == 0x000000, "Member 'PaperInputProcessorHelper_UnbindMouseButtonUpEvent::InOnMouseButtonUp' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMouseButtonUpEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_UnbindMouseButtonUpEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.UnbindMouseMoveEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_UnbindMouseMoveEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnMouseMove;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_UnbindMouseMoveEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_UnbindMouseMoveEvent");
static_assert(sizeof(PaperInputProcessorHelper_UnbindMouseMoveEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_UnbindMouseMoveEvent");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMouseMoveEvent, InOnMouseMove) == 0x000000, "Member 'PaperInputProcessorHelper_UnbindMouseMoveEvent::InOnMouseMove' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMouseMoveEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_UnbindMouseMoveEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperInputProcessorHelper.UnbindMouseWheelEvent
// 0x0014 (0x0014 - 0x0000)
struct PaperInputProcessorHelper_UnbindMouseWheelEvent final
{
public:
	TDelegate<void(const struct FPointerEvent& MouseEvent)> InOnMouseWheel;                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPriority;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperInputProcessorHelper_UnbindMouseWheelEvent) == 0x000004, "Wrong alignment on PaperInputProcessorHelper_UnbindMouseWheelEvent");
static_assert(sizeof(PaperInputProcessorHelper_UnbindMouseWheelEvent) == 0x000014, "Wrong size on PaperInputProcessorHelper_UnbindMouseWheelEvent");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMouseWheelEvent, InOnMouseWheel) == 0x000000, "Member 'PaperInputProcessorHelper_UnbindMouseWheelEvent::InOnMouseWheel' has a wrong offset!");
static_assert(offsetof(PaperInputProcessorHelper_UnbindMouseWheelEvent, InPriority) == 0x000010, "Member 'PaperInputProcessorHelper_UnbindMouseWheelEvent::InPriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLevelMgr.ClearPersistentLevel
// 0x0010 (0x0010 - 0x0000)
struct PaperLevelMgr_ClearPersistentLevel final
{
public:
	class FString                                 LevelPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLevelMgr_ClearPersistentLevel) == 0x000008, "Wrong alignment on PaperLevelMgr_ClearPersistentLevel");
static_assert(sizeof(PaperLevelMgr_ClearPersistentLevel) == 0x000010, "Wrong size on PaperLevelMgr_ClearPersistentLevel");
static_assert(offsetof(PaperLevelMgr_ClearPersistentLevel, LevelPath) == 0x000000, "Member 'PaperLevelMgr_ClearPersistentLevel::LevelPath' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLevelMgr.DungeonTeleportPlayer
// 0x0020 (0x0020 - 0x0000)
struct PaperLevelMgr_DungeonTeleportPlayer final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLevelMgr_DungeonTeleportPlayer) == 0x000008, "Wrong alignment on PaperLevelMgr_DungeonTeleportPlayer");
static_assert(sizeof(PaperLevelMgr_DungeonTeleportPlayer) == 0x000020, "Wrong size on PaperLevelMgr_DungeonTeleportPlayer");
static_assert(offsetof(PaperLevelMgr_DungeonTeleportPlayer, TargetLocation) == 0x000000, "Member 'PaperLevelMgr_DungeonTeleportPlayer::TargetLocation' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_DungeonTeleportPlayer, ReturnValue) == 0x000018, "Member 'PaperLevelMgr_DungeonTeleportPlayer::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLevelMgr.GetCurrentWorldPath
// 0x0010 (0x0010 - 0x0000)
struct PaperLevelMgr_GetCurrentWorldPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLevelMgr_GetCurrentWorldPath) == 0x000008, "Wrong alignment on PaperLevelMgr_GetCurrentWorldPath");
static_assert(sizeof(PaperLevelMgr_GetCurrentWorldPath) == 0x000010, "Wrong size on PaperLevelMgr_GetCurrentWorldPath");
static_assert(offsetof(PaperLevelMgr_GetCurrentWorldPath, ReturnValue) == 0x000000, "Member 'PaperLevelMgr_GetCurrentWorldPath::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLevelMgr.GetLevelStreaming
// 0x0018 (0x0018 - 0x0000)
struct PaperLevelMgr_GetLevelStreaming final
{
public:
	class FString                                 LevelPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreaming*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLevelMgr_GetLevelStreaming) == 0x000008, "Wrong alignment on PaperLevelMgr_GetLevelStreaming");
static_assert(sizeof(PaperLevelMgr_GetLevelStreaming) == 0x000018, "Wrong size on PaperLevelMgr_GetLevelStreaming");
static_assert(offsetof(PaperLevelMgr_GetLevelStreaming, LevelPath) == 0x000000, "Member 'PaperLevelMgr_GetLevelStreaming::LevelPath' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_GetLevelStreaming, ReturnValue) == 0x000010, "Member 'PaperLevelMgr_GetLevelStreaming::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLevelMgr.LoadLevelToWorld
// 0x0048 (0x0048 - 0x0000)
struct PaperLevelMgr_LoadLevelToWorld final
{
public:
	class FString                                 LevelPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LoadLocation;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerPosition;                                    // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WithoutProgress;                                   // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0041(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLevelMgr_LoadLevelToWorld) == 0x000008, "Wrong alignment on PaperLevelMgr_LoadLevelToWorld");
static_assert(sizeof(PaperLevelMgr_LoadLevelToWorld) == 0x000048, "Wrong size on PaperLevelMgr_LoadLevelToWorld");
static_assert(offsetof(PaperLevelMgr_LoadLevelToWorld, LevelPath) == 0x000000, "Member 'PaperLevelMgr_LoadLevelToWorld::LevelPath' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_LoadLevelToWorld, LoadLocation) == 0x000010, "Member 'PaperLevelMgr_LoadLevelToWorld::LoadLocation' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_LoadLevelToWorld, PlayerPosition) == 0x000028, "Member 'PaperLevelMgr_LoadLevelToWorld::PlayerPosition' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_LoadLevelToWorld, WithoutProgress) == 0x000040, "Member 'PaperLevelMgr_LoadLevelToWorld::WithoutProgress' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_LoadLevelToWorld, ReturnValue) == 0x000041, "Member 'PaperLevelMgr_LoadLevelToWorld::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLevelMgr.LoadSubLevelToWorld
// 0x0030 (0x0030 - 0x0000)
struct PaperLevelMgr_LoadSubLevelToWorld final
{
public:
	class FString                                 SubLevelPath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LoadLocation;                                      // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLevelMgr_LoadSubLevelToWorld) == 0x000008, "Wrong alignment on PaperLevelMgr_LoadSubLevelToWorld");
static_assert(sizeof(PaperLevelMgr_LoadSubLevelToWorld) == 0x000030, "Wrong size on PaperLevelMgr_LoadSubLevelToWorld");
static_assert(offsetof(PaperLevelMgr_LoadSubLevelToWorld, SubLevelPath) == 0x000000, "Member 'PaperLevelMgr_LoadSubLevelToWorld::SubLevelPath' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_LoadSubLevelToWorld, LoadLocation) == 0x000010, "Member 'PaperLevelMgr_LoadSubLevelToWorld::LoadLocation' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_LoadSubLevelToWorld, ReturnValue) == 0x000028, "Member 'PaperLevelMgr_LoadSubLevelToWorld::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLevelMgr.OpenNewWorld
// 0x0040 (0x0040 - 0x0000)
struct PaperLevelMgr_OpenNewWorld final
{
public:
	class FString                                 WorldPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerPosition;                                    // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Option;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLevelMgr_OpenNewWorld) == 0x000008, "Wrong alignment on PaperLevelMgr_OpenNewWorld");
static_assert(sizeof(PaperLevelMgr_OpenNewWorld) == 0x000040, "Wrong size on PaperLevelMgr_OpenNewWorld");
static_assert(offsetof(PaperLevelMgr_OpenNewWorld, WorldPath) == 0x000000, "Member 'PaperLevelMgr_OpenNewWorld::WorldPath' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_OpenNewWorld, PlayerPosition) == 0x000010, "Member 'PaperLevelMgr_OpenNewWorld::PlayerPosition' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_OpenNewWorld, Option) == 0x000028, "Member 'PaperLevelMgr_OpenNewWorld::Option' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_OpenNewWorld, ReturnValue) == 0x000038, "Member 'PaperLevelMgr_OpenNewWorld::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLevelMgr.ReturnToWorld
// 0x0020 (0x0020 - 0x0000)
struct PaperLevelMgr_ReturnToWorld final
{
public:
	struct FVector                                LoadLocation;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLevelMgr_ReturnToWorld) == 0x000008, "Wrong alignment on PaperLevelMgr_ReturnToWorld");
static_assert(sizeof(PaperLevelMgr_ReturnToWorld) == 0x000020, "Wrong size on PaperLevelMgr_ReturnToWorld");
static_assert(offsetof(PaperLevelMgr_ReturnToWorld, LoadLocation) == 0x000000, "Member 'PaperLevelMgr_ReturnToWorld::LoadLocation' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_ReturnToWorld, ReturnValue) == 0x000018, "Member 'PaperLevelMgr_ReturnToWorld::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLevelMgr.SetPersistentLevel
// 0x0010 (0x0010 - 0x0000)
struct PaperLevelMgr_SetPersistentLevel final
{
public:
	class FString                                 LevelPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLevelMgr_SetPersistentLevel) == 0x000008, "Wrong alignment on PaperLevelMgr_SetPersistentLevel");
static_assert(sizeof(PaperLevelMgr_SetPersistentLevel) == 0x000010, "Wrong size on PaperLevelMgr_SetPersistentLevel");
static_assert(offsetof(PaperLevelMgr_SetPersistentLevel, LevelPath) == 0x000000, "Member 'PaperLevelMgr_SetPersistentLevel::LevelPath' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLevelMgr.TeleportPlayer
// 0x0020 (0x0020 - 0x0000)
struct PaperLevelMgr_TeleportPlayer final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLevelMgr_TeleportPlayer) == 0x000008, "Wrong alignment on PaperLevelMgr_TeleportPlayer");
static_assert(sizeof(PaperLevelMgr_TeleportPlayer) == 0x000020, "Wrong size on PaperLevelMgr_TeleportPlayer");
static_assert(offsetof(PaperLevelMgr_TeleportPlayer, TargetLocation) == 0x000000, "Member 'PaperLevelMgr_TeleportPlayer::TargetLocation' has a wrong offset!");
static_assert(offsetof(PaperLevelMgr_TeleportPlayer, ReturnValue) == 0x000018, "Member 'PaperLevelMgr_TeleportPlayer::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.DeserializeComponent
// 0x0078 (0x0078 - 0x0000)
struct PaperLuaBlueprintLibrary_DeserializeComponent final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ComponentName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Properties;                                        // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsCustomImportText;                               // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_DeserializeComponent) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_DeserializeComponent");
static_assert(sizeof(PaperLuaBlueprintLibrary_DeserializeComponent) == 0x000078, "Wrong size on PaperLuaBlueprintLibrary_DeserializeComponent");
static_assert(offsetof(PaperLuaBlueprintLibrary_DeserializeComponent, Owner) == 0x000000, "Member 'PaperLuaBlueprintLibrary_DeserializeComponent::Owner' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_DeserializeComponent, ComponentName) == 0x000008, "Member 'PaperLuaBlueprintLibrary_DeserializeComponent::ComponentName' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_DeserializeComponent, Properties) == 0x000018, "Member 'PaperLuaBlueprintLibrary_DeserializeComponent::Properties' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_DeserializeComponent, bIsCustomImportText) == 0x000068, "Member 'PaperLuaBlueprintLibrary_DeserializeComponent::bIsCustomImportText' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_DeserializeComponent, ReturnValue) == 0x000070, "Member 'PaperLuaBlueprintLibrary_DeserializeComponent::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.DeserializeLocalProperty
// 0x0078 (0x0078 - 0x0000)
struct PaperLuaBlueprintLibrary_DeserializeLocalProperty final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ComponentName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Properties;                                        // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsCustomImportText;                               // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_DeserializeLocalProperty) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_DeserializeLocalProperty");
static_assert(sizeof(PaperLuaBlueprintLibrary_DeserializeLocalProperty) == 0x000078, "Wrong size on PaperLuaBlueprintLibrary_DeserializeLocalProperty");
static_assert(offsetof(PaperLuaBlueprintLibrary_DeserializeLocalProperty, Owner) == 0x000000, "Member 'PaperLuaBlueprintLibrary_DeserializeLocalProperty::Owner' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_DeserializeLocalProperty, ComponentName) == 0x000008, "Member 'PaperLuaBlueprintLibrary_DeserializeLocalProperty::ComponentName' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_DeserializeLocalProperty, Properties) == 0x000018, "Member 'PaperLuaBlueprintLibrary_DeserializeLocalProperty::Properties' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_DeserializeLocalProperty, bIsCustomImportText) == 0x000068, "Member 'PaperLuaBlueprintLibrary_DeserializeLocalProperty::bIsCustomImportText' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_DeserializeLocalProperty, ReturnValue) == 0x000070, "Member 'PaperLuaBlueprintLibrary_DeserializeLocalProperty::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.FinishSpawning
// 0x0080 (0x0080 - 0x0000)
struct PaperLuaBlueprintLibrary_FinishSpawning final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefaultTransform;                               // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLuaBlueprintLibrary_FinishSpawning) == 0x000010, "Wrong alignment on PaperLuaBlueprintLibrary_FinishSpawning");
static_assert(sizeof(PaperLuaBlueprintLibrary_FinishSpawning) == 0x000080, "Wrong size on PaperLuaBlueprintLibrary_FinishSpawning");
static_assert(offsetof(PaperLuaBlueprintLibrary_FinishSpawning, Actor) == 0x000000, "Member 'PaperLuaBlueprintLibrary_FinishSpawning::Actor' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_FinishSpawning, Transform) == 0x000010, "Member 'PaperLuaBlueprintLibrary_FinishSpawning::Transform' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_FinishSpawning, bIsDefaultTransform) == 0x000070, "Member 'PaperLuaBlueprintLibrary_FinishSpawning::bIsDefaultTransform' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetActorNameWithMap
// 0x0018 (0x0018 - 0x0000)
struct PaperLuaBlueprintLibrary_GetActorNameWithMap final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetActorNameWithMap) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetActorNameWithMap");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetActorNameWithMap) == 0x000018, "Wrong size on PaperLuaBlueprintLibrary_GetActorNameWithMap");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetActorNameWithMap, Actor) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetActorNameWithMap::Actor' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetActorNameWithMap, ReturnValue) == 0x000008, "Member 'PaperLuaBlueprintLibrary_GetActorNameWithMap::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetBoolFromConfig
// 0x0038 (0x0038 - 0x0000)
struct PaperLuaBlueprintLibrary_GetBoolFromConfig final
{
public:
	class FString                                 Session;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedReload;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetBoolFromConfig) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetBoolFromConfig");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetBoolFromConfig) == 0x000038, "Wrong size on PaperLuaBlueprintLibrary_GetBoolFromConfig");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetBoolFromConfig, Session) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetBoolFromConfig::Session' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetBoolFromConfig, Key) == 0x000010, "Member 'PaperLuaBlueprintLibrary_GetBoolFromConfig::Key' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetBoolFromConfig, Path) == 0x000020, "Member 'PaperLuaBlueprintLibrary_GetBoolFromConfig::Path' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetBoolFromConfig, bNeedReload) == 0x000030, "Member 'PaperLuaBlueprintLibrary_GetBoolFromConfig::bNeedReload' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetBoolFromConfig, ReturnValue) == 0x000031, "Member 'PaperLuaBlueprintLibrary_GetBoolFromConfig::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetCurrentPerformanceData
// 0x0050 (0x0050 - 0x0000)
struct PaperLuaBlueprintLibrary_GetCurrentPerformanceData final
{
public:
	TMap<class FString, float>                    PerfData;                                          // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetCurrentPerformanceData) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetCurrentPerformanceData");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetCurrentPerformanceData) == 0x000050, "Wrong size on PaperLuaBlueprintLibrary_GetCurrentPerformanceData");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetCurrentPerformanceData, PerfData) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetCurrentPerformanceData::PerfData' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetCurrentTotalMillisecond
// 0x0008 (0x0008 - 0x0000)
struct PaperLuaBlueprintLibrary_GetCurrentTotalMillisecond final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetCurrentTotalMillisecond) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetCurrentTotalMillisecond");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetCurrentTotalMillisecond) == 0x000008, "Wrong size on PaperLuaBlueprintLibrary_GetCurrentTotalMillisecond");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetCurrentTotalMillisecond, ReturnValue) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetCurrentTotalMillisecond::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetDefaultDeviceProfileName
// 0x0010 (0x0010 - 0x0000)
struct PaperLuaBlueprintLibrary_GetDefaultDeviceProfileName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetDefaultDeviceProfileName) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetDefaultDeviceProfileName");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetDefaultDeviceProfileName) == 0x000010, "Wrong size on PaperLuaBlueprintLibrary_GetDefaultDeviceProfileName");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetDefaultDeviceProfileName, ReturnValue) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetDefaultDeviceProfileName::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetFrameCostMicroSeconds
// 0x0008 (0x0008 - 0x0000)
struct PaperLuaBlueprintLibrary_GetFrameCostMicroSeconds final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetFrameCostMicroSeconds) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetFrameCostMicroSeconds");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetFrameCostMicroSeconds) == 0x000008, "Wrong size on PaperLuaBlueprintLibrary_GetFrameCostMicroSeconds");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetFrameCostMicroSeconds, ReturnValue) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetFrameCostMicroSeconds::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetFrameCount
// 0x0008 (0x0008 - 0x0000)
struct PaperLuaBlueprintLibrary_GetFrameCount final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetFrameCount) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetFrameCount");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetFrameCount) == 0x000008, "Wrong size on PaperLuaBlueprintLibrary_GetFrameCount");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetFrameCount, ReturnValue) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetFrameCount::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetIntFromConfig
// 0x0038 (0x0038 - 0x0000)
struct PaperLuaBlueprintLibrary_GetIntFromConfig final
{
public:
	class FString                                 Session;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedReload;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetIntFromConfig) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetIntFromConfig");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetIntFromConfig) == 0x000038, "Wrong size on PaperLuaBlueprintLibrary_GetIntFromConfig");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetIntFromConfig, Session) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetIntFromConfig::Session' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetIntFromConfig, Key) == 0x000010, "Member 'PaperLuaBlueprintLibrary_GetIntFromConfig::Key' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetIntFromConfig, Path) == 0x000020, "Member 'PaperLuaBlueprintLibrary_GetIntFromConfig::Path' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetIntFromConfig, bNeedReload) == 0x000030, "Member 'PaperLuaBlueprintLibrary_GetIntFromConfig::bNeedReload' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetIntFromConfig, ReturnValue) == 0x000034, "Member 'PaperLuaBlueprintLibrary_GetIntFromConfig::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetLevelPackageName
// 0x0018 (0x0018 - 0x0000)
struct PaperLuaBlueprintLibrary_GetLevelPackageName final
{
public:
	class ULevel*                                 InLevel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetLevelPackageName) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetLevelPackageName");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetLevelPackageName) == 0x000018, "Wrong size on PaperLuaBlueprintLibrary_GetLevelPackageName");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetLevelPackageName, InLevel) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetLevelPackageName::InLevel' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetLevelPackageName, ReturnValue) == 0x000008, "Member 'PaperLuaBlueprintLibrary_GetLevelPackageName::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetMapCleanName
// 0x0020 (0x0020 - 0x0000)
struct PaperLuaBlueprintLibrary_GetMapCleanName final
{
public:
	class FString                                 StrMapName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetMapCleanName) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetMapCleanName");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetMapCleanName) == 0x000020, "Wrong size on PaperLuaBlueprintLibrary_GetMapCleanName");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetMapCleanName, StrMapName) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetMapCleanName::StrMapName' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetMapCleanName, ReturnValue) == 0x000010, "Member 'PaperLuaBlueprintLibrary_GetMapCleanName::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetNumTasksPrecompiled
// 0x0004 (0x0004 - 0x0000)
struct PaperLuaBlueprintLibrary_GetNumTasksPrecompiled final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetNumTasksPrecompiled) == 0x000004, "Wrong alignment on PaperLuaBlueprintLibrary_GetNumTasksPrecompiled");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetNumTasksPrecompiled) == 0x000004, "Wrong size on PaperLuaBlueprintLibrary_GetNumTasksPrecompiled");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetNumTasksPrecompiled, ReturnValue) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetNumTasksPrecompiled::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetStringArrayFromConfig
// 0x0048 (0x0048 - 0x0000)
struct PaperLuaBlueprintLibrary_GetStringArrayFromConfig final
{
public:
	class FString                                 Session;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedReload;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetStringArrayFromConfig) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetStringArrayFromConfig");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetStringArrayFromConfig) == 0x000048, "Wrong size on PaperLuaBlueprintLibrary_GetStringArrayFromConfig");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetStringArrayFromConfig, Session) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetStringArrayFromConfig::Session' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetStringArrayFromConfig, Key) == 0x000010, "Member 'PaperLuaBlueprintLibrary_GetStringArrayFromConfig::Key' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetStringArrayFromConfig, Path) == 0x000020, "Member 'PaperLuaBlueprintLibrary_GetStringArrayFromConfig::Path' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetStringArrayFromConfig, bNeedReload) == 0x000030, "Member 'PaperLuaBlueprintLibrary_GetStringArrayFromConfig::bNeedReload' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetStringArrayFromConfig, ReturnValue) == 0x000038, "Member 'PaperLuaBlueprintLibrary_GetStringArrayFromConfig::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetStringFromConfig
// 0x0048 (0x0048 - 0x0000)
struct PaperLuaBlueprintLibrary_GetStringFromConfig final
{
public:
	class FString                                 Session;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedReload;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetStringFromConfig) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_GetStringFromConfig");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetStringFromConfig) == 0x000048, "Wrong size on PaperLuaBlueprintLibrary_GetStringFromConfig");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetStringFromConfig, Session) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetStringFromConfig::Session' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetStringFromConfig, Key) == 0x000010, "Member 'PaperLuaBlueprintLibrary_GetStringFromConfig::Key' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetStringFromConfig, Path) == 0x000020, "Member 'PaperLuaBlueprintLibrary_GetStringFromConfig::Path' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetStringFromConfig, bNeedReload) == 0x000030, "Member 'PaperLuaBlueprintLibrary_GetStringFromConfig::bNeedReload' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetStringFromConfig, ReturnValue) == 0x000038, "Member 'PaperLuaBlueprintLibrary_GetStringFromConfig::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.GetTotalNumTasks
// 0x0004 (0x0004 - 0x0000)
struct PaperLuaBlueprintLibrary_GetTotalNumTasks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_GetTotalNumTasks) == 0x000004, "Wrong alignment on PaperLuaBlueprintLibrary_GetTotalNumTasks");
static_assert(sizeof(PaperLuaBlueprintLibrary_GetTotalNumTasks) == 0x000004, "Wrong size on PaperLuaBlueprintLibrary_GetTotalNumTasks");
static_assert(offsetof(PaperLuaBlueprintLibrary_GetTotalNumTasks, ReturnValue) == 0x000000, "Member 'PaperLuaBlueprintLibrary_GetTotalNumTasks::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.HasActorBegunPlay
// 0x0010 (0x0010 - 0x0000)
struct PaperLuaBlueprintLibrary_HasActorBegunPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLuaBlueprintLibrary_HasActorBegunPlay) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_HasActorBegunPlay");
static_assert(sizeof(PaperLuaBlueprintLibrary_HasActorBegunPlay) == 0x000010, "Wrong size on PaperLuaBlueprintLibrary_HasActorBegunPlay");
static_assert(offsetof(PaperLuaBlueprintLibrary_HasActorBegunPlay, Actor) == 0x000000, "Member 'PaperLuaBlueprintLibrary_HasActorBegunPlay::Actor' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_HasActorBegunPlay, ReturnValue) == 0x000008, "Member 'PaperLuaBlueprintLibrary_HasActorBegunPlay::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.IsLuaCallErrorNotifyEnable
// 0x0001 (0x0001 - 0x0000)
struct PaperLuaBlueprintLibrary_IsLuaCallErrorNotifyEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_IsLuaCallErrorNotifyEnable) == 0x000001, "Wrong alignment on PaperLuaBlueprintLibrary_IsLuaCallErrorNotifyEnable");
static_assert(sizeof(PaperLuaBlueprintLibrary_IsLuaCallErrorNotifyEnable) == 0x000001, "Wrong size on PaperLuaBlueprintLibrary_IsLuaCallErrorNotifyEnable");
static_assert(offsetof(PaperLuaBlueprintLibrary_IsLuaCallErrorNotifyEnable, ReturnValue) == 0x000000, "Member 'PaperLuaBlueprintLibrary_IsLuaCallErrorNotifyEnable::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.IsPSOPrecompiling
// 0x0001 (0x0001 - 0x0000)
struct PaperLuaBlueprintLibrary_IsPSOPrecompiling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_IsPSOPrecompiling) == 0x000001, "Wrong alignment on PaperLuaBlueprintLibrary_IsPSOPrecompiling");
static_assert(sizeof(PaperLuaBlueprintLibrary_IsPSOPrecompiling) == 0x000001, "Wrong size on PaperLuaBlueprintLibrary_IsPSOPrecompiling");
static_assert(offsetof(PaperLuaBlueprintLibrary_IsPSOPrecompiling, ReturnValue) == 0x000000, "Member 'PaperLuaBlueprintLibrary_IsPSOPrecompiling::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.IsWithEditor
// 0x0001 (0x0001 - 0x0000)
struct PaperLuaBlueprintLibrary_IsWithEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_IsWithEditor) == 0x000001, "Wrong alignment on PaperLuaBlueprintLibrary_IsWithEditor");
static_assert(sizeof(PaperLuaBlueprintLibrary_IsWithEditor) == 0x000001, "Wrong size on PaperLuaBlueprintLibrary_IsWithEditor");
static_assert(offsetof(PaperLuaBlueprintLibrary_IsWithEditor, ReturnValue) == 0x000000, "Member 'PaperLuaBlueprintLibrary_IsWithEditor::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.ManualShowWindowsVirtualKeyboard
// 0x0001 (0x0001 - 0x0000)
struct PaperLuaBlueprintLibrary_ManualShowWindowsVirtualKeyboard final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_ManualShowWindowsVirtualKeyboard) == 0x000001, "Wrong alignment on PaperLuaBlueprintLibrary_ManualShowWindowsVirtualKeyboard");
static_assert(sizeof(PaperLuaBlueprintLibrary_ManualShowWindowsVirtualKeyboard) == 0x000001, "Wrong size on PaperLuaBlueprintLibrary_ManualShowWindowsVirtualKeyboard");
static_assert(offsetof(PaperLuaBlueprintLibrary_ManualShowWindowsVirtualKeyboard, bShow) == 0x000000, "Member 'PaperLuaBlueprintLibrary_ManualShowWindowsVirtualKeyboard::bShow' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.NormalizeConfigIniPath
// 0x0020 (0x0020 - 0x0000)
struct PaperLuaBlueprintLibrary_NormalizeConfigIniPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_NormalizeConfigIniPath) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_NormalizeConfigIniPath");
static_assert(sizeof(PaperLuaBlueprintLibrary_NormalizeConfigIniPath) == 0x000020, "Wrong size on PaperLuaBlueprintLibrary_NormalizeConfigIniPath");
static_assert(offsetof(PaperLuaBlueprintLibrary_NormalizeConfigIniPath, Path) == 0x000000, "Member 'PaperLuaBlueprintLibrary_NormalizeConfigIniPath::Path' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_NormalizeConfigIniPath, ReturnValue) == 0x000010, "Member 'PaperLuaBlueprintLibrary_NormalizeConfigIniPath::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.NumPSOPrecompilesRemaining
// 0x0004 (0x0004 - 0x0000)
struct PaperLuaBlueprintLibrary_NumPSOPrecompilesRemaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_NumPSOPrecompilesRemaining) == 0x000004, "Wrong alignment on PaperLuaBlueprintLibrary_NumPSOPrecompilesRemaining");
static_assert(sizeof(PaperLuaBlueprintLibrary_NumPSOPrecompilesRemaining) == 0x000004, "Wrong size on PaperLuaBlueprintLibrary_NumPSOPrecompilesRemaining");
static_assert(offsetof(PaperLuaBlueprintLibrary_NumPSOPrecompilesRemaining, ReturnValue) == 0x000000, "Member 'PaperLuaBlueprintLibrary_NumPSOPrecompilesRemaining::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.SetActorPreferEnlightenThanLightmass
// 0x0010 (0x0010 - 0x0000)
struct PaperLuaBlueprintLibrary_SetActorPreferEnlightenThanLightmass final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPreferEnlightenThanLightmass;                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLuaBlueprintLibrary_SetActorPreferEnlightenThanLightmass) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_SetActorPreferEnlightenThanLightmass");
static_assert(sizeof(PaperLuaBlueprintLibrary_SetActorPreferEnlightenThanLightmass) == 0x000010, "Wrong size on PaperLuaBlueprintLibrary_SetActorPreferEnlightenThanLightmass");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetActorPreferEnlightenThanLightmass, Actor) == 0x000000, "Member 'PaperLuaBlueprintLibrary_SetActorPreferEnlightenThanLightmass::Actor' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetActorPreferEnlightenThanLightmass, bInPreferEnlightenThanLightmass) == 0x000008, "Member 'PaperLuaBlueprintLibrary_SetActorPreferEnlightenThanLightmass::bInPreferEnlightenThanLightmass' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.SetBoolToConfig
// 0x0038 (0x0038 - 0x0000)
struct PaperLuaBlueprintLibrary_SetBoolToConfig final
{
public:
	class FString                                 Session;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlush;                                            // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLuaBlueprintLibrary_SetBoolToConfig) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_SetBoolToConfig");
static_assert(sizeof(PaperLuaBlueprintLibrary_SetBoolToConfig) == 0x000038, "Wrong size on PaperLuaBlueprintLibrary_SetBoolToConfig");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetBoolToConfig, Session) == 0x000000, "Member 'PaperLuaBlueprintLibrary_SetBoolToConfig::Session' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetBoolToConfig, Key) == 0x000010, "Member 'PaperLuaBlueprintLibrary_SetBoolToConfig::Key' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetBoolToConfig, Path) == 0x000020, "Member 'PaperLuaBlueprintLibrary_SetBoolToConfig::Path' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetBoolToConfig, Value) == 0x000030, "Member 'PaperLuaBlueprintLibrary_SetBoolToConfig::Value' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetBoolToConfig, bFlush) == 0x000031, "Member 'PaperLuaBlueprintLibrary_SetBoolToConfig::bFlush' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.SetIntToConfig
// 0x0038 (0x0038 - 0x0000)
struct PaperLuaBlueprintLibrary_SetIntToConfig final
{
public:
	class FString                                 Session;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlush;                                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLuaBlueprintLibrary_SetIntToConfig) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_SetIntToConfig");
static_assert(sizeof(PaperLuaBlueprintLibrary_SetIntToConfig) == 0x000038, "Wrong size on PaperLuaBlueprintLibrary_SetIntToConfig");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetIntToConfig, Session) == 0x000000, "Member 'PaperLuaBlueprintLibrary_SetIntToConfig::Session' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetIntToConfig, Key) == 0x000010, "Member 'PaperLuaBlueprintLibrary_SetIntToConfig::Key' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetIntToConfig, Path) == 0x000020, "Member 'PaperLuaBlueprintLibrary_SetIntToConfig::Path' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetIntToConfig, Value) == 0x000030, "Member 'PaperLuaBlueprintLibrary_SetIntToConfig::Value' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetIntToConfig, bFlush) == 0x000034, "Member 'PaperLuaBlueprintLibrary_SetIntToConfig::bFlush' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.SetLuaCallErrorNotify
// 0x0001 (0x0001 - 0x0000)
struct PaperLuaBlueprintLibrary_SetLuaCallErrorNotify final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_SetLuaCallErrorNotify) == 0x000001, "Wrong alignment on PaperLuaBlueprintLibrary_SetLuaCallErrorNotify");
static_assert(sizeof(PaperLuaBlueprintLibrary_SetLuaCallErrorNotify) == 0x000001, "Wrong size on PaperLuaBlueprintLibrary_SetLuaCallErrorNotify");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetLuaCallErrorNotify, bEnable) == 0x000000, "Member 'PaperLuaBlueprintLibrary_SetLuaCallErrorNotify::bEnable' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.SetMobileGameState
// 0x0008 (0x0008 - 0x0000)
struct PaperLuaBlueprintLibrary_SetMobileGameState final
{
public:
	bool                                          bLoading;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InMode;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_SetMobileGameState) == 0x000004, "Wrong alignment on PaperLuaBlueprintLibrary_SetMobileGameState");
static_assert(sizeof(PaperLuaBlueprintLibrary_SetMobileGameState) == 0x000008, "Wrong size on PaperLuaBlueprintLibrary_SetMobileGameState");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetMobileGameState, bLoading) == 0x000000, "Member 'PaperLuaBlueprintLibrary_SetMobileGameState::bLoading' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetMobileGameState, InMode) == 0x000004, "Member 'PaperLuaBlueprintLibrary_SetMobileGameState::InMode' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.SetStringToConfig
// 0x0048 (0x0048 - 0x0000)
struct PaperLuaBlueprintLibrary_SetStringToConfig final
{
public:
	class FString                                 Session;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlush;                                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperLuaBlueprintLibrary_SetStringToConfig) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_SetStringToConfig");
static_assert(sizeof(PaperLuaBlueprintLibrary_SetStringToConfig) == 0x000048, "Wrong size on PaperLuaBlueprintLibrary_SetStringToConfig");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetStringToConfig, Session) == 0x000000, "Member 'PaperLuaBlueprintLibrary_SetStringToConfig::Session' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetStringToConfig, Key) == 0x000010, "Member 'PaperLuaBlueprintLibrary_SetStringToConfig::Key' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetStringToConfig, Path) == 0x000020, "Member 'PaperLuaBlueprintLibrary_SetStringToConfig::Path' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetStringToConfig, Value) == 0x000030, "Member 'PaperLuaBlueprintLibrary_SetStringToConfig::Value' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SetStringToConfig, bFlush) == 0x000040, "Member 'PaperLuaBlueprintLibrary_SetStringToConfig::bFlush' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperLuaBlueprintLibrary.SpawnActor
// 0x0078 (0x0078 - 0x0000)
struct PaperLuaBlueprintLibrary_SpawnActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SpawnClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Postion;                                           // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToDefaultSoloLevel;                            // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeferConstruction;                                // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperLuaBlueprintLibrary_SpawnActor) == 0x000008, "Wrong alignment on PaperLuaBlueprintLibrary_SpawnActor");
static_assert(sizeof(PaperLuaBlueprintLibrary_SpawnActor) == 0x000078, "Wrong size on PaperLuaBlueprintLibrary_SpawnActor");
static_assert(offsetof(PaperLuaBlueprintLibrary_SpawnActor, WorldContextObject) == 0x000000, "Member 'PaperLuaBlueprintLibrary_SpawnActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SpawnActor, SpawnClass) == 0x000008, "Member 'PaperLuaBlueprintLibrary_SpawnActor::SpawnClass' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SpawnActor, Postion) == 0x000010, "Member 'PaperLuaBlueprintLibrary_SpawnActor::Postion' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SpawnActor, Rotation) == 0x000028, "Member 'PaperLuaBlueprintLibrary_SpawnActor::Rotation' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SpawnActor, Scale) == 0x000040, "Member 'PaperLuaBlueprintLibrary_SpawnActor::Scale' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SpawnActor, Name_0) == 0x000058, "Member 'PaperLuaBlueprintLibrary_SpawnActor::Name_0' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SpawnActor, bAddToDefaultSoloLevel) == 0x000068, "Member 'PaperLuaBlueprintLibrary_SpawnActor::bAddToDefaultSoloLevel' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SpawnActor, bDeferConstruction) == 0x000069, "Member 'PaperLuaBlueprintLibrary_SpawnActor::bDeferConstruction' has a wrong offset!");
static_assert(offsetof(PaperLuaBlueprintLibrary_SpawnActor, ReturnValue) == 0x000070, "Member 'PaperLuaBlueprintLibrary_SpawnActor::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetSystemBlueprintLibrary.IsMultiPlayerMode
// 0x0010 (0x0010 - 0x0000)
struct PaperNetSystemBlueprintLibrary_IsMultiPlayerMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperNetSystemBlueprintLibrary_IsMultiPlayerMode) == 0x000008, "Wrong alignment on PaperNetSystemBlueprintLibrary_IsMultiPlayerMode");
static_assert(sizeof(PaperNetSystemBlueprintLibrary_IsMultiPlayerMode) == 0x000010, "Wrong size on PaperNetSystemBlueprintLibrary_IsMultiPlayerMode");
static_assert(offsetof(PaperNetSystemBlueprintLibrary_IsMultiPlayerMode, WorldContextObject) == 0x000000, "Member 'PaperNetSystemBlueprintLibrary_IsMultiPlayerMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PaperNetSystemBlueprintLibrary_IsMultiPlayerMode, ReturnValue) == 0x000008, "Member 'PaperNetSystemBlueprintLibrary_IsMultiPlayerMode::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkDataCollector.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct PaperNetworkDataCollector_GetInstance final
{
public:
	class UPaperNetworkDataCollector*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkDataCollector_GetInstance) == 0x000008, "Wrong alignment on PaperNetworkDataCollector_GetInstance");
static_assert(sizeof(PaperNetworkDataCollector_GetInstance) == 0x000008, "Wrong size on PaperNetworkDataCollector_GetInstance");
static_assert(offsetof(PaperNetworkDataCollector_GetInstance, ReturnValue) == 0x000000, "Member 'PaperNetworkDataCollector_GetInstance::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkDataCollector.GetCollectedDataMap
// 0x0050 (0x0050 - 0x0000)
struct PaperNetworkDataCollector_GetCollectedDataMap final
{
public:
	TMap<class FString, struct FNetworkCollectedData> ReturnValue;                                   // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkDataCollector_GetCollectedDataMap) == 0x000008, "Wrong alignment on PaperNetworkDataCollector_GetCollectedDataMap");
static_assert(sizeof(PaperNetworkDataCollector_GetCollectedDataMap) == 0x000050, "Wrong size on PaperNetworkDataCollector_GetCollectedDataMap");
static_assert(offsetof(PaperNetworkDataCollector_GetCollectedDataMap, ReturnValue) == 0x000000, "Member 'PaperNetworkDataCollector_GetCollectedDataMap::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkDataCollector.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct PaperNetworkDataCollector_SetEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkDataCollector_SetEnabled) == 0x000001, "Wrong alignment on PaperNetworkDataCollector_SetEnabled");
static_assert(sizeof(PaperNetworkDataCollector_SetEnabled) == 0x000001, "Wrong size on PaperNetworkDataCollector_SetEnabled");
static_assert(offsetof(PaperNetworkDataCollector_SetEnabled, bEnable) == 0x000000, "Member 'PaperNetworkDataCollector_SetEnabled::bEnable' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.Connect
// 0x0018 (0x0018 - 0x0000)
struct PaperNetworkMgr_Connect final
{
public:
	class FString                                 ipAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperNetworkMgr_Connect) == 0x000008, "Wrong alignment on PaperNetworkMgr_Connect");
static_assert(sizeof(PaperNetworkMgr_Connect) == 0x000018, "Wrong size on PaperNetworkMgr_Connect");
static_assert(offsetof(PaperNetworkMgr_Connect, ipAddress) == 0x000000, "Member 'PaperNetworkMgr_Connect::ipAddress' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_Connect, Port) == 0x000010, "Member 'PaperNetworkMgr_Connect::Port' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.CreateNetCrypter
// 0x0001 (0x0001 - 0x0000)
struct PaperNetworkMgr_CreateNetCrypter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_CreateNetCrypter) == 0x000001, "Wrong alignment on PaperNetworkMgr_CreateNetCrypter");
static_assert(sizeof(PaperNetworkMgr_CreateNetCrypter) == 0x000001, "Wrong size on PaperNetworkMgr_CreateNetCrypter");
static_assert(offsetof(PaperNetworkMgr_CreateNetCrypter, ReturnValue) == 0x000000, "Member 'PaperNetworkMgr_CreateNetCrypter::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.DestroyNetCrypter
// 0x0001 (0x0001 - 0x0000)
struct PaperNetworkMgr_DestroyNetCrypter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_DestroyNetCrypter) == 0x000001, "Wrong alignment on PaperNetworkMgr_DestroyNetCrypter");
static_assert(sizeof(PaperNetworkMgr_DestroyNetCrypter) == 0x000001, "Wrong size on PaperNetworkMgr_DestroyNetCrypter");
static_assert(offsetof(PaperNetworkMgr_DestroyNetCrypter, ReturnValue) == 0x000000, "Member 'PaperNetworkMgr_DestroyNetCrypter::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.GetNetLatency
// 0x0008 (0x0008 - 0x0000)
struct PaperNetworkMgr_GetNetLatency final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_GetNetLatency) == 0x000008, "Wrong alignment on PaperNetworkMgr_GetNetLatency");
static_assert(sizeof(PaperNetworkMgr_GetNetLatency) == 0x000008, "Wrong size on PaperNetworkMgr_GetNetLatency");
static_assert(offsetof(PaperNetworkMgr_GetNetLatency, ReturnValue) == 0x000000, "Member 'PaperNetworkMgr_GetNetLatency::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.HandleCryptAck
// 0x0008 (0x0008 - 0x0000)
struct PaperNetworkMgr_HandleCryptAck final
{
public:
	int32                                         PubKeyLen;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperNetworkMgr_HandleCryptAck) == 0x000004, "Wrong alignment on PaperNetworkMgr_HandleCryptAck");
static_assert(sizeof(PaperNetworkMgr_HandleCryptAck) == 0x000008, "Wrong size on PaperNetworkMgr_HandleCryptAck");
static_assert(offsetof(PaperNetworkMgr_HandleCryptAck, PubKeyLen) == 0x000000, "Member 'PaperNetworkMgr_HandleCryptAck::PubKeyLen' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HandleCryptAck, ReturnValue) == 0x000004, "Member 'PaperNetworkMgr_HandleCryptAck::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.HttpGetWithAuthUser
// 0x0040 (0x0040 - 0x0000)
struct PaperNetworkMgr_HttpGetWithAuthUser final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 szAuth;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 szUserName;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, int32 ResponseCode, const class FString& ResponseString)> onHttpRequestCompleted; // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_HttpGetWithAuthUser) == 0x000008, "Wrong alignment on PaperNetworkMgr_HttpGetWithAuthUser");
static_assert(sizeof(PaperNetworkMgr_HttpGetWithAuthUser) == 0x000040, "Wrong size on PaperNetworkMgr_HttpGetWithAuthUser");
static_assert(offsetof(PaperNetworkMgr_HttpGetWithAuthUser, URL) == 0x000000, "Member 'PaperNetworkMgr_HttpGetWithAuthUser::URL' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpGetWithAuthUser, szAuth) == 0x000010, "Member 'PaperNetworkMgr_HttpGetWithAuthUser::szAuth' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpGetWithAuthUser, szUserName) == 0x000020, "Member 'PaperNetworkMgr_HttpGetWithAuthUser::szUserName' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpGetWithAuthUser, onHttpRequestCompleted) == 0x000030, "Member 'PaperNetworkMgr_HttpGetWithAuthUser::onHttpRequestCompleted' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.HttpPostEx
// 0x0080 (0x0080 - 0x0000)
struct PaperNetworkMgr_HttpPostEx final
{
public:
	class FString                                 szURL;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            mapHeader;                                         // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 szCont;                                            // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, int32 ResponseCode, const class FString& ResponseString)> onHttpRequestCompleted; // 0x0070(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_HttpPostEx) == 0x000008, "Wrong alignment on PaperNetworkMgr_HttpPostEx");
static_assert(sizeof(PaperNetworkMgr_HttpPostEx) == 0x000080, "Wrong size on PaperNetworkMgr_HttpPostEx");
static_assert(offsetof(PaperNetworkMgr_HttpPostEx, szURL) == 0x000000, "Member 'PaperNetworkMgr_HttpPostEx::szURL' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostEx, mapHeader) == 0x000010, "Member 'PaperNetworkMgr_HttpPostEx::mapHeader' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostEx, szCont) == 0x000060, "Member 'PaperNetworkMgr_HttpPostEx::szCont' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostEx, onHttpRequestCompleted) == 0x000070, "Member 'PaperNetworkMgr_HttpPostEx::onHttpRequestCompleted' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.HttpPostFileEx
// 0x00D0 (0x00D0 - 0x0000)
struct PaperNetworkMgr_HttpPostFileEx final
{
public:
	class FString                                 szURL;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            mapHeader;                                         // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 szFilePath;                                        // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            mapPara;                                           // 0x0070(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, int32 ResponseCode, const class FString& ResponseString)> onHttpRequestCompleted; // 0x00C0(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_HttpPostFileEx) == 0x000008, "Wrong alignment on PaperNetworkMgr_HttpPostFileEx");
static_assert(sizeof(PaperNetworkMgr_HttpPostFileEx) == 0x0000D0, "Wrong size on PaperNetworkMgr_HttpPostFileEx");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileEx, szURL) == 0x000000, "Member 'PaperNetworkMgr_HttpPostFileEx::szURL' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileEx, mapHeader) == 0x000010, "Member 'PaperNetworkMgr_HttpPostFileEx::mapHeader' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileEx, szFilePath) == 0x000060, "Member 'PaperNetworkMgr_HttpPostFileEx::szFilePath' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileEx, mapPara) == 0x000070, "Member 'PaperNetworkMgr_HttpPostFileEx::mapPara' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileEx, onHttpRequestCompleted) == 0x0000C0, "Member 'PaperNetworkMgr_HttpPostFileEx::onHttpRequestCompleted' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.HttpPostFileExNew
// 0x00D0 (0x00D0 - 0x0000)
struct PaperNetworkMgr_HttpPostFileExNew final
{
public:
	class FString                                 szURL;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            mapHeader;                                         // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 szFilePath;                                        // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            mapPara;                                           // 0x0070(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, int32 ResponseCode, const class FString& ResponseString)> onHttpRequestCompleted; // 0x00C0(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_HttpPostFileExNew) == 0x000008, "Wrong alignment on PaperNetworkMgr_HttpPostFileExNew");
static_assert(sizeof(PaperNetworkMgr_HttpPostFileExNew) == 0x0000D0, "Wrong size on PaperNetworkMgr_HttpPostFileExNew");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileExNew, szURL) == 0x000000, "Member 'PaperNetworkMgr_HttpPostFileExNew::szURL' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileExNew, mapHeader) == 0x000010, "Member 'PaperNetworkMgr_HttpPostFileExNew::mapHeader' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileExNew, szFilePath) == 0x000060, "Member 'PaperNetworkMgr_HttpPostFileExNew::szFilePath' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileExNew, mapPara) == 0x000070, "Member 'PaperNetworkMgr_HttpPostFileExNew::mapPara' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileExNew, onHttpRequestCompleted) == 0x0000C0, "Member 'PaperNetworkMgr_HttpPostFileExNew::onHttpRequestCompleted' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.HttpPostFileWithAuthUser
// 0x0050 (0x0050 - 0x0000)
struct PaperNetworkMgr_HttpPostFileWithAuthUser final
{
public:
	class FString                                 szURL;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 szAuth;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 szUserName;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 szFilePath;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, int32 ResponseCode, const class FString& ResponseString)> onHttpRequestCompleted; // 0x0040(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_HttpPostFileWithAuthUser) == 0x000008, "Wrong alignment on PaperNetworkMgr_HttpPostFileWithAuthUser");
static_assert(sizeof(PaperNetworkMgr_HttpPostFileWithAuthUser) == 0x000050, "Wrong size on PaperNetworkMgr_HttpPostFileWithAuthUser");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileWithAuthUser, szURL) == 0x000000, "Member 'PaperNetworkMgr_HttpPostFileWithAuthUser::szURL' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileWithAuthUser, szAuth) == 0x000010, "Member 'PaperNetworkMgr_HttpPostFileWithAuthUser::szAuth' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileWithAuthUser, szUserName) == 0x000020, "Member 'PaperNetworkMgr_HttpPostFileWithAuthUser::szUserName' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileWithAuthUser, szFilePath) == 0x000030, "Member 'PaperNetworkMgr_HttpPostFileWithAuthUser::szFilePath' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostFileWithAuthUser, onHttpRequestCompleted) == 0x000040, "Member 'PaperNetworkMgr_HttpPostFileWithAuthUser::onHttpRequestCompleted' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.HttpPostWithAuthUser
// 0x0060 (0x0060 - 0x0000)
struct PaperNetworkMgr_HttpPostWithAuthUser final
{
public:
	class FString                                 szURL;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 szAuth;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 szUserName;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 szContType;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 szCont;                                            // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, int32 ResponseCode, const class FString& ResponseString)> onHttpRequestCompleted; // 0x0050(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_HttpPostWithAuthUser) == 0x000008, "Wrong alignment on PaperNetworkMgr_HttpPostWithAuthUser");
static_assert(sizeof(PaperNetworkMgr_HttpPostWithAuthUser) == 0x000060, "Wrong size on PaperNetworkMgr_HttpPostWithAuthUser");
static_assert(offsetof(PaperNetworkMgr_HttpPostWithAuthUser, szURL) == 0x000000, "Member 'PaperNetworkMgr_HttpPostWithAuthUser::szURL' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostWithAuthUser, szAuth) == 0x000010, "Member 'PaperNetworkMgr_HttpPostWithAuthUser::szAuth' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostWithAuthUser, szUserName) == 0x000020, "Member 'PaperNetworkMgr_HttpPostWithAuthUser::szUserName' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostWithAuthUser, szContType) == 0x000030, "Member 'PaperNetworkMgr_HttpPostWithAuthUser::szContType' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostWithAuthUser, szCont) == 0x000040, "Member 'PaperNetworkMgr_HttpPostWithAuthUser::szCont' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpPostWithAuthUser, onHttpRequestCompleted) == 0x000050, "Member 'PaperNetworkMgr_HttpPostWithAuthUser::onHttpRequestCompleted' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.HttpRequest
// 0x0020 (0x0020 - 0x0000)
struct PaperNetworkMgr_HttpRequest final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, int32 ResponseCode, const class FString& ResponseString)> onHttpRequestCompleted; // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_HttpRequest) == 0x000008, "Wrong alignment on PaperNetworkMgr_HttpRequest");
static_assert(sizeof(PaperNetworkMgr_HttpRequest) == 0x000020, "Wrong size on PaperNetworkMgr_HttpRequest");
static_assert(offsetof(PaperNetworkMgr_HttpRequest, URL) == 0x000000, "Member 'PaperNetworkMgr_HttpRequest::URL' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpRequest, onHttpRequestCompleted) == 0x000010, "Member 'PaperNetworkMgr_HttpRequest::onHttpRequestCompleted' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.HttpRequestContent
// 0x0030 (0x0030 - 0x0000)
struct PaperNetworkMgr_HttpRequestContent final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, int32 ResponseCode)> OnHttpRequestContentCompleted;                // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ResponseContent;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_HttpRequestContent) == 0x000008, "Wrong alignment on PaperNetworkMgr_HttpRequestContent");
static_assert(sizeof(PaperNetworkMgr_HttpRequestContent) == 0x000030, "Wrong size on PaperNetworkMgr_HttpRequestContent");
static_assert(offsetof(PaperNetworkMgr_HttpRequestContent, URL) == 0x000000, "Member 'PaperNetworkMgr_HttpRequestContent::URL' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpRequestContent, OnHttpRequestContentCompleted) == 0x000010, "Member 'PaperNetworkMgr_HttpRequestContent::OnHttpRequestContentCompleted' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpRequestContent, ResponseContent) == 0x000020, "Member 'PaperNetworkMgr_HttpRequestContent::ResponseContent' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.HttpRequestContent2
// 0x0020 (0x0020 - 0x0000)
struct PaperNetworkMgr_HttpRequestContent2 final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, int32 ResponseCode, const TArray<uint8>& ResponseContent)> onHttpRequestCompleted; // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_HttpRequestContent2) == 0x000008, "Wrong alignment on PaperNetworkMgr_HttpRequestContent2");
static_assert(sizeof(PaperNetworkMgr_HttpRequestContent2) == 0x000020, "Wrong size on PaperNetworkMgr_HttpRequestContent2");
static_assert(offsetof(PaperNetworkMgr_HttpRequestContent2, URL) == 0x000000, "Member 'PaperNetworkMgr_HttpRequestContent2::URL' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_HttpRequestContent2, onHttpRequestCompleted) == 0x000010, "Member 'PaperNetworkMgr_HttpRequestContent2::onHttpRequestCompleted' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.InitAndGenNetCrypt
// 0x0001 (0x0001 - 0x0000)
struct PaperNetworkMgr_InitAndGenNetCrypt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_InitAndGenNetCrypt) == 0x000001, "Wrong alignment on PaperNetworkMgr_InitAndGenNetCrypt");
static_assert(sizeof(PaperNetworkMgr_InitAndGenNetCrypt) == 0x000001, "Wrong size on PaperNetworkMgr_InitAndGenNetCrypt");
static_assert(offsetof(PaperNetworkMgr_InitAndGenNetCrypt, ReturnValue) == 0x000000, "Member 'PaperNetworkMgr_InitAndGenNetCrypt::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.InitCrypt
// 0x0010 (0x0010 - 0x0000)
struct PaperNetworkMgr_InitCrypt final
{
public:
	int32                                         g_len;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         p_len;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pub_key_len;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperNetworkMgr_InitCrypt) == 0x000004, "Wrong alignment on PaperNetworkMgr_InitCrypt");
static_assert(sizeof(PaperNetworkMgr_InitCrypt) == 0x000010, "Wrong size on PaperNetworkMgr_InitCrypt");
static_assert(offsetof(PaperNetworkMgr_InitCrypt, g_len) == 0x000000, "Member 'PaperNetworkMgr_InitCrypt::g_len' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_InitCrypt, p_len) == 0x000004, "Member 'PaperNetworkMgr_InitCrypt::p_len' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_InitCrypt, pub_key_len) == 0x000008, "Member 'PaperNetworkMgr_InitCrypt::pub_key_len' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_InitCrypt, ReturnValue) == 0x00000C, "Member 'PaperNetworkMgr_InitCrypt::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.IsConnected
// 0x0001 (0x0001 - 0x0000)
struct PaperNetworkMgr_IsConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_IsConnected) == 0x000001, "Wrong alignment on PaperNetworkMgr_IsConnected");
static_assert(sizeof(PaperNetworkMgr_IsConnected) == 0x000001, "Wrong size on PaperNetworkMgr_IsConnected");
static_assert(offsetof(PaperNetworkMgr_IsConnected, ReturnValue) == 0x000000, "Member 'PaperNetworkMgr_IsConnected::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.IsConnecting
// 0x0001 (0x0001 - 0x0000)
struct PaperNetworkMgr_IsConnecting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_IsConnecting) == 0x000001, "Wrong alignment on PaperNetworkMgr_IsConnecting");
static_assert(sizeof(PaperNetworkMgr_IsConnecting) == 0x000001, "Wrong size on PaperNetworkMgr_IsConnecting");
static_assert(offsetof(PaperNetworkMgr_IsConnecting, ReturnValue) == 0x000000, "Member 'PaperNetworkMgr_IsConnecting::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.IsNetCrypterExists
// 0x0001 (0x0001 - 0x0000)
struct PaperNetworkMgr_IsNetCrypterExists final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_IsNetCrypterExists) == 0x000001, "Wrong alignment on PaperNetworkMgr_IsNetCrypterExists");
static_assert(sizeof(PaperNetworkMgr_IsNetCrypterExists) == 0x000001, "Wrong size on PaperNetworkMgr_IsNetCrypterExists");
static_assert(offsetof(PaperNetworkMgr_IsNetCrypterExists, ReturnValue) == 0x000000, "Member 'PaperNetworkMgr_IsNetCrypterExists::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.IsUnLuaAsyncTime
// 0x0001 (0x0001 - 0x0000)
struct PaperNetworkMgr_IsUnLuaAsyncTime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_IsUnLuaAsyncTime) == 0x000001, "Wrong alignment on PaperNetworkMgr_IsUnLuaAsyncTime");
static_assert(sizeof(PaperNetworkMgr_IsUnLuaAsyncTime) == 0x000001, "Wrong size on PaperNetworkMgr_IsUnLuaAsyncTime");
static_assert(offsetof(PaperNetworkMgr_IsUnLuaAsyncTime, ReturnValue) == 0x000000, "Member 'PaperNetworkMgr_IsUnLuaAsyncTime::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.ReadDataToByteBuf
// 0x0004 (0x0004 - 0x0000)
struct PaperNetworkMgr_ReadDataToByteBuf final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_ReadDataToByteBuf) == 0x000004, "Wrong alignment on PaperNetworkMgr_ReadDataToByteBuf");
static_assert(sizeof(PaperNetworkMgr_ReadDataToByteBuf) == 0x000004, "Wrong size on PaperNetworkMgr_ReadDataToByteBuf");
static_assert(offsetof(PaperNetworkMgr_ReadDataToByteBuf, ReturnValue) == 0x000000, "Member 'PaperNetworkMgr_ReadDataToByteBuf::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.SetAesCryptMode
// 0x0004 (0x0004 - 0x0000)
struct PaperNetworkMgr_SetAesCryptMode final
{
public:
	int32                                         InMode;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_SetAesCryptMode) == 0x000004, "Wrong alignment on PaperNetworkMgr_SetAesCryptMode");
static_assert(sizeof(PaperNetworkMgr_SetAesCryptMode) == 0x000004, "Wrong size on PaperNetworkMgr_SetAesCryptMode");
static_assert(offsetof(PaperNetworkMgr_SetAesCryptMode, InMode) == 0x000000, "Member 'PaperNetworkMgr_SetAesCryptMode::InMode' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.SetConnectTimeout
// 0x0008 (0x0008 - 0x0000)
struct PaperNetworkMgr_SetConnectTimeout final
{
public:
	float                                         Timeout;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          autoDisconnect;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperNetworkMgr_SetConnectTimeout) == 0x000004, "Wrong alignment on PaperNetworkMgr_SetConnectTimeout");
static_assert(sizeof(PaperNetworkMgr_SetConnectTimeout) == 0x000008, "Wrong size on PaperNetworkMgr_SetConnectTimeout");
static_assert(offsetof(PaperNetworkMgr_SetConnectTimeout, Timeout) == 0x000000, "Member 'PaperNetworkMgr_SetConnectTimeout::Timeout' has a wrong offset!");
static_assert(offsetof(PaperNetworkMgr_SetConnectTimeout, autoDisconnect) == 0x000004, "Member 'PaperNetworkMgr_SetConnectTimeout::autoDisconnect' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.SetHandlerMode
// 0x0001 (0x0001 - 0x0000)
struct PaperNetworkMgr_SetHandlerMode final
{
public:
	EPaperNetworkHandler                          Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_SetHandlerMode) == 0x000001, "Wrong alignment on PaperNetworkMgr_SetHandlerMode");
static_assert(sizeof(PaperNetworkMgr_SetHandlerMode) == 0x000001, "Wrong size on PaperNetworkMgr_SetHandlerMode");
static_assert(offsetof(PaperNetworkMgr_SetHandlerMode, Mode) == 0x000000, "Member 'PaperNetworkMgr_SetHandlerMode::Mode' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.SetHeartbeatInterval
// 0x0004 (0x0004 - 0x0000)
struct PaperNetworkMgr_SetHeartbeatInterval final
{
public:
	float                                         Interval;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_SetHeartbeatInterval) == 0x000004, "Wrong alignment on PaperNetworkMgr_SetHeartbeatInterval");
static_assert(sizeof(PaperNetworkMgr_SetHeartbeatInterval) == 0x000004, "Wrong size on PaperNetworkMgr_SetHeartbeatInterval");
static_assert(offsetof(PaperNetworkMgr_SetHeartbeatInterval, Interval) == 0x000000, "Member 'PaperNetworkMgr_SetHeartbeatInterval::Interval' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkMgr.SetNetProtoId
// 0x0004 (0x0004 - 0x0000)
struct PaperNetworkMgr_SetNetProtoId final
{
public:
	int32                                         ProtoId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkMgr_SetNetProtoId) == 0x000004, "Wrong alignment on PaperNetworkMgr_SetNetProtoId");
static_assert(sizeof(PaperNetworkMgr_SetNetProtoId) == 0x000004, "Wrong size on PaperNetworkMgr_SetNetProtoId");
static_assert(offsetof(PaperNetworkMgr_SetNetProtoId, ProtoId) == 0x000000, "Member 'PaperNetworkMgr_SetNetProtoId::ProtoId' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperNetworkSubsystem.GetPaperNetworkMgr
// 0x0008 (0x0008 - 0x0000)
struct PaperNetworkSubsystem_GetPaperNetworkMgr final
{
public:
	class UPaperNetworkMgr*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperNetworkSubsystem_GetPaperNetworkMgr) == 0x000008, "Wrong alignment on PaperNetworkSubsystem_GetPaperNetworkMgr");
static_assert(sizeof(PaperNetworkSubsystem_GetPaperNetworkMgr) == 0x000008, "Wrong size on PaperNetworkSubsystem_GetPaperNetworkMgr");
static_assert(offsetof(PaperNetworkSubsystem_GetPaperNetworkMgr, ReturnValue) == 0x000000, "Member 'PaperNetworkSubsystem_GetPaperNetworkMgr::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlatformGameInstance.GC
// 0x0001 (0x0001 - 0x0000)
struct PaperPlatformGameInstance_GC final
{
public:
	bool                                          bForceLua;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperPlatformGameInstance_GC) == 0x000001, "Wrong alignment on PaperPlatformGameInstance_GC");
static_assert(sizeof(PaperPlatformGameInstance_GC) == 0x000001, "Wrong size on PaperPlatformGameInstance_GC");
static_assert(offsetof(PaperPlatformGameInstance_GC, bForceLua) == 0x000000, "Member 'PaperPlatformGameInstance_GC::bForceLua' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlatformGameInstance.Lua
// 0x0010 (0x0010 - 0x0000)
struct PaperPlatformGameInstance_Lua final
{
public:
	class FString                                 LuaString;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperPlatformGameInstance_Lua) == 0x000008, "Wrong alignment on PaperPlatformGameInstance_Lua");
static_assert(sizeof(PaperPlatformGameInstance_Lua) == 0x000010, "Wrong size on PaperPlatformGameInstance_Lua");
static_assert(offsetof(PaperPlatformGameInstance_Lua, LuaString) == 0x000000, "Member 'PaperPlatformGameInstance_Lua::LuaString' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlayerPrefsMgr.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct PaperPlayerPrefsMgr_GetInstance final
{
public:
	class UPaperPlayerPrefsMgr*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperPlayerPrefsMgr_GetInstance) == 0x000008, "Wrong alignment on PaperPlayerPrefsMgr_GetInstance");
static_assert(sizeof(PaperPlayerPrefsMgr_GetInstance) == 0x000008, "Wrong size on PaperPlayerPrefsMgr_GetInstance");
static_assert(offsetof(PaperPlayerPrefsMgr_GetInstance, ReturnValue) == 0x000000, "Member 'PaperPlayerPrefsMgr_GetInstance::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlayerPrefsMgr.GetBool
// 0x0018 (0x0018 - 0x0000)
struct PaperPlayerPrefsMgr_GetBool final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperPlayerPrefsMgr_GetBool) == 0x000008, "Wrong alignment on PaperPlayerPrefsMgr_GetBool");
static_assert(sizeof(PaperPlayerPrefsMgr_GetBool) == 0x000018, "Wrong size on PaperPlayerPrefsMgr_GetBool");
static_assert(offsetof(PaperPlayerPrefsMgr_GetBool, Key) == 0x000000, "Member 'PaperPlayerPrefsMgr_GetBool::Key' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_GetBool, Value) == 0x000010, "Member 'PaperPlayerPrefsMgr_GetBool::Value' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_GetBool, ReturnValue) == 0x000011, "Member 'PaperPlayerPrefsMgr_GetBool::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlayerPrefsMgr.GetFloat
// 0x0018 (0x0018 - 0x0000)
struct PaperPlayerPrefsMgr_GetFloat final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperPlayerPrefsMgr_GetFloat) == 0x000008, "Wrong alignment on PaperPlayerPrefsMgr_GetFloat");
static_assert(sizeof(PaperPlayerPrefsMgr_GetFloat) == 0x000018, "Wrong size on PaperPlayerPrefsMgr_GetFloat");
static_assert(offsetof(PaperPlayerPrefsMgr_GetFloat, Key) == 0x000000, "Member 'PaperPlayerPrefsMgr_GetFloat::Key' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_GetFloat, Value) == 0x000010, "Member 'PaperPlayerPrefsMgr_GetFloat::Value' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_GetFloat, ReturnValue) == 0x000014, "Member 'PaperPlayerPrefsMgr_GetFloat::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlayerPrefsMgr.GetInt
// 0x0018 (0x0018 - 0x0000)
struct PaperPlayerPrefsMgr_GetInt final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperPlayerPrefsMgr_GetInt) == 0x000008, "Wrong alignment on PaperPlayerPrefsMgr_GetInt");
static_assert(sizeof(PaperPlayerPrefsMgr_GetInt) == 0x000018, "Wrong size on PaperPlayerPrefsMgr_GetInt");
static_assert(offsetof(PaperPlayerPrefsMgr_GetInt, Key) == 0x000000, "Member 'PaperPlayerPrefsMgr_GetInt::Key' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_GetInt, Value) == 0x000010, "Member 'PaperPlayerPrefsMgr_GetInt::Value' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_GetInt, ReturnValue) == 0x000014, "Member 'PaperPlayerPrefsMgr_GetInt::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlayerPrefsMgr.GetStr
// 0x0020 (0x0020 - 0x0000)
struct PaperPlayerPrefsMgr_GetStr final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperPlayerPrefsMgr_GetStr) == 0x000008, "Wrong alignment on PaperPlayerPrefsMgr_GetStr");
static_assert(sizeof(PaperPlayerPrefsMgr_GetStr) == 0x000020, "Wrong size on PaperPlayerPrefsMgr_GetStr");
static_assert(offsetof(PaperPlayerPrefsMgr_GetStr, Key) == 0x000000, "Member 'PaperPlayerPrefsMgr_GetStr::Key' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_GetStr, ReturnValue) == 0x000010, "Member 'PaperPlayerPrefsMgr_GetStr::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlayerPrefsMgr.GetString
// 0x0028 (0x0028 - 0x0000)
struct PaperPlayerPrefsMgr_GetString final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperPlayerPrefsMgr_GetString) == 0x000008, "Wrong alignment on PaperPlayerPrefsMgr_GetString");
static_assert(sizeof(PaperPlayerPrefsMgr_GetString) == 0x000028, "Wrong size on PaperPlayerPrefsMgr_GetString");
static_assert(offsetof(PaperPlayerPrefsMgr_GetString, Key) == 0x000000, "Member 'PaperPlayerPrefsMgr_GetString::Key' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_GetString, Value) == 0x000010, "Member 'PaperPlayerPrefsMgr_GetString::Value' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_GetString, ReturnValue) == 0x000020, "Member 'PaperPlayerPrefsMgr_GetString::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlayerPrefsMgr.SetBool
// 0x0018 (0x0018 - 0x0000)
struct PaperPlayerPrefsMgr_SetBool final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperPlayerPrefsMgr_SetBool) == 0x000008, "Wrong alignment on PaperPlayerPrefsMgr_SetBool");
static_assert(sizeof(PaperPlayerPrefsMgr_SetBool) == 0x000018, "Wrong size on PaperPlayerPrefsMgr_SetBool");
static_assert(offsetof(PaperPlayerPrefsMgr_SetBool, Key) == 0x000000, "Member 'PaperPlayerPrefsMgr_SetBool::Key' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_SetBool, Value) == 0x000010, "Member 'PaperPlayerPrefsMgr_SetBool::Value' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlayerPrefsMgr.SetFloat
// 0x0018 (0x0018 - 0x0000)
struct PaperPlayerPrefsMgr_SetFloat final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperPlayerPrefsMgr_SetFloat) == 0x000008, "Wrong alignment on PaperPlayerPrefsMgr_SetFloat");
static_assert(sizeof(PaperPlayerPrefsMgr_SetFloat) == 0x000018, "Wrong size on PaperPlayerPrefsMgr_SetFloat");
static_assert(offsetof(PaperPlayerPrefsMgr_SetFloat, Key) == 0x000000, "Member 'PaperPlayerPrefsMgr_SetFloat::Key' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_SetFloat, Value) == 0x000010, "Member 'PaperPlayerPrefsMgr_SetFloat::Value' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlayerPrefsMgr.SetInt
// 0x0018 (0x0018 - 0x0000)
struct PaperPlayerPrefsMgr_SetInt final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperPlayerPrefsMgr_SetInt) == 0x000008, "Wrong alignment on PaperPlayerPrefsMgr_SetInt");
static_assert(sizeof(PaperPlayerPrefsMgr_SetInt) == 0x000018, "Wrong size on PaperPlayerPrefsMgr_SetInt");
static_assert(offsetof(PaperPlayerPrefsMgr_SetInt, Key) == 0x000000, "Member 'PaperPlayerPrefsMgr_SetInt::Key' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_SetInt, Value) == 0x000010, "Member 'PaperPlayerPrefsMgr_SetInt::Value' has a wrong offset!");

// Function PaperLuaFrameworkBase.PaperPlayerPrefsMgr.SetString
// 0x0020 (0x0020 - 0x0000)
struct PaperPlayerPrefsMgr_SetString final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperPlayerPrefsMgr_SetString) == 0x000008, "Wrong alignment on PaperPlayerPrefsMgr_SetString");
static_assert(sizeof(PaperPlayerPrefsMgr_SetString) == 0x000020, "Wrong size on PaperPlayerPrefsMgr_SetString");
static_assert(offsetof(PaperPlayerPrefsMgr_SetString, Key) == 0x000000, "Member 'PaperPlayerPrefsMgr_SetString::Key' has a wrong offset!");
static_assert(offsetof(PaperPlayerPrefsMgr_SetString, Value) == 0x000010, "Member 'PaperPlayerPrefsMgr_SetString::Value' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.AddPlayer
// 0x0008 (0x0008 - 0x0000)
struct X6NetClient_AddPlayer final
{
public:
	int64                                         NetID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_AddPlayer) == 0x000008, "Wrong alignment on X6NetClient_AddPlayer");
static_assert(sizeof(X6NetClient_AddPlayer) == 0x000008, "Wrong size on X6NetClient_AddPlayer");
static_assert(offsetof(X6NetClient_AddPlayer, NetID) == 0x000000, "Member 'X6NetClient_AddPlayer::NetID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.BindSimulatedActor
// 0x0010 (0x0010 - 0x0000)
struct X6NetClient_BindSimulatedActor final
{
public:
	int64                                         NetClientID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         NetEntityID;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_BindSimulatedActor) == 0x000008, "Wrong alignment on X6NetClient_BindSimulatedActor");
static_assert(sizeof(X6NetClient_BindSimulatedActor) == 0x000010, "Wrong size on X6NetClient_BindSimulatedActor");
static_assert(offsetof(X6NetClient_BindSimulatedActor, NetClientID) == 0x000000, "Member 'X6NetClient_BindSimulatedActor::NetClientID' has a wrong offset!");
static_assert(offsetof(X6NetClient_BindSimulatedActor, NetEntityID) == 0x000008, "Member 'X6NetClient_BindSimulatedActor::NetEntityID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.Debug_SetChannelReplicationPaused
// 0x0010 (0x0010 - 0x0000)
struct X6NetClient_Debug_SetChannelReplicationPaused final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6NetClient_Debug_SetChannelReplicationPaused) == 0x000008, "Wrong alignment on X6NetClient_Debug_SetChannelReplicationPaused");
static_assert(sizeof(X6NetClient_Debug_SetChannelReplicationPaused) == 0x000010, "Wrong size on X6NetClient_Debug_SetChannelReplicationPaused");
static_assert(offsetof(X6NetClient_Debug_SetChannelReplicationPaused, TargetActor) == 0x000000, "Member 'X6NetClient_Debug_SetChannelReplicationPaused::TargetActor' has a wrong offset!");
static_assert(offsetof(X6NetClient_Debug_SetChannelReplicationPaused, bPause) == 0x000008, "Member 'X6NetClient_Debug_SetChannelReplicationPaused::bPause' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.Debug_SetConnectionLight
// 0x0001 (0x0001 - 0x0000)
struct X6NetClient_Debug_SetConnectionLight final
{
public:
	bool                                          bLight;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_Debug_SetConnectionLight) == 0x000001, "Wrong alignment on X6NetClient_Debug_SetConnectionLight");
static_assert(sizeof(X6NetClient_Debug_SetConnectionLight) == 0x000001, "Wrong size on X6NetClient_Debug_SetConnectionLight");
static_assert(offsetof(X6NetClient_Debug_SetConnectionLight, bLight) == 0x000000, "Member 'X6NetClient_Debug_SetConnectionLight::bLight' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.DebugConnectionLog_Lua
// 0x0001 (0x0001 - 0x0000)
struct X6NetClient_DebugConnectionLog_Lua final
{
public:
	bool                                          bDebug;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_DebugConnectionLog_Lua) == 0x000001, "Wrong alignment on X6NetClient_DebugConnectionLog_Lua");
static_assert(sizeof(X6NetClient_DebugConnectionLog_Lua) == 0x000001, "Wrong size on X6NetClient_DebugConnectionLog_Lua");
static_assert(offsetof(X6NetClient_DebugConnectionLog_Lua, bDebug) == 0x000000, "Member 'X6NetClient_DebugConnectionLog_Lua::bDebug' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.GetMultiPlayerMode
// 0x0004 (0x0004 - 0x0000)
struct X6NetClient_GetMultiPlayerMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_GetMultiPlayerMode) == 0x000004, "Wrong alignment on X6NetClient_GetMultiPlayerMode");
static_assert(sizeof(X6NetClient_GetMultiPlayerMode) == 0x000004, "Wrong size on X6NetClient_GetMultiPlayerMode");
static_assert(offsetof(X6NetClient_GetMultiPlayerMode, ReturnValue) == 0x000000, "Member 'X6NetClient_GetMultiPlayerMode::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.GetSeverTime
// 0x0008 (0x0008 - 0x0000)
struct X6NetClient_GetSeverTime final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_GetSeverTime) == 0x000008, "Wrong alignment on X6NetClient_GetSeverTime");
static_assert(sizeof(X6NetClient_GetSeverTime) == 0x000008, "Wrong size on X6NetClient_GetSeverTime");
static_assert(offsetof(X6NetClient_GetSeverTime, ReturnValue) == 0x000000, "Member 'X6NetClient_GetSeverTime::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.IsMultiPlayerMode
// 0x0001 (0x0001 - 0x0000)
struct X6NetClient_IsMultiPlayerMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_IsMultiPlayerMode) == 0x000001, "Wrong alignment on X6NetClient_IsMultiPlayerMode");
static_assert(sizeof(X6NetClient_IsMultiPlayerMode) == 0x000001, "Wrong size on X6NetClient_IsMultiPlayerMode");
static_assert(offsetof(X6NetClient_IsMultiPlayerMode, ReturnValue) == 0x000000, "Member 'X6NetClient_IsMultiPlayerMode::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.RegisterActorNetGUID_Lua
// 0x0010 (0x0010 - 0x0000)
struct X6NetClient_RegisterActorNetGUID_Lua final
{
public:
	int64                                         NetID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_RegisterActorNetGUID_Lua) == 0x000008, "Wrong alignment on X6NetClient_RegisterActorNetGUID_Lua");
static_assert(sizeof(X6NetClient_RegisterActorNetGUID_Lua) == 0x000010, "Wrong size on X6NetClient_RegisterActorNetGUID_Lua");
static_assert(offsetof(X6NetClient_RegisterActorNetGUID_Lua, NetID) == 0x000000, "Member 'X6NetClient_RegisterActorNetGUID_Lua::NetID' has a wrong offset!");
static_assert(offsetof(X6NetClient_RegisterActorNetGUID_Lua, Actor) == 0x000008, "Member 'X6NetClient_RegisterActorNetGUID_Lua::Actor' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.RemovePlayer
// 0x0008 (0x0008 - 0x0000)
struct X6NetClient_RemovePlayer final
{
public:
	int64                                         NetID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_RemovePlayer) == 0x000008, "Wrong alignment on X6NetClient_RemovePlayer");
static_assert(sizeof(X6NetClient_RemovePlayer) == 0x000008, "Wrong size on X6NetClient_RemovePlayer");
static_assert(offsetof(X6NetClient_RemovePlayer, NetID) == 0x000000, "Member 'X6NetClient_RemovePlayer::NetID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.SetChannelReplicationPaused
// 0x0018 (0x0018 - 0x0000)
struct X6NetClient_SetChannelReplicationPaused final
{
public:
	int64                                         NetClientID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         NetEntityID;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6NetClient_SetChannelReplicationPaused) == 0x000008, "Wrong alignment on X6NetClient_SetChannelReplicationPaused");
static_assert(sizeof(X6NetClient_SetChannelReplicationPaused) == 0x000018, "Wrong size on X6NetClient_SetChannelReplicationPaused");
static_assert(offsetof(X6NetClient_SetChannelReplicationPaused, NetClientID) == 0x000000, "Member 'X6NetClient_SetChannelReplicationPaused::NetClientID' has a wrong offset!");
static_assert(offsetof(X6NetClient_SetChannelReplicationPaused, NetEntityID) == 0x000008, "Member 'X6NetClient_SetChannelReplicationPaused::NetEntityID' has a wrong offset!");
static_assert(offsetof(X6NetClient_SetChannelReplicationPaused, bPause) == 0x000010, "Member 'X6NetClient_SetChannelReplicationPaused::bPause' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.SetConnectionLight
// 0x0010 (0x0010 - 0x0000)
struct X6NetClient_SetConnectionLight final
{
public:
	int64                                         NetClientID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLight;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6NetClient_SetConnectionLight) == 0x000008, "Wrong alignment on X6NetClient_SetConnectionLight");
static_assert(sizeof(X6NetClient_SetConnectionLight) == 0x000010, "Wrong size on X6NetClient_SetConnectionLight");
static_assert(offsetof(X6NetClient_SetConnectionLight, NetClientID) == 0x000000, "Member 'X6NetClient_SetConnectionLight::NetClientID' has a wrong offset!");
static_assert(offsetof(X6NetClient_SetConnectionLight, bLight) == 0x000008, "Member 'X6NetClient_SetConnectionLight::bLight' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.SetConnectionPriority
// 0x0010 (0x0010 - 0x0000)
struct X6NetClient_SetConnectionPriority final
{
public:
	int64                                         NetClientID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewReplicatePriority;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6NetClient_SetConnectionPriority) == 0x000008, "Wrong alignment on X6NetClient_SetConnectionPriority");
static_assert(sizeof(X6NetClient_SetConnectionPriority) == 0x000010, "Wrong size on X6NetClient_SetConnectionPriority");
static_assert(offsetof(X6NetClient_SetConnectionPriority, NetClientID) == 0x000000, "Member 'X6NetClient_SetConnectionPriority::NetClientID' has a wrong offset!");
static_assert(offsetof(X6NetClient_SetConnectionPriority, NewReplicatePriority) == 0x000008, "Member 'X6NetClient_SetConnectionPriority::NewReplicatePriority' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.SetLocalNetID
// 0x0008 (0x0008 - 0x0000)
struct X6NetClient_SetLocalNetID final
{
public:
	int64                                         NetID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_SetLocalNetID) == 0x000008, "Wrong alignment on X6NetClient_SetLocalNetID");
static_assert(sizeof(X6NetClient_SetLocalNetID) == 0x000008, "Wrong size on X6NetClient_SetLocalNetID");
static_assert(offsetof(X6NetClient_SetLocalNetID, NetID) == 0x000000, "Member 'X6NetClient_SetLocalNetID::NetID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.SetMultiPlayerMode
// 0x0004 (0x0004 - 0x0000)
struct X6NetClient_SetMultiPlayerMode final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_SetMultiPlayerMode) == 0x000004, "Wrong alignment on X6NetClient_SetMultiPlayerMode");
static_assert(sizeof(X6NetClient_SetMultiPlayerMode) == 0x000004, "Wrong size on X6NetClient_SetMultiPlayerMode");
static_assert(offsetof(X6NetClient_SetMultiPlayerMode, Mode) == 0x000000, "Member 'X6NetClient_SetMultiPlayerMode::Mode' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.SetNetProtoId
// 0x0008 (0x0008 - 0x0000)
struct X6NetClient_SetNetProtoId final
{
public:
	int32                                         SendProtoId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecvProtoId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_SetNetProtoId) == 0x000004, "Wrong alignment on X6NetClient_SetNetProtoId");
static_assert(sizeof(X6NetClient_SetNetProtoId) == 0x000008, "Wrong size on X6NetClient_SetNetProtoId");
static_assert(offsetof(X6NetClient_SetNetProtoId, SendProtoId) == 0x000000, "Member 'X6NetClient_SetNetProtoId::SendProtoId' has a wrong offset!");
static_assert(offsetof(X6NetClient_SetNetProtoId, RecvProtoId) == 0x000004, "Member 'X6NetClient_SetNetProtoId::RecvProtoId' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.SetSeverTime
// 0x0008 (0x0008 - 0x0000)
struct X6NetClient_SetSeverTime final
{
public:
	int64                                         Time;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_SetSeverTime) == 0x000008, "Wrong alignment on X6NetClient_SetSeverTime");
static_assert(sizeof(X6NetClient_SetSeverTime) == 0x000008, "Wrong size on X6NetClient_SetSeverTime");
static_assert(offsetof(X6NetClient_SetSeverTime, Time) == 0x000000, "Member 'X6NetClient_SetSeverTime::Time' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.UnbindSimulatedActor
// 0x0008 (0x0008 - 0x0000)
struct X6NetClient_UnbindSimulatedActor final
{
public:
	int64                                         NetClientID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_UnbindSimulatedActor) == 0x000008, "Wrong alignment on X6NetClient_UnbindSimulatedActor");
static_assert(sizeof(X6NetClient_UnbindSimulatedActor) == 0x000008, "Wrong size on X6NetClient_UnbindSimulatedActor");
static_assert(offsetof(X6NetClient_UnbindSimulatedActor, NetClientID) == 0x000000, "Member 'X6NetClient_UnbindSimulatedActor::NetClientID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClient.UnregisterNetGUID_Lua
// 0x0008 (0x0008 - 0x0000)
struct X6NetClient_UnregisterNetGUID_Lua final
{
public:
	int64                                         NetID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClient_UnregisterNetGUID_Lua) == 0x000008, "Wrong alignment on X6NetClient_UnregisterNetGUID_Lua");
static_assert(sizeof(X6NetClient_UnregisterNetGUID_Lua) == 0x000008, "Wrong size on X6NetClient_UnregisterNetGUID_Lua");
static_assert(offsetof(X6NetClient_UnregisterNetGUID_Lua, NetID) == 0x000000, "Member 'X6NetClient_UnregisterNetGUID_Lua::NetID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.AddPlayer
// 0x0010 (0x0010 - 0x0000)
struct X6NetClientV2_AddPlayer final
{
public:
	int64                                         NetID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EntityID;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_AddPlayer) == 0x000008, "Wrong alignment on X6NetClientV2_AddPlayer");
static_assert(sizeof(X6NetClientV2_AddPlayer) == 0x000010, "Wrong size on X6NetClientV2_AddPlayer");
static_assert(offsetof(X6NetClientV2_AddPlayer, NetID) == 0x000000, "Member 'X6NetClientV2_AddPlayer::NetID' has a wrong offset!");
static_assert(offsetof(X6NetClientV2_AddPlayer, EntityID) == 0x000008, "Member 'X6NetClientV2_AddPlayer::EntityID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.BindSimulatedActor
// 0x0010 (0x0010 - 0x0000)
struct X6NetClientV2_BindSimulatedActor final
{
public:
	int64                                         NetClientID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         NetEntityID;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_BindSimulatedActor) == 0x000008, "Wrong alignment on X6NetClientV2_BindSimulatedActor");
static_assert(sizeof(X6NetClientV2_BindSimulatedActor) == 0x000010, "Wrong size on X6NetClientV2_BindSimulatedActor");
static_assert(offsetof(X6NetClientV2_BindSimulatedActor, NetClientID) == 0x000000, "Member 'X6NetClientV2_BindSimulatedActor::NetClientID' has a wrong offset!");
static_assert(offsetof(X6NetClientV2_BindSimulatedActor, NetEntityID) == 0x000008, "Member 'X6NetClientV2_BindSimulatedActor::NetEntityID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.DebugConnectionLog_Lua
// 0x0001 (0x0001 - 0x0000)
struct X6NetClientV2_DebugConnectionLog_Lua final
{
public:
	bool                                          bDebug;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_DebugConnectionLog_Lua) == 0x000001, "Wrong alignment on X6NetClientV2_DebugConnectionLog_Lua");
static_assert(sizeof(X6NetClientV2_DebugConnectionLog_Lua) == 0x000001, "Wrong size on X6NetClientV2_DebugConnectionLog_Lua");
static_assert(offsetof(X6NetClientV2_DebugConnectionLog_Lua, bDebug) == 0x000000, "Member 'X6NetClientV2_DebugConnectionLog_Lua::bDebug' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.GetMultiPlayerMode
// 0x0004 (0x0004 - 0x0000)
struct X6NetClientV2_GetMultiPlayerMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_GetMultiPlayerMode) == 0x000004, "Wrong alignment on X6NetClientV2_GetMultiPlayerMode");
static_assert(sizeof(X6NetClientV2_GetMultiPlayerMode) == 0x000004, "Wrong size on X6NetClientV2_GetMultiPlayerMode");
static_assert(offsetof(X6NetClientV2_GetMultiPlayerMode, ReturnValue) == 0x000000, "Member 'X6NetClientV2_GetMultiPlayerMode::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.GetSeverTime
// 0x0008 (0x0008 - 0x0000)
struct X6NetClientV2_GetSeverTime final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_GetSeverTime) == 0x000008, "Wrong alignment on X6NetClientV2_GetSeverTime");
static_assert(sizeof(X6NetClientV2_GetSeverTime) == 0x000008, "Wrong size on X6NetClientV2_GetSeverTime");
static_assert(offsetof(X6NetClientV2_GetSeverTime, ReturnValue) == 0x000000, "Member 'X6NetClientV2_GetSeverTime::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.IsMultiPlayerMode
// 0x0001 (0x0001 - 0x0000)
struct X6NetClientV2_IsMultiPlayerMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_IsMultiPlayerMode) == 0x000001, "Wrong alignment on X6NetClientV2_IsMultiPlayerMode");
static_assert(sizeof(X6NetClientV2_IsMultiPlayerMode) == 0x000001, "Wrong size on X6NetClientV2_IsMultiPlayerMode");
static_assert(offsetof(X6NetClientV2_IsMultiPlayerMode, ReturnValue) == 0x000000, "Member 'X6NetClientV2_IsMultiPlayerMode::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.RegisterActorNetGUID_Lua
// 0x0010 (0x0010 - 0x0000)
struct X6NetClientV2_RegisterActorNetGUID_Lua final
{
public:
	int64                                         NetID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_RegisterActorNetGUID_Lua) == 0x000008, "Wrong alignment on X6NetClientV2_RegisterActorNetGUID_Lua");
static_assert(sizeof(X6NetClientV2_RegisterActorNetGUID_Lua) == 0x000010, "Wrong size on X6NetClientV2_RegisterActorNetGUID_Lua");
static_assert(offsetof(X6NetClientV2_RegisterActorNetGUID_Lua, NetID) == 0x000000, "Member 'X6NetClientV2_RegisterActorNetGUID_Lua::NetID' has a wrong offset!");
static_assert(offsetof(X6NetClientV2_RegisterActorNetGUID_Lua, Actor) == 0x000008, "Member 'X6NetClientV2_RegisterActorNetGUID_Lua::Actor' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.RemovePlayer
// 0x0008 (0x0008 - 0x0000)
struct X6NetClientV2_RemovePlayer final
{
public:
	int64                                         NetID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_RemovePlayer) == 0x000008, "Wrong alignment on X6NetClientV2_RemovePlayer");
static_assert(sizeof(X6NetClientV2_RemovePlayer) == 0x000008, "Wrong size on X6NetClientV2_RemovePlayer");
static_assert(offsetof(X6NetClientV2_RemovePlayer, NetID) == 0x000000, "Member 'X6NetClientV2_RemovePlayer::NetID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.SetLocalNetID
// 0x0008 (0x0008 - 0x0000)
struct X6NetClientV2_SetLocalNetID final
{
public:
	int64                                         NetID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_SetLocalNetID) == 0x000008, "Wrong alignment on X6NetClientV2_SetLocalNetID");
static_assert(sizeof(X6NetClientV2_SetLocalNetID) == 0x000008, "Wrong size on X6NetClientV2_SetLocalNetID");
static_assert(offsetof(X6NetClientV2_SetLocalNetID, NetID) == 0x000000, "Member 'X6NetClientV2_SetLocalNetID::NetID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.SetMultiPlayerMode
// 0x0004 (0x0004 - 0x0000)
struct X6NetClientV2_SetMultiPlayerMode final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_SetMultiPlayerMode) == 0x000004, "Wrong alignment on X6NetClientV2_SetMultiPlayerMode");
static_assert(sizeof(X6NetClientV2_SetMultiPlayerMode) == 0x000004, "Wrong size on X6NetClientV2_SetMultiPlayerMode");
static_assert(offsetof(X6NetClientV2_SetMultiPlayerMode, Mode) == 0x000000, "Member 'X6NetClientV2_SetMultiPlayerMode::Mode' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.SetNetProtoId
// 0x0008 (0x0008 - 0x0000)
struct X6NetClientV2_SetNetProtoId final
{
public:
	int32                                         SendProtoId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecvProtoId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_SetNetProtoId) == 0x000004, "Wrong alignment on X6NetClientV2_SetNetProtoId");
static_assert(sizeof(X6NetClientV2_SetNetProtoId) == 0x000008, "Wrong size on X6NetClientV2_SetNetProtoId");
static_assert(offsetof(X6NetClientV2_SetNetProtoId, SendProtoId) == 0x000000, "Member 'X6NetClientV2_SetNetProtoId::SendProtoId' has a wrong offset!");
static_assert(offsetof(X6NetClientV2_SetNetProtoId, RecvProtoId) == 0x000004, "Member 'X6NetClientV2_SetNetProtoId::RecvProtoId' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.SetPlayerCustomReplicate
// 0x0010 (0x0010 - 0x0000)
struct X6NetClientV2_SetPlayerCustomReplicate final
{
public:
	int64                                         playerId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomReplicate;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6NetClientV2_SetPlayerCustomReplicate) == 0x000008, "Wrong alignment on X6NetClientV2_SetPlayerCustomReplicate");
static_assert(sizeof(X6NetClientV2_SetPlayerCustomReplicate) == 0x000010, "Wrong size on X6NetClientV2_SetPlayerCustomReplicate");
static_assert(offsetof(X6NetClientV2_SetPlayerCustomReplicate, playerId) == 0x000000, "Member 'X6NetClientV2_SetPlayerCustomReplicate::playerId' has a wrong offset!");
static_assert(offsetof(X6NetClientV2_SetPlayerCustomReplicate, bCustomReplicate) == 0x000008, "Member 'X6NetClientV2_SetPlayerCustomReplicate::bCustomReplicate' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.SetPlayerForceReplicate
// 0x0008 (0x0008 - 0x0000)
struct X6NetClientV2_SetPlayerForceReplicate final
{
public:
	int64                                         playerId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_SetPlayerForceReplicate) == 0x000008, "Wrong alignment on X6NetClientV2_SetPlayerForceReplicate");
static_assert(sizeof(X6NetClientV2_SetPlayerForceReplicate) == 0x000008, "Wrong size on X6NetClientV2_SetPlayerForceReplicate");
static_assert(offsetof(X6NetClientV2_SetPlayerForceReplicate, playerId) == 0x000000, "Member 'X6NetClientV2_SetPlayerForceReplicate::playerId' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.SetPlayerLightweight
// 0x0010 (0x0010 - 0x0000)
struct X6NetClientV2_SetPlayerLightweight final
{
public:
	int64                                         playerId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightweight;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6NetClientV2_SetPlayerLightweight) == 0x000008, "Wrong alignment on X6NetClientV2_SetPlayerLightweight");
static_assert(sizeof(X6NetClientV2_SetPlayerLightweight) == 0x000010, "Wrong size on X6NetClientV2_SetPlayerLightweight");
static_assert(offsetof(X6NetClientV2_SetPlayerLightweight, playerId) == 0x000000, "Member 'X6NetClientV2_SetPlayerLightweight::playerId' has a wrong offset!");
static_assert(offsetof(X6NetClientV2_SetPlayerLightweight, bLightweight) == 0x000008, "Member 'X6NetClientV2_SetPlayerLightweight::bLightweight' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.SetSeverTime
// 0x0008 (0x0008 - 0x0000)
struct X6NetClientV2_SetSeverTime final
{
public:
	int64                                         Time;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_SetSeverTime) == 0x000008, "Wrong alignment on X6NetClientV2_SetSeverTime");
static_assert(sizeof(X6NetClientV2_SetSeverTime) == 0x000008, "Wrong size on X6NetClientV2_SetSeverTime");
static_assert(offsetof(X6NetClientV2_SetSeverTime, Time) == 0x000000, "Member 'X6NetClientV2_SetSeverTime::Time' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.UnbindSimulatedActor
// 0x0008 (0x0008 - 0x0000)
struct X6NetClientV2_UnbindSimulatedActor final
{
public:
	int64                                         NetClientID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_UnbindSimulatedActor) == 0x000008, "Wrong alignment on X6NetClientV2_UnbindSimulatedActor");
static_assert(sizeof(X6NetClientV2_UnbindSimulatedActor) == 0x000008, "Wrong size on X6NetClientV2_UnbindSimulatedActor");
static_assert(offsetof(X6NetClientV2_UnbindSimulatedActor, NetClientID) == 0x000000, "Member 'X6NetClientV2_UnbindSimulatedActor::NetClientID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.UnregisterNetGUID_Lua
// 0x0008 (0x0008 - 0x0000)
struct X6NetClientV2_UnregisterNetGUID_Lua final
{
public:
	int64                                         NetID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetClientV2_UnregisterNetGUID_Lua) == 0x000008, "Wrong alignment on X6NetClientV2_UnregisterNetGUID_Lua");
static_assert(sizeof(X6NetClientV2_UnregisterNetGUID_Lua) == 0x000008, "Wrong size on X6NetClientV2_UnregisterNetGUID_Lua");
static_assert(offsetof(X6NetClientV2_UnregisterNetGUID_Lua, NetID) == 0x000000, "Member 'X6NetClientV2_UnregisterNetGUID_Lua::NetID' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetClientV2.UploadNetLog
// 0x0040 (0x0040 - 0x0000)
struct X6NetClientV2_UploadNetLog final
{
public:
	bool                                          InternalEnv;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LogFilePath;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, int32 ResponseCode, const class FString& ResponseString)> onHttpRequestCompleted; // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6NetClientV2_UploadNetLog) == 0x000008, "Wrong alignment on X6NetClientV2_UploadNetLog");
static_assert(sizeof(X6NetClientV2_UploadNetLog) == 0x000040, "Wrong size on X6NetClientV2_UploadNetLog");
static_assert(offsetof(X6NetClientV2_UploadNetLog, InternalEnv) == 0x000000, "Member 'X6NetClientV2_UploadNetLog::InternalEnv' has a wrong offset!");
static_assert(offsetof(X6NetClientV2_UploadNetLog, SessionId) == 0x000008, "Member 'X6NetClientV2_UploadNetLog::SessionId' has a wrong offset!");
static_assert(offsetof(X6NetClientV2_UploadNetLog, LogFilePath) == 0x000018, "Member 'X6NetClientV2_UploadNetLog::LogFilePath' has a wrong offset!");
static_assert(offsetof(X6NetClientV2_UploadNetLog, onHttpRequestCompleted) == 0x000028, "Member 'X6NetClientV2_UploadNetLog::onHttpRequestCompleted' has a wrong offset!");
static_assert(offsetof(X6NetClientV2_UploadNetLog, ReturnValue) == 0x000038, "Member 'X6NetClientV2_UploadNetLog::ReturnValue' has a wrong offset!");

// Function PaperLuaFrameworkBase.X6NetLogSettings.GetX6NetLogSettings
// 0x0008 (0x0008 - 0x0000)
struct X6NetLogSettings_GetX6NetLogSettings final
{
public:
	const class UX6NetLogSettings*                ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6NetLogSettings_GetX6NetLogSettings) == 0x000008, "Wrong alignment on X6NetLogSettings_GetX6NetLogSettings");
static_assert(sizeof(X6NetLogSettings_GetX6NetLogSettings) == 0x000008, "Wrong size on X6NetLogSettings_GetX6NetLogSettings");
static_assert(offsetof(X6NetLogSettings_GetX6NetLogSettings, ReturnValue) == 0x000000, "Member 'X6NetLogSettings_GetX6NetLogSettings::ReturnValue' has a wrong offset!");

}

