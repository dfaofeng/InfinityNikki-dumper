#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TargetingSystem

#include "Basic.hpp"

#include "TargetingSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function TargetingSystem.AbilityTask_PerformTargeting.PerformFilteringRequest
// 0x0030 (0x0030 - 0x0000)
struct AbilityTask_PerformTargeting_PerformFilteringRequest final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTargetingPreset*                       TargetingPreset;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InTargets;                                         // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAllowAsync;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_PerformTargeting*          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_PerformTargeting_PerformFilteringRequest) == 0x000008, "Wrong alignment on AbilityTask_PerformTargeting_PerformFilteringRequest");
static_assert(sizeof(AbilityTask_PerformTargeting_PerformFilteringRequest) == 0x000030, "Wrong size on AbilityTask_PerformTargeting_PerformFilteringRequest");
static_assert(offsetof(AbilityTask_PerformTargeting_PerformFilteringRequest, OwningAbility) == 0x000000, "Member 'AbilityTask_PerformTargeting_PerformFilteringRequest::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_PerformTargeting_PerformFilteringRequest, TargetingPreset) == 0x000008, "Member 'AbilityTask_PerformTargeting_PerformFilteringRequest::TargetingPreset' has a wrong offset!");
static_assert(offsetof(AbilityTask_PerformTargeting_PerformFilteringRequest, InTargets) == 0x000010, "Member 'AbilityTask_PerformTargeting_PerformFilteringRequest::InTargets' has a wrong offset!");
static_assert(offsetof(AbilityTask_PerformTargeting_PerformFilteringRequest, bAllowAsync) == 0x000020, "Member 'AbilityTask_PerformTargeting_PerformFilteringRequest::bAllowAsync' has a wrong offset!");
static_assert(offsetof(AbilityTask_PerformTargeting_PerformFilteringRequest, ReturnValue) == 0x000028, "Member 'AbilityTask_PerformTargeting_PerformFilteringRequest::ReturnValue' has a wrong offset!");

// Function TargetingSystem.AbilityTask_PerformTargeting.PerformTargetingRequest
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_PerformTargeting_PerformTargetingRequest final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTargetingPreset*                       InTargetingPreset;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowAsync;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_PerformTargeting*          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_PerformTargeting_PerformTargetingRequest) == 0x000008, "Wrong alignment on AbilityTask_PerformTargeting_PerformTargetingRequest");
static_assert(sizeof(AbilityTask_PerformTargeting_PerformTargetingRequest) == 0x000020, "Wrong size on AbilityTask_PerformTargeting_PerformTargetingRequest");
static_assert(offsetof(AbilityTask_PerformTargeting_PerformTargetingRequest, OwningAbility) == 0x000000, "Member 'AbilityTask_PerformTargeting_PerformTargetingRequest::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_PerformTargeting_PerformTargetingRequest, InTargetingPreset) == 0x000008, "Member 'AbilityTask_PerformTargeting_PerformTargetingRequest::InTargetingPreset' has a wrong offset!");
static_assert(offsetof(AbilityTask_PerformTargeting_PerformTargetingRequest, bAllowAsync) == 0x000010, "Member 'AbilityTask_PerformTargeting_PerformTargetingRequest::bAllowAsync' has a wrong offset!");
static_assert(offsetof(AbilityTask_PerformTargeting_PerformTargetingRequest, ReturnValue) == 0x000018, "Member 'AbilityTask_PerformTargeting_PerformTargetingRequest::ReturnValue' has a wrong offset!");

// Function TargetingSystem.AsyncAction_PerformTargeting.PerformFilteringRequest
// 0x0030 (0x0030 - 0x0000)
struct AsyncAction_PerformTargeting_PerformFilteringRequest final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTargetingPreset*                       TargetingPreset_0;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAsyncTargeting_0;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InTargets;                                         // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAsyncAction_PerformTargeting*          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_PerformTargeting_PerformFilteringRequest) == 0x000008, "Wrong alignment on AsyncAction_PerformTargeting_PerformFilteringRequest");
static_assert(sizeof(AsyncAction_PerformTargeting_PerformFilteringRequest) == 0x000030, "Wrong size on AsyncAction_PerformTargeting_PerformFilteringRequest");
static_assert(offsetof(AsyncAction_PerformTargeting_PerformFilteringRequest, SourceActor) == 0x000000, "Member 'AsyncAction_PerformTargeting_PerformFilteringRequest::SourceActor' has a wrong offset!");
static_assert(offsetof(AsyncAction_PerformTargeting_PerformFilteringRequest, TargetingPreset_0) == 0x000008, "Member 'AsyncAction_PerformTargeting_PerformFilteringRequest::TargetingPreset_0' has a wrong offset!");
static_assert(offsetof(AsyncAction_PerformTargeting_PerformFilteringRequest, bUseAsyncTargeting_0) == 0x000010, "Member 'AsyncAction_PerformTargeting_PerformFilteringRequest::bUseAsyncTargeting_0' has a wrong offset!");
static_assert(offsetof(AsyncAction_PerformTargeting_PerformFilteringRequest, InTargets) == 0x000018, "Member 'AsyncAction_PerformTargeting_PerformFilteringRequest::InTargets' has a wrong offset!");
static_assert(offsetof(AsyncAction_PerformTargeting_PerformFilteringRequest, ReturnValue) == 0x000028, "Member 'AsyncAction_PerformTargeting_PerformFilteringRequest::ReturnValue' has a wrong offset!");

// Function TargetingSystem.AsyncAction_PerformTargeting.PerformTargetingRequest
// 0x0020 (0x0020 - 0x0000)
struct AsyncAction_PerformTargeting_PerformTargetingRequest final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTargetingPreset*                       TargetingPreset_0;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAsyncTargeting_0;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncAction_PerformTargeting*          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_PerformTargeting_PerformTargetingRequest) == 0x000008, "Wrong alignment on AsyncAction_PerformTargeting_PerformTargetingRequest");
static_assert(sizeof(AsyncAction_PerformTargeting_PerformTargetingRequest) == 0x000020, "Wrong size on AsyncAction_PerformTargeting_PerformTargetingRequest");
static_assert(offsetof(AsyncAction_PerformTargeting_PerformTargetingRequest, SourceActor) == 0x000000, "Member 'AsyncAction_PerformTargeting_PerformTargetingRequest::SourceActor' has a wrong offset!");
static_assert(offsetof(AsyncAction_PerformTargeting_PerformTargetingRequest, TargetingPreset_0) == 0x000008, "Member 'AsyncAction_PerformTargeting_PerformTargetingRequest::TargetingPreset_0' has a wrong offset!");
static_assert(offsetof(AsyncAction_PerformTargeting_PerformTargetingRequest, bUseAsyncTargeting_0) == 0x000010, "Member 'AsyncAction_PerformTargeting_PerformTargetingRequest::bUseAsyncTargeting_0' has a wrong offset!");
static_assert(offsetof(AsyncAction_PerformTargeting_PerformTargetingRequest, ReturnValue) == 0x000018, "Member 'AsyncAction_PerformTargeting_PerformTargetingRequest::ReturnValue' has a wrong offset!");

// Function TargetingSystem.AsyncAction_PerformTargeting.GetTargetingHandle
// 0x0004 (0x0004 - 0x0000)
struct AsyncAction_PerformTargeting_GetTargetingHandle final
{
public:
	struct FTargetingRequestHandle                ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_PerformTargeting_GetTargetingHandle) == 0x000004, "Wrong alignment on AsyncAction_PerformTargeting_GetTargetingHandle");
static_assert(sizeof(AsyncAction_PerformTargeting_GetTargetingHandle) == 0x000004, "Wrong size on AsyncAction_PerformTargeting_GetTargetingHandle");
static_assert(offsetof(AsyncAction_PerformTargeting_GetTargetingHandle, ReturnValue) == 0x000000, "Member 'AsyncAction_PerformTargeting_GetTargetingHandle::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingTask.GetTargetingSubsystem
// 0x0010 (0x0010 - 0x0000)
struct TargetingTask_GetTargetingSubsystem final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTargetingSubsystem*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingTask_GetTargetingSubsystem) == 0x000008, "Wrong alignment on TargetingTask_GetTargetingSubsystem");
static_assert(sizeof(TargetingTask_GetTargetingSubsystem) == 0x000010, "Wrong size on TargetingTask_GetTargetingSubsystem");
static_assert(offsetof(TargetingTask_GetTargetingSubsystem, TargetingHandle) == 0x000000, "Member 'TargetingTask_GetTargetingSubsystem::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingTask_GetTargetingSubsystem, ReturnValue) == 0x000008, "Member 'TargetingTask_GetTargetingSubsystem::ReturnValue' has a wrong offset!");

// Function TargetingSystem.SimpleTargetingFilterTask.BP_ShouldFilterTarget
// 0x0110 (0x0110 - 0x0000)
struct SimpleTargetingFilterTask_BP_ShouldFilterTarget final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTargetingDefaultResultData            TargetData;                                        // 0x0008(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleTargetingFilterTask_BP_ShouldFilterTarget) == 0x000008, "Wrong alignment on SimpleTargetingFilterTask_BP_ShouldFilterTarget");
static_assert(sizeof(SimpleTargetingFilterTask_BP_ShouldFilterTarget) == 0x000110, "Wrong size on SimpleTargetingFilterTask_BP_ShouldFilterTarget");
static_assert(offsetof(SimpleTargetingFilterTask_BP_ShouldFilterTarget, TargetingHandle) == 0x000000, "Member 'SimpleTargetingFilterTask_BP_ShouldFilterTarget::TargetingHandle' has a wrong offset!");
static_assert(offsetof(SimpleTargetingFilterTask_BP_ShouldFilterTarget, TargetData) == 0x000008, "Member 'SimpleTargetingFilterTask_BP_ShouldFilterTarget::TargetData' has a wrong offset!");
static_assert(offsetof(SimpleTargetingFilterTask_BP_ShouldFilterTarget, ReturnValue) == 0x000108, "Member 'SimpleTargetingFilterTask_BP_ShouldFilterTarget::ReturnValue' has a wrong offset!");

// Function TargetingSystem.SimpleTargetingSelectionTask.AddHitResult
// 0x0108 (0x0108 - 0x0000)
struct SimpleTargetingSelectionTask_AddHitResult final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0008(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleTargetingSelectionTask_AddHitResult) == 0x000008, "Wrong alignment on SimpleTargetingSelectionTask_AddHitResult");
static_assert(sizeof(SimpleTargetingSelectionTask_AddHitResult) == 0x000108, "Wrong size on SimpleTargetingSelectionTask_AddHitResult");
static_assert(offsetof(SimpleTargetingSelectionTask_AddHitResult, TargetingHandle) == 0x000000, "Member 'SimpleTargetingSelectionTask_AddHitResult::TargetingHandle' has a wrong offset!");
static_assert(offsetof(SimpleTargetingSelectionTask_AddHitResult, HitResult) == 0x000008, "Member 'SimpleTargetingSelectionTask_AddHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(SimpleTargetingSelectionTask_AddHitResult, ReturnValue) == 0x000100, "Member 'SimpleTargetingSelectionTask_AddHitResult::ReturnValue' has a wrong offset!");

// Function TargetingSystem.SimpleTargetingSelectionTask.AddTargetActor
// 0x0018 (0x0018 - 0x0000)
struct SimpleTargetingSelectionTask_AddTargetActor final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleTargetingSelectionTask_AddTargetActor) == 0x000008, "Wrong alignment on SimpleTargetingSelectionTask_AddTargetActor");
static_assert(sizeof(SimpleTargetingSelectionTask_AddTargetActor) == 0x000018, "Wrong size on SimpleTargetingSelectionTask_AddTargetActor");
static_assert(offsetof(SimpleTargetingSelectionTask_AddTargetActor, TargetingHandle) == 0x000000, "Member 'SimpleTargetingSelectionTask_AddTargetActor::TargetingHandle' has a wrong offset!");
static_assert(offsetof(SimpleTargetingSelectionTask_AddTargetActor, Actor) == 0x000008, "Member 'SimpleTargetingSelectionTask_AddTargetActor::Actor' has a wrong offset!");
static_assert(offsetof(SimpleTargetingSelectionTask_AddTargetActor, ReturnValue) == 0x000010, "Member 'SimpleTargetingSelectionTask_AddTargetActor::ReturnValue' has a wrong offset!");

// Function TargetingSystem.SimpleTargetingSelectionTask.SelectTargets
// 0x0050 (0x0050 - 0x0000)
struct SimpleTargetingSelectionTask_SelectTargets final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTargetingSourceContext                SourceContext;                                     // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SimpleTargetingSelectionTask_SelectTargets) == 0x000008, "Wrong alignment on SimpleTargetingSelectionTask_SelectTargets");
static_assert(sizeof(SimpleTargetingSelectionTask_SelectTargets) == 0x000050, "Wrong size on SimpleTargetingSelectionTask_SelectTargets");
static_assert(offsetof(SimpleTargetingSelectionTask_SelectTargets, TargetingHandle) == 0x000000, "Member 'SimpleTargetingSelectionTask_SelectTargets::TargetingHandle' has a wrong offset!");
static_assert(offsetof(SimpleTargetingSelectionTask_SelectTargets, SourceContext) == 0x000008, "Member 'SimpleTargetingSelectionTask_SelectTargets::SourceContext' has a wrong offset!");

// Function TargetingSystem.SimpleTargetingSortTask.BP_GetScoreForTarget
// 0x0110 (0x0110 - 0x0000)
struct SimpleTargetingSortTask_BP_GetScoreForTarget final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTargetingDefaultResultData            TargetData;                                        // 0x0008(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SimpleTargetingSortTask_BP_GetScoreForTarget) == 0x000008, "Wrong alignment on SimpleTargetingSortTask_BP_GetScoreForTarget");
static_assert(sizeof(SimpleTargetingSortTask_BP_GetScoreForTarget) == 0x000110, "Wrong size on SimpleTargetingSortTask_BP_GetScoreForTarget");
static_assert(offsetof(SimpleTargetingSortTask_BP_GetScoreForTarget, TargetingHandle) == 0x000000, "Member 'SimpleTargetingSortTask_BP_GetScoreForTarget::TargetingHandle' has a wrong offset!");
static_assert(offsetof(SimpleTargetingSortTask_BP_GetScoreForTarget, TargetData) == 0x000008, "Member 'SimpleTargetingSortTask_BP_GetScoreForTarget::TargetData' has a wrong offset!");
static_assert(offsetof(SimpleTargetingSortTask_BP_GetScoreForTarget, ReturnValue) == 0x000108, "Member 'SimpleTargetingSortTask_BP_GetScoreForTarget::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_AOE.GetSourceLocation
// 0x0020 (0x0020 - 0x0000)
struct TargetingSelectionTask_AOE_GetSourceLocation final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_AOE_GetSourceLocation) == 0x000008, "Wrong alignment on TargetingSelectionTask_AOE_GetSourceLocation");
static_assert(sizeof(TargetingSelectionTask_AOE_GetSourceLocation) == 0x000020, "Wrong size on TargetingSelectionTask_AOE_GetSourceLocation");
static_assert(offsetof(TargetingSelectionTask_AOE_GetSourceLocation, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_AOE_GetSourceLocation::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_AOE_GetSourceLocation, ReturnValue) == 0x000008, "Member 'TargetingSelectionTask_AOE_GetSourceLocation::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_AOE.GetSourceOffset
// 0x0020 (0x0020 - 0x0000)
struct TargetingSelectionTask_AOE_GetSourceOffset final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_AOE_GetSourceOffset) == 0x000008, "Wrong alignment on TargetingSelectionTask_AOE_GetSourceOffset");
static_assert(sizeof(TargetingSelectionTask_AOE_GetSourceOffset) == 0x000020, "Wrong size on TargetingSelectionTask_AOE_GetSourceOffset");
static_assert(offsetof(TargetingSelectionTask_AOE_GetSourceOffset, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_AOE_GetSourceOffset::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_AOE_GetSourceOffset, ReturnValue) == 0x000008, "Member 'TargetingSelectionTask_AOE_GetSourceOffset::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_AOE.GetSourceRotation
// 0x0030 (0x0030 - 0x0000)
struct TargetingSelectionTask_AOE_GetSourceRotation final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_AOE_GetSourceRotation) == 0x000010, "Wrong alignment on TargetingSelectionTask_AOE_GetSourceRotation");
static_assert(sizeof(TargetingSelectionTask_AOE_GetSourceRotation) == 0x000030, "Wrong size on TargetingSelectionTask_AOE_GetSourceRotation");
static_assert(offsetof(TargetingSelectionTask_AOE_GetSourceRotation, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_AOE_GetSourceRotation::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_AOE_GetSourceRotation, ReturnValue) == 0x000010, "Member 'TargetingSelectionTask_AOE_GetSourceRotation::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_Trace.GetAdditionalActorsToIgnore
// 0x0018 (0x0018 - 0x0000)
struct TargetingSelectionTask_Trace_GetAdditionalActorsToIgnore final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         OutAdditionalActorsToIgnore;                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_Trace_GetAdditionalActorsToIgnore) == 0x000008, "Wrong alignment on TargetingSelectionTask_Trace_GetAdditionalActorsToIgnore");
static_assert(sizeof(TargetingSelectionTask_Trace_GetAdditionalActorsToIgnore) == 0x000018, "Wrong size on TargetingSelectionTask_Trace_GetAdditionalActorsToIgnore");
static_assert(offsetof(TargetingSelectionTask_Trace_GetAdditionalActorsToIgnore, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_Trace_GetAdditionalActorsToIgnore::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_Trace_GetAdditionalActorsToIgnore, OutAdditionalActorsToIgnore) == 0x000008, "Member 'TargetingSelectionTask_Trace_GetAdditionalActorsToIgnore::OutAdditionalActorsToIgnore' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_Trace.GetSourceLocation
// 0x0020 (0x0020 - 0x0000)
struct TargetingSelectionTask_Trace_GetSourceLocation final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_Trace_GetSourceLocation) == 0x000008, "Wrong alignment on TargetingSelectionTask_Trace_GetSourceLocation");
static_assert(sizeof(TargetingSelectionTask_Trace_GetSourceLocation) == 0x000020, "Wrong size on TargetingSelectionTask_Trace_GetSourceLocation");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSourceLocation, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_Trace_GetSourceLocation::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSourceLocation, ReturnValue) == 0x000008, "Member 'TargetingSelectionTask_Trace_GetSourceLocation::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_Trace.GetSourceOffset
// 0x0020 (0x0020 - 0x0000)
struct TargetingSelectionTask_Trace_GetSourceOffset final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_Trace_GetSourceOffset) == 0x000008, "Wrong alignment on TargetingSelectionTask_Trace_GetSourceOffset");
static_assert(sizeof(TargetingSelectionTask_Trace_GetSourceOffset) == 0x000020, "Wrong size on TargetingSelectionTask_Trace_GetSourceOffset");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSourceOffset, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_Trace_GetSourceOffset::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSourceOffset, ReturnValue) == 0x000008, "Member 'TargetingSelectionTask_Trace_GetSourceOffset::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_Trace.GetSweptTraceBoxHalfExtents
// 0x0020 (0x0020 - 0x0000)
struct TargetingSelectionTask_Trace_GetSweptTraceBoxHalfExtents final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_Trace_GetSweptTraceBoxHalfExtents) == 0x000008, "Wrong alignment on TargetingSelectionTask_Trace_GetSweptTraceBoxHalfExtents");
static_assert(sizeof(TargetingSelectionTask_Trace_GetSweptTraceBoxHalfExtents) == 0x000020, "Wrong size on TargetingSelectionTask_Trace_GetSweptTraceBoxHalfExtents");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSweptTraceBoxHalfExtents, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_Trace_GetSweptTraceBoxHalfExtents::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSweptTraceBoxHalfExtents, ReturnValue) == 0x000008, "Member 'TargetingSelectionTask_Trace_GetSweptTraceBoxHalfExtents::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_Trace.GetSweptTraceCapsuleHalfHeight
// 0x0008 (0x0008 - 0x0000)
struct TargetingSelectionTask_Trace_GetSweptTraceCapsuleHalfHeight final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_Trace_GetSweptTraceCapsuleHalfHeight) == 0x000004, "Wrong alignment on TargetingSelectionTask_Trace_GetSweptTraceCapsuleHalfHeight");
static_assert(sizeof(TargetingSelectionTask_Trace_GetSweptTraceCapsuleHalfHeight) == 0x000008, "Wrong size on TargetingSelectionTask_Trace_GetSweptTraceCapsuleHalfHeight");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSweptTraceCapsuleHalfHeight, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_Trace_GetSweptTraceCapsuleHalfHeight::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSweptTraceCapsuleHalfHeight, ReturnValue) == 0x000004, "Member 'TargetingSelectionTask_Trace_GetSweptTraceCapsuleHalfHeight::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_Trace.GetSweptTraceRadius
// 0x0008 (0x0008 - 0x0000)
struct TargetingSelectionTask_Trace_GetSweptTraceRadius final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_Trace_GetSweptTraceRadius) == 0x000004, "Wrong alignment on TargetingSelectionTask_Trace_GetSweptTraceRadius");
static_assert(sizeof(TargetingSelectionTask_Trace_GetSweptTraceRadius) == 0x000008, "Wrong size on TargetingSelectionTask_Trace_GetSweptTraceRadius");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSweptTraceRadius, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_Trace_GetSweptTraceRadius::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSweptTraceRadius, ReturnValue) == 0x000004, "Member 'TargetingSelectionTask_Trace_GetSweptTraceRadius::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_Trace.GetSweptTraceRotation
// 0x0020 (0x0020 - 0x0000)
struct TargetingSelectionTask_Trace_GetSweptTraceRotation final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_Trace_GetSweptTraceRotation) == 0x000008, "Wrong alignment on TargetingSelectionTask_Trace_GetSweptTraceRotation");
static_assert(sizeof(TargetingSelectionTask_Trace_GetSweptTraceRotation) == 0x000020, "Wrong size on TargetingSelectionTask_Trace_GetSweptTraceRotation");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSweptTraceRotation, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_Trace_GetSweptTraceRotation::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_Trace_GetSweptTraceRotation, ReturnValue) == 0x000008, "Member 'TargetingSelectionTask_Trace_GetSweptTraceRotation::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_Trace.GetTraceDirection
// 0x0020 (0x0020 - 0x0000)
struct TargetingSelectionTask_Trace_GetTraceDirection final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_Trace_GetTraceDirection) == 0x000008, "Wrong alignment on TargetingSelectionTask_Trace_GetTraceDirection");
static_assert(sizeof(TargetingSelectionTask_Trace_GetTraceDirection) == 0x000020, "Wrong size on TargetingSelectionTask_Trace_GetTraceDirection");
static_assert(offsetof(TargetingSelectionTask_Trace_GetTraceDirection, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_Trace_GetTraceDirection::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_Trace_GetTraceDirection, ReturnValue) == 0x000008, "Member 'TargetingSelectionTask_Trace_GetTraceDirection::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSelectionTask_Trace.GetTraceLength
// 0x0008 (0x0008 - 0x0000)
struct TargetingSelectionTask_Trace_GetTraceLength final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSelectionTask_Trace_GetTraceLength) == 0x000004, "Wrong alignment on TargetingSelectionTask_Trace_GetTraceLength");
static_assert(sizeof(TargetingSelectionTask_Trace_GetTraceLength) == 0x000008, "Wrong size on TargetingSelectionTask_Trace_GetTraceLength");
static_assert(offsetof(TargetingSelectionTask_Trace_GetTraceLength, TargetingHandle) == 0x000000, "Member 'TargetingSelectionTask_Trace_GetTraceLength::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSelectionTask_Trace_GetTraceLength, ReturnValue) == 0x000004, "Member 'TargetingSelectionTask_Trace_GetTraceLength::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSubsystem.OverrideCollisionQueryTaskData
// 0x0018 (0x0018 - 0x0000)
struct TargetingSubsystem_OverrideCollisionQueryTaskData final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCollisionQueryTaskData                CollisionQueryDataOverride;                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSubsystem_OverrideCollisionQueryTaskData) == 0x000008, "Wrong alignment on TargetingSubsystem_OverrideCollisionQueryTaskData");
static_assert(sizeof(TargetingSubsystem_OverrideCollisionQueryTaskData) == 0x000018, "Wrong size on TargetingSubsystem_OverrideCollisionQueryTaskData");
static_assert(offsetof(TargetingSubsystem_OverrideCollisionQueryTaskData, TargetingHandle) == 0x000000, "Member 'TargetingSubsystem_OverrideCollisionQueryTaskData::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSubsystem_OverrideCollisionQueryTaskData, CollisionQueryDataOverride) == 0x000008, "Member 'TargetingSubsystem_OverrideCollisionQueryTaskData::CollisionQueryDataOverride' has a wrong offset!");

// Function TargetingSystem.TargetingSubsystem.ExecuteTargetingRequest
// 0x0060 (0x0060 - 0x0000)
struct TargetingSubsystem_ExecuteTargetingRequest final
{
public:
	const class UTargetingPreset*                 TargetingPreset;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTargetingSourceContext                InSourceContext;                                   // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FTargetingRequestHandle& TargetingRequestHandle)> CompletionDynamicDelegate; // 0x0050(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSubsystem_ExecuteTargetingRequest) == 0x000008, "Wrong alignment on TargetingSubsystem_ExecuteTargetingRequest");
static_assert(sizeof(TargetingSubsystem_ExecuteTargetingRequest) == 0x000060, "Wrong size on TargetingSubsystem_ExecuteTargetingRequest");
static_assert(offsetof(TargetingSubsystem_ExecuteTargetingRequest, TargetingPreset) == 0x000000, "Member 'TargetingSubsystem_ExecuteTargetingRequest::TargetingPreset' has a wrong offset!");
static_assert(offsetof(TargetingSubsystem_ExecuteTargetingRequest, InSourceContext) == 0x000008, "Member 'TargetingSubsystem_ExecuteTargetingRequest::InSourceContext' has a wrong offset!");
static_assert(offsetof(TargetingSubsystem_ExecuteTargetingRequest, CompletionDynamicDelegate) == 0x000050, "Member 'TargetingSubsystem_ExecuteTargetingRequest::CompletionDynamicDelegate' has a wrong offset!");

// Function TargetingSystem.TargetingSubsystem.RemoveAsyncTargetingRequestWithHandle
// 0x0004 (0x0004 - 0x0000)
struct TargetingSubsystem_RemoveAsyncTargetingRequestWithHandle final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSubsystem_RemoveAsyncTargetingRequestWithHandle) == 0x000004, "Wrong alignment on TargetingSubsystem_RemoveAsyncTargetingRequestWithHandle");
static_assert(sizeof(TargetingSubsystem_RemoveAsyncTargetingRequestWithHandle) == 0x000004, "Wrong size on TargetingSubsystem_RemoveAsyncTargetingRequestWithHandle");
static_assert(offsetof(TargetingSubsystem_RemoveAsyncTargetingRequestWithHandle, TargetingHandle) == 0x000000, "Member 'TargetingSubsystem_RemoveAsyncTargetingRequestWithHandle::TargetingHandle' has a wrong offset!");

// Function TargetingSystem.TargetingSubsystem.StartAsyncTargetingRequest
// 0x0068 (0x0068 - 0x0000)
struct TargetingSubsystem_StartAsyncTargetingRequest final
{
public:
	const class UTargetingPreset*                 TargetingPreset;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTargetingSourceContext                InSourceContext;                                   // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FTargetingRequestHandle& TargetingRequestHandle)> CompletionDynamicDelegate; // 0x0050(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTargetingRequestHandle                ReturnValue;                                       // 0x0060(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetingSubsystem_StartAsyncTargetingRequest) == 0x000008, "Wrong alignment on TargetingSubsystem_StartAsyncTargetingRequest");
static_assert(sizeof(TargetingSubsystem_StartAsyncTargetingRequest) == 0x000068, "Wrong size on TargetingSubsystem_StartAsyncTargetingRequest");
static_assert(offsetof(TargetingSubsystem_StartAsyncTargetingRequest, TargetingPreset) == 0x000000, "Member 'TargetingSubsystem_StartAsyncTargetingRequest::TargetingPreset' has a wrong offset!");
static_assert(offsetof(TargetingSubsystem_StartAsyncTargetingRequest, InSourceContext) == 0x000008, "Member 'TargetingSubsystem_StartAsyncTargetingRequest::InSourceContext' has a wrong offset!");
static_assert(offsetof(TargetingSubsystem_StartAsyncTargetingRequest, CompletionDynamicDelegate) == 0x000050, "Member 'TargetingSubsystem_StartAsyncTargetingRequest::CompletionDynamicDelegate' has a wrong offset!");
static_assert(offsetof(TargetingSubsystem_StartAsyncTargetingRequest, ReturnValue) == 0x000060, "Member 'TargetingSubsystem_StartAsyncTargetingRequest::ReturnValue' has a wrong offset!");

// Function TargetingSystem.TargetingSubsystem.GetTargetingResults
// 0x0018 (0x0018 - 0x0000)
struct TargetingSubsystem_GetTargetingResults final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     OutTargets;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSubsystem_GetTargetingResults) == 0x000008, "Wrong alignment on TargetingSubsystem_GetTargetingResults");
static_assert(sizeof(TargetingSubsystem_GetTargetingResults) == 0x000018, "Wrong size on TargetingSubsystem_GetTargetingResults");
static_assert(offsetof(TargetingSubsystem_GetTargetingResults, TargetingHandle) == 0x000000, "Member 'TargetingSubsystem_GetTargetingResults::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSubsystem_GetTargetingResults, OutTargets) == 0x000008, "Member 'TargetingSubsystem_GetTargetingResults::OutTargets' has a wrong offset!");

// Function TargetingSystem.TargetingSubsystem.GetTargetingResultsActors
// 0x0018 (0x0018 - 0x0000)
struct TargetingSubsystem_GetTargetingResultsActors final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Targets;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSubsystem_GetTargetingResultsActors) == 0x000008, "Wrong alignment on TargetingSubsystem_GetTargetingResultsActors");
static_assert(sizeof(TargetingSubsystem_GetTargetingResultsActors) == 0x000018, "Wrong size on TargetingSubsystem_GetTargetingResultsActors");
static_assert(offsetof(TargetingSubsystem_GetTargetingResultsActors, TargetingHandle) == 0x000000, "Member 'TargetingSubsystem_GetTargetingResultsActors::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSubsystem_GetTargetingResultsActors, Targets) == 0x000008, "Member 'TargetingSubsystem_GetTargetingResultsActors::Targets' has a wrong offset!");

// Function TargetingSystem.TargetingSubsystem.GetTargetingSourceContext
// 0x0050 (0x0050 - 0x0000)
struct TargetingSubsystem_GetTargetingSourceContext final
{
public:
	struct FTargetingRequestHandle                TargetingHandle;                                   // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTargetingSourceContext                ReturnValue;                                       // 0x0008(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetingSubsystem_GetTargetingSourceContext) == 0x000008, "Wrong alignment on TargetingSubsystem_GetTargetingSourceContext");
static_assert(sizeof(TargetingSubsystem_GetTargetingSourceContext) == 0x000050, "Wrong size on TargetingSubsystem_GetTargetingSourceContext");
static_assert(offsetof(TargetingSubsystem_GetTargetingSourceContext, TargetingHandle) == 0x000000, "Member 'TargetingSubsystem_GetTargetingSourceContext::TargetingHandle' has a wrong offset!");
static_assert(offsetof(TargetingSubsystem_GetTargetingSourceContext, ReturnValue) == 0x000008, "Member 'TargetingSubsystem_GetTargetingSourceContext::ReturnValue' has a wrong offset!");

}

