#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperPathFinding

#include "Basic.hpp"

#include "PaperPathFinding_classes.hpp"
#include "PaperPathFinding_parameters.hpp"


namespace SDK
{

// Function PaperPathFinding.PaperAIController.CancelCurrentPathFinding
// (Final, Native, Public, BlueprintCallable)

void APaperAIController::CancelCurrentPathFinding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAIController", "CancelCurrentPathFinding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperPathFinding.PaperAIController.ServerMoveToLocation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   InRequestID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FVector>&           InPath                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<int32>&                    OffMeshIdxs                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsPartial                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APaperAIController::ServerMoveToLocation(int64 InRequestID, const TArray<struct FVector>& InPath, const TArray<int32>& OffMeshIdxs, bool IsPartial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAIController", "ServerMoveToLocation");

	Params::PaperAIController_ServerMoveToLocation Parms{};

	Parms.InRequestID = InRequestID;
	Parms.InPath = std::move(InPath);
	Parms.OffMeshIdxs = std::move(OffMeshIdxs);
	Parms.IsPartial = IsPartial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperPathFinding.PaperAIController.UpdatePath
// (Final, Native, Public, BlueprintCallable)

void APaperAIController::UpdatePath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAIController", "UpdatePath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperPathFinding.PaperPathFinding.DrawNavMeshFromServer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FVector>&           Tiles                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperPathFinding::DrawNavMeshFromServer(class UWorld* InWorld, const TArray<struct FVector>& Tiles, int32 Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperPathFinding", "DrawNavMeshFromServer");

	Params::PaperPathFinding_DrawNavMeshFromServer Parms{};

	Parms.InWorld = InWorld;
	Parms.Tiles = std::move(Tiles);
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperPathFinding.PaperPathFinding.DrawPathFromServer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FVector>&           InPath                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPaperPathFinding::DrawPathFromServer(const TArray<struct FVector>& InPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperPathFinding", "DrawPathFromServer");

	Params::PaperPathFinding_DrawPathFromServer Parms{};

	Parms.InPath = std::move(InPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperPathFinding.PaperPathFinding.FindPathSendRequest
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AController*                      InController                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InStartPoint                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InEndPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   InRequestID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UserFlags                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperPathFinding::FindPathSendRequest(class AController* InController, const struct FVector& InStartPoint, const struct FVector& InEndPoint, int64 InRequestID, int32 UserFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperPathFinding", "FindPathSendRequest");

	Params::PaperPathFinding_FindPathSendRequest Parms{};

	Parms.InController = InController;
	Parms.InStartPoint = std::move(InStartPoint);
	Parms.InEndPoint = std::move(InEndPoint);
	Parms.InRequestID = InRequestID;
	Parms.UserFlags = UserFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperPathFinding.PaperPathFinding.GetNavDataForActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ANavigationData*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ANavigationData* UPaperPathFinding::GetNavDataForActor(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperPathFinding", "GetNavDataForActor");

	Params::PaperPathFinding_GetNavDataForActor Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperPathFinding.PaperPathFinding.GetNearbyActorDynamicCollision
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FRotator>*                OutRotation                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int32>*                          OutObstacleID                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FBox>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FBox> UPaperPathFinding::GetNearbyActorDynamicCollision(class AActor* InActor, TArray<struct FRotator>* OutRotation, TArray<int32>* OutObstacleID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PaperPathFinding", "GetNearbyActorDynamicCollision");

	Params::PaperPathFinding_GetNearbyActorDynamicCollision Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);

	if (OutObstacleID != nullptr)
		*OutObstacleID = std::move(Parms.OutObstacleID);

	return Parms.ReturnValue;
}


// Function PaperPathFinding.ServerPathFollowingComponent.GetCurrentDirection
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UServerPathFollowingComponent::GetCurrentDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerPathFollowingComponent", "GetCurrentDirection");

	Params::ServerPathFollowingComponent_GetCurrentDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperPathFinding.ServerPathFollowingComponent.GetCurrentPathIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UServerPathFollowingComponent::GetCurrentPathIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ServerPathFollowingComponent", "GetCurrentPathIndex");

	Params::ServerPathFollowingComponent_GetCurrentPathIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

