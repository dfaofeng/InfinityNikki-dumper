#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperAutoTest

#include "Basic.hpp"

#include "PaperAutoTest_structs.hpp"


namespace SDK::Params
{

// Function PaperAutoTest.XYReplayEvent.CommonEvent
// 0x0018 (0x0018 - 0x0000)
struct XYReplayEvent_CommonEvent final
{
public:
	EReplayCommonEventType                        EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param1;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_CommonEvent) == 0x000008, "Wrong alignment on XYReplayEvent_CommonEvent");
static_assert(sizeof(XYReplayEvent_CommonEvent) == 0x000018, "Wrong size on XYReplayEvent_CommonEvent");
static_assert(offsetof(XYReplayEvent_CommonEvent, EventType) == 0x000000, "Member 'XYReplayEvent_CommonEvent::EventType' has a wrong offset!");
static_assert(offsetof(XYReplayEvent_CommonEvent, Param1) == 0x000008, "Member 'XYReplayEvent_CommonEvent::Param1' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.GetReplayPlayerName
// 0x0020 (0x0020 - 0x0000)
struct XYReplayEvent_GetReplayPlayerName final
{
public:
	class FString                                 ReplayName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_GetReplayPlayerName) == 0x000008, "Wrong alignment on XYReplayEvent_GetReplayPlayerName");
static_assert(sizeof(XYReplayEvent_GetReplayPlayerName) == 0x000020, "Wrong size on XYReplayEvent_GetReplayPlayerName");
static_assert(offsetof(XYReplayEvent_GetReplayPlayerName, ReplayName) == 0x000000, "Member 'XYReplayEvent_GetReplayPlayerName::ReplayName' has a wrong offset!");
static_assert(offsetof(XYReplayEvent_GetReplayPlayerName, ReturnValue) == 0x000010, "Member 'XYReplayEvent_GetReplayPlayerName::ReturnValue' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.KeyInputAction
// 0x0010 (0x0010 - 0x0000)
struct XYReplayEvent_KeyInputAction final
{
public:
	class FString                                 KeyName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_KeyInputAction) == 0x000008, "Wrong alignment on XYReplayEvent_KeyInputAction");
static_assert(sizeof(XYReplayEvent_KeyInputAction) == 0x000010, "Wrong size on XYReplayEvent_KeyInputAction");
static_assert(offsetof(XYReplayEvent_KeyInputAction, KeyName) == 0x000000, "Member 'XYReplayEvent_KeyInputAction::KeyName' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.KeyPlessAction
// 0x0010 (0x0010 - 0x0000)
struct XYReplayEvent_KeyPlessAction final
{
public:
	class FString                                 KeyName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_KeyPlessAction) == 0x000008, "Wrong alignment on XYReplayEvent_KeyPlessAction");
static_assert(sizeof(XYReplayEvent_KeyPlessAction) == 0x000010, "Wrong size on XYReplayEvent_KeyPlessAction");
static_assert(offsetof(XYReplayEvent_KeyPlessAction, KeyName) == 0x000000, "Member 'XYReplayEvent_KeyPlessAction::KeyName' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.KeyReleasedAction
// 0x0010 (0x0010 - 0x0000)
struct XYReplayEvent_KeyReleasedAction final
{
public:
	class FString                                 KeyName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_KeyReleasedAction) == 0x000008, "Wrong alignment on XYReplayEvent_KeyReleasedAction");
static_assert(sizeof(XYReplayEvent_KeyReleasedAction) == 0x000010, "Wrong size on XYReplayEvent_KeyReleasedAction");
static_assert(offsetof(XYReplayEvent_KeyReleasedAction, KeyName) == 0x000000, "Member 'XYReplayEvent_KeyReleasedAction::KeyName' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.RecordGameHeadPlayInfo
// 0x0010 (0x0010 - 0x0000)
struct XYReplayEvent_RecordGameHeadPlayInfo final
{
public:
	class FString                                 Info;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_RecordGameHeadPlayInfo) == 0x000008, "Wrong alignment on XYReplayEvent_RecordGameHeadPlayInfo");
static_assert(sizeof(XYReplayEvent_RecordGameHeadPlayInfo) == 0x000010, "Wrong size on XYReplayEvent_RecordGameHeadPlayInfo");
static_assert(offsetof(XYReplayEvent_RecordGameHeadPlayInfo, Info) == 0x000000, "Member 'XYReplayEvent_RecordGameHeadPlayInfo::Info' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.RecordGamePlayInfo
// 0x0010 (0x0010 - 0x0000)
struct XYReplayEvent_RecordGamePlayInfo final
{
public:
	class FString                                 Info;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_RecordGamePlayInfo) == 0x000008, "Wrong alignment on XYReplayEvent_RecordGamePlayInfo");
static_assert(sizeof(XYReplayEvent_RecordGamePlayInfo) == 0x000010, "Wrong size on XYReplayEvent_RecordGamePlayInfo");
static_assert(offsetof(XYReplayEvent_RecordGamePlayInfo, Info) == 0x000000, "Member 'XYReplayEvent_RecordGamePlayInfo::Info' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.RecordInSuspend
// 0x0001 (0x0001 - 0x0000)
struct XYReplayEvent_RecordInSuspend final
{
public:
	bool                                          bSuspend;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_RecordInSuspend) == 0x000001, "Wrong alignment on XYReplayEvent_RecordInSuspend");
static_assert(sizeof(XYReplayEvent_RecordInSuspend) == 0x000001, "Wrong size on XYReplayEvent_RecordInSuspend");
static_assert(offsetof(XYReplayEvent_RecordInSuspend, bSuspend) == 0x000000, "Member 'XYReplayEvent_RecordInSuspend::bSuspend' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.ResetAllInput
// 0x0010 (0x0010 - 0x0000)
struct XYReplayEvent_ResetAllInput final
{
public:
	class FString                                 KeyName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_ResetAllInput) == 0x000008, "Wrong alignment on XYReplayEvent_ResetAllInput");
static_assert(sizeof(XYReplayEvent_ResetAllInput) == 0x000010, "Wrong size on XYReplayEvent_ResetAllInput");
static_assert(offsetof(XYReplayEvent_ResetAllInput, KeyName) == 0x000000, "Member 'XYReplayEvent_ResetAllInput::KeyName' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.SetKeepUIMonitor
// 0x0010 (0x0010 - 0x0000)
struct XYReplayEvent_SetKeepUIMonitor final
{
public:
	class FString                                 KeyName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_SetKeepUIMonitor) == 0x000008, "Wrong alignment on XYReplayEvent_SetKeepUIMonitor");
static_assert(sizeof(XYReplayEvent_SetKeepUIMonitor) == 0x000010, "Wrong size on XYReplayEvent_SetKeepUIMonitor");
static_assert(offsetof(XYReplayEvent_SetKeepUIMonitor, KeyName) == 0x000000, "Member 'XYReplayEvent_SetKeepUIMonitor::KeyName' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.SetKeyInputAction
// 0x0010 (0x0010 - 0x0000)
struct XYReplayEvent_SetKeyInputAction final
{
public:
	class FString                                 KeyName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_SetKeyInputAction) == 0x000008, "Wrong alignment on XYReplayEvent_SetKeyInputAction");
static_assert(sizeof(XYReplayEvent_SetKeyInputAction) == 0x000010, "Wrong size on XYReplayEvent_SetKeyInputAction");
static_assert(offsetof(XYReplayEvent_SetKeyInputAction, KeyName) == 0x000000, "Member 'XYReplayEvent_SetKeyInputAction::KeyName' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.SetReplayTriggerName
// 0x0010 (0x0010 - 0x0000)
struct XYReplayEvent_SetReplayTriggerName final
{
public:
	class FString                                 TriggerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_SetReplayTriggerName) == 0x000008, "Wrong alignment on XYReplayEvent_SetReplayTriggerName");
static_assert(sizeof(XYReplayEvent_SetReplayTriggerName) == 0x000010, "Wrong size on XYReplayEvent_SetReplayTriggerName");
static_assert(offsetof(XYReplayEvent_SetReplayTriggerName, TriggerName) == 0x000000, "Member 'XYReplayEvent_SetReplayTriggerName::TriggerName' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.SetWorldId
// 0x0010 (0x0010 - 0x0000)
struct XYReplayEvent_SetWorldId final
{
public:
	class FString                                 Info;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_SetWorldId) == 0x000008, "Wrong alignment on XYReplayEvent_SetWorldId");
static_assert(sizeof(XYReplayEvent_SetWorldId) == 0x000010, "Wrong size on XYReplayEvent_SetWorldId");
static_assert(offsetof(XYReplayEvent_SetWorldId, Info) == 0x000000, "Member 'XYReplayEvent_SetWorldId::Info' has a wrong offset!");

// Function PaperAutoTest.XYReplayEvent.SpecialEvent
// 0x0018 (0x0018 - 0x0000)
struct XYReplayEvent_SpecialEvent final
{
public:
	EReplaySpecialEventType                       EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param1;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(XYReplayEvent_SpecialEvent) == 0x000008, "Wrong alignment on XYReplayEvent_SpecialEvent");
static_assert(sizeof(XYReplayEvent_SpecialEvent) == 0x000018, "Wrong size on XYReplayEvent_SpecialEvent");
static_assert(offsetof(XYReplayEvent_SpecialEvent, EventType) == 0x000000, "Member 'XYReplayEvent_SpecialEvent::EventType' has a wrong offset!");
static_assert(offsetof(XYReplayEvent_SpecialEvent, Param1) == 0x000008, "Member 'XYReplayEvent_SpecialEvent::Param1' has a wrong offset!");

}

