#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UTCComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EDeviceScreenSizeType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass UTCComponent.UTCComponent_C
// 0x0148 (0x01F0 - 0x00A8)
class UUTCComponent_C : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         Priority;                                          // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_Fingers_Count;                                 // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Use_Bounds;                                        // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Bounds_Origin;                                     // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Bounds_Size;                                       // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bounds_In_Percentage;                              // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Actual_Viewport_Size_X;                            // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector2D                              Bounds_Origin____;                                 // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Bounds_Size____;                                   // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Actual_Viewport_Size_Y;                            // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Is_In_Bounds;                                      // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Locations;                                         // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<ETouchIndex>                           Fingers;                                           // 0x0120(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                Screen_Up_Vector;                                  // 0x0130(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Owner_is_Pawn_or_Controller;                       // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Is_Possessed;                                      // 0x0149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Screen_Right_Vector;                               // 0x0150(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const struct FVector2D& Previous_Size, const struct FVector2D& Updated_Size)> OnViewportSizeChanged; // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Temp_Viewport_Size_X;                              // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         Temp_Viewport_Size_Y;                              // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Check_Network_Connection;                          // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnNetworkConnected;                                // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Enable_Debug_Drawing;                              // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rectangular;                                       // 0x0199(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Background_Widget;                                 // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          BGW_Hide_if_Pawn_Unpossessed;                      // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BGW_Use_Bounds_Size_and_Origin;                    // 0x01A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AA[0x6];                                      // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BGW_Force_Size;                                    // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BGW_Size_In_Percent;                               // 0x01C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BGW_Rectangular_Size;                              // 0x01C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C2[0x6];                                      // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BGW_Force_Origin;                                  // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BGW_Origin_In_Percent;                             // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CameraInputModify_C*                BP_CameraInputModify;                              // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         BP_CameraHIModifyState;                            // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BP_CameraVIModifyState;                            // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Finger_Location(ETouchIndex Finger_Index, const struct FVector& Location, bool* Result);
	void BP_GetDeviceType(EDeviceScreenSizeType* NewParam);
	void BP_GetJoystickOffset(struct FVector2D* Offset, double* Scale);
	void BP_GetPixelRateStandardToReal(double* Rate);
	void BP_GetTouchSensitivity(double* Rate);
	void BP_UpdateCameraInputModifyStage();
	void Check_Bounds(const struct FVector& Location, bool* In_Bounds, bool* out_Bounds, bool* In_Bounds_by_X, bool* In_Bounds_by_Y);
	void Check_Is_Viewport_Size_Changed(bool* Result);
	void Disable_Network_Connection_Checking();
	void ExecuteUbergraph_UTCComponent(int32 EntryPoint);
	void Filter_By_Active(TArray<class UUTCComponent_C*>& UTCComponents, TArray<class UUTCComponent_C*>* Active_Components);
	void Get_FingerIndex_and_Location_by_index(int32 Index_0, struct FVector* Location, ETouchIndex* FingerIndex, bool* Is_Valid);
	void Get_Fingers_Length(int32* Length);
	void Get_Is_Pawn_Possessed_by_PC(bool* Is_Possessed_By_PC, bool* Is_Locally_Controlled);
	struct FVector2D Get_Screen_Size_By_Size_In_Percents(const struct FVector2D& InVec);
	bool Is_Bounding_Enabled();
	void Is_Finger_Location_Exists(ETouchIndex Finger_Index, bool* Result);
	bool Is_Finger_Slots_Available();
	void Is_Pawn_Possessed_By_PC(bool* Is_Possessed_0, bool* Is_Locally_Controlled);
	void Is_Player_Controller_Loaded(bool* Is_Loaded);
	void On_Event_Touch_Canceled(const struct FVector& Location, ETouchIndex FingerIndex);
	void On_Event_Touch_Moved(const struct FVector& Location, ETouchIndex FingerIndex);
	void On_Event_Touch_Pressed(const struct FVector& Location, ETouchIndex FingerIndex);
	void On_Event_Touch_Released(const struct FVector& Location, ETouchIndex FingerIndex);
	void On_Pawn_Possesed(class AController* New_Controller);
	void On_Pawn_Unpossesed(class AController* Old_Controller);
	void On_Viewport_Size_Is_Changed();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Remove_Finger_Location(ETouchIndex Finger_Index);
	void Setup_Background_by_Bounds(class UClass* Background_Widget_Class, bool Hide_if_Pawn_Unpossessed);
	void Setup_Background_by_Size_and_Origin(class UClass* Widget_Class, bool Hide_if_Pawn_Unpossessed, const struct FVector2D& Origin, bool Origin_In_Percent, const struct FVector2D& Size, bool Size_In_Percent, bool Rectangular__by_greater_value_of_Size_);
	void Setup_Background_Widget(class UClass* Background_Widget_Class, bool Hide_if_Pawn_Unpossessed, bool Use_Bounds_Size_and_Origin, const struct FVector2D& Origin__if_you_re_not_using_bounds_, bool Origin_In_Percent, const struct FVector2D& Size__if_you_re_not_using_bounds_, bool Size_In_Percent, bool Rectangular__by_greater_value_of_Size_);
	void Setup_Bounds(bool Is_Enabled, const struct FVector2D& Bounds_Origin_0, const struct FVector2D& Bounds_Size_0, bool In_Percent, bool Rect__by_greater_value_);
	void Update_Background_Widget();
	void Update_Bounds_In_Percent(bool Is_Viewport_Size_Changed);
	void Update_Finger_Location(ETouchIndex Finger_Index, const struct FVector& New_Location);

	void Filter_By_Bounds(TArray<class UUTCComponent_C*>& UTC_Components, const struct FVector& Location, TArray<class UUTCComponent_C*>* In_Bounds, TArray<class UUTCComponent_C*>* out_Bounds, TArray<class UUTCComponent_C*>* Both) const;
	class FString GetModuleName() const;
	void Sort_By_Priority(TArray<class UUTCComponent_C*>& UTC_Components, TArray<class UUTCComponent_C*>* _Higher_Priority) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UTCComponent_C">();
	}
	static class UUTCComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUTCComponent_C>();
	}
};
static_assert(alignof(UUTCComponent_C) == 0x000008, "Wrong alignment on UUTCComponent_C");
static_assert(sizeof(UUTCComponent_C) == 0x0001F0, "Wrong size on UUTCComponent_C");
static_assert(offsetof(UUTCComponent_C, UberGraphFrame) == 0x0000A8, "Member 'UUTCComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Priority) == 0x0000B0, "Member 'UUTCComponent_C::Priority' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Max_Fingers_Count) == 0x0000B4, "Member 'UUTCComponent_C::Max_Fingers_Count' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Use_Bounds) == 0x0000B8, "Member 'UUTCComponent_C::Use_Bounds' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Bounds_Origin) == 0x0000C0, "Member 'UUTCComponent_C::Bounds_Origin' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Bounds_Size) == 0x0000D0, "Member 'UUTCComponent_C::Bounds_Size' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Bounds_In_Percentage) == 0x0000E0, "Member 'UUTCComponent_C::Bounds_In_Percentage' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Actual_Viewport_Size_X) == 0x0000E4, "Member 'UUTCComponent_C::Actual_Viewport_Size_X' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Bounds_Origin____) == 0x0000E8, "Member 'UUTCComponent_C::Bounds_Origin____' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Bounds_Size____) == 0x0000F8, "Member 'UUTCComponent_C::Bounds_Size____' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Actual_Viewport_Size_Y) == 0x000108, "Member 'UUTCComponent_C::Actual_Viewport_Size_Y' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Is_In_Bounds) == 0x00010C, "Member 'UUTCComponent_C::Is_In_Bounds' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Locations) == 0x000110, "Member 'UUTCComponent_C::Locations' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Fingers) == 0x000120, "Member 'UUTCComponent_C::Fingers' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Screen_Up_Vector) == 0x000130, "Member 'UUTCComponent_C::Screen_Up_Vector' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Owner_is_Pawn_or_Controller) == 0x000148, "Member 'UUTCComponent_C::Owner_is_Pawn_or_Controller' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Is_Possessed) == 0x000149, "Member 'UUTCComponent_C::Is_Possessed' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Screen_Right_Vector) == 0x000150, "Member 'UUTCComponent_C::Screen_Right_Vector' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, OnViewportSizeChanged) == 0x000168, "Member 'UUTCComponent_C::OnViewportSizeChanged' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Temp_Viewport_Size_X) == 0x000178, "Member 'UUTCComponent_C::Temp_Viewport_Size_X' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Temp_Viewport_Size_Y) == 0x00017C, "Member 'UUTCComponent_C::Temp_Viewport_Size_Y' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Check_Network_Connection) == 0x000180, "Member 'UUTCComponent_C::Check_Network_Connection' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, OnNetworkConnected) == 0x000188, "Member 'UUTCComponent_C::OnNetworkConnected' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Enable_Debug_Drawing) == 0x000198, "Member 'UUTCComponent_C::Enable_Debug_Drawing' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Rectangular) == 0x000199, "Member 'UUTCComponent_C::Rectangular' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, Background_Widget) == 0x0001A0, "Member 'UUTCComponent_C::Background_Widget' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, BGW_Hide_if_Pawn_Unpossessed) == 0x0001A8, "Member 'UUTCComponent_C::BGW_Hide_if_Pawn_Unpossessed' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, BGW_Use_Bounds_Size_and_Origin) == 0x0001A9, "Member 'UUTCComponent_C::BGW_Use_Bounds_Size_and_Origin' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, BGW_Force_Size) == 0x0001B0, "Member 'UUTCComponent_C::BGW_Force_Size' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, BGW_Size_In_Percent) == 0x0001C0, "Member 'UUTCComponent_C::BGW_Size_In_Percent' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, BGW_Rectangular_Size) == 0x0001C1, "Member 'UUTCComponent_C::BGW_Rectangular_Size' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, BGW_Force_Origin) == 0x0001C8, "Member 'UUTCComponent_C::BGW_Force_Origin' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, BGW_Origin_In_Percent) == 0x0001D8, "Member 'UUTCComponent_C::BGW_Origin_In_Percent' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, BP_CameraInputModify) == 0x0001E0, "Member 'UUTCComponent_C::BP_CameraInputModify' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, BP_CameraHIModifyState) == 0x0001E8, "Member 'UUTCComponent_C::BP_CameraHIModifyState' has a wrong offset!");
static_assert(offsetof(UUTCComponent_C, BP_CameraVIModifyState) == 0x0001EC, "Member 'UUTCComponent_C::BP_CameraVIModifyState' has a wrong offset!");

}

