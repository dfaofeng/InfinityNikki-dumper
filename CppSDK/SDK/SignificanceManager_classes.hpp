#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SignificanceManager

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class SignificanceManager.SignificanceUI
// 0x0000 (0x03A8 - 0x03A8)
class ASignificanceUI final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SignificanceUI">();
	}
	static class ASignificanceUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASignificanceUI>();
	}
};
static_assert(alignof(ASignificanceUI) == 0x000008, "Wrong alignment on ASignificanceUI");
static_assert(sizeof(ASignificanceUI) == 0x0003A8, "Wrong size on ASignificanceUI");

// Class SignificanceManager.SignificanceUserWidget
// 0x0030 (0x0320 - 0x02F0)
class USignificanceUserWidget final : public UUserWidget
{
public:
	TArray<class UUserWidget*>                    SigObjects;                                        // 0x02F0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         testdata;                                          // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TestString;                                        // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnChangeRPF(int32 newRPF);
	void BP_OnRegisterActor(class AActor* Actor, float Significance, bool OtherActor);
	void BP_OnSignificanceChangeDramatically(class AActor* Actor, float Significance);
	void BP_OnUnRegisterActor(class AActor* Actor);
	float GetCameraYaw();
	float GetComponentsTickCount(class AActor* Actor);
	float GetLastTickGameTime(class AActor* Actor);
	float GetLife(class AActor* Actor);
	float GetSignificance(class AActor* Actor);
	float GetSignificanceFar();
	float GetSignificanceFurther();
	float GetSignificanceMedium();
	float GetSignificanceNear();
	bool IsSignificanceSystem(class AActor* Actor);
	void OnRegisterActor(class AActor* Actor, bool OtherActor);
	void OnUnRegisterActor(class AActor* Actor);
	void SetCamera(class USceneComponent* inCamera);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SignificanceUserWidget">();
	}
	static class USignificanceUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USignificanceUserWidget>();
	}
};
static_assert(alignof(USignificanceUserWidget) == 0x000008, "Wrong alignment on USignificanceUserWidget");
static_assert(sizeof(USignificanceUserWidget) == 0x000320, "Wrong size on USignificanceUserWidget");
static_assert(offsetof(USignificanceUserWidget, SigObjects) == 0x0002F0, "Member 'USignificanceUserWidget::SigObjects' has a wrong offset!");
static_assert(offsetof(USignificanceUserWidget, testdata) == 0x000300, "Member 'USignificanceUserWidget::testdata' has a wrong offset!");
static_assert(offsetof(USignificanceUserWidget, TestString) == 0x000308, "Member 'USignificanceUserWidget::TestString' has a wrong offset!");

// Class SignificanceManager.SignificanceManager
// 0x00A8 (0x00D0 - 0x0028)
class USignificanceManager final : public UObject
{
public:
	uint8                                         Pad_28[0x88];                                      // 0x0028(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         SignificanceManagerClassName;                      // 0x00B0(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SignificanceManager">();
	}
	static class USignificanceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USignificanceManager>();
	}
};
static_assert(alignof(USignificanceManager) == 0x000008, "Wrong alignment on USignificanceManager");
static_assert(sizeof(USignificanceManager) == 0x0000D0, "Wrong size on USignificanceManager");
static_assert(offsetof(USignificanceManager, SignificanceManagerClassName) == 0x0000B0, "Member 'USignificanceManager::SignificanceManagerClassName' has a wrong offset!");

// Class SignificanceManager.AnimationSignificanceManager
// 0x00D0 (0x00F8 - 0x0028)
class UAnimationSignificanceManager final : public UObject
{
public:
	uint8                                         Pad_28[0xB0];                                      // 0x0028(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         AnimationSignificanceManagerClassName;             // 0x00D8(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimationSignificanceManager">();
	}
	static class UAnimationSignificanceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationSignificanceManager>();
	}
};
static_assert(alignof(UAnimationSignificanceManager) == 0x000008, "Wrong alignment on UAnimationSignificanceManager");
static_assert(sizeof(UAnimationSignificanceManager) == 0x0000F8, "Wrong size on UAnimationSignificanceManager");
static_assert(offsetof(UAnimationSignificanceManager, AnimationSignificanceManagerClassName) == 0x0000D8, "Member 'UAnimationSignificanceManager::AnimationSignificanceManagerClassName' has a wrong offset!");

}

