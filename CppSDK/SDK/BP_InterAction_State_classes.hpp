#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InterAction_State

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "E_InteractionAnimType_structs.hpp"
#include "Enum_StopInteractiion_Type_structs.hpp"
#include "Enum_InteractiveProcessType_structs.hpp"
#include "Enum_InteractiveTriggerType_structs.hpp"
#include "Enum_SubInteractionAction_structs.hpp"
#include "E_InteractiveCorrectionMode_structs.hpp"
#include "F_AdjustLerpSpeedModifer_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InterAction_State.BP_InterAction_State_C
// 0x00D8 (0x0108 - 0x0030)
class UBP_InterAction_State_C final : public UPrimaryDataAsset
{
public:
	class UBP_ActionPoint_InteractTemplate_C*     ActionPoint;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	Enum_InteractiveProcessType                   interact_process_type;                             // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_InteractiveTriggerType                   trigger_type;                                      // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ui_txt;                                            // 0x0040(0x0010)(Edit, BlueprintVisible)
	bool                                          show_name;                                         // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          stop_use_facial_anim;                              // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_StopInteractiion_Type                    stop_type;                                         // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   stop_ui_text;                                      // 0x0058(0x0010)(Edit, BlueprintVisible)
	class UObject*                                stop_ui_icon;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          enable_interaction_sync;                           // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          move_interrupt_sync;                               // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ignore_actor_collision;                            // 0x0072(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          skip_recovery;                                     // 0x0073(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_InteractionAnimType                         player_anim_type;                                  // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          move_interrupt_interact_start;                     // 0x0075(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          move_interrupt_interacting;                        // 0x0076(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          move_interrupt_interact_end;                       // 0x0077(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_SubInteractionAction                     SubInterAction;                                    // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          trigger_interact_when_adjust_begin;                // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          trigger_interact_when_lerp;                        // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          force_skip;                                        // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enable_twoway_sync;                                // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enable_check_Inter_location;                       // 0x007D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enable_location_sync;                              // 0x007E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enable_rotation_sync;                              // 0x007F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          enable_npc_rotation_only;                          // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          spline_range_sync;                                 // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        fit_slope_z;                                       // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_InteractiveCorrectionMode                   twoway_sync_mode;                                  // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          force_lerp;                                        // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        lerp_loc_speed;                                    // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FF_AdjustLerpSpeedModifer>      lerp_loc_speed_modifier;                           // 0x00A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        lerp_rot_speed;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FF_AdjustLerpSpeedModifer>      lerp_rot_speed_modifier;                           // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCurveFloat*                            OverrideLerpCurve;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceVerticalGround;                              // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        syncpoint_standrange;                              // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        min_sync_rot;                                      // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        min_sync_dis;                                      // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          interrupt_aiming;                                  // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        syncpoint_standheight;                             // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          use_player_z;                                      // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InterAction_State_C">();
	}
	static class UBP_InterAction_State_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_InterAction_State_C>();
	}
};
static_assert(alignof(UBP_InterAction_State_C) == 0x000008, "Wrong alignment on UBP_InterAction_State_C");
static_assert(sizeof(UBP_InterAction_State_C) == 0x000108, "Wrong size on UBP_InterAction_State_C");
static_assert(offsetof(UBP_InterAction_State_C, ActionPoint) == 0x000030, "Member 'UBP_InterAction_State_C::ActionPoint' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, interact_process_type) == 0x000038, "Member 'UBP_InterAction_State_C::interact_process_type' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, trigger_type) == 0x000039, "Member 'UBP_InterAction_State_C::trigger_type' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, ui_txt) == 0x000040, "Member 'UBP_InterAction_State_C::ui_txt' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, show_name) == 0x000050, "Member 'UBP_InterAction_State_C::show_name' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, stop_use_facial_anim) == 0x000051, "Member 'UBP_InterAction_State_C::stop_use_facial_anim' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, stop_type) == 0x000052, "Member 'UBP_InterAction_State_C::stop_type' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, stop_ui_text) == 0x000058, "Member 'UBP_InterAction_State_C::stop_ui_text' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, stop_ui_icon) == 0x000068, "Member 'UBP_InterAction_State_C::stop_ui_icon' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, enable_interaction_sync) == 0x000070, "Member 'UBP_InterAction_State_C::enable_interaction_sync' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, move_interrupt_sync) == 0x000071, "Member 'UBP_InterAction_State_C::move_interrupt_sync' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, ignore_actor_collision) == 0x000072, "Member 'UBP_InterAction_State_C::ignore_actor_collision' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, skip_recovery) == 0x000073, "Member 'UBP_InterAction_State_C::skip_recovery' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, player_anim_type) == 0x000074, "Member 'UBP_InterAction_State_C::player_anim_type' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, move_interrupt_interact_start) == 0x000075, "Member 'UBP_InterAction_State_C::move_interrupt_interact_start' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, move_interrupt_interacting) == 0x000076, "Member 'UBP_InterAction_State_C::move_interrupt_interacting' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, move_interrupt_interact_end) == 0x000077, "Member 'UBP_InterAction_State_C::move_interrupt_interact_end' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, SubInterAction) == 0x000078, "Member 'UBP_InterAction_State_C::SubInterAction' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, trigger_interact_when_adjust_begin) == 0x000079, "Member 'UBP_InterAction_State_C::trigger_interact_when_adjust_begin' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, trigger_interact_when_lerp) == 0x00007A, "Member 'UBP_InterAction_State_C::trigger_interact_when_lerp' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, force_skip) == 0x00007B, "Member 'UBP_InterAction_State_C::force_skip' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, enable_twoway_sync) == 0x00007C, "Member 'UBP_InterAction_State_C::enable_twoway_sync' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, enable_check_Inter_location) == 0x00007D, "Member 'UBP_InterAction_State_C::enable_check_Inter_location' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, enable_location_sync) == 0x00007E, "Member 'UBP_InterAction_State_C::enable_location_sync' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, enable_rotation_sync) == 0x00007F, "Member 'UBP_InterAction_State_C::enable_rotation_sync' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, enable_npc_rotation_only) == 0x000080, "Member 'UBP_InterAction_State_C::enable_npc_rotation_only' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, spline_range_sync) == 0x000081, "Member 'UBP_InterAction_State_C::spline_range_sync' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, fit_slope_z) == 0x000088, "Member 'UBP_InterAction_State_C::fit_slope_z' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, twoway_sync_mode) == 0x000090, "Member 'UBP_InterAction_State_C::twoway_sync_mode' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, force_lerp) == 0x000091, "Member 'UBP_InterAction_State_C::force_lerp' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, lerp_loc_speed) == 0x000098, "Member 'UBP_InterAction_State_C::lerp_loc_speed' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, lerp_loc_speed_modifier) == 0x0000A0, "Member 'UBP_InterAction_State_C::lerp_loc_speed_modifier' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, lerp_rot_speed) == 0x0000B0, "Member 'UBP_InterAction_State_C::lerp_rot_speed' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, lerp_rot_speed_modifier) == 0x0000B8, "Member 'UBP_InterAction_State_C::lerp_rot_speed_modifier' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, OverrideLerpCurve) == 0x0000C8, "Member 'UBP_InterAction_State_C::OverrideLerpCurve' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, bForceVerticalGround) == 0x0000D0, "Member 'UBP_InterAction_State_C::bForceVerticalGround' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, syncpoint_standrange) == 0x0000D8, "Member 'UBP_InterAction_State_C::syncpoint_standrange' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, min_sync_rot) == 0x0000E0, "Member 'UBP_InterAction_State_C::min_sync_rot' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, min_sync_dis) == 0x0000E8, "Member 'UBP_InterAction_State_C::min_sync_dis' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, interrupt_aiming) == 0x0000F0, "Member 'UBP_InterAction_State_C::interrupt_aiming' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, syncpoint_standheight) == 0x0000F8, "Member 'UBP_InterAction_State_C::syncpoint_standheight' has a wrong offset!");
static_assert(offsetof(UBP_InterAction_State_C, use_player_z) == 0x000100, "Member 'UBP_InterAction_State_C::use_player_z' has a wrong offset!");

}

