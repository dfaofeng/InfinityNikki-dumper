#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Monster_Locomotion

#include "Basic.hpp"

#include "EPlayerRegularFlyingMovementType_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Monster_Locomotion.BP_Monster_Locomotion_C
// 0x0068 (0x0098 - 0x0030)
class UBP_Monster_Locomotion_C final : public UPrimaryDataAsset
{
public:
	double                                        WalkSpeed;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RunSpeed;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SprintSpeed;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LowFlyingSpeed;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NormalFlyingSpeed;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TopFlyingSpeed;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerRegularFlyingMovementType              FlyingMovementType;                                // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FlyingGroundBias;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FollowFlightOffset;                                // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LandingToActorDistance;                            // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LandingToActorOffset;                              // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlyingGroundHeight;                                // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlyingFollowHeight;                                // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Monster_Locomotion_C">();
	}
	static class UBP_Monster_Locomotion_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Monster_Locomotion_C>();
	}
};
static_assert(alignof(UBP_Monster_Locomotion_C) == 0x000008, "Wrong alignment on UBP_Monster_Locomotion_C");
static_assert(sizeof(UBP_Monster_Locomotion_C) == 0x000098, "Wrong size on UBP_Monster_Locomotion_C");
static_assert(offsetof(UBP_Monster_Locomotion_C, WalkSpeed) == 0x000030, "Member 'UBP_Monster_Locomotion_C::WalkSpeed' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, RunSpeed) == 0x000038, "Member 'UBP_Monster_Locomotion_C::RunSpeed' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, SprintSpeed) == 0x000040, "Member 'UBP_Monster_Locomotion_C::SprintSpeed' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, LowFlyingSpeed) == 0x000048, "Member 'UBP_Monster_Locomotion_C::LowFlyingSpeed' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, NormalFlyingSpeed) == 0x000050, "Member 'UBP_Monster_Locomotion_C::NormalFlyingSpeed' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, TopFlyingSpeed) == 0x000058, "Member 'UBP_Monster_Locomotion_C::TopFlyingSpeed' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, FlyingMovementType) == 0x000060, "Member 'UBP_Monster_Locomotion_C::FlyingMovementType' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, FlyingGroundBias) == 0x000068, "Member 'UBP_Monster_Locomotion_C::FlyingGroundBias' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, FollowFlightOffset) == 0x000070, "Member 'UBP_Monster_Locomotion_C::FollowFlightOffset' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, LandingToActorDistance) == 0x000078, "Member 'UBP_Monster_Locomotion_C::LandingToActorDistance' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, LandingToActorOffset) == 0x000080, "Member 'UBP_Monster_Locomotion_C::LandingToActorOffset' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, FlyingGroundHeight) == 0x000088, "Member 'UBP_Monster_Locomotion_C::FlyingGroundHeight' has a wrong offset!");
static_assert(offsetof(UBP_Monster_Locomotion_C, FlyingFollowHeight) == 0x000090, "Member 'UBP_Monster_Locomotion_C::FlyingFollowHeight' has a wrong offset!");

}

