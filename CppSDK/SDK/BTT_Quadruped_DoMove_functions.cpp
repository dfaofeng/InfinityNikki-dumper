#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_Quadruped_DoMove

#include "Basic.hpp"

#include "BTT_Quadruped_DoMove_classes.hpp"
#include "BTT_Quadruped_DoMove_parameters.hpp"


namespace SDK
{

// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_Quadruped_DoMove_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_Quadruped_DoMove_C", "ReceiveTickAI");

	Params::BTT_Quadruped_DoMove_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.ReceiveExecuteAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTT_Quadruped_DoMove_C::ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_Quadruped_DoMove_C", "ReceiveExecuteAI");

	Params::BTT_Quadruped_DoMove_C_ReceiveExecuteAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.ReceiveAbortAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTT_Quadruped_DoMove_C::ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_Quadruped_DoMove_C", "ReceiveAbortAI");

	Params::BTT_Quadruped_DoMove_C_ReceiveAbortAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.OnBlackboardKeyValueChange
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UBlackboardComponent*       Blackboard                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             KeyName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_Quadruped_DoMove_C::OnBlackboardKeyValueChange(const class UBlackboardComponent* Blackboard, class FName KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_Quadruped_DoMove_C", "OnBlackboardKeyValueChange");

	Params::BTT_Quadruped_DoMove_C_OnBlackboardKeyValueChange Parms{};

	Parms.Blackboard = Blackboard;
	Parms.KeyName = KeyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.K2_OnInstanceDestroyed
// (Event, Protected, BlueprintEvent)

void UBTT_Quadruped_DoMove_C::K2_OnInstanceDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_Quadruped_DoMove_C", "K2_OnInstanceDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.ExecuteUbergraph_BTT_Quadruped_DoMove
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_Quadruped_DoMove_C::ExecuteUbergraph_BTT_Quadruped_DoMove(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_Quadruped_DoMove_C", "ExecuteUbergraph_BTT_Quadruped_DoMove");

	Params::BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBTT_Quadruped_DoMove_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_Quadruped_DoMove_C", "GetModuleName");

	Params::BTT_Quadruped_DoMove_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

