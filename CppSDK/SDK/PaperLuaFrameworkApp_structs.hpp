#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperLuaFrameworkApp

#include "Basic.hpp"


namespace SDK
{

// Enum PaperLuaFrameworkApp.EPaperSourceType
// NumValues: 0x0012
enum class EPaperSourceType : uint8
{
	SRC_PreviousRegexMatch                   = 0,
	SRC_CPUBrand                             = 1,
	SRC_GpuFamily                            = 2,
	SRC_TotalPhysicalGB                      = 3,
	SRC_GLVersion                            = 4,
	SRC_AndroidVersion                       = 5,
	SRC_DeviceMake                           = 6,
	SRC_DeviceModel                          = 7,
	SRC_DeviceBuildNumber                    = 8,
	SRC_VulkanVersion                        = 9,
	SRC_UsingHoudini                         = 10,
	SRC_VulkanAvailable                      = 11,
	SRC_CommandLine                          = 12,
	SRC_Hardware                             = 13,
	SRC_Chipset                              = 14,
	SRC_ConfigRuleVar                        = 15,
	SRC_HMDSystemName                        = 16,
	SRC_MAX                                  = 17,
};

// Enum PaperLuaFrameworkApp.EPaperCompareType
// NumValues: 0x000F
enum class EPaperCompareType : uint8
{
	CMP_Equal                                = 0,
	CMP_Less                                 = 1,
	CMP_LessEqual                            = 2,
	CMP_Greater                              = 3,
	CMP_GreaterEqual                         = 4,
	CMP_NotEqual                             = 5,
	CMP_Regex                                = 6,
	CMP_EqualIgnore                          = 7,
	CMP_LessIgnore                           = 8,
	CMP_LessEqualIgnore                      = 9,
	CMP_GreaterIgnore                        = 10,
	CMP_GreaterEqualIgnore                   = 11,
	CMP_NotEqualIgnore                       = 12,
	CMP_Hash                                 = 13,
	CMP_MAX                                  = 14,
};

// Enum PaperLuaFrameworkApp.EPakExtractResult
// NumValues: 0x0004
enum class EPakExtractResult : uint8
{
	Success                                  = 0,
	Fail                                     = 1,
	EncryptKeyMissing                        = 2,
	EPakExtractResult_MAX                    = 3,
};

// ScriptStruct PaperLuaFrameworkApp.PaperDeviceMatchItem
// 0x0018 (0x0018 - 0x0000)
struct FPaperDeviceMatchItem final
{
public:
	EPaperSourceType                              SourceType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPaperCompareType                             CompareType;                                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchString;                                       // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDeviceMatchItem) == 0x000008, "Wrong alignment on FPaperDeviceMatchItem");
static_assert(sizeof(FPaperDeviceMatchItem) == 0x000018, "Wrong size on FPaperDeviceMatchItem");
static_assert(offsetof(FPaperDeviceMatchItem, SourceType) == 0x000000, "Member 'FPaperDeviceMatchItem::SourceType' has a wrong offset!");
static_assert(offsetof(FPaperDeviceMatchItem, CompareType) == 0x000001, "Member 'FPaperDeviceMatchItem::CompareType' has a wrong offset!");
static_assert(offsetof(FPaperDeviceMatchItem, MatchString) == 0x000008, "Member 'FPaperDeviceMatchItem::MatchString' has a wrong offset!");

// ScriptStruct PaperLuaFrameworkApp.PaperDeviceMatchItemArray
// 0x0010 (0x0010 - 0x0000)
struct FPaperDeviceMatchItemArray final
{
public:
	TArray<struct FPaperDeviceMatchItem>          MatchItemArray;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDeviceMatchItemArray) == 0x000008, "Wrong alignment on FPaperDeviceMatchItemArray");
static_assert(sizeof(FPaperDeviceMatchItemArray) == 0x000010, "Wrong size on FPaperDeviceMatchItemArray");
static_assert(offsetof(FPaperDeviceMatchItemArray, MatchItemArray) == 0x000000, "Member 'FPaperDeviceMatchItemArray::MatchItemArray' has a wrong offset!");

// ScriptStruct PaperLuaFrameworkApp.PaperDeviceMatchRules
// 0x0028 (0x0028 - 0x0000)
struct FPaperDeviceMatchRules final
{
public:
	bool                                          bEnableFilter;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceQuit;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPaperDeviceMatchItemArray>     FilterRules;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPaperDeviceMatchItemArray>     WhiteListRules;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperDeviceMatchRules) == 0x000008, "Wrong alignment on FPaperDeviceMatchRules");
static_assert(sizeof(FPaperDeviceMatchRules) == 0x000028, "Wrong size on FPaperDeviceMatchRules");
static_assert(offsetof(FPaperDeviceMatchRules, bEnableFilter) == 0x000000, "Member 'FPaperDeviceMatchRules::bEnableFilter' has a wrong offset!");
static_assert(offsetof(FPaperDeviceMatchRules, bForceQuit) == 0x000001, "Member 'FPaperDeviceMatchRules::bForceQuit' has a wrong offset!");
static_assert(offsetof(FPaperDeviceMatchRules, FilterRules) == 0x000008, "Member 'FPaperDeviceMatchRules::FilterRules' has a wrong offset!");
static_assert(offsetof(FPaperDeviceMatchRules, WhiteListRules) == 0x000018, "Member 'FPaperDeviceMatchRules::WhiteListRules' has a wrong offset!");

// ScriptStruct PaperLuaFrameworkApp.FilePakHashST
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FFilePakHashST final
{
public:
	uint8                                         Pad_0[0xA0];                                       // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFilePakHashST) == 0x000008, "Wrong alignment on FFilePakHashST");
static_assert(sizeof(FFilePakHashST) == 0x0000A0, "Wrong size on FFilePakHashST");

// ScriptStruct PaperLuaFrameworkApp.CMSConfigSection
// 0x0020 (0x0020 - 0x0000)
struct FCMSConfigSection final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCMSConfigSection) == 0x000008, "Wrong alignment on FCMSConfigSection");
static_assert(sizeof(FCMSConfigSection) == 0x000020, "Wrong size on FCMSConfigSection");
static_assert(offsetof(FCMSConfigSection, Key) == 0x000000, "Member 'FCMSConfigSection::Key' has a wrong offset!");
static_assert(offsetof(FCMSConfigSection, Value) == 0x000010, "Member 'FCMSConfigSection::Value' has a wrong offset!");

// ScriptStruct PaperLuaFrameworkApp.CMSConfig
// 0x00B0 (0x00B0 - 0x0000)
struct FCMSConfig final
{
public:
	class FString                                 BaseUrlApiTestPre;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseUrlApiTest;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseUrlApiPre;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseUrlApi;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientKey;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientID;                                          // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Channel;                                           // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0080(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mode;                                              // 0x0090(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCMSConfigSection>              SectionList;                                       // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCMSConfig) == 0x000008, "Wrong alignment on FCMSConfig");
static_assert(sizeof(FCMSConfig) == 0x0000B0, "Wrong size on FCMSConfig");
static_assert(offsetof(FCMSConfig, BaseUrlApiTestPre) == 0x000000, "Member 'FCMSConfig::BaseUrlApiTestPre' has a wrong offset!");
static_assert(offsetof(FCMSConfig, BaseUrlApiTest) == 0x000010, "Member 'FCMSConfig::BaseUrlApiTest' has a wrong offset!");
static_assert(offsetof(FCMSConfig, BaseUrlApiPre) == 0x000020, "Member 'FCMSConfig::BaseUrlApiPre' has a wrong offset!");
static_assert(offsetof(FCMSConfig, BaseUrlApi) == 0x000030, "Member 'FCMSConfig::BaseUrlApi' has a wrong offset!");
static_assert(offsetof(FCMSConfig, ClientKey) == 0x000040, "Member 'FCMSConfig::ClientKey' has a wrong offset!");
static_assert(offsetof(FCMSConfig, ClientID) == 0x000050, "Member 'FCMSConfig::ClientID' has a wrong offset!");
static_assert(offsetof(FCMSConfig, Role) == 0x000060, "Member 'FCMSConfig::Role' has a wrong offset!");
static_assert(offsetof(FCMSConfig, Channel) == 0x000070, "Member 'FCMSConfig::Channel' has a wrong offset!");
static_assert(offsetof(FCMSConfig, Region) == 0x000080, "Member 'FCMSConfig::Region' has a wrong offset!");
static_assert(offsetof(FCMSConfig, Mode) == 0x000090, "Member 'FCMSConfig::Mode' has a wrong offset!");
static_assert(offsetof(FCMSConfig, SectionList) == 0x0000A0, "Member 'FCMSConfig::SectionList' has a wrong offset!");

}

