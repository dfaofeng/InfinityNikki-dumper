#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnimalBase_Complete

#include "Basic.hpp"

#include "BP_AnimalBase_Complete_classes.hpp"
#include "BP_AnimalBase_Complete_parameters.hpp"


namespace SDK
{

// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBase_Complete_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.ShouldRejectTickManagement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bReject                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBase_Complete_C::ShouldRejectTickManagement(bool* bReject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "ShouldRejectTickManagement");

	Params::BP_AnimalBase_Complete_C_ShouldRejectTickManagement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bReject != nullptr)
		*bReject = Parms.bReject;
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.SetAnimalTickEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBase_Complete_C::SetAnimalTickEnabled(bool bEnabled, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "SetAnimalTickEnabled");

	Params::BP_AnimalBase_Complete_C_SetAnimalTickEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.OnUnbindEntity
// (BlueprintCallable, BlueprintEvent)

void ABP_AnimalBase_Complete_C::OnUnbindEntity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "OnUnbindEntity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.OnBindEntity
// (BlueprintCallable, BlueprintEvent)

void ABP_AnimalBase_Complete_C::OnBindEntity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "OnBindEntity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.GetCurrentPlatformActorMeshScale
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   ConfigID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBase_Complete_C::GetCurrentPlatformActorMeshScale(int64 ConfigID, double* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "GetCurrentPlatformActorMeshScale");

	Params::BP_AnimalBase_Complete_C_GetCurrentPlatformActorMeshScale Parms{};

	Parms.ConfigID = ConfigID;

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.GetAnimalTickManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_AnimalTickManager_C**         AnimalTickManager_0                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBase_Complete_C::GetAnimalTickManager(class UBP_AnimalTickManager_C** AnimalTickManager_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "GetAnimalTickManager");

	Params::BP_AnimalBase_Complete_C_GetAnimalTickManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimalTickManager_0 != nullptr)
		*AnimalTickManager_0 = Parms.AnimalTickManager_0;
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.GetAIObjectClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString*                          LuaClassPath                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_AnimalBase_Complete_C::GetAIObjectClass(class FString* LuaClassPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "GetAIObjectClass");

	Params::BP_AnimalBase_Complete_C_GetAIObjectClass Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LuaClassPath != nullptr)
		*LuaClassPath = std::move(Parms.LuaClassPath);
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.ExecuteUbergraph_BP_AnimalBase_Complete
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AnimalBase_Complete_C::ExecuteUbergraph_BP_AnimalBase_Complete(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "ExecuteUbergraph_BP_AnimalBase_Complete");

	Params::BP_AnimalBase_Complete_C_ExecuteUbergraph_BP_AnimalBase_Complete Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.CreateAnimalTickManager
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBase_Complete_C::CreateAnimalTickManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "CreateAnimalTickManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.BP_AnimalTickManagerStopAI
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBase_Complete_C::BP_AnimalTickManagerStopAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "BP_AnimalTickManagerStopAI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.BP_AnimalTickManagerResumeAI
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AnimalBase_Complete_C::BP_AnimalTickManagerResumeAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "BP_AnimalTickManagerResumeAI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalBase_Complete.BP_AnimalBase_Complete_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString ABP_AnimalBase_Complete_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalBase_Complete_C", "GetModuleName");

	Params::BP_AnimalBase_Complete_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

