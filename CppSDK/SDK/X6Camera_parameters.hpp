#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6Camera

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayCameras_structs.hpp"
#include "X6Camera_structs.hpp"


namespace SDK::Params
{

// Function X6Camera.AdvancedCamera.AddCameraConfigModifierByClass
// 0x0038 (0x0038 - 0x0000)
struct AdvancedCamera_AddCameraConfigModifierByClass final
{
public:
	TSubclassOf<class UX6CameraRuntimeConfigModifier> ModifierClass;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FX6CameraConfigBlendParams             CameraConfigBlendParams;                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UX6CameraRuntimeConfigModifier*         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_AddCameraConfigModifierByClass) == 0x000008, "Wrong alignment on AdvancedCamera_AddCameraConfigModifierByClass");
static_assert(sizeof(AdvancedCamera_AddCameraConfigModifierByClass) == 0x000038, "Wrong size on AdvancedCamera_AddCameraConfigModifierByClass");
static_assert(offsetof(AdvancedCamera_AddCameraConfigModifierByClass, ModifierClass) == 0x000000, "Member 'AdvancedCamera_AddCameraConfigModifierByClass::ModifierClass' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_AddCameraConfigModifierByClass, CameraConfigBlendParams) == 0x000008, "Member 'AdvancedCamera_AddCameraConfigModifierByClass::CameraConfigBlendParams' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_AddCameraConfigModifierByClass, ReturnValue) == 0x000030, "Member 'AdvancedCamera_AddCameraConfigModifierByClass::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.BlendBackToFollow
// 0x0020 (0x0020 - 0x0000)
struct AdvancedCamera_BlendBackToFollow final
{
public:
	struct FViewTargetTransitionParams            CameraBlendParams;                                 // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_BlendBackToFollow) == 0x000008, "Wrong alignment on AdvancedCamera_BlendBackToFollow");
static_assert(sizeof(AdvancedCamera_BlendBackToFollow) == 0x000020, "Wrong size on AdvancedCamera_BlendBackToFollow");
static_assert(offsetof(AdvancedCamera_BlendBackToFollow, CameraBlendParams) == 0x000000, "Member 'AdvancedCamera_BlendBackToFollow::CameraBlendParams' has a wrong offset!");

// Function X6Camera.AdvancedCamera.BlendConfigFromCurrentCameraView
// 0x0028 (0x0028 - 0x0000)
struct AdvancedCamera_BlendConfigFromCurrentCameraView final
{
public:
	bool                                          bOverrideTransitionParams;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_BlendConfigFromCurrentCameraView) == 0x000008, "Wrong alignment on AdvancedCamera_BlendConfigFromCurrentCameraView");
static_assert(sizeof(AdvancedCamera_BlendConfigFromCurrentCameraView) == 0x000028, "Wrong size on AdvancedCamera_BlendConfigFromCurrentCameraView");
static_assert(offsetof(AdvancedCamera_BlendConfigFromCurrentCameraView, bOverrideTransitionParams) == 0x000000, "Member 'AdvancedCamera_BlendConfigFromCurrentCameraView::bOverrideTransitionParams' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_BlendConfigFromCurrentCameraView, TransitionParams) == 0x000008, "Member 'AdvancedCamera_BlendConfigFromCurrentCameraView::TransitionParams' has a wrong offset!");

// Function X6Camera.AdvancedCamera.BlendToCameraView
// 0x0990 (0x0990 - 0x0000)
struct AdvancedCamera_BlendToCameraView final
{
public:
	struct FMinimalViewInfo                       NewCameraView;                                     // 0x0000(0x0970)(Parm, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            CameraBlendParams;                                 // 0x0970(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_BlendToCameraView) == 0x000010, "Wrong alignment on AdvancedCamera_BlendToCameraView");
static_assert(sizeof(AdvancedCamera_BlendToCameraView) == 0x000990, "Wrong size on AdvancedCamera_BlendToCameraView");
static_assert(offsetof(AdvancedCamera_BlendToCameraView, NewCameraView) == 0x000000, "Member 'AdvancedCamera_BlendToCameraView::NewCameraView' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_BlendToCameraView, CameraBlendParams) == 0x000970, "Member 'AdvancedCamera_BlendToCameraView::CameraBlendParams' has a wrong offset!");

// Function X6Camera.AdvancedCamera.CreateCameraCollisionProcessInstance
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCamera_CreateCameraCollisionProcessInstance final
{
public:
	TSubclassOf<class UCameraCollisionProcess>    NewCameraCollisionProcessClass;                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_CreateCameraCollisionProcessInstance) == 0x000008, "Wrong alignment on AdvancedCamera_CreateCameraCollisionProcessInstance");
static_assert(sizeof(AdvancedCamera_CreateCameraCollisionProcessInstance) == 0x000008, "Wrong size on AdvancedCamera_CreateCameraCollisionProcessInstance");
static_assert(offsetof(AdvancedCamera_CreateCameraCollisionProcessInstance, NewCameraCollisionProcessClass) == 0x000000, "Member 'AdvancedCamera_CreateCameraCollisionProcessInstance::NewCameraCollisionProcessClass' has a wrong offset!");

// Function X6Camera.AdvancedCamera.CreateCameraLagInstance
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCamera_CreateCameraLagInstance final
{
public:
	TSubclassOf<class UCameraLagProcess>          NewCameraLagProcessClass;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_CreateCameraLagInstance) == 0x000008, "Wrong alignment on AdvancedCamera_CreateCameraLagInstance");
static_assert(sizeof(AdvancedCamera_CreateCameraLagInstance) == 0x000008, "Wrong size on AdvancedCamera_CreateCameraLagInstance");
static_assert(offsetof(AdvancedCamera_CreateCameraLagInstance, NewCameraLagProcessClass) == 0x000000, "Member 'AdvancedCamera_CreateCameraLagInstance::NewCameraLagProcessClass' has a wrong offset!");

// Function X6Camera.AdvancedCamera.DoFixCameraByBasedMovement
// 0x0070 (0x0070 - 0x0000)
struct AdvancedCamera_DoFixCameraByBasedMovement final
{
public:
	struct FBasedMovementFixCameraHelper          Helper;                                            // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_DoFixCameraByBasedMovement) == 0x000010, "Wrong alignment on AdvancedCamera_DoFixCameraByBasedMovement");
static_assert(sizeof(AdvancedCamera_DoFixCameraByBasedMovement) == 0x000070, "Wrong size on AdvancedCamera_DoFixCameraByBasedMovement");
static_assert(offsetof(AdvancedCamera_DoFixCameraByBasedMovement, Helper) == 0x000000, "Member 'AdvancedCamera_DoFixCameraByBasedMovement::Helper' has a wrong offset!");

// Function X6Camera.AdvancedCamera.ExitZoom
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCamera_ExitZoom final
{
public:
	float                                         BlendOutTime;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_ExitZoom) == 0x000004, "Wrong alignment on AdvancedCamera_ExitZoom");
static_assert(sizeof(AdvancedCamera_ExitZoom) == 0x000008, "Wrong size on AdvancedCamera_ExitZoom");
static_assert(offsetof(AdvancedCamera_ExitZoom, BlendOutTime) == 0x000000, "Member 'AdvancedCamera_ExitZoom::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_ExitZoom, ReturnValue) == 0x000004, "Member 'AdvancedCamera_ExitZoom::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.FindMostOpenSpaceRotation
// 0x0080 (0x0080 - 0x0000)
struct AdvancedCamera_FindMostOpenSpaceRotation final
{
public:
	struct FTransform                             RelativeTrans;                                     // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutDeltaRot;                                       // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_FindMostOpenSpaceRotation) == 0x000010, "Wrong alignment on AdvancedCamera_FindMostOpenSpaceRotation");
static_assert(sizeof(AdvancedCamera_FindMostOpenSpaceRotation) == 0x000080, "Wrong size on AdvancedCamera_FindMostOpenSpaceRotation");
static_assert(offsetof(AdvancedCamera_FindMostOpenSpaceRotation, RelativeTrans) == 0x000000, "Member 'AdvancedCamera_FindMostOpenSpaceRotation::RelativeTrans' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_FindMostOpenSpaceRotation, OutDeltaRot) == 0x000060, "Member 'AdvancedCamera_FindMostOpenSpaceRotation::OutDeltaRot' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_FindMostOpenSpaceRotation, ReturnValue) == 0x000078, "Member 'AdvancedCamera_FindMostOpenSpaceRotation::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.FindOrAddCameraConfigModifier
// 0x0038 (0x0038 - 0x0000)
struct AdvancedCamera_FindOrAddCameraConfigModifier final
{
public:
	class UX6CameraRuntimeConfigModifier*         NewModifier;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FX6CameraConfigBlendParams             CameraConfigBlendParams;                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UX6CameraRuntimeConfigModifier*         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_FindOrAddCameraConfigModifier) == 0x000008, "Wrong alignment on AdvancedCamera_FindOrAddCameraConfigModifier");
static_assert(sizeof(AdvancedCamera_FindOrAddCameraConfigModifier) == 0x000038, "Wrong size on AdvancedCamera_FindOrAddCameraConfigModifier");
static_assert(offsetof(AdvancedCamera_FindOrAddCameraConfigModifier, NewModifier) == 0x000000, "Member 'AdvancedCamera_FindOrAddCameraConfigModifier::NewModifier' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_FindOrAddCameraConfigModifier, CameraConfigBlendParams) == 0x000008, "Member 'AdvancedCamera_FindOrAddCameraConfigModifier::CameraConfigBlendParams' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_FindOrAddCameraConfigModifier, ReturnValue) == 0x000030, "Member 'AdvancedCamera_FindOrAddCameraConfigModifier::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetArmlengthLagSpeed
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCamera_GetArmlengthLagSpeed final
{
public:
	float                                         ArmlengthLagSpeed;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetArmlengthLagSpeed) == 0x000004, "Wrong alignment on AdvancedCamera_GetArmlengthLagSpeed");
static_assert(sizeof(AdvancedCamera_GetArmlengthLagSpeed) == 0x000008, "Wrong size on AdvancedCamera_GetArmlengthLagSpeed");
static_assert(offsetof(AdvancedCamera_GetArmlengthLagSpeed, ArmlengthLagSpeed) == 0x000000, "Member 'AdvancedCamera_GetArmlengthLagSpeed::ArmlengthLagSpeed' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_GetArmlengthLagSpeed, ReturnValue) == 0x000004, "Member 'AdvancedCamera_GetArmlengthLagSpeed::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetCameraRotation
// 0x0018 (0x0018 - 0x0000)
struct AdvancedCamera_GetCameraRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetCameraRotation) == 0x000008, "Wrong alignment on AdvancedCamera_GetCameraRotation");
static_assert(sizeof(AdvancedCamera_GetCameraRotation) == 0x000018, "Wrong size on AdvancedCamera_GetCameraRotation");
static_assert(offsetof(AdvancedCamera_GetCameraRotation, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetCameraRotation::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetCameraRotationLagSpeed
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCamera_GetCameraRotationLagSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetCameraRotationLagSpeed) == 0x000004, "Wrong alignment on AdvancedCamera_GetCameraRotationLagSpeed");
static_assert(sizeof(AdvancedCamera_GetCameraRotationLagSpeed) == 0x000004, "Wrong size on AdvancedCamera_GetCameraRotationLagSpeed");
static_assert(offsetof(AdvancedCamera_GetCameraRotationLagSpeed, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetCameraRotationLagSpeed::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.OnRotateInput
// 0x0020 (0x0020 - 0x0000)
struct AdvancedCamera_OnRotateInput final
{
public:
	struct FVector                                InputVector;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_OnRotateInput) == 0x000008, "Wrong alignment on AdvancedCamera_OnRotateInput");
static_assert(sizeof(AdvancedCamera_OnRotateInput) == 0x000020, "Wrong size on AdvancedCamera_OnRotateInput");
static_assert(offsetof(AdvancedCamera_OnRotateInput, InputVector) == 0x000000, "Member 'AdvancedCamera_OnRotateInput::InputVector' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_OnRotateInput, ElapsedTime) == 0x000018, "Member 'AdvancedCamera_OnRotateInput::ElapsedTime' has a wrong offset!");

// Function X6Camera.AdvancedCamera.OnZoomInput
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCamera_OnZoomInput final
{
public:
	float                                         InputValue;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_OnZoomInput) == 0x000004, "Wrong alignment on AdvancedCamera_OnZoomInput");
static_assert(sizeof(AdvancedCamera_OnZoomInput) == 0x000004, "Wrong size on AdvancedCamera_OnZoomInput");
static_assert(offsetof(AdvancedCamera_OnZoomInput, InputValue) == 0x000000, "Member 'AdvancedCamera_OnZoomInput::InputValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.PushBaseCameraConfig
// 0x000C (0x000C - 0x0000)
struct AdvancedCamera_PushBaseCameraConfig final
{
public:
	class FName                                   ConfigKey;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_PushBaseCameraConfig) == 0x000004, "Wrong alignment on AdvancedCamera_PushBaseCameraConfig");
static_assert(sizeof(AdvancedCamera_PushBaseCameraConfig) == 0x00000C, "Wrong size on AdvancedCamera_PushBaseCameraConfig");
static_assert(offsetof(AdvancedCamera_PushBaseCameraConfig, ConfigKey) == 0x000000, "Member 'AdvancedCamera_PushBaseCameraConfig::ConfigKey' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_PushBaseCameraConfig, ReturnValue) == 0x000008, "Member 'AdvancedCamera_PushBaseCameraConfig::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.PushBaseParams
// 0x01C0 (0x01C0 - 0x0000)
struct AdvancedCamera_PushBaseParams final
{
public:
	struct FCameraBaseParamsDefine                BaseParams;                                        // 0x0000(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FX6CameraConfigBlendParams             CameraConfigBlendParams;                           // 0x0160(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FX6CameraConfigPriority                Priority;                                          // 0x0188(0x0030)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x01B8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_PushBaseParams) == 0x000008, "Wrong alignment on AdvancedCamera_PushBaseParams");
static_assert(sizeof(AdvancedCamera_PushBaseParams) == 0x0001C0, "Wrong size on AdvancedCamera_PushBaseParams");
static_assert(offsetof(AdvancedCamera_PushBaseParams, BaseParams) == 0x000000, "Member 'AdvancedCamera_PushBaseParams::BaseParams' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_PushBaseParams, CameraConfigBlendParams) == 0x000160, "Member 'AdvancedCamera_PushBaseParams::CameraConfigBlendParams' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_PushBaseParams, Priority) == 0x000188, "Member 'AdvancedCamera_PushBaseParams::Priority' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_PushBaseParams, ReturnValue) == 0x0001B8, "Member 'AdvancedCamera_PushBaseParams::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.PushCameraConfig
// 0x0040 (0x0040 - 0x0000)
struct AdvancedCamera_PushCameraConfig final
{
public:
	class UCameraBaseParamsData*                  TargetCameraDataBase;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetConfigKey;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideTransitionParams;                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0018(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_PushCameraConfig) == 0x000008, "Wrong alignment on AdvancedCamera_PushCameraConfig");
static_assert(sizeof(AdvancedCamera_PushCameraConfig) == 0x000040, "Wrong size on AdvancedCamera_PushCameraConfig");
static_assert(offsetof(AdvancedCamera_PushCameraConfig, TargetCameraDataBase) == 0x000000, "Member 'AdvancedCamera_PushCameraConfig::TargetCameraDataBase' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_PushCameraConfig, TargetConfigKey) == 0x000008, "Member 'AdvancedCamera_PushCameraConfig::TargetConfigKey' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_PushCameraConfig, bOverrideTransitionParams) == 0x000010, "Member 'AdvancedCamera_PushCameraConfig::bOverrideTransitionParams' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_PushCameraConfig, TransitionParams) == 0x000018, "Member 'AdvancedCamera_PushCameraConfig::TransitionParams' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_PushCameraConfig, ReturnValue) == 0x000038, "Member 'AdvancedCamera_PushCameraConfig::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.PushCameraConfigOfCameraDataBase
// 0x0038 (0x0038 - 0x0000)
struct AdvancedCamera_PushCameraConfigOfCameraDataBase final
{
public:
	class FName                                   TargetConfigKey;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FX6CameraConfigBlendParams             CameraConfigBlendParams;                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_PushCameraConfigOfCameraDataBase) == 0x000008, "Wrong alignment on AdvancedCamera_PushCameraConfigOfCameraDataBase");
static_assert(sizeof(AdvancedCamera_PushCameraConfigOfCameraDataBase) == 0x000038, "Wrong size on AdvancedCamera_PushCameraConfigOfCameraDataBase");
static_assert(offsetof(AdvancedCamera_PushCameraConfigOfCameraDataBase, TargetConfigKey) == 0x000000, "Member 'AdvancedCamera_PushCameraConfigOfCameraDataBase::TargetConfigKey' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_PushCameraConfigOfCameraDataBase, CameraConfigBlendParams) == 0x000008, "Member 'AdvancedCamera_PushCameraConfigOfCameraDataBase::CameraConfigBlendParams' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_PushCameraConfigOfCameraDataBase, ReturnValue) == 0x000030, "Member 'AdvancedCamera_PushCameraConfigOfCameraDataBase::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.ReceiveUpdateLookAtTarget
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCamera_ReceiveUpdateLookAtTarget final
{
public:
	const class AActor*                           OldLookAtTarget;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           NewLookAtTarget;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_ReceiveUpdateLookAtTarget) == 0x000008, "Wrong alignment on AdvancedCamera_ReceiveUpdateLookAtTarget");
static_assert(sizeof(AdvancedCamera_ReceiveUpdateLookAtTarget) == 0x000010, "Wrong size on AdvancedCamera_ReceiveUpdateLookAtTarget");
static_assert(offsetof(AdvancedCamera_ReceiveUpdateLookAtTarget, OldLookAtTarget) == 0x000000, "Member 'AdvancedCamera_ReceiveUpdateLookAtTarget::OldLookAtTarget' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_ReceiveUpdateLookAtTarget, NewLookAtTarget) == 0x000008, "Member 'AdvancedCamera_ReceiveUpdateLookAtTarget::NewLookAtTarget' has a wrong offset!");

// Function X6Camera.AdvancedCamera.RemoveBaseCameraConfigByIndex
// 0x0028 (0x0028 - 0x0000)
struct AdvancedCamera_RemoveBaseCameraConfigByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideTransitionParams;                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_RemoveBaseCameraConfigByIndex) == 0x000008, "Wrong alignment on AdvancedCamera_RemoveBaseCameraConfigByIndex");
static_assert(sizeof(AdvancedCamera_RemoveBaseCameraConfigByIndex) == 0x000028, "Wrong size on AdvancedCamera_RemoveBaseCameraConfigByIndex");
static_assert(offsetof(AdvancedCamera_RemoveBaseCameraConfigByIndex, Index_0) == 0x000000, "Member 'AdvancedCamera_RemoveBaseCameraConfigByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_RemoveBaseCameraConfigByIndex, bOverrideTransitionParams) == 0x000004, "Member 'AdvancedCamera_RemoveBaseCameraConfigByIndex::bOverrideTransitionParams' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_RemoveBaseCameraConfigByIndex, TransitionParams) == 0x000008, "Member 'AdvancedCamera_RemoveBaseCameraConfigByIndex::TransitionParams' has a wrong offset!");

// Function X6Camera.AdvancedCamera.RemoveCameraConfigByIndex
// 0x0028 (0x0028 - 0x0000)
struct AdvancedCamera_RemoveCameraConfigByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideTransitionParams;                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_RemoveCameraConfigByIndex) == 0x000008, "Wrong alignment on AdvancedCamera_RemoveCameraConfigByIndex");
static_assert(sizeof(AdvancedCamera_RemoveCameraConfigByIndex) == 0x000028, "Wrong size on AdvancedCamera_RemoveCameraConfigByIndex");
static_assert(offsetof(AdvancedCamera_RemoveCameraConfigByIndex, Index_0) == 0x000000, "Member 'AdvancedCamera_RemoveCameraConfigByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_RemoveCameraConfigByIndex, bOverrideTransitionParams) == 0x000004, "Member 'AdvancedCamera_RemoveCameraConfigByIndex::bOverrideTransitionParams' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_RemoveCameraConfigByIndex, TransitionParams) == 0x000008, "Member 'AdvancedCamera_RemoveCameraConfigByIndex::TransitionParams' has a wrong offset!");

// Function X6Camera.AdvancedCamera.RemoveCameraConfigModifier
// 0x0030 (0x0030 - 0x0000)
struct AdvancedCamera_RemoveCameraConfigModifier final
{
public:
	class UX6CameraRuntimeConfigModifier*         Modifier;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FX6CameraConfigBlendParams             CameraConfigBlendParams;                           // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_RemoveCameraConfigModifier) == 0x000008, "Wrong alignment on AdvancedCamera_RemoveCameraConfigModifier");
static_assert(sizeof(AdvancedCamera_RemoveCameraConfigModifier) == 0x000030, "Wrong size on AdvancedCamera_RemoveCameraConfigModifier");
static_assert(offsetof(AdvancedCamera_RemoveCameraConfigModifier, Modifier) == 0x000000, "Member 'AdvancedCamera_RemoveCameraConfigModifier::Modifier' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_RemoveCameraConfigModifier, CameraConfigBlendParams) == 0x000008, "Member 'AdvancedCamera_RemoveCameraConfigModifier::CameraConfigBlendParams' has a wrong offset!");

// Function X6Camera.AdvancedCamera.ResetToDefaultRelativeRotation
// 0x0002 (0x0002 - 0x0000)
struct AdvancedCamera_ResetToDefaultRelativeRotation final
{
public:
	bool                                          bApplyImmediate;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUpdateCamera;                                // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_ResetToDefaultRelativeRotation) == 0x000001, "Wrong alignment on AdvancedCamera_ResetToDefaultRelativeRotation");
static_assert(sizeof(AdvancedCamera_ResetToDefaultRelativeRotation) == 0x000002, "Wrong size on AdvancedCamera_ResetToDefaultRelativeRotation");
static_assert(offsetof(AdvancedCamera_ResetToDefaultRelativeRotation, bApplyImmediate) == 0x000000, "Member 'AdvancedCamera_ResetToDefaultRelativeRotation::bApplyImmediate' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_ResetToDefaultRelativeRotation, bForceUpdateCamera) == 0x000001, "Member 'AdvancedCamera_ResetToDefaultRelativeRotation::bForceUpdateCamera' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetAcceptInput
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCamera_SetAcceptInput final
{
public:
	bool                                          bNewAcceptInput;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetAcceptInput) == 0x000001, "Wrong alignment on AdvancedCamera_SetAcceptInput");
static_assert(sizeof(AdvancedCamera_SetAcceptInput) == 0x000001, "Wrong size on AdvancedCamera_SetAcceptInput");
static_assert(offsetof(AdvancedCamera_SetAcceptInput, bNewAcceptInput) == 0x000000, "Member 'AdvancedCamera_SetAcceptInput::bNewAcceptInput' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetAmbientConfigKey
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCamera_SetAmbientConfigKey final
{
public:
	class FName                                   ConfigKey;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetAmbientConfigKey) == 0x000004, "Wrong alignment on AdvancedCamera_SetAmbientConfigKey");
static_assert(sizeof(AdvancedCamera_SetAmbientConfigKey) == 0x000008, "Wrong size on AdvancedCamera_SetAmbientConfigKey");
static_assert(offsetof(AdvancedCamera_SetAmbientConfigKey, ConfigKey) == 0x000000, "Member 'AdvancedCamera_SetAmbientConfigKey::ConfigKey' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetArmlengthLagSpeed
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCamera_SetArmlengthLagSpeed final
{
public:
	float                                         ArmlengthLagSpeed;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetArmlengthLagSpeed) == 0x000004, "Wrong alignment on AdvancedCamera_SetArmlengthLagSpeed");
static_assert(sizeof(AdvancedCamera_SetArmlengthLagSpeed) == 0x000004, "Wrong size on AdvancedCamera_SetArmlengthLagSpeed");
static_assert(offsetof(AdvancedCamera_SetArmlengthLagSpeed, ArmlengthLagSpeed) == 0x000000, "Member 'AdvancedCamera_SetArmlengthLagSpeed::ArmlengthLagSpeed' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetCameraOrientationSynchronizer
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCamera_SetCameraOrientationSynchronizer final
{
public:
	TSubclassOf<class UCameraOrientationSynchronizer> NewSynchronizerClass;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetCameraOrientationSynchronizer) == 0x000008, "Wrong alignment on AdvancedCamera_SetCameraOrientationSynchronizer");
static_assert(sizeof(AdvancedCamera_SetCameraOrientationSynchronizer) == 0x000008, "Wrong size on AdvancedCamera_SetCameraOrientationSynchronizer");
static_assert(offsetof(AdvancedCamera_SetCameraOrientationSynchronizer, NewSynchronizerClass) == 0x000000, "Member 'AdvancedCamera_SetCameraOrientationSynchronizer::NewSynchronizerClass' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetCameraRotationLagSpeed
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCamera_SetCameraRotationLagSpeed final
{
public:
	float                                         CameraRotationLagSpeed;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetCameraRotationLagSpeed) == 0x000004, "Wrong alignment on AdvancedCamera_SetCameraRotationLagSpeed");
static_assert(sizeof(AdvancedCamera_SetCameraRotationLagSpeed) == 0x000004, "Wrong size on AdvancedCamera_SetCameraRotationLagSpeed");
static_assert(offsetof(AdvancedCamera_SetCameraRotationLagSpeed, CameraRotationLagSpeed) == 0x000000, "Member 'AdvancedCamera_SetCameraRotationLagSpeed::CameraRotationLagSpeed' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetCameraWorldRotation
// 0x0020 (0x0020 - 0x0000)
struct AdvancedCamera_SetCameraWorldRotation final
{
public:
	struct FRotator                               NewDesireRotation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ApplyImmediate;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_SetCameraWorldRotation) == 0x000008, "Wrong alignment on AdvancedCamera_SetCameraWorldRotation");
static_assert(sizeof(AdvancedCamera_SetCameraWorldRotation) == 0x000020, "Wrong size on AdvancedCamera_SetCameraWorldRotation");
static_assert(offsetof(AdvancedCamera_SetCameraWorldRotation, NewDesireRotation) == 0x000000, "Member 'AdvancedCamera_SetCameraWorldRotation::NewDesireRotation' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetCameraWorldRotation, ApplyImmediate) == 0x000018, "Member 'AdvancedCamera_SetCameraWorldRotation::ApplyImmediate' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetDesiredFOV
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCamera_SetDesiredFOV final
{
public:
	float                                         NewDesireFov;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyImmediate;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_SetDesiredFOV) == 0x000004, "Wrong alignment on AdvancedCamera_SetDesiredFOV");
static_assert(sizeof(AdvancedCamera_SetDesiredFOV) == 0x000008, "Wrong size on AdvancedCamera_SetDesiredFOV");
static_assert(offsetof(AdvancedCamera_SetDesiredFOV, NewDesireFov) == 0x000000, "Member 'AdvancedCamera_SetDesiredFOV::NewDesireFov' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetDesiredFOV, ApplyImmediate) == 0x000004, "Member 'AdvancedCamera_SetDesiredFOV::ApplyImmediate' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetDesireLocation
// 0x0020 (0x0020 - 0x0000)
struct AdvancedCamera_SetDesireLocation final
{
public:
	struct FVector                                NewDesireLocation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyImmediate;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_SetDesireLocation) == 0x000008, "Wrong alignment on AdvancedCamera_SetDesireLocation");
static_assert(sizeof(AdvancedCamera_SetDesireLocation) == 0x000020, "Wrong size on AdvancedCamera_SetDesireLocation");
static_assert(offsetof(AdvancedCamera_SetDesireLocation, NewDesireLocation) == 0x000000, "Member 'AdvancedCamera_SetDesireLocation::NewDesireLocation' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetDesireLocation, ApplyImmediate) == 0x000018, "Member 'AdvancedCamera_SetDesireLocation::ApplyImmediate' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetDesireRotation
// 0x0020 (0x0020 - 0x0000)
struct AdvancedCamera_SetDesireRotation final
{
public:
	struct FRotator                               NewDesireRotation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ApplyImmediate;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUpdateCamera;                                // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_SetDesireRotation) == 0x000008, "Wrong alignment on AdvancedCamera_SetDesireRotation");
static_assert(sizeof(AdvancedCamera_SetDesireRotation) == 0x000020, "Wrong size on AdvancedCamera_SetDesireRotation");
static_assert(offsetof(AdvancedCamera_SetDesireRotation, NewDesireRotation) == 0x000000, "Member 'AdvancedCamera_SetDesireRotation::NewDesireRotation' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetDesireRotation, ApplyImmediate) == 0x000018, "Member 'AdvancedCamera_SetDesireRotation::ApplyImmediate' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetDesireRotation, bForceUpdateCamera) == 0x000019, "Member 'AdvancedCamera_SetDesireRotation::bForceUpdateCamera' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetDissolveEnable
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCamera_SetDissolveEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetDissolveEnable) == 0x000001, "Wrong alignment on AdvancedCamera_SetDissolveEnable");
static_assert(sizeof(AdvancedCamera_SetDissolveEnable) == 0x000001, "Wrong size on AdvancedCamera_SetDissolveEnable");
static_assert(offsetof(AdvancedCamera_SetDissolveEnable, bEnable) == 0x000000, "Member 'AdvancedCamera_SetDissolveEnable::bEnable' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetEnableZoom
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCamera_SetEnableZoom final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetEnableZoom) == 0x000001, "Wrong alignment on AdvancedCamera_SetEnableZoom");
static_assert(sizeof(AdvancedCamera_SetEnableZoom) == 0x000001, "Wrong size on AdvancedCamera_SetEnableZoom");
static_assert(offsetof(AdvancedCamera_SetEnableZoom, bEnable) == 0x000000, "Member 'AdvancedCamera_SetEnableZoom::bEnable' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetInterpLookAtLocationSpeedScale
// 0x0018 (0x0018 - 0x0000)
struct AdvancedCamera_SetInterpLookAtLocationSpeedScale final
{
public:
	struct FVector                                InInterpLookAtLocationSpeedScale;                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetInterpLookAtLocationSpeedScale) == 0x000008, "Wrong alignment on AdvancedCamera_SetInterpLookAtLocationSpeedScale");
static_assert(sizeof(AdvancedCamera_SetInterpLookAtLocationSpeedScale) == 0x000018, "Wrong size on AdvancedCamera_SetInterpLookAtLocationSpeedScale");
static_assert(offsetof(AdvancedCamera_SetInterpLookAtLocationSpeedScale, InInterpLookAtLocationSpeedScale) == 0x000000, "Member 'AdvancedCamera_SetInterpLookAtLocationSpeedScale::InInterpLookAtLocationSpeedScale' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetLockRelativeRotationToLookAtTarget
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCamera_SetLockRelativeRotationToLookAtTarget final
{
public:
	bool                                          bInLock;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetLockRelativeRotationToLookAtTarget) == 0x000001, "Wrong alignment on AdvancedCamera_SetLockRelativeRotationToLookAtTarget");
static_assert(sizeof(AdvancedCamera_SetLockRelativeRotationToLookAtTarget) == 0x000001, "Wrong size on AdvancedCamera_SetLockRelativeRotationToLookAtTarget");
static_assert(offsetof(AdvancedCamera_SetLockRelativeRotationToLookAtTarget, bInLock) == 0x000000, "Member 'AdvancedCamera_SetLockRelativeRotationToLookAtTarget::bInLock' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetLookAtRotation
// 0x0020 (0x0020 - 0x0000)
struct AdvancedCamera_SetLookAtRotation final
{
public:
	struct FRotator                               NewDesireRotation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ApplyImmediate;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_SetLookAtRotation) == 0x000008, "Wrong alignment on AdvancedCamera_SetLookAtRotation");
static_assert(sizeof(AdvancedCamera_SetLookAtRotation) == 0x000020, "Wrong size on AdvancedCamera_SetLookAtRotation");
static_assert(offsetof(AdvancedCamera_SetLookAtRotation, NewDesireRotation) == 0x000000, "Member 'AdvancedCamera_SetLookAtRotation::NewDesireRotation' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetLookAtRotation, ApplyImmediate) == 0x000018, "Member 'AdvancedCamera_SetLookAtRotation::ApplyImmediate' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetMaxDistanceToInterpTargetScale
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCamera_SetMaxDistanceToInterpTargetScale final
{
public:
	float                                         InMaxDistanceToInterpTargetScale;                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetMaxDistanceToInterpTargetScale) == 0x000004, "Wrong alignment on AdvancedCamera_SetMaxDistanceToInterpTargetScale");
static_assert(sizeof(AdvancedCamera_SetMaxDistanceToInterpTargetScale) == 0x000004, "Wrong size on AdvancedCamera_SetMaxDistanceToInterpTargetScale");
static_assert(offsetof(AdvancedCamera_SetMaxDistanceToInterpTargetScale, InMaxDistanceToInterpTargetScale) == 0x000000, "Member 'AdvancedCamera_SetMaxDistanceToInterpTargetScale::InMaxDistanceToInterpTargetScale' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetNeedInterpLookAtLocation
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCamera_SetNeedInterpLookAtLocation final
{
public:
	bool                                          bInNeedInterpLookAtLocation;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetNeedInterpLookAtLocation) == 0x000001, "Wrong alignment on AdvancedCamera_SetNeedInterpLookAtLocation");
static_assert(sizeof(AdvancedCamera_SetNeedInterpLookAtLocation) == 0x000001, "Wrong size on AdvancedCamera_SetNeedInterpLookAtLocation");
static_assert(offsetof(AdvancedCamera_SetNeedInterpLookAtLocation, bInNeedInterpLookAtLocation) == 0x000000, "Member 'AdvancedCamera_SetNeedInterpLookAtLocation::bInNeedInterpLookAtLocation' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetOverrideCameraRotationLagSpeed
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCamera_SetOverrideCameraRotationLagSpeed final
{
public:
	bool                                          bOverride;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraRotationLagSpeed;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetOverrideCameraRotationLagSpeed) == 0x000004, "Wrong alignment on AdvancedCamera_SetOverrideCameraRotationLagSpeed");
static_assert(sizeof(AdvancedCamera_SetOverrideCameraRotationLagSpeed) == 0x000008, "Wrong size on AdvancedCamera_SetOverrideCameraRotationLagSpeed");
static_assert(offsetof(AdvancedCamera_SetOverrideCameraRotationLagSpeed, bOverride) == 0x000000, "Member 'AdvancedCamera_SetOverrideCameraRotationLagSpeed::bOverride' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetOverrideCameraRotationLagSpeed, CameraRotationLagSpeed) == 0x000004, "Member 'AdvancedCamera_SetOverrideCameraRotationLagSpeed::CameraRotationLagSpeed' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetPassiveDesiredRotationBySpeed
// 0x0028 (0x0028 - 0x0000)
struct AdvancedCamera_SetPassiveDesiredRotationBySpeed final
{
public:
	struct FRotator                               NewDesireRotation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AngularSpeed;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunction;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_SetPassiveDesiredRotationBySpeed) == 0x000008, "Wrong alignment on AdvancedCamera_SetPassiveDesiredRotationBySpeed");
static_assert(sizeof(AdvancedCamera_SetPassiveDesiredRotationBySpeed) == 0x000028, "Wrong size on AdvancedCamera_SetPassiveDesiredRotationBySpeed");
static_assert(offsetof(AdvancedCamera_SetPassiveDesiredRotationBySpeed, NewDesireRotation) == 0x000000, "Member 'AdvancedCamera_SetPassiveDesiredRotationBySpeed::NewDesireRotation' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetPassiveDesiredRotationBySpeed, AngularSpeed) == 0x000018, "Member 'AdvancedCamera_SetPassiveDesiredRotationBySpeed::AngularSpeed' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetPassiveDesiredRotationBySpeed, BlendFunction) == 0x00001C, "Member 'AdvancedCamera_SetPassiveDesiredRotationBySpeed::BlendFunction' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetPassiveDesiredRotationBySpeed, BlendExp) == 0x000020, "Member 'AdvancedCamera_SetPassiveDesiredRotationBySpeed::BlendExp' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetPassiveDesiredRotationByTime
// 0x0028 (0x0028 - 0x0000)
struct AdvancedCamera_SetPassiveDesiredRotationByTime final
{
public:
	struct FRotator                               NewDesireRotation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunction;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_SetPassiveDesiredRotationByTime) == 0x000008, "Wrong alignment on AdvancedCamera_SetPassiveDesiredRotationByTime");
static_assert(sizeof(AdvancedCamera_SetPassiveDesiredRotationByTime) == 0x000028, "Wrong size on AdvancedCamera_SetPassiveDesiredRotationByTime");
static_assert(offsetof(AdvancedCamera_SetPassiveDesiredRotationByTime, NewDesireRotation) == 0x000000, "Member 'AdvancedCamera_SetPassiveDesiredRotationByTime::NewDesireRotation' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetPassiveDesiredRotationByTime, TotalTime) == 0x000018, "Member 'AdvancedCamera_SetPassiveDesiredRotationByTime::TotalTime' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetPassiveDesiredRotationByTime, BlendFunction) == 0x00001C, "Member 'AdvancedCamera_SetPassiveDesiredRotationByTime::BlendFunction' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_SetPassiveDesiredRotationByTime, BlendExp) == 0x000020, "Member 'AdvancedCamera_SetPassiveDesiredRotationByTime::BlendExp' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCamera_SetUsingGamepad final
{
public:
	bool                                          bInUsingGamepad;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetUsingGamepad) == 0x000001, "Wrong alignment on AdvancedCamera_SetUsingGamepad");
static_assert(sizeof(AdvancedCamera_SetUsingGamepad) == 0x000001, "Wrong size on AdvancedCamera_SetUsingGamepad");
static_assert(offsetof(AdvancedCamera_SetUsingGamepad, bInUsingGamepad) == 0x000000, "Member 'AdvancedCamera_SetUsingGamepad::bInUsingGamepad' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetZoomedTargetOffsetZAdjustment
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCamera_SetZoomedTargetOffsetZAdjustment final
{
public:
	float                                         NewZoomedTargetOffsetZAdjustment;                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetZoomedTargetOffsetZAdjustment) == 0x000004, "Wrong alignment on AdvancedCamera_SetZoomedTargetOffsetZAdjustment");
static_assert(sizeof(AdvancedCamera_SetZoomedTargetOffsetZAdjustment) == 0x000004, "Wrong size on AdvancedCamera_SetZoomedTargetOffsetZAdjustment");
static_assert(offsetof(AdvancedCamera_SetZoomedTargetOffsetZAdjustment, NewZoomedTargetOffsetZAdjustment) == 0x000000, "Member 'AdvancedCamera_SetZoomedTargetOffsetZAdjustment::NewZoomedTargetOffsetZAdjustment' has a wrong offset!");

// Function X6Camera.AdvancedCamera.TransformVectorByRotation
// 0x0048 (0x0048 - 0x0000)
struct AdvancedCamera_TransformVectorByRotation final
{
public:
	struct FRotator                               InRotation;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TransformVector;                                   // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_TransformVectorByRotation) == 0x000008, "Wrong alignment on AdvancedCamera_TransformVectorByRotation");
static_assert(sizeof(AdvancedCamera_TransformVectorByRotation) == 0x000048, "Wrong size on AdvancedCamera_TransformVectorByRotation");
static_assert(offsetof(AdvancedCamera_TransformVectorByRotation, InRotation) == 0x000000, "Member 'AdvancedCamera_TransformVectorByRotation::InRotation' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_TransformVectorByRotation, TransformVector) == 0x000018, "Member 'AdvancedCamera_TransformVectorByRotation::TransformVector' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_TransformVectorByRotation, ReturnValue) == 0x000030, "Member 'AdvancedCamera_TransformVectorByRotation::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.TryToUpdateBasedMovementHelper
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCamera_TryToUpdateBasedMovementHelper final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_TryToUpdateBasedMovementHelper) == 0x000001, "Wrong alignment on AdvancedCamera_TryToUpdateBasedMovementHelper");
static_assert(sizeof(AdvancedCamera_TryToUpdateBasedMovementHelper) == 0x000001, "Wrong size on AdvancedCamera_TryToUpdateBasedMovementHelper");
static_assert(offsetof(AdvancedCamera_TryToUpdateBasedMovementHelper, ReturnValue) == 0x000000, "Member 'AdvancedCamera_TryToUpdateBasedMovementHelper::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.UpdateBasedMovementHelper
// 0x01A0 (0x01A0 - 0x0000)
struct AdvancedCamera_UpdateBasedMovementHelper final
{
public:
	const class UCharacterMovementComponent*      MovementComponent;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LastBaseTransform;                                 // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             CurrentBaseTransform;                              // 0x0070(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LastActorTransform;                                // 0x00D0(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             CurrentActorTransform;                             // 0x0130(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0190(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0xF];                                      // 0x0191(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_UpdateBasedMovementHelper) == 0x000010, "Wrong alignment on AdvancedCamera_UpdateBasedMovementHelper");
static_assert(sizeof(AdvancedCamera_UpdateBasedMovementHelper) == 0x0001A0, "Wrong size on AdvancedCamera_UpdateBasedMovementHelper");
static_assert(offsetof(AdvancedCamera_UpdateBasedMovementHelper, MovementComponent) == 0x000000, "Member 'AdvancedCamera_UpdateBasedMovementHelper::MovementComponent' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateBasedMovementHelper, LastBaseTransform) == 0x000010, "Member 'AdvancedCamera_UpdateBasedMovementHelper::LastBaseTransform' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateBasedMovementHelper, CurrentBaseTransform) == 0x000070, "Member 'AdvancedCamera_UpdateBasedMovementHelper::CurrentBaseTransform' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateBasedMovementHelper, LastActorTransform) == 0x0000D0, "Member 'AdvancedCamera_UpdateBasedMovementHelper::LastActorTransform' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateBasedMovementHelper, CurrentActorTransform) == 0x000130, "Member 'AdvancedCamera_UpdateBasedMovementHelper::CurrentActorTransform' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateBasedMovementHelper, ReturnValue) == 0x000190, "Member 'AdvancedCamera_UpdateBasedMovementHelper::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.UpdateCameraConfig
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCamera_UpdateCameraConfig final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_UpdateCameraConfig) == 0x000004, "Wrong alignment on AdvancedCamera_UpdateCameraConfig");
static_assert(sizeof(AdvancedCamera_UpdateCameraConfig) == 0x000004, "Wrong size on AdvancedCamera_UpdateCameraConfig");
static_assert(offsetof(AdvancedCamera_UpdateCameraConfig, DeltaTime) == 0x000000, "Member 'AdvancedCamera_UpdateCameraConfig::DeltaTime' has a wrong offset!");

// Function X6Camera.AdvancedCamera.UpdateDesiredArmLocation
// 0x000C (0x000C - 0x0000)
struct AdvancedCamera_UpdateDesiredArmLocation final
{
public:
	bool                                          bDoTrace;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationLag;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocationLag;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetArmlengthLag;                               // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_UpdateDesiredArmLocation) == 0x000004, "Wrong alignment on AdvancedCamera_UpdateDesiredArmLocation");
static_assert(sizeof(AdvancedCamera_UpdateDesiredArmLocation) == 0x00000C, "Wrong size on AdvancedCamera_UpdateDesiredArmLocation");
static_assert(offsetof(AdvancedCamera_UpdateDesiredArmLocation, bDoTrace) == 0x000000, "Member 'AdvancedCamera_UpdateDesiredArmLocation::bDoTrace' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateDesiredArmLocation, DeltaTime) == 0x000004, "Member 'AdvancedCamera_UpdateDesiredArmLocation::DeltaTime' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateDesiredArmLocation, bRotationLag) == 0x000008, "Member 'AdvancedCamera_UpdateDesiredArmLocation::bRotationLag' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateDesiredArmLocation, bLocationLag) == 0x000009, "Member 'AdvancedCamera_UpdateDesiredArmLocation::bLocationLag' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateDesiredArmLocation, bTargetArmlengthLag) == 0x00000A, "Member 'AdvancedCamera_UpdateDesiredArmLocation::bTargetArmlengthLag' has a wrong offset!");

// Function X6Camera.AdvancedCamera.UpdateDesiredArmLocationFunction
// 0x000C (0x000C - 0x0000)
struct AdvancedCamera_UpdateDesiredArmLocationFunction final
{
public:
	bool                                          bDoTrace;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationLag;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocationLag;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetArmlengthLag;                               // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_UpdateDesiredArmLocationFunction) == 0x000004, "Wrong alignment on AdvancedCamera_UpdateDesiredArmLocationFunction");
static_assert(sizeof(AdvancedCamera_UpdateDesiredArmLocationFunction) == 0x00000C, "Wrong size on AdvancedCamera_UpdateDesiredArmLocationFunction");
static_assert(offsetof(AdvancedCamera_UpdateDesiredArmLocationFunction, bDoTrace) == 0x000000, "Member 'AdvancedCamera_UpdateDesiredArmLocationFunction::bDoTrace' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateDesiredArmLocationFunction, DeltaTime) == 0x000004, "Member 'AdvancedCamera_UpdateDesiredArmLocationFunction::DeltaTime' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateDesiredArmLocationFunction, bRotationLag) == 0x000008, "Member 'AdvancedCamera_UpdateDesiredArmLocationFunction::bRotationLag' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateDesiredArmLocationFunction, bLocationLag) == 0x000009, "Member 'AdvancedCamera_UpdateDesiredArmLocationFunction::bLocationLag' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdateDesiredArmLocationFunction, bTargetArmlengthLag) == 0x00000A, "Member 'AdvancedCamera_UpdateDesiredArmLocationFunction::bTargetArmlengthLag' has a wrong offset!");

// Function X6Camera.AdvancedCamera.UpdatePassiveRotate
// 0x0020 (0x0020 - 0x0000)
struct AdvancedCamera_UpdatePassiveRotate final
{
public:
	struct FRotator                               DesiredRot;                                        // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AdvancedCamera_UpdatePassiveRotate) == 0x000008, "Wrong alignment on AdvancedCamera_UpdatePassiveRotate");
static_assert(sizeof(AdvancedCamera_UpdatePassiveRotate) == 0x000020, "Wrong size on AdvancedCamera_UpdatePassiveRotate");
static_assert(offsetof(AdvancedCamera_UpdatePassiveRotate, DesiredRot) == 0x000000, "Member 'AdvancedCamera_UpdatePassiveRotate::DesiredRot' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_UpdatePassiveRotate, DeltaTime) == 0x000018, "Member 'AdvancedCamera_UpdatePassiveRotate::DeltaTime' has a wrong offset!");

// Function X6Camera.AdvancedCamera.CollectInputDebugOutput
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCamera_CollectInputDebugOutput final
{
public:
	TArray<class FString>                         InOutDebugInfoLines;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_CollectInputDebugOutput) == 0x000008, "Wrong alignment on AdvancedCamera_CollectInputDebugOutput");
static_assert(sizeof(AdvancedCamera_CollectInputDebugOutput) == 0x000010, "Wrong size on AdvancedCamera_CollectInputDebugOutput");
static_assert(offsetof(AdvancedCamera_CollectInputDebugOutput, InOutDebugInfoLines) == 0x000000, "Member 'AdvancedCamera_CollectInputDebugOutput::InOutDebugInfoLines' has a wrong offset!");

// Function X6Camera.AdvancedCamera.CollectLookAtTargetDebugOutput
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCamera_CollectLookAtTargetDebugOutput final
{
public:
	TArray<class FString>                         InOutDebugInfoLines;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_CollectLookAtTargetDebugOutput) == 0x000008, "Wrong alignment on AdvancedCamera_CollectLookAtTargetDebugOutput");
static_assert(sizeof(AdvancedCamera_CollectLookAtTargetDebugOutput) == 0x000010, "Wrong size on AdvancedCamera_CollectLookAtTargetDebugOutput");
static_assert(offsetof(AdvancedCamera_CollectLookAtTargetDebugOutput, InOutDebugInfoLines) == 0x000000, "Member 'AdvancedCamera_CollectLookAtTargetDebugOutput::InOutDebugInfoLines' has a wrong offset!");

// Function X6Camera.AdvancedCamera.CollectSpringArmDebugOutput
// 0x0010 (0x0010 - 0x0000)
struct AdvancedCamera_CollectSpringArmDebugOutput final
{
public:
	TArray<class FString>                         InOutDebugInfoLines;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_CollectSpringArmDebugOutput) == 0x000008, "Wrong alignment on AdvancedCamera_CollectSpringArmDebugOutput");
static_assert(sizeof(AdvancedCamera_CollectSpringArmDebugOutput) == 0x000010, "Wrong size on AdvancedCamera_CollectSpringArmDebugOutput");
static_assert(offsetof(AdvancedCamera_CollectSpringArmDebugOutput, InOutDebugInfoLines) == 0x000000, "Member 'AdvancedCamera_CollectSpringArmDebugOutput::InOutDebugInfoLines' has a wrong offset!");

// Function X6Camera.AdvancedCamera.FixLocationByBasedMovement
// 0x00A0 (0x00A0 - 0x0000)
struct AdvancedCamera_FixLocationByBasedMovement final
{
public:
	struct FBasedMovementFixCameraHelper          Helper;                                            // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0070(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_FixLocationByBasedMovement) == 0x000010, "Wrong alignment on AdvancedCamera_FixLocationByBasedMovement");
static_assert(sizeof(AdvancedCamera_FixLocationByBasedMovement) == 0x0000A0, "Wrong size on AdvancedCamera_FixLocationByBasedMovement");
static_assert(offsetof(AdvancedCamera_FixLocationByBasedMovement, Helper) == 0x000000, "Member 'AdvancedCamera_FixLocationByBasedMovement::Helper' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_FixLocationByBasedMovement, InLocation) == 0x000070, "Member 'AdvancedCamera_FixLocationByBasedMovement::InLocation' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_FixLocationByBasedMovement, ReturnValue) == 0x000088, "Member 'AdvancedCamera_FixLocationByBasedMovement::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.FixRotationByBasedMovement
// 0x00A0 (0x00A0 - 0x0000)
struct AdvancedCamera_FixRotationByBasedMovement final
{
public:
	struct FBasedMovementFixCameraHelper          Helper;                                            // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0070(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0088(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_FixRotationByBasedMovement) == 0x000010, "Wrong alignment on AdvancedCamera_FixRotationByBasedMovement");
static_assert(sizeof(AdvancedCamera_FixRotationByBasedMovement) == 0x0000A0, "Wrong size on AdvancedCamera_FixRotationByBasedMovement");
static_assert(offsetof(AdvancedCamera_FixRotationByBasedMovement, Helper) == 0x000000, "Member 'AdvancedCamera_FixRotationByBasedMovement::Helper' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_FixRotationByBasedMovement, InRotation) == 0x000070, "Member 'AdvancedCamera_FixRotationByBasedMovement::InRotation' has a wrong offset!");
static_assert(offsetof(AdvancedCamera_FixRotationByBasedMovement, ReturnValue) == 0x000088, "Member 'AdvancedCamera_FixRotationByBasedMovement::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetCameraArmlength
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCamera_GetCameraArmlength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetCameraArmlength) == 0x000004, "Wrong alignment on AdvancedCamera_GetCameraArmlength");
static_assert(sizeof(AdvancedCamera_GetCameraArmlength) == 0x000004, "Wrong size on AdvancedCamera_GetCameraArmlength");
static_assert(offsetof(AdvancedCamera_GetCameraArmlength, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetCameraArmlength::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetCameraConfigkey
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCamera_GetCameraConfigkey final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetCameraConfigkey) == 0x000004, "Wrong alignment on AdvancedCamera_GetCameraConfigkey");
static_assert(sizeof(AdvancedCamera_GetCameraConfigkey) == 0x000008, "Wrong size on AdvancedCamera_GetCameraConfigkey");
static_assert(offsetof(AdvancedCamera_GetCameraConfigkey, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetCameraConfigkey::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetCameraOrientationSynchronizer
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCamera_GetCameraOrientationSynchronizer final
{
public:
	class UCameraOrientationSynchronizer*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetCameraOrientationSynchronizer) == 0x000008, "Wrong alignment on AdvancedCamera_GetCameraOrientationSynchronizer");
static_assert(sizeof(AdvancedCamera_GetCameraOrientationSynchronizer) == 0x000008, "Wrong size on AdvancedCamera_GetCameraOrientationSynchronizer");
static_assert(offsetof(AdvancedCamera_GetCameraOrientationSynchronizer, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetCameraOrientationSynchronizer::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetCameraSettings
// 0x0118 (0x0118 - 0x0000)
struct AdvancedCamera_GetCameraSettings final
{
public:
	struct FX6CameraBlendableSettings             ReturnValue;                                       // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetCameraSettings) == 0x000008, "Wrong alignment on AdvancedCamera_GetCameraSettings");
static_assert(sizeof(AdvancedCamera_GetCameraSettings) == 0x000118, "Wrong size on AdvancedCamera_GetCameraSettings");
static_assert(offsetof(AdvancedCamera_GetCameraSettings, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetCameraSettings::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetCurrentSocketRotationOffset
// 0x0018 (0x0018 - 0x0000)
struct AdvancedCamera_GetCurrentSocketRotationOffset final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetCurrentSocketRotationOffset) == 0x000008, "Wrong alignment on AdvancedCamera_GetCurrentSocketRotationOffset");
static_assert(sizeof(AdvancedCamera_GetCurrentSocketRotationOffset) == 0x000018, "Wrong size on AdvancedCamera_GetCurrentSocketRotationOffset");
static_assert(offsetof(AdvancedCamera_GetCurrentSocketRotationOffset, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetCurrentSocketRotationOffset::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetDesiredFOV
// 0x0004 (0x0004 - 0x0000)
struct AdvancedCamera_GetDesiredFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetDesiredFOV) == 0x000004, "Wrong alignment on AdvancedCamera_GetDesiredFOV");
static_assert(sizeof(AdvancedCamera_GetDesiredFOV) == 0x000004, "Wrong size on AdvancedCamera_GetDesiredFOV");
static_assert(offsetof(AdvancedCamera_GetDesiredFOV, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetDesiredFOV::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetDesiredLocation
// 0x0018 (0x0018 - 0x0000)
struct AdvancedCamera_GetDesiredLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetDesiredLocation) == 0x000008, "Wrong alignment on AdvancedCamera_GetDesiredLocation");
static_assert(sizeof(AdvancedCamera_GetDesiredLocation) == 0x000018, "Wrong size on AdvancedCamera_GetDesiredLocation");
static_assert(offsetof(AdvancedCamera_GetDesiredLocation, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetDesiredLocation::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetDesiredRotation
// 0x0018 (0x0018 - 0x0000)
struct AdvancedCamera_GetDesiredRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetDesiredRotation) == 0x000008, "Wrong alignment on AdvancedCamera_GetDesiredRotation");
static_assert(sizeof(AdvancedCamera_GetDesiredRotation) == 0x000018, "Wrong size on AdvancedCamera_GetDesiredRotation");
static_assert(offsetof(AdvancedCamera_GetDesiredRotation, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetDesiredRotation::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetLookAtTarget
// 0x0008 (0x0008 - 0x0000)
struct AdvancedCamera_GetLookAtTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetLookAtTarget) == 0x000008, "Wrong alignment on AdvancedCamera_GetLookAtTarget");
static_assert(sizeof(AdvancedCamera_GetLookAtTarget) == 0x000008, "Wrong size on AdvancedCamera_GetLookAtTarget");
static_assert(offsetof(AdvancedCamera_GetLookAtTarget, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetLookAtTarget::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.GetPreviousArmOriginLocation
// 0x0018 (0x0018 - 0x0000)
struct AdvancedCamera_GetPreviousArmOriginLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_GetPreviousArmOriginLocation) == 0x000008, "Wrong alignment on AdvancedCamera_GetPreviousArmOriginLocation");
static_assert(sizeof(AdvancedCamera_GetPreviousArmOriginLocation) == 0x000018, "Wrong size on AdvancedCamera_GetPreviousArmOriginLocation");
static_assert(offsetof(AdvancedCamera_GetPreviousArmOriginLocation, ReturnValue) == 0x000000, "Member 'AdvancedCamera_GetPreviousArmOriginLocation::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.IsZoomedIn
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCamera_IsZoomedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_IsZoomedIn) == 0x000001, "Wrong alignment on AdvancedCamera_IsZoomedIn");
static_assert(sizeof(AdvancedCamera_IsZoomedIn) == 0x000001, "Wrong size on AdvancedCamera_IsZoomedIn");
static_assert(offsetof(AdvancedCamera_IsZoomedIn, ReturnValue) == 0x000000, "Member 'AdvancedCamera_IsZoomedIn::ReturnValue' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetEnableRotationPitchSync
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCamera_SetEnableRotationPitchSync final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetEnableRotationPitchSync) == 0x000001, "Wrong alignment on AdvancedCamera_SetEnableRotationPitchSync");
static_assert(sizeof(AdvancedCamera_SetEnableRotationPitchSync) == 0x000001, "Wrong size on AdvancedCamera_SetEnableRotationPitchSync");
static_assert(offsetof(AdvancedCamera_SetEnableRotationPitchSync, bEnable) == 0x000000, "Member 'AdvancedCamera_SetEnableRotationPitchSync::bEnable' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetEnableRotationYawSync
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCamera_SetEnableRotationYawSync final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetEnableRotationYawSync) == 0x000001, "Wrong alignment on AdvancedCamera_SetEnableRotationYawSync");
static_assert(sizeof(AdvancedCamera_SetEnableRotationYawSync) == 0x000001, "Wrong size on AdvancedCamera_SetEnableRotationYawSync");
static_assert(offsetof(AdvancedCamera_SetEnableRotationYawSync, bEnable) == 0x000000, "Member 'AdvancedCamera_SetEnableRotationYawSync::bEnable' has a wrong offset!");

// Function X6Camera.AdvancedCamera.SetOrientationSyncCanResetPitch
// 0x0001 (0x0001 - 0x0000)
struct AdvancedCamera_SetOrientationSyncCanResetPitch final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCamera_SetOrientationSyncCanResetPitch) == 0x000001, "Wrong alignment on AdvancedCamera_SetOrientationSyncCanResetPitch");
static_assert(sizeof(AdvancedCamera_SetOrientationSyncCanResetPitch) == 0x000001, "Wrong size on AdvancedCamera_SetOrientationSyncCanResetPitch");
static_assert(offsetof(AdvancedCamera_SetOrientationSyncCanResetPitch, bInEnabled) == 0x000000, "Member 'AdvancedCamera_SetOrientationSyncCanResetPitch::bInEnabled' has a wrong offset!");

// Function X6Camera.AdvancedCameraBPFLibrary.GetOverriddenCameraBaseParams
// 0x0420 (0x0420 - 0x0000)
struct AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams final
{
public:
	struct FCameraBaseParamsDefine                Origin;                                            // 0x0000(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraBaseParamsDefine                Override;                                          // 0x0160(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraBaseParamsDefine                OutOverridden;                                     // 0x02C0(0x0160)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams) == 0x000008, "Wrong alignment on AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams");
static_assert(sizeof(AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams) == 0x000420, "Wrong size on AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams");
static_assert(offsetof(AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams, Origin) == 0x000000, "Member 'AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams::Origin' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams, Override) == 0x000160, "Member 'AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams::Override' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams, OutOverridden) == 0x0002C0, "Member 'AdvancedCameraBPFLibrary_GetOverriddenCameraBaseParams::OutOverridden' has a wrong offset!");

// Function X6Camera.AdvancedCameraBPFLibrary.GetOverriddenCameraInputConfig
// 0x0270 (0x0270 - 0x0000)
struct AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig final
{
public:
	struct FX6CameraInputConfig                   Origin;                                            // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FX6CameraInputConfig                   Override;                                          // 0x00D0(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FX6CameraInputConfig                   OutOverridden;                                     // 0x01A0(0x00D0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig) == 0x000008, "Wrong alignment on AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig");
static_assert(sizeof(AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig) == 0x000270, "Wrong size on AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig");
static_assert(offsetof(AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig, Origin) == 0x000000, "Member 'AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig::Origin' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig, Override) == 0x0000D0, "Member 'AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig::Override' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig, OutOverridden) == 0x0001A0, "Member 'AdvancedCameraBPFLibrary_GetOverriddenCameraInputConfig::OutOverridden' has a wrong offset!");

// Function X6Camera.AdvancedCameraBPFLibrary.VectorSpringInterp
// 0x0074 (0x0074 - 0x0000)
struct AdvancedCameraBPFLibrary_VectorSpringInterp final
{
public:
	struct FVector3f                              Current;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Target;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorSpringStateInfo                 SpringState;                                       // 0x0018(0x001C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CriticalDamping;                                   // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetVelocityAmount;                              // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClamp;                                            // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector3f                              MinValue;                                          // 0x004C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              MaxValue;                                          // 0x0058(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitializeFromTarget;                             // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector3f                              ReturnValue;                                       // 0x0068(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdvancedCameraBPFLibrary_VectorSpringInterp) == 0x000004, "Wrong alignment on AdvancedCameraBPFLibrary_VectorSpringInterp");
static_assert(sizeof(AdvancedCameraBPFLibrary_VectorSpringInterp) == 0x000074, "Wrong size on AdvancedCameraBPFLibrary_VectorSpringInterp");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, Current) == 0x000000, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::Current' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, Target) == 0x00000C, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::Target' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, SpringState) == 0x000018, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::SpringState' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, Stiffness) == 0x000034, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::Stiffness' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, CriticalDamping) == 0x000038, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::CriticalDamping' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, DeltaTime) == 0x00003C, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::DeltaTime' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, Mass) == 0x000040, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::Mass' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, TargetVelocityAmount) == 0x000044, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::TargetVelocityAmount' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, bClamp) == 0x000048, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::bClamp' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, MinValue) == 0x00004C, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::MinValue' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, MaxValue) == 0x000058, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::MaxValue' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, bInitializeFromTarget) == 0x000064, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::bInitializeFromTarget' has a wrong offset!");
static_assert(offsetof(AdvancedCameraBPFLibrary_VectorSpringInterp, ReturnValue) == 0x000068, "Member 'AdvancedCameraBPFLibrary_VectorSpringInterp::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.AddCameraModifierToCustomList
// 0x0008 (0x0008 - 0x0000)
struct X6PlayerCameraManagerBase_AddCameraModifierToCustomList final
{
public:
	class UCameraModifiersDetailData*             CameraModifierDataAsset;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_AddCameraModifierToCustomList) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_AddCameraModifierToCustomList");
static_assert(sizeof(X6PlayerCameraManagerBase_AddCameraModifierToCustomList) == 0x000008, "Wrong size on X6PlayerCameraManagerBase_AddCameraModifierToCustomList");
static_assert(offsetof(X6PlayerCameraManagerBase_AddCameraModifierToCustomList, CameraModifierDataAsset) == 0x000000, "Member 'X6PlayerCameraManagerBase_AddCameraModifierToCustomList::CameraModifierDataAsset' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.BezierCurvePathBlend
// 0x0058 (0x0058 - 0x0000)
struct X6PlayerCameraManagerBase_BezierCurvePathBlend final
{
public:
	struct FVector                                BeginPoint;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlPointVerticalLineDistance;                  // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtremePointAlphy;                                 // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointFrequency;                                    // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebug;                                         // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayerCameraManagerBase_BezierCurvePathBlend) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_BezierCurvePathBlend");
static_assert(sizeof(X6PlayerCameraManagerBase_BezierCurvePathBlend) == 0x000058, "Wrong size on X6PlayerCameraManagerBase_BezierCurvePathBlend");
static_assert(offsetof(X6PlayerCameraManagerBase_BezierCurvePathBlend, BeginPoint) == 0x000000, "Member 'X6PlayerCameraManagerBase_BezierCurvePathBlend::BeginPoint' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_BezierCurvePathBlend, EndPoint) == 0x000018, "Member 'X6PlayerCameraManagerBase_BezierCurvePathBlend::EndPoint' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_BezierCurvePathBlend, Direction) == 0x000030, "Member 'X6PlayerCameraManagerBase_BezierCurvePathBlend::Direction' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_BezierCurvePathBlend, ControlPointVerticalLineDistance) == 0x000048, "Member 'X6PlayerCameraManagerBase_BezierCurvePathBlend::ControlPointVerticalLineDistance' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_BezierCurvePathBlend, ExtremePointAlphy) == 0x00004C, "Member 'X6PlayerCameraManagerBase_BezierCurvePathBlend::ExtremePointAlphy' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_BezierCurvePathBlend, PointFrequency) == 0x000050, "Member 'X6PlayerCameraManagerBase_BezierCurvePathBlend::PointFrequency' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_BezierCurvePathBlend, DrawDebug) == 0x000054, "Member 'X6PlayerCameraManagerBase_BezierCurvePathBlend::DrawDebug' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.BlendBackToFollow
// 0x0020 (0x0020 - 0x0000)
struct X6PlayerCameraManagerBase_BlendBackToFollow final
{
public:
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_BlendBackToFollow) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_BlendBackToFollow");
static_assert(sizeof(X6PlayerCameraManagerBase_BlendBackToFollow) == 0x000020, "Wrong size on X6PlayerCameraManagerBase_BlendBackToFollow");
static_assert(offsetof(X6PlayerCameraManagerBase_BlendBackToFollow, TransitionParams) == 0x000000, "Member 'X6PlayerCameraManagerBase_BlendBackToFollow::TransitionParams' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.BlendBackToViewTarget
// 0x0020 (0x0020 - 0x0000)
struct X6PlayerCameraManagerBase_BlendBackToViewTarget final
{
public:
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_BlendBackToViewTarget) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_BlendBackToViewTarget");
static_assert(sizeof(X6PlayerCameraManagerBase_BlendBackToViewTarget) == 0x000020, "Wrong size on X6PlayerCameraManagerBase_BlendBackToViewTarget");
static_assert(offsetof(X6PlayerCameraManagerBase_BlendBackToViewTarget, TransitionParams) == 0x000000, "Member 'X6PlayerCameraManagerBase_BlendBackToViewTarget::TransitionParams' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.BlendToNewViewInfo
// 0x0990 (0x0990 - 0x0000)
struct X6PlayerCameraManagerBase_BlendToNewViewInfo final
{
public:
	struct FMinimalViewInfo                       NewInfo;                                           // 0x0000(0x0970)(Parm, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0970(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_BlendToNewViewInfo) == 0x000010, "Wrong alignment on X6PlayerCameraManagerBase_BlendToNewViewInfo");
static_assert(sizeof(X6PlayerCameraManagerBase_BlendToNewViewInfo) == 0x000990, "Wrong size on X6PlayerCameraManagerBase_BlendToNewViewInfo");
static_assert(offsetof(X6PlayerCameraManagerBase_BlendToNewViewInfo, NewInfo) == 0x000000, "Member 'X6PlayerCameraManagerBase_BlendToNewViewInfo::NewInfo' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_BlendToNewViewInfo, TransitionParams) == 0x000970, "Member 'X6PlayerCameraManagerBase_BlendToNewViewInfo::TransitionParams' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.ExitCameraZoom
// 0x0008 (0x0008 - 0x0000)
struct X6PlayerCameraManagerBase_ExitCameraZoom final
{
public:
	float                                         BlendOutTime;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_ExitCameraZoom) == 0x000004, "Wrong alignment on X6PlayerCameraManagerBase_ExitCameraZoom");
static_assert(sizeof(X6PlayerCameraManagerBase_ExitCameraZoom) == 0x000008, "Wrong size on X6PlayerCameraManagerBase_ExitCameraZoom");
static_assert(offsetof(X6PlayerCameraManagerBase_ExitCameraZoom, BlendOutTime) == 0x000000, "Member 'X6PlayerCameraManagerBase_ExitCameraZoom::BlendOutTime' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_ExitCameraZoom, ReturnValue) == 0x000004, "Member 'X6PlayerCameraManagerBase_ExitCameraZoom::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GenCustomCurve_Parabola
// 0x0078 (0x0078 - 0x0000)
struct X6PlayerCameraManagerBase_GenCustomCurve_Parabola final
{
public:
	struct FVector                                StartPoint;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ControllPoint;                                     // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTracePath;                                        // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectileRadius;                                  // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimFrequency;                                      // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimTime;                                        // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutPathPositions;                                  // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutPathVelocitys;                                  // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_GenCustomCurve_Parabola) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_GenCustomCurve_Parabola");
static_assert(sizeof(X6PlayerCameraManagerBase_GenCustomCurve_Parabola) == 0x000078, "Wrong size on X6PlayerCameraManagerBase_GenCustomCurve_Parabola");
static_assert(offsetof(X6PlayerCameraManagerBase_GenCustomCurve_Parabola, StartPoint) == 0x000000, "Member 'X6PlayerCameraManagerBase_GenCustomCurve_Parabola::StartPoint' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenCustomCurve_Parabola, EndPoint) == 0x000018, "Member 'X6PlayerCameraManagerBase_GenCustomCurve_Parabola::EndPoint' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenCustomCurve_Parabola, ControllPoint) == 0x000030, "Member 'X6PlayerCameraManagerBase_GenCustomCurve_Parabola::ControllPoint' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenCustomCurve_Parabola, bTracePath) == 0x000048, "Member 'X6PlayerCameraManagerBase_GenCustomCurve_Parabola::bTracePath' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenCustomCurve_Parabola, ProjectileRadius) == 0x00004C, "Member 'X6PlayerCameraManagerBase_GenCustomCurve_Parabola::ProjectileRadius' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenCustomCurve_Parabola, SimFrequency) == 0x000050, "Member 'X6PlayerCameraManagerBase_GenCustomCurve_Parabola::SimFrequency' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenCustomCurve_Parabola, MaxSimTime) == 0x000054, "Member 'X6PlayerCameraManagerBase_GenCustomCurve_Parabola::MaxSimTime' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenCustomCurve_Parabola, OutPathPositions) == 0x000058, "Member 'X6PlayerCameraManagerBase_GenCustomCurve_Parabola::OutPathPositions' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenCustomCurve_Parabola, OutPathVelocitys) == 0x000068, "Member 'X6PlayerCameraManagerBase_GenCustomCurve_Parabola::OutPathVelocitys' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GenSecondOrderBezierCurve
// 0x0050 (0x0050 - 0x0000)
struct X6PlayerCameraManagerBase_GenSecondOrderBezierCurve final
{
public:
	struct FVector                                BeginPoint;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InfluencePoint;                                    // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointFrequency;                                    // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebug;                                         // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayerCameraManagerBase_GenSecondOrderBezierCurve) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_GenSecondOrderBezierCurve");
static_assert(sizeof(X6PlayerCameraManagerBase_GenSecondOrderBezierCurve) == 0x000050, "Wrong size on X6PlayerCameraManagerBase_GenSecondOrderBezierCurve");
static_assert(offsetof(X6PlayerCameraManagerBase_GenSecondOrderBezierCurve, BeginPoint) == 0x000000, "Member 'X6PlayerCameraManagerBase_GenSecondOrderBezierCurve::BeginPoint' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenSecondOrderBezierCurve, EndPoint) == 0x000018, "Member 'X6PlayerCameraManagerBase_GenSecondOrderBezierCurve::EndPoint' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenSecondOrderBezierCurve, InfluencePoint) == 0x000030, "Member 'X6PlayerCameraManagerBase_GenSecondOrderBezierCurve::InfluencePoint' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenSecondOrderBezierCurve, PointFrequency) == 0x000048, "Member 'X6PlayerCameraManagerBase_GenSecondOrderBezierCurve::PointFrequency' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenSecondOrderBezierCurve, DrawDebug) == 0x00004C, "Member 'X6PlayerCameraManagerBase_GenSecondOrderBezierCurve::DrawDebug' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GenThirdOrderBezierCurve
// 0x0068 (0x0068 - 0x0000)
struct X6PlayerCameraManagerBase_GenThirdOrderBezierCurve final
{
public:
	struct FVector                                BeginPoint;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InfluencePointA;                                   // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InfluencePointB;                                   // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointFrequency;                                    // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebug;                                         // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0065(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayerCameraManagerBase_GenThirdOrderBezierCurve) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_GenThirdOrderBezierCurve");
static_assert(sizeof(X6PlayerCameraManagerBase_GenThirdOrderBezierCurve) == 0x000068, "Wrong size on X6PlayerCameraManagerBase_GenThirdOrderBezierCurve");
static_assert(offsetof(X6PlayerCameraManagerBase_GenThirdOrderBezierCurve, BeginPoint) == 0x000000, "Member 'X6PlayerCameraManagerBase_GenThirdOrderBezierCurve::BeginPoint' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenThirdOrderBezierCurve, EndPoint) == 0x000018, "Member 'X6PlayerCameraManagerBase_GenThirdOrderBezierCurve::EndPoint' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenThirdOrderBezierCurve, InfluencePointA) == 0x000030, "Member 'X6PlayerCameraManagerBase_GenThirdOrderBezierCurve::InfluencePointA' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenThirdOrderBezierCurve, InfluencePointB) == 0x000048, "Member 'X6PlayerCameraManagerBase_GenThirdOrderBezierCurve::InfluencePointB' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenThirdOrderBezierCurve, PointFrequency) == 0x000060, "Member 'X6PlayerCameraManagerBase_GenThirdOrderBezierCurve::PointFrequency' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenThirdOrderBezierCurve, DrawDebug) == 0x000064, "Member 'X6PlayerCameraManagerBase_GenThirdOrderBezierCurve::DrawDebug' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_GenThirdOrderBezierCurve, ReturnValue) == 0x000065, "Member 'X6PlayerCameraManagerBase_GenThirdOrderBezierCurve::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.OnCameraRotateInput
// 0x0020 (0x0020 - 0x0000)
struct X6PlayerCameraManagerBase_OnCameraRotateInput final
{
public:
	struct FVector                                InputVector;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6CameraInputDeviceType                      InputDeviceType;                                   // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayerCameraManagerBase_OnCameraRotateInput) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_OnCameraRotateInput");
static_assert(sizeof(X6PlayerCameraManagerBase_OnCameraRotateInput) == 0x000020, "Wrong size on X6PlayerCameraManagerBase_OnCameraRotateInput");
static_assert(offsetof(X6PlayerCameraManagerBase_OnCameraRotateInput, InputVector) == 0x000000, "Member 'X6PlayerCameraManagerBase_OnCameraRotateInput::InputVector' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_OnCameraRotateInput, ElapsedTime) == 0x000018, "Member 'X6PlayerCameraManagerBase_OnCameraRotateInput::ElapsedTime' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_OnCameraRotateInput, InputDeviceType) == 0x00001C, "Member 'X6PlayerCameraManagerBase_OnCameraRotateInput::InputDeviceType' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.OnCameraZoomInput
// 0x0008 (0x0008 - 0x0000)
struct X6PlayerCameraManagerBase_OnCameraZoomInput final
{
public:
	float                                         InputValue;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EX6CameraInputDeviceType                      InputDeviceType;                                   // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayerCameraManagerBase_OnCameraZoomInput) == 0x000004, "Wrong alignment on X6PlayerCameraManagerBase_OnCameraZoomInput");
static_assert(sizeof(X6PlayerCameraManagerBase_OnCameraZoomInput) == 0x000008, "Wrong size on X6PlayerCameraManagerBase_OnCameraZoomInput");
static_assert(offsetof(X6PlayerCameraManagerBase_OnCameraZoomInput, InputValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_OnCameraZoomInput::InputValue' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_OnCameraZoomInput, InputDeviceType) == 0x000004, "Member 'X6PlayerCameraManagerBase_OnCameraZoomInput::InputDeviceType' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.PushCameraState
// 0x0020 (0x0020 - 0x0000)
struct X6PlayerCameraManagerBase_PushCameraState final
{
public:
	struct FCameraStateViewTagetData              InCameraState;                                     // 0x0000(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_PushCameraState) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_PushCameraState");
static_assert(sizeof(X6PlayerCameraManagerBase_PushCameraState) == 0x000020, "Wrong size on X6PlayerCameraManagerBase_PushCameraState");
static_assert(offsetof(X6PlayerCameraManagerBase_PushCameraState, InCameraState) == 0x000000, "Member 'X6PlayerCameraManagerBase_PushCameraState::InCameraState' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.RemoveCameraModifierFromCustomList
// 0x0008 (0x0008 - 0x0000)
struct X6PlayerCameraManagerBase_RemoveCameraModifierFromCustomList final
{
public:
	class UCameraModifiersDetailData*             CameraModifierDataAsset;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_RemoveCameraModifierFromCustomList) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_RemoveCameraModifierFromCustomList");
static_assert(sizeof(X6PlayerCameraManagerBase_RemoveCameraModifierFromCustomList) == 0x000008, "Wrong size on X6PlayerCameraManagerBase_RemoveCameraModifierFromCustomList");
static_assert(offsetof(X6PlayerCameraManagerBase_RemoveCameraModifierFromCustomList, CameraModifierDataAsset) == 0x000000, "Member 'X6PlayerCameraManagerBase_RemoveCameraModifierFromCustomList::CameraModifierDataAsset' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.RemoveCameraStateByIndex
// 0x0008 (0x0008 - 0x0000)
struct X6PlayerCameraManagerBase_RemoveCameraStateByIndex final
{
public:
	int32                                         IndexToRemove;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowShrinking;                                   // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayerCameraManagerBase_RemoveCameraStateByIndex) == 0x000004, "Wrong alignment on X6PlayerCameraManagerBase_RemoveCameraStateByIndex");
static_assert(sizeof(X6PlayerCameraManagerBase_RemoveCameraStateByIndex) == 0x000008, "Wrong size on X6PlayerCameraManagerBase_RemoveCameraStateByIndex");
static_assert(offsetof(X6PlayerCameraManagerBase_RemoveCameraStateByIndex, IndexToRemove) == 0x000000, "Member 'X6PlayerCameraManagerBase_RemoveCameraStateByIndex::IndexToRemove' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_RemoveCameraStateByIndex, bAllowShrinking) == 0x000004, "Member 'X6PlayerCameraManagerBase_RemoveCameraStateByIndex::bAllowShrinking' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SetCameraDrawDebug
// 0x0008 (0x0008 - 0x0000)
struct X6PlayerCameraManagerBase_SetCameraDrawDebug final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawDebugTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_SetCameraDrawDebug) == 0x000004, "Wrong alignment on X6PlayerCameraManagerBase_SetCameraDrawDebug");
static_assert(sizeof(X6PlayerCameraManagerBase_SetCameraDrawDebug) == 0x000008, "Wrong size on X6PlayerCameraManagerBase_SetCameraDrawDebug");
static_assert(offsetof(X6PlayerCameraManagerBase_SetCameraDrawDebug, bEnable) == 0x000000, "Member 'X6PlayerCameraManagerBase_SetCameraDrawDebug::bEnable' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetCameraDrawDebug, DrawDebugTime) == 0x000004, "Member 'X6PlayerCameraManagerBase_SetCameraDrawDebug::DrawDebugTime' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SetCameraViewPointWithBlend
// 0x0990 (0x0990 - 0x0000)
struct X6PlayerCameraManagerBase_SetCameraViewPointWithBlend final
{
public:
	struct FMinimalViewInfo                       ViewInfo;                                          // 0x0000(0x0970)(Parm, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0970(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_SetCameraViewPointWithBlend) == 0x000010, "Wrong alignment on X6PlayerCameraManagerBase_SetCameraViewPointWithBlend");
static_assert(sizeof(X6PlayerCameraManagerBase_SetCameraViewPointWithBlend) == 0x000990, "Wrong size on X6PlayerCameraManagerBase_SetCameraViewPointWithBlend");
static_assert(offsetof(X6PlayerCameraManagerBase_SetCameraViewPointWithBlend, ViewInfo) == 0x000000, "Member 'X6PlayerCameraManagerBase_SetCameraViewPointWithBlend::ViewInfo' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetCameraViewPointWithBlend, TransitionParams) == 0x000970, "Member 'X6PlayerCameraManagerBase_SetCameraViewPointWithBlend::TransitionParams' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SetEnableRotateInput
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_SetEnableRotateInput final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_SetEnableRotateInput) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_SetEnableRotateInput");
static_assert(sizeof(X6PlayerCameraManagerBase_SetEnableRotateInput) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_SetEnableRotateInput");
static_assert(offsetof(X6PlayerCameraManagerBase_SetEnableRotateInput, bEnable) == 0x000000, "Member 'X6PlayerCameraManagerBase_SetEnableRotateInput::bEnable' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SetEnableZoomInput
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_SetEnableZoomInput final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_SetEnableZoomInput) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_SetEnableZoomInput");
static_assert(sizeof(X6PlayerCameraManagerBase_SetEnableZoomInput) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_SetEnableZoomInput");
static_assert(offsetof(X6PlayerCameraManagerBase_SetEnableZoomInput, bEnable) == 0x000000, "Member 'X6PlayerCameraManagerBase_SetEnableZoomInput::bEnable' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SetPitchSyncSettingValue
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_SetPitchSyncSettingValue final
{
public:
	bool                                          PitchValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_SetPitchSyncSettingValue) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_SetPitchSyncSettingValue");
static_assert(sizeof(X6PlayerCameraManagerBase_SetPitchSyncSettingValue) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_SetPitchSyncSettingValue");
static_assert(offsetof(X6PlayerCameraManagerBase_SetPitchSyncSettingValue, PitchValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_SetPitchSyncSettingValue::PitchValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SetViewTargetBezierCurve
// 0x0050 (0x0050 - 0x0000)
struct X6PlayerCameraManagerBase_SetViewTargetBezierCurve final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlPointVerticalLineDistance;                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtremePointAlphy;                                 // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointFrequency;                                    // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayerCameraManagerBase_SetViewTargetBezierCurve) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_SetViewTargetBezierCurve");
static_assert(sizeof(X6PlayerCameraManagerBase_SetViewTargetBezierCurve) == 0x000050, "Wrong size on X6PlayerCameraManagerBase_SetViewTargetBezierCurve");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetBezierCurve, Target) == 0x000000, "Member 'X6PlayerCameraManagerBase_SetViewTargetBezierCurve::Target' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetBezierCurve, TransitionParams) == 0x000008, "Member 'X6PlayerCameraManagerBase_SetViewTargetBezierCurve::TransitionParams' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetBezierCurve, Direction) == 0x000028, "Member 'X6PlayerCameraManagerBase_SetViewTargetBezierCurve::Direction' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetBezierCurve, ControlPointVerticalLineDistance) == 0x000040, "Member 'X6PlayerCameraManagerBase_SetViewTargetBezierCurve::ControlPointVerticalLineDistance' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetBezierCurve, ExtremePointAlphy) == 0x000044, "Member 'X6PlayerCameraManagerBase_SetViewTargetBezierCurve::ExtremePointAlphy' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetBezierCurve, PointFrequency) == 0x000048, "Member 'X6PlayerCameraManagerBase_SetViewTargetBezierCurve::PointFrequency' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SetViewTargetWithParabolaPath
// 0x0040 (0x0040 - 0x0000)
struct X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetCurveTransitionParams       TransitionParams;                                  // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FrontViewAngleScope;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeight;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeight;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimFrequency;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HeightTakePrecedence;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bErgodicFromMiddle;                                // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath");
static_assert(sizeof(X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath) == 0x000040, "Wrong size on X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath, Target) == 0x000000, "Member 'X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath::Target' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath, TransitionParams) == 0x000008, "Member 'X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath::TransitionParams' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath, FrontViewAngleScope) == 0x000028, "Member 'X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath::FrontViewAngleScope' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath, MinHeight) == 0x00002C, "Member 'X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath::MinHeight' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath, MaxHeight) == 0x000030, "Member 'X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath::MaxHeight' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath, SimFrequency) == 0x000034, "Member 'X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath::SimFrequency' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath, HeightTakePrecedence) == 0x000038, "Member 'X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath::HeightTakePrecedence' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath, bErgodicFromMiddle) == 0x000039, "Member 'X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath::bErgodicFromMiddle' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath, ReturnValue) == 0x00003A, "Member 'X6PlayerCameraManagerBase_SetViewTargetWithParabolaPath::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SetX6CameraInputDeviceType
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_SetX6CameraInputDeviceType final
{
public:
	EX6CameraInputDeviceType                      InputDeviceType;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_SetX6CameraInputDeviceType) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_SetX6CameraInputDeviceType");
static_assert(sizeof(X6PlayerCameraManagerBase_SetX6CameraInputDeviceType) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_SetX6CameraInputDeviceType");
static_assert(offsetof(X6PlayerCameraManagerBase_SetX6CameraInputDeviceType, InputDeviceType) == 0x000000, "Member 'X6PlayerCameraManagerBase_SetX6CameraInputDeviceType::InputDeviceType' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SetYawSyncSettingValue
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_SetYawSyncSettingValue final
{
public:
	bool                                          YawValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_SetYawSyncSettingValue) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_SetYawSyncSettingValue");
static_assert(sizeof(X6PlayerCameraManagerBase_SetYawSyncSettingValue) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_SetYawSyncSettingValue");
static_assert(offsetof(X6PlayerCameraManagerBase_SetYawSyncSettingValue, YawValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_SetYawSyncSettingValue::YawValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SortCameraStatesByPriority
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_SortCameraStatesByPriority final
{
public:
	bool                                          bDescendOrder;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_SortCameraStatesByPriority) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_SortCameraStatesByPriority");
static_assert(sizeof(X6PlayerCameraManagerBase_SortCameraStatesByPriority) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_SortCameraStatesByPriority");
static_assert(offsetof(X6PlayerCameraManagerBase_SortCameraStatesByPriority, bDescendOrder) == 0x000000, "Member 'X6PlayerCameraManagerBase_SortCameraStatesByPriority::bDescendOrder' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.StartCustomizeCameraShake
// 0x0068 (0x0068 - 0x0000)
struct X6PlayerCameraManagerBase_StartCustomizeCameraShake final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FROscillator                           ROscillator;                                       // 0x000C(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVOscillator                           VOscillator;                                       // 0x0030(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFOscillator                           Oscillator;                                        // 0x0054(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UCameraShakeBase*                       ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_StartCustomizeCameraShake) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_StartCustomizeCameraShake");
static_assert(sizeof(X6PlayerCameraManagerBase_StartCustomizeCameraShake) == 0x000068, "Wrong size on X6PlayerCameraManagerBase_StartCustomizeCameraShake");
static_assert(offsetof(X6PlayerCameraManagerBase_StartCustomizeCameraShake, Duration) == 0x000000, "Member 'X6PlayerCameraManagerBase_StartCustomizeCameraShake::Duration' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_StartCustomizeCameraShake, BlendInTime) == 0x000004, "Member 'X6PlayerCameraManagerBase_StartCustomizeCameraShake::BlendInTime' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_StartCustomizeCameraShake, BlendOutTime) == 0x000008, "Member 'X6PlayerCameraManagerBase_StartCustomizeCameraShake::BlendOutTime' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_StartCustomizeCameraShake, ROscillator) == 0x00000C, "Member 'X6PlayerCameraManagerBase_StartCustomizeCameraShake::ROscillator' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_StartCustomizeCameraShake, VOscillator) == 0x000030, "Member 'X6PlayerCameraManagerBase_StartCustomizeCameraShake::VOscillator' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_StartCustomizeCameraShake, Oscillator) == 0x000054, "Member 'X6PlayerCameraManagerBase_StartCustomizeCameraShake::Oscillator' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_StartCustomizeCameraShake, ReturnValue) == 0x000060, "Member 'X6PlayerCameraManagerBase_StartCustomizeCameraShake::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SwitchCameraState
// 0x0020 (0x0020 - 0x0000)
struct X6PlayerCameraManagerBase_SwitchCameraState final
{
public:
	class FString                                 ConfigKey;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                TargetObject;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayerCameraManagerBase_SwitchCameraState) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_SwitchCameraState");
static_assert(sizeof(X6PlayerCameraManagerBase_SwitchCameraState) == 0x000020, "Wrong size on X6PlayerCameraManagerBase_SwitchCameraState");
static_assert(offsetof(X6PlayerCameraManagerBase_SwitchCameraState, ConfigKey) == 0x000000, "Member 'X6PlayerCameraManagerBase_SwitchCameraState::ConfigKey' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SwitchCameraState, TargetObject) == 0x000010, "Member 'X6PlayerCameraManagerBase_SwitchCameraState::TargetObject' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SwitchCameraState, ReturnValue) == 0x000018, "Member 'X6PlayerCameraManagerBase_SwitchCameraState::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.SwitchToLastCameraState
// 0x0010 (0x0010 - 0x0000)
struct X6PlayerCameraManagerBase_SwitchToLastCameraState final
{
public:
	class AActor*                                 NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6PlayerCameraManagerBase_SwitchToLastCameraState) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_SwitchToLastCameraState");
static_assert(sizeof(X6PlayerCameraManagerBase_SwitchToLastCameraState) == 0x000010, "Wrong size on X6PlayerCameraManagerBase_SwitchToLastCameraState");
static_assert(offsetof(X6PlayerCameraManagerBase_SwitchToLastCameraState, NewTarget) == 0x000000, "Member 'X6PlayerCameraManagerBase_SwitchToLastCameraState::NewTarget' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_SwitchToLastCameraState, ReturnValue) == 0x000008, "Member 'X6PlayerCameraManagerBase_SwitchToLastCameraState::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GetCameraPendingViewTarget
// 0x0990 (0x0990 - 0x0000)
struct X6PlayerCameraManagerBase_GetCameraPendingViewTarget final
{
public:
	struct FTViewTarget                           ReturnValue;                                       // 0x0000(0x0990)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_GetCameraPendingViewTarget) == 0x000010, "Wrong alignment on X6PlayerCameraManagerBase_GetCameraPendingViewTarget");
static_assert(sizeof(X6PlayerCameraManagerBase_GetCameraPendingViewTarget) == 0x000990, "Wrong size on X6PlayerCameraManagerBase_GetCameraPendingViewTarget");
static_assert(offsetof(X6PlayerCameraManagerBase_GetCameraPendingViewTarget, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_GetCameraPendingViewTarget::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GetCameraViewTarget
// 0x0990 (0x0990 - 0x0000)
struct X6PlayerCameraManagerBase_GetCameraViewTarget final
{
public:
	struct FTViewTarget                           ReturnValue;                                       // 0x0000(0x0990)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_GetCameraViewTarget) == 0x000010, "Wrong alignment on X6PlayerCameraManagerBase_GetCameraViewTarget");
static_assert(sizeof(X6PlayerCameraManagerBase_GetCameraViewTarget) == 0x000990, "Wrong size on X6PlayerCameraManagerBase_GetCameraViewTarget");
static_assert(offsetof(X6PlayerCameraManagerBase_GetCameraViewTarget, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_GetCameraViewTarget::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GetEnableRotateInput
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_GetEnableRotateInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_GetEnableRotateInput) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_GetEnableRotateInput");
static_assert(sizeof(X6PlayerCameraManagerBase_GetEnableRotateInput) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_GetEnableRotateInput");
static_assert(offsetof(X6PlayerCameraManagerBase_GetEnableRotateInput, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_GetEnableRotateInput::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GetEnableZoomInput
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_GetEnableZoomInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_GetEnableZoomInput) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_GetEnableZoomInput");
static_assert(sizeof(X6PlayerCameraManagerBase_GetEnableZoomInput) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_GetEnableZoomInput");
static_assert(offsetof(X6PlayerCameraManagerBase_GetEnableZoomInput, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_GetEnableZoomInput::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GetLastCameraLocation
// 0x0018 (0x0018 - 0x0000)
struct X6PlayerCameraManagerBase_GetLastCameraLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_GetLastCameraLocation) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_GetLastCameraLocation");
static_assert(sizeof(X6PlayerCameraManagerBase_GetLastCameraLocation) == 0x000018, "Wrong size on X6PlayerCameraManagerBase_GetLastCameraLocation");
static_assert(offsetof(X6PlayerCameraManagerBase_GetLastCameraLocation, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_GetLastCameraLocation::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GetLastCameraRotation
// 0x0018 (0x0018 - 0x0000)
struct X6PlayerCameraManagerBase_GetLastCameraRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_GetLastCameraRotation) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_GetLastCameraRotation");
static_assert(sizeof(X6PlayerCameraManagerBase_GetLastCameraRotation) == 0x000018, "Wrong size on X6PlayerCameraManagerBase_GetLastCameraRotation");
static_assert(offsetof(X6PlayerCameraManagerBase_GetLastCameraRotation, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_GetLastCameraRotation::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GetPlayerInputForwardVector
// 0x0018 (0x0018 - 0x0000)
struct X6PlayerCameraManagerBase_GetPlayerInputForwardVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_GetPlayerInputForwardVector) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_GetPlayerInputForwardVector");
static_assert(sizeof(X6PlayerCameraManagerBase_GetPlayerInputForwardVector) == 0x000018, "Wrong size on X6PlayerCameraManagerBase_GetPlayerInputForwardVector");
static_assert(offsetof(X6PlayerCameraManagerBase_GetPlayerInputForwardVector, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_GetPlayerInputForwardVector::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GetPlayerInputRightVector
// 0x0018 (0x0018 - 0x0000)
struct X6PlayerCameraManagerBase_GetPlayerInputRightVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_GetPlayerInputRightVector) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_GetPlayerInputRightVector");
static_assert(sizeof(X6PlayerCameraManagerBase_GetPlayerInputRightVector) == 0x000018, "Wrong size on X6PlayerCameraManagerBase_GetPlayerInputRightVector");
static_assert(offsetof(X6PlayerCameraManagerBase_GetPlayerInputRightVector, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_GetPlayerInputRightVector::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GetX6CameraInputDeviceType
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_GetX6CameraInputDeviceType final
{
public:
	EX6CameraInputDeviceType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_GetX6CameraInputDeviceType) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_GetX6CameraInputDeviceType");
static_assert(sizeof(X6PlayerCameraManagerBase_GetX6CameraInputDeviceType) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_GetX6CameraInputDeviceType");
static_assert(offsetof(X6PlayerCameraManagerBase_GetX6CameraInputDeviceType, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_GetX6CameraInputDeviceType::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.GetX6CameraPlatformType
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_GetX6CameraPlatformType final
{
public:
	EX6CameraPlatformType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_GetX6CameraPlatformType) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_GetX6CameraPlatformType");
static_assert(sizeof(X6PlayerCameraManagerBase_GetX6CameraPlatformType) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_GetX6CameraPlatformType");
static_assert(offsetof(X6PlayerCameraManagerBase_GetX6CameraPlatformType, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_GetX6CameraPlatformType::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.IsCameraZoomedIn
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_IsCameraZoomedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_IsCameraZoomedIn) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_IsCameraZoomedIn");
static_assert(sizeof(X6PlayerCameraManagerBase_IsCameraZoomedIn) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_IsCameraZoomedIn");
static_assert(offsetof(X6PlayerCameraManagerBase_IsCameraZoomedIn, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_IsCameraZoomedIn::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.K2_GetCameraStateData
// 0x0028 (0x0028 - 0x0000)
struct X6PlayerCameraManagerBase_K2_GetCameraStateData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraStateViewTagetData              ReturnValue;                                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_K2_GetCameraStateData) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_K2_GetCameraStateData");
static_assert(sizeof(X6PlayerCameraManagerBase_K2_GetCameraStateData) == 0x000028, "Wrong size on X6PlayerCameraManagerBase_K2_GetCameraStateData");
static_assert(offsetof(X6PlayerCameraManagerBase_K2_GetCameraStateData, Index_0) == 0x000000, "Member 'X6PlayerCameraManagerBase_K2_GetCameraStateData::Index_0' has a wrong offset!");
static_assert(offsetof(X6PlayerCameraManagerBase_K2_GetCameraStateData, ReturnValue) == 0x000008, "Member 'X6PlayerCameraManagerBase_K2_GetCameraStateData::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.K2_GetCameraStateNum
// 0x0004 (0x0004 - 0x0000)
struct X6PlayerCameraManagerBase_K2_GetCameraStateNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_K2_GetCameraStateNum) == 0x000004, "Wrong alignment on X6PlayerCameraManagerBase_K2_GetCameraStateNum");
static_assert(sizeof(X6PlayerCameraManagerBase_K2_GetCameraStateNum) == 0x000004, "Wrong size on X6PlayerCameraManagerBase_K2_GetCameraStateNum");
static_assert(offsetof(X6PlayerCameraManagerBase_K2_GetCameraStateNum, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_K2_GetCameraStateNum::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.K2_TopCameraState
// 0x0001 (0x0001 - 0x0000)
struct X6PlayerCameraManagerBase_K2_TopCameraState final
{
public:
	ECameraState                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_K2_TopCameraState) == 0x000001, "Wrong alignment on X6PlayerCameraManagerBase_K2_TopCameraState");
static_assert(sizeof(X6PlayerCameraManagerBase_K2_TopCameraState) == 0x000001, "Wrong size on X6PlayerCameraManagerBase_K2_TopCameraState");
static_assert(offsetof(X6PlayerCameraManagerBase_K2_TopCameraState, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_K2_TopCameraState::ReturnValue' has a wrong offset!");

// Function X6Camera.X6PlayerCameraManagerBase.K2_TopCameraStateData
// 0x0020 (0x0020 - 0x0000)
struct X6PlayerCameraManagerBase_K2_TopCameraStateData final
{
public:
	struct FCameraStateViewTagetData              ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6PlayerCameraManagerBase_K2_TopCameraStateData) == 0x000008, "Wrong alignment on X6PlayerCameraManagerBase_K2_TopCameraStateData");
static_assert(sizeof(X6PlayerCameraManagerBase_K2_TopCameraStateData) == 0x000020, "Wrong size on X6PlayerCameraManagerBase_K2_TopCameraStateData");
static_assert(offsetof(X6PlayerCameraManagerBase_K2_TopCameraStateData, ReturnValue) == 0x000000, "Member 'X6PlayerCameraManagerBase_K2_TopCameraStateData::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraCollisionProcess.K2_GetValidCameraLocation
// 0x0080 (0x0080 - 0x0000)
struct CameraCollisionProcess_K2_GetValidCameraLocation final
{
public:
	struct FVector                                LookAtTargetLoc;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ArmOriginLoc;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DesiredLoc;                                        // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutFixedArmOriginLoc;                              // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutValidCameraLoc;                                 // 0x0060(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraCollisionProcess_K2_GetValidCameraLocation) == 0x000008, "Wrong alignment on CameraCollisionProcess_K2_GetValidCameraLocation");
static_assert(sizeof(CameraCollisionProcess_K2_GetValidCameraLocation) == 0x000080, "Wrong size on CameraCollisionProcess_K2_GetValidCameraLocation");
static_assert(offsetof(CameraCollisionProcess_K2_GetValidCameraLocation, LookAtTargetLoc) == 0x000000, "Member 'CameraCollisionProcess_K2_GetValidCameraLocation::LookAtTargetLoc' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_GetValidCameraLocation, ArmOriginLoc) == 0x000018, "Member 'CameraCollisionProcess_K2_GetValidCameraLocation::ArmOriginLoc' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_GetValidCameraLocation, DesiredLoc) == 0x000030, "Member 'CameraCollisionProcess_K2_GetValidCameraLocation::DesiredLoc' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_GetValidCameraLocation, OutFixedArmOriginLoc) == 0x000048, "Member 'CameraCollisionProcess_K2_GetValidCameraLocation::OutFixedArmOriginLoc' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_GetValidCameraLocation, OutValidCameraLoc) == 0x000060, "Member 'CameraCollisionProcess_K2_GetValidCameraLocation::OutValidCameraLoc' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_GetValidCameraLocation, ReturnValue) == 0x000078, "Member 'CameraCollisionProcess_K2_GetValidCameraLocation::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraCollisionProcess.K2_ProcessSpringArmCollision
// 0x0088 (0x0088 - 0x0000)
struct CameraCollisionProcess_K2_ProcessSpringArmCollision final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LookAtTarget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCameraManager*                   InPlayerCameraManager;                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousExpectArmLength;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousActualArmLength;                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbeSize;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DesireLoc;                                         // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ArmOriginLoc;                                      // 0x0040(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutFixedArmOriginLoc;                              // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutFixedResultLoc;                                 // 0x0070(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraCollisionProcess_K2_ProcessSpringArmCollision) == 0x000008, "Wrong alignment on CameraCollisionProcess_K2_ProcessSpringArmCollision");
static_assert(sizeof(CameraCollisionProcess_K2_ProcessSpringArmCollision) == 0x000088, "Wrong size on CameraCollisionProcess_K2_ProcessSpringArmCollision");
static_assert(offsetof(CameraCollisionProcess_K2_ProcessSpringArmCollision, DeltaTime) == 0x000000, "Member 'CameraCollisionProcess_K2_ProcessSpringArmCollision::DeltaTime' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_ProcessSpringArmCollision, LookAtTarget) == 0x000008, "Member 'CameraCollisionProcess_K2_ProcessSpringArmCollision::LookAtTarget' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_ProcessSpringArmCollision, InPlayerCameraManager) == 0x000010, "Member 'CameraCollisionProcess_K2_ProcessSpringArmCollision::InPlayerCameraManager' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_ProcessSpringArmCollision, PreviousExpectArmLength) == 0x000018, "Member 'CameraCollisionProcess_K2_ProcessSpringArmCollision::PreviousExpectArmLength' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_ProcessSpringArmCollision, PreviousActualArmLength) == 0x00001C, "Member 'CameraCollisionProcess_K2_ProcessSpringArmCollision::PreviousActualArmLength' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_ProcessSpringArmCollision, ProbeSize) == 0x000020, "Member 'CameraCollisionProcess_K2_ProcessSpringArmCollision::ProbeSize' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_ProcessSpringArmCollision, DesireLoc) == 0x000028, "Member 'CameraCollisionProcess_K2_ProcessSpringArmCollision::DesireLoc' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_ProcessSpringArmCollision, ArmOriginLoc) == 0x000040, "Member 'CameraCollisionProcess_K2_ProcessSpringArmCollision::ArmOriginLoc' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_ProcessSpringArmCollision, OutFixedArmOriginLoc) == 0x000058, "Member 'CameraCollisionProcess_K2_ProcessSpringArmCollision::OutFixedArmOriginLoc' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_K2_ProcessSpringArmCollision, OutFixedResultLoc) == 0x000070, "Member 'CameraCollisionProcess_K2_ProcessSpringArmCollision::OutFixedResultLoc' has a wrong offset!");

// Function X6Camera.CameraCollisionProcess.GetEnableCameraCollisionDebug
// 0x0001 (0x0001 - 0x0000)
struct CameraCollisionProcess_GetEnableCameraCollisionDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraCollisionProcess_GetEnableCameraCollisionDebug) == 0x000001, "Wrong alignment on CameraCollisionProcess_GetEnableCameraCollisionDebug");
static_assert(sizeof(CameraCollisionProcess_GetEnableCameraCollisionDebug) == 0x000001, "Wrong size on CameraCollisionProcess_GetEnableCameraCollisionDebug");
static_assert(offsetof(CameraCollisionProcess_GetEnableCameraCollisionDebug, ReturnValue) == 0x000000, "Member 'CameraCollisionProcess_GetEnableCameraCollisionDebug::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraCollisionProcess.GetHeadInFixArmOrigin
// 0x0028 (0x0028 - 0x0000)
struct CameraCollisionProcess_GetHeadInFixArmOrigin final
{
public:
	const class AActor*                           InLookAtTarget;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutHeadLocation;                                   // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHeadSize;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraCollisionProcess_GetHeadInFixArmOrigin) == 0x000008, "Wrong alignment on CameraCollisionProcess_GetHeadInFixArmOrigin");
static_assert(sizeof(CameraCollisionProcess_GetHeadInFixArmOrigin) == 0x000028, "Wrong size on CameraCollisionProcess_GetHeadInFixArmOrigin");
static_assert(offsetof(CameraCollisionProcess_GetHeadInFixArmOrigin, InLookAtTarget) == 0x000000, "Member 'CameraCollisionProcess_GetHeadInFixArmOrigin::InLookAtTarget' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_GetHeadInFixArmOrigin, OutHeadLocation) == 0x000008, "Member 'CameraCollisionProcess_GetHeadInFixArmOrigin::OutHeadLocation' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_GetHeadInFixArmOrigin, OutHeadSize) == 0x000020, "Member 'CameraCollisionProcess_GetHeadInFixArmOrigin::OutHeadSize' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_GetHeadInFixArmOrigin, ReturnValue) == 0x000024, "Member 'CameraCollisionProcess_GetHeadInFixArmOrigin::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraCollisionProcess.GetHeadOfActor
// 0x0028 (0x0028 - 0x0000)
struct CameraCollisionProcess_GetHeadOfActor final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutHeadLocation;                                   // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHeadSize;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraCollisionProcess_GetHeadOfActor) == 0x000008, "Wrong alignment on CameraCollisionProcess_GetHeadOfActor");
static_assert(sizeof(CameraCollisionProcess_GetHeadOfActor) == 0x000028, "Wrong size on CameraCollisionProcess_GetHeadOfActor");
static_assert(offsetof(CameraCollisionProcess_GetHeadOfActor, InActor) == 0x000000, "Member 'CameraCollisionProcess_GetHeadOfActor::InActor' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_GetHeadOfActor, OutHeadLocation) == 0x000008, "Member 'CameraCollisionProcess_GetHeadOfActor::OutHeadLocation' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_GetHeadOfActor, OutHeadSize) == 0x000020, "Member 'CameraCollisionProcess_GetHeadOfActor::OutHeadSize' has a wrong offset!");
static_assert(offsetof(CameraCollisionProcess_GetHeadOfActor, ReturnValue) == 0x000024, "Member 'CameraCollisionProcess_GetHeadOfActor::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraLagProcess.FixCameraByBasedMovement
// 0x0070 (0x0070 - 0x0000)
struct CameraLagProcess_FixCameraByBasedMovement final
{
public:
	struct FBasedMovementFixCameraHelper          Helper;                                            // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraLagProcess_FixCameraByBasedMovement) == 0x000010, "Wrong alignment on CameraLagProcess_FixCameraByBasedMovement");
static_assert(sizeof(CameraLagProcess_FixCameraByBasedMovement) == 0x000070, "Wrong size on CameraLagProcess_FixCameraByBasedMovement");
static_assert(offsetof(CameraLagProcess_FixCameraByBasedMovement, Helper) == 0x000000, "Member 'CameraLagProcess_FixCameraByBasedMovement::Helper' has a wrong offset!");

// Function X6Camera.CameraLagProcess.GetLagRotation
// 0x0050 (0x0050 - 0x0000)
struct CameraLagProcess_GetLagRotation final
{
public:
	struct FRotator                               PreviousRotation;                                  // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               DesiredRot;                                        // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraLagProcess_GetLagRotation) == 0x000008, "Wrong alignment on CameraLagProcess_GetLagRotation");
static_assert(sizeof(CameraLagProcess_GetLagRotation) == 0x000050, "Wrong size on CameraLagProcess_GetLagRotation");
static_assert(offsetof(CameraLagProcess_GetLagRotation, PreviousRotation) == 0x000000, "Member 'CameraLagProcess_GetLagRotation::PreviousRotation' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLagRotation, DesiredRot) == 0x000018, "Member 'CameraLagProcess_GetLagRotation::DesiredRot' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLagRotation, DeltaTime) == 0x000030, "Member 'CameraLagProcess_GetLagRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLagRotation, ReturnValue) == 0x000038, "Member 'CameraLagProcess_GetLagRotation::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraLagProcess.GetLagSpringArm
// 0x0010 (0x0010 - 0x0000)
struct CameraLagProcess_GetLagSpringArm final
{
public:
	float                                         PreviousArmlength;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         springArmLength;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraLagProcess_GetLagSpringArm) == 0x000004, "Wrong alignment on CameraLagProcess_GetLagSpringArm");
static_assert(sizeof(CameraLagProcess_GetLagSpringArm) == 0x000010, "Wrong size on CameraLagProcess_GetLagSpringArm");
static_assert(offsetof(CameraLagProcess_GetLagSpringArm, PreviousArmlength) == 0x000000, "Member 'CameraLagProcess_GetLagSpringArm::PreviousArmlength' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLagSpringArm, springArmLength) == 0x000004, "Member 'CameraLagProcess_GetLagSpringArm::springArmLength' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLagSpringArm, DeltaTime) == 0x000008, "Member 'CameraLagProcess_GetLagSpringArm::DeltaTime' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLagSpringArm, ReturnValue) == 0x00000C, "Member 'CameraLagProcess_GetLagSpringArm::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraLagProcess.GetLagSpringArmOrigin
// 0x0060 (0x0060 - 0x0000)
struct CameraLagProcess_GetLagSpringArmOrigin final
{
public:
	bool                                          bUseWorldSpaceLag;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           ReferenceActor;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousLocation;                                  // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FocusLocation;                                     // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraLagProcess_GetLagSpringArmOrigin) == 0x000008, "Wrong alignment on CameraLagProcess_GetLagSpringArmOrigin");
static_assert(sizeof(CameraLagProcess_GetLagSpringArmOrigin) == 0x000060, "Wrong size on CameraLagProcess_GetLagSpringArmOrigin");
static_assert(offsetof(CameraLagProcess_GetLagSpringArmOrigin, bUseWorldSpaceLag) == 0x000000, "Member 'CameraLagProcess_GetLagSpringArmOrigin::bUseWorldSpaceLag' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLagSpringArmOrigin, ReferenceActor) == 0x000008, "Member 'CameraLagProcess_GetLagSpringArmOrigin::ReferenceActor' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLagSpringArmOrigin, PreviousLocation) == 0x000010, "Member 'CameraLagProcess_GetLagSpringArmOrigin::PreviousLocation' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLagSpringArmOrigin, FocusLocation) == 0x000028, "Member 'CameraLagProcess_GetLagSpringArmOrigin::FocusLocation' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLagSpringArmOrigin, DeltaTime) == 0x000040, "Member 'CameraLagProcess_GetLagSpringArmOrigin::DeltaTime' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLagSpringArmOrigin, ReturnValue) == 0x000048, "Member 'CameraLagProcess_GetLagSpringArmOrigin::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraLagProcess.GetLocalLagRotation
// 0x00B0 (0x00B0 - 0x0000)
struct CameraLagProcess_GetLocalLagRotation final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PreviousRotation;                                  // 0x0060(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               DesiredRot;                                        // 0x0078(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0098(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraLagProcess_GetLocalLagRotation) == 0x000010, "Wrong alignment on CameraLagProcess_GetLocalLagRotation");
static_assert(sizeof(CameraLagProcess_GetLocalLagRotation) == 0x0000B0, "Wrong size on CameraLagProcess_GetLocalLagRotation");
static_assert(offsetof(CameraLagProcess_GetLocalLagRotation, Transform) == 0x000000, "Member 'CameraLagProcess_GetLocalLagRotation::Transform' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLocalLagRotation, PreviousRotation) == 0x000060, "Member 'CameraLagProcess_GetLocalLagRotation::PreviousRotation' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLocalLagRotation, DesiredRot) == 0x000078, "Member 'CameraLagProcess_GetLocalLagRotation::DesiredRot' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLocalLagRotation, DeltaTime) == 0x000090, "Member 'CameraLagProcess_GetLocalLagRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_GetLocalLagRotation, ReturnValue) == 0x000098, "Member 'CameraLagProcess_GetLocalLagRotation::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraLagProcess.RInterpTo
// 0x0050 (0x0050 - 0x0000)
struct CameraLagProcess_RInterpTo final
{
public:
	struct FRotator                               Current;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Target;                                            // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraLagProcess_RInterpTo) == 0x000008, "Wrong alignment on CameraLagProcess_RInterpTo");
static_assert(sizeof(CameraLagProcess_RInterpTo) == 0x000050, "Wrong size on CameraLagProcess_RInterpTo");
static_assert(offsetof(CameraLagProcess_RInterpTo, Current) == 0x000000, "Member 'CameraLagProcess_RInterpTo::Current' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_RInterpTo, Target) == 0x000018, "Member 'CameraLagProcess_RInterpTo::Target' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_RInterpTo, DeltaTime) == 0x000030, "Member 'CameraLagProcess_RInterpTo::DeltaTime' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_RInterpTo, InterpSpeed) == 0x000034, "Member 'CameraLagProcess_RInterpTo::InterpSpeed' has a wrong offset!");
static_assert(offsetof(CameraLagProcess_RInterpTo, ReturnValue) == 0x000038, "Member 'CameraLagProcess_RInterpTo::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraOrientationSynchronizer.BlueprintSyncCameraRotationPitch
// 0x0038 (0x0038 - 0x0000)
struct CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               InTargetRotation;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch) == 0x000008, "Wrong alignment on CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch");
static_assert(sizeof(CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch) == 0x000038, "Wrong size on CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch");
static_assert(offsetof(CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch, DeltaTime) == 0x000000, "Member 'CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch::DeltaTime' has a wrong offset!");
static_assert(offsetof(CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch, InTargetRotation) == 0x000008, "Member 'CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch::InTargetRotation' has a wrong offset!");
static_assert(offsetof(CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch, ReturnValue) == 0x000020, "Member 'CameraOrientationSynchronizer_BlueprintSyncCameraRotationPitch::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraOrientationSynchronizer.BlueprintSyncCameraRotationYaw
// 0x0038 (0x0038 - 0x0000)
struct CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               InTargetRotation;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw) == 0x000008, "Wrong alignment on CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw");
static_assert(sizeof(CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw) == 0x000038, "Wrong size on CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw");
static_assert(offsetof(CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw, DeltaTime) == 0x000000, "Member 'CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw::DeltaTime' has a wrong offset!");
static_assert(offsetof(CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw, InTargetRotation) == 0x000008, "Member 'CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw::InTargetRotation' has a wrong offset!");
static_assert(offsetof(CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw, ReturnValue) == 0x000020, "Member 'CameraOrientationSynchronizer_BlueprintSyncCameraRotationYaw::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraOrientationSynchronizer.FixCameraByBasedMovement
// 0x0070 (0x0070 - 0x0000)
struct CameraOrientationSynchronizer_FixCameraByBasedMovement final
{
public:
	struct FBasedMovementFixCameraHelper          Helper;                                            // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraOrientationSynchronizer_FixCameraByBasedMovement) == 0x000010, "Wrong alignment on CameraOrientationSynchronizer_FixCameraByBasedMovement");
static_assert(sizeof(CameraOrientationSynchronizer_FixCameraByBasedMovement) == 0x000070, "Wrong size on CameraOrientationSynchronizer_FixCameraByBasedMovement");
static_assert(offsetof(CameraOrientationSynchronizer_FixCameraByBasedMovement, Helper) == 0x000000, "Member 'CameraOrientationSynchronizer_FixCameraByBasedMovement::Helper' has a wrong offset!");

// Function X6Camera.CameraOrientationSynchronizer.ReceiveCameraRotateInput
// 0x0030 (0x0030 - 0x0000)
struct CameraOrientationSynchronizer_ReceiveCameraRotateInput final
{
public:
	struct FRotator                               InDeltaRotation;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraOrientationSynchronizer_ReceiveCameraRotateInput) == 0x000008, "Wrong alignment on CameraOrientationSynchronizer_ReceiveCameraRotateInput");
static_assert(sizeof(CameraOrientationSynchronizer_ReceiveCameraRotateInput) == 0x000030, "Wrong size on CameraOrientationSynchronizer_ReceiveCameraRotateInput");
static_assert(offsetof(CameraOrientationSynchronizer_ReceiveCameraRotateInput, InDeltaRotation) == 0x000000, "Member 'CameraOrientationSynchronizer_ReceiveCameraRotateInput::InDeltaRotation' has a wrong offset!");
static_assert(offsetof(CameraOrientationSynchronizer_ReceiveCameraRotateInput, ReturnValue) == 0x000018, "Member 'CameraOrientationSynchronizer_ReceiveCameraRotateInput::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraOrientationSynchronizer.ReceiveInit
// 0x0008 (0x0008 - 0x0000)
struct CameraOrientationSynchronizer_ReceiveInit final
{
public:
	class UAdvancedCamera*                        InOwnerAdvancedCamera;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraOrientationSynchronizer_ReceiveInit) == 0x000008, "Wrong alignment on CameraOrientationSynchronizer_ReceiveInit");
static_assert(sizeof(CameraOrientationSynchronizer_ReceiveInit) == 0x000008, "Wrong size on CameraOrientationSynchronizer_ReceiveInit");
static_assert(offsetof(CameraOrientationSynchronizer_ReceiveInit, InOwnerAdvancedCamera) == 0x000000, "Member 'CameraOrientationSynchronizer_ReceiveInit::InOwnerAdvancedCamera' has a wrong offset!");

// Function X6Camera.CameraOrientationSynchronizer.SyncCameraPitchYawSyncSetting
// 0x0002 (0x0002 - 0x0000)
struct CameraOrientationSynchronizer_SyncCameraPitchYawSyncSetting final
{
public:
	bool                                          YawValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PitchValue;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraOrientationSynchronizer_SyncCameraPitchYawSyncSetting) == 0x000001, "Wrong alignment on CameraOrientationSynchronizer_SyncCameraPitchYawSyncSetting");
static_assert(sizeof(CameraOrientationSynchronizer_SyncCameraPitchYawSyncSetting) == 0x000002, "Wrong size on CameraOrientationSynchronizer_SyncCameraPitchYawSyncSetting");
static_assert(offsetof(CameraOrientationSynchronizer_SyncCameraPitchYawSyncSetting, YawValue) == 0x000000, "Member 'CameraOrientationSynchronizer_SyncCameraPitchYawSyncSetting::YawValue' has a wrong offset!");
static_assert(offsetof(CameraOrientationSynchronizer_SyncCameraPitchYawSyncSetting, PitchValue) == 0x000001, "Member 'CameraOrientationSynchronizer_SyncCameraPitchYawSyncSetting::PitchValue' has a wrong offset!");

// Function X6Camera.CameraOrientationSynchronizer.GetIsOwnerInAir
// 0x0001 (0x0001 - 0x0000)
struct CameraOrientationSynchronizer_GetIsOwnerInAir final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraOrientationSynchronizer_GetIsOwnerInAir) == 0x000001, "Wrong alignment on CameraOrientationSynchronizer_GetIsOwnerInAir");
static_assert(sizeof(CameraOrientationSynchronizer_GetIsOwnerInAir) == 0x000001, "Wrong size on CameraOrientationSynchronizer_GetIsOwnerInAir");
static_assert(offsetof(CameraOrientationSynchronizer_GetIsOwnerInAir, ReturnValue) == 0x000000, "Member 'CameraOrientationSynchronizer_GetIsOwnerInAir::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraOrientationSynchronizer.GetIsOwnerMoving
// 0x0001 (0x0001 - 0x0000)
struct CameraOrientationSynchronizer_GetIsOwnerMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraOrientationSynchronizer_GetIsOwnerMoving) == 0x000001, "Wrong alignment on CameraOrientationSynchronizer_GetIsOwnerMoving");
static_assert(sizeof(CameraOrientationSynchronizer_GetIsOwnerMoving) == 0x000001, "Wrong size on CameraOrientationSynchronizer_GetIsOwnerMoving");
static_assert(offsetof(CameraOrientationSynchronizer_GetIsOwnerMoving, ReturnValue) == 0x000000, "Member 'CameraOrientationSynchronizer_GetIsOwnerMoving::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraStateInterface.HandleEnterCameraState
// 0x0030 (0x0030 - 0x0000)
struct CameraStateInterface_HandleEnterCameraState final
{
public:
	ECameraState                                  LastState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraState                                  NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            TransitionParams;                                  // 0x0008(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraStateInterface_HandleEnterCameraState) == 0x000008, "Wrong alignment on CameraStateInterface_HandleEnterCameraState");
static_assert(sizeof(CameraStateInterface_HandleEnterCameraState) == 0x000030, "Wrong size on CameraStateInterface_HandleEnterCameraState");
static_assert(offsetof(CameraStateInterface_HandleEnterCameraState, LastState) == 0x000000, "Member 'CameraStateInterface_HandleEnterCameraState::LastState' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_HandleEnterCameraState, NewState) == 0x000001, "Member 'CameraStateInterface_HandleEnterCameraState::NewState' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_HandleEnterCameraState, TransitionParams) == 0x000008, "Member 'CameraStateInterface_HandleEnterCameraState::TransitionParams' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_HandleEnterCameraState, ReturnValue) == 0x000028, "Member 'CameraStateInterface_HandleEnterCameraState::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraStateInterface.HandleExitCameraState
// 0x0002 (0x0002 - 0x0000)
struct CameraStateInterface_HandleExitCameraState final
{
public:
	ECameraState                                  LastState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraStateInterface_HandleExitCameraState) == 0x000001, "Wrong alignment on CameraStateInterface_HandleExitCameraState");
static_assert(sizeof(CameraStateInterface_HandleExitCameraState) == 0x000002, "Wrong size on CameraStateInterface_HandleExitCameraState");
static_assert(offsetof(CameraStateInterface_HandleExitCameraState, LastState) == 0x000000, "Member 'CameraStateInterface_HandleExitCameraState::LastState' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_HandleExitCameraState, ReturnValue) == 0x000001, "Member 'CameraStateInterface_HandleExitCameraState::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraStateInterface.HandleFullyBlendedCameraState
// 0x0990 (0x0990 - 0x0000)
struct CameraStateInterface_HandleFullyBlendedCameraState final
{
public:
	ECameraState                                  NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimalViewInfo                       NewPOV;                                            // 0x0010(0x0970)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0980(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_981[0xF];                                      // 0x0981(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraStateInterface_HandleFullyBlendedCameraState) == 0x000010, "Wrong alignment on CameraStateInterface_HandleFullyBlendedCameraState");
static_assert(sizeof(CameraStateInterface_HandleFullyBlendedCameraState) == 0x000990, "Wrong size on CameraStateInterface_HandleFullyBlendedCameraState");
static_assert(offsetof(CameraStateInterface_HandleFullyBlendedCameraState, NewState) == 0x000000, "Member 'CameraStateInterface_HandleFullyBlendedCameraState::NewState' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_HandleFullyBlendedCameraState, NewPOV) == 0x000010, "Member 'CameraStateInterface_HandleFullyBlendedCameraState::NewPOV' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_HandleFullyBlendedCameraState, ReturnValue) == 0x000980, "Member 'CameraStateInterface_HandleFullyBlendedCameraState::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraStateInterface.HandleGetCameraComponent
// 0x0008 (0x0008 - 0x0000)
struct CameraStateInterface_HandleGetCameraComponent final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraStateInterface_HandleGetCameraComponent) == 0x000008, "Wrong alignment on CameraStateInterface_HandleGetCameraComponent");
static_assert(sizeof(CameraStateInterface_HandleGetCameraComponent) == 0x000008, "Wrong size on CameraStateInterface_HandleGetCameraComponent");
static_assert(offsetof(CameraStateInterface_HandleGetCameraComponent, ReturnValue) == 0x000000, "Member 'CameraStateInterface_HandleGetCameraComponent::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraStateInterface.HandleUpdateBlendCameraState
// 0x09B0 (0x09B0 - 0x0000)
struct CameraStateInterface_HandleUpdateBlendCameraState final
{
public:
	ECameraState                                  NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationPct;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            BlendParams;                                       // 0x0008(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimalViewInfo                       NewPOV;                                            // 0x0030(0x0970)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x09A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A1[0xF];                                      // 0x09A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraStateInterface_HandleUpdateBlendCameraState) == 0x000010, "Wrong alignment on CameraStateInterface_HandleUpdateBlendCameraState");
static_assert(sizeof(CameraStateInterface_HandleUpdateBlendCameraState) == 0x0009B0, "Wrong size on CameraStateInterface_HandleUpdateBlendCameraState");
static_assert(offsetof(CameraStateInterface_HandleUpdateBlendCameraState, NewState) == 0x000000, "Member 'CameraStateInterface_HandleUpdateBlendCameraState::NewState' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_HandleUpdateBlendCameraState, DurationPct) == 0x000004, "Member 'CameraStateInterface_HandleUpdateBlendCameraState::DurationPct' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_HandleUpdateBlendCameraState, BlendParams) == 0x000008, "Member 'CameraStateInterface_HandleUpdateBlendCameraState::BlendParams' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_HandleUpdateBlendCameraState, NewPOV) == 0x000030, "Member 'CameraStateInterface_HandleUpdateBlendCameraState::NewPOV' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_HandleUpdateBlendCameraState, ReturnValue) == 0x0009A0, "Member 'CameraStateInterface_HandleUpdateBlendCameraState::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraStateInterface.OnEnterCameraState
// 0x0028 (0x0028 - 0x0000)
struct CameraStateInterface_OnEnterCameraState final
{
public:
	ECameraState                                  LastMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraState                                  NewMode;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifierBlendParam              ViewTargetTransitionParams;                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 NewTarget;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraStateInterface_OnEnterCameraState) == 0x000008, "Wrong alignment on CameraStateInterface_OnEnterCameraState");
static_assert(sizeof(CameraStateInterface_OnEnterCameraState) == 0x000028, "Wrong size on CameraStateInterface_OnEnterCameraState");
static_assert(offsetof(CameraStateInterface_OnEnterCameraState, LastMode) == 0x000000, "Member 'CameraStateInterface_OnEnterCameraState::LastMode' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_OnEnterCameraState, NewMode) == 0x000001, "Member 'CameraStateInterface_OnEnterCameraState::NewMode' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_OnEnterCameraState, ViewTargetTransitionParams) == 0x000008, "Member 'CameraStateInterface_OnEnterCameraState::ViewTargetTransitionParams' has a wrong offset!");
static_assert(offsetof(CameraStateInterface_OnEnterCameraState, NewTarget) == 0x000020, "Member 'CameraStateInterface_OnEnterCameraState::NewTarget' has a wrong offset!");

// Function X6Camera.CameraTaskExecuter.DoExecuteCameraTask
// 0x0020 (0x0020 - 0x0000)
struct CameraTaskExecuter_DoExecuteCameraTask final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UCameraTask>>        CameraTasks;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UCameraTaskExecuter*                    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskExecuter_DoExecuteCameraTask) == 0x000008, "Wrong alignment on CameraTaskExecuter_DoExecuteCameraTask");
static_assert(sizeof(CameraTaskExecuter_DoExecuteCameraTask) == 0x000020, "Wrong size on CameraTaskExecuter_DoExecuteCameraTask");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask, WorldContextObject) == 0x000000, "Member 'CameraTaskExecuter_DoExecuteCameraTask::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask, CameraTasks) == 0x000008, "Member 'CameraTaskExecuter_DoExecuteCameraTask::CameraTasks' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask, ReturnValue) == 0x000018, "Member 'CameraTaskExecuter_DoExecuteCameraTask::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraTaskExecuter.DoExecuteCameraTask_LookAt
// 0x0048 (0x0048 - 0x0000)
struct CameraTaskExecuter_DoExecuteCameraTask_LookAt final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            Transition;                                        // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ECameraTaskLookAtType                         LookAtType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetArmLength;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraTaskObject*                      FocusDummy;                                        // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraTaskExecuter*                    ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskExecuter_DoExecuteCameraTask_LookAt) == 0x000008, "Wrong alignment on CameraTaskExecuter_DoExecuteCameraTask_LookAt");
static_assert(sizeof(CameraTaskExecuter_DoExecuteCameraTask_LookAt) == 0x000048, "Wrong size on CameraTaskExecuter_DoExecuteCameraTask_LookAt");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAt, WorldContextObject) == 0x000000, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAt::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAt, Transition) == 0x000008, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAt::Transition' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAt, LookAtType) == 0x000028, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAt::LookAtType' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAt, TargetArmLength) == 0x00002C, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAt::TargetArmLength' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAt, InterpSpeed) == 0x000030, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAt::InterpSpeed' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAt, FocusDummy) == 0x000038, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAt::FocusDummy' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAt, ReturnValue) == 0x000040, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAt::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraTaskExecuter.DoExecuteCameraTask_LookAtWithFOVBlend
// 0x0048 (0x0048 - 0x0000)
struct CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            Transition;                                        // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	ECameraTaskLookAtType                         LookAtType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetArmLength;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetFOV;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraTaskObject*                      FocusDummy;                                        // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraTaskExecuter*                    ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend) == 0x000008, "Wrong alignment on CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend");
static_assert(sizeof(CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend) == 0x000048, "Wrong size on CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend, WorldContextObject) == 0x000000, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend, Transition) == 0x000008, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend::Transition' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend, LookAtType) == 0x000028, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend::LookAtType' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend, TargetArmLength) == 0x00002C, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend::TargetArmLength' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend, TargetFOV) == 0x000030, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend::TargetFOV' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend, InterpSpeed) == 0x000034, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend::InterpSpeed' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend, FocusDummy) == 0x000038, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend::FocusDummy' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend, ReturnValue) == 0x000040, "Member 'CameraTaskExecuter_DoExecuteCameraTask_LookAtWithFOVBlend::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraTaskExecuter.DoExecuteCameraTask_MoveTo
// 0x0020 (0x0020 - 0x0000)
struct CameraTaskExecuter_DoExecuteCameraTask_MoveTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCameraTaskMoveToData>          MoveToData;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UCameraTaskExecuter*                    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskExecuter_DoExecuteCameraTask_MoveTo) == 0x000008, "Wrong alignment on CameraTaskExecuter_DoExecuteCameraTask_MoveTo");
static_assert(sizeof(CameraTaskExecuter_DoExecuteCameraTask_MoveTo) == 0x000020, "Wrong size on CameraTaskExecuter_DoExecuteCameraTask_MoveTo");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_MoveTo, WorldContextObject) == 0x000000, "Member 'CameraTaskExecuter_DoExecuteCameraTask_MoveTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_MoveTo, MoveToData) == 0x000008, "Member 'CameraTaskExecuter_DoExecuteCameraTask_MoveTo::MoveToData' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_MoveTo, ReturnValue) == 0x000018, "Member 'CameraTaskExecuter_DoExecuteCameraTask_MoveTo::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraTaskExecuter.DoExecuteCameraTask_Spline
// 0x0048 (0x0048 - 0x0000)
struct CameraTaskExecuter_DoExecuteCameraTask_Spline final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewTargetTransitionParams            BetweenTwoSplineTransition;                        // 0x0008(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FCameraTaskSplineBlendInfo>     FSplineCameraTaskDatas;                            // 0x0028(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bBackToPreViewTarget;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawDebugTime;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraTaskExecuter*                    ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskExecuter_DoExecuteCameraTask_Spline) == 0x000008, "Wrong alignment on CameraTaskExecuter_DoExecuteCameraTask_Spline");
static_assert(sizeof(CameraTaskExecuter_DoExecuteCameraTask_Spline) == 0x000048, "Wrong size on CameraTaskExecuter_DoExecuteCameraTask_Spline");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_Spline, WorldContextObject) == 0x000000, "Member 'CameraTaskExecuter_DoExecuteCameraTask_Spline::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_Spline, BetweenTwoSplineTransition) == 0x000008, "Member 'CameraTaskExecuter_DoExecuteCameraTask_Spline::BetweenTwoSplineTransition' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_Spline, FSplineCameraTaskDatas) == 0x000028, "Member 'CameraTaskExecuter_DoExecuteCameraTask_Spline::FSplineCameraTaskDatas' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_Spline, bBackToPreViewTarget) == 0x000038, "Member 'CameraTaskExecuter_DoExecuteCameraTask_Spline::bBackToPreViewTarget' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_Spline, bDrawDebug) == 0x000039, "Member 'CameraTaskExecuter_DoExecuteCameraTask_Spline::bDrawDebug' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_Spline, DrawDebugTime) == 0x00003C, "Member 'CameraTaskExecuter_DoExecuteCameraTask_Spline::DrawDebugTime' has a wrong offset!");
static_assert(offsetof(CameraTaskExecuter_DoExecuteCameraTask_Spline, ReturnValue) == 0x000040, "Member 'CameraTaskExecuter_DoExecuteCameraTask_Spline::ReturnValue' has a wrong offset!");

// Function X6Camera.FixedCameraVolumeActor.OnActorEnterVolume
// 0x0008 (0x0008 - 0x0000)
struct FixedCameraVolumeActor_OnActorEnterVolume final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedCameraVolumeActor_OnActorEnterVolume) == 0x000008, "Wrong alignment on FixedCameraVolumeActor_OnActorEnterVolume");
static_assert(sizeof(FixedCameraVolumeActor_OnActorEnterVolume) == 0x000008, "Wrong size on FixedCameraVolumeActor_OnActorEnterVolume");
static_assert(offsetof(FixedCameraVolumeActor_OnActorEnterVolume, Actor) == 0x000000, "Member 'FixedCameraVolumeActor_OnActorEnterVolume::Actor' has a wrong offset!");

// Function X6Camera.FixedCameraVolumeActor.OnActorLeaveVolume
// 0x0008 (0x0008 - 0x0000)
struct FixedCameraVolumeActor_OnActorLeaveVolume final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedCameraVolumeActor_OnActorLeaveVolume) == 0x000008, "Wrong alignment on FixedCameraVolumeActor_OnActorLeaveVolume");
static_assert(sizeof(FixedCameraVolumeActor_OnActorLeaveVolume) == 0x000008, "Wrong size on FixedCameraVolumeActor_OnActorLeaveVolume");
static_assert(offsetof(FixedCameraVolumeActor_OnActorLeaveVolume, Actor) == 0x000000, "Member 'FixedCameraVolumeActor_OnActorLeaveVolume::Actor' has a wrong offset!");

// Function X6Camera.FixedCameraVolumeActor.OnEnterBoxComponentBeginOverlap
// 0x0118 (0x0118 - 0x0000)
struct FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap) == 0x000008, "Wrong alignment on FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap");
static_assert(sizeof(FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap) == 0x000118, "Wrong size on FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap");
static_assert(offsetof(FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap, OtherActor) == 0x000008, "Member 'FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap, OtherComp) == 0x000010, "Member 'FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap, SweepResult) == 0x000020, "Member 'FixedCameraVolumeActor_OnEnterBoxComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function X6Camera.FixedCameraVolumeActor.OnEnterCameraState
// 0x0028 (0x0028 - 0x0000)
struct FixedCameraVolumeActor_OnEnterCameraState final
{
public:
	ECameraState                                  LastMode;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraState                                  NewMode;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraModifierBlendParam              ViewTargetTransitionParams;                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 NewTarget;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedCameraVolumeActor_OnEnterCameraState) == 0x000008, "Wrong alignment on FixedCameraVolumeActor_OnEnterCameraState");
static_assert(sizeof(FixedCameraVolumeActor_OnEnterCameraState) == 0x000028, "Wrong size on FixedCameraVolumeActor_OnEnterCameraState");
static_assert(offsetof(FixedCameraVolumeActor_OnEnterCameraState, LastMode) == 0x000000, "Member 'FixedCameraVolumeActor_OnEnterCameraState::LastMode' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_OnEnterCameraState, NewMode) == 0x000001, "Member 'FixedCameraVolumeActor_OnEnterCameraState::NewMode' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_OnEnterCameraState, ViewTargetTransitionParams) == 0x000008, "Member 'FixedCameraVolumeActor_OnEnterCameraState::ViewTargetTransitionParams' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_OnEnterCameraState, NewTarget) == 0x000020, "Member 'FixedCameraVolumeActor_OnEnterCameraState::NewTarget' has a wrong offset!");

// Function X6Camera.FixedCameraVolumeActor.OnExitBoxBoxComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap) == 0x000008, "Wrong alignment on FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap");
static_assert(sizeof(FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap) == 0x000020, "Wrong size on FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap");
static_assert(offsetof(FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap, OtherActor) == 0x000008, "Member 'FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap, OtherComp) == 0x000010, "Member 'FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'FixedCameraVolumeActor_OnExitBoxBoxComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function X6Camera.FixedCameraVolumeActor.SetViewTarget
// 0x0020 (0x0020 - 0x0000)
struct FixedCameraVolumeActor_SetViewTarget final
{
public:
	class AActor*                                 NewViewTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraModifierBlendParam              BlendParam;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedCameraVolumeActor_SetViewTarget) == 0x000008, "Wrong alignment on FixedCameraVolumeActor_SetViewTarget");
static_assert(sizeof(FixedCameraVolumeActor_SetViewTarget) == 0x000020, "Wrong size on FixedCameraVolumeActor_SetViewTarget");
static_assert(offsetof(FixedCameraVolumeActor_SetViewTarget, NewViewTarget) == 0x000000, "Member 'FixedCameraVolumeActor_SetViewTarget::NewViewTarget' has a wrong offset!");
static_assert(offsetof(FixedCameraVolumeActor_SetViewTarget, BlendParam) == 0x000008, "Member 'FixedCameraVolumeActor_SetViewTarget::BlendParam' has a wrong offset!");

// Function X6Camera.FixedCamera.EnterVolume
// 0x0018 (0x0018 - 0x0000)
struct FixedCamera_EnterVolume final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InBlendCurve;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedCamera_EnterVolume) == 0x000008, "Wrong alignment on FixedCamera_EnterVolume");
static_assert(sizeof(FixedCamera_EnterVolume) == 0x000018, "Wrong size on FixedCamera_EnterVolume");
static_assert(offsetof(FixedCamera_EnterVolume, BlendTime) == 0x000000, "Member 'FixedCamera_EnterVolume::BlendTime' has a wrong offset!");
static_assert(offsetof(FixedCamera_EnterVolume, BlendFunc) == 0x000004, "Member 'FixedCamera_EnterVolume::BlendFunc' has a wrong offset!");
static_assert(offsetof(FixedCamera_EnterVolume, BlendExp) == 0x000008, "Member 'FixedCamera_EnterVolume::BlendExp' has a wrong offset!");
static_assert(offsetof(FixedCamera_EnterVolume, bLockOutgoing) == 0x00000C, "Member 'FixedCamera_EnterVolume::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(FixedCamera_EnterVolume, InBlendCurve) == 0x000010, "Member 'FixedCamera_EnterVolume::InBlendCurve' has a wrong offset!");

// Function X6Camera.FixedCamera.LeaveVolume
// 0x0018 (0x0018 - 0x0000)
struct FixedCamera_LeaveVolume final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InBlendCurve;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FixedCamera_LeaveVolume) == 0x000008, "Wrong alignment on FixedCamera_LeaveVolume");
static_assert(sizeof(FixedCamera_LeaveVolume) == 0x000018, "Wrong size on FixedCamera_LeaveVolume");
static_assert(offsetof(FixedCamera_LeaveVolume, BlendTime) == 0x000000, "Member 'FixedCamera_LeaveVolume::BlendTime' has a wrong offset!");
static_assert(offsetof(FixedCamera_LeaveVolume, BlendFunc) == 0x000004, "Member 'FixedCamera_LeaveVolume::BlendFunc' has a wrong offset!");
static_assert(offsetof(FixedCamera_LeaveVolume, BlendExp) == 0x000008, "Member 'FixedCamera_LeaveVolume::BlendExp' has a wrong offset!");
static_assert(offsetof(FixedCamera_LeaveVolume, bLockOutgoing) == 0x00000C, "Member 'FixedCamera_LeaveVolume::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(FixedCamera_LeaveVolume, InBlendCurve) == 0x000010, "Member 'FixedCamera_LeaveVolume::InBlendCurve' has a wrong offset!");

// Function X6Camera.SplineCamera.EnterVolume
// 0x0018 (0x0018 - 0x0000)
struct SplineCamera_EnterVolume final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InBlendCurve;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineCamera_EnterVolume) == 0x000008, "Wrong alignment on SplineCamera_EnterVolume");
static_assert(sizeof(SplineCamera_EnterVolume) == 0x000018, "Wrong size on SplineCamera_EnterVolume");
static_assert(offsetof(SplineCamera_EnterVolume, BlendTime) == 0x000000, "Member 'SplineCamera_EnterVolume::BlendTime' has a wrong offset!");
static_assert(offsetof(SplineCamera_EnterVolume, BlendFunc) == 0x000004, "Member 'SplineCamera_EnterVolume::BlendFunc' has a wrong offset!");
static_assert(offsetof(SplineCamera_EnterVolume, BlendExp) == 0x000008, "Member 'SplineCamera_EnterVolume::BlendExp' has a wrong offset!");
static_assert(offsetof(SplineCamera_EnterVolume, bLockOutgoing) == 0x00000C, "Member 'SplineCamera_EnterVolume::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(SplineCamera_EnterVolume, InBlendCurve) == 0x000010, "Member 'SplineCamera_EnterVolume::InBlendCurve' has a wrong offset!");

// Function X6Camera.SplineCamera.LeaveVolume
// 0x0018 (0x0018 - 0x0000)
struct SplineCamera_LeaveVolume final
{
public:
	float                                         BlendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InBlendCurve;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineCamera_LeaveVolume) == 0x000008, "Wrong alignment on SplineCamera_LeaveVolume");
static_assert(sizeof(SplineCamera_LeaveVolume) == 0x000018, "Wrong size on SplineCamera_LeaveVolume");
static_assert(offsetof(SplineCamera_LeaveVolume, BlendTime) == 0x000000, "Member 'SplineCamera_LeaveVolume::BlendTime' has a wrong offset!");
static_assert(offsetof(SplineCamera_LeaveVolume, BlendFunc) == 0x000004, "Member 'SplineCamera_LeaveVolume::BlendFunc' has a wrong offset!");
static_assert(offsetof(SplineCamera_LeaveVolume, BlendExp) == 0x000008, "Member 'SplineCamera_LeaveVolume::BlendExp' has a wrong offset!");
static_assert(offsetof(SplineCamera_LeaveVolume, bLockOutgoing) == 0x00000C, "Member 'SplineCamera_LeaveVolume::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(SplineCamera_LeaveVolume, InBlendCurve) == 0x000010, "Member 'SplineCamera_LeaveVolume::InBlendCurve' has a wrong offset!");

// Function X6Camera.SplineCameraVolumeActor.OnActorEnterVolume
// 0x0008 (0x0008 - 0x0000)
struct SplineCameraVolumeActor_OnActorEnterVolume final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineCameraVolumeActor_OnActorEnterVolume) == 0x000008, "Wrong alignment on SplineCameraVolumeActor_OnActorEnterVolume");
static_assert(sizeof(SplineCameraVolumeActor_OnActorEnterVolume) == 0x000008, "Wrong size on SplineCameraVolumeActor_OnActorEnterVolume");
static_assert(offsetof(SplineCameraVolumeActor_OnActorEnterVolume, Actor) == 0x000000, "Member 'SplineCameraVolumeActor_OnActorEnterVolume::Actor' has a wrong offset!");

// Function X6Camera.SplineCameraVolumeActor.OnActorLeaveVolume
// 0x0008 (0x0008 - 0x0000)
struct SplineCameraVolumeActor_OnActorLeaveVolume final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineCameraVolumeActor_OnActorLeaveVolume) == 0x000008, "Wrong alignment on SplineCameraVolumeActor_OnActorLeaveVolume");
static_assert(sizeof(SplineCameraVolumeActor_OnActorLeaveVolume) == 0x000008, "Wrong size on SplineCameraVolumeActor_OnActorLeaveVolume");
static_assert(offsetof(SplineCameraVolumeActor_OnActorLeaveVolume, Actor) == 0x000000, "Member 'SplineCameraVolumeActor_OnActorLeaveVolume::Actor' has a wrong offset!");

// Function X6Camera.SplineCameraVolumeActor.OnEnterBoxComponentBeginOverlap
// 0x0118 (0x0118 - 0x0000)
struct SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap) == 0x000008, "Wrong alignment on SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap");
static_assert(sizeof(SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap) == 0x000118, "Wrong size on SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap");
static_assert(offsetof(SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap, OtherActor) == 0x000008, "Member 'SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap, OtherComp) == 0x000010, "Member 'SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap, SweepResult) == 0x000020, "Member 'SplineCameraVolumeActor_OnEnterBoxComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function X6Camera.SplineCameraVolumeActor.OnExitBoxBoxComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap) == 0x000008, "Wrong alignment on SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap");
static_assert(sizeof(SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap) == 0x000020, "Wrong size on SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap");
static_assert(offsetof(SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap, OtherActor) == 0x000008, "Member 'SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap, OtherComp) == 0x000010, "Member 'SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SplineCameraVolumeActor_OnExitBoxBoxComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function X6Camera.SplineCameraVolumeActor.SetViewTarget
// 0x0020 (0x0020 - 0x0000)
struct SplineCameraVolumeActor_SetViewTarget final
{
public:
	class AActor*                                 NewViewTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraModifierBlendParam              BlendParam;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineCameraVolumeActor_SetViewTarget) == 0x000008, "Wrong alignment on SplineCameraVolumeActor_SetViewTarget");
static_assert(sizeof(SplineCameraVolumeActor_SetViewTarget) == 0x000020, "Wrong size on SplineCameraVolumeActor_SetViewTarget");
static_assert(offsetof(SplineCameraVolumeActor_SetViewTarget, NewViewTarget) == 0x000000, "Member 'SplineCameraVolumeActor_SetViewTarget::NewViewTarget' has a wrong offset!");
static_assert(offsetof(SplineCameraVolumeActor_SetViewTarget, BlendParam) == 0x000008, "Member 'SplineCameraVolumeActor_SetViewTarget::BlendParam' has a wrong offset!");

// Function X6Camera.X6CameraConfigManager.IsCameraSettingsValueEqual
// 0x0238 (0x0238 - 0x0000)
struct X6CameraConfigManager_IsCameraSettingsValueEqual final
{
public:
	struct FX6CameraBlendableSettings             A;                                                 // 0x0000(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FX6CameraBlendableSettings             B;                                                 // 0x0118(0x0118)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0230(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6CameraConfigManager_IsCameraSettingsValueEqual) == 0x000008, "Wrong alignment on X6CameraConfigManager_IsCameraSettingsValueEqual");
static_assert(sizeof(X6CameraConfigManager_IsCameraSettingsValueEqual) == 0x000238, "Wrong size on X6CameraConfigManager_IsCameraSettingsValueEqual");
static_assert(offsetof(X6CameraConfigManager_IsCameraSettingsValueEqual, A) == 0x000000, "Member 'X6CameraConfigManager_IsCameraSettingsValueEqual::A' has a wrong offset!");
static_assert(offsetof(X6CameraConfigManager_IsCameraSettingsValueEqual, B) == 0x000118, "Member 'X6CameraConfigManager_IsCameraSettingsValueEqual::B' has a wrong offset!");
static_assert(offsetof(X6CameraConfigManager_IsCameraSettingsValueEqual, ReturnValue) == 0x000230, "Member 'X6CameraConfigManager_IsCameraSettingsValueEqual::ReturnValue' has a wrong offset!");

// Function X6Camera.X6CameraConfigManager.CollectDebugOutput
// 0x0010 (0x0010 - 0x0000)
struct X6CameraConfigManager_CollectDebugOutput final
{
public:
	TArray<class FString>                         InOutDebugInfoLines;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6CameraConfigManager_CollectDebugOutput) == 0x000008, "Wrong alignment on X6CameraConfigManager_CollectDebugOutput");
static_assert(sizeof(X6CameraConfigManager_CollectDebugOutput) == 0x000010, "Wrong size on X6CameraConfigManager_CollectDebugOutput");
static_assert(offsetof(X6CameraConfigManager_CollectDebugOutput, InOutDebugInfoLines) == 0x000000, "Member 'X6CameraConfigManager_CollectDebugOutput::InOutDebugInfoLines' has a wrong offset!");

// Function X6Camera.X6CameraConfigManager.GetConfigDataList
// 0x0010 (0x0010 - 0x0000)
struct X6CameraConfigManager_GetConfigDataList final
{
public:
	TArray<struct FX6CameraConfigData>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6CameraConfigManager_GetConfigDataList) == 0x000008, "Wrong alignment on X6CameraConfigManager_GetConfigDataList");
static_assert(sizeof(X6CameraConfigManager_GetConfigDataList) == 0x000010, "Wrong size on X6CameraConfigManager_GetConfigDataList");
static_assert(offsetof(X6CameraConfigManager_GetConfigDataList, ReturnValue) == 0x000000, "Member 'X6CameraConfigManager_GetConfigDataList::ReturnValue' has a wrong offset!");

// Function X6Camera.X6CameraRuntimeConfigModifier.BlueprintModifyCameraRuntimeConfig
// 0x0468 (0x0468 - 0x0000)
struct X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefreshConfigData;                                // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6CameraInputConfig                   InInputConfig;                                     // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraBaseParamsDefine                InBaseParams;                                      // 0x00D8(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FX6CameraInputConfig                   OutInputConfig;                                    // 0x0238(0x00D0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraBaseParamsDefine                OutBaseParams;                                     // 0x0308(0x0160)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig) == 0x000008, "Wrong alignment on X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig");
static_assert(sizeof(X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig) == 0x000468, "Wrong size on X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig");
static_assert(offsetof(X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig, DeltaTime) == 0x000000, "Member 'X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig::DeltaTime' has a wrong offset!");
static_assert(offsetof(X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig, bRefreshConfigData) == 0x000004, "Member 'X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig::bRefreshConfigData' has a wrong offset!");
static_assert(offsetof(X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig, InInputConfig) == 0x000008, "Member 'X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig::InInputConfig' has a wrong offset!");
static_assert(offsetof(X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig, InBaseParams) == 0x0000D8, "Member 'X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig::InBaseParams' has a wrong offset!");
static_assert(offsetof(X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig, OutInputConfig) == 0x000238, "Member 'X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig::OutInputConfig' has a wrong offset!");
static_assert(offsetof(X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig, OutBaseParams) == 0x000308, "Member 'X6CameraRuntimeConfigModifier_BlueprintModifyCameraRuntimeConfig::OutBaseParams' has a wrong offset!");

// Function X6Camera.X6CameraRuntimeConfigModifier.GetConfigDataUniqueKey
// 0x0004 (0x0004 - 0x0000)
struct X6CameraRuntimeConfigModifier_GetConfigDataUniqueKey final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6CameraRuntimeConfigModifier_GetConfigDataUniqueKey) == 0x000004, "Wrong alignment on X6CameraRuntimeConfigModifier_GetConfigDataUniqueKey");
static_assert(sizeof(X6CameraRuntimeConfigModifier_GetConfigDataUniqueKey) == 0x000004, "Wrong size on X6CameraRuntimeConfigModifier_GetConfigDataUniqueKey");
static_assert(offsetof(X6CameraRuntimeConfigModifier_GetConfigDataUniqueKey, ReturnValue) == 0x000000, "Member 'X6CameraRuntimeConfigModifier_GetConfigDataUniqueKey::ReturnValue' has a wrong offset!");

// Function X6Camera.X6CameraSettings.GetCameraStateName
// 0x000C (0x000C - 0x0000)
struct X6CameraSettings_GetCameraStateName final
{
public:
	ECameraState                                  CameraState;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6CameraSettings_GetCameraStateName) == 0x000004, "Wrong alignment on X6CameraSettings_GetCameraStateName");
static_assert(sizeof(X6CameraSettings_GetCameraStateName) == 0x00000C, "Wrong size on X6CameraSettings_GetCameraStateName");
static_assert(offsetof(X6CameraSettings_GetCameraStateName, CameraState) == 0x000000, "Member 'X6CameraSettings_GetCameraStateName::CameraState' has a wrong offset!");
static_assert(offsetof(X6CameraSettings_GetCameraStateName, ReturnValue) == 0x000004, "Member 'X6CameraSettings_GetCameraStateName::ReturnValue' has a wrong offset!");

// Function X6Camera.X6CameraSettings.GetCameraStateNameString
// 0x0018 (0x0018 - 0x0000)
struct X6CameraSettings_GetCameraStateNameString final
{
public:
	ECameraState                                  CameraState;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6CameraSettings_GetCameraStateNameString) == 0x000008, "Wrong alignment on X6CameraSettings_GetCameraStateNameString");
static_assert(sizeof(X6CameraSettings_GetCameraStateNameString) == 0x000018, "Wrong size on X6CameraSettings_GetCameraStateNameString");
static_assert(offsetof(X6CameraSettings_GetCameraStateNameString, CameraState) == 0x000000, "Member 'X6CameraSettings_GetCameraStateNameString::CameraState' has a wrong offset!");
static_assert(offsetof(X6CameraSettings_GetCameraStateNameString, ReturnValue) == 0x000008, "Member 'X6CameraSettings_GetCameraStateNameString::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraTaskObject.SetActive
// 0x0001 (0x0001 - 0x0000)
struct CameraTaskObject_SetActive final
{
public:
	bool                                          bNewActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskObject_SetActive) == 0x000001, "Wrong alignment on CameraTaskObject_SetActive");
static_assert(sizeof(CameraTaskObject_SetActive) == 0x000001, "Wrong size on CameraTaskObject_SetActive");
static_assert(offsetof(CameraTaskObject_SetActive, bNewActive) == 0x000000, "Member 'CameraTaskObject_SetActive::bNewActive' has a wrong offset!");

// Function X6Camera.CameraTaskObject.SetArmlength
// 0x0004 (0x0004 - 0x0000)
struct CameraTaskObject_SetArmlength final
{
public:
	float                                         TargetArmLength;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskObject_SetArmlength) == 0x000004, "Wrong alignment on CameraTaskObject_SetArmlength");
static_assert(sizeof(CameraTaskObject_SetArmlength) == 0x000004, "Wrong size on CameraTaskObject_SetArmlength");
static_assert(offsetof(CameraTaskObject_SetArmlength, TargetArmLength) == 0x000000, "Member 'CameraTaskObject_SetArmlength::TargetArmLength' has a wrong offset!");

// Function X6Camera.CameraTaskObject.SetLocation
// 0x0018 (0x0018 - 0x0000)
struct CameraTaskObject_SetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskObject_SetLocation) == 0x000008, "Wrong alignment on CameraTaskObject_SetLocation");
static_assert(sizeof(CameraTaskObject_SetLocation) == 0x000018, "Wrong size on CameraTaskObject_SetLocation");
static_assert(offsetof(CameraTaskObject_SetLocation, Location) == 0x000000, "Member 'CameraTaskObject_SetLocation::Location' has a wrong offset!");

// Function X6Camera.CameraTaskObject.SetLocationAndRotation
// 0x0030 (0x0030 - 0x0000)
struct CameraTaskObject_SetLocationAndRotation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskObject_SetLocationAndRotation) == 0x000008, "Wrong alignment on CameraTaskObject_SetLocationAndRotation");
static_assert(sizeof(CameraTaskObject_SetLocationAndRotation) == 0x000030, "Wrong size on CameraTaskObject_SetLocationAndRotation");
static_assert(offsetof(CameraTaskObject_SetLocationAndRotation, Location) == 0x000000, "Member 'CameraTaskObject_SetLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(CameraTaskObject_SetLocationAndRotation, Rotation) == 0x000018, "Member 'CameraTaskObject_SetLocationAndRotation::Rotation' has a wrong offset!");

// Function X6Camera.CameraTaskObject.SetRotation
// 0x0018 (0x0018 - 0x0000)
struct CameraTaskObject_SetRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskObject_SetRotation) == 0x000008, "Wrong alignment on CameraTaskObject_SetRotation");
static_assert(sizeof(CameraTaskObject_SetRotation) == 0x000018, "Wrong size on CameraTaskObject_SetRotation");
static_assert(offsetof(CameraTaskObject_SetRotation, Rotation) == 0x000000, "Member 'CameraTaskObject_SetRotation::Rotation' has a wrong offset!");

// Function X6Camera.CameraTaskObject.GetArmlength
// 0x0004 (0x0004 - 0x0000)
struct CameraTaskObject_GetArmlength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskObject_GetArmlength) == 0x000004, "Wrong alignment on CameraTaskObject_GetArmlength");
static_assert(sizeof(CameraTaskObject_GetArmlength) == 0x000004, "Wrong size on CameraTaskObject_GetArmlength");
static_assert(offsetof(CameraTaskObject_GetArmlength, ReturnValue) == 0x000000, "Member 'CameraTaskObject_GetArmlength::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraTaskObject.GetLocation
// 0x0018 (0x0018 - 0x0000)
struct CameraTaskObject_GetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskObject_GetLocation) == 0x000008, "Wrong alignment on CameraTaskObject_GetLocation");
static_assert(sizeof(CameraTaskObject_GetLocation) == 0x000018, "Wrong size on CameraTaskObject_GetLocation");
static_assert(offsetof(CameraTaskObject_GetLocation, ReturnValue) == 0x000000, "Member 'CameraTaskObject_GetLocation::ReturnValue' has a wrong offset!");

// Function X6Camera.CameraTaskObject.GetRotation
// 0x0018 (0x0018 - 0x0000)
struct CameraTaskObject_GetRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraTaskObject_GetRotation) == 0x000008, "Wrong alignment on CameraTaskObject_GetRotation");
static_assert(sizeof(CameraTaskObject_GetRotation) == 0x000018, "Wrong size on CameraTaskObject_GetRotation");
static_assert(offsetof(CameraTaskObject_GetRotation, ReturnValue) == 0x000000, "Member 'CameraTaskObject_GetRotation::ReturnValue' has a wrong offset!");

// Function X6Camera.X6CameraTaskBase.GetPlayerCameraManager
// 0x0008 (0x0008 - 0x0000)
struct X6CameraTaskBase_GetPlayerCameraManager final
{
public:
	class AX6PlayerCameraManagerBase*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6CameraTaskBase_GetPlayerCameraManager) == 0x000008, "Wrong alignment on X6CameraTaskBase_GetPlayerCameraManager");
static_assert(sizeof(X6CameraTaskBase_GetPlayerCameraManager) == 0x000008, "Wrong size on X6CameraTaskBase_GetPlayerCameraManager");
static_assert(offsetof(X6CameraTaskBase_GetPlayerCameraManager, ReturnValue) == 0x000000, "Member 'X6CameraTaskBase_GetPlayerCameraManager::ReturnValue' has a wrong offset!");

// Function X6Camera.X6CameraTaskBase.ReceiveBeginTask
// 0x0004 (0x0004 - 0x0000)
struct X6CameraTaskBase_ReceiveBeginTask final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6CameraTaskBase_ReceiveBeginTask) == 0x000004, "Wrong alignment on X6CameraTaskBase_ReceiveBeginTask");
static_assert(sizeof(X6CameraTaskBase_ReceiveBeginTask) == 0x000004, "Wrong size on X6CameraTaskBase_ReceiveBeginTask");
static_assert(offsetof(X6CameraTaskBase_ReceiveBeginTask, DeltaSeconds) == 0x000000, "Member 'X6CameraTaskBase_ReceiveBeginTask::DeltaSeconds' has a wrong offset!");

// Function X6Camera.X6CameraTaskBase.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct X6CameraTaskBase_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6CameraTaskBase_ReceiveTick) == 0x000004, "Wrong alignment on X6CameraTaskBase_ReceiveTick");
static_assert(sizeof(X6CameraTaskBase_ReceiveTick) == 0x000004, "Wrong size on X6CameraTaskBase_ReceiveTick");
static_assert(offsetof(X6CameraTaskBase_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'X6CameraTaskBase_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function X6Camera.X6CameraTaskBase.GetAvatar
// 0x0008 (0x0008 - 0x0000)
struct X6CameraTaskBase_GetAvatar final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6CameraTaskBase_GetAvatar) == 0x000008, "Wrong alignment on X6CameraTaskBase_GetAvatar");
static_assert(sizeof(X6CameraTaskBase_GetAvatar) == 0x000008, "Wrong size on X6CameraTaskBase_GetAvatar");
static_assert(offsetof(X6CameraTaskBase_GetAvatar, ReturnValue) == 0x000000, "Member 'X6CameraTaskBase_GetAvatar::ReturnValue' has a wrong offset!");

}

