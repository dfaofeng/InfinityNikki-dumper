#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperRVOMgr

#include "Basic.hpp"

#include "DeveloperSettings_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class PaperRVOMgr.PaperAvoidanceSetting
// 0x0018 (0x0050 - 0x0038)
class UPaperAvoidanceSetting final : public UDeveloperSettings
{
public:
	float                                         TimeHorizon;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeHorizonObstacle;                               // 0x003C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNeighbors;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAvoidanceAngle;                                 // 0x0044(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlowdownTicksThreshold;                            // 0x0048(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperAvoidanceSetting">();
	}
	static class UPaperAvoidanceSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperAvoidanceSetting>();
	}
};
static_assert(alignof(UPaperAvoidanceSetting) == 0x000008, "Wrong alignment on UPaperAvoidanceSetting");
static_assert(sizeof(UPaperAvoidanceSetting) == 0x000050, "Wrong size on UPaperAvoidanceSetting");
static_assert(offsetof(UPaperAvoidanceSetting, TimeHorizon) == 0x000038, "Member 'UPaperAvoidanceSetting::TimeHorizon' has a wrong offset!");
static_assert(offsetof(UPaperAvoidanceSetting, TimeHorizonObstacle) == 0x00003C, "Member 'UPaperAvoidanceSetting::TimeHorizonObstacle' has a wrong offset!");
static_assert(offsetof(UPaperAvoidanceSetting, MaxNeighbors) == 0x000040, "Member 'UPaperAvoidanceSetting::MaxNeighbors' has a wrong offset!");
static_assert(offsetof(UPaperAvoidanceSetting, MaxAvoidanceAngle) == 0x000044, "Member 'UPaperAvoidanceSetting::MaxAvoidanceAngle' has a wrong offset!");
static_assert(offsetof(UPaperAvoidanceSetting, SlowdownTicksThreshold) == 0x000048, "Member 'UPaperAvoidanceSetting::SlowdownTicksThreshold' has a wrong offset!");

// Class PaperRVOMgr.PaperAvoidanceManager
// 0x0018 (0x00F8 - 0x00E0)
class UPaperAvoidanceManager final : public UAvoidanceManager
{
public:
	uint8                                         Pad_E0[0x18];                                      // 0x00E0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperAvoidanceManager">();
	}
	static class UPaperAvoidanceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperAvoidanceManager>();
	}
};
static_assert(alignof(UPaperAvoidanceManager) == 0x000008, "Wrong alignment on UPaperAvoidanceManager");
static_assert(sizeof(UPaperAvoidanceManager) == 0x0000F8, "Wrong size on UPaperAvoidanceManager");

// Class PaperRVOMgr.RVOAgentComponent
// 0x0030 (0x00D8 - 0x00A8)
class URVOAgentComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseRVOAvoidance : 1;                              // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AvoidanceWeight;                                   // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AvoidanceRadius;                                   // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AvoidanceConsiderationRadius;                      // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AvoidanceConsiderationRadiusTimeScale;             // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSpeed;                                          // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AvoidanceUID;                                      // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNavAvoidanceMask                      AvoidanceGroup;                                    // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNavAvoidanceMask                      GroupsToAvoid;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FNavAvoidanceMask                      GroupsToIgnore;                                    // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void SetAvoidanceEnabled(bool bEnable);

	struct FVector GetAvoidanceVelocity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RVOAgentComponent">();
	}
	static class URVOAgentComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URVOAgentComponent>();
	}
};
static_assert(alignof(URVOAgentComponent) == 0x000008, "Wrong alignment on URVOAgentComponent");
static_assert(sizeof(URVOAgentComponent) == 0x0000D8, "Wrong size on URVOAgentComponent");
static_assert(offsetof(URVOAgentComponent, AvoidanceWeight) == 0x0000B4, "Member 'URVOAgentComponent::AvoidanceWeight' has a wrong offset!");
static_assert(offsetof(URVOAgentComponent, AvoidanceRadius) == 0x0000B8, "Member 'URVOAgentComponent::AvoidanceRadius' has a wrong offset!");
static_assert(offsetof(URVOAgentComponent, AvoidanceConsiderationRadius) == 0x0000BC, "Member 'URVOAgentComponent::AvoidanceConsiderationRadius' has a wrong offset!");
static_assert(offsetof(URVOAgentComponent, AvoidanceConsiderationRadiusTimeScale) == 0x0000C0, "Member 'URVOAgentComponent::AvoidanceConsiderationRadiusTimeScale' has a wrong offset!");
static_assert(offsetof(URVOAgentComponent, MaxSpeed) == 0x0000C4, "Member 'URVOAgentComponent::MaxSpeed' has a wrong offset!");
static_assert(offsetof(URVOAgentComponent, AvoidanceUID) == 0x0000C8, "Member 'URVOAgentComponent::AvoidanceUID' has a wrong offset!");
static_assert(offsetof(URVOAgentComponent, AvoidanceGroup) == 0x0000CC, "Member 'URVOAgentComponent::AvoidanceGroup' has a wrong offset!");
static_assert(offsetof(URVOAgentComponent, GroupsToAvoid) == 0x0000D0, "Member 'URVOAgentComponent::GroupsToAvoid' has a wrong offset!");
static_assert(offsetof(URVOAgentComponent, GroupsToIgnore) == 0x0000D4, "Member 'URVOAgentComponent::GroupsToIgnore' has a wrong offset!");

}

