#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Locomotion_GroundState

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "EInputDeviceKeyType_structs.hpp"
#include "Engine_structs.hpp"
#include "EPlayerMovementScenarios_structs.hpp"
#include "X6Game_structs.hpp"


namespace SDK::Params
{

// Function BPI_Locomotion_GroundState.BPI_Locomotion_GroundState_C.BPI_Get_PlayerStates
// 0x0001 (0x0001 - 0x0000)
struct BPI_Locomotion_GroundState_C_BPI_Get_PlayerStates final
{
public:
	bool                                          IsInState_AimMode;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Locomotion_GroundState_C_BPI_Get_PlayerStates) == 0x000001, "Wrong alignment on BPI_Locomotion_GroundState_C_BPI_Get_PlayerStates");
static_assert(sizeof(BPI_Locomotion_GroundState_C_BPI_Get_PlayerStates) == 0x000001, "Wrong size on BPI_Locomotion_GroundState_C_BPI_Get_PlayerStates");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_PlayerStates, IsInState_AimMode) == 0x000000, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_PlayerStates::IsInState_AimMode' has a wrong offset!");

// Function BPI_Locomotion_GroundState.BPI_Locomotion_GroundState_C.BPI_Get_MaxSpeedValues
// 0x0018 (0x0018 - 0x0000)
struct BPI_Locomotion_GroundState_C_BPI_Get_MaxSpeedValues final
{
public:
	double                                        CurMinAnalogWalkSpeed;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurConfigMaxSpeed;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurActualMaxSpeed;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Locomotion_GroundState_C_BPI_Get_MaxSpeedValues) == 0x000008, "Wrong alignment on BPI_Locomotion_GroundState_C_BPI_Get_MaxSpeedValues");
static_assert(sizeof(BPI_Locomotion_GroundState_C_BPI_Get_MaxSpeedValues) == 0x000018, "Wrong size on BPI_Locomotion_GroundState_C_BPI_Get_MaxSpeedValues");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_MaxSpeedValues, CurMinAnalogWalkSpeed) == 0x000000, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_MaxSpeedValues::CurMinAnalogWalkSpeed' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_MaxSpeedValues, CurConfigMaxSpeed) == 0x000008, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_MaxSpeedValues::CurConfigMaxSpeed' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_MaxSpeedValues, CurActualMaxSpeed) == 0x000010, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_MaxSpeedValues::CurActualMaxSpeed' has a wrong offset!");

// Function BPI_Locomotion_GroundState.BPI_Locomotion_GroundState_C.BPI_Get_EssentialValues
// 0x0058 (0x0058 - 0x0000)
struct BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InCurrentAcceleration;                             // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InMaxAcceleration;                                 // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InTurnAroundAngle;                                 // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InSlopeAngle;                                      // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InStartTurnAroundAngle;                            // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InCurConfigMaxSpeed;                               // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues) == 0x000008, "Wrong alignment on BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues");
static_assert(sizeof(BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues) == 0x000058, "Wrong size on BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues, InVelocity) == 0x000000, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues::InVelocity' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues, InCurrentAcceleration) == 0x000018, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues::InCurrentAcceleration' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues, InMaxAcceleration) == 0x000030, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues::InMaxAcceleration' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues, InTurnAroundAngle) == 0x000038, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues::InTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues, InSlopeAngle) == 0x000040, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues::InSlopeAngle' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues, InStartTurnAroundAngle) == 0x000048, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues::InStartTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues, InCurConfigMaxSpeed) == 0x000050, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_EssentialValues::InCurConfigMaxSpeed' has a wrong offset!");

// Function BPI_Locomotion_GroundState.BPI_Locomotion_GroundState_C.BPI_Get_CurrentGroundStates
// 0x0004 (0x0004 - 0x0000)
struct BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates final
{
public:
	EMovementMode                                 PawnMovementMode;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        AllowedGait;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerMovementScenarios                      MovementScenario;                                  // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputDeviceKeyType                           CurInputDeviceKeyType;                             // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates) == 0x000001, "Wrong alignment on BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates");
static_assert(sizeof(BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates) == 0x000004, "Wrong size on BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates, PawnMovementMode) == 0x000000, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates::PawnMovementMode' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates, AllowedGait) == 0x000001, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates::AllowedGait' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates, MovementScenario) == 0x000002, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates::MovementScenario' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates, CurInputDeviceKeyType) == 0x000003, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_CurrentGroundStates::CurInputDeviceKeyType' has a wrong offset!");

// Function BPI_Locomotion_GroundState.BPI_Locomotion_GroundState_C.BPI_Get_ConfigData
// 0x0018 (0x0018 - 0x0000)
struct BPI_Locomotion_GroundState_C_BPI_Get_ConfigData final
{
public:
	double                                        WalkSpeed;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RunSpeed;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SprintSpeed;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Locomotion_GroundState_C_BPI_Get_ConfigData) == 0x000008, "Wrong alignment on BPI_Locomotion_GroundState_C_BPI_Get_ConfigData");
static_assert(sizeof(BPI_Locomotion_GroundState_C_BPI_Get_ConfigData) == 0x000018, "Wrong size on BPI_Locomotion_GroundState_C_BPI_Get_ConfigData");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_ConfigData, WalkSpeed) == 0x000000, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_ConfigData::WalkSpeed' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_ConfigData, RunSpeed) == 0x000008, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_ConfigData::RunSpeed' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_ConfigData, SprintSpeed) == 0x000010, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_ConfigData::SprintSpeed' has a wrong offset!");

// Function BPI_Locomotion_GroundState.BPI_Locomotion_GroundState_C.BPI_Get_BalanceBeamStates
// 0x0003 (0x0003 - 0x0000)
struct BPI_Locomotion_GroundState_C_BPI_Get_BalanceBeamStates final
{
public:
	bool                                          CanMoveOnValidInput;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnterTowardSideOfBeam;                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCurInputValid;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Locomotion_GroundState_C_BPI_Get_BalanceBeamStates) == 0x000001, "Wrong alignment on BPI_Locomotion_GroundState_C_BPI_Get_BalanceBeamStates");
static_assert(sizeof(BPI_Locomotion_GroundState_C_BPI_Get_BalanceBeamStates) == 0x000003, "Wrong size on BPI_Locomotion_GroundState_C_BPI_Get_BalanceBeamStates");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_BalanceBeamStates, CanMoveOnValidInput) == 0x000000, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_BalanceBeamStates::CanMoveOnValidInput' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_BalanceBeamStates, IsEnterTowardSideOfBeam) == 0x000001, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_BalanceBeamStates::IsEnterTowardSideOfBeam' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_GroundState_C_BPI_Get_BalanceBeamStates, IsCurInputValid) == 0x000002, "Member 'BPI_Locomotion_GroundState_C_BPI_Get_BalanceBeamStates::IsCurInputValid' has a wrong offset!");

}

