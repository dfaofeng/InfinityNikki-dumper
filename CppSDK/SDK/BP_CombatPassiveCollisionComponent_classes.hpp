#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CombatPassiveCollisionComponent

#include "Basic.hpp"

#include "ECombatPassiveCollisionType_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "X6Game_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CombatPassiveCollisionComponent.BP_CombatPassiveCollisionComponent_C
// 0x0070 (0x0670 - 0x0600)
class UBP_CombatPassiveCollisionComponent_C final : public UX6CombatCapsuleComponent
{
public:
	class UClass*                                 DamageType;                                        // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        DamageInterval;                                    // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnable;                                          // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EntryPain;                                         // 0x0611(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_612[0x6];                                      // 0x0612(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GroupName;                                         // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	double                                        GroupDamageInterval;                               // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECombatPassiveCollisionType                   CollisionType;                                     // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_631[0x7];                                      // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 MeshArray;                                         // 0x0638(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          ApplySelfHit;                                      // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_649[0x7];                                      // 0x0649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TargetHasTags;                                     // 0x0650(0x0020)(Edit, BlueprintVisible)

public:
	void SetEnableByAnimNotify();
	void ResetEnableByAnimNotify(bool Enable);
	void BP_SetSingleComponentForDamage(class UActorComponent* TargetComponent);
	void BP_SetEnable(bool Enable);
	void BP_SetCustomCollisionForDamage(class UShapeComponent* CollisionComponent);
	void BP_AddMeshCollisionForDamage(class UMeshComponent* MeshComp);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CombatPassiveCollisionComponent_C">();
	}
	static class UBP_CombatPassiveCollisionComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CombatPassiveCollisionComponent_C>();
	}
};
static_assert(alignof(UBP_CombatPassiveCollisionComponent_C) == 0x000010, "Wrong alignment on UBP_CombatPassiveCollisionComponent_C");
static_assert(sizeof(UBP_CombatPassiveCollisionComponent_C) == 0x000670, "Wrong size on UBP_CombatPassiveCollisionComponent_C");
static_assert(offsetof(UBP_CombatPassiveCollisionComponent_C, DamageType) == 0x000600, "Member 'UBP_CombatPassiveCollisionComponent_C::DamageType' has a wrong offset!");
static_assert(offsetof(UBP_CombatPassiveCollisionComponent_C, DamageInterval) == 0x000608, "Member 'UBP_CombatPassiveCollisionComponent_C::DamageInterval' has a wrong offset!");
static_assert(offsetof(UBP_CombatPassiveCollisionComponent_C, IsEnable) == 0x000610, "Member 'UBP_CombatPassiveCollisionComponent_C::IsEnable' has a wrong offset!");
static_assert(offsetof(UBP_CombatPassiveCollisionComponent_C, EntryPain) == 0x000611, "Member 'UBP_CombatPassiveCollisionComponent_C::EntryPain' has a wrong offset!");
static_assert(offsetof(UBP_CombatPassiveCollisionComponent_C, GroupName) == 0x000618, "Member 'UBP_CombatPassiveCollisionComponent_C::GroupName' has a wrong offset!");
static_assert(offsetof(UBP_CombatPassiveCollisionComponent_C, GroupDamageInterval) == 0x000628, "Member 'UBP_CombatPassiveCollisionComponent_C::GroupDamageInterval' has a wrong offset!");
static_assert(offsetof(UBP_CombatPassiveCollisionComponent_C, CollisionType) == 0x000630, "Member 'UBP_CombatPassiveCollisionComponent_C::CollisionType' has a wrong offset!");
static_assert(offsetof(UBP_CombatPassiveCollisionComponent_C, MeshArray) == 0x000638, "Member 'UBP_CombatPassiveCollisionComponent_C::MeshArray' has a wrong offset!");
static_assert(offsetof(UBP_CombatPassiveCollisionComponent_C, ApplySelfHit) == 0x000648, "Member 'UBP_CombatPassiveCollisionComponent_C::ApplySelfHit' has a wrong offset!");
static_assert(offsetof(UBP_CombatPassiveCollisionComponent_C, TargetHasTags) == 0x000650, "Member 'UBP_CombatPassiveCollisionComponent_C::TargetHasTags' has a wrong offset!");

}

