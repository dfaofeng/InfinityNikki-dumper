#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MultiPlayerGroupMovementComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower
// 0x0010 (0x0010 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower final
{
public:
	double                                        MaximumDistanceBetweenLeaderAndFollower;           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower) == 0x000008, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower) == 0x000010, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower, MaximumDistanceBetweenLeaderAndFollower) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower::MaximumDistanceBetweenLeaderAndFollower' has a wrong offset!");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_Get_BP_MaximumDistanceBetweenLeaderAndFollower::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_CurrentTargetWorldAnchorPointTransform
// 0x0060 (0x0060 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_Get_CurrentTargetWorldAnchorPointTransform final
{
public:
	struct FTransform                             BP_CurrentTargetWorldAnchorPointTransform_0;       // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_CurrentTargetWorldAnchorPointTransform) == 0x000010, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_Get_CurrentTargetWorldAnchorPointTransform");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_CurrentTargetWorldAnchorPointTransform) == 0x000060, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_Get_CurrentTargetWorldAnchorPointTransform");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_CurrentTargetWorldAnchorPointTransform, BP_CurrentTargetWorldAnchorPointTransform_0) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_Get_CurrentTargetWorldAnchorPointTransform::BP_CurrentTargetWorldAnchorPointTransform_0' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_FollowerEntityId
// 0x0008 (0x0008 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_Get_FollowerEntityId final
{
public:
	int64                                         Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_FollowerEntityId) == 0x000008, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_Get_FollowerEntityId");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_FollowerEntityId) == 0x000008, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_Get_FollowerEntityId");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_FollowerEntityId, Ret) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_Get_FollowerEntityId::Ret' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_IsHoldingHands
// 0x0001 (0x0001 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingHands final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingHands) == 0x000001, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingHands");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingHands) == 0x000001, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingHands");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingHands, Ret) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingHands::Ret' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_IsHoldingRightHandOrLeftHand
// 0x0001 (0x0001 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingRightHandOrLeftHand final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingRightHandOrLeftHand) == 0x000001, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingRightHandOrLeftHand");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingRightHandOrLeftHand) == 0x000001, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingRightHandOrLeftHand");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingRightHandOrLeftHand, Ret) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsHoldingRightHandOrLeftHand::Ret' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_IsLeaderOrFollower
// 0x0001 (0x0001 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsLeaderOrFollower final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsLeaderOrFollower) == 0x000001, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsLeaderOrFollower");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsLeaderOrFollower) == 0x000001, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsLeaderOrFollower");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsLeaderOrFollower, Ret) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_Get_IsLeaderOrFollower::Ret' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_LeaderEntityId
// 0x0008 (0x0008 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_Get_LeaderEntityId final
{
public:
	int64                                         Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_LeaderEntityId) == 0x000008, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_Get_LeaderEntityId");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_LeaderEntityId) == 0x000008, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_Get_LeaderEntityId");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_LeaderEntityId, Ret) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_Get_LeaderEntityId::Ret' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_Get_OtherCharacterToBeingHeldHand
// 0x0008 (0x0008 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_Get_OtherCharacterToBeingHeldHand final
{
public:
	class AActor*                                 Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_OtherCharacterToBeingHeldHand) == 0x000008, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_Get_OtherCharacterToBeingHeldHand");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_OtherCharacterToBeingHeldHand) == 0x000008, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_Get_OtherCharacterToBeingHeldHand");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_Get_OtherCharacterToBeingHeldHand, Ret) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_Get_OtherCharacterToBeingHeldHand::Ret' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_SetEnableGroupConstraints
// 0x0001 (0x0001 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableGroupConstraints final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableGroupConstraints) == 0x000001, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableGroupConstraints");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableGroupConstraints) == 0x000001, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableGroupConstraints");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableGroupConstraints, bEnable) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableGroupConstraints::bEnable' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_SetEnableHoldingHandsIK
// 0x0001 (0x0001 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableHoldingHandsIK final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableHoldingHandsIK) == 0x000001, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableHoldingHandsIK");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableHoldingHandsIK) == 0x000001, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableHoldingHandsIK");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableHoldingHandsIK, bEnable) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableHoldingHandsIK::bEnable' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_SetEnableWeaklyholdingHandsMoving
// 0x0001 (0x0001 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableWeaklyholdingHandsMoving final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableWeaklyholdingHandsMoving) == 0x000001, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableWeaklyholdingHandsMoving");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableWeaklyholdingHandsMoving) == 0x000001, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableWeaklyholdingHandsMoving");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableWeaklyholdingHandsMoving, bEnable) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_SetEnableWeaklyholdingHandsMoving::bEnable' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_SetFollowerGravityScale
// 0x0008 (0x0008 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerGravityScale final
{
public:
	double                                        GravityValue;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerGravityScale) == 0x000008, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerGravityScale");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerGravityScale) == 0x000008, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerGravityScale");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerGravityScale, GravityValue) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerGravityScale::GravityValue' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_SetFollowerWalkRelativeLocation
// 0x0020 (0x0020 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerWalkRelativeLocation final
{
public:
	bool                                          bLeftLocation;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewRelativeLocation;                               // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerWalkRelativeLocation) == 0x000008, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerWalkRelativeLocation");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerWalkRelativeLocation) == 0x000020, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerWalkRelativeLocation");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerWalkRelativeLocation, bLeftLocation) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerWalkRelativeLocation::bLeftLocation' has a wrong offset!");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerWalkRelativeLocation, NewRelativeLocation) == 0x000008, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_SetFollowerWalkRelativeLocation::NewRelativeLocation' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_TryHoldingHandsWithOthers
// 0x0018 (0x0018 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers final
{
public:
	bool                                          bSelfIsLeader;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             OtherCharacter;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers) == 0x000008, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers) == 0x000018, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers, bSelfIsLeader) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers::bSelfIsLeader' has a wrong offset!");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers, OtherCharacter) == 0x000008, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers::OtherCharacter' has a wrong offset!");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers, Ret) == 0x000010, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthers::Ret' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_TryHoldingHandsWithOthersByEntityId
// 0x0018 (0x0018 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId final
{
public:
	bool                                          bSelfIsLeader;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         OtherCharacterEntityId;                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId) == 0x000008, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId) == 0x000018, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId, bSelfIsLeader) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId::bSelfIsLeader' has a wrong offset!");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId, OtherCharacterEntityId) == 0x000008, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId::OtherCharacterEntityId' has a wrong offset!");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId, Ret) == 0x000010, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_TryHoldingHandsWithOthersByEntityId::Ret' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.BP_UpdateHoldingHandsConnectionNiagaraParams
// 0x0002 (0x0002 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_BP_UpdateHoldingHandsConnectionNiagaraParams final
{
public:
	bool                                          bIsLeaderOrFollower;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRightHandOrLeftHand;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_BP_UpdateHoldingHandsConnectionNiagaraParams) == 0x000001, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_BP_UpdateHoldingHandsConnectionNiagaraParams");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_BP_UpdateHoldingHandsConnectionNiagaraParams) == 0x000002, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_BP_UpdateHoldingHandsConnectionNiagaraParams");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_UpdateHoldingHandsConnectionNiagaraParams, bIsLeaderOrFollower) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_UpdateHoldingHandsConnectionNiagaraParams::bIsLeaderOrFollower' has a wrong offset!");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_BP_UpdateHoldingHandsConnectionNiagaraParams, bRightHandOrLeftHand) == 0x000001, "Member 'BP_MultiPlayerGroupMovementComponent_C_BP_UpdateHoldingHandsConnectionNiagaraParams::bRightHandOrLeftHand' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent
// 0x000C (0x000C - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent) == 0x000004, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent) == 0x00000C, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent, EntryPoint) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent, K2Node_Event_EndPlayReason) == 0x000004, "Member 'BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_MultiPlayerGroupMovementComponent_C_ExecuteUbergraph_BP_MultiPlayerGroupMovementComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_ReceiveEndPlay");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_ReceiveEndPlay");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_ReceiveTick");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_ReceiveTick");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_MultiPlayerGroupMovementComponent.BP_MultiPlayerGroupMovementComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_MultiPlayerGroupMovementComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiPlayerGroupMovementComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_MultiPlayerGroupMovementComponent_C_GetModuleName");
static_assert(sizeof(BP_MultiPlayerGroupMovementComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_MultiPlayerGroupMovementComponent_C_GetModuleName");
static_assert(offsetof(BP_MultiPlayerGroupMovementComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_MultiPlayerGroupMovementComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

