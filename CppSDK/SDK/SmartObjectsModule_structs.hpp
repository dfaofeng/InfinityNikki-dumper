#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SmartObjectsModule

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "PropertyBindingUtils_structs.hpp"
#include "WorldConditions_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "StructUtils_structs.hpp"


namespace SDK
{

// Enum SmartObjectsModule.ESmartObjectChangeReason
// NumValues: 0x000E
enum class ESmartObjectChangeReason : uint8
{
	None                                     = 0,
	OnEvent                                  = 1,
	OnTagAdded                               = 2,
	OnTagRemoved                             = 3,
	OnClaimed                                = 4,
	OnOccupied                               = 5,
	OnReleased                               = 6,
	OnSlotEnabled                            = 7,
	OnSlotDisabled                           = 8,
	OnObjectEnabled                          = 9,
	OnObjectDisabled                         = 10,
	OnComponentBound                         = 11,
	OnComponentUnbound                       = 12,
	ESmartObjectChangeReason_MAX             = 13,
};

// Enum SmartObjectsModule.ESmartObjectEntrancePriority
// NumValues: 0x000B
enum class ESmartObjectEntrancePriority : uint8
{
	Lowest                                   = 0,
	Lower                                    = 1,
	Low                                      = 2,
	BelowNormal                              = 3,
	Normal                                   = 4,
	AboveNormal                              = 5,
	High                                     = 6,
	Higher                                   = 7,
	Highest                                  = 8,
	MIN                                      = 0,
	MAX                                      = 8,
};

// Enum SmartObjectsModule.ESmartObjectSlotShape
// NumValues: 0x0003
enum class ESmartObjectSlotShape : uint8
{
	Circle                                   = 0,
	Rectangle                                = 1,
	ESmartObjectSlotShape_MAX                = 2,
};

// Enum SmartObjectsModule.ESmartObjectSlotState
// NumValues: 0x0006
enum class ESmartObjectSlotState : uint8
{
	Invalid                                  = 0,
	Free                                     = 1,
	Claimed                                  = 2,
	Occupied                                 = 3,
	Disabled                                 = 4,
	ESmartObjectSlotState_MAX                = 5,
};

// Enum SmartObjectsModule.ETrySpawnActorIfDehydrated
// NumValues: 0x0003
enum class ETrySpawnActorIfDehydrated : uint8
{
	No                                       = 0,
	Yes                                      = 1,
	ETrySpawnActorIfDehydrated_MAX           = 2,
};

// Enum SmartObjectsModule.FSmartObjectSlotEntrySelectionMethod
// NumValues: 0x0003
enum class EFSmartObjectSlotEntrySelectionMethod : uint8
{
	First                                    = 0,
	NearestToSearchLocation                  = 1,
	FSmartObjectSlotEntrySelectionMethod_MAX = 2,
};

// Enum SmartObjectsModule.ESmartObjectCollectionRegistrationResult
// NumValues: 0x0005
enum class ESmartObjectCollectionRegistrationResult : uint8
{
	Failed_InvalidCollection                 = 0,
	Failed_AlreadyRegistered                 = 1,
	Failed_NotFromPersistentLevel            = 2,
	Succeeded                                = 3,
	ESmartObjectCollectionRegistrationResult_MAX = 4,
};

// Enum SmartObjectsModule.ESmartObjectTagMergingPolicy
// NumValues: 0x0003
enum class ESmartObjectTagMergingPolicy : uint8
{
	Combine                                  = 0,
	Override                                 = 1,
	ESmartObjectTagMergingPolicy_MAX         = 2,
};

// Enum SmartObjectsModule.ESmartObjectTagFilteringPolicy
// NumValues: 0x0004
enum class ESmartObjectTagFilteringPolicy : uint8
{
	NoFilter                                 = 0,
	Combine                                  = 1,
	Override                                 = 2,
	ESmartObjectTagFilteringPolicy_MAX       = 3,
};

// Enum SmartObjectsModule.ESmartObjectSlotNavigationLocationType
// NumValues: 0x0003
enum class ESmartObjectSlotNavigationLocationType : uint8
{
	Entry                                    = 0,
	Exit                                     = 1,
	ESmartObjectSlotNavigationLocationType_MAX = 2,
};

// Enum SmartObjectsModule.ESmartObjectClaimPriority
// NumValues: 0x0008
enum class ESmartObjectClaimPriority : uint8
{
	None                                     = 0,
	Low                                      = 1,
	BelowNormal                              = 2,
	Normal                                   = 3,
	AboveNormal                              = 4,
	High                                     = 5,
	MIN                                      = 0,
	MAX                                      = 5,
};

// Enum SmartObjectsModule.ESmartObjectTraceType
// NumValues: 0x0004
enum class ESmartObjectTraceType : uint8
{
	ByChannel                                = 0,
	ByProfile                                = 1,
	ByObjectTypes                            = 2,
	ESmartObjectTraceType_MAX                = 3,
};

// ScriptStruct SmartObjectsModule.SmartObjectUserCapsuleParams
// 0x000C (0x000C - 0x0000)
struct FSmartObjectUserCapsuleParams final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepHeight;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectUserCapsuleParams) == 0x000004, "Wrong alignment on FSmartObjectUserCapsuleParams");
static_assert(sizeof(FSmartObjectUserCapsuleParams) == 0x00000C, "Wrong size on FSmartObjectUserCapsuleParams");
static_assert(offsetof(FSmartObjectUserCapsuleParams, Radius) == 0x000000, "Member 'FSmartObjectUserCapsuleParams::Radius' has a wrong offset!");
static_assert(offsetof(FSmartObjectUserCapsuleParams, Height) == 0x000004, "Member 'FSmartObjectUserCapsuleParams::Height' has a wrong offset!");
static_assert(offsetof(FSmartObjectUserCapsuleParams, StepHeight) == 0x000008, "Member 'FSmartObjectUserCapsuleParams::StepHeight' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectHandle
// 0x0008 (0x0008 - 0x0000)
struct FSmartObjectHandle final
{
public:
	uint64                                        ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSmartObjectHandle) == 0x000008, "Wrong alignment on FSmartObjectHandle");
static_assert(sizeof(FSmartObjectHandle) == 0x000008, "Wrong size on FSmartObjectHandle");
static_assert(offsetof(FSmartObjectHandle, ID) == 0x000000, "Member 'FSmartObjectHandle::ID' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSmartObjectSlotHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSlotHandle) == 0x000008, "Wrong alignment on FSmartObjectSlotHandle");
static_assert(sizeof(FSmartObjectSlotHandle) == 0x000010, "Wrong size on FSmartObjectSlotHandle");

// ScriptStruct SmartObjectsModule.SmartObjectEventData
// 0x0038 (0x0038 - 0x0000)
struct FSmartObjectEventData final
{
public:
	struct FSmartObjectHandle                     SmartObjectHandle;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectSlotHandle                 SlotHandle;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESmartObjectChangeReason                      Reason;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tag;                                               // 0x001C(0x0008)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x14];                                      // 0x0024(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectEventData) == 0x000008, "Wrong alignment on FSmartObjectEventData");
static_assert(sizeof(FSmartObjectEventData) == 0x000038, "Wrong size on FSmartObjectEventData");
static_assert(offsetof(FSmartObjectEventData, SmartObjectHandle) == 0x000000, "Member 'FSmartObjectEventData::SmartObjectHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectEventData, SlotHandle) == 0x000008, "Member 'FSmartObjectEventData::SlotHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectEventData, Reason) == 0x000018, "Member 'FSmartObjectEventData::Reason' has a wrong offset!");
static_assert(offsetof(FSmartObjectEventData, Tag) == 0x00001C, "Member 'FSmartObjectEventData::Tag' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectWorldConditionBase
// 0x0000 (0x0010 - 0x0010)
struct FSmartObjectWorldConditionBase : public FWorldConditionBase
{
};
static_assert(alignof(FSmartObjectWorldConditionBase) == 0x000008, "Wrong alignment on FSmartObjectWorldConditionBase");
static_assert(sizeof(FSmartObjectWorldConditionBase) == 0x000010, "Wrong size on FSmartObjectWorldConditionBase");

// ScriptStruct SmartObjectsModule.SmartObjectDefinitionData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSmartObjectDefinitionData
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectDefinitionData) == 0x000008, "Wrong alignment on FSmartObjectDefinitionData");
static_assert(sizeof(FSmartObjectDefinitionData) == 0x000008, "Wrong size on FSmartObjectDefinitionData");

// ScriptStruct SmartObjectsModule.SmartObjectSlotAnnotation
// 0x0000 (0x0008 - 0x0008)
struct FSmartObjectSlotAnnotation : public FSmartObjectDefinitionData
{
};
static_assert(alignof(FSmartObjectSlotAnnotation) == 0x000008, "Wrong alignment on FSmartObjectSlotAnnotation");
static_assert(sizeof(FSmartObjectSlotAnnotation) == 0x000008, "Wrong size on FSmartObjectSlotAnnotation");

// ScriptStruct SmartObjectsModule.SmartObjectAnnotation_SlotUserCollision
// 0x0010 (0x0018 - 0x0008)
struct FSmartObjectAnnotation_SlotUserCollision final : public FSmartObjectSlotAnnotation
{
public:
	bool                                          bUseUserCapsuleSize;                               // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSmartObjectUserCapsuleParams          Capsule;                                           // 0x000C(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectAnnotation_SlotUserCollision) == 0x000008, "Wrong alignment on FSmartObjectAnnotation_SlotUserCollision");
static_assert(sizeof(FSmartObjectAnnotation_SlotUserCollision) == 0x000018, "Wrong size on FSmartObjectAnnotation_SlotUserCollision");
static_assert(offsetof(FSmartObjectAnnotation_SlotUserCollision, bUseUserCapsuleSize) == 0x000008, "Member 'FSmartObjectAnnotation_SlotUserCollision::bUseUserCapsuleSize' has a wrong offset!");
static_assert(offsetof(FSmartObjectAnnotation_SlotUserCollision, Capsule) == 0x00000C, "Member 'FSmartObjectAnnotation_SlotUserCollision::Capsule' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotEntranceAnnotation
// 0x0048 (0x0050 - 0x0008)
struct FSmartObjectSlotEntranceAnnotation final : public FSmartObjectSlotAnnotation
{
public:
	struct FVector3f                              Offset;                                            // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator3f                             Rotation;                                          // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	uint8                                         bIsEntry : 1;                                      // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsExit : 1;                                       // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTraceGroundLocation : 1;                          // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCheckTransitionTrajectory : 1;                    // 0x0040(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ESmartObjectEntrancePriority                  SelectionPriority;                                 // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrajectoryStartHeightOffset;                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrajectorySlotHeightOffset;                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionCheckRadius;                             // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectSlotEntranceAnnotation) == 0x000008, "Wrong alignment on FSmartObjectSlotEntranceAnnotation");
static_assert(sizeof(FSmartObjectSlotEntranceAnnotation) == 0x000050, "Wrong size on FSmartObjectSlotEntranceAnnotation");
static_assert(offsetof(FSmartObjectSlotEntranceAnnotation, Offset) == 0x000008, "Member 'FSmartObjectSlotEntranceAnnotation::Offset' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceAnnotation, Rotation) == 0x000014, "Member 'FSmartObjectSlotEntranceAnnotation::Rotation' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceAnnotation, Tags) == 0x000020, "Member 'FSmartObjectSlotEntranceAnnotation::Tags' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceAnnotation, SelectionPriority) == 0x000041, "Member 'FSmartObjectSlotEntranceAnnotation::SelectionPriority' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceAnnotation, TrajectoryStartHeightOffset) == 0x000044, "Member 'FSmartObjectSlotEntranceAnnotation::TrajectoryStartHeightOffset' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceAnnotation, TrajectorySlotHeightOffset) == 0x000048, "Member 'FSmartObjectSlotEntranceAnnotation::TrajectorySlotHeightOffset' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceAnnotation, TransitionCheckRadius) == 0x00004C, "Member 'FSmartObjectSlotEntranceAnnotation::TransitionCheckRadius' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotReference
// 0x0001 (0x0001 - 0x0000)
struct FSmartObjectSlotReference final
{
public:
	uint8                                         Index;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSmartObjectSlotReference) == 0x000001, "Wrong alignment on FSmartObjectSlotReference");
static_assert(sizeof(FSmartObjectSlotReference) == 0x000001, "Wrong size on FSmartObjectSlotReference");
static_assert(offsetof(FSmartObjectSlotReference, Index) == 0x000000, "Member 'FSmartObjectSlotReference::Index' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotLinkAnnotation
// 0x0010 (0x0018 - 0x0008)
struct FSmartObjectSlotLinkAnnotation final : public FSmartObjectSlotAnnotation
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectSlotReference              LinkedSlot;                                        // 0x0010(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSlotLinkAnnotation) == 0x000008, "Wrong alignment on FSmartObjectSlotLinkAnnotation");
static_assert(sizeof(FSmartObjectSlotLinkAnnotation) == 0x000018, "Wrong size on FSmartObjectSlotLinkAnnotation");
static_assert(offsetof(FSmartObjectSlotLinkAnnotation, Tag) == 0x000008, "Member 'FSmartObjectSlotLinkAnnotation::Tag' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotLinkAnnotation, LinkedSlot) == 0x000010, "Member 'FSmartObjectSlotLinkAnnotation::LinkedSlot' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectDefinitionReference
// 0x0028 (0x0028 - 0x0000)
struct FSmartObjectDefinitionReference final
{
public:
	class USmartObjectDefinition*                 SmartObjectDefinition;                             // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FInstancedPropertyBag                  Parameters;                                        // 0x0008(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGuid>                          PropertyOverrides;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectDefinitionReference) == 0x000008, "Wrong alignment on FSmartObjectDefinitionReference");
static_assert(sizeof(FSmartObjectDefinitionReference) == 0x000028, "Wrong size on FSmartObjectDefinitionReference");
static_assert(offsetof(FSmartObjectDefinitionReference, SmartObjectDefinition) == 0x000000, "Member 'FSmartObjectDefinitionReference::SmartObjectDefinition' has a wrong offset!");
static_assert(offsetof(FSmartObjectDefinitionReference, Parameters) == 0x000008, "Member 'FSmartObjectDefinitionReference::Parameters' has a wrong offset!");
static_assert(offsetof(FSmartObjectDefinitionReference, PropertyOverrides) == 0x000018, "Member 'FSmartObjectDefinitionReference::PropertyOverrides' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectComponentInstanceData
// 0x0028 (0x0090 - 0x0068)
struct FSmartObjectComponentInstanceData final : public FActorComponentInstanceData
{
public:
	struct FSmartObjectDefinitionReference        SmartObjectDefinitionRef;                          // 0x0068(0x0028)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectComponentInstanceData) == 0x000008, "Wrong alignment on FSmartObjectComponentInstanceData");
static_assert(sizeof(FSmartObjectComponentInstanceData) == 0x000090, "Wrong size on FSmartObjectComponentInstanceData");
static_assert(offsetof(FSmartObjectComponentInstanceData, SmartObjectDefinitionRef) == 0x000068, "Member 'FSmartObjectComponentInstanceData::SmartObjectDefinitionRef' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectDefinitionDataProxy
// 0x0010 (0x0010 - 0x0000)
struct FSmartObjectDefinitionDataProxy final
{
public:
	struct FInstancedStruct                       Data;                                              // 0x0000(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectDefinitionDataProxy) == 0x000008, "Wrong alignment on FSmartObjectDefinitionDataProxy");
static_assert(sizeof(FSmartObjectDefinitionDataProxy) == 0x000010, "Wrong size on FSmartObjectDefinitionDataProxy");
static_assert(offsetof(FSmartObjectDefinitionDataProxy, Data) == 0x000000, "Member 'FSmartObjectDefinitionDataProxy::Data' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotDefinition
// 0x00E0 (0x00E0 - 0x0000)
struct FSmartObjectSlotDefinition final
{
public:
	struct FVector3f                              Offset;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator3f                             Rotation;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      UserTagFilter;                                     // 0x0020(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivityTags;                                      // 0x0068(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RuntimeTags;                                       // 0x0088(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FWorldConditionQueryDefinition         SelectionPreconditions;                            // 0x00A8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class USmartObjectBehaviorDefinition*> BehaviorDefinitions;                               // 0x00C0(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FSmartObjectDefinitionDataProxy> DefinitionData;                                   // 0x00D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectSlotDefinition) == 0x000008, "Wrong alignment on FSmartObjectSlotDefinition");
static_assert(sizeof(FSmartObjectSlotDefinition) == 0x0000E0, "Wrong size on FSmartObjectSlotDefinition");
static_assert(offsetof(FSmartObjectSlotDefinition, Offset) == 0x000000, "Member 'FSmartObjectSlotDefinition::Offset' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, Rotation) == 0x00000C, "Member 'FSmartObjectSlotDefinition::Rotation' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, bEnabled) == 0x000018, "Member 'FSmartObjectSlotDefinition::bEnabled' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, UserTagFilter) == 0x000020, "Member 'FSmartObjectSlotDefinition::UserTagFilter' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, ActivityTags) == 0x000068, "Member 'FSmartObjectSlotDefinition::ActivityTags' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, RuntimeTags) == 0x000088, "Member 'FSmartObjectSlotDefinition::RuntimeTags' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, SelectionPreconditions) == 0x0000A8, "Member 'FSmartObjectSlotDefinition::SelectionPreconditions' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, BehaviorDefinitions) == 0x0000C0, "Member 'FSmartObjectSlotDefinition::BehaviorDefinitions' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotDefinition, DefinitionData) == 0x0000D0, "Member 'FSmartObjectSlotDefinition::DefinitionData' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectDefinitionPreviewData
// 0x0098 (0x0098 - 0x0000)
struct FSmartObjectDefinitionPreviewData final
{
public:
	TSoftClassPtr<class UClass>                   ObjectActorClass;                                  // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ObjectMeshPath;                                    // 0x0028(0x0020)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   UserActorClass;                                    // 0x0048(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   UserValidationFilterClass;                         // 0x0070(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectDefinitionPreviewData) == 0x000008, "Wrong alignment on FSmartObjectDefinitionPreviewData");
static_assert(sizeof(FSmartObjectDefinitionPreviewData) == 0x000098, "Wrong size on FSmartObjectDefinitionPreviewData");
static_assert(offsetof(FSmartObjectDefinitionPreviewData, ObjectActorClass) == 0x000000, "Member 'FSmartObjectDefinitionPreviewData::ObjectActorClass' has a wrong offset!");
static_assert(offsetof(FSmartObjectDefinitionPreviewData, ObjectMeshPath) == 0x000028, "Member 'FSmartObjectDefinitionPreviewData::ObjectMeshPath' has a wrong offset!");
static_assert(offsetof(FSmartObjectDefinitionPreviewData, UserActorClass) == 0x000048, "Member 'FSmartObjectDefinitionPreviewData::UserActorClass' has a wrong offset!");
static_assert(offsetof(FSmartObjectDefinitionPreviewData, UserValidationFilterClass) == 0x000070, "Member 'FSmartObjectDefinitionPreviewData::UserValidationFilterClass' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectDefinitionDataHandle
// 0x0004 (0x0004 - 0x0000)
struct FSmartObjectDefinitionDataHandle final
{
public:
	uint16                                        SlotIndex;                                         // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint16                                        DataIndex;                                         // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectDefinitionDataHandle) == 0x000002, "Wrong alignment on FSmartObjectDefinitionDataHandle");
static_assert(sizeof(FSmartObjectDefinitionDataHandle) == 0x000004, "Wrong size on FSmartObjectDefinitionDataHandle");
static_assert(offsetof(FSmartObjectDefinitionDataHandle, SlotIndex) == 0x000000, "Member 'FSmartObjectDefinitionDataHandle::SlotIndex' has a wrong offset!");
static_assert(offsetof(FSmartObjectDefinitionDataHandle, DataIndex) == 0x000002, "Member 'FSmartObjectDefinitionDataHandle::DataIndex' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectDefinitionPropertyBinding
// 0x0028 (0x0028 - 0x0000)
struct FSmartObjectDefinitionPropertyBinding final
{
public:
	struct FPropertyBindingPath                   SourcePath;                                        // 0x0000(0x0010)(Protected, NativeAccessSpecifierProtected)
	struct FPropertyBindingPath                   TargetPath;                                        // 0x0010(0x0010)(Protected, NativeAccessSpecifierProtected)
	struct FSmartObjectDefinitionDataHandle       SourceDataHandle;                                  // 0x0020(0x0004)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSmartObjectDefinitionDataHandle       TargetDataHandle;                                  // 0x0024(0x0004)(NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectDefinitionPropertyBinding) == 0x000008, "Wrong alignment on FSmartObjectDefinitionPropertyBinding");
static_assert(sizeof(FSmartObjectDefinitionPropertyBinding) == 0x000028, "Wrong size on FSmartObjectDefinitionPropertyBinding");
static_assert(offsetof(FSmartObjectDefinitionPropertyBinding, SourcePath) == 0x000000, "Member 'FSmartObjectDefinitionPropertyBinding::SourcePath' has a wrong offset!");
static_assert(offsetof(FSmartObjectDefinitionPropertyBinding, TargetPath) == 0x000010, "Member 'FSmartObjectDefinitionPropertyBinding::TargetPath' has a wrong offset!");
static_assert(offsetof(FSmartObjectDefinitionPropertyBinding, SourceDataHandle) == 0x000020, "Member 'FSmartObjectDefinitionPropertyBinding::SourceDataHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectDefinitionPropertyBinding, TargetDataHandle) == 0x000024, "Member 'FSmartObjectDefinitionPropertyBinding::TargetDataHandle' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSpatialEntryData
// 0x0001 (0x0001 - 0x0000)
struct FSmartObjectSpatialEntryData
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSpatialEntryData) == 0x000001, "Wrong alignment on FSmartObjectSpatialEntryData");
static_assert(sizeof(FSmartObjectSpatialEntryData) == 0x000001, "Wrong size on FSmartObjectSpatialEntryData");

// ScriptStruct SmartObjectsModule.SmartObjectHashGridEntryData
// 0x000B (0x000C - 0x0001)
struct alignas(0x04) FSmartObjectHashGridEntryData final : public FSmartObjectSpatialEntryData
{
public:
	uint8                                         Pad_1[0xB];                                        // 0x0001(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectHashGridEntryData) == 0x000004, "Wrong alignment on FSmartObjectHashGridEntryData");
static_assert(sizeof(FSmartObjectHashGridEntryData) == 0x00000C, "Wrong size on FSmartObjectHashGridEntryData");

// ScriptStruct SmartObjectsModule.SmartObjectOctreeEntryData
// 0x000F (0x0010 - 0x0001)
struct alignas(0x08) FSmartObjectOctreeEntryData final : public FSmartObjectSpatialEntryData
{
public:
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectOctreeEntryData) == 0x000008, "Wrong alignment on FSmartObjectOctreeEntryData");
static_assert(sizeof(FSmartObjectOctreeEntryData) == 0x000010, "Wrong size on FSmartObjectOctreeEntryData");

// ScriptStruct SmartObjectsModule.SmartObjectCollectionEntry
// 0x00F0 (0x00F0 - 0x0000)
struct FSmartObjectCollectionEntry final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        Path;                                              // 0x0020(0x0020)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTransform                             Transform;                                         // 0x0040(0x0060)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox                                   Bounds;                                            // 0x00A0(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSmartObjectHandle                     Handle;                                            // 0x00D8(0x0008)(Edit, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        DefinitionIdx;                                     // 0x00E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectCollectionEntry) == 0x000010, "Wrong alignment on FSmartObjectCollectionEntry");
static_assert(sizeof(FSmartObjectCollectionEntry) == 0x0000F0, "Wrong size on FSmartObjectCollectionEntry");
static_assert(offsetof(FSmartObjectCollectionEntry, Tags) == 0x000000, "Member 'FSmartObjectCollectionEntry::Tags' has a wrong offset!");
static_assert(offsetof(FSmartObjectCollectionEntry, Path) == 0x000020, "Member 'FSmartObjectCollectionEntry::Path' has a wrong offset!");
static_assert(offsetof(FSmartObjectCollectionEntry, Transform) == 0x000040, "Member 'FSmartObjectCollectionEntry::Transform' has a wrong offset!");
static_assert(offsetof(FSmartObjectCollectionEntry, Bounds) == 0x0000A0, "Member 'FSmartObjectCollectionEntry::Bounds' has a wrong offset!");
static_assert(offsetof(FSmartObjectCollectionEntry, Handle) == 0x0000D8, "Member 'FSmartObjectCollectionEntry::Handle' has a wrong offset!");
static_assert(offsetof(FSmartObjectCollectionEntry, DefinitionIdx) == 0x0000E0, "Member 'FSmartObjectCollectionEntry::DefinitionIdx' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectContainer
// 0x00B0 (0x00B0 - 0x0000)
struct FSmartObjectContainer final
{
public:
	struct FBox                                   Bounds;                                            // 0x0000(0x0038)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSmartObjectCollectionEntry>    CollectionEntries;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TMap<struct FSmartObjectHandle, struct FSoftObjectPath> RegisteredIdToObjectMap;                 // 0x0048(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<class USmartObjectDefinition*>         Definitions;                                       // 0x0098(0x0010)(Edit, ZeroConstructor, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UObject*                                Owner;                                             // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectContainer) == 0x000008, "Wrong alignment on FSmartObjectContainer");
static_assert(sizeof(FSmartObjectContainer) == 0x0000B0, "Wrong size on FSmartObjectContainer");
static_assert(offsetof(FSmartObjectContainer, Bounds) == 0x000000, "Member 'FSmartObjectContainer::Bounds' has a wrong offset!");
static_assert(offsetof(FSmartObjectContainer, CollectionEntries) == 0x000038, "Member 'FSmartObjectContainer::CollectionEntries' has a wrong offset!");
static_assert(offsetof(FSmartObjectContainer, RegisteredIdToObjectMap) == 0x000048, "Member 'FSmartObjectContainer::RegisteredIdToObjectMap' has a wrong offset!");
static_assert(offsetof(FSmartObjectContainer, Definitions) == 0x000098, "Member 'FSmartObjectContainer::Definitions' has a wrong offset!");
static_assert(offsetof(FSmartObjectContainer, Owner) == 0x0000A8, "Member 'FSmartObjectContainer::Owner' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectUserHandle
// 0x0004 (0x0004 - 0x0000)
struct FSmartObjectUserHandle final
{
public:
	uint32                                        ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSmartObjectUserHandle) == 0x000004, "Wrong alignment on FSmartObjectUserHandle");
static_assert(sizeof(FSmartObjectUserHandle) == 0x000004, "Wrong size on FSmartObjectUserHandle");
static_assert(offsetof(FSmartObjectUserHandle, ID) == 0x000000, "Member 'FSmartObjectUserHandle::ID' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectClaimHandle
// 0x0020 (0x0020 - 0x0000)
struct FSmartObjectClaimHandle final
{
public:
	struct FSmartObjectHandle                     SmartObjectHandle;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectSlotHandle                 SlotHandle;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectUserHandle                 UserHandle;                                        // 0x0018(0x0004)(Edit, Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectClaimHandle) == 0x000008, "Wrong alignment on FSmartObjectClaimHandle");
static_assert(sizeof(FSmartObjectClaimHandle) == 0x000020, "Wrong size on FSmartObjectClaimHandle");
static_assert(offsetof(FSmartObjectClaimHandle, SmartObjectHandle) == 0x000000, "Member 'FSmartObjectClaimHandle::SmartObjectHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectClaimHandle, SlotHandle) == 0x000008, "Member 'FSmartObjectClaimHandle::SlotHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectClaimHandle, UserHandle) == 0x000018, "Member 'FSmartObjectClaimHandle::UserHandle' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectWorldConditionObjectTagQuery
// 0x0060 (0x0070 - 0x0010)
struct FSmartObjectWorldConditionObjectTagQuery final : public FSmartObjectWorldConditionBase
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0028(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectWorldConditionObjectTagQuery) == 0x000008, "Wrong alignment on FSmartObjectWorldConditionObjectTagQuery");
static_assert(sizeof(FSmartObjectWorldConditionObjectTagQuery) == 0x000070, "Wrong size on FSmartObjectWorldConditionObjectTagQuery");
static_assert(offsetof(FSmartObjectWorldConditionObjectTagQuery, TagQuery) == 0x000028, "Member 'FSmartObjectWorldConditionObjectTagQuery::TagQuery' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotStateData
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FSmartObjectSlotStateData
{
};
#pragma pack(pop)
static_assert(alignof(FSmartObjectSlotStateData) == 0x000001, "Wrong alignment on FSmartObjectSlotStateData");
static_assert(sizeof(FSmartObjectSlotStateData) == 0x000001, "Wrong size on FSmartObjectSlotStateData");

// ScriptStruct SmartObjectsModule.SmartObjectSlotTransform
// 0x0060 (0x0060 - 0x0000)
struct FSmartObjectSlotTransform final : public FSmartObjectSlotStateData
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectSlotTransform) == 0x000010, "Wrong alignment on FSmartObjectSlotTransform");
static_assert(sizeof(FSmartObjectSlotTransform) == 0x000060, "Wrong size on FSmartObjectSlotTransform");
static_assert(offsetof(FSmartObjectSlotTransform, Transform) == 0x000000, "Member 'FSmartObjectSlotTransform::Transform' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectRuntimeSlot
// 0x00A8 (0x00A8 - 0x0000)
struct FSmartObjectRuntimeSlot final
{
public:
	struct FVector3f                              Offset;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator3f                             Rotation;                                          // 0x000C(0x000C)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  Tags;                                              // 0x0018(0x0020)(Edit, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x30];                                      // 0x0038(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSmartObjectUserHandle                 User;                                              // 0x0068(0x0004)(Edit, Transient, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorldConditionQueryState              PreconditionState;                                 // 0x0070(0x0030)(Transient, Protected, NativeAccessSpecifierProtected)
	ESmartObjectSlotState                         State;                                             // 0x00A0(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESmartObjectClaimPriority                     ClaimedPriority;                                   // 0x00A1(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bSlotEnabled : 1;                                  // 0x00A2(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bObjectEnabled : 1;                                // 0x00A2(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectRuntimeSlot) == 0x000008, "Wrong alignment on FSmartObjectRuntimeSlot");
static_assert(sizeof(FSmartObjectRuntimeSlot) == 0x0000A8, "Wrong size on FSmartObjectRuntimeSlot");
static_assert(offsetof(FSmartObjectRuntimeSlot, Offset) == 0x000000, "Member 'FSmartObjectRuntimeSlot::Offset' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntimeSlot, Rotation) == 0x00000C, "Member 'FSmartObjectRuntimeSlot::Rotation' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntimeSlot, Tags) == 0x000018, "Member 'FSmartObjectRuntimeSlot::Tags' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntimeSlot, User) == 0x000068, "Member 'FSmartObjectRuntimeSlot::User' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntimeSlot, PreconditionState) == 0x000070, "Member 'FSmartObjectRuntimeSlot::PreconditionState' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntimeSlot, State) == 0x0000A0, "Member 'FSmartObjectRuntimeSlot::State' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntimeSlot, ClaimedPriority) == 0x0000A1, "Member 'FSmartObjectRuntimeSlot::ClaimedPriority' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectRuntime
// 0x0130 (0x0130 - 0x0000)
struct FSmartObjectRuntime final
{
public:
	struct FWorldConditionQueryState              PreconditionState;                                 // 0x0000(0x0030)(Transient, NativeAccessSpecifierPrivate)
	TArray<struct FSmartObjectRuntimeSlot>        Slots;                                             // 0x0030(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class USmartObjectDefinition*                 Definition;                                        // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class USmartObjectComponent>   OwnerComponent;                                    // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0060(0x0060)(Edit, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  Tags;                                              // 0x00C0(0x0020)(Edit, Transient, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x28];                                      // 0x00E0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSmartObjectHandle                     RegisteredHandle;                                  // 0x0108(0x0008)(Edit, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FInstancedStruct                       SpatialEntryData;                                  // 0x0110(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint16                                        DisableFlags;                                      // 0x0120(0x0002)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_122[0xE];                                      // 0x0122(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectRuntime) == 0x000010, "Wrong alignment on FSmartObjectRuntime");
static_assert(sizeof(FSmartObjectRuntime) == 0x000130, "Wrong size on FSmartObjectRuntime");
static_assert(offsetof(FSmartObjectRuntime, PreconditionState) == 0x000000, "Member 'FSmartObjectRuntime::PreconditionState' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntime, Slots) == 0x000030, "Member 'FSmartObjectRuntime::Slots' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntime, Definition) == 0x000040, "Member 'FSmartObjectRuntime::Definition' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntime, OwnerComponent) == 0x000048, "Member 'FSmartObjectRuntime::OwnerComponent' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntime, Transform) == 0x000060, "Member 'FSmartObjectRuntime::Transform' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntime, Tags) == 0x0000C0, "Member 'FSmartObjectRuntime::Tags' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntime, RegisteredHandle) == 0x000108, "Member 'FSmartObjectRuntime::RegisteredHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntime, SpatialEntryData) == 0x000110, "Member 'FSmartObjectRuntime::SpatialEntryData' has a wrong offset!");
static_assert(offsetof(FSmartObjectRuntime, DisableFlags) == 0x000120, "Member 'FSmartObjectRuntime::DisableFlags' has a wrong offset!");

// ScriptStruct SmartObjectsModule.WorldCondition_SmartObjectActorTagQuery
// 0x0058 (0x0068 - 0x0010)
struct FWorldCondition_SmartObjectActorTagQuery final : public FSmartObjectWorldConditionBase
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0020(0x0048)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldCondition_SmartObjectActorTagQuery) == 0x000008, "Wrong alignment on FWorldCondition_SmartObjectActorTagQuery");
static_assert(sizeof(FWorldCondition_SmartObjectActorTagQuery) == 0x000068, "Wrong size on FWorldCondition_SmartObjectActorTagQuery");
static_assert(offsetof(FWorldCondition_SmartObjectActorTagQuery, TagQuery) == 0x000020, "Member 'FWorldCondition_SmartObjectActorTagQuery::TagQuery' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotView
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSmartObjectSlotView final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSlotView) == 0x000008, "Wrong alignment on FSmartObjectSlotView");
static_assert(sizeof(FSmartObjectSlotView) == 0x000020, "Wrong size on FSmartObjectSlotView");

// ScriptStruct SmartObjectsModule.SmartObjectRequestFilter
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FSmartObjectRequestFilter final
{
public:
	class AActor*                                 UserActor;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UserTags;                                          // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESmartObjectClaimPriority                     ClaimPriority;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      ActivityRequirements;                              // 0x0030(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class USmartObjectBehaviorDefinition>> BehaviorDefinitionClasses;             // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bShouldEvaluateConditions;                         // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldIncludeClaimedSlots;                        // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldIncludeDisabledSlots;                       // 0x008A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B[0x65];                                      // 0x008B(0x0065)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectRequestFilter) == 0x000010, "Wrong alignment on FSmartObjectRequestFilter");
static_assert(sizeof(FSmartObjectRequestFilter) == 0x0000F0, "Wrong size on FSmartObjectRequestFilter");
static_assert(offsetof(FSmartObjectRequestFilter, UserActor) == 0x000000, "Member 'FSmartObjectRequestFilter::UserActor' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequestFilter, UserTags) == 0x000008, "Member 'FSmartObjectRequestFilter::UserTags' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequestFilter, ClaimPriority) == 0x000028, "Member 'FSmartObjectRequestFilter::ClaimPriority' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequestFilter, ActivityRequirements) == 0x000030, "Member 'FSmartObjectRequestFilter::ActivityRequirements' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequestFilter, BehaviorDefinitionClasses) == 0x000078, "Member 'FSmartObjectRequestFilter::BehaviorDefinitionClasses' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequestFilter, bShouldEvaluateConditions) == 0x000088, "Member 'FSmartObjectRequestFilter::bShouldEvaluateConditions' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequestFilter, bShouldIncludeClaimedSlots) == 0x000089, "Member 'FSmartObjectRequestFilter::bShouldIncludeClaimedSlots' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequestFilter, bShouldIncludeDisabledSlots) == 0x00008A, "Member 'FSmartObjectRequestFilter::bShouldIncludeDisabledSlots' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectRequest
// 0x0130 (0x0130 - 0x0000)
struct FSmartObjectRequest final
{
public:
	struct FBox                                   QueryBox;                                          // 0x0000(0x0038)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSmartObjectRequestFilter              Filter;                                            // 0x0040(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectRequest) == 0x000010, "Wrong alignment on FSmartObjectRequest");
static_assert(sizeof(FSmartObjectRequest) == 0x000130, "Wrong size on FSmartObjectRequest");
static_assert(offsetof(FSmartObjectRequest, QueryBox) == 0x000000, "Member 'FSmartObjectRequest::QueryBox' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequest, Filter) == 0x000040, "Member 'FSmartObjectRequest::Filter' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectRequestResult
// 0x0018 (0x0018 - 0x0000)
struct FSmartObjectRequestResult final
{
public:
	struct FSmartObjectHandle                     SmartObjectHandle;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectSlotHandle                 SlotHandle;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectRequestResult) == 0x000008, "Wrong alignment on FSmartObjectRequestResult");
static_assert(sizeof(FSmartObjectRequestResult) == 0x000018, "Wrong size on FSmartObjectRequestResult");
static_assert(offsetof(FSmartObjectRequestResult, SmartObjectHandle) == 0x000000, "Member 'FSmartObjectRequestResult::SmartObjectHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectRequestResult, SlotHandle) == 0x000008, "Member 'FSmartObjectRequestResult::SlotHandle' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotEntranceHandle
// 0x0018 (0x0018 - 0x0000)
struct FSmartObjectSlotEntranceHandle final
{
public:
	struct FSmartObjectSlotHandle                 SlotHandle;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSlotEntranceHandle) == 0x000008, "Wrong alignment on FSmartObjectSlotEntranceHandle");
static_assert(sizeof(FSmartObjectSlotEntranceHandle) == 0x000018, "Wrong size on FSmartObjectSlotEntranceHandle");
static_assert(offsetof(FSmartObjectSlotEntranceHandle, SlotHandle) == 0x000000, "Member 'FSmartObjectSlotEntranceHandle::SlotHandle' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotEntranceLocationRequest
// 0x0058 (0x0058 - 0x0000)
struct FSmartObjectSlotEntranceLocationRequest final
{
public:
	class AActor*                                 UserActor;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USmartObjectSlotValidationFilter> ValidationFilter;                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationData*                        NavigationData;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSmartObjectUserCapsuleParams          UserCapsuleParams;                                 // 0x0018(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SearchLocation;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSmartObjectSlotEntrySelectionMethod         SelectMethod;                                      // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESmartObjectSlotNavigationLocationType        LocationType;                                      // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectNavigationLocation;                        // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceGroundLocation;                              // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckTransitionTrajectory;                        // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckEntranceLocationOverlap;                     // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckSlotLocationOverlap;                         // 0x0046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSlotLocationAsFallback;                        // 0x0047(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSlotEntranceLocationRequest) == 0x000008, "Wrong alignment on FSmartObjectSlotEntranceLocationRequest");
static_assert(sizeof(FSmartObjectSlotEntranceLocationRequest) == 0x000058, "Wrong size on FSmartObjectSlotEntranceLocationRequest");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, UserActor) == 0x000000, "Member 'FSmartObjectSlotEntranceLocationRequest::UserActor' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, ValidationFilter) == 0x000008, "Member 'FSmartObjectSlotEntranceLocationRequest::ValidationFilter' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, NavigationData) == 0x000010, "Member 'FSmartObjectSlotEntranceLocationRequest::NavigationData' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, UserCapsuleParams) == 0x000018, "Member 'FSmartObjectSlotEntranceLocationRequest::UserCapsuleParams' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, SearchLocation) == 0x000028, "Member 'FSmartObjectSlotEntranceLocationRequest::SearchLocation' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, SelectMethod) == 0x000040, "Member 'FSmartObjectSlotEntranceLocationRequest::SelectMethod' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, LocationType) == 0x000041, "Member 'FSmartObjectSlotEntranceLocationRequest::LocationType' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, bProjectNavigationLocation) == 0x000042, "Member 'FSmartObjectSlotEntranceLocationRequest::bProjectNavigationLocation' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, bTraceGroundLocation) == 0x000043, "Member 'FSmartObjectSlotEntranceLocationRequest::bTraceGroundLocation' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, bCheckTransitionTrajectory) == 0x000044, "Member 'FSmartObjectSlotEntranceLocationRequest::bCheckTransitionTrajectory' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, bCheckEntranceLocationOverlap) == 0x000045, "Member 'FSmartObjectSlotEntranceLocationRequest::bCheckEntranceLocationOverlap' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, bCheckSlotLocationOverlap) == 0x000046, "Member 'FSmartObjectSlotEntranceLocationRequest::bCheckSlotLocationOverlap' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationRequest, bUseSlotLocationAsFallback) == 0x000047, "Member 'FSmartObjectSlotEntranceLocationRequest::bUseSlotLocationAsFallback' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotEntranceLocationResult
// 0x0080 (0x0080 - 0x0000)
struct FSmartObjectSlotEntranceLocationResult final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tag;                                               // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FSmartObjectSlotEntranceHandle         EntranceHandle;                                    // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectSlotEntranceLocationResult) == 0x000008, "Wrong alignment on FSmartObjectSlotEntranceLocationResult");
static_assert(sizeof(FSmartObjectSlotEntranceLocationResult) == 0x000080, "Wrong size on FSmartObjectSlotEntranceLocationResult");
static_assert(offsetof(FSmartObjectSlotEntranceLocationResult, Location) == 0x000000, "Member 'FSmartObjectSlotEntranceLocationResult::Location' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationResult, Rotation) == 0x000018, "Member 'FSmartObjectSlotEntranceLocationResult::Rotation' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationResult, Tag) == 0x000038, "Member 'FSmartObjectSlotEntranceLocationResult::Tag' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationResult, Tags) == 0x000040, "Member 'FSmartObjectSlotEntranceLocationResult::Tags' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationResult, EntranceHandle) == 0x000060, "Member 'FSmartObjectSlotEntranceLocationResult::EntranceHandle' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotEntranceLocationResult, bIsValid) == 0x000078, "Member 'FSmartObjectSlotEntranceLocationResult::bIsValid' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct FSmartObjectSlotIndex final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSmartObjectSlotIndex) == 0x000004, "Wrong alignment on FSmartObjectSlotIndex");
static_assert(sizeof(FSmartObjectSlotIndex) == 0x000004, "Wrong size on FSmartObjectSlotIndex");
static_assert(offsetof(FSmartObjectSlotIndex, Index) == 0x000000, "Member 'FSmartObjectSlotIndex::Index' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectTraceParams
// 0x0028 (0x0028 - 0x0000)
struct FSmartObjectTraceParams final
{
public:
	ESmartObjectTraceType                         Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCollisionProfileName                  CollisionProfile;                                  // 0x0018(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectTraceParams) == 0x000008, "Wrong alignment on FSmartObjectTraceParams");
static_assert(sizeof(FSmartObjectTraceParams) == 0x000028, "Wrong size on FSmartObjectTraceParams");
static_assert(offsetof(FSmartObjectTraceParams, Type) == 0x000000, "Member 'FSmartObjectTraceParams::Type' has a wrong offset!");
static_assert(offsetof(FSmartObjectTraceParams, TraceChannel) == 0x000001, "Member 'FSmartObjectTraceParams::TraceChannel' has a wrong offset!");
static_assert(offsetof(FSmartObjectTraceParams, ObjectTypes) == 0x000008, "Member 'FSmartObjectTraceParams::ObjectTypes' has a wrong offset!");
static_assert(offsetof(FSmartObjectTraceParams, CollisionProfile) == 0x000018, "Member 'FSmartObjectTraceParams::CollisionProfile' has a wrong offset!");
static_assert(offsetof(FSmartObjectTraceParams, bTraceComplex) == 0x000020, "Member 'FSmartObjectTraceParams::bTraceComplex' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectSlotValidationParams
// 0x0080 (0x0080 - 0x0000)
struct FSmartObjectSlotValidationParams final
{
public:
	TSubclassOf<class UNavigationQueryFilter>     NavigationFilter;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                SearchExtents;                                     // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSmartObjectTraceParams                GroundTraceParameters;                             // 0x0020(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSmartObjectTraceParams                TransitionTraceParameters;                         // 0x0048(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseNavigationCapsuleSize;                         // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSmartObjectUserCapsuleParams          UserCapsule;                                       // 0x0074(0x000C)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectSlotValidationParams) == 0x000008, "Wrong alignment on FSmartObjectSlotValidationParams");
static_assert(sizeof(FSmartObjectSlotValidationParams) == 0x000080, "Wrong size on FSmartObjectSlotValidationParams");
static_assert(offsetof(FSmartObjectSlotValidationParams, NavigationFilter) == 0x000000, "Member 'FSmartObjectSlotValidationParams::NavigationFilter' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotValidationParams, SearchExtents) == 0x000008, "Member 'FSmartObjectSlotValidationParams::SearchExtents' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotValidationParams, GroundTraceParameters) == 0x000020, "Member 'FSmartObjectSlotValidationParams::GroundTraceParameters' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotValidationParams, TransitionTraceParameters) == 0x000048, "Member 'FSmartObjectSlotValidationParams::TransitionTraceParameters' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotValidationParams, bUseNavigationCapsuleSize) == 0x000070, "Member 'FSmartObjectSlotValidationParams::bUseNavigationCapsuleSize' has a wrong offset!");
static_assert(offsetof(FSmartObjectSlotValidationParams, UserCapsule) == 0x000074, "Member 'FSmartObjectSlotValidationParams::UserCapsule' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectActorUserData
// 0x0008 (0x0008 - 0x0000)
struct FSmartObjectActorUserData final
{
public:
	TWeakObjectPtr<class AActor>                  UserActor;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectActorUserData) == 0x000004, "Wrong alignment on FSmartObjectActorUserData");
static_assert(sizeof(FSmartObjectActorUserData) == 0x000008, "Wrong size on FSmartObjectActorUserData");
static_assert(offsetof(FSmartObjectActorUserData, UserActor) == 0x000000, "Member 'FSmartObjectActorUserData::UserActor' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectActorOwnerData
// 0x0020 (0x0020 - 0x0000)
struct FSmartObjectActorOwnerData final
{
public:
	struct FActorInstanceHandle                   Handle;                                            // 0x0000(0x0020)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartObjectActorOwnerData) == 0x000008, "Wrong alignment on FSmartObjectActorOwnerData");
static_assert(sizeof(FSmartObjectActorOwnerData) == 0x000020, "Wrong size on FSmartObjectActorOwnerData");
static_assert(offsetof(FSmartObjectActorOwnerData, Handle) == 0x000000, "Member 'FSmartObjectActorOwnerData::Handle' has a wrong offset!");

// ScriptStruct SmartObjectsModule.SmartObjectWorldConditionObjectTagQueryState
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSmartObjectWorldConditionObjectTagQueryState final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectWorldConditionObjectTagQueryState) == 0x000008, "Wrong alignment on FSmartObjectWorldConditionObjectTagQueryState");
static_assert(sizeof(FSmartObjectWorldConditionObjectTagQueryState) == 0x000008, "Wrong size on FSmartObjectWorldConditionObjectTagQueryState");

// ScriptStruct SmartObjectsModule.SmartObjectWorldConditionSlotTagQueryState
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSmartObjectWorldConditionSlotTagQueryState final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartObjectWorldConditionSlotTagQueryState) == 0x000008, "Wrong alignment on FSmartObjectWorldConditionSlotTagQueryState");
static_assert(sizeof(FSmartObjectWorldConditionSlotTagQueryState) == 0x000018, "Wrong size on FSmartObjectWorldConditionSlotTagQueryState");

// ScriptStruct SmartObjectsModule.SmartObjectWorldConditionSlotTagQuery
// 0x0060 (0x0070 - 0x0010)
struct FSmartObjectWorldConditionSlotTagQuery final : public FSmartObjectWorldConditionBase
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0028(0x0048)(Edit, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSmartObjectWorldConditionSlotTagQuery) == 0x000008, "Wrong alignment on FSmartObjectWorldConditionSlotTagQuery");
static_assert(sizeof(FSmartObjectWorldConditionSlotTagQuery) == 0x000070, "Wrong size on FSmartObjectWorldConditionSlotTagQuery");
static_assert(offsetof(FSmartObjectWorldConditionSlotTagQuery, TagQuery) == 0x000028, "Member 'FSmartObjectWorldConditionSlotTagQuery::TagQuery' has a wrong offset!");

// ScriptStruct SmartObjectsModule.WorldCondition_SmartObjectActorTagQueryState
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FWorldCondition_SmartObjectActorTagQueryState final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldCondition_SmartObjectActorTagQueryState) == 0x000008, "Wrong alignment on FWorldCondition_SmartObjectActorTagQueryState");
static_assert(sizeof(FWorldCondition_SmartObjectActorTagQueryState) == 0x000008, "Wrong size on FWorldCondition_SmartObjectActorTagQueryState");

}

