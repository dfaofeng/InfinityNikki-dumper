#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6LevelSequenceLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ELSTimePeriodType_structs.hpp"
#include "EPlatformType_structs.hpp"
#include "FeatureSequenceParams_structs.hpp"
#include "MovieScene_structs.hpp"
#include "X6Game_structs.hpp"


namespace SDK::Params
{

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.UpdateActorCondition
// 0x0038 (0x0038 - 0x0000)
struct X6LevelSequenceLibrary_C_UpdateActorCondition final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CurrentCondition;                                  // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Tag;                                               // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_UpdateActorCondition) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_UpdateActorCondition");
static_assert(sizeof(X6LevelSequenceLibrary_C_UpdateActorCondition) == 0x000038, "Wrong size on X6LevelSequenceLibrary_C_UpdateActorCondition");
static_assert(offsetof(X6LevelSequenceLibrary_C_UpdateActorCondition, ActorName) == 0x000000, "Member 'X6LevelSequenceLibrary_C_UpdateActorCondition::ActorName' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_UpdateActorCondition, CurrentCondition) == 0x000010, "Member 'X6LevelSequenceLibrary_C_UpdateActorCondition::CurrentCondition' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_UpdateActorCondition, Tag) == 0x000018, "Member 'X6LevelSequenceLibrary_C_UpdateActorCondition::Tag' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_UpdateActorCondition, __WorldContext) == 0x000028, "Member 'X6LevelSequenceLibrary_C_UpdateActorCondition::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_UpdateActorCondition, Result) == 0x000030, "Member 'X6LevelSequenceLibrary_C_UpdateActorCondition::Result' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.UnregisterActorCondition
// 0x0028 (0x0028 - 0x0000)
struct X6LevelSequenceLibrary_C_UnregisterActorCondition final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Tag;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_UnregisterActorCondition) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_UnregisterActorCondition");
static_assert(sizeof(X6LevelSequenceLibrary_C_UnregisterActorCondition) == 0x000028, "Wrong size on X6LevelSequenceLibrary_C_UnregisterActorCondition");
static_assert(offsetof(X6LevelSequenceLibrary_C_UnregisterActorCondition, ActorName) == 0x000000, "Member 'X6LevelSequenceLibrary_C_UnregisterActorCondition::ActorName' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_UnregisterActorCondition, Tag) == 0x000010, "Member 'X6LevelSequenceLibrary_C_UnregisterActorCondition::Tag' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_UnregisterActorCondition, __WorldContext) == 0x000020, "Member 'X6LevelSequenceLibrary_C_UnregisterActorCondition::__WorldContext' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.ShowGameLogo
// 0x0010 (0x0010 - 0x0000)
struct X6LevelSequenceLibrary_C_ShowGameLogo final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_ShowGameLogo) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_ShowGameLogo");
static_assert(sizeof(X6LevelSequenceLibrary_C_ShowGameLogo) == 0x000010, "Wrong size on X6LevelSequenceLibrary_C_ShowGameLogo");
static_assert(offsetof(X6LevelSequenceLibrary_C_ShowGameLogo, IsVisible) == 0x000000, "Member 'X6LevelSequenceLibrary_C_ShowGameLogo::IsVisible' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ShowGameLogo, __WorldContext) == 0x000008, "Member 'X6LevelSequenceLibrary_C_ShowGameLogo::__WorldContext' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.SetBP_EnableEmotionPerformance
// 0x0018 (0x0018 - 0x0000)
struct X6LevelSequenceLibrary_C_SetBP_EnableEmotionPerformance final
{
public:
	class AActor*                                 SetActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_SetBP_EnableEmotionPerformance) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_SetBP_EnableEmotionPerformance");
static_assert(sizeof(X6LevelSequenceLibrary_C_SetBP_EnableEmotionPerformance) == 0x000018, "Wrong size on X6LevelSequenceLibrary_C_SetBP_EnableEmotionPerformance");
static_assert(offsetof(X6LevelSequenceLibrary_C_SetBP_EnableEmotionPerformance, SetActor) == 0x000000, "Member 'X6LevelSequenceLibrary_C_SetBP_EnableEmotionPerformance::SetActor' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_SetBP_EnableEmotionPerformance, Value) == 0x000008, "Member 'X6LevelSequenceLibrary_C_SetBP_EnableEmotionPerformance::Value' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_SetBP_EnableEmotionPerformance, __WorldContext) == 0x000010, "Member 'X6LevelSequenceLibrary_C_SetBP_EnableEmotionPerformance::__WorldContext' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.ResimulationNikkiPhysAndChaos
// 0x0060 (0x0060 - 0x0000)
struct X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos final
{
public:
	class USkeletalMeshComponent*                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component;      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClothingSimulationInteractor*          CallFunc_GetClothingSimulationInteractor_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChaosClothingSimulationInteractor*     K2Node_DynamicCast_AsChaos_Clothing_Simulation_Interactor; // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos");
static_assert(sizeof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos) == 0x000060, "Wrong size on X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, Target) == 0x000000, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::Target' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, __WorldContext) == 0x000008, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, CallFunc_GetChildrenComponents_Children) == 0x000010, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, Temp_int_Array_Index_Variable) == 0x000020, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, CallFunc_Array_Get_Item) == 0x000028, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, K2Node_DynamicCast_AsSkeletal_Mesh_Component) == 0x000030, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::K2Node_DynamicCast_AsSkeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, CallFunc_GetClothingSimulationInteractor_ReturnValue) == 0x000040, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::CallFunc_GetClothingSimulationInteractor_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, K2Node_DynamicCast_AsChaos_Clothing_Simulation_Interactor) == 0x000050, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::K2Node_DynamicCast_AsChaos_Clothing_Simulation_Interactor' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, CallFunc_Less_IntInt_ReturnValue) == 0x000059, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'X6LevelSequenceLibrary_C_ResimulationNikkiPhysAndChaos::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.RegisterActorCondition
// 0x0028 (0x0028 - 0x0000)
struct X6LevelSequenceLibrary_C_RegisterActorCondition final
{
public:
	class FString                                 ActorName;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Tag;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_RegisterActorCondition) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_RegisterActorCondition");
static_assert(sizeof(X6LevelSequenceLibrary_C_RegisterActorCondition) == 0x000028, "Wrong size on X6LevelSequenceLibrary_C_RegisterActorCondition");
static_assert(offsetof(X6LevelSequenceLibrary_C_RegisterActorCondition, ActorName) == 0x000000, "Member 'X6LevelSequenceLibrary_C_RegisterActorCondition::ActorName' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_RegisterActorCondition, Tag) == 0x000010, "Member 'X6LevelSequenceLibrary_C_RegisterActorCondition::Tag' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_RegisterActorCondition, __WorldContext) == 0x000020, "Member 'X6LevelSequenceLibrary_C_RegisterActorCondition::__WorldContext' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.PlayFeatureSequenceWithParams
// 0x00D0 (0x00D0 - 0x0000)
struct X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams final
{
public:
	class ULevelSequence*                         SequenceAsset;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFeatureSequenceParams                 Params_0;                                          // 0x0010(0x00A0)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x00B8(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams) == 0x000010, "Wrong alignment on X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams");
static_assert(sizeof(X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams) == 0x0000D0, "Wrong size on X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams, SequenceAsset) == 0x000000, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams::SequenceAsset' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams, Params_0) == 0x000010, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams::Params_0' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams, __WorldContext) == 0x0000B0, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams, SequenceActor) == 0x0000B8, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams::SequenceActor' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams, SequencePlayer) == 0x0000C0, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequenceWithParams::SequencePlayer' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.PlayFeatureSequence_V2
// 0x00B0 (0x00B0 - 0x0000)
struct X6LevelSequenceLibrary_C_PlayFeatureSequence_V2 final
{
public:
	class ULevelSequence*                         SequenceAsset;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          HideHUD;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMovieSceneSequencePlaybackSettings    PlaybackSetting;                                   // 0x0070(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_PlayFeatureSequence_V2) == 0x000010, "Wrong alignment on X6LevelSequenceLibrary_C_PlayFeatureSequence_V2");
static_assert(sizeof(X6LevelSequenceLibrary_C_PlayFeatureSequence_V2) == 0x0000B0, "Wrong size on X6LevelSequenceLibrary_C_PlayFeatureSequence_V2");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence_V2, SequenceAsset) == 0x000000, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence_V2::SequenceAsset' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence_V2, HideHUD) == 0x000008, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence_V2::HideHUD' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence_V2, Transform) == 0x000010, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence_V2::Transform' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence_V2, PlaybackSetting) == 0x000070, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence_V2::PlaybackSetting' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence_V2, __WorldContext) == 0x000098, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence_V2::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence_V2, SequenceActor) == 0x0000A0, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence_V2::SequenceActor' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence_V2, SequencePlayer) == 0x0000A8, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence_V2::SequencePlayer' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.PlayFeatureSequence
// 0x0058 (0x0058 - 0x0000)
struct X6LevelSequenceLibrary_C_PlayFeatureSequence final
{
public:
	class ULevelSequence*                         SequenceAsset;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          HideHUD;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TransformActor;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FMovieSceneSequencePlaybackSettings    PlaybackSetting;                                   // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_PlayFeatureSequence) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_PlayFeatureSequence");
static_assert(sizeof(X6LevelSequenceLibrary_C_PlayFeatureSequence) == 0x000058, "Wrong size on X6LevelSequenceLibrary_C_PlayFeatureSequence");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence, SequenceAsset) == 0x000000, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence::SequenceAsset' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence, HideHUD) == 0x000008, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence::HideHUD' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence, TransformActor) == 0x000010, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence::TransformActor' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence, PlaybackSetting) == 0x000018, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence::PlaybackSetting' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence, __WorldContext) == 0x000040, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence, SequenceActor) == 0x000048, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence::SequenceActor' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayFeatureSequence, SequencePlayer) == 0x000050, "Member 'X6LevelSequenceLibrary_C_PlayFeatureSequence::SequencePlayer' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.PlayCutscene
// 0x0048 (0x0048 - 0x0000)
struct X6LevelSequenceLibrary_C_PlayCutscene final
{
public:
	TSoftObjectPtr<class ULevelSequence>          LS;                                                // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          bResetCamera;                                      // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseSafezone;                                      // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_PlayCutscene) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_PlayCutscene");
static_assert(sizeof(X6LevelSequenceLibrary_C_PlayCutscene) == 0x000048, "Wrong size on X6LevelSequenceLibrary_C_PlayCutscene");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayCutscene, LS) == 0x000000, "Member 'X6LevelSequenceLibrary_C_PlayCutscene::LS' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayCutscene, bResetCamera) == 0x000028, "Member 'X6LevelSequenceLibrary_C_PlayCutscene::bResetCamera' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayCutscene, Target) == 0x000030, "Member 'X6LevelSequenceLibrary_C_PlayCutscene::Target' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayCutscene, bUseSafezone) == 0x000038, "Member 'X6LevelSequenceLibrary_C_PlayCutscene::bUseSafezone' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_PlayCutscene, __WorldContext) == 0x000040, "Member 'X6LevelSequenceLibrary_C_PlayCutscene::__WorldContext' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.NotifySpecialCutEnd
// 0x0008 (0x0008 - 0x0000)
struct X6LevelSequenceLibrary_C_NotifySpecialCutEnd final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_NotifySpecialCutEnd) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_NotifySpecialCutEnd");
static_assert(sizeof(X6LevelSequenceLibrary_C_NotifySpecialCutEnd) == 0x000008, "Wrong size on X6LevelSequenceLibrary_C_NotifySpecialCutEnd");
static_assert(offsetof(X6LevelSequenceLibrary_C_NotifySpecialCutEnd, __WorldContext) == 0x000000, "Member 'X6LevelSequenceLibrary_C_NotifySpecialCutEnd::__WorldContext' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.MoveActorToLocation
// 0x0030 (0x0030 - 0x0000)
struct X6LevelSequenceLibrary_C_MoveActorToLocation final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        LocomotionType;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_MoveActorToLocation) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_MoveActorToLocation");
static_assert(sizeof(X6LevelSequenceLibrary_C_MoveActorToLocation) == 0x000030, "Wrong size on X6LevelSequenceLibrary_C_MoveActorToLocation");
static_assert(offsetof(X6LevelSequenceLibrary_C_MoveActorToLocation, Actor) == 0x000000, "Member 'X6LevelSequenceLibrary_C_MoveActorToLocation::Actor' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_MoveActorToLocation, Location) == 0x000008, "Member 'X6LevelSequenceLibrary_C_MoveActorToLocation::Location' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_MoveActorToLocation, LocomotionType) == 0x000020, "Member 'X6LevelSequenceLibrary_C_MoveActorToLocation::LocomotionType' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_MoveActorToLocation, __WorldContext) == 0x000028, "Member 'X6LevelSequenceLibrary_C_MoveActorToLocation::__WorldContext' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.LSSyncGameplayNikkiTransform
// 0x0010 (0x0010 - 0x0000)
struct X6LevelSequenceLibrary_C_LSSyncGameplayNikkiTransform final
{
public:
	class AActor*                                 InSourceActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_LSSyncGameplayNikkiTransform) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_LSSyncGameplayNikkiTransform");
static_assert(sizeof(X6LevelSequenceLibrary_C_LSSyncGameplayNikkiTransform) == 0x000010, "Wrong size on X6LevelSequenceLibrary_C_LSSyncGameplayNikkiTransform");
static_assert(offsetof(X6LevelSequenceLibrary_C_LSSyncGameplayNikkiTransform, InSourceActor) == 0x000000, "Member 'X6LevelSequenceLibrary_C_LSSyncGameplayNikkiTransform::InSourceActor' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_LSSyncGameplayNikkiTransform, __WorldContext) == 0x000008, "Member 'X6LevelSequenceLibrary_C_LSSyncGameplayNikkiTransform::__WorldContext' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.LSSyncGameplayCameraTransform
// 0x0010 (0x0010 - 0x0000)
struct X6LevelSequenceLibrary_C_LSSyncGameplayCameraTransform final
{
public:
	class AActor*                                 InSourceCamera;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_LSSyncGameplayCameraTransform) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_LSSyncGameplayCameraTransform");
static_assert(sizeof(X6LevelSequenceLibrary_C_LSSyncGameplayCameraTransform) == 0x000010, "Wrong size on X6LevelSequenceLibrary_C_LSSyncGameplayCameraTransform");
static_assert(offsetof(X6LevelSequenceLibrary_C_LSSyncGameplayCameraTransform, InSourceCamera) == 0x000000, "Member 'X6LevelSequenceLibrary_C_LSSyncGameplayCameraTransform::InSourceCamera' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_LSSyncGameplayCameraTransform, __WorldContext) == 0x000008, "Member 'X6LevelSequenceLibrary_C_LSSyncGameplayCameraTransform::__WorldContext' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.IsPreviewInEditor
// 0x0010 (0x0010 - 0x0000)
struct X6LevelSequenceLibrary_C_IsPreviewInEditor final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWithEditor_ReturnValue;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingInEditor_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_IsPreviewInEditor) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_IsPreviewInEditor");
static_assert(sizeof(X6LevelSequenceLibrary_C_IsPreviewInEditor) == 0x000010, "Wrong size on X6LevelSequenceLibrary_C_IsPreviewInEditor");
static_assert(offsetof(X6LevelSequenceLibrary_C_IsPreviewInEditor, __WorldContext) == 0x000000, "Member 'X6LevelSequenceLibrary_C_IsPreviewInEditor::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_IsPreviewInEditor, Result) == 0x000008, "Member 'X6LevelSequenceLibrary_C_IsPreviewInEditor::Result' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_IsPreviewInEditor, CallFunc_IsWithEditor_ReturnValue) == 0x000009, "Member 'X6LevelSequenceLibrary_C_IsPreviewInEditor::CallFunc_IsWithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_IsPreviewInEditor, CallFunc_IsPlayingInEditor_ReturnValue) == 0x00000A, "Member 'X6LevelSequenceLibrary_C_IsPreviewInEditor::CallFunc_IsPlayingInEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_IsPreviewInEditor, CallFunc_Not_PreBool_ReturnValue) == 0x00000B, "Member 'X6LevelSequenceLibrary_C_IsPreviewInEditor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_IsPreviewInEditor, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'X6LevelSequenceLibrary_C_IsPreviewInEditor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.HiddenActorInLight
// 0x0058 (0x0058 - 0x0000)
struct X6LevelSequenceLibrary_C_HiddenActorInLight final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          FinalCondition;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADynamicWeatherVolume*                  K2Node_DynamicCast_AsDynamic_Weather_Volume;       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_HiddenActorInLight) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_HiddenActorInLight");
static_assert(sizeof(X6LevelSequenceLibrary_C_HiddenActorInLight) == 0x000058, "Wrong size on X6LevelSequenceLibrary_C_HiddenActorInLight");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, InActor) == 0x000000, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::InActor' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, FinalCondition) == 0x000008, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::FinalCondition' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, __WorldContext) == 0x000010, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, K2Node_DynamicCast_AsDynamic_Weather_Volume) == 0x000018, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::K2Node_DynamicCast_AsDynamic_Weather_Volume' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, CallFunc_Array_Get_Item) == 0x000048, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_HiddenActorInLight, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'X6LevelSequenceLibrary_C_HiddenActorInLight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.GetLevelOriginTransform
// 0x0070 (0x0070 - 0x0000)
struct X6LevelSequenceLibrary_C_GetLevelOriginTransform final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OriginTransform;                                   // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_GetLevelOriginTransform) == 0x000010, "Wrong alignment on X6LevelSequenceLibrary_C_GetLevelOriginTransform");
static_assert(sizeof(X6LevelSequenceLibrary_C_GetLevelOriginTransform) == 0x000070, "Wrong size on X6LevelSequenceLibrary_C_GetLevelOriginTransform");
static_assert(offsetof(X6LevelSequenceLibrary_C_GetLevelOriginTransform, __WorldContext) == 0x000000, "Member 'X6LevelSequenceLibrary_C_GetLevelOriginTransform::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_GetLevelOriginTransform, OriginTransform) == 0x000010, "Member 'X6LevelSequenceLibrary_C_GetLevelOriginTransform::OriginTransform' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.GetCurrentTimePeriod
// 0x0018 (0x0018 - 0x0000)
struct X6LevelSequenceLibrary_C_GetCurrentTimePeriod final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<ELSTimePeriodType>                     TimePeriodArray;                                   // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(X6LevelSequenceLibrary_C_GetCurrentTimePeriod) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_GetCurrentTimePeriod");
static_assert(sizeof(X6LevelSequenceLibrary_C_GetCurrentTimePeriod) == 0x000018, "Wrong size on X6LevelSequenceLibrary_C_GetCurrentTimePeriod");
static_assert(offsetof(X6LevelSequenceLibrary_C_GetCurrentTimePeriod, __WorldContext) == 0x000000, "Member 'X6LevelSequenceLibrary_C_GetCurrentTimePeriod::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_GetCurrentTimePeriod, TimePeriodArray) == 0x000008, "Member 'X6LevelSequenceLibrary_C_GetCurrentTimePeriod::TimePeriodArray' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.GetCurrentPlatform
// 0x0018 (0x0018 - 0x0000)
struct X6LevelSequenceLibrary_C_GetCurrentPlatform final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<EPlatformType>                         PlatformType;                                      // 0x0008(0x0010)(Parm, OutParm)
};
static_assert(alignof(X6LevelSequenceLibrary_C_GetCurrentPlatform) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_GetCurrentPlatform");
static_assert(sizeof(X6LevelSequenceLibrary_C_GetCurrentPlatform) == 0x000018, "Wrong size on X6LevelSequenceLibrary_C_GetCurrentPlatform");
static_assert(offsetof(X6LevelSequenceLibrary_C_GetCurrentPlatform, __WorldContext) == 0x000000, "Member 'X6LevelSequenceLibrary_C_GetCurrentPlatform::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_GetCurrentPlatform, PlatformType) == 0x000008, "Member 'X6LevelSequenceLibrary_C_GetCurrentPlatform::PlatformType' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.BP_ForceReadyToPlayLS
// 0x0010 (0x0010 - 0x0000)
struct X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS final
{
public:
	bool                                          CinematicMode;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HidePlayer;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHideDaMiao;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideHUD;                                           // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableMovement;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableCamera;                                     // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddPlayerEnterSequenceState;                       // 0x0006(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS");
static_assert(sizeof(X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS) == 0x000010, "Wrong size on X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS");
static_assert(offsetof(X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS, CinematicMode) == 0x000000, "Member 'X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS::CinematicMode' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS, HidePlayer) == 0x000001, "Member 'X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS::HidePlayer' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS, bHideDaMiao) == 0x000002, "Member 'X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS::bHideDaMiao' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS, HideHUD) == 0x000003, "Member 'X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS::HideHUD' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS, DisableMovement) == 0x000004, "Member 'X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS::DisableMovement' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS, DisableCamera) == 0x000005, "Member 'X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS::DisableCamera' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS, AddPlayerEnterSequenceState) == 0x000006, "Member 'X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS::AddPlayerEnterSequenceState' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS, __WorldContext) == 0x000008, "Member 'X6LevelSequenceLibrary_C_BP_ForceReadyToPlayLS::__WorldContext' has a wrong offset!");

// Function X6LevelSequenceLibrary.X6LevelSequenceLibrary_C.AddBindingByCastTag
// 0x0010 (0x0010 - 0x0000)
struct X6LevelSequenceLibrary_C_AddBindingByCastTag final
{
public:
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6LevelSequenceLibrary_C_AddBindingByCastTag) == 0x000008, "Wrong alignment on X6LevelSequenceLibrary_C_AddBindingByCastTag");
static_assert(sizeof(X6LevelSequenceLibrary_C_AddBindingByCastTag) == 0x000010, "Wrong size on X6LevelSequenceLibrary_C_AddBindingByCastTag");
static_assert(offsetof(X6LevelSequenceLibrary_C_AddBindingByCastTag, LevelSequenceActor) == 0x000000, "Member 'X6LevelSequenceLibrary_C_AddBindingByCastTag::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(X6LevelSequenceLibrary_C_AddBindingByCastTag, __WorldContext) == 0x000008, "Member 'X6LevelSequenceLibrary_C_AddBindingByCastTag::__WorldContext' has a wrong offset!");

}

