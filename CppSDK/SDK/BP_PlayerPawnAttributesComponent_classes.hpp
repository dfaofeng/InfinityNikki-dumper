#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerPawnAttributesComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BP_X6ActorComponent_classes.hpp"
#include "EPlayerGamePlayMovementMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerPawnAttributesComponent.BP_PlayerPawnAttributesComponent_C
// 0x0030 (0x00D8 - 0x00A8)
class UBP_PlayerPawnAttributesComponent_C final : public UBP_X6ActorComponent_C
{
public:
	TMulticastInlineDelegate<void(int32 CurrentHP)> OnPlayerBlackBoxHPNagetive;                      // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                BPCurInputDirection;                               // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class FName                                   BP_ConfigDTReadRowName;                            // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_SetPlayerToUsingCarrier(class AActor* CarrierActor);
	void BP_SetPlayerToControlActor(class AActor* ActorToControl);
	void BP_Public_SwitchNikkiGamePlayMovementMode(EPlayerGamePlayMovementMode NewGamePlayMovementMode, bool* SwitchSucessful);
	void BP_Public_SwitchCharacterGamePlayInAirMovementMode(EPlayerGamePlayMovementMode NewGamePlayMovementMode, bool* Ret);
	void BP_Public_ExitGamePlayMovementMode(EPlayerGamePlayMovementMode NewGamePlayMovementMode, bool* SwitchSucessful);
	void BP_Public_ExitGamePlayInAirMovementMode(EPlayerGamePlayMovementMode NewGamePlayMovementMode, bool* Ret);
	void AnimNotify_StartGatherHandIK();
	void AnimNotify_PlayerStepOnLand();
	void AnimNotify_FinishGatherHandIK();
	void AnimNotify_DoInteractionLogic();
	void AnimNotify_DetachInteractiveActor();
	void AnimNotify_AttachInteractiveActor();

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerPawnAttributesComponent_C">();
	}
	static class UBP_PlayerPawnAttributesComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerPawnAttributesComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerPawnAttributesComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerPawnAttributesComponent_C");
static_assert(sizeof(UBP_PlayerPawnAttributesComponent_C) == 0x0000D8, "Wrong size on UBP_PlayerPawnAttributesComponent_C");
static_assert(offsetof(UBP_PlayerPawnAttributesComponent_C, OnPlayerBlackBoxHPNagetive) == 0x0000A8, "Member 'UBP_PlayerPawnAttributesComponent_C::OnPlayerBlackBoxHPNagetive' has a wrong offset!");
static_assert(offsetof(UBP_PlayerPawnAttributesComponent_C, BPCurInputDirection) == 0x0000B8, "Member 'UBP_PlayerPawnAttributesComponent_C::BPCurInputDirection' has a wrong offset!");
static_assert(offsetof(UBP_PlayerPawnAttributesComponent_C, BP_ConfigDTReadRowName) == 0x0000D0, "Member 'UBP_PlayerPawnAttributesComponent_C::BP_ConfigDTReadRowName' has a wrong offset!");

}

