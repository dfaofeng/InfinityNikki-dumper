#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraVolumeActorBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.EventOnProcessActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BP_CameraVolumeActorBase_C_EventOnProcessActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_EventOnProcessActorDestroyed) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_EventOnProcessActorDestroyed");
static_assert(sizeof(BP_CameraVolumeActorBase_C_EventOnProcessActorDestroyed) == 0x000008, "Wrong size on BP_CameraVolumeActorBase_C_EventOnProcessActorDestroyed");
static_assert(offsetof(BP_CameraVolumeActorBase_C_EventOnProcessActorDestroyed, DestroyedActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_EventOnProcessActorDestroyed::DestroyedActor' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.EventSetProcessActorDestroyBinding
// 0x0010 (0x0010 - 0x0000)
struct BP_CameraVolumeActorBase_C_EventSetProcessActorDestroyBinding final
{
public:
	class AActor*                                 ProcessActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Bind;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_EventSetProcessActorDestroyBinding) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_EventSetProcessActorDestroyBinding");
static_assert(sizeof(BP_CameraVolumeActorBase_C_EventSetProcessActorDestroyBinding) == 0x000010, "Wrong size on BP_CameraVolumeActorBase_C_EventSetProcessActorDestroyBinding");
static_assert(offsetof(BP_CameraVolumeActorBase_C_EventSetProcessActorDestroyBinding, ProcessActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_EventSetProcessActorDestroyBinding::ProcessActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_EventSetProcessActorDestroyBinding, Bind) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_EventSetProcessActorDestroyBinding::Bind' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_CameraVolumeActorBase_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_CameraVolumeActorBase_C_ReceiveEndPlay");
static_assert(sizeof(BP_CameraVolumeActorBase_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_CameraVolumeActorBase_C_ReceiveEndPlay");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.EventOnControlledActorChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_CameraVolumeActorBase_C_EventOnControlledActorChanged final
{
public:
	class AActor*                                 ControlledActor_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LastControlledActor;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_EventOnControlledActorChanged) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_EventOnControlledActorChanged");
static_assert(sizeof(BP_CameraVolumeActorBase_C_EventOnControlledActorChanged) == 0x000010, "Wrong size on BP_CameraVolumeActorBase_C_EventOnControlledActorChanged");
static_assert(offsetof(BP_CameraVolumeActorBase_C_EventOnControlledActorChanged, ControlledActor_0) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_EventOnControlledActorChanged::ControlledActor_0' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_EventOnControlledActorChanged, LastControlledActor) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_EventOnControlledActorChanged::LastControlledActor' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ServerInit
// 0x0001 (0x0001 - 0x0000)
struct BP_CameraVolumeActorBase_C_ServerInit final
{
public:
	bool                                          bServer;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_ServerInit) == 0x000001, "Wrong alignment on BP_CameraVolumeActorBase_C_ServerInit");
static_assert(sizeof(BP_CameraVolumeActorBase_C_ServerInit) == 0x000001, "Wrong size on BP_CameraVolumeActorBase_C_ServerInit");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ServerInit, bServer) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_ServerInit::bServer' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_CameraVolumeActorBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_CameraVolumeActorBase_C_ReceiveTick");
static_assert(sizeof(BP_CameraVolumeActorBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_CameraVolumeActorBase_C_ReceiveTick");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ConstructCollisionComponent
// 0x0060 (0x0060 - 0x0000)
struct BP_CameraVolumeActorBase_C_ConstructCollisionComponent final
{
public:
	struct FTransform                             ActorTransform;                                    // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_ConstructCollisionComponent) == 0x000010, "Wrong alignment on BP_CameraVolumeActorBase_C_ConstructCollisionComponent");
static_assert(sizeof(BP_CameraVolumeActorBase_C_ConstructCollisionComponent) == 0x000060, "Wrong size on BP_CameraVolumeActorBase_C_ConstructCollisionComponent");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ConstructCollisionComponent, ActorTransform) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_ConstructCollisionComponent::ActorTransform' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.DestroyOldCollisionComponent
// 0x0001 (0x0001 - 0x0000)
struct BP_CameraVolumeActorBase_C_DestroyOldCollisionComponent final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_DestroyOldCollisionComponent) == 0x000001, "Wrong alignment on BP_CameraVolumeActorBase_C_DestroyOldCollisionComponent");
static_assert(sizeof(BP_CameraVolumeActorBase_C_DestroyOldCollisionComponent) == 0x000001, "Wrong size on BP_CameraVolumeActorBase_C_DestroyOldCollisionComponent");
static_assert(offsetof(BP_CameraVolumeActorBase_C_DestroyOldCollisionComponent, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_DestroyOldCollisionComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.AddCollisionComponent
// 0x0068 (0x0068 - 0x0000)
struct BP_CameraVolumeActorBase_C_AddCollisionComponent final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     CallFunc_Set_ToArray_Result;                       // 0x0010(0x0010)(ReferenceParm)
	ECollisionChannel                             CallFunc_Array_Get_Item;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           CallFunc_GetComponentsByTag_ReturnValue;           // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UCapsuleComponent*                      CallFunc_AddComponent_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       CallFunc_AddComponent_ReturnValue_1;               // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CallFunc_AddComponent_ReturnValue_2;               // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetCapsuleSize_InHalfHeight_ImplicitCast; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetCapsuleSize_InRadius_ImplicitCast;     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast; // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_AddCollisionComponent) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_AddCollisionComponent");
static_assert(sizeof(BP_CameraVolumeActorBase_C_AddCollisionComponent) == 0x000068, "Wrong size on BP_CameraVolumeActorBase_C_AddCollisionComponent");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_Set_ToArray_Result) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_GetComponentsByTag_ReturnValue) == 0x000030, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_GetComponentsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_AddComponent_ReturnValue) == 0x000040, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_AddComponent_ReturnValue_1) == 0x000048, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_AddComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_AddComponent_ReturnValue_2) == 0x000050, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_AddComponent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, K2Node_SwitchEnum_CmpSuccess) == 0x000058, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_SetCapsuleSize_InHalfHeight_ImplicitCast) == 0x00005C, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_SetCapsuleSize_InHalfHeight_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_SetCapsuleSize_InRadius_ImplicitCast) == 0x000060, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_SetCapsuleSize_InRadius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddCollisionComponent, CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast) == 0x000064, "Member 'BP_CameraVolumeActorBase_C_AddCollisionComponent::CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.AddDebugDraw
// 0x0378 (0x0378 - 0x0000)
struct BP_CameraVolumeActorBase_C_AddDebugDraw final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_2;        // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0108(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x0220(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class USceneComponent*                        CallFunc_Array_Get_Item_2;                         // 0x0318(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_4;        // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_3;        // 0x0338(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_Array_Get_Item_3;                         // 0x0350(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0375(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0376(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_AddDebugDraw) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_AddDebugDraw");
static_assert(sizeof(BP_CameraVolumeActorBase_C_AddDebugDraw) == 0x000378, "Wrong size on BP_CameraVolumeActorBase_C_AddDebugDraw");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, Temp_int_Loop_Counter_Variable_2) == 0x000014, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Add_IntInt_ReturnValue_2) == 0x000018, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, Temp_int_Array_Index_Variable_2) == 0x000020, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, Temp_int_Loop_Counter_Variable_3) == 0x000024, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Add_IntInt_ReturnValue_3) == 0x000028, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x00002C, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Array_Length_ReturnValue_1) == 0x000040, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Less_IntInt_ReturnValue_1) == 0x000044, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, Temp_int_Array_Index_Variable_3) == 0x000048, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000058, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000070, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_MakeVector_ReturnValue) == 0x000088, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x0000A0, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x0000A8, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x0000C0, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Conv_DoubleToVector_ReturnValue_2) == 0x0000C8, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Conv_DoubleToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000E0, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_MakeVector_ReturnValue_1) == 0x0000E8, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000100, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000108, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000200, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_MakeVector_ReturnValue_2) == 0x000208, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x000220, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Array_Get_Item_2) == 0x000318, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_IsValid_ReturnValue) == 0x000320, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Array_Length_ReturnValue_2) == 0x000324, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Less_IntInt_ReturnValue_2) == 0x000328, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Divide_DoubleDouble_ReturnValue_4) == 0x000330, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Divide_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Conv_DoubleToVector_ReturnValue_3) == 0x000338, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Conv_DoubleToVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Array_Get_Item_3) == 0x000350, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Divide_VectorVector_ReturnValue) == 0x000358, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Array_Length_ReturnValue_3) == 0x000370, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_Less_IntInt_ReturnValue_3) == 0x000374, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, CallFunc_IsValid_ReturnValue_1) == 0x000375, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_AddDebugDraw, K2Node_SwitchEnum_CmpSuccess) == 0x000376, "Member 'BP_CameraVolumeActorBase_C_AddDebugDraw::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.CleanDebugDraw
// 0x0020 (0x0020 - 0x0000)
struct BP_CameraVolumeActorBase_C_CleanDebugDraw final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_CleanDebugDraw) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_CleanDebugDraw");
static_assert(sizeof(BP_CameraVolumeActorBase_C_CleanDebugDraw) == 0x000020, "Wrong size on BP_CameraVolumeActorBase_C_CleanDebugDraw");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CleanDebugDraw, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_CleanDebugDraw::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CleanDebugDraw, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_CameraVolumeActorBase_C_CleanDebugDraw::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CleanDebugDraw, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_CleanDebugDraw::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CleanDebugDraw, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_CameraVolumeActorBase_C_CleanDebugDraw::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CleanDebugDraw, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_CleanDebugDraw::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CleanDebugDraw, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_CameraVolumeActorBase_C_CleanDebugDraw::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CleanDebugDraw, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_CameraVolumeActorBase_C_CleanDebugDraw::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.GetProcessActorsByOverlappingActor
// 0x0078 (0x0078 - 0x0000)
struct BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor final
{
public:
	class AActor*                                 OverlappingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actors;                                            // 0x0008(0x0010)(Parm, OutParm)
	TArray<class AActor*>                         Result;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckProcessActor_bActorIsValid;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAttachedActors_OutActors;              // 0x0038(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetProcessActorEnableCollision_bEnable;   // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckProcessActor_bActorIsValid_1;        // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_2;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckProcessActor_bActorIsValid_2;        // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor");
static_assert(sizeof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor) == 0x000078, "Wrong size on BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, OverlappingActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::OverlappingActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, Actors) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::Actors' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, Result) == 0x000018, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::Result' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_CheckProcessActor_bActorIsValid) == 0x000034, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_CheckProcessActor_bActorIsValid' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_GetAttachedActors_OutActors) == 0x000038, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_GetAttachedActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_Less_IntInt_ReturnValue) == 0x000055, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_GetProcessActorEnableCollision_bEnable) == 0x000056, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_GetProcessActorEnableCollision_bEnable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_CheckProcessActor_bActorIsValid_1) == 0x000057, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_CheckProcessActor_bActorIsValid_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_Array_AddUnique_ReturnValue) == 0x000058, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_Array_AddUnique_ReturnValue_1) == 0x00005C, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_ActorHasTag_ReturnValue) == 0x000060, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_IsValid_ReturnValue_1) == 0x000061, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_GetAttachParentActor_ReturnValue) == 0x000068, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_Array_AddUnique_ReturnValue_2) == 0x000070, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_Array_AddUnique_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_IsValid_ReturnValue_2) == 0x000074, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor, CallFunc_CheckProcessActor_bActorIsValid_2) == 0x000075, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorsByOverlappingActor::CallFunc_CheckProcessActor_bActorIsValid_2' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.GetOverlappingActorByProcessActor
// 0x0030 (0x0030 - 0x0000)
struct BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OverlappingActor;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAttachedActorWithCollisionTag_ChildActor; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetProcessActorEnableCollision_bEnable;   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor");
static_assert(sizeof(BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor) == 0x000030, "Wrong size on BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor, InActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor::InActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor, OverlappingActor) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor::OverlappingActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor, CallFunc_GetAttachedActorWithCollisionTag_ChildActor) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor::CallFunc_GetAttachedActorWithCollisionTag_ChildActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor, CallFunc_GetAttachParentActor_ReturnValue) == 0x000020, "Member 'BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor, CallFunc_GetProcessActorEnableCollision_bEnable) == 0x000029, "Member 'BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor::CallFunc_GetProcessActorEnableCollision_bEnable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor, CallFunc_IsValid_ReturnValue_2) == 0x00002A, "Member 'BP_CameraVolumeActorBase_C_GetOverlappingActorByProcessActor::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.GetAttachedActorWithCollisionTag
// 0x0050 (0x0050 - 0x0000)
struct BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ChildActor;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAttachedActors_OutActors;              // 0x0020(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag");
static_assert(sizeof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag) == 0x000050, "Wrong size on BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, InActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::InActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, ChildActor) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::ChildActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, CallFunc_GetAttachedActors_OutActors) == 0x000020, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::CallFunc_GetAttachedActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag, CallFunc_ActorHasTag_ReturnValue) == 0x000049, "Member 'BP_CameraVolumeActorBase_C_GetAttachedActorWithCollisionTag::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.GetProcessActorEnableCollision
// 0x0028 (0x0028 - 0x0000)
struct BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetActorEnableCollision_ReturnValue;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             CallFunc_GetCollisionEnabled_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision");
static_assert(sizeof(BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision) == 0x000028, "Wrong size on BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision, Actor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision::Actor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision, bEnable) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision::bEnable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision, K2Node_DynamicCast_AsPrimitive_Component) == 0x000018, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision::K2Node_DynamicCast_AsPrimitive_Component' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision, CallFunc_GetActorEnableCollision_ReturnValue) == 0x000021, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision::CallFunc_GetActorEnableCollision_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision, CallFunc_GetCollisionEnabled_ReturnValue) == 0x000022, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision::CallFunc_GetCollisionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000023, "Member 'BP_CameraVolumeActorBase_C_GetProcessActorEnableCollision::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.CheckProcessActor
// 0x0028 (0x0028 - 0x0000)
struct BP_CameraVolumeActorBase_C_CheckProcessActor final
{
public:
	class AActor*                                 ProcessActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bActorIsValid;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActorBeingDestroyed_ReturnValue;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue;       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_CheckProcessActor) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_CheckProcessActor");
static_assert(sizeof(BP_CameraVolumeActorBase_C_CheckProcessActor) == 0x000028, "Wrong size on BP_CameraVolumeActorBase_C_CheckProcessActor");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActor, ProcessActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActor::ProcessActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActor, bActorIsValid) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActor::bActorIsValid' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActor, CallFunc_IsActorBeingDestroyed_ReturnValue) == 0x000009, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActor::CallFunc_IsActorBeingDestroyed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActor, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActor::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActor, K2Node_DynamicCast_AsPrimitive_Component) == 0x000018, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActor::K2Node_DynamicCast_AsPrimitive_Component' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActor, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActor, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActor, CallFunc_GetCollisionObjectType_ReturnValue) == 0x000022, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActor::CallFunc_GetCollisionObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActor, CallFunc_Set_Contains_ReturnValue) == 0x000023, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActor::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.CheckProcessActorAndOverlapping
// 0x0070 (0x0070 - 0x0000)
struct BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping final
{
public:
	class AActor*                                 ProcessActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bActorIsValid;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OverlappingActor;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetClosestPointOnCollision_OutPointOnBody; // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetClosestPointOnCollision_ReturnValue;   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOverlappingActorByProcessActor_OverlappingActor; // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckProcessActor_bActorIsValid;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping");
static_assert(sizeof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping) == 0x000070, "Wrong size on BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, ProcessActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::ProcessActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, bActorIsValid) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::bActorIsValid' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, OverlappingActor) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::OverlappingActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, CallFunc_GetClosestPointOnCollision_OutPointOnBody) == 0x000038, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::CallFunc_GetClosestPointOnCollision_OutPointOnBody' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, CallFunc_GetClosestPointOnCollision_ReturnValue) == 0x000050, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::CallFunc_GetClosestPointOnCollision_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000054, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, CallFunc_IsOverlappingActor_ReturnValue) == 0x000055, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, CallFunc_GetOverlappingActorByProcessActor_OverlappingActor) == 0x000058, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::CallFunc_GetOverlappingActorByProcessActor_OverlappingActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, CallFunc_CheckProcessActor_bActorIsValid) == 0x000060, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::CallFunc_CheckProcessActor_bActorIsValid' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, CallFunc_IsValid_ReturnValue_1) == 0x000061, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, CallFunc_IsValid_ReturnValue_2) == 0x000062, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000068, "Member 'BP_CameraVolumeActorBase_C_CheckProcessActorAndOverlapping::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.UpdateProcessActors
// 0x0068 (0x0068 - 0x0000)
struct BP_CameraVolumeActorBase_C_UpdateProcessActors final
{
public:
	TArray<class AActor*>                         ActorsToRemove;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Remove_ReturnValue;                   // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_Set_ToArray_Result;                       // 0x0040(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckProcessActorAndOverlapping_bActorIsValid; // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_UpdateProcessActors) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_UpdateProcessActors");
static_assert(sizeof(BP_CameraVolumeActorBase_C_UpdateProcessActors) == 0x000068, "Wrong size on BP_CameraVolumeActorBase_C_UpdateProcessActors");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, ActorsToRemove) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::ActorsToRemove' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_Set_Remove_ReturnValue) == 0x000035, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_Set_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_Set_ToArray_Result) == 0x000040, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_Less_IntInt_ReturnValue_1) == 0x000060, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_IsOverlappingActor_ReturnValue) == 0x000061, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_CheckProcessActorAndOverlapping_bActorIsValid) == 0x000062, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_CheckProcessActorAndOverlapping_bActorIsValid' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateProcessActors, CallFunc_Array_AddUnique_ReturnValue) == 0x000064, "Member 'BP_CameraVolumeActorBase_C_UpdateProcessActors::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.UpdateControlledActorInVolume
// 0x0018 (0x0018 - 0x0000)
struct BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume final
{
public:
	class AActor*                                 Current;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Last;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume");
static_assert(sizeof(BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume) == 0x000018, "Wrong size on BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume, Current) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume::Current' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume, Last) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume::Last' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000011, "Member 'BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume, CallFunc_Set_Contains_ReturnValue) == 0x000012, "Member 'BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'BP_CameraVolumeActorBase_C_UpdateControlledActorInVolume::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ProcessActorOverlapping
// 0x0010 (0x0010 - 0x0000)
struct BP_CameraVolumeActorBase_C_ProcessActorOverlapping final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverlapping;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_ProcessActorOverlapping) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_ProcessActorOverlapping");
static_assert(sizeof(BP_CameraVolumeActorBase_C_ProcessActorOverlapping) == 0x000010, "Wrong size on BP_CameraVolumeActorBase_C_ProcessActorOverlapping");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ProcessActorOverlapping, InActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_ProcessActorOverlapping::InActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ProcessActorOverlapping, bOverlapping) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_ProcessActorOverlapping::bOverlapping' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ProcessActorOverlapping, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_CameraVolumeActorBase_C_ProcessActorOverlapping::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnControlledActorChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_CameraVolumeActorBase_C_OnControlledActorChanged final
{
public:
	class AActor*                                 ControlledActor_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LastControlledActor;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_OnControlledActorChanged) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_OnControlledActorChanged");
static_assert(sizeof(BP_CameraVolumeActorBase_C_OnControlledActorChanged) == 0x000010, "Wrong size on BP_CameraVolumeActorBase_C_OnControlledActorChanged");
static_assert(offsetof(BP_CameraVolumeActorBase_C_OnControlledActorChanged, ControlledActor_0) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_OnControlledActorChanged::ControlledActor_0' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_OnControlledActorChanged, LastControlledActor) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_OnControlledActorChanged::LastControlledActor' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnControlledActorInVolumeChanged
// 0x0018 (0x0018 - 0x0000)
struct BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged final
{
public:
	class AActor*                                 InLastActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InCurrentActor;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged");
static_assert(sizeof(BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged) == 0x000018, "Wrong size on BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged");
static_assert(offsetof(BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged, InLastActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged::InLastActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged, InCurrentActor) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged::InCurrentActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_CameraVolumeActorBase_C_OnControlledActorInVolumeChanged::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnControlledActorBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct BP_CameraVolumeActorBase_C_OnControlledActorBeginOverlap final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_OnControlledActorBeginOverlap) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_OnControlledActorBeginOverlap");
static_assert(sizeof(BP_CameraVolumeActorBase_C_OnControlledActorBeginOverlap) == 0x000008, "Wrong size on BP_CameraVolumeActorBase_C_OnControlledActorBeginOverlap");
static_assert(offsetof(BP_CameraVolumeActorBase_C_OnControlledActorBeginOverlap, InActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_OnControlledActorBeginOverlap::InActor' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnControlledActorEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct BP_CameraVolumeActorBase_C_OnControlledActorEndOverlap final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_OnControlledActorEndOverlap) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_OnControlledActorEndOverlap");
static_assert(sizeof(BP_CameraVolumeActorBase_C_OnControlledActorEndOverlap) == 0x000008, "Wrong size on BP_CameraVolumeActorBase_C_OnControlledActorEndOverlap");
static_assert(offsetof(BP_CameraVolumeActorBase_C_OnControlledActorEndOverlap, InActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_OnControlledActorEndOverlap::InActor' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ExecuteUbergraph_BP_CameraVolumeActorBase
// 0x00B0 (0x00B0 - 0x0000)
struct BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* ControlledActor, class AActor* LastControlledActor)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bServer;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AX6PlayerCameraManager*                 CallFunc_GetX6PlayerCameraManager_ReturnValue;     // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ANikkiPlayerCameraManager_BP_C*         K2Node_DynamicCast_AsNikki_Player_Camera_Manager_BP; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_ControlledActor;                // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_LastControlledActor;            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BP_GetCameraVolumeTargetControlledActor_ControlledActor; // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_Set_ToArray_Result;                       // 0x0078(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_ProcessActor;                   // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Bind;                           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase");
static_assert(sizeof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase) == 0x0000B0, "Wrong size on BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, EntryPoint) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_CustomEvent_DestroyedActor) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_Event_DeltaSeconds) == 0x000034, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_Event_bServer) == 0x000038, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_Event_bServer' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, CallFunc_GetX6PlayerCameraManager_ReturnValue) == 0x000040, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::CallFunc_GetX6PlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_DynamicCast_AsNikki_Player_Camera_Manager_BP) == 0x000048, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_DynamicCast_AsNikki_Player_Camera_Manager_BP' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_CustomEvent_ControlledActor) == 0x000058, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_CustomEvent_ControlledActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_CustomEvent_LastControlledActor) == 0x000060, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_CustomEvent_LastControlledActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, CallFunc_BP_GetCameraVolumeTargetControlledActor_ControlledActor) == 0x000068, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::CallFunc_BP_GetCameraVolumeTargetControlledActor_ControlledActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_Event_EndPlayReason) == 0x000070, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, Temp_int_Loop_Counter_Variable) == 0x000074, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, CallFunc_Set_ToArray_Result) == 0x000078, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, CallFunc_Array_Get_Item) == 0x000088, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, CallFunc_Less_IntInt_ReturnValue) == 0x000094, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, CallFunc_Add_IntInt_ReturnValue) == 0x000098, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_CustomEvent_ProcessActor) == 0x0000A0, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_CustomEvent_ProcessActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, K2Node_CustomEvent_Bind) == 0x0000A8, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::K2Node_CustomEvent_Bind' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase, CallFunc_IsValid_ReturnValue) == 0x0000A9, "Member 'BP_CameraVolumeActorBase_C_ExecuteUbergraph_BP_CameraVolumeActorBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ReceiveActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct BP_CameraVolumeActorBase_C_ReceiveActorEndOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_ReceiveActorEndOverlap) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_ReceiveActorEndOverlap");
static_assert(sizeof(BP_CameraVolumeActorBase_C_ReceiveActorEndOverlap) == 0x000010, "Wrong size on BP_CameraVolumeActorBase_C_ReceiveActorEndOverlap");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorEndOverlap, OtherActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorEndOverlap, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorEndOverlap::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.ReceiveActorBeginOverlap
// 0x0050 (0x0050 - 0x0000)
struct BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ProcessActor;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetProcessActorsByOverlappingActor_Actors; // 0x0020(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap");
static_assert(sizeof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap) == 0x000050, "Wrong size on BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, OtherActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, ProcessActor) == 0x000008, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::ProcessActor' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, CallFunc_GetProcessActorsByOverlappingActor_Actors) == 0x000020, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::CallFunc_GetProcessActorsByOverlappingActor_Actors' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, CallFunc_IsOverlappingActor_ReturnValue) == 0x000049, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap, CallFunc_Set_Contains_ReturnValue) == 0x00004A, "Member 'BP_CameraVolumeActorBase_C_ReceiveActorBeginOverlap::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnTargetActorEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct BP_CameraVolumeActorBase_C_OnTargetActorEndOverlap final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_OnTargetActorEndOverlap) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_OnTargetActorEndOverlap");
static_assert(sizeof(BP_CameraVolumeActorBase_C_OnTargetActorEndOverlap) == 0x000008, "Wrong size on BP_CameraVolumeActorBase_C_OnTargetActorEndOverlap");
static_assert(offsetof(BP_CameraVolumeActorBase_C_OnTargetActorEndOverlap, InActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_OnTargetActorEndOverlap::InActor' has a wrong offset!");

// Function BP_CameraVolumeActorBase.BP_CameraVolumeActorBase_C.OnTargetActorBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct BP_CameraVolumeActorBase_C_OnTargetActorBeginOverlap final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CameraVolumeActorBase_C_OnTargetActorBeginOverlap) == 0x000008, "Wrong alignment on BP_CameraVolumeActorBase_C_OnTargetActorBeginOverlap");
static_assert(sizeof(BP_CameraVolumeActorBase_C_OnTargetActorBeginOverlap) == 0x000008, "Wrong size on BP_CameraVolumeActorBase_C_OnTargetActorBeginOverlap");
static_assert(offsetof(BP_CameraVolumeActorBase_C_OnTargetActorBeginOverlap, InActor) == 0x000000, "Member 'BP_CameraVolumeActorBase_C_OnTargetActorBeginOverlap::InActor' has a wrong offset!");

}

