#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Locomotion_FallState

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "X6Game_structs.hpp"


namespace SDK::Params
{

// Function BPI_Locomotion_FallState.BPI_Locomotion_FallState_C.BPI_Get_CurrentInAirStates
// 0x0004 (0x0004 - 0x0000)
struct BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates final
{
public:
	ERegularFloatingJumpStage                     FallStage;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInSpecialJumpAnim;                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularJumpMode                              RegularJumpMode;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumpingInAir;                                    // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates) == 0x000001, "Wrong alignment on BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates");
static_assert(sizeof(BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates) == 0x000004, "Wrong size on BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates, FallStage) == 0x000000, "Member 'BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates::FallStage' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates, IsInSpecialJumpAnim) == 0x000001, "Member 'BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates::IsInSpecialJumpAnim' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates, RegularJumpMode) == 0x000002, "Member 'BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates::RegularJumpMode' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates, IsJumpingInAir) == 0x000003, "Member 'BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates::IsJumpingInAir' has a wrong offset!");

// Function BPI_Locomotion_FallState.BPI_Locomotion_FallState_C.BPI_Get_CurrentInAirValues
// 0x0010 (0x0010 - 0x0000)
struct BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirValues final
{
public:
	double                                        InCurrentHeight;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimaryDataAsset*                      SpecialJumpDA;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirValues) == 0x000008, "Wrong alignment on BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirValues");
static_assert(sizeof(BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirValues) == 0x000010, "Wrong size on BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirValues");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirValues, InCurrentHeight) == 0x000000, "Member 'BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirValues::InCurrentHeight' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirValues, SpecialJumpDA) == 0x000008, "Member 'BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirValues::SpecialJumpDA' has a wrong offset!");

// Function BPI_Locomotion_FallState.BPI_Locomotion_FallState_C.BPI_Get_EssentialValues
// 0x0040 (0x0040 - 0x0000)
struct BPI_Locomotion_FallState_C_BPI_Get_EssentialValues final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InCurrentAcceleration;                             // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InMaxAcceleration;                                 // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InTurnAroundAngle;                                 // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Locomotion_FallState_C_BPI_Get_EssentialValues) == 0x000008, "Wrong alignment on BPI_Locomotion_FallState_C_BPI_Get_EssentialValues");
static_assert(sizeof(BPI_Locomotion_FallState_C_BPI_Get_EssentialValues) == 0x000040, "Wrong size on BPI_Locomotion_FallState_C_BPI_Get_EssentialValues");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_EssentialValues, InVelocity) == 0x000000, "Member 'BPI_Locomotion_FallState_C_BPI_Get_EssentialValues::InVelocity' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_EssentialValues, InCurrentAcceleration) == 0x000018, "Member 'BPI_Locomotion_FallState_C_BPI_Get_EssentialValues::InCurrentAcceleration' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_EssentialValues, InMaxAcceleration) == 0x000030, "Member 'BPI_Locomotion_FallState_C_BPI_Get_EssentialValues::InMaxAcceleration' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_EssentialValues, InTurnAroundAngle) == 0x000038, "Member 'BPI_Locomotion_FallState_C_BPI_Get_EssentialValues::InTurnAroundAngle' has a wrong offset!");

// Function BPI_Locomotion_FallState.BPI_Locomotion_FallState_C.BPI_Get_MaxSpeedValues
// 0x0018 (0x0018 - 0x0000)
struct BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues final
{
public:
	double                                        CurMinAnalogWalkSpeed;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurConfigMaxSpeed;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurActualMaxSpeed;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues) == 0x000008, "Wrong alignment on BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues");
static_assert(sizeof(BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues) == 0x000018, "Wrong size on BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues, CurMinAnalogWalkSpeed) == 0x000000, "Member 'BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues::CurMinAnalogWalkSpeed' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues, CurConfigMaxSpeed) == 0x000008, "Member 'BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues::CurConfigMaxSpeed' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues, CurActualMaxSpeed) == 0x000010, "Member 'BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues::CurActualMaxSpeed' has a wrong offset!");

// Function BPI_Locomotion_FallState.BPI_Locomotion_FallState_C.UpdateFallState
// 0x0002 (0x0002 - 0x0000)
struct BPI_Locomotion_FallState_C_UpdateFallState final
{
public:
	ERegularFloatingJumpStage                     FallStage;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSlide;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Locomotion_FallState_C_UpdateFallState) == 0x000001, "Wrong alignment on BPI_Locomotion_FallState_C_UpdateFallState");
static_assert(sizeof(BPI_Locomotion_FallState_C_UpdateFallState) == 0x000002, "Wrong size on BPI_Locomotion_FallState_C_UpdateFallState");
static_assert(offsetof(BPI_Locomotion_FallState_C_UpdateFallState, FallStage) == 0x000000, "Member 'BPI_Locomotion_FallState_C_UpdateFallState::FallStage' has a wrong offset!");
static_assert(offsetof(BPI_Locomotion_FallState_C_UpdateFallState, IsSlide) == 0x000001, "Member 'BPI_Locomotion_FallState_C_UpdateFallState::IsSlide' has a wrong offset!");

}

