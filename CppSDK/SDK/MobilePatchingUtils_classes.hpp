#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MobilePatchingUtils

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class MobilePatchingUtils.MobileInstalledContent
// 0x0020 (0x0048 - 0x0028)
class UMobileInstalledContent : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetDiskFreeSpace();
	float GetInstalledContentSize();
	bool Mount(int32 PakOrder, const class FString& MountPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MobileInstalledContent">();
	}
	static class UMobileInstalledContent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMobileInstalledContent>();
	}
};
static_assert(alignof(UMobileInstalledContent) == 0x000008, "Wrong alignment on UMobileInstalledContent");
static_assert(sizeof(UMobileInstalledContent) == 0x000048, "Wrong size on UMobileInstalledContent");

// Class MobilePatchingUtils.MobilePendingContent
// 0x00A0 (0x00E8 - 0x0048)
class UMobilePendingContent final : public UMobileInstalledContent
{
public:
	uint8                                         Pad_48[0xA0];                                      // 0x0048(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AllowConcurrentExecution(bool bAllowed);
	void CancelInstall();
	float GetDownloadSize();
	float GetDownloadSpeed();
	class FText GetDownloadStatusText();
	class FString GetFileShaHashStr(const class FString& FullName);
	bool GetIfAllowConcurrentExecution();
	bool GetIfTotalDownloadRequiredTrimed();
	float GetInstallProgress();
	float GetRequiredDiskSpace();
	int32 GetState();
	float GetStateProgress(const int32 StateIndex);
	float GetTotalDownloadedSize();
	float GetTotalDownloadRequired();
	TSet<class FString> GetValidTags();
	int32 GetVerifyListNum();
	void SetBackupDomain(const class FString& Value);
	void SetCustomVerifyDir(const class FString& InCustomVerifyDir);
	void SetDownloadAgreed(bool Value);
	void SetHotUpdateDownloadMode(int32 InUpdateDownloadMode);
	void SetPreDownloadChunksDir(const class FString& InCustomVerifyDir);
	void SetStagingDirName(const class FString& InStagingDirName);
	void StartInstall(TDelegate<void()> OnSucceeded, TDelegate<void(class FText ErrorText, int32 ErrorCode)> OnFailed, const TSet<class FString>& InstallTags, bool UseInstallDirAsStageDir);
	void TogglePauseInstall();
	void VerifyFolderInvalidFileList(const class FString& Folder, int32 VerifyMode, TArray<class FString>* InvalidFileList);

	int64 GetFileSize(const TArray<class FString>& Filenames) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MobilePendingContent">();
	}
	static class UMobilePendingContent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMobilePendingContent>();
	}
};
static_assert(alignof(UMobilePendingContent) == 0x000008, "Wrong alignment on UMobilePendingContent");
static_assert(sizeof(UMobilePendingContent) == 0x0000E8, "Wrong size on UMobilePendingContent");

// Class MobilePatchingUtils.MobilePatchingLibrary
// 0x0000 (0x0028 - 0x0028)
class UMobilePatchingLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString GetActiveDeviceProfileName();
	static class UMobileInstalledContent* GetInstalledContent(const class FString& InstallDirectory);
	static int32 GetNetworkConnectionIntType();
	static TArray<class FString> GetSupportedPlatformNames();
	static bool HasActiveWiFiConnection();
	static void RequestContent(const class FString& RemoteManifestURL, const class FString& CloudURL, const class FString& InstallDirectory, TDelegate<void(class UMobilePendingContent* MobilePendingContent)> OnSucceeded, TDelegate<void(class FText ErrorText, int32 ErrorCode)> OnFailed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MobilePatchingLibrary">();
	}
	static class UMobilePatchingLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMobilePatchingLibrary>();
	}
};
static_assert(alignof(UMobilePatchingLibrary) == 0x000008, "Wrong alignment on UMobilePatchingLibrary");
static_assert(sizeof(UMobilePatchingLibrary) == 0x000028, "Wrong size on UMobilePatchingLibrary");

}

