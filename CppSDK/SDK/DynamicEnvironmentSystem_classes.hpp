#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicEnvironmentSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DynamicEnvironmentSystem_structs.hpp"
#include "PaperRipples_structs.hpp"


namespace SDK
{

// Class DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UDynamicEnvironmentSystemBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BeginUpdateTime(class ADynamicEnvironmentSystemManager* DynamicEnvironmentSystemManager, float NowTime);
	static void ChangeWeatherEventEnd(class ADynamicWeatherVolume* VolumeFrom, class ADynamicWeatherVolume* VolumeTo);
	static bool ChangeWeatherEventIsReady(class ADynamicWeatherVolume* VolumeFrom, class ADynamicWeatherVolume* VolumeTo);
	static void CopyRuntimeCurveLinearColor(const struct FRuntimeCurveLinearColor& RuntimeCurve, class UCurveLinearColor* CurveLinearColor);
	static class ADynamicEnvironmentSystemManager* GetDynamicEnvironmentSystemManager(class UObject* WorldContextObject);
	static class AEnvironmentLevelConfigManager* GetEnvironmentLevelConfigManager(class UObject* WorldContextObject);
	static class UCurveLinearColor* GetRuntimeCurveLinearColorExternal(const struct FRuntimeCurveLinearColor& RuntimeCurve);
	static struct FLinearColor GetRuntimeCurveLinearColorValue(const struct FRuntimeCurveLinearColor& RuntimeCurve, float InTime);
	static class UCurveFloat* GetRuntimeFloatCurveExternal(const struct FRuntimeFloatCurve& RuntimeCurve);
	static float GetRuntimeFloatCurveValue(const struct FRuntimeFloatCurve& RuntimeCurve, float InTime);
	static bool GetTargetOverridePropertyInCharacterLerpConfigByName(const struct FCharacterLerpConfig& InCharacterLerpConfig, class FName InPropertyName);
	static bool GetTargetOverridePropertyInPPSettingByName(const struct FPostProcessSettings& InPPSetting, class FName InPropertyName);
	static bool IsPlayingInEditor();
	static bool LoadDynamicEnvironmentLerpConfigByDataTable(class UDataTable* EnvironmentConfigFile, const class FName& SpanName, class FString* OutTodConfigPath, class FString* OutPPConfigPath, class FString* OutCharacterConfigPath, struct FDynamicEnvironmentLerpConfig* OutEnvironmentLerpConfig);
	static bool LoadDynamicEnvironmentLerpConfigIfNeeded(class ADynamicWeatherVolume* DynamicWeatherVolume, const class FName& SpanName, class FString* OutTodConfigPath, class FString* OutPPConfigPath, class FString* OutCharacterConfigPath, struct FDynamicEnvironmentLerpConfig* OutEnvironmentLerpConfig);
	static void PreRequestAsyncLoad(class UDataTable* EnvironmentConfigFile);
	static void SaveToCharacterConfig(TSoftClassPtr<class UClass> CharacterConfig, const struct FCharacterLerpConfig& InCharacterSetting);
	static void SaveToPPConfig(TSoftClassPtr<class UClass> PPConfig, const struct FPostProcessSettings& InPPSetting, const struct FMobilePPSettings& InMobilePPSettings);
	static void SaveToTODConfig(TSoftClassPtr<class UClass> TODConfig, const struct FTODLerpConfig& InTODSetting, const TMap<class FString, struct FRuntimeFloatCurve>& InCustomEnvironmentSettingsLerpCurve, const struct FEnvironmentLerpConfig& EnvironmentSetting, const struct FWeatherTexturesConfig& TextureSetting);
	static void SaveToWeatherConfig(TSoftClassPtr<class UClass> WeatherConfig, const struct FWeatherBaseLerpConfig& InWeatherControl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicEnvironmentSystemBPLibrary">();
	}
	static class UDynamicEnvironmentSystemBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicEnvironmentSystemBPLibrary>();
	}
};
static_assert(alignof(UDynamicEnvironmentSystemBPLibrary) == 0x000008, "Wrong alignment on UDynamicEnvironmentSystemBPLibrary");
static_assert(sizeof(UDynamicEnvironmentSystemBPLibrary) == 0x000028, "Wrong size on UDynamicEnvironmentSystemBPLibrary");

// Class DynamicEnvironmentSystem.DynamicEnvironmentSystemManager
// 0x1278 (0x1620 - 0x03A8)
class alignas(0x10) ADynamicEnvironmentSystemManager : public AActor
{
public:
	uint8                                         Pad_3A8[0x10C8];                                   // 0x03A8(0x10C8)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      SunLight;                                          // 0x1470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADirectionalLight*                      MoonLight;                                         // 0x1478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraSunLightIntensity;                            // 0x1480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddLightning;                                      // 0x1484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraMoonLightIntensity;                           // 0x1488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148C[0x4];                                     // 0x148C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASkyLight*                              SkyLight;                                          // 0x1490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraSkyLightIntensity;                            // 0x1498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149C[0x4];                                     // 0x149C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SkySphere;                                         // 0x14A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASkyAtmosphere*                         SkyAtmosphere;                                     // 0x14A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVolumetricCloud*                       VolumetricCloudActor;                              // 0x14B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADynamicWeatherManager*                 WeatherManager;                                    // 0x14B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    TODLevelSequenceActor;                             // 0x14C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AExponentialHeightFog*                  HeightFog;                                         // 0x14C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncFogLocation;                                  // 0x14D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D1[0x3];                                     // 0x14D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogActorHeight;                                    // 0x14D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemapFogHeight;                                   // 0x14D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D9[0x3];                                     // 0x14D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogHeightRangeLow;                                 // 0x14DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightRangeHigh;                                // 0x14E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E4[0x4];                                     // 0x14E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWindDirectionalSource*                 WindDirectionalSource;                             // 0x14E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseServerWind;                                    // 0x14F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F1[0x7];                                     // 0x14F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FinalWindVector;                                   // 0x14F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalWindStrength;                                 // 0x1510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1514[0x4];                                     // 0x1514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADynamicWeatherVolume*                  CurrentActiveTODWeatherVolume;                     // 0x1518(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SkyBoxTextureBlack;                                // 0x1520(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMobile;                                         // 0x1528(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEditor;                                         // 0x1529(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnlighten;                                      // 0x152A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLumen;                                          // 0x152B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152C[0x4];                                     // 0x152C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FinalVolumeName;                                   // 0x1530(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalTODBlendWeight;                               // 0x1540(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalVolumeBlendWeight;                            // 0x1544(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnyWeatherSettingBlend;                           // 0x1548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnvironmentChanging;                            // 0x1549(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154A[0x6];                                     // 0x154A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           CommonMPC;                                         // 0x1550(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           WeatherMPC;                                        // 0x1558(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraParameterCollection*            CommonNPC;                                         // 0x1560(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWeatherPresetConfig>       CommonWPC;                                         // 0x1568(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              SkyMaterial;                                       // 0x1570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Sky;                                               // 0x1578(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              CloudLayerMaterial;                                // 0x1580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               CloudLayer;                                        // 0x1588(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              VolumetricCloudMaterial;                           // 0x1590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               VolumetricCloud;                                   // 0x1598(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              DirLightFunctionMaterial;                          // 0x15A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DirLightFunction;                                  // 0x15A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HourLength;                                        // 0x15B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowTime;                                           // 0x15B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableTimeTick;                                    // 0x15B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15B9[0x3];                                     // 0x15B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunLightIntensityOverride;                         // 0x15BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonLightIntensityOverride;                        // 0x15C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyLightIntensityOverride;                         // 0x15C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C8[0x58];                                    // 0x15C8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlendTextures();
	const struct FPostProcessSettings GetFinalPostProcessSettings();
	const struct FFinalWeatherSettings GetFinalWeatherSettings();
	const struct FPhotoFilterPPSettings GetPhotoFilterFinalPPSettings();
	float GetWeatherWeight(int32 WeatherID);
	void RemoveWeatherWeight(int32 WeatherID);
	void SetWeatherWeight(int32 WeatherID, float Weight);
	bool ShouldUpdateEnvironment();
	bool ShouldUpdateExponentialHeightFog();
	bool ShouldUpdateSkyAtmosphere();
	bool ShouldUpdateSunAndSkyLight();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicEnvironmentSystemManager">();
	}
	static class ADynamicEnvironmentSystemManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADynamicEnvironmentSystemManager>();
	}
};
static_assert(alignof(ADynamicEnvironmentSystemManager) == 0x000010, "Wrong alignment on ADynamicEnvironmentSystemManager");
static_assert(sizeof(ADynamicEnvironmentSystemManager) == 0x001620, "Wrong size on ADynamicEnvironmentSystemManager");
static_assert(offsetof(ADynamicEnvironmentSystemManager, SunLight) == 0x001470, "Member 'ADynamicEnvironmentSystemManager::SunLight' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, MoonLight) == 0x001478, "Member 'ADynamicEnvironmentSystemManager::MoonLight' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, ExtraSunLightIntensity) == 0x001480, "Member 'ADynamicEnvironmentSystemManager::ExtraSunLightIntensity' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, AddLightning) == 0x001484, "Member 'ADynamicEnvironmentSystemManager::AddLightning' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, ExtraMoonLightIntensity) == 0x001488, "Member 'ADynamicEnvironmentSystemManager::ExtraMoonLightIntensity' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, SkyLight) == 0x001490, "Member 'ADynamicEnvironmentSystemManager::SkyLight' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, ExtraSkyLightIntensity) == 0x001498, "Member 'ADynamicEnvironmentSystemManager::ExtraSkyLightIntensity' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, SkySphere) == 0x0014A0, "Member 'ADynamicEnvironmentSystemManager::SkySphere' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, SkyAtmosphere) == 0x0014A8, "Member 'ADynamicEnvironmentSystemManager::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, VolumetricCloudActor) == 0x0014B0, "Member 'ADynamicEnvironmentSystemManager::VolumetricCloudActor' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, WeatherManager) == 0x0014B8, "Member 'ADynamicEnvironmentSystemManager::WeatherManager' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, TODLevelSequenceActor) == 0x0014C0, "Member 'ADynamicEnvironmentSystemManager::TODLevelSequenceActor' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, HeightFog) == 0x0014C8, "Member 'ADynamicEnvironmentSystemManager::HeightFog' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, bSyncFogLocation) == 0x0014D0, "Member 'ADynamicEnvironmentSystemManager::bSyncFogLocation' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, FogActorHeight) == 0x0014D4, "Member 'ADynamicEnvironmentSystemManager::FogActorHeight' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, bRemapFogHeight) == 0x0014D8, "Member 'ADynamicEnvironmentSystemManager::bRemapFogHeight' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, FogHeightRangeLow) == 0x0014DC, "Member 'ADynamicEnvironmentSystemManager::FogHeightRangeLow' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, FogHeightRangeHigh) == 0x0014E0, "Member 'ADynamicEnvironmentSystemManager::FogHeightRangeHigh' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, WindDirectionalSource) == 0x0014E8, "Member 'ADynamicEnvironmentSystemManager::WindDirectionalSource' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, bUseServerWind) == 0x0014F0, "Member 'ADynamicEnvironmentSystemManager::bUseServerWind' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, FinalWindVector) == 0x0014F8, "Member 'ADynamicEnvironmentSystemManager::FinalWindVector' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, FinalWindStrength) == 0x001510, "Member 'ADynamicEnvironmentSystemManager::FinalWindStrength' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, CurrentActiveTODWeatherVolume) == 0x001518, "Member 'ADynamicEnvironmentSystemManager::CurrentActiveTODWeatherVolume' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, SkyBoxTextureBlack) == 0x001520, "Member 'ADynamicEnvironmentSystemManager::SkyBoxTextureBlack' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, bIsMobile) == 0x001528, "Member 'ADynamicEnvironmentSystemManager::bIsMobile' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, bIsEditor) == 0x001529, "Member 'ADynamicEnvironmentSystemManager::bIsEditor' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, bIsEnlighten) == 0x00152A, "Member 'ADynamicEnvironmentSystemManager::bIsEnlighten' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, bIsLumen) == 0x00152B, "Member 'ADynamicEnvironmentSystemManager::bIsLumen' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, FinalVolumeName) == 0x001530, "Member 'ADynamicEnvironmentSystemManager::FinalVolumeName' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, FinalTODBlendWeight) == 0x001540, "Member 'ADynamicEnvironmentSystemManager::FinalTODBlendWeight' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, FinalVolumeBlendWeight) == 0x001544, "Member 'ADynamicEnvironmentSystemManager::FinalVolumeBlendWeight' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, bAnyWeatherSettingBlend) == 0x001548, "Member 'ADynamicEnvironmentSystemManager::bAnyWeatherSettingBlend' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, bIsEnvironmentChanging) == 0x001549, "Member 'ADynamicEnvironmentSystemManager::bIsEnvironmentChanging' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, CommonMPC) == 0x001550, "Member 'ADynamicEnvironmentSystemManager::CommonMPC' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, WeatherMPC) == 0x001558, "Member 'ADynamicEnvironmentSystemManager::WeatherMPC' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, CommonNPC) == 0x001560, "Member 'ADynamicEnvironmentSystemManager::CommonNPC' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, CommonWPC) == 0x001568, "Member 'ADynamicEnvironmentSystemManager::CommonWPC' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, SkyMaterial) == 0x001570, "Member 'ADynamicEnvironmentSystemManager::SkyMaterial' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, Sky) == 0x001578, "Member 'ADynamicEnvironmentSystemManager::Sky' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, CloudLayerMaterial) == 0x001580, "Member 'ADynamicEnvironmentSystemManager::CloudLayerMaterial' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, CloudLayer) == 0x001588, "Member 'ADynamicEnvironmentSystemManager::CloudLayer' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, VolumetricCloudMaterial) == 0x001590, "Member 'ADynamicEnvironmentSystemManager::VolumetricCloudMaterial' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, VolumetricCloud) == 0x001598, "Member 'ADynamicEnvironmentSystemManager::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, DirLightFunctionMaterial) == 0x0015A0, "Member 'ADynamicEnvironmentSystemManager::DirLightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, DirLightFunction) == 0x0015A8, "Member 'ADynamicEnvironmentSystemManager::DirLightFunction' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, HourLength) == 0x0015B0, "Member 'ADynamicEnvironmentSystemManager::HourLength' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, NowTime) == 0x0015B4, "Member 'ADynamicEnvironmentSystemManager::NowTime' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, EnableTimeTick) == 0x0015B8, "Member 'ADynamicEnvironmentSystemManager::EnableTimeTick' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, SunLightIntensityOverride) == 0x0015BC, "Member 'ADynamicEnvironmentSystemManager::SunLightIntensityOverride' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, MoonLightIntensityOverride) == 0x0015C0, "Member 'ADynamicEnvironmentSystemManager::MoonLightIntensityOverride' has a wrong offset!");
static_assert(offsetof(ADynamicEnvironmentSystemManager, SkyLightIntensityOverride) == 0x0015C4, "Member 'ADynamicEnvironmentSystemManager::SkyLightIntensityOverride' has a wrong offset!");

// Class DynamicEnvironmentSystem.TODPresetConfig
// 0x0A18 (0x0A40 - 0x0028)
class UTODPresetConfig : public UObject
{
public:
	struct FTODLerpConfig                         TODSetting;                                        // 0x0028(0x0840)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FRuntimeFloatCurve> CustomEnvironmentSettingsLerpCurve;               // 0x0868(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FEnvironmentLerpConfig                 EnvironmentSetting;                                // 0x08B8(0x0120)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeatherTexturesConfig                 TextureSetting;                                    // 0x09D8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TODPresetConfig">();
	}
	static class UTODPresetConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTODPresetConfig>();
	}
};
static_assert(alignof(UTODPresetConfig) == 0x000008, "Wrong alignment on UTODPresetConfig");
static_assert(sizeof(UTODPresetConfig) == 0x000A40, "Wrong size on UTODPresetConfig");
static_assert(offsetof(UTODPresetConfig, TODSetting) == 0x000028, "Member 'UTODPresetConfig::TODSetting' has a wrong offset!");
static_assert(offsetof(UTODPresetConfig, CustomEnvironmentSettingsLerpCurve) == 0x000868, "Member 'UTODPresetConfig::CustomEnvironmentSettingsLerpCurve' has a wrong offset!");
static_assert(offsetof(UTODPresetConfig, EnvironmentSetting) == 0x0008B8, "Member 'UTODPresetConfig::EnvironmentSetting' has a wrong offset!");
static_assert(offsetof(UTODPresetConfig, TextureSetting) == 0x0009D8, "Member 'UTODPresetConfig::TextureSetting' has a wrong offset!");

// Class DynamicEnvironmentSystem.SunAndSkyLightConfig
// 0x01B0 (0x01D8 - 0x0028)
class USunAndSkyLightConfig final : public UObject
{
public:
	struct FSunLightLerpConfig                    SunLightSettings;                                  // 0x0028(0x0128)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyLightLerpConfig                    SkyLightSettings;                                  // 0x0150(0x0088)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SunAndSkyLightConfig">();
	}
	static class USunAndSkyLightConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USunAndSkyLightConfig>();
	}
};
static_assert(alignof(USunAndSkyLightConfig) == 0x000008, "Wrong alignment on USunAndSkyLightConfig");
static_assert(sizeof(USunAndSkyLightConfig) == 0x0001D8, "Wrong size on USunAndSkyLightConfig");
static_assert(offsetof(USunAndSkyLightConfig, SunLightSettings) == 0x000028, "Member 'USunAndSkyLightConfig::SunLightSettings' has a wrong offset!");
static_assert(offsetof(USunAndSkyLightConfig, SkyLightSettings) == 0x000150, "Member 'USunAndSkyLightConfig::SkyLightSettings' has a wrong offset!");

// Class DynamicEnvironmentSystem.SkyAtmosphereConfig
// 0x0080 (0x00A8 - 0x0028)
class USkyAtmosphereConfig final : public UObject
{
public:
	struct FSkyAtmosphereLerpConfig               SkyAtmosphereSettings;                             // 0x0028(0x007C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkyAtmosphereConfig">();
	}
	static class USkyAtmosphereConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkyAtmosphereConfig>();
	}
};
static_assert(alignof(USkyAtmosphereConfig) == 0x000008, "Wrong alignment on USkyAtmosphereConfig");
static_assert(sizeof(USkyAtmosphereConfig) == 0x0000A8, "Wrong size on USkyAtmosphereConfig");
static_assert(offsetof(USkyAtmosphereConfig, SkyAtmosphereSettings) == 0x000028, "Member 'USkyAtmosphereConfig::SkyAtmosphereSettings' has a wrong offset!");

// Class DynamicEnvironmentSystem.ExponentialHeightFogConfig
// 0x0528 (0x0550 - 0x0028)
class UExponentialHeightFogConfig final : public UObject
{
public:
	struct FExponentialHeightFogLerpConfig        ExponentialHeightFogSettings;                      // 0x0028(0x0528)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExponentialHeightFogConfig">();
	}
	static class UExponentialHeightFogConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExponentialHeightFogConfig>();
	}
};
static_assert(alignof(UExponentialHeightFogConfig) == 0x000008, "Wrong alignment on UExponentialHeightFogConfig");
static_assert(sizeof(UExponentialHeightFogConfig) == 0x000550, "Wrong size on UExponentialHeightFogConfig");
static_assert(offsetof(UExponentialHeightFogConfig, ExponentialHeightFogSettings) == 0x000028, "Member 'UExponentialHeightFogConfig::ExponentialHeightFogSettings' has a wrong offset!");

// Class DynamicEnvironmentSystem.EnvironmentConfig
// 0x0120 (0x0148 - 0x0028)
class UEnvironmentConfig final : public UObject
{
public:
	struct FEnvironmentLerpConfig                 EnvironmentSetting;                                // 0x0028(0x0120)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvironmentConfig">();
	}
	static class UEnvironmentConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvironmentConfig>();
	}
};
static_assert(alignof(UEnvironmentConfig) == 0x000008, "Wrong alignment on UEnvironmentConfig");
static_assert(sizeof(UEnvironmentConfig) == 0x000148, "Wrong size on UEnvironmentConfig");
static_assert(offsetof(UEnvironmentConfig, EnvironmentSetting) == 0x000028, "Member 'UEnvironmentConfig::EnvironmentSetting' has a wrong offset!");

// Class DynamicEnvironmentSystem.PostprocessPresetConfig
// 0x08B8 (0x08E0 - 0x0028)
class UPostprocessPresetConfig : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PPSetting;                                         // 0x0030(0x0850)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMobilePPSettings                      MobilePPSetting;                                   // 0x0880(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PostprocessPresetConfig">();
	}
	static class UPostprocessPresetConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPostprocessPresetConfig>();
	}
};
static_assert(alignof(UPostprocessPresetConfig) == 0x000010, "Wrong alignment on UPostprocessPresetConfig");
static_assert(sizeof(UPostprocessPresetConfig) == 0x0008E0, "Wrong size on UPostprocessPresetConfig");
static_assert(offsetof(UPostprocessPresetConfig, PPSetting) == 0x000030, "Member 'UPostprocessPresetConfig::PPSetting' has a wrong offset!");
static_assert(offsetof(UPostprocessPresetConfig, MobilePPSetting) == 0x000880, "Member 'UPostprocessPresetConfig::MobilePPSetting' has a wrong offset!");

// Class DynamicEnvironmentSystem.WeatherPresetConfig
// 0x0310 (0x0338 - 0x0028)
class UWeatherPresetConfig : public UObject
{
public:
	struct FWeatherBaseLerpConfig                 WeatherControl;                                    // 0x0028(0x0310)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeatherPresetConfig">();
	}
	static class UWeatherPresetConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeatherPresetConfig>();
	}
};
static_assert(alignof(UWeatherPresetConfig) == 0x000008, "Wrong alignment on UWeatherPresetConfig");
static_assert(sizeof(UWeatherPresetConfig) == 0x000338, "Wrong size on UWeatherPresetConfig");
static_assert(offsetof(UWeatherPresetConfig, WeatherControl) == 0x000028, "Member 'UWeatherPresetConfig::WeatherControl' has a wrong offset!");

// Class DynamicEnvironmentSystem.CharacterPresetConfig
// 0x0130 (0x0158 - 0x0028)
class UCharacterPresetConfig : public UObject
{
public:
	struct FCharacterLerpConfig                   CharacterSetting;                                  // 0x0028(0x012C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterPresetConfig">();
	}
	static class UCharacterPresetConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterPresetConfig>();
	}
};
static_assert(alignof(UCharacterPresetConfig) == 0x000008, "Wrong alignment on UCharacterPresetConfig");
static_assert(sizeof(UCharacterPresetConfig) == 0x000158, "Wrong size on UCharacterPresetConfig");
static_assert(offsetof(UCharacterPresetConfig, CharacterSetting) == 0x000028, "Member 'UCharacterPresetConfig::CharacterSetting' has a wrong offset!");

// Class DynamicEnvironmentSystem.DynamicLightningController
// 0x0000 (0x03A8 - 0x03A8)
class ADynamicLightningController final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicLightningController">();
	}
	static class ADynamicLightningController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADynamicLightningController>();
	}
};
static_assert(alignof(ADynamicLightningController) == 0x000008, "Wrong alignment on ADynamicLightningController");
static_assert(sizeof(ADynamicLightningController) == 0x0003A8, "Wrong size on ADynamicLightningController");

// Class DynamicEnvironmentSystem.DynamicSkySphere
// 0x0000 (0x03A8 - 0x03A8)
class ADynamicSkySphere final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicSkySphere">();
	}
	static class ADynamicSkySphere* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADynamicSkySphere>();
	}
};
static_assert(alignof(ADynamicSkySphere) == 0x000008, "Wrong alignment on ADynamicSkySphere");
static_assert(sizeof(ADynamicSkySphere) == 0x0003A8, "Wrong size on ADynamicSkySphere");

// Class DynamicEnvironmentSystem.DynamicWeatherAmbianceComponent
// 0x28E0 (0x2B10 - 0x0230)
class UDynamicWeatherAmbianceComponent final : public USceneComponent
{
public:
	uint8                                         Pad_230[0x8];                                      // 0x0230(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EWeatherAmbianceComponentType                 AmbianceType;                                      // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeatherEnableMode                            EnableMode;                                        // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeatherEnableOnGI                     EnableOnGI;                                        // 0x023A(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B[0x1];                                      // 0x023B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeatherID;                                         // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSunLightLerpConfig                    SunLightSettings;                                  // 0x0240(0x0128)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyLightLerpConfig                    SkyLightSettings;                                  // 0x0368(0x0088)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeatherTexturesConfig                 WeatherTextureSettings;                            // 0x03F0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSkyAtmosphereLerpConfig               SkyAtmosphereSettings;                             // 0x0458(0x007C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExponentialHeightFogLerpConfig        ExponentialHeightFogSettings;                      // 0x04D8(0x0528)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPostProcessSettings                   PostProcessSettings;                               // 0x0A00(0x0850)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMobilePPSettings                      MobilePostProcessSettings;                         // 0x1250(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEnvironmentLerpConfig                 EnvironmentSettings;                               // 0x12B0(0x0120)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterLerpConfig                   CharacterSettings;                                 // 0x13D0(0x012C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14FC[0x4];                                     // 0x14FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeatherBaseLerpConfig                 WeatherControls;                                   // 0x1500(0x0310)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCurve24H                              Curve24H;                                          // 0x1810(0x12F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x2B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRadius;                                       // 0x2B04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x2B08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x2B0C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUnbound : 1;                                      // 0x2B0C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2B0D[0x3];                                     // 0x2B0D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicWeatherAmbianceComponent">();
	}
	static class UDynamicWeatherAmbianceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicWeatherAmbianceComponent>();
	}
};
static_assert(alignof(UDynamicWeatherAmbianceComponent) == 0x000010, "Wrong alignment on UDynamicWeatherAmbianceComponent");
static_assert(sizeof(UDynamicWeatherAmbianceComponent) == 0x002B10, "Wrong size on UDynamicWeatherAmbianceComponent");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, AmbianceType) == 0x000238, "Member 'UDynamicWeatherAmbianceComponent::AmbianceType' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, EnableMode) == 0x000239, "Member 'UDynamicWeatherAmbianceComponent::EnableMode' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, EnableOnGI) == 0x00023A, "Member 'UDynamicWeatherAmbianceComponent::EnableOnGI' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, WeatherID) == 0x00023C, "Member 'UDynamicWeatherAmbianceComponent::WeatherID' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, SunLightSettings) == 0x000240, "Member 'UDynamicWeatherAmbianceComponent::SunLightSettings' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, SkyLightSettings) == 0x000368, "Member 'UDynamicWeatherAmbianceComponent::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, WeatherTextureSettings) == 0x0003F0, "Member 'UDynamicWeatherAmbianceComponent::WeatherTextureSettings' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, SkyAtmosphereSettings) == 0x000458, "Member 'UDynamicWeatherAmbianceComponent::SkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, ExponentialHeightFogSettings) == 0x0004D8, "Member 'UDynamicWeatherAmbianceComponent::ExponentialHeightFogSettings' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, PostProcessSettings) == 0x000A00, "Member 'UDynamicWeatherAmbianceComponent::PostProcessSettings' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, MobilePostProcessSettings) == 0x001250, "Member 'UDynamicWeatherAmbianceComponent::MobilePostProcessSettings' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, EnvironmentSettings) == 0x0012B0, "Member 'UDynamicWeatherAmbianceComponent::EnvironmentSettings' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, CharacterSettings) == 0x0013D0, "Member 'UDynamicWeatherAmbianceComponent::CharacterSettings' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, WeatherControls) == 0x001500, "Member 'UDynamicWeatherAmbianceComponent::WeatherControls' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, Curve24H) == 0x001810, "Member 'UDynamicWeatherAmbianceComponent::Curve24H' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, Priority) == 0x002B00, "Member 'UDynamicWeatherAmbianceComponent::Priority' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, BlendRadius) == 0x002B04, "Member 'UDynamicWeatherAmbianceComponent::BlendRadius' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherAmbianceComponent, BlendWeight) == 0x002B08, "Member 'UDynamicWeatherAmbianceComponent::BlendWeight' has a wrong offset!");

// Class DynamicEnvironmentSystem.DynamicWeatherComponent
// 0x0030 (0x0260 - 0x0230)
class UDynamicWeatherComponent : public USceneComponent
{
public:
	uint8                                         Pad_230[0x18];                                     // 0x0230(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeatherType;                                       // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeatherEffectType                            WeatherEffectType;                                 // 0x024C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendWeight;                                       // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0xC];                                      // 0x0254(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCreated();
	void OnDestroyed();
	void OnFadeIn(float Progress);
	void OnFadeInComplete();
	void OnFadeOut(float Progress);
	void OnFadeOutComplete();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicWeatherComponent">();
	}
	static class UDynamicWeatherComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicWeatherComponent>();
	}
};
static_assert(alignof(UDynamicWeatherComponent) == 0x000010, "Wrong alignment on UDynamicWeatherComponent");
static_assert(sizeof(UDynamicWeatherComponent) == 0x000260, "Wrong size on UDynamicWeatherComponent");
static_assert(offsetof(UDynamicWeatherComponent, WeatherType) == 0x000248, "Member 'UDynamicWeatherComponent::WeatherType' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherComponent, WeatherEffectType) == 0x00024C, "Member 'UDynamicWeatherComponent::WeatherEffectType' has a wrong offset!");
static_assert(offsetof(UDynamicWeatherComponent, BlendWeight) == 0x000250, "Member 'UDynamicWeatherComponent::BlendWeight' has a wrong offset!");

// Class DynamicEnvironmentSystem.DynamicWeatherManager
// 0x0118 (0x04C0 - 0x03A8)
class ADynamicWeatherManager : public AActor
{
public:
	uint8                                         Pad_3A8[0x30];                                     // 0x03A8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             WeatherDataTable;                                  // 0x03D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             QuestDataTable;                                    // 0x03E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FightDataTable;                                    // 0x03E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ShowDataTable;                                     // 0x03F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTODAssets>          TODAssets;                                         // 0x03F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUseSingleTrack;                                   // 0x0448(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_449[0x3];                                      // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SingleTrackSunMoonSwapFactor;                      // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class ADynamicWeatherVolume*, class UDynamicWeatherComponent*> WeatherEffectList;           // 0x0450(0x0050)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UDynamicWeatherComponent*>       ParticleWeatherComponents;                         // 0x04A0(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UDynamicWeatherComponent*>       WeatherList;                                       // 0x04B0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void ChangeToWeather(class ADynamicWeatherVolume* WeatherVolume, float TransitionDelay, float TransitionDuration);
	void ChangeWeather(int32 WeatherIndex, float TransitionDelay, float TransitionDuration);
	void FadeInWeather(class ADynamicWeatherVolume* WeatherVolume, float TransitionDelay, float TransitionDuration);
	void FadeOutWeather(class ADynamicWeatherVolume* WeatherVolume, float TransitionDelay, float TransitionDuration);
	int32 GetCurrentWeather();
	void LimitTODSunRotator(const struct FSunLightLerpConfig& FinalSunLightSetting, class AActor* SkySphere, class ADirectionalLight* SunLight, class ADirectionalLight* MoonLight, float NowTime, float* SunExtraIntensity, float* MoonExtraIntensity);
	void RandomWeather(float TransitionDelay, float TransitionDuration);
	void UpdateEffectPosition(const struct FVector& EffectPosition);
	void WeatherRaining(const struct FWeatherBaseLerpConfig& WeatherSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicWeatherManager">();
	}
	static class ADynamicWeatherManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADynamicWeatherManager>();
	}
};
static_assert(alignof(ADynamicWeatherManager) == 0x000008, "Wrong alignment on ADynamicWeatherManager");
static_assert(sizeof(ADynamicWeatherManager) == 0x0004C0, "Wrong size on ADynamicWeatherManager");
static_assert(offsetof(ADynamicWeatherManager, WeatherDataTable) == 0x0003D8, "Member 'ADynamicWeatherManager::WeatherDataTable' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherManager, QuestDataTable) == 0x0003E0, "Member 'ADynamicWeatherManager::QuestDataTable' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherManager, FightDataTable) == 0x0003E8, "Member 'ADynamicWeatherManager::FightDataTable' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherManager, ShowDataTable) == 0x0003F0, "Member 'ADynamicWeatherManager::ShowDataTable' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherManager, TODAssets) == 0x0003F8, "Member 'ADynamicWeatherManager::TODAssets' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherManager, bUseSingleTrack) == 0x000448, "Member 'ADynamicWeatherManager::bUseSingleTrack' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherManager, SingleTrackSunMoonSwapFactor) == 0x00044C, "Member 'ADynamicWeatherManager::SingleTrackSunMoonSwapFactor' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherManager, WeatherEffectList) == 0x000450, "Member 'ADynamicWeatherManager::WeatherEffectList' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherManager, ParticleWeatherComponents) == 0x0004A0, "Member 'ADynamicWeatherManager::ParticleWeatherComponents' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherManager, WeatherList) == 0x0004B0, "Member 'ADynamicWeatherManager::WeatherList' has a wrong offset!");

// Class DynamicEnvironmentSystem.DynamicWeatherOccluder
// 0x0018 (0x03C0 - 0x03A8)
class ADynamicWeatherOccluder : public AActor
{
public:
	class UTopdownDepthCaptureComponent*          ShadowLightComponent;                              // 0x03A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADynamicWeatherManager*                 WeatherManager;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaDistance;                                     // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicWeatherOccluder">();
	}
	static class ADynamicWeatherOccluder* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADynamicWeatherOccluder>();
	}
};
static_assert(alignof(ADynamicWeatherOccluder) == 0x000008, "Wrong alignment on ADynamicWeatherOccluder");
static_assert(sizeof(ADynamicWeatherOccluder) == 0x0003C0, "Wrong size on ADynamicWeatherOccluder");
static_assert(offsetof(ADynamicWeatherOccluder, ShadowLightComponent) == 0x0003A8, "Member 'ADynamicWeatherOccluder::ShadowLightComponent' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherOccluder, WeatherManager) == 0x0003B0, "Member 'ADynamicWeatherOccluder::WeatherManager' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherOccluder, DeltaDistance) == 0x0003B8, "Member 'ADynamicWeatherOccluder::DeltaDistance' has a wrong offset!");

// Class DynamicEnvironmentSystem.DynamicWeatherVolume
// 0x2B40 (0x2F20 - 0x03E0)
class ADynamicWeatherVolume final : public AVolume
{
public:
	uint8                                         Pad_3E0[0x8];                                      // 0x03E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EWeatherCollisionShape                        CollisionShape;                                    // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeatherVolumeType                            VolumeType;                                        // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeatherEnableMode                            EnableMode;                                        // 0x03EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeatherEnableOnGI                     EnableOnGI;                                        // 0x03EB(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         WeatherID;                                         // 0x03EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSunLightLerpConfig                    SunLightSettings;                                  // 0x03F0(0x0128)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyLightLerpConfig                    SkyLightSettings;                                  // 0x0518(0x0088)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeatherTexturesConfig                 WeatherTextureSettings;                            // 0x05A0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSkyAtmosphereLerpConfig               SkyAtmosphereSettings;                             // 0x0608(0x007C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_684[0x4];                                      // 0x0684(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExponentialHeightFogLerpConfig        ExponentialHeightFogSettings;                      // 0x0688(0x0528)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPostProcessSettings                   PPSetting;                                         // 0x0BB0(0x0850)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMobilePPSettings                      MobilePPSetting;                                   // 0x1400(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FEnvironmentLerpConfig                 EnvironmentSetting;                                // 0x1460(0x0120)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FCharacterLerpConfig                   CharacterSetting;                                  // 0x1580(0x012C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16AC[0x4];                                     // 0x16AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeatherBaseLerpConfig                 WeatherControl;                                    // 0x16B0(0x0310)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCurve24H                              Curve24H;                                          // 0x19C0(0x12F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UDataTable*                             EnvironmentConfigFile;                             // 0x2CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DataTablePath;                                     // 0x2CB8(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataTableRowNum;                                   // 0x2CC8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSortTimeSpans;                              // 0x2CCC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CCD[0x3];                                     // 0x2CCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTimeSpanLerpConfig>            TimeSpans;                                         // 0x2CD0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpotProxyOrientation;                              // 0x2CE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpeakerSize;                                       // 0x2CF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x2CFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRadius;                                       // 0x2D00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x2D04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x2D08(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUnbound : 1;                                      // 0x2D08(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D09[0xB7];                                    // 0x2D09(0x00B7)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UTODPresetConfig*>    TODLerpConfigMap;                                  // 0x2DC0(0x0050)(Edit, BlueprintVisible, ExportObject, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, class UPostprocessPresetConfig*> PPLerpConfigMap;                              // 0x2E10(0x0050)(Edit, BlueprintVisible, ExportObject, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, class UWeatherPresetConfig*> WeatherLerpConfigMap;                             // 0x2E60(0x0050)(Edit, BlueprintVisible, ExportObject, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, class UCharacterPresetConfig*> CharacterLerpConfigMap;                         // 0x2EB0(0x0050)(Edit, BlueprintVisible, ExportObject, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               SkyMaterialInstance;                               // 0x2F00(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               CloudLayerMaterialInstance;                        // 0x2F08(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               VolumetricCloudMaterialInstance;                   // 0x2F10(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DirLightFunctionMaterialInstance;                  // 0x2F18(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ClearMaterialInstancesCache();
	void ClearTimeSpansAndConfigsCache();
	class UCharacterPresetConfig* GetLerpConfigCharacter(const class FName& SpanName, const class FString& ContextString);
	class UPostprocessPresetConfig* GetLerpConfigPP(const class FName& SpanName, const class FString& ContextString);
	class UTODPresetConfig* GetLerpConfigTod(const class FName& SpanName, const class FString& ContextString);
	class UWeatherPresetConfig* GetLerpConfigWeather(const class FName& SpanName, const class FString& ContextString);
	float GetTODLerpWeight();
	const struct FTimeSpanLerpConfig GetTodTimeSpan1();
	const struct FTimeSpanLerpConfig GetTodTimeSpan2();
	void RefreshTimeSpansAndConfigs();
	void ResetTimeSpansAndConfigs();
	void UpdateTimeSpanProgress(class ADynamicEnvironmentSystemManager* DynamicEnvironmentSystemMgr, float NowTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicWeatherVolume">();
	}
	static class ADynamicWeatherVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADynamicWeatherVolume>();
	}
};
static_assert(alignof(ADynamicWeatherVolume) == 0x000010, "Wrong alignment on ADynamicWeatherVolume");
static_assert(sizeof(ADynamicWeatherVolume) == 0x002F20, "Wrong size on ADynamicWeatherVolume");
static_assert(offsetof(ADynamicWeatherVolume, CollisionShape) == 0x0003E8, "Member 'ADynamicWeatherVolume::CollisionShape' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, VolumeType) == 0x0003E9, "Member 'ADynamicWeatherVolume::VolumeType' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, EnableMode) == 0x0003EA, "Member 'ADynamicWeatherVolume::EnableMode' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, EnableOnGI) == 0x0003EB, "Member 'ADynamicWeatherVolume::EnableOnGI' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, WeatherID) == 0x0003EC, "Member 'ADynamicWeatherVolume::WeatherID' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, SunLightSettings) == 0x0003F0, "Member 'ADynamicWeatherVolume::SunLightSettings' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, SkyLightSettings) == 0x000518, "Member 'ADynamicWeatherVolume::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, WeatherTextureSettings) == 0x0005A0, "Member 'ADynamicWeatherVolume::WeatherTextureSettings' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, SkyAtmosphereSettings) == 0x000608, "Member 'ADynamicWeatherVolume::SkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, ExponentialHeightFogSettings) == 0x000688, "Member 'ADynamicWeatherVolume::ExponentialHeightFogSettings' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, PPSetting) == 0x000BB0, "Member 'ADynamicWeatherVolume::PPSetting' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, MobilePPSetting) == 0x001400, "Member 'ADynamicWeatherVolume::MobilePPSetting' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, EnvironmentSetting) == 0x001460, "Member 'ADynamicWeatherVolume::EnvironmentSetting' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, CharacterSetting) == 0x001580, "Member 'ADynamicWeatherVolume::CharacterSetting' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, WeatherControl) == 0x0016B0, "Member 'ADynamicWeatherVolume::WeatherControl' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, Curve24H) == 0x0019C0, "Member 'ADynamicWeatherVolume::Curve24H' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, EnvironmentConfigFile) == 0x002CB0, "Member 'ADynamicWeatherVolume::EnvironmentConfigFile' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, DataTablePath) == 0x002CB8, "Member 'ADynamicWeatherVolume::DataTablePath' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, DataTableRowNum) == 0x002CC8, "Member 'ADynamicWeatherVolume::DataTableRowNum' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, bShouldSortTimeSpans) == 0x002CCC, "Member 'ADynamicWeatherVolume::bShouldSortTimeSpans' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, TimeSpans) == 0x002CD0, "Member 'ADynamicWeatherVolume::TimeSpans' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, SpotProxyOrientation) == 0x002CE0, "Member 'ADynamicWeatherVolume::SpotProxyOrientation' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, SpeakerSize) == 0x002CF8, "Member 'ADynamicWeatherVolume::SpeakerSize' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, Priority) == 0x002CFC, "Member 'ADynamicWeatherVolume::Priority' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, BlendRadius) == 0x002D00, "Member 'ADynamicWeatherVolume::BlendRadius' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, BlendWeight) == 0x002D04, "Member 'ADynamicWeatherVolume::BlendWeight' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, TODLerpConfigMap) == 0x002DC0, "Member 'ADynamicWeatherVolume::TODLerpConfigMap' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, PPLerpConfigMap) == 0x002E10, "Member 'ADynamicWeatherVolume::PPLerpConfigMap' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, WeatherLerpConfigMap) == 0x002E60, "Member 'ADynamicWeatherVolume::WeatherLerpConfigMap' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, CharacterLerpConfigMap) == 0x002EB0, "Member 'ADynamicWeatherVolume::CharacterLerpConfigMap' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, SkyMaterialInstance) == 0x002F00, "Member 'ADynamicWeatherVolume::SkyMaterialInstance' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, CloudLayerMaterialInstance) == 0x002F08, "Member 'ADynamicWeatherVolume::CloudLayerMaterialInstance' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, VolumetricCloudMaterialInstance) == 0x002F10, "Member 'ADynamicWeatherVolume::VolumetricCloudMaterialInstance' has a wrong offset!");
static_assert(offsetof(ADynamicWeatherVolume, DirLightFunctionMaterialInstance) == 0x002F18, "Member 'ADynamicWeatherVolume::DirLightFunctionMaterialInstance' has a wrong offset!");

// Class DynamicEnvironmentSystem.DynamicWetnessComponent
// 0x04B0 (0x06E0 - 0x0230)
class UDynamicWetnessComponent final : public USceneComponent
{
public:
	struct FWetnessConfigParameters               WetnessParams;                                     // 0x0230(0x04A8)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D8[0x8];                                      // 0x06D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLumenReflectionsSpecularScale(float NewValue);
	void SetPuddleHeightOffset(float InValue, bool bToRain);
	void SetRainIntensity(float NewValue);
	void SetReflectionParameters(float InValue, bool bToRain);
	void SetWetness(float InValue, bool bToRain);
	void SetWetnessOcclusionMultiply(float NewValue);
	void SetWetnessSpecularFoliageMultiply(float NewValue);
	void SetWetnessSpecularLandscapeMultiply(float NewValue);
	void UpdateWetnessConfig(const struct FWetnessConfigParameters& NewWetness);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicWetnessComponent">();
	}
	static class UDynamicWetnessComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicWetnessComponent>();
	}
};
static_assert(alignof(UDynamicWetnessComponent) == 0x000010, "Wrong alignment on UDynamicWetnessComponent");
static_assert(sizeof(UDynamicWetnessComponent) == 0x0006E0, "Wrong size on UDynamicWetnessComponent");
static_assert(offsetof(UDynamicWetnessComponent, WetnessParams) == 0x000230, "Member 'UDynamicWetnessComponent::WetnessParams' has a wrong offset!");

// Class DynamicEnvironmentSystem.EnvironmentLevelConfigActor
// 0x06C8 (0x0A70 - 0x03A8)
class AEnvironmentLevelConfigActor : public AActor
{
public:
	class FString                                 EnvironmentWeatherName;                            // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEnvironmentLevelConfig                EnvironmentLevelConfig;                            // 0x03B8(0x01A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FWetnessConfigParameters               WetnessConfig;                                     // 0x0558(0x04A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRipplesConfigParameters               RipplesConfig;                                     // 0x0A00(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A19[0x3];                                      // 0x0A19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Priority;                                          // 0x0A1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    ConsoleVariables;                                  // 0x0A20(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void SetConfigEnabled(bool bNewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvironmentLevelConfigActor">();
	}
	static class AEnvironmentLevelConfigActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEnvironmentLevelConfigActor>();
	}
};
static_assert(alignof(AEnvironmentLevelConfigActor) == 0x000008, "Wrong alignment on AEnvironmentLevelConfigActor");
static_assert(sizeof(AEnvironmentLevelConfigActor) == 0x000A70, "Wrong size on AEnvironmentLevelConfigActor");
static_assert(offsetof(AEnvironmentLevelConfigActor, EnvironmentWeatherName) == 0x0003A8, "Member 'AEnvironmentLevelConfigActor::EnvironmentWeatherName' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigActor, EnvironmentLevelConfig) == 0x0003B8, "Member 'AEnvironmentLevelConfigActor::EnvironmentLevelConfig' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigActor, WetnessConfig) == 0x000558, "Member 'AEnvironmentLevelConfigActor::WetnessConfig' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigActor, RipplesConfig) == 0x000A00, "Member 'AEnvironmentLevelConfigActor::RipplesConfig' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigActor, bEnabled) == 0x000A18, "Member 'AEnvironmentLevelConfigActor::bEnabled' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigActor, Priority) == 0x000A1C, "Member 'AEnvironmentLevelConfigActor::Priority' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigActor, ConsoleVariables) == 0x000A20, "Member 'AEnvironmentLevelConfigActor::ConsoleVariables' has a wrong offset!");

// Class DynamicEnvironmentSystem.EnvironmentLevelConfigManager
// 0x06E8 (0x0A90 - 0x03A8)
class AEnvironmentLevelConfigManager : public AActor
{
public:
	class ADynamicEnvironmentSystemManager*       TODSystem;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LightFunctionSystem;                               // 0x03B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEnvironmentLevelConfigActor*>   ActiveEnvironmentLevelConfigActors;                // 0x03B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	int32                                         AllEnvironmentLevelConfigActorNum;                 // 0x03C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnvironmentLevelConfigActor*           FinalEnvironmentLevelConfigActor;                  // 0x03D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEnvironmentLevelConfig                FinalEnvironmentLevelConfig;                       // 0x03D8(0x01A0)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FWetnessConfigParameters               FinalWetnessConfig;                                // 0x0578(0x04A8)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FRipplesConfigParameters               FinalRipplesConfig;                                // 0x0A20(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    FinalConsoleVariables;                             // 0x0A38(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bDistanceFieldShadowing;                           // 0x0A88(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A89[0x7];                                      // 0x0A89(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnUpdateFinalEnvironmentLevelConfig();
	void UpdateFinalEnvironmentLevelConfig();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvironmentLevelConfigManager">();
	}
	static class AEnvironmentLevelConfigManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEnvironmentLevelConfigManager>();
	}
};
static_assert(alignof(AEnvironmentLevelConfigManager) == 0x000008, "Wrong alignment on AEnvironmentLevelConfigManager");
static_assert(sizeof(AEnvironmentLevelConfigManager) == 0x000A90, "Wrong size on AEnvironmentLevelConfigManager");
static_assert(offsetof(AEnvironmentLevelConfigManager, TODSystem) == 0x0003A8, "Member 'AEnvironmentLevelConfigManager::TODSystem' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigManager, LightFunctionSystem) == 0x0003B0, "Member 'AEnvironmentLevelConfigManager::LightFunctionSystem' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigManager, ActiveEnvironmentLevelConfigActors) == 0x0003B8, "Member 'AEnvironmentLevelConfigManager::ActiveEnvironmentLevelConfigActors' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigManager, AllEnvironmentLevelConfigActorNum) == 0x0003C8, "Member 'AEnvironmentLevelConfigManager::AllEnvironmentLevelConfigActorNum' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigManager, FinalEnvironmentLevelConfigActor) == 0x0003D0, "Member 'AEnvironmentLevelConfigManager::FinalEnvironmentLevelConfigActor' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigManager, FinalEnvironmentLevelConfig) == 0x0003D8, "Member 'AEnvironmentLevelConfigManager::FinalEnvironmentLevelConfig' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigManager, FinalWetnessConfig) == 0x000578, "Member 'AEnvironmentLevelConfigManager::FinalWetnessConfig' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigManager, FinalRipplesConfig) == 0x000A20, "Member 'AEnvironmentLevelConfigManager::FinalRipplesConfig' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigManager, FinalConsoleVariables) == 0x000A38, "Member 'AEnvironmentLevelConfigManager::FinalConsoleVariables' has a wrong offset!");
static_assert(offsetof(AEnvironmentLevelConfigManager, bDistanceFieldShadowing) == 0x000A88, "Member 'AEnvironmentLevelConfigManager::bDistanceFieldShadowing' has a wrong offset!");

// Class DynamicEnvironmentSystem.Interface_PCGEffectVolume
// 0x0000 (0x0000 - 0x0000)
class IInterface_PCGEffectVolume final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Interface_PCGEffectVolume">();
	}
	static class IInterface_PCGEffectVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInterface_PCGEffectVolume>();
	}
};
static_assert(alignof(IInterface_PCGEffectVolume) == 0x000001, "Wrong alignment on IInterface_PCGEffectVolume");
static_assert(sizeof(IInterface_PCGEffectVolume) == 0x000001, "Wrong size on IInterface_PCGEffectVolume");

// Class DynamicEnvironmentSystem.PCGEffectVolume
// 0x0060 (0x0440 - 0x03E0)
class APCGEffectVolume final : public AVolume
{
public:
	uint8                                         Pad_3E0[0x10];                                     // 0x03E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGEffectSettings                     Settings;                                          // 0x03F0(0x0040)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRadius;                                       // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabled : 1;                                      // 0x043C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUnbound : 1;                                      // 0x043C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_43D[0x3];                                      // 0x043D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOrUpdateBlendable(TScriptInterface<class IBlendableInterface> InBlendableObject, float InWeight);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGEffectVolume">();
	}
	static class APCGEffectVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<APCGEffectVolume>();
	}
};
static_assert(alignof(APCGEffectVolume) == 0x000010, "Wrong alignment on APCGEffectVolume");
static_assert(sizeof(APCGEffectVolume) == 0x000440, "Wrong size on APCGEffectVolume");
static_assert(offsetof(APCGEffectVolume, Settings) == 0x0003F0, "Member 'APCGEffectVolume::Settings' has a wrong offset!");
static_assert(offsetof(APCGEffectVolume, Priority) == 0x000430, "Member 'APCGEffectVolume::Priority' has a wrong offset!");
static_assert(offsetof(APCGEffectVolume, BlendRadius) == 0x000434, "Member 'APCGEffectVolume::BlendRadius' has a wrong offset!");
static_assert(offsetof(APCGEffectVolume, BlendWeight) == 0x000438, "Member 'APCGEffectVolume::BlendWeight' has a wrong offset!");

// Class DynamicEnvironmentSystem.PCGEffectVolumeSystem
// 0x0050 (0x0080 - 0x0030)
class UPCGEffectVolumeSystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FPCGEffectSettings GetCurrentSetting() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGEffectVolumeSystem">();
	}
	static class UPCGEffectVolumeSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGEffectVolumeSystem>();
	}
};
static_assert(alignof(UPCGEffectVolumeSystem) == 0x000008, "Wrong alignment on UPCGEffectVolumeSystem");
static_assert(sizeof(UPCGEffectVolumeSystem) == 0x000080, "Wrong size on UPCGEffectVolumeSystem");

}

