#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerWeaponComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Enum_WeaponHandMode_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerWeaponComponent.BP_PlayerWeaponComponent_C
// 0x0168 (0x0210 - 0x00A8)
class UBP_PlayerWeaponComponent_C final : public UActorComponent
{
public:
	Enum_WeaponHandMode                           BP_HandModeA;                                      // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_WeaponHandMode                           BP_HandModeB;                                      // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_UseA;                                           // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_UseHandIK;                                      // 0x00AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BP_LeftHandIKLocation;                             // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BP_RightHandIKRotation;                            // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             BP_LeftIKTransform;                                // 0x00E0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_UseBS;                                          // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace1D*                          BP_InsectNet_Aim;                                  // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlendSpace1D*                          BP_AnimalBrush_Aim;                                // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_UseLean;                                        // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          BP_DisappearFX;                                    // 0x0160(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          BP_DisappearFX_SKM;                                // 0x0188(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UBlendSpace1D*                          BP_CurrentBS;                                      // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             BP_WeaponList;                                     // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UBP_WeaponAnim_C>        BP_WeaponAnim;                                     // 0x01C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UBP_WeaponState_C>       BP_WeaponState;                                    // 0x01E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void BP_RemoveWeapon();
	void BP_UpdateIKLocation(struct FVector* HandIKLocation);
	void BP_UpdateWeaponInfo(class UBP_HandHeldObjTemplate_C* DA_WeaponInfo, bool bEquip, bool bKeepDefaultPose, bool bReplaceDefaultHandHeld);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerWeaponComponent_C">();
	}
	static class UBP_PlayerWeaponComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerWeaponComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerWeaponComponent_C) == 0x000010, "Wrong alignment on UBP_PlayerWeaponComponent_C");
static_assert(sizeof(UBP_PlayerWeaponComponent_C) == 0x000210, "Wrong size on UBP_PlayerWeaponComponent_C");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_HandModeA) == 0x0000A8, "Member 'UBP_PlayerWeaponComponent_C::BP_HandModeA' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_HandModeB) == 0x0000A9, "Member 'UBP_PlayerWeaponComponent_C::BP_HandModeB' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_UseA) == 0x0000AA, "Member 'UBP_PlayerWeaponComponent_C::BP_UseA' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_UseHandIK) == 0x0000AB, "Member 'UBP_PlayerWeaponComponent_C::BP_UseHandIK' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_LeftHandIKLocation) == 0x0000B0, "Member 'UBP_PlayerWeaponComponent_C::BP_LeftHandIKLocation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_RightHandIKRotation) == 0x0000C8, "Member 'UBP_PlayerWeaponComponent_C::BP_RightHandIKRotation' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_LeftIKTransform) == 0x0000E0, "Member 'UBP_PlayerWeaponComponent_C::BP_LeftIKTransform' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_UseBS) == 0x000140, "Member 'UBP_PlayerWeaponComponent_C::BP_UseBS' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_InsectNet_Aim) == 0x000148, "Member 'UBP_PlayerWeaponComponent_C::BP_InsectNet_Aim' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_AnimalBrush_Aim) == 0x000150, "Member 'UBP_PlayerWeaponComponent_C::BP_AnimalBrush_Aim' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_UseLean) == 0x000158, "Member 'UBP_PlayerWeaponComponent_C::BP_UseLean' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_DisappearFX) == 0x000160, "Member 'UBP_PlayerWeaponComponent_C::BP_DisappearFX' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_DisappearFX_SKM) == 0x000188, "Member 'UBP_PlayerWeaponComponent_C::BP_DisappearFX_SKM' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_CurrentBS) == 0x0001B0, "Member 'UBP_PlayerWeaponComponent_C::BP_CurrentBS' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_WeaponList) == 0x0001B8, "Member 'UBP_PlayerWeaponComponent_C::BP_WeaponList' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_WeaponAnim) == 0x0001C0, "Member 'UBP_PlayerWeaponComponent_C::BP_WeaponAnim' has a wrong offset!");
static_assert(offsetof(UBP_PlayerWeaponComponent_C, BP_WeaponState) == 0x0001E8, "Member 'UBP_PlayerWeaponComponent_C::BP_WeaponState' has a wrong offset!");

}

