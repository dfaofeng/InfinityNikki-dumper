#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NikkiPlayerController_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "X6Game_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass NikkiPlayerController_BP.NikkiPlayerController_BP_C
// 0x0030 (0x0A00 - 0x09D0)
class ANikkiPlayerController_BP_C : public AX6NikkiPlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x09D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   NikkiNameInDlg;                                    // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double New_Hour)> GameHourUpdated;                                 // 0x09E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const class FString& Alert_Context)> AnyAlertFired;                // 0x09F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ReceiveTick(float DeltaSeconds);
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveBeginPlay();
	void GetActiveDlgStatus(bool* Is_Any_Dialogue_Active, bool* Need_Player_Movement_Lock);
	void ExecuteUbergraph_NikkiPlayerController_BP(int32 EntryPoint);
	void Debug_SwitchDamiaoPossess(bool bDamiaoPossessed);
	void BP_Private_OnPawnPossess(class APawn* Pawn_0);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NikkiPlayerController_BP_C">();
	}
	static class ANikkiPlayerController_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANikkiPlayerController_BP_C>();
	}
};
static_assert(alignof(ANikkiPlayerController_BP_C) == 0x000008, "Wrong alignment on ANikkiPlayerController_BP_C");
static_assert(sizeof(ANikkiPlayerController_BP_C) == 0x000A00, "Wrong size on ANikkiPlayerController_BP_C");
static_assert(offsetof(ANikkiPlayerController_BP_C, UberGraphFrame) == 0x0009D0, "Member 'ANikkiPlayerController_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerController_BP_C, NikkiNameInDlg) == 0x0009D8, "Member 'ANikkiPlayerController_BP_C::NikkiNameInDlg' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerController_BP_C, GameHourUpdated) == 0x0009E0, "Member 'ANikkiPlayerController_BP_C::GameHourUpdated' has a wrong offset!");
static_assert(offsetof(ANikkiPlayerController_BP_C, AnyAlertFired) == 0x0009F0, "Member 'ANikkiPlayerController_BP_C::AnyAlertFired' has a wrong offset!");

}

