#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PSDKCustomerServiceAIHelp

#include "Basic.hpp"

#include "PSDKBasic_structs.hpp"


namespace SDK
{

// ScriptStruct PSDKCustomerServiceAIHelp.BackendDataStoreRequest
// 0x0010 (0x00C8 - 0x00B8)
struct FBackendDataStoreRequest final : public FJsonData
{
public:
	class FString                                 Data;                                              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBackendDataStoreRequest) == 0x000008, "Wrong alignment on FBackendDataStoreRequest");
static_assert(sizeof(FBackendDataStoreRequest) == 0x0000C8, "Wrong size on FBackendDataStoreRequest");
static_assert(offsetof(FBackendDataStoreRequest, Data) == 0x0000B8, "Member 'FBackendDataStoreRequest::Data' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.BackendDataStoreResponseTicketData
// 0x0018 (0x00D0 - 0x00B8)
struct FBackendDataStoreResponseTicketData final : public FJsonData
{
public:
	class FString                                 ticket;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         valid_seconds;                                     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBackendDataStoreResponseTicketData) == 0x000008, "Wrong alignment on FBackendDataStoreResponseTicketData");
static_assert(sizeof(FBackendDataStoreResponseTicketData) == 0x0000D0, "Wrong size on FBackendDataStoreResponseTicketData");
static_assert(offsetof(FBackendDataStoreResponseTicketData, ticket) == 0x0000B8, "Member 'FBackendDataStoreResponseTicketData::ticket' has a wrong offset!");
static_assert(offsetof(FBackendDataStoreResponseTicketData, valid_seconds) == 0x0000C8, "Member 'FBackendDataStoreResponseTicketData::valid_seconds' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.BackendDataStoreResponse
// 0x00E8 (0x01A0 - 0x00B8)
struct FBackendDataStoreResponse final : public FJsonData
{
public:
	int32                                         Code;                                              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Info;                                              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBackendDataStoreResponseTicketData    Data;                                              // 0x00D0(0x00D0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBackendDataStoreResponse) == 0x000008, "Wrong alignment on FBackendDataStoreResponse");
static_assert(sizeof(FBackendDataStoreResponse) == 0x0001A0, "Wrong size on FBackendDataStoreResponse");
static_assert(offsetof(FBackendDataStoreResponse, Code) == 0x0000B8, "Member 'FBackendDataStoreResponse::Code' has a wrong offset!");
static_assert(offsetof(FBackendDataStoreResponse, Info) == 0x0000C0, "Member 'FBackendDataStoreResponse::Info' has a wrong offset!");
static_assert(offsetof(FBackendDataStoreResponse, Data) == 0x0000D0, "Member 'FBackendDataStoreResponse::Data' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.ConversationConfig
// 0x0038 (0x00F0 - 0x00B8)
struct FConversationConfig final : public FJsonData
{
public:
	int32                                         conversationIntent;                                // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 welcomeMessage;                                    // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 storyNode;                                         // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 alwaysShowHumanSupportButtonInBotPage;             // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConversationConfig) == 0x000008, "Wrong alignment on FConversationConfig");
static_assert(sizeof(FConversationConfig) == 0x0000F0, "Wrong size on FConversationConfig");
static_assert(offsetof(FConversationConfig, conversationIntent) == 0x0000B8, "Member 'FConversationConfig::conversationIntent' has a wrong offset!");
static_assert(offsetof(FConversationConfig, welcomeMessage) == 0x0000C0, "Member 'FConversationConfig::welcomeMessage' has a wrong offset!");
static_assert(offsetof(FConversationConfig, storyNode) == 0x0000D0, "Member 'FConversationConfig::storyNode' has a wrong offset!");
static_assert(offsetof(FConversationConfig, alwaysShowHumanSupportButtonInBotPage) == 0x0000E0, "Member 'FConversationConfig::alwaysShowHumanSupportButtonInBotPage' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.FAQConfig
// 0x0028 (0x00E0 - 0x00B8)
struct FFAQConfig final : public FJsonData
{
public:
	int32                                         fAQSectionType;                                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionID;                                         // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 faqId;                                             // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFAQConfig) == 0x000008, "Wrong alignment on FFAQConfig");
static_assert(sizeof(FFAQConfig) == 0x0000E0, "Wrong size on FFAQConfig");
static_assert(offsetof(FFAQConfig, fAQSectionType) == 0x0000B8, "Member 'FFAQConfig::fAQSectionType' has a wrong offset!");
static_assert(offsetof(FFAQConfig, SectionID) == 0x0000C0, "Member 'FFAQConfig::SectionID' has a wrong offset!");
static_assert(offsetof(FFAQConfig, faqId) == 0x0000D0, "Member 'FFAQConfig::faqId' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.FrontendSupportConfig
// 0x0098 (0x0150 - 0x00B8)
struct FFrontendSupportConfig final : public FJsonData
{
public:
	class FString                                 conversationIntent;                                // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x1];                                       // 0x00C8(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          alwaysShowHumanSupportButtonInBotPage;             // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 welcomeMessage;                                    // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 storyNode;                                         // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SectionID;                                         // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 faqId;                                             // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x4];                                      // 0x0128(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         selectIndex;                                       // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 conversationTitle;                                 // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFrontendSupportConfig) == 0x000008, "Wrong alignment on FFrontendSupportConfig");
static_assert(sizeof(FFrontendSupportConfig) == 0x000150, "Wrong size on FFrontendSupportConfig");
static_assert(offsetof(FFrontendSupportConfig, conversationIntent) == 0x0000B8, "Member 'FFrontendSupportConfig::conversationIntent' has a wrong offset!");
static_assert(offsetof(FFrontendSupportConfig, alwaysShowHumanSupportButtonInBotPage) == 0x0000C9, "Member 'FFrontendSupportConfig::alwaysShowHumanSupportButtonInBotPage' has a wrong offset!");
static_assert(offsetof(FFrontendSupportConfig, welcomeMessage) == 0x0000D0, "Member 'FFrontendSupportConfig::welcomeMessage' has a wrong offset!");
static_assert(offsetof(FFrontendSupportConfig, storyNode) == 0x0000E8, "Member 'FFrontendSupportConfig::storyNode' has a wrong offset!");
static_assert(offsetof(FFrontendSupportConfig, SectionID) == 0x000100, "Member 'FFrontendSupportConfig::SectionID' has a wrong offset!");
static_assert(offsetof(FFrontendSupportConfig, faqId) == 0x000118, "Member 'FFrontendSupportConfig::faqId' has a wrong offset!");
static_assert(offsetof(FFrontendSupportConfig, selectIndex) == 0x00012C, "Member 'FFrontendSupportConfig::selectIndex' has a wrong offset!");
static_assert(offsetof(FFrontendSupportConfig, conversationTitle) == 0x000138, "Member 'FFrontendSupportConfig::conversationTitle' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.FrontendUserConfig
// 0x0078 (0x0130 - 0x00B8)
struct FFrontendUserConfig final : public FJsonData
{
public:
	class FString                                 UserId;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserName;                                          // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 serverId;                                          // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserTags;                                          // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomData;                                        // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFrontendUserConfig) == 0x000008, "Wrong alignment on FFrontendUserConfig");
static_assert(sizeof(FFrontendUserConfig) == 0x000130, "Wrong size on FFrontendUserConfig");
static_assert(offsetof(FFrontendUserConfig, UserId) == 0x0000B8, "Member 'FFrontendUserConfig::UserId' has a wrong offset!");
static_assert(offsetof(FFrontendUserConfig, UserName) == 0x0000D0, "Member 'FFrontendUserConfig::UserName' has a wrong offset!");
static_assert(offsetof(FFrontendUserConfig, serverId) == 0x0000E8, "Member 'FFrontendUserConfig::serverId' has a wrong offset!");
static_assert(offsetof(FFrontendUserConfig, UserTags) == 0x000100, "Member 'FFrontendUserConfig::UserTags' has a wrong offset!");
static_assert(offsetof(FFrontendUserConfig, CustomData) == 0x000118, "Member 'FFrontendUserConfig::CustomData' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.FrontendAIHelpConfig
// 0x0308 (0x03C0 - 0x00B8)
struct FFrontendAIHelpConfig final : public FJsonData
{
public:
	class FString                                 supportMode;                                       // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrontendSupportConfig                 supportConfig;                                     // 0x00D0(0x0150)(NativeAccessSpecifierPublic)
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrontendUserConfig                    UserConfig;                                        // 0x0228(0x0130)(NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0360(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AppKey;                                            // 0x0378(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AppID;                                             // 0x0390(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 domain;                                            // 0x03A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFrontendAIHelpConfig) == 0x000008, "Wrong alignment on FFrontendAIHelpConfig");
static_assert(sizeof(FFrontendAIHelpConfig) == 0x0003C0, "Wrong size on FFrontendAIHelpConfig");
static_assert(offsetof(FFrontendAIHelpConfig, supportMode) == 0x0000B8, "Member 'FFrontendAIHelpConfig::supportMode' has a wrong offset!");
static_assert(offsetof(FFrontendAIHelpConfig, supportConfig) == 0x0000D0, "Member 'FFrontendAIHelpConfig::supportConfig' has a wrong offset!");
static_assert(offsetof(FFrontendAIHelpConfig, UserConfig) == 0x000228, "Member 'FFrontendAIHelpConfig::UserConfig' has a wrong offset!");
static_assert(offsetof(FFrontendAIHelpConfig, Language) == 0x000360, "Member 'FFrontendAIHelpConfig::Language' has a wrong offset!");
static_assert(offsetof(FFrontendAIHelpConfig, AppKey) == 0x000378, "Member 'FFrontendAIHelpConfig::AppKey' has a wrong offset!");
static_assert(offsetof(FFrontendAIHelpConfig, AppID) == 0x000390, "Member 'FFrontendAIHelpConfig::AppID' has a wrong offset!");
static_assert(offsetof(FFrontendAIHelpConfig, domain) == 0x0003A8, "Member 'FFrontendAIHelpConfig::domain' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.FrontendAiHelpRequest
// 0x03C8 (0x0480 - 0x00B8)
struct FFrontendAiHelpRequest final : public FJsonData
{
public:
	struct FFrontendAIHelpConfig                  psSdkAiHelpConfig;                                 // 0x00B8(0x03C0)(NativeAccessSpecifierPublic)
	uint8                                         Pad_478[0x8];                                      // 0x0478(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFrontendAiHelpRequest) == 0x000008, "Wrong alignment on FFrontendAiHelpRequest");
static_assert(sizeof(FFrontendAiHelpRequest) == 0x000480, "Wrong size on FFrontendAiHelpRequest");
static_assert(offsetof(FFrontendAiHelpRequest, psSdkAiHelpConfig) == 0x0000B8, "Member 'FFrontendAiHelpRequest::psSdkAiHelpConfig' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.Language
// 0x0010 (0x00C8 - 0x00B8)
struct FLanguage final : public FJsonData
{
public:
	class FString                                 Language;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLanguage) == 0x000008, "Wrong alignment on FLanguage");
static_assert(sizeof(FLanguage) == 0x0000C8, "Wrong size on FLanguage");
static_assert(offsetof(FLanguage, Language) == 0x0000B8, "Member 'FLanguage::Language' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.UserConfigContent
// 0x0078 (0x0130 - 0x00B8)
struct FUserConfigContent final : public FJsonData
{
public:
	class FString                                 UserId;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserName;                                          // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 serverId;                                          // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserTags;                                          // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomData;                                        // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserConfigContent) == 0x000008, "Wrong alignment on FUserConfigContent");
static_assert(sizeof(FUserConfigContent) == 0x000130, "Wrong size on FUserConfigContent");
static_assert(offsetof(FUserConfigContent, UserId) == 0x0000B8, "Member 'FUserConfigContent::UserId' has a wrong offset!");
static_assert(offsetof(FUserConfigContent, UserName) == 0x0000D0, "Member 'FUserConfigContent::UserName' has a wrong offset!");
static_assert(offsetof(FUserConfigContent, serverId) == 0x0000E8, "Member 'FUserConfigContent::serverId' has a wrong offset!");
static_assert(offsetof(FUserConfigContent, UserTags) == 0x000100, "Member 'FUserConfigContent::UserTags' has a wrong offset!");
static_assert(offsetof(FUserConfigContent, CustomData) == 0x000118, "Member 'FUserConfigContent::CustomData' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.UserConfig
// 0x0138 (0x01F0 - 0x00B8)
struct FUserConfig final : public FJsonData
{
public:
	struct FUserConfigContent                     UserConfig;                                        // 0x00B8(0x0130)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserConfig) == 0x000008, "Wrong alignment on FUserConfig");
static_assert(sizeof(FUserConfig) == 0x0001F0, "Wrong size on FUserConfig");
static_assert(offsetof(FUserConfig, UserConfig) == 0x0000B8, "Member 'FUserConfig::UserConfig' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.OperationConfig
// 0x0018 (0x00D0 - 0x00B8)
struct FOperationConfig final : public FJsonData
{
public:
	int32                                         selectIndex;                                       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 conversationTitle;                                 // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOperationConfig) == 0x000008, "Wrong alignment on FOperationConfig");
static_assert(sizeof(FOperationConfig) == 0x0000D0, "Wrong size on FOperationConfig");
static_assert(offsetof(FOperationConfig, selectIndex) == 0x0000B8, "Member 'FOperationConfig::selectIndex' has a wrong offset!");
static_assert(offsetof(FOperationConfig, conversationTitle) == 0x0000C0, "Member 'FOperationConfig::conversationTitle' has a wrong offset!");

// ScriptStruct PSDKCustomerServiceAIHelp.OpenUIConfig
// 0x0498 (0x0550 - 0x00B8)
struct FOpenUIConfig final : public FJsonData
{
public:
	int32                                         aiHelpType;                                        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConversationConfig                    ConversationConfig;                                // 0x00C0(0x00F0)(NativeAccessSpecifierPublic)
	struct FFAQConfig                             FAQConfig;                                         // 0x01B0(0x00E0)(NativeAccessSpecifierPublic)
	struct FOperationConfig                       OperationConfig;                                   // 0x0290(0x00D0)(NativeAccessSpecifierPublic)
	struct FUserConfig                            UserConfig;                                        // 0x0360(0x01F0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FOpenUIConfig) == 0x000008, "Wrong alignment on FOpenUIConfig");
static_assert(sizeof(FOpenUIConfig) == 0x000550, "Wrong size on FOpenUIConfig");
static_assert(offsetof(FOpenUIConfig, aiHelpType) == 0x0000B8, "Member 'FOpenUIConfig::aiHelpType' has a wrong offset!");
static_assert(offsetof(FOpenUIConfig, ConversationConfig) == 0x0000C0, "Member 'FOpenUIConfig::ConversationConfig' has a wrong offset!");
static_assert(offsetof(FOpenUIConfig, FAQConfig) == 0x0001B0, "Member 'FOpenUIConfig::FAQConfig' has a wrong offset!");
static_assert(offsetof(FOpenUIConfig, OperationConfig) == 0x000290, "Member 'FOpenUIConfig::OperationConfig' has a wrong offset!");
static_assert(offsetof(FOpenUIConfig, UserConfig) == 0x000360, "Member 'FOpenUIConfig::UserConfig' has a wrong offset!");

}

