#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DyEnvSys

#include "Basic.hpp"

#include "BP_DyEnvSys_classes.hpp"
#include "BP_DyEnvSys_parameters.hpp"


namespace SDK
{

// Function BP_DyEnvSys.BP_DyEnvSys_C.World Debug Ash Change
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::World_Debug_Ash_Change(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "World Debug Ash Change");

	Params::BP_DyEnvSys_C_World_Debug_Ash_Change Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.UpdateVolumeSwap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::UpdateVolumeSwap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "UpdateVolumeSwap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.UpdateTimeStamp
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTimeStamp&                TimeStamp1                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FS_TimeStamp&              TimeStamp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::UpdateTimeStamp(const struct FTimeStamp& TimeStamp1, const struct FS_TimeStamp& TimeStamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "UpdateTimeStamp");

	Params::BP_DyEnvSys_C_UpdateTimeStamp Parms{};

	Parms.TimeStamp1 = std::move(TimeStamp1);
	Parms.TimeStamp = std::move(TimeStamp);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.UpdateStreetLight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::UpdateStreetLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "UpdateStreetLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.Update Final Param
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::Update_Final_Param()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "Update Final Param");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.ToggleStreetLamps
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::ToggleStreetLamps(bool On)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "ToggleStreetLamps");

	Params::BP_DyEnvSys_C_ToggleStreetLamps Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.TOD_UpdateSunRotationByAbility
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PitchValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  YawValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::TOD_UpdateSunRotationByAbility(double PitchValue, double YawValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "TOD_UpdateSunRotationByAbility");

	Params::BP_DyEnvSys_C_TOD_UpdateSunRotationByAbility Parms{};

	Parms.PitchValue = PitchValue;
	Parms.YawValue = YawValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.TOD_StopUpdateSunRotationByAbility
// (BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::TOD_StopUpdateSunRotationByAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "TOD_StopUpdateSunRotationByAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.Time Update LS
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::Time_Update_LS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "Time Update LS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.Time Update From Host
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 ToHost                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::Time_Update_From_Host(double* ToHost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "Time Update From Host");

	Params::BP_DyEnvSys_C_Time_Update_From_Host Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ToHost != nullptr)
		*ToHost = Parms.ToHost;
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.Time Update
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::Time_Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "Time Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.StylizedLut
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  LutIntensity                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::StylizedLut(double LutIntensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "StylizedLut");

	Params::BP_DyEnvSys_C_StylizedLut Parms{};

	Parms.LutIntensity = LutIntensity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.SetUseServerTime
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanUse                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::SetUseServerTime(bool CanUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "SetUseServerTime");

	Params::BP_DyEnvSys_C_SetUseServerTime Parms{};

	Parms.CanUse = CanUse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.SetRegionLamps
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RegionId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::SetRegionLamps(double Percent, int32 RegionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "SetRegionLamps");

	Params::BP_DyEnvSys_C_SetRegionLamps Parms{};

	Parms.Percent = Percent;
	Parms.RegionId = RegionId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.SetMoonCurve
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FFloatCurve&               Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_DyEnvSys_C::SetMoonCurve(const struct FFloatCurve& Curve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "SetMoonCurve");

	Params::BP_DyEnvSys_C_SetMoonCurve Parms{};

	Parms.Curve = std::move(Curve);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.SetDenseFogColor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::SetDenseFogColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "SetDenseFogColor");

	Params::BP_DyEnvSys_C_SetDenseFogColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.SetDenseFog
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Intensity                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TransitionTime_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::SetDenseFog(double Intensity, double TransitionTime_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "SetDenseFog");

	Params::BP_DyEnvSys_C_SetDenseFog Parms{};

	Parms.Intensity = Intensity;
	Parms.TransitionTime_0 = TransitionTime_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "ReceiveTick");

	Params::BP_DyEnvSys_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "ReceiveEndPlay");

	Params::BP_DyEnvSys_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_DyEnvSys_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.PrecisionShadow
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isEnter                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::PrecisionShadow(bool isEnter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "PrecisionShadow");

	Params::BP_DyEnvSys_C_PrecisionShadow Parms{};

	Parms.isEnter = isEnter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.PostConstruct
// (BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::PostConstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "PostConstruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.OnActorBeginOverlapWithVolume
// (BlueprintEvent)
// Parameters:
// class ADynamicWeatherVolume*            SrcVolume                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::OnActorBeginOverlapWithVolume(class ADynamicWeatherVolume* SrcVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "OnActorBeginOverlapWithVolume");

	Params::BP_DyEnvSys_C_OnActorBeginOverlapWithVolume Parms{};

	Parms.SrcVolume = SrcVolume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.Manual Operation TOD
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::Manual_Operation_TOD(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "Manual Operation TOD");

	Params::BP_DyEnvSys_C_Manual_Operation_TOD Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.Low Platform SkyAtmosphere
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::Low_Platform_SkyAtmosphere()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "Low Platform SkyAtmosphere");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.LoadCurrentLightInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::LoadCurrentLightInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "LoadCurrentLightInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.Initi Tod Sys
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::Initi_Tod_Sys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "Initi Tod Sys");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.InitForLua
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::InitForLua()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "InitForLua");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.GetWeatherFinal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FWeatherBaseLerpConfig*          Weather_Setting                                        (Parm, OutParm)

void ABP_DyEnvSys_C::GetWeatherFinal(struct FWeatherBaseLerpConfig* Weather_Setting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "GetWeatherFinal");

	Params::BP_DyEnvSys_C_GetWeatherFinal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Weather_Setting != nullptr)
		*Weather_Setting = std::move(Parms.Weather_Setting);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.GetTODFinal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTODLerpConfig*                  TODSetting                                             (Parm, OutParm)

void ABP_DyEnvSys_C::GetTODFinal(struct FTODLerpConfig* TODSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "GetTODFinal");

	Params::BP_DyEnvSys_C_GetTODFinal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TODSetting != nullptr)
		*TODSetting = std::move(Parms.TODSetting);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.GetRoleFinal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FCharacterLerpConfig*            Character_Setting                                      (Parm, OutParm, NoDestructor)

void ABP_DyEnvSys_C::GetRoleFinal(struct FCharacterLerpConfig* Character_Setting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "GetRoleFinal");

	Params::BP_DyEnvSys_C_GetRoleFinal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Character_Setting != nullptr)
		*Character_Setting = std::move(Parms.Character_Setting);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.GetEnvFinal
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FEnvironmentLerpConfig*          Environment_Setting                                    (Parm, OutParm, NoDestructor)

void ABP_DyEnvSys_C::GetEnvFinal(struct FEnvironmentLerpConfig* Environment_Setting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "GetEnvFinal");

	Params::BP_DyEnvSys_C_GetEnvFinal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Environment_Setting != nullptr)
		*Environment_Setting = std::move(Parms.Environment_Setting);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.ExecuteUbergraph_BP_DyEnvSys
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::ExecuteUbergraph_BP_DyEnvSys(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "ExecuteUbergraph_BP_DyEnvSys");

	Params::BP_DyEnvSys_C_ExecuteUbergraph_BP_DyEnvSys Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.DeInitForLua
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::DeInitForLua()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "DeInitForLua");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.ChangeDyEnvVolume
// (BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::ChangeDyEnvVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "ChangeDyEnvVolume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.Calculat Dy Env Interp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Immediate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Pause                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::Calculat_Dy_Env_Interp(double Duration, bool Immediate, bool Pause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "Calculat Dy Env Interp");

	Params::BP_DyEnvSys_C_Calculat_Dy_Env_Interp Parms{};

	Parms.Duration = Duration;
	Parms.Immediate = Immediate;
	Parms.Pause = Pause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.BPI_WeatherData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           WeatherPreset                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::BPI_WeatherData(class UClass* WeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "BPI_WeatherData");

	Params::BP_DyEnvSys_C_BPI_WeatherData Parms{};

	Parms.WeatherPreset = WeatherPreset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.BPI_WeatherChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    RegionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    UnloadWeatherName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    LoadWeatherName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::BPI_WeatherChanged(const class FString& RegionName, const class FString& UnloadWeatherName, const class FString& LoadWeatherName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "BPI_WeatherChanged");

	Params::BP_DyEnvSys_C_BPI_WeatherChanged Parms{};

	Parms.RegionName = std::move(RegionName);
	Parms.UnloadWeatherName = std::move(UnloadWeatherName);
	Parms.LoadWeatherName = std::move(LoadWeatherName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.BPI_TODTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::BPI_TODTime(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "BPI_TODTime");

	Params::BP_DyEnvSys_C_BPI_TODTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.BPI_TodState
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::BPI_TodState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "BPI_TodState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.BPI_SaveAsset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OnlySyncContent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OnlyWriteParam                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::BPI_SaveAsset(bool OnlySyncContent, bool OnlyWriteParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "BPI_SaveAsset");

	Params::BP_DyEnvSys_C_BPI_SaveAsset Parms{};

	Parms.OnlySyncContent = OnlySyncContent;
	Parms.OnlyWriteParam = OnlyWriteParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.BPI_ReloadFile
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::BPI_ReloadFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "BPI_ReloadFile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.BPI_EditorUpdateRole
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              LocalLightColor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DyEnvSys_C::BPI_EditorUpdateRole(const struct FLinearColor& LocalLightColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "BPI_EditorUpdateRole");

	Params::BP_DyEnvSys_C_BPI_EditorUpdateRole Parms{};

	Parms.LocalLightColor = std::move(LocalLightColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.BPI_EditorUpdate
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::BPI_EditorUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "BPI_EditorUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.BPI_CLFSPostContruct
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::BPI_CLFSPostContruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "BPI_CLFSPostContruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.BP_RemovePreRequisitePlayerPawn
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::BP_RemovePreRequisitePlayerPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "BP_RemovePreRequisitePlayerPawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.BP_AddPreRequisitePlayerPawn
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::BP_AddPreRequisitePlayerPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "BP_AddPreRequisitePlayerPawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.Blend SkyTexture2D
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::Blend_SkyTexture2D()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "Blend SkyTexture2D");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.Blend SkyLight Cubemap
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_DyEnvSys_C::Blend_SkyLight_Cubemap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "Blend SkyLight Cubemap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString ABP_DyEnvSys_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "GetModuleName");

	Params::BP_DyEnvSys_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_DyEnvSys.BP_DyEnvSys_C.Get Module Name
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString ABP_DyEnvSys_C::Get_Module_Name() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DyEnvSys_C", "Get Module Name");

	Params::BP_DyEnvSys_C_Get_Module_Name Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

