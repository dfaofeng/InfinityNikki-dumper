#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperPathFinding

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "PaperPathFinding_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// Class PaperPathFinding.NavDynamicObstacleComponent
// 0x0020 (0x0620 - 0x0600)
class UNavDynamicObstacleComponent final : public UBoxComponent
{
public:
	int32                                         ID;                                                // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOpen;                                            // 0x05FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENavModiferType                               ModiferType;                                       // 0x05FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5FE[0x2];                                      // 0x05FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DynamicObstacleBoxExtentAdd;                       // 0x0600(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDrawDynamicObstacleBoxExtent : 1;                 // 0x0618(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_619[0x7];                                      // 0x0619(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavDynamicObstacleComponent">();
	}
	static class UNavDynamicObstacleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavDynamicObstacleComponent>();
	}
};
static_assert(alignof(UNavDynamicObstacleComponent) == 0x000010, "Wrong alignment on UNavDynamicObstacleComponent");
static_assert(sizeof(UNavDynamicObstacleComponent) == 0x000620, "Wrong size on UNavDynamicObstacleComponent");
static_assert(offsetof(UNavDynamicObstacleComponent, ID) == 0x0005F8, "Member 'UNavDynamicObstacleComponent::ID' has a wrong offset!");
static_assert(offsetof(UNavDynamicObstacleComponent, IsOpen) == 0x0005FC, "Member 'UNavDynamicObstacleComponent::IsOpen' has a wrong offset!");
static_assert(offsetof(UNavDynamicObstacleComponent, ModiferType) == 0x0005FD, "Member 'UNavDynamicObstacleComponent::ModiferType' has a wrong offset!");
static_assert(offsetof(UNavDynamicObstacleComponent, DynamicObstacleBoxExtentAdd) == 0x000600, "Member 'UNavDynamicObstacleComponent::DynamicObstacleBoxExtentAdd' has a wrong offset!");

// Class PaperPathFinding.PaperAIController
// 0x0068 (0x0538 - 0x04D0)
class APaperAIController : public AAIController
{
public:
	uint8                                         Pad_4D0[0x68];                                     // 0x04D0(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelCurrentPathFinding();
	void ServerMoveToLocation(int64 InRequestID, const TArray<struct FVector>& InPath, const TArray<int32>& OffMeshIdxs, bool IsPartial);
	void UpdatePath();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperAIController">();
	}
	static class APaperAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperAIController>();
	}
};
static_assert(alignof(APaperAIController) == 0x000008, "Wrong alignment on APaperAIController");
static_assert(sizeof(APaperAIController) == 0x000538, "Wrong size on APaperAIController");

// Class PaperPathFinding.PaperPathFinding
// 0x0000 (0x0028 - 0x0028)
class UPaperPathFinding final : public UObject
{
public:
	static void DrawNavMeshFromServer(class UWorld* InWorld, const TArray<struct FVector>& Tiles, int32 Time);
	static void DrawPathFromServer(const TArray<struct FVector>& InPath);
	static void FindPathSendRequest(class AController* InController, const struct FVector& InStartPoint, const struct FVector& InEndPoint, int64 InRequestID, int32 UserFlags);
	static class ANavigationData* GetNavDataForActor(class AActor* InActor);
	static TArray<struct FBox> GetNearbyActorDynamicCollision(class AActor* InActor, TArray<struct FRotator>* OutRotation, TArray<int32>* OutObstacleID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperPathFinding">();
	}
	static class UPaperPathFinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperPathFinding>();
	}
};
static_assert(alignof(UPaperPathFinding) == 0x000008, "Wrong alignment on UPaperPathFinding");
static_assert(sizeof(UPaperPathFinding) == 0x000028, "Wrong size on UPaperPathFinding");

// Class PaperPathFinding.ServerPathFollowingComponent
// 0x0018 (0x0310 - 0x02F8)
class UServerPathFollowingComponent : public UPathFollowingComponent
{
public:
	uint8                                         Pad_2F8[0x18];                                     // 0x02F8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetCurrentDirection() const;
	int64 GetCurrentPathIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ServerPathFollowingComponent">();
	}
	static class UServerPathFollowingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UServerPathFollowingComponent>();
	}
};
static_assert(alignof(UServerPathFollowingComponent) == 0x000008, "Wrong alignment on UServerPathFollowingComponent");
static_assert(sizeof(UServerPathFollowingComponent) == 0x000310, "Wrong size on UServerPathFollowingComponent");

}

