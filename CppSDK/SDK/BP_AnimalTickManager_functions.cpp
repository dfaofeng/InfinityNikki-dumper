#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnimalTickManager

#include "Basic.hpp"

#include "BP_AnimalTickManager_classes.hpp"
#include "BP_AnimalTickManager_parameters.hpp"


namespace SDK
{

// Function BP_AnimalTickManager.BP_AnimalTickManager_C.UpdateIsSelfActive
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AnimalTickManager_C::UpdateIsSelfActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalTickManager_C", "UpdateIsSelfActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalTickManager.BP_AnimalTickManager_C.PostOwnerActorSignificanceChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   Significance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TickInterval                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TickPaused                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESignificanceLevel                      SignificanceLevel                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AnimalTickManager_C::PostOwnerActorSignificanceChanged(class AActor* Actor, float Significance, float TickInterval, bool TickPaused, ESignificanceLevel SignificanceLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalTickManager_C", "PostOwnerActorSignificanceChanged");

	Params::BP_AnimalTickManager_C_PostOwnerActorSignificanceChanged Parms{};

	Parms.Actor = Actor;
	Parms.Significance = Significance;
	Parms.TickInterval = TickInterval;
	Parms.TickPaused = TickPaused;
	Parms.SignificanceLevel = SignificanceLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalTickManager.BP_AnimalTickManager_C.NotifyOwnerActorTickEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AnimalTickManager_C::NotifyOwnerActorTickEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalTickManager_C", "NotifyOwnerActorTickEnabled");

	Params::BP_AnimalTickManager_C_NotifyOwnerActorTickEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalTickManager.BP_AnimalTickManager_C.Init
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AnimalTickManager_C::Init(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalTickManager_C", "Init");

	Params::BP_AnimalTickManager_C_Init Parms{};

	Parms.Owner = Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalTickManager.BP_AnimalTickManager_C.ForceSetIsSelfActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewActive                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AnimalTickManager_C::ForceSetIsSelfActive(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalTickManager_C", "ForceSetIsSelfActive");

	Params::BP_AnimalTickManager_C_ForceSetIsSelfActive Parms{};

	Parms.bNewActive = bNewActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AnimalTickManager.BP_AnimalTickManager_C.DeInit
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AnimalTickManager_C::DeInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalTickManager_C", "DeInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AnimalTickManager.BP_AnimalTickManager_C.BP_IsGlobalAnimalTickManagerActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bActive                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AnimalTickManager_C::BP_IsGlobalAnimalTickManagerActive(bool* bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalTickManager_C", "BP_IsGlobalAnimalTickManagerActive");

	Params::BP_AnimalTickManager_C_BP_IsGlobalAnimalTickManagerActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bActive != nullptr)
		*bActive = Parms.bActive;
}


// Function BP_AnimalTickManager.BP_AnimalTickManager_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_AnimalTickManager_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AnimalTickManager_C", "GetModuleName");

	Params::BP_AnimalTickManager_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

