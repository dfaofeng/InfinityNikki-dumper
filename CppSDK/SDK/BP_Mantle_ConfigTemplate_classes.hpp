#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mantle_ConfigTemplate

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EMantleType_structs.hpp"
#include "MantleParams_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Mantle_ConfigTemplate.BP_Mantle_ConfigTemplate_C
// 0x0160 (0x0190 - 0x0030)
class UBP_Mantle_ConfigTemplate_C final : public UPrimaryDataAsset
{
public:
	bool                                          BP_EnableOnGround;                                 // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_MinLedgeHeight;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MaxLedgeHeight;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ReachDistance;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_LowToMidHeightBoundary;                         // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MidToHighHeightBoundary;                        // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MinLedgeHeightInFalling;                        // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MaxLedgeHeightInFalling;                        // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ReachDistanceInFalling;                         // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MinToLowHeightBoundaryInFalling;                // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_LowToMidHeightBoundaryInFalling;                // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MidToHighHeightBoundaryInFalling;               // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_LeastHeightInFalling;                           // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_LeastHeightCheckCapsuleRadius;                  // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableMantleFeature;                            // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EMantleType, struct FMantleParams>       BP_MantleInfo;                                     // 0x00A8(0x0050)(Edit, BlueprintVisible)
	double                                        BP_ForwardTraceCapsuleRedius;                      // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MaxDeflectionYawAngle;                          // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_DownwardTraceRadius;                            // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_DownwardTraceForwardOffset;                     // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MinMantleCoolDown;                              // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MaxMantleCoolDown;                              // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MantleCoolDownAdvanceTimeByCount;               // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MaxLimitMantleTime;                             // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableGradCheck;                                // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BP_GradCheckAccuracy;                              // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_MinimumLandingAreaSideLength;                   // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ZOffset;                                        // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               BP_DrawDebugType;                                  // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               BP_TraceType;                                      // 0x0151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             BP_ValidMantleCollisionChannel;                    // 0x0152(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_153[0x5];                                      // 0x0153(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_Iterations;                                     // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BP_AdditionalTargetLocation;                       // 0x0160(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableMustJumpOperationBeforeMantle;            // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         BP_TriggerMantleVFX;                               // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            BP_SKMeshLerpSpeed_Curve;                          // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Mantle_ConfigTemplate_C">();
	}
	static class UBP_Mantle_ConfigTemplate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Mantle_ConfigTemplate_C>();
	}
};
static_assert(alignof(UBP_Mantle_ConfigTemplate_C) == 0x000008, "Wrong alignment on UBP_Mantle_ConfigTemplate_C");
static_assert(sizeof(UBP_Mantle_ConfigTemplate_C) == 0x000190, "Wrong size on UBP_Mantle_ConfigTemplate_C");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_EnableOnGround) == 0x000030, "Member 'UBP_Mantle_ConfigTemplate_C::BP_EnableOnGround' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MinLedgeHeight) == 0x000038, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MinLedgeHeight' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MaxLedgeHeight) == 0x000040, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MaxLedgeHeight' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_ReachDistance) == 0x000048, "Member 'UBP_Mantle_ConfigTemplate_C::BP_ReachDistance' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_LowToMidHeightBoundary) == 0x000050, "Member 'UBP_Mantle_ConfigTemplate_C::BP_LowToMidHeightBoundary' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MidToHighHeightBoundary) == 0x000058, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MidToHighHeightBoundary' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MinLedgeHeightInFalling) == 0x000060, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MinLedgeHeightInFalling' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MaxLedgeHeightInFalling) == 0x000068, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MaxLedgeHeightInFalling' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_ReachDistanceInFalling) == 0x000070, "Member 'UBP_Mantle_ConfigTemplate_C::BP_ReachDistanceInFalling' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MinToLowHeightBoundaryInFalling) == 0x000078, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MinToLowHeightBoundaryInFalling' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_LowToMidHeightBoundaryInFalling) == 0x000080, "Member 'UBP_Mantle_ConfigTemplate_C::BP_LowToMidHeightBoundaryInFalling' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MidToHighHeightBoundaryInFalling) == 0x000088, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MidToHighHeightBoundaryInFalling' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_LeastHeightInFalling) == 0x000090, "Member 'UBP_Mantle_ConfigTemplate_C::BP_LeastHeightInFalling' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_LeastHeightCheckCapsuleRadius) == 0x000098, "Member 'UBP_Mantle_ConfigTemplate_C::BP_LeastHeightCheckCapsuleRadius' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_EnableMantleFeature) == 0x0000A0, "Member 'UBP_Mantle_ConfigTemplate_C::BP_EnableMantleFeature' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MantleInfo) == 0x0000A8, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MantleInfo' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_ForwardTraceCapsuleRedius) == 0x0000F8, "Member 'UBP_Mantle_ConfigTemplate_C::BP_ForwardTraceCapsuleRedius' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MaxDeflectionYawAngle) == 0x000100, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MaxDeflectionYawAngle' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_DownwardTraceRadius) == 0x000108, "Member 'UBP_Mantle_ConfigTemplate_C::BP_DownwardTraceRadius' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_DownwardTraceForwardOffset) == 0x000110, "Member 'UBP_Mantle_ConfigTemplate_C::BP_DownwardTraceForwardOffset' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MinMantleCoolDown) == 0x000118, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MinMantleCoolDown' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MaxMantleCoolDown) == 0x000120, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MaxMantleCoolDown' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MantleCoolDownAdvanceTimeByCount) == 0x000128, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MantleCoolDownAdvanceTimeByCount' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MaxLimitMantleTime) == 0x000130, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MaxLimitMantleTime' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_EnableGradCheck) == 0x000138, "Member 'UBP_Mantle_ConfigTemplate_C::BP_EnableGradCheck' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_GradCheckAccuracy) == 0x00013C, "Member 'UBP_Mantle_ConfigTemplate_C::BP_GradCheckAccuracy' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_MinimumLandingAreaSideLength) == 0x000140, "Member 'UBP_Mantle_ConfigTemplate_C::BP_MinimumLandingAreaSideLength' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_ZOffset) == 0x000148, "Member 'UBP_Mantle_ConfigTemplate_C::BP_ZOffset' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_DrawDebugType) == 0x000150, "Member 'UBP_Mantle_ConfigTemplate_C::BP_DrawDebugType' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_TraceType) == 0x000151, "Member 'UBP_Mantle_ConfigTemplate_C::BP_TraceType' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_ValidMantleCollisionChannel) == 0x000152, "Member 'UBP_Mantle_ConfigTemplate_C::BP_ValidMantleCollisionChannel' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_Iterations) == 0x000158, "Member 'UBP_Mantle_ConfigTemplate_C::BP_Iterations' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_AdditionalTargetLocation) == 0x000160, "Member 'UBP_Mantle_ConfigTemplate_C::BP_AdditionalTargetLocation' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_EnableMustJumpOperationBeforeMantle) == 0x000178, "Member 'UBP_Mantle_ConfigTemplate_C::BP_EnableMustJumpOperationBeforeMantle' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_TriggerMantleVFX) == 0x000180, "Member 'UBP_Mantle_ConfigTemplate_C::BP_TriggerMantleVFX' has a wrong offset!");
static_assert(offsetof(UBP_Mantle_ConfigTemplate_C, BP_SKMeshLerpSpeed_Curve) == 0x000188, "Member 'UBP_Mantle_ConfigTemplate_C::BP_SKMeshLerpSpeed_Curve' has a wrong offset!");

}

