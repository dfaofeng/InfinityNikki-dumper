#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_AbilityBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GA_AbilityBase.GA_AbilityBase_C.BP_GetActorHP
// 0x0008 (0x0008 - 0x0000)
struct GA_AbilityBase_C_BP_GetActorHP final
{
public:
	double                                        HP;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_AbilityBase_C_BP_GetActorHP) == 0x000008, "Wrong alignment on GA_AbilityBase_C_BP_GetActorHP");
static_assert(sizeof(GA_AbilityBase_C_BP_GetActorHP) == 0x000008, "Wrong size on GA_AbilityBase_C_BP_GetActorHP");
static_assert(offsetof(GA_AbilityBase_C_BP_GetActorHP, HP) == 0x000000, "Member 'GA_AbilityBase_C_BP_GetActorHP::HP' has a wrong offset!");

// Function GA_AbilityBase.GA_AbilityBase_C.BP_GetActorMaxHP
// 0x0008 (0x0008 - 0x0000)
struct GA_AbilityBase_C_BP_GetActorMaxHP final
{
public:
	double                                        MaxHP;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_AbilityBase_C_BP_GetActorMaxHP) == 0x000008, "Wrong alignment on GA_AbilityBase_C_BP_GetActorMaxHP");
static_assert(sizeof(GA_AbilityBase_C_BP_GetActorMaxHP) == 0x000008, "Wrong size on GA_AbilityBase_C_BP_GetActorMaxHP");
static_assert(offsetof(GA_AbilityBase_C_BP_GetActorMaxHP, MaxHP) == 0x000000, "Member 'GA_AbilityBase_C_BP_GetActorMaxHP::MaxHP' has a wrong offset!");

// Function GA_AbilityBase.GA_AbilityBase_C.BP_GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct GA_AbilityBase_C_BP_GetTargetActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_AbilityBase_C_BP_GetTargetActor) == 0x000008, "Wrong alignment on GA_AbilityBase_C_BP_GetTargetActor");
static_assert(sizeof(GA_AbilityBase_C_BP_GetTargetActor) == 0x000008, "Wrong size on GA_AbilityBase_C_BP_GetTargetActor");
static_assert(offsetof(GA_AbilityBase_C_BP_GetTargetActor, TargetActor) == 0x000000, "Member 'GA_AbilityBase_C_BP_GetTargetActor::TargetActor' has a wrong offset!");

// Function GA_AbilityBase.GA_AbilityBase_C.BP_OnActivateAbility
// 0x0008 (0x0008 - 0x0000)
struct GA_AbilityBase_C_BP_OnActivateAbility final
{
public:
	double                                        NewLocalVar;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_AbilityBase_C_BP_OnActivateAbility) == 0x000008, "Wrong alignment on GA_AbilityBase_C_BP_OnActivateAbility");
static_assert(sizeof(GA_AbilityBase_C_BP_OnActivateAbility) == 0x000008, "Wrong size on GA_AbilityBase_C_BP_OnActivateAbility");
static_assert(offsetof(GA_AbilityBase_C_BP_OnActivateAbility, NewLocalVar) == 0x000000, "Member 'GA_AbilityBase_C_BP_OnActivateAbility::NewLocalVar' has a wrong offset!");

// Function GA_AbilityBase.GA_AbilityBase_C.BP_OnEndAbilityExcludeJumpToGA
// 0x0001 (0x0001 - 0x0000)
struct GA_AbilityBase_C_BP_OnEndAbilityExcludeJumpToGA final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_AbilityBase_C_BP_OnEndAbilityExcludeJumpToGA) == 0x000001, "Wrong alignment on GA_AbilityBase_C_BP_OnEndAbilityExcludeJumpToGA");
static_assert(sizeof(GA_AbilityBase_C_BP_OnEndAbilityExcludeJumpToGA) == 0x000001, "Wrong size on GA_AbilityBase_C_BP_OnEndAbilityExcludeJumpToGA");
static_assert(offsetof(GA_AbilityBase_C_BP_OnEndAbilityExcludeJumpToGA, bWasCancelled) == 0x000000, "Member 'GA_AbilityBase_C_BP_OnEndAbilityExcludeJumpToGA::bWasCancelled' has a wrong offset!");

// Function GA_AbilityBase.GA_AbilityBase_C.BP_PlayLevelSequence
// 0x00A0 (0x00A0 - 0x0000)
struct GA_AbilityBase_C_BP_PlayLevelSequence final
{
public:
	class ULevelSequence*                         SequenceAsset;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          HideHUD;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMovieSceneSequencePlaybackSettings    PlaybackSetting;                                   // 0x0070(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(GA_AbilityBase_C_BP_PlayLevelSequence) == 0x000010, "Wrong alignment on GA_AbilityBase_C_BP_PlayLevelSequence");
static_assert(sizeof(GA_AbilityBase_C_BP_PlayLevelSequence) == 0x0000A0, "Wrong size on GA_AbilityBase_C_BP_PlayLevelSequence");
static_assert(offsetof(GA_AbilityBase_C_BP_PlayLevelSequence, SequenceAsset) == 0x000000, "Member 'GA_AbilityBase_C_BP_PlayLevelSequence::SequenceAsset' has a wrong offset!");
static_assert(offsetof(GA_AbilityBase_C_BP_PlayLevelSequence, HideHUD) == 0x000008, "Member 'GA_AbilityBase_C_BP_PlayLevelSequence::HideHUD' has a wrong offset!");
static_assert(offsetof(GA_AbilityBase_C_BP_PlayLevelSequence, Transform) == 0x000010, "Member 'GA_AbilityBase_C_BP_PlayLevelSequence::Transform' has a wrong offset!");
static_assert(offsetof(GA_AbilityBase_C_BP_PlayLevelSequence, PlaybackSetting) == 0x000070, "Member 'GA_AbilityBase_C_BP_PlayLevelSequence::PlaybackSetting' has a wrong offset!");

// Function GA_AbilityBase.GA_AbilityBase_C.ExecuteUbergraph_GA_AbilityBase
// 0x0008 (0x0008 - 0x0000)
struct GA_AbilityBase_C_ExecuteUbergraph_GA_AbilityBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_AbilityBase_C_ExecuteUbergraph_GA_AbilityBase) == 0x000004, "Wrong alignment on GA_AbilityBase_C_ExecuteUbergraph_GA_AbilityBase");
static_assert(sizeof(GA_AbilityBase_C_ExecuteUbergraph_GA_AbilityBase) == 0x000008, "Wrong size on GA_AbilityBase_C_ExecuteUbergraph_GA_AbilityBase");
static_assert(offsetof(GA_AbilityBase_C_ExecuteUbergraph_GA_AbilityBase, EntryPoint) == 0x000000, "Member 'GA_AbilityBase_C_ExecuteUbergraph_GA_AbilityBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_AbilityBase_C_ExecuteUbergraph_GA_AbilityBase, K2Node_Event_bWasCancelled) == 0x000004, "Member 'GA_AbilityBase_C_ExecuteUbergraph_GA_AbilityBase::K2Node_Event_bWasCancelled' has a wrong offset!");

// Function GA_AbilityBase.GA_AbilityBase_C.JumpToAbility
// 0x00B8 (0x00B8 - 0x0000)
struct GA_AbilityBase_C_JumpToAbility final
{
public:
	struct FGameplayTag                           TriggerTag;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     Payload;                                           // 0x0008(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_AbilityBase_C_JumpToAbility) == 0x000008, "Wrong alignment on GA_AbilityBase_C_JumpToAbility");
static_assert(sizeof(GA_AbilityBase_C_JumpToAbility) == 0x0000B8, "Wrong size on GA_AbilityBase_C_JumpToAbility");
static_assert(offsetof(GA_AbilityBase_C_JumpToAbility, TriggerTag) == 0x000000, "Member 'GA_AbilityBase_C_JumpToAbility::TriggerTag' has a wrong offset!");
static_assert(offsetof(GA_AbilityBase_C_JumpToAbility, Payload) == 0x000008, "Member 'GA_AbilityBase_C_JumpToAbility::Payload' has a wrong offset!");

// Function GA_AbilityBase.GA_AbilityBase_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_AbilityBase_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_AbilityBase_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_AbilityBase_C_K2_OnEndAbility");
static_assert(sizeof(GA_AbilityBase_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_AbilityBase_C_K2_OnEndAbility");
static_assert(offsetof(GA_AbilityBase_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_AbilityBase_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_AbilityBase.GA_AbilityBase_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct GA_AbilityBase_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(GA_AbilityBase_C_GetModuleName) == 0x000008, "Wrong alignment on GA_AbilityBase_C_GetModuleName");
static_assert(sizeof(GA_AbilityBase_C_GetModuleName) == 0x000010, "Wrong size on GA_AbilityBase_C_GetModuleName");
static_assert(offsetof(GA_AbilityBase_C_GetModuleName, ReturnValue) == 0x000000, "Member 'GA_AbilityBase_C_GetModuleName::ReturnValue' has a wrong offset!");

}

