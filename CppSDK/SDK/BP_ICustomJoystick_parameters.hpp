#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ICustomJoystick

#include "Basic.hpp"

#include "EUTCJoystickMode_structs.hpp"
#include "F_JoystickCustomConfig_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.UseWidgetSize
// 0x0001 (0x0001 - 0x0000)
struct BP_ICustomJoystick_C_UseWidgetSize final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_UseWidgetSize) == 0x000001, "Wrong alignment on BP_ICustomJoystick_C_UseWidgetSize");
static_assert(sizeof(BP_ICustomJoystick_C_UseWidgetSize) == 0x000001, "Wrong size on BP_ICustomJoystick_C_UseWidgetSize");
static_assert(offsetof(BP_ICustomJoystick_C_UseWidgetSize, bUse) == 0x000000, "Member 'BP_ICustomJoystick_C_UseWidgetSize::bUse' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.UseCustomConfig
// 0x0001 (0x0001 - 0x0000)
struct BP_ICustomJoystick_C_UseCustomConfig final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_UseCustomConfig) == 0x000001, "Wrong alignment on BP_ICustomJoystick_C_UseCustomConfig");
static_assert(sizeof(BP_ICustomJoystick_C_UseCustomConfig) == 0x000001, "Wrong size on BP_ICustomJoystick_C_UseCustomConfig");
static_assert(offsetof(BP_ICustomJoystick_C_UseCustomConfig, bUse) == 0x000000, "Member 'BP_ICustomJoystick_C_UseCustomConfig::bUse' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.SetUTCJoystickComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_ICustomJoystick_C_SetUTCJoystickComponent final
{
public:
	class UUTCJoystickComponent_C*                joystickComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_SetUTCJoystickComponent) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_SetUTCJoystickComponent");
static_assert(sizeof(BP_ICustomJoystick_C_SetUTCJoystickComponent) == 0x000008, "Wrong size on BP_ICustomJoystick_C_SetUTCJoystickComponent");
static_assert(offsetof(BP_ICustomJoystick_C_SetUTCJoystickComponent, joystickComponent) == 0x000000, "Member 'BP_ICustomJoystick_C_SetUTCJoystickComponent::joystickComponent' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.Set Size
// 0x0010 (0x0010 - 0x0000)
struct BP_ICustomJoystick_C_Set_Size final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_Set_Size) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_Set_Size");
static_assert(sizeof(BP_ICustomJoystick_C_Set_Size) == 0x000010, "Wrong size on BP_ICustomJoystick_C_Set_Size");
static_assert(offsetof(BP_ICustomJoystick_C_Set_Size, Size) == 0x000000, "Member 'BP_ICustomJoystick_C_Set_Size::Size' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.Set Max Size
// 0x0008 (0x0008 - 0x0000)
struct BP_ICustomJoystick_C_Set_Max_Size final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_Set_Max_Size) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_Set_Max_Size");
static_assert(sizeof(BP_ICustomJoystick_C_Set_Max_Size) == 0x000008, "Wrong size on BP_ICustomJoystick_C_Set_Max_Size");
static_assert(offsetof(BP_ICustomJoystick_C_Set_Max_Size, Value) == 0x000000, "Member 'BP_ICustomJoystick_C_Set_Max_Size::Value' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.On Y Axis Changed
// 0x0008 (0x0008 - 0x0000)
struct BP_ICustomJoystick_C_On_Y_Axis_Changed final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_On_Y_Axis_Changed) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_On_Y_Axis_Changed");
static_assert(sizeof(BP_ICustomJoystick_C_On_Y_Axis_Changed) == 0x000008, "Wrong size on BP_ICustomJoystick_C_On_Y_Axis_Changed");
static_assert(offsetof(BP_ICustomJoystick_C_On_Y_Axis_Changed, Value) == 0x000000, "Member 'BP_ICustomJoystick_C_On_Y_Axis_Changed::Value' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.On X Axis Changed
// 0x0008 (0x0008 - 0x0000)
struct BP_ICustomJoystick_C_On_X_Axis_Changed final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_On_X_Axis_Changed) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_On_X_Axis_Changed");
static_assert(sizeof(BP_ICustomJoystick_C_On_X_Axis_Changed) == 0x000008, "Wrong size on BP_ICustomJoystick_C_On_X_Axis_Changed");
static_assert(offsetof(BP_ICustomJoystick_C_On_X_Axis_Changed, Value) == 0x000000, "Member 'BP_ICustomJoystick_C_On_X_Axis_Changed::Value' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.On Viewport Size Changed
// 0x0020 (0x0020 - 0x0000)
struct BP_ICustomJoystick_C_On_Viewport_Size_Changed final
{
public:
	struct FVector2D                              Previous_Size;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Updated_Size;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_On_Viewport_Size_Changed) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_On_Viewport_Size_Changed");
static_assert(sizeof(BP_ICustomJoystick_C_On_Viewport_Size_Changed) == 0x000020, "Wrong size on BP_ICustomJoystick_C_On_Viewport_Size_Changed");
static_assert(offsetof(BP_ICustomJoystick_C_On_Viewport_Size_Changed, Previous_Size) == 0x000000, "Member 'BP_ICustomJoystick_C_On_Viewport_Size_Changed::Previous_Size' has a wrong offset!");
static_assert(offsetof(BP_ICustomJoystick_C_On_Viewport_Size_Changed, Updated_Size) == 0x000010, "Member 'BP_ICustomJoystick_C_On_Viewport_Size_Changed::Updated_Size' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.On Picker Location Changed
// 0x0018 (0x0018 - 0x0000)
struct BP_ICustomJoystick_C_On_Picker_Location_Changed final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_On_Picker_Location_Changed) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_On_Picker_Location_Changed");
static_assert(sizeof(BP_ICustomJoystick_C_On_Picker_Location_Changed) == 0x000018, "Wrong size on BP_ICustomJoystick_C_On_Picker_Location_Changed");
static_assert(offsetof(BP_ICustomJoystick_C_On_Picker_Location_Changed, Location) == 0x000000, "Member 'BP_ICustomJoystick_C_On_Picker_Location_Changed::Location' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.On Joystick Released
// 0x0018 (0x0018 - 0x0000)
struct BP_ICustomJoystick_C_On_Joystick_Released final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_On_Joystick_Released) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_On_Joystick_Released");
static_assert(sizeof(BP_ICustomJoystick_C_On_Joystick_Released) == 0x000018, "Wrong size on BP_ICustomJoystick_C_On_Joystick_Released");
static_assert(offsetof(BP_ICustomJoystick_C_On_Joystick_Released, Location) == 0x000000, "Member 'BP_ICustomJoystick_C_On_Joystick_Released::Location' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.On Joystick Pressed
// 0x0018 (0x0018 - 0x0000)
struct BP_ICustomJoystick_C_On_Joystick_Pressed final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_On_Joystick_Pressed) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_On_Joystick_Pressed");
static_assert(sizeof(BP_ICustomJoystick_C_On_Joystick_Pressed) == 0x000018, "Wrong size on BP_ICustomJoystick_C_On_Joystick_Pressed");
static_assert(offsetof(BP_ICustomJoystick_C_On_Joystick_Pressed, Location) == 0x000000, "Member 'BP_ICustomJoystick_C_On_Joystick_Pressed::Location' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.On Joystick Location Changed
// 0x0018 (0x0018 - 0x0000)
struct BP_ICustomJoystick_C_On_Joystick_Location_Changed final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_On_Joystick_Location_Changed) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_On_Joystick_Location_Changed");
static_assert(sizeof(BP_ICustomJoystick_C_On_Joystick_Location_Changed) == 0x000018, "Wrong size on BP_ICustomJoystick_C_On_Joystick_Location_Changed");
static_assert(offsetof(BP_ICustomJoystick_C_On_Joystick_Location_Changed, Location) == 0x000000, "Member 'BP_ICustomJoystick_C_On_Joystick_Location_Changed::Location' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.On Axes Changed
// 0x0028 (0x0028 - 0x0000)
struct BP_ICustomJoystick_C_On_Axes_Changed final
{
public:
	double                                        X_Axis_Value;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y_Axis_Value;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_On_Axes_Changed) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_On_Axes_Changed");
static_assert(sizeof(BP_ICustomJoystick_C_On_Axes_Changed) == 0x000028, "Wrong size on BP_ICustomJoystick_C_On_Axes_Changed");
static_assert(offsetof(BP_ICustomJoystick_C_On_Axes_Changed, X_Axis_Value) == 0x000000, "Member 'BP_ICustomJoystick_C_On_Axes_Changed::X_Axis_Value' has a wrong offset!");
static_assert(offsetof(BP_ICustomJoystick_C_On_Axes_Changed, Y_Axis_Value) == 0x000008, "Member 'BP_ICustomJoystick_C_On_Axes_Changed::Y_Axis_Value' has a wrong offset!");
static_assert(offsetof(BP_ICustomJoystick_C_On_Axes_Changed, Direction) == 0x000010, "Member 'BP_ICustomJoystick_C_On_Axes_Changed::Direction' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.GetWidget
// 0x0008 (0x0008 - 0x0000)
struct BP_ICustomJoystick_C_GetWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_GetWidget) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_GetWidget");
static_assert(sizeof(BP_ICustomJoystick_C_GetWidget) == 0x000008, "Wrong size on BP_ICustomJoystick_C_GetWidget");
static_assert(offsetof(BP_ICustomJoystick_C_GetWidget, Widget) == 0x000000, "Member 'BP_ICustomJoystick_C_GetWidget::Widget' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.GetCustomConfig
// 0x0068 (0x0068 - 0x0000)
struct BP_ICustomJoystick_C_GetCustomConfig final
{
public:
	struct FF_JoystickCustomConfig                Config;                                            // 0x0000(0x0068)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_GetCustomConfig) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_GetCustomConfig");
static_assert(sizeof(BP_ICustomJoystick_C_GetCustomConfig) == 0x000068, "Wrong size on BP_ICustomJoystick_C_GetCustomConfig");
static_assert(offsetof(BP_ICustomJoystick_C_GetCustomConfig, Config) == 0x000000, "Member 'BP_ICustomJoystick_C_GetCustomConfig::Config' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.BP_GetJoystickMode
// 0x0004 (0x0004 - 0x0000)
struct BP_ICustomJoystick_C_BP_GetJoystickMode final
{
public:
	EUTCJoystickMode                              JoystickMode;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_BP_GetJoystickMode) == 0x000004, "Wrong alignment on BP_ICustomJoystick_C_BP_GetJoystickMode");
static_assert(sizeof(BP_ICustomJoystick_C_BP_GetJoystickMode) == 0x000004, "Wrong size on BP_ICustomJoystick_C_BP_GetJoystickMode");
static_assert(offsetof(BP_ICustomJoystick_C_BP_GetJoystickMode, JoystickMode) == 0x000000, "Member 'BP_ICustomJoystick_C_BP_GetJoystickMode::JoystickMode' has a wrong offset!");

// Function BP_ICustomJoystick.BP_ICustomJoystick_C.Get Max Size
// 0x0008 (0x0008 - 0x0000)
struct BP_ICustomJoystick_C_Get_Max_Size final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ICustomJoystick_C_Get_Max_Size) == 0x000008, "Wrong alignment on BP_ICustomJoystick_C_Get_Max_Size");
static_assert(sizeof(BP_ICustomJoystick_C_Get_Max_Size) == 0x000008, "Wrong size on BP_ICustomJoystick_C_Get_Max_Size");
static_assert(offsetof(BP_ICustomJoystick_C_Get_Max_Size, Value) == 0x000000, "Member 'BP_ICustomJoystick_C_Get_Max_Size::Value' has a wrong offset!");

}

