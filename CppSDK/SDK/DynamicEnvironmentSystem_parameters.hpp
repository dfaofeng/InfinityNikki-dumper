#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicEnvironmentSystem

#include "Basic.hpp"

#include "DynamicEnvironmentSystem_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.BeginUpdateTime
// 0x0010 (0x0010 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_BeginUpdateTime final
{
public:
	class ADynamicEnvironmentSystemManager*       DynamicEnvironmentSystemManager;                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_BeginUpdateTime) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_BeginUpdateTime");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_BeginUpdateTime) == 0x000010, "Wrong size on DynamicEnvironmentSystemBPLibrary_BeginUpdateTime");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_BeginUpdateTime, DynamicEnvironmentSystemManager) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_BeginUpdateTime::DynamicEnvironmentSystemManager' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_BeginUpdateTime, NowTime) == 0x000008, "Member 'DynamicEnvironmentSystemBPLibrary_BeginUpdateTime::NowTime' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.ChangeWeatherEventEnd
// 0x0010 (0x0010 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventEnd final
{
public:
	class ADynamicWeatherVolume*                  VolumeFrom;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADynamicWeatherVolume*                  VolumeTo;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventEnd) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventEnd");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventEnd) == 0x000010, "Wrong size on DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventEnd");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventEnd, VolumeFrom) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventEnd::VolumeFrom' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventEnd, VolumeTo) == 0x000008, "Member 'DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventEnd::VolumeTo' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.ChangeWeatherEventIsReady
// 0x0018 (0x0018 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady final
{
public:
	class ADynamicWeatherVolume*                  VolumeFrom;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADynamicWeatherVolume*                  VolumeTo;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady) == 0x000018, "Wrong size on DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady, VolumeFrom) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady::VolumeFrom' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady, VolumeTo) == 0x000008, "Member 'DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady::VolumeTo' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady, ReturnValue) == 0x000010, "Member 'DynamicEnvironmentSystemBPLibrary_ChangeWeatherEventIsReady::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.CopyRuntimeCurveLinearColor
// 0x0210 (0x0210 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_CopyRuntimeCurveLinearColor final
{
public:
	struct FRuntimeCurveLinearColor               RuntimeCurve;                                      // 0x0000(0x0208)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      CurveLinearColor;                                  // 0x0208(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_CopyRuntimeCurveLinearColor) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_CopyRuntimeCurveLinearColor");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_CopyRuntimeCurveLinearColor) == 0x000210, "Wrong size on DynamicEnvironmentSystemBPLibrary_CopyRuntimeCurveLinearColor");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_CopyRuntimeCurveLinearColor, RuntimeCurve) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_CopyRuntimeCurveLinearColor::RuntimeCurve' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_CopyRuntimeCurveLinearColor, CurveLinearColor) == 0x000208, "Member 'DynamicEnvironmentSystemBPLibrary_CopyRuntimeCurveLinearColor::CurveLinearColor' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetDynamicEnvironmentSystemManager
// 0x0010 (0x0010 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_GetDynamicEnvironmentSystemManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADynamicEnvironmentSystemManager*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_GetDynamicEnvironmentSystemManager) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_GetDynamicEnvironmentSystemManager");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_GetDynamicEnvironmentSystemManager) == 0x000010, "Wrong size on DynamicEnvironmentSystemBPLibrary_GetDynamicEnvironmentSystemManager");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetDynamicEnvironmentSystemManager, WorldContextObject) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_GetDynamicEnvironmentSystemManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetDynamicEnvironmentSystemManager, ReturnValue) == 0x000008, "Member 'DynamicEnvironmentSystemBPLibrary_GetDynamicEnvironmentSystemManager::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetEnvironmentLevelConfigManager
// 0x0010 (0x0010 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_GetEnvironmentLevelConfigManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEnvironmentLevelConfigManager*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_GetEnvironmentLevelConfigManager) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_GetEnvironmentLevelConfigManager");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_GetEnvironmentLevelConfigManager) == 0x000010, "Wrong size on DynamicEnvironmentSystemBPLibrary_GetEnvironmentLevelConfigManager");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetEnvironmentLevelConfigManager, WorldContextObject) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_GetEnvironmentLevelConfigManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetEnvironmentLevelConfigManager, ReturnValue) == 0x000008, "Member 'DynamicEnvironmentSystemBPLibrary_GetEnvironmentLevelConfigManager::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetRuntimeCurveLinearColorExternal
// 0x0210 (0x0210 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorExternal final
{
public:
	struct FRuntimeCurveLinearColor               RuntimeCurve;                                      // 0x0000(0x0208)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      ReturnValue;                                       // 0x0208(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorExternal) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorExternal");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorExternal) == 0x000210, "Wrong size on DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorExternal");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorExternal, RuntimeCurve) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorExternal::RuntimeCurve' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorExternal, ReturnValue) == 0x000208, "Member 'DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorExternal::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetRuntimeCurveLinearColorValue
// 0x0220 (0x0220 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue final
{
public:
	struct FRuntimeCurveLinearColor               RuntimeCurve;                                      // 0x0000(0x0208)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0208(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x020C(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue) == 0x000220, "Wrong size on DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue, RuntimeCurve) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue::RuntimeCurve' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue, InTime) == 0x000208, "Member 'DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue::InTime' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue, ReturnValue) == 0x00020C, "Member 'DynamicEnvironmentSystemBPLibrary_GetRuntimeCurveLinearColorValue::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetRuntimeFloatCurveExternal
// 0x0090 (0x0090 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveExternal final
{
public:
	struct FRuntimeFloatCurve                     RuntimeCurve;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveExternal) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveExternal");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveExternal) == 0x000090, "Wrong size on DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveExternal");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveExternal, RuntimeCurve) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveExternal::RuntimeCurve' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveExternal, ReturnValue) == 0x000088, "Member 'DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveExternal::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetRuntimeFloatCurveValue
// 0x0090 (0x0090 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue final
{
public:
	struct FRuntimeFloatCurve                     RuntimeCurve;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x008C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue) == 0x000090, "Wrong size on DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue, RuntimeCurve) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue::RuntimeCurve' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue, InTime) == 0x000088, "Member 'DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue::InTime' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue, ReturnValue) == 0x00008C, "Member 'DynamicEnvironmentSystemBPLibrary_GetRuntimeFloatCurveValue::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetTargetOverridePropertyInCharacterLerpConfigByName
// 0x0138 (0x0138 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName final
{
public:
	struct FCharacterLerpConfig                   InCharacterLerpConfig;                             // 0x0000(0x012C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   InPropertyName;                                    // 0x012C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0134(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName) == 0x000004, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName) == 0x000138, "Wrong size on DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName, InCharacterLerpConfig) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName::InCharacterLerpConfig' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName, InPropertyName) == 0x00012C, "Member 'DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName::InPropertyName' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName, ReturnValue) == 0x000134, "Member 'DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInCharacterLerpConfigByName::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.GetTargetOverridePropertyInPPSettingByName
// 0x0860 (0x0860 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName final
{
public:
	struct FPostProcessSettings                   InPPSetting;                                       // 0x0000(0x0850)(Parm, NativeAccessSpecifierPublic)
	class FName                                   InPropertyName;                                    // 0x0850(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0858(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_859[0x7];                                      // 0x0859(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName) == 0x000010, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName) == 0x000860, "Wrong size on DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName, InPPSetting) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName::InPPSetting' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName, InPropertyName) == 0x000850, "Member 'DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName::InPropertyName' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName, ReturnValue) == 0x000858, "Member 'DynamicEnvironmentSystemBPLibrary_GetTargetOverridePropertyInPPSettingByName::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.IsPlayingInEditor
// 0x0001 (0x0001 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_IsPlayingInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_IsPlayingInEditor) == 0x000001, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_IsPlayingInEditor");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_IsPlayingInEditor) == 0x000001, "Wrong size on DynamicEnvironmentSystemBPLibrary_IsPlayingInEditor");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_IsPlayingInEditor, ReturnValue) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_IsPlayingInEditor::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.LoadDynamicEnvironmentLerpConfigByDataTable
// 0x00F0 (0x00F0 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable final
{
public:
	class UDataTable*                             EnvironmentConfigFile;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpanName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutTodConfigPath;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutPPConfigPath;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutCharacterConfigPath;                            // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDynamicEnvironmentLerpConfig          OutEnvironmentLerpConfig;                          // 0x0040(0x00A8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable) == 0x0000F0, "Wrong size on DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable, EnvironmentConfigFile) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable::EnvironmentConfigFile' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable, SpanName) == 0x000008, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable::SpanName' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable, OutTodConfigPath) == 0x000010, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable::OutTodConfigPath' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable, OutPPConfigPath) == 0x000020, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable::OutPPConfigPath' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable, OutCharacterConfigPath) == 0x000030, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable::OutCharacterConfigPath' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable, OutEnvironmentLerpConfig) == 0x000040, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable::OutEnvironmentLerpConfig' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable, ReturnValue) == 0x0000E8, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigByDataTable::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.LoadDynamicEnvironmentLerpConfigIfNeeded
// 0x00F0 (0x00F0 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded final
{
public:
	class ADynamicWeatherVolume*                  DynamicWeatherVolume;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpanName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutTodConfigPath;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutPPConfigPath;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutCharacterConfigPath;                            // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDynamicEnvironmentLerpConfig          OutEnvironmentLerpConfig;                          // 0x0040(0x00A8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded) == 0x0000F0, "Wrong size on DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded, DynamicWeatherVolume) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded::DynamicWeatherVolume' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded, SpanName) == 0x000008, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded::SpanName' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded, OutTodConfigPath) == 0x000010, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded::OutTodConfigPath' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded, OutPPConfigPath) == 0x000020, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded::OutPPConfigPath' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded, OutCharacterConfigPath) == 0x000030, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded::OutCharacterConfigPath' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded, OutEnvironmentLerpConfig) == 0x000040, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded::OutEnvironmentLerpConfig' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded, ReturnValue) == 0x0000E8, "Member 'DynamicEnvironmentSystemBPLibrary_LoadDynamicEnvironmentLerpConfigIfNeeded::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.PreRequestAsyncLoad
// 0x0008 (0x0008 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_PreRequestAsyncLoad final
{
public:
	class UDataTable*                             EnvironmentConfigFile;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_PreRequestAsyncLoad) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_PreRequestAsyncLoad");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_PreRequestAsyncLoad) == 0x000008, "Wrong size on DynamicEnvironmentSystemBPLibrary_PreRequestAsyncLoad");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_PreRequestAsyncLoad, EnvironmentConfigFile) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_PreRequestAsyncLoad::EnvironmentConfigFile' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.SaveToCharacterConfig
// 0x0158 (0x0158 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_SaveToCharacterConfig final
{
public:
	TSoftClassPtr<class UClass>                   CharacterConfig;                                   // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterLerpConfig                   InCharacterSetting;                                // 0x0028(0x012C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_SaveToCharacterConfig) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_SaveToCharacterConfig");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_SaveToCharacterConfig) == 0x000158, "Wrong size on DynamicEnvironmentSystemBPLibrary_SaveToCharacterConfig");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToCharacterConfig, CharacterConfig) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToCharacterConfig::CharacterConfig' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToCharacterConfig, InCharacterSetting) == 0x000028, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToCharacterConfig::InCharacterSetting' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.SaveToPPConfig
// 0x08E0 (0x08E0 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_SaveToPPConfig final
{
public:
	TSoftClassPtr<class UClass>                   PPConfig;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   InPPSetting;                                       // 0x0030(0x0850)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMobilePPSettings                      InMobilePPSettings;                                // 0x0880(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_SaveToPPConfig) == 0x000010, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_SaveToPPConfig");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_SaveToPPConfig) == 0x0008E0, "Wrong size on DynamicEnvironmentSystemBPLibrary_SaveToPPConfig");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToPPConfig, PPConfig) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToPPConfig::PPConfig' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToPPConfig, InPPSetting) == 0x000030, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToPPConfig::InPPSetting' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToPPConfig, InMobilePPSettings) == 0x000880, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToPPConfig::InMobilePPSettings' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.SaveToTODConfig
// 0x0A40 (0x0A40 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_SaveToTODConfig final
{
public:
	TSoftClassPtr<class UClass>                   TODConfig;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTODLerpConfig                         InTODSetting;                                      // 0x0028(0x0840)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FString, struct FRuntimeFloatCurve> InCustomEnvironmentSettingsLerpCurve;             // 0x0868(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEnvironmentLerpConfig                 EnvironmentSetting;                                // 0x08B8(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeatherTexturesConfig                 TextureSetting;                                    // 0x09D8(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_SaveToTODConfig) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_SaveToTODConfig");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_SaveToTODConfig) == 0x000A40, "Wrong size on DynamicEnvironmentSystemBPLibrary_SaveToTODConfig");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToTODConfig, TODConfig) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToTODConfig::TODConfig' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToTODConfig, InTODSetting) == 0x000028, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToTODConfig::InTODSetting' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToTODConfig, InCustomEnvironmentSettingsLerpCurve) == 0x000868, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToTODConfig::InCustomEnvironmentSettingsLerpCurve' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToTODConfig, EnvironmentSetting) == 0x0008B8, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToTODConfig::EnvironmentSetting' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToTODConfig, TextureSetting) == 0x0009D8, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToTODConfig::TextureSetting' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemBPLibrary.SaveToWeatherConfig
// 0x0338 (0x0338 - 0x0000)
struct DynamicEnvironmentSystemBPLibrary_SaveToWeatherConfig final
{
public:
	TSoftClassPtr<class UClass>                   WeatherConfig;                                     // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeatherBaseLerpConfig                 InWeatherControl;                                  // 0x0028(0x0310)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemBPLibrary_SaveToWeatherConfig) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemBPLibrary_SaveToWeatherConfig");
static_assert(sizeof(DynamicEnvironmentSystemBPLibrary_SaveToWeatherConfig) == 0x000338, "Wrong size on DynamicEnvironmentSystemBPLibrary_SaveToWeatherConfig");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToWeatherConfig, WeatherConfig) == 0x000000, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToWeatherConfig::WeatherConfig' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemBPLibrary_SaveToWeatherConfig, InWeatherControl) == 0x000028, "Member 'DynamicEnvironmentSystemBPLibrary_SaveToWeatherConfig::InWeatherControl' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.GetFinalPostProcessSettings
// 0x0850 (0x0850 - 0x0000)
struct DynamicEnvironmentSystemManager_GetFinalPostProcessSettings final
{
public:
	struct FPostProcessSettings                   ReturnValue;                                       // 0x0000(0x0850)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemManager_GetFinalPostProcessSettings) == 0x000010, "Wrong alignment on DynamicEnvironmentSystemManager_GetFinalPostProcessSettings");
static_assert(sizeof(DynamicEnvironmentSystemManager_GetFinalPostProcessSettings) == 0x000850, "Wrong size on DynamicEnvironmentSystemManager_GetFinalPostProcessSettings");
static_assert(offsetof(DynamicEnvironmentSystemManager_GetFinalPostProcessSettings, ReturnValue) == 0x000000, "Member 'DynamicEnvironmentSystemManager_GetFinalPostProcessSettings::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.GetFinalWeatherSettings
// 0x0E08 (0x0E08 - 0x0000)
struct DynamicEnvironmentSystemManager_GetFinalWeatherSettings final
{
public:
	struct FFinalWeatherSettings                  ReturnValue;                                       // 0x0000(0x0E08)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemManager_GetFinalWeatherSettings) == 0x000008, "Wrong alignment on DynamicEnvironmentSystemManager_GetFinalWeatherSettings");
static_assert(sizeof(DynamicEnvironmentSystemManager_GetFinalWeatherSettings) == 0x000E08, "Wrong size on DynamicEnvironmentSystemManager_GetFinalWeatherSettings");
static_assert(offsetof(DynamicEnvironmentSystemManager_GetFinalWeatherSettings, ReturnValue) == 0x000000, "Member 'DynamicEnvironmentSystemManager_GetFinalWeatherSettings::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.GetPhotoFilterFinalPPSettings
// 0x02B0 (0x02B0 - 0x0000)
struct DynamicEnvironmentSystemManager_GetPhotoFilterFinalPPSettings final
{
public:
	struct FPhotoFilterPPSettings                 ReturnValue;                                       // 0x0000(0x02B0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemManager_GetPhotoFilterFinalPPSettings) == 0x000010, "Wrong alignment on DynamicEnvironmentSystemManager_GetPhotoFilterFinalPPSettings");
static_assert(sizeof(DynamicEnvironmentSystemManager_GetPhotoFilterFinalPPSettings) == 0x0002B0, "Wrong size on DynamicEnvironmentSystemManager_GetPhotoFilterFinalPPSettings");
static_assert(offsetof(DynamicEnvironmentSystemManager_GetPhotoFilterFinalPPSettings, ReturnValue) == 0x000000, "Member 'DynamicEnvironmentSystemManager_GetPhotoFilterFinalPPSettings::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.GetWeatherWeight
// 0x0008 (0x0008 - 0x0000)
struct DynamicEnvironmentSystemManager_GetWeatherWeight final
{
public:
	int32                                         WeatherID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemManager_GetWeatherWeight) == 0x000004, "Wrong alignment on DynamicEnvironmentSystemManager_GetWeatherWeight");
static_assert(sizeof(DynamicEnvironmentSystemManager_GetWeatherWeight) == 0x000008, "Wrong size on DynamicEnvironmentSystemManager_GetWeatherWeight");
static_assert(offsetof(DynamicEnvironmentSystemManager_GetWeatherWeight, WeatherID) == 0x000000, "Member 'DynamicEnvironmentSystemManager_GetWeatherWeight::WeatherID' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemManager_GetWeatherWeight, ReturnValue) == 0x000004, "Member 'DynamicEnvironmentSystemManager_GetWeatherWeight::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.RemoveWeatherWeight
// 0x0004 (0x0004 - 0x0000)
struct DynamicEnvironmentSystemManager_RemoveWeatherWeight final
{
public:
	int32                                         WeatherID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemManager_RemoveWeatherWeight) == 0x000004, "Wrong alignment on DynamicEnvironmentSystemManager_RemoveWeatherWeight");
static_assert(sizeof(DynamicEnvironmentSystemManager_RemoveWeatherWeight) == 0x000004, "Wrong size on DynamicEnvironmentSystemManager_RemoveWeatherWeight");
static_assert(offsetof(DynamicEnvironmentSystemManager_RemoveWeatherWeight, WeatherID) == 0x000000, "Member 'DynamicEnvironmentSystemManager_RemoveWeatherWeight::WeatherID' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.SetWeatherWeight
// 0x0008 (0x0008 - 0x0000)
struct DynamicEnvironmentSystemManager_SetWeatherWeight final
{
public:
	int32                                         WeatherID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemManager_SetWeatherWeight) == 0x000004, "Wrong alignment on DynamicEnvironmentSystemManager_SetWeatherWeight");
static_assert(sizeof(DynamicEnvironmentSystemManager_SetWeatherWeight) == 0x000008, "Wrong size on DynamicEnvironmentSystemManager_SetWeatherWeight");
static_assert(offsetof(DynamicEnvironmentSystemManager_SetWeatherWeight, WeatherID) == 0x000000, "Member 'DynamicEnvironmentSystemManager_SetWeatherWeight::WeatherID' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentSystemManager_SetWeatherWeight, Weight) == 0x000004, "Member 'DynamicEnvironmentSystemManager_SetWeatherWeight::Weight' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.ShouldUpdateEnvironment
// 0x0001 (0x0001 - 0x0000)
struct DynamicEnvironmentSystemManager_ShouldUpdateEnvironment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemManager_ShouldUpdateEnvironment) == 0x000001, "Wrong alignment on DynamicEnvironmentSystemManager_ShouldUpdateEnvironment");
static_assert(sizeof(DynamicEnvironmentSystemManager_ShouldUpdateEnvironment) == 0x000001, "Wrong size on DynamicEnvironmentSystemManager_ShouldUpdateEnvironment");
static_assert(offsetof(DynamicEnvironmentSystemManager_ShouldUpdateEnvironment, ReturnValue) == 0x000000, "Member 'DynamicEnvironmentSystemManager_ShouldUpdateEnvironment::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.ShouldUpdateExponentialHeightFog
// 0x0001 (0x0001 - 0x0000)
struct DynamicEnvironmentSystemManager_ShouldUpdateExponentialHeightFog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemManager_ShouldUpdateExponentialHeightFog) == 0x000001, "Wrong alignment on DynamicEnvironmentSystemManager_ShouldUpdateExponentialHeightFog");
static_assert(sizeof(DynamicEnvironmentSystemManager_ShouldUpdateExponentialHeightFog) == 0x000001, "Wrong size on DynamicEnvironmentSystemManager_ShouldUpdateExponentialHeightFog");
static_assert(offsetof(DynamicEnvironmentSystemManager_ShouldUpdateExponentialHeightFog, ReturnValue) == 0x000000, "Member 'DynamicEnvironmentSystemManager_ShouldUpdateExponentialHeightFog::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.ShouldUpdateSkyAtmosphere
// 0x0001 (0x0001 - 0x0000)
struct DynamicEnvironmentSystemManager_ShouldUpdateSkyAtmosphere final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemManager_ShouldUpdateSkyAtmosphere) == 0x000001, "Wrong alignment on DynamicEnvironmentSystemManager_ShouldUpdateSkyAtmosphere");
static_assert(sizeof(DynamicEnvironmentSystemManager_ShouldUpdateSkyAtmosphere) == 0x000001, "Wrong size on DynamicEnvironmentSystemManager_ShouldUpdateSkyAtmosphere");
static_assert(offsetof(DynamicEnvironmentSystemManager_ShouldUpdateSkyAtmosphere, ReturnValue) == 0x000000, "Member 'DynamicEnvironmentSystemManager_ShouldUpdateSkyAtmosphere::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicEnvironmentSystemManager.ShouldUpdateSunAndSkyLight
// 0x0001 (0x0001 - 0x0000)
struct DynamicEnvironmentSystemManager_ShouldUpdateSunAndSkyLight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentSystemManager_ShouldUpdateSunAndSkyLight) == 0x000001, "Wrong alignment on DynamicEnvironmentSystemManager_ShouldUpdateSunAndSkyLight");
static_assert(sizeof(DynamicEnvironmentSystemManager_ShouldUpdateSunAndSkyLight) == 0x000001, "Wrong size on DynamicEnvironmentSystemManager_ShouldUpdateSunAndSkyLight");
static_assert(offsetof(DynamicEnvironmentSystemManager_ShouldUpdateSunAndSkyLight, ReturnValue) == 0x000000, "Member 'DynamicEnvironmentSystemManager_ShouldUpdateSunAndSkyLight::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherComponent.OnFadeIn
// 0x0004 (0x0004 - 0x0000)
struct DynamicWeatherComponent_OnFadeIn final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherComponent_OnFadeIn) == 0x000004, "Wrong alignment on DynamicWeatherComponent_OnFadeIn");
static_assert(sizeof(DynamicWeatherComponent_OnFadeIn) == 0x000004, "Wrong size on DynamicWeatherComponent_OnFadeIn");
static_assert(offsetof(DynamicWeatherComponent_OnFadeIn, Progress) == 0x000000, "Member 'DynamicWeatherComponent_OnFadeIn::Progress' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherComponent.OnFadeOut
// 0x0004 (0x0004 - 0x0000)
struct DynamicWeatherComponent_OnFadeOut final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherComponent_OnFadeOut) == 0x000004, "Wrong alignment on DynamicWeatherComponent_OnFadeOut");
static_assert(sizeof(DynamicWeatherComponent_OnFadeOut) == 0x000004, "Wrong size on DynamicWeatherComponent_OnFadeOut");
static_assert(offsetof(DynamicWeatherComponent_OnFadeOut, Progress) == 0x000000, "Member 'DynamicWeatherComponent_OnFadeOut::Progress' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherManager.ChangeToWeather
// 0x0010 (0x0010 - 0x0000)
struct DynamicWeatherManager_ChangeToWeather final
{
public:
	class ADynamicWeatherVolume*                  WeatherVolume;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDelay;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherManager_ChangeToWeather) == 0x000008, "Wrong alignment on DynamicWeatherManager_ChangeToWeather");
static_assert(sizeof(DynamicWeatherManager_ChangeToWeather) == 0x000010, "Wrong size on DynamicWeatherManager_ChangeToWeather");
static_assert(offsetof(DynamicWeatherManager_ChangeToWeather, WeatherVolume) == 0x000000, "Member 'DynamicWeatherManager_ChangeToWeather::WeatherVolume' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_ChangeToWeather, TransitionDelay) == 0x000008, "Member 'DynamicWeatherManager_ChangeToWeather::TransitionDelay' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_ChangeToWeather, TransitionDuration) == 0x00000C, "Member 'DynamicWeatherManager_ChangeToWeather::TransitionDuration' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherManager.ChangeWeather
// 0x000C (0x000C - 0x0000)
struct DynamicWeatherManager_ChangeWeather final
{
public:
	int32                                         WeatherIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDelay;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherManager_ChangeWeather) == 0x000004, "Wrong alignment on DynamicWeatherManager_ChangeWeather");
static_assert(sizeof(DynamicWeatherManager_ChangeWeather) == 0x00000C, "Wrong size on DynamicWeatherManager_ChangeWeather");
static_assert(offsetof(DynamicWeatherManager_ChangeWeather, WeatherIndex) == 0x000000, "Member 'DynamicWeatherManager_ChangeWeather::WeatherIndex' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_ChangeWeather, TransitionDelay) == 0x000004, "Member 'DynamicWeatherManager_ChangeWeather::TransitionDelay' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_ChangeWeather, TransitionDuration) == 0x000008, "Member 'DynamicWeatherManager_ChangeWeather::TransitionDuration' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherManager.FadeInWeather
// 0x0010 (0x0010 - 0x0000)
struct DynamicWeatherManager_FadeInWeather final
{
public:
	class ADynamicWeatherVolume*                  WeatherVolume;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDelay;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherManager_FadeInWeather) == 0x000008, "Wrong alignment on DynamicWeatherManager_FadeInWeather");
static_assert(sizeof(DynamicWeatherManager_FadeInWeather) == 0x000010, "Wrong size on DynamicWeatherManager_FadeInWeather");
static_assert(offsetof(DynamicWeatherManager_FadeInWeather, WeatherVolume) == 0x000000, "Member 'DynamicWeatherManager_FadeInWeather::WeatherVolume' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_FadeInWeather, TransitionDelay) == 0x000008, "Member 'DynamicWeatherManager_FadeInWeather::TransitionDelay' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_FadeInWeather, TransitionDuration) == 0x00000C, "Member 'DynamicWeatherManager_FadeInWeather::TransitionDuration' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherManager.FadeOutWeather
// 0x0010 (0x0010 - 0x0000)
struct DynamicWeatherManager_FadeOutWeather final
{
public:
	class ADynamicWeatherVolume*                  WeatherVolume;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDelay;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherManager_FadeOutWeather) == 0x000008, "Wrong alignment on DynamicWeatherManager_FadeOutWeather");
static_assert(sizeof(DynamicWeatherManager_FadeOutWeather) == 0x000010, "Wrong size on DynamicWeatherManager_FadeOutWeather");
static_assert(offsetof(DynamicWeatherManager_FadeOutWeather, WeatherVolume) == 0x000000, "Member 'DynamicWeatherManager_FadeOutWeather::WeatherVolume' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_FadeOutWeather, TransitionDelay) == 0x000008, "Member 'DynamicWeatherManager_FadeOutWeather::TransitionDelay' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_FadeOutWeather, TransitionDuration) == 0x00000C, "Member 'DynamicWeatherManager_FadeOutWeather::TransitionDuration' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherManager.GetCurrentWeather
// 0x0004 (0x0004 - 0x0000)
struct DynamicWeatherManager_GetCurrentWeather final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherManager_GetCurrentWeather) == 0x000004, "Wrong alignment on DynamicWeatherManager_GetCurrentWeather");
static_assert(sizeof(DynamicWeatherManager_GetCurrentWeather) == 0x000004, "Wrong size on DynamicWeatherManager_GetCurrentWeather");
static_assert(offsetof(DynamicWeatherManager_GetCurrentWeather, ReturnValue) == 0x000000, "Member 'DynamicWeatherManager_GetCurrentWeather::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherManager.LimitTODSunRotator
// 0x0150 (0x0150 - 0x0000)
struct DynamicWeatherManager_LimitTODSunRotator final
{
public:
	struct FSunLightLerpConfig                    FinalSunLightSetting;                              // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 SkySphere;                                         // 0x0128(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADirectionalLight*                      SunLight;                                          // 0x0130(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADirectionalLight*                      MoonLight;                                         // 0x0138(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowTime;                                           // 0x0140(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunExtraIntensity;                                 // 0x0144(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonExtraIntensity;                                // 0x0148(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicWeatherManager_LimitTODSunRotator) == 0x000008, "Wrong alignment on DynamicWeatherManager_LimitTODSunRotator");
static_assert(sizeof(DynamicWeatherManager_LimitTODSunRotator) == 0x000150, "Wrong size on DynamicWeatherManager_LimitTODSunRotator");
static_assert(offsetof(DynamicWeatherManager_LimitTODSunRotator, FinalSunLightSetting) == 0x000000, "Member 'DynamicWeatherManager_LimitTODSunRotator::FinalSunLightSetting' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_LimitTODSunRotator, SkySphere) == 0x000128, "Member 'DynamicWeatherManager_LimitTODSunRotator::SkySphere' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_LimitTODSunRotator, SunLight) == 0x000130, "Member 'DynamicWeatherManager_LimitTODSunRotator::SunLight' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_LimitTODSunRotator, MoonLight) == 0x000138, "Member 'DynamicWeatherManager_LimitTODSunRotator::MoonLight' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_LimitTODSunRotator, NowTime) == 0x000140, "Member 'DynamicWeatherManager_LimitTODSunRotator::NowTime' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_LimitTODSunRotator, SunExtraIntensity) == 0x000144, "Member 'DynamicWeatherManager_LimitTODSunRotator::SunExtraIntensity' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_LimitTODSunRotator, MoonExtraIntensity) == 0x000148, "Member 'DynamicWeatherManager_LimitTODSunRotator::MoonExtraIntensity' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherManager.RandomWeather
// 0x0008 (0x0008 - 0x0000)
struct DynamicWeatherManager_RandomWeather final
{
public:
	float                                         TransitionDelay;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherManager_RandomWeather) == 0x000004, "Wrong alignment on DynamicWeatherManager_RandomWeather");
static_assert(sizeof(DynamicWeatherManager_RandomWeather) == 0x000008, "Wrong size on DynamicWeatherManager_RandomWeather");
static_assert(offsetof(DynamicWeatherManager_RandomWeather, TransitionDelay) == 0x000000, "Member 'DynamicWeatherManager_RandomWeather::TransitionDelay' has a wrong offset!");
static_assert(offsetof(DynamicWeatherManager_RandomWeather, TransitionDuration) == 0x000004, "Member 'DynamicWeatherManager_RandomWeather::TransitionDuration' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherManager.UpdateEffectPosition
// 0x0018 (0x0018 - 0x0000)
struct DynamicWeatherManager_UpdateEffectPosition final
{
public:
	struct FVector                                EffectPosition;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherManager_UpdateEffectPosition) == 0x000008, "Wrong alignment on DynamicWeatherManager_UpdateEffectPosition");
static_assert(sizeof(DynamicWeatherManager_UpdateEffectPosition) == 0x000018, "Wrong size on DynamicWeatherManager_UpdateEffectPosition");
static_assert(offsetof(DynamicWeatherManager_UpdateEffectPosition, EffectPosition) == 0x000000, "Member 'DynamicWeatherManager_UpdateEffectPosition::EffectPosition' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherManager.WeatherRaining
// 0x0310 (0x0310 - 0x0000)
struct DynamicWeatherManager_WeatherRaining final
{
public:
	struct FWeatherBaseLerpConfig                 WeatherSettings;                                   // 0x0000(0x0310)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherManager_WeatherRaining) == 0x000008, "Wrong alignment on DynamicWeatherManager_WeatherRaining");
static_assert(sizeof(DynamicWeatherManager_WeatherRaining) == 0x000310, "Wrong size on DynamicWeatherManager_WeatherRaining");
static_assert(offsetof(DynamicWeatherManager_WeatherRaining, WeatherSettings) == 0x000000, "Member 'DynamicWeatherManager_WeatherRaining::WeatherSettings' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetLerpConfigCharacter
// 0x0020 (0x0020 - 0x0000)
struct DynamicWeatherVolume_GetLerpConfigCharacter final
{
public:
	class FName                                   SpanName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextString;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCharacterPresetConfig*                 ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherVolume_GetLerpConfigCharacter) == 0x000008, "Wrong alignment on DynamicWeatherVolume_GetLerpConfigCharacter");
static_assert(sizeof(DynamicWeatherVolume_GetLerpConfigCharacter) == 0x000020, "Wrong size on DynamicWeatherVolume_GetLerpConfigCharacter");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigCharacter, SpanName) == 0x000000, "Member 'DynamicWeatherVolume_GetLerpConfigCharacter::SpanName' has a wrong offset!");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigCharacter, ContextString) == 0x000008, "Member 'DynamicWeatherVolume_GetLerpConfigCharacter::ContextString' has a wrong offset!");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigCharacter, ReturnValue) == 0x000018, "Member 'DynamicWeatherVolume_GetLerpConfigCharacter::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetLerpConfigPP
// 0x0020 (0x0020 - 0x0000)
struct DynamicWeatherVolume_GetLerpConfigPP final
{
public:
	class FName                                   SpanName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextString;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostprocessPresetConfig*               ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherVolume_GetLerpConfigPP) == 0x000008, "Wrong alignment on DynamicWeatherVolume_GetLerpConfigPP");
static_assert(sizeof(DynamicWeatherVolume_GetLerpConfigPP) == 0x000020, "Wrong size on DynamicWeatherVolume_GetLerpConfigPP");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigPP, SpanName) == 0x000000, "Member 'DynamicWeatherVolume_GetLerpConfigPP::SpanName' has a wrong offset!");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigPP, ContextString) == 0x000008, "Member 'DynamicWeatherVolume_GetLerpConfigPP::ContextString' has a wrong offset!");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigPP, ReturnValue) == 0x000018, "Member 'DynamicWeatherVolume_GetLerpConfigPP::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetLerpConfigTod
// 0x0020 (0x0020 - 0x0000)
struct DynamicWeatherVolume_GetLerpConfigTod final
{
public:
	class FName                                   SpanName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextString;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTODPresetConfig*                       ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherVolume_GetLerpConfigTod) == 0x000008, "Wrong alignment on DynamicWeatherVolume_GetLerpConfigTod");
static_assert(sizeof(DynamicWeatherVolume_GetLerpConfigTod) == 0x000020, "Wrong size on DynamicWeatherVolume_GetLerpConfigTod");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigTod, SpanName) == 0x000000, "Member 'DynamicWeatherVolume_GetLerpConfigTod::SpanName' has a wrong offset!");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigTod, ContextString) == 0x000008, "Member 'DynamicWeatherVolume_GetLerpConfigTod::ContextString' has a wrong offset!");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigTod, ReturnValue) == 0x000018, "Member 'DynamicWeatherVolume_GetLerpConfigTod::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetLerpConfigWeather
// 0x0020 (0x0020 - 0x0000)
struct DynamicWeatherVolume_GetLerpConfigWeather final
{
public:
	class FName                                   SpanName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextString;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWeatherPresetConfig*                   ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherVolume_GetLerpConfigWeather) == 0x000008, "Wrong alignment on DynamicWeatherVolume_GetLerpConfigWeather");
static_assert(sizeof(DynamicWeatherVolume_GetLerpConfigWeather) == 0x000020, "Wrong size on DynamicWeatherVolume_GetLerpConfigWeather");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigWeather, SpanName) == 0x000000, "Member 'DynamicWeatherVolume_GetLerpConfigWeather::SpanName' has a wrong offset!");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigWeather, ContextString) == 0x000008, "Member 'DynamicWeatherVolume_GetLerpConfigWeather::ContextString' has a wrong offset!");
static_assert(offsetof(DynamicWeatherVolume_GetLerpConfigWeather, ReturnValue) == 0x000018, "Member 'DynamicWeatherVolume_GetLerpConfigWeather::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetTODLerpWeight
// 0x0004 (0x0004 - 0x0000)
struct DynamicWeatherVolume_GetTODLerpWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherVolume_GetTODLerpWeight) == 0x000004, "Wrong alignment on DynamicWeatherVolume_GetTODLerpWeight");
static_assert(sizeof(DynamicWeatherVolume_GetTODLerpWeight) == 0x000004, "Wrong size on DynamicWeatherVolume_GetTODLerpWeight");
static_assert(offsetof(DynamicWeatherVolume_GetTODLerpWeight, ReturnValue) == 0x000000, "Member 'DynamicWeatherVolume_GetTODLerpWeight::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetTodTimeSpan1
// 0x0020 (0x0020 - 0x0000)
struct DynamicWeatherVolume_GetTodTimeSpan1 final
{
public:
	struct FTimeSpanLerpConfig                    ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherVolume_GetTodTimeSpan1) == 0x000008, "Wrong alignment on DynamicWeatherVolume_GetTodTimeSpan1");
static_assert(sizeof(DynamicWeatherVolume_GetTodTimeSpan1) == 0x000020, "Wrong size on DynamicWeatherVolume_GetTodTimeSpan1");
static_assert(offsetof(DynamicWeatherVolume_GetTodTimeSpan1, ReturnValue) == 0x000000, "Member 'DynamicWeatherVolume_GetTodTimeSpan1::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherVolume.GetTodTimeSpan2
// 0x0020 (0x0020 - 0x0000)
struct DynamicWeatherVolume_GetTodTimeSpan2 final
{
public:
	struct FTimeSpanLerpConfig                    ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWeatherVolume_GetTodTimeSpan2) == 0x000008, "Wrong alignment on DynamicWeatherVolume_GetTodTimeSpan2");
static_assert(sizeof(DynamicWeatherVolume_GetTodTimeSpan2) == 0x000020, "Wrong size on DynamicWeatherVolume_GetTodTimeSpan2");
static_assert(offsetof(DynamicWeatherVolume_GetTodTimeSpan2, ReturnValue) == 0x000000, "Member 'DynamicWeatherVolume_GetTodTimeSpan2::ReturnValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWeatherVolume.UpdateTimeSpanProgress
// 0x0010 (0x0010 - 0x0000)
struct DynamicWeatherVolume_UpdateTimeSpanProgress final
{
public:
	class ADynamicEnvironmentSystemManager*       DynamicEnvironmentSystemMgr;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicWeatherVolume_UpdateTimeSpanProgress) == 0x000008, "Wrong alignment on DynamicWeatherVolume_UpdateTimeSpanProgress");
static_assert(sizeof(DynamicWeatherVolume_UpdateTimeSpanProgress) == 0x000010, "Wrong size on DynamicWeatherVolume_UpdateTimeSpanProgress");
static_assert(offsetof(DynamicWeatherVolume_UpdateTimeSpanProgress, DynamicEnvironmentSystemMgr) == 0x000000, "Member 'DynamicWeatherVolume_UpdateTimeSpanProgress::DynamicEnvironmentSystemMgr' has a wrong offset!");
static_assert(offsetof(DynamicWeatherVolume_UpdateTimeSpanProgress, NowTime) == 0x000008, "Member 'DynamicWeatherVolume_UpdateTimeSpanProgress::NowTime' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetLumenReflectionsSpecularScale
// 0x0004 (0x0004 - 0x0000)
struct DynamicWetnessComponent_SetLumenReflectionsSpecularScale final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWetnessComponent_SetLumenReflectionsSpecularScale) == 0x000004, "Wrong alignment on DynamicWetnessComponent_SetLumenReflectionsSpecularScale");
static_assert(sizeof(DynamicWetnessComponent_SetLumenReflectionsSpecularScale) == 0x000004, "Wrong size on DynamicWetnessComponent_SetLumenReflectionsSpecularScale");
static_assert(offsetof(DynamicWetnessComponent_SetLumenReflectionsSpecularScale, NewValue) == 0x000000, "Member 'DynamicWetnessComponent_SetLumenReflectionsSpecularScale::NewValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetPuddleHeightOffset
// 0x0008 (0x0008 - 0x0000)
struct DynamicWetnessComponent_SetPuddleHeightOffset final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToRain;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicWetnessComponent_SetPuddleHeightOffset) == 0x000004, "Wrong alignment on DynamicWetnessComponent_SetPuddleHeightOffset");
static_assert(sizeof(DynamicWetnessComponent_SetPuddleHeightOffset) == 0x000008, "Wrong size on DynamicWetnessComponent_SetPuddleHeightOffset");
static_assert(offsetof(DynamicWetnessComponent_SetPuddleHeightOffset, InValue) == 0x000000, "Member 'DynamicWetnessComponent_SetPuddleHeightOffset::InValue' has a wrong offset!");
static_assert(offsetof(DynamicWetnessComponent_SetPuddleHeightOffset, bToRain) == 0x000004, "Member 'DynamicWetnessComponent_SetPuddleHeightOffset::bToRain' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetRainIntensity
// 0x0004 (0x0004 - 0x0000)
struct DynamicWetnessComponent_SetRainIntensity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWetnessComponent_SetRainIntensity) == 0x000004, "Wrong alignment on DynamicWetnessComponent_SetRainIntensity");
static_assert(sizeof(DynamicWetnessComponent_SetRainIntensity) == 0x000004, "Wrong size on DynamicWetnessComponent_SetRainIntensity");
static_assert(offsetof(DynamicWetnessComponent_SetRainIntensity, NewValue) == 0x000000, "Member 'DynamicWetnessComponent_SetRainIntensity::NewValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetReflectionParameters
// 0x0008 (0x0008 - 0x0000)
struct DynamicWetnessComponent_SetReflectionParameters final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToRain;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicWetnessComponent_SetReflectionParameters) == 0x000004, "Wrong alignment on DynamicWetnessComponent_SetReflectionParameters");
static_assert(sizeof(DynamicWetnessComponent_SetReflectionParameters) == 0x000008, "Wrong size on DynamicWetnessComponent_SetReflectionParameters");
static_assert(offsetof(DynamicWetnessComponent_SetReflectionParameters, InValue) == 0x000000, "Member 'DynamicWetnessComponent_SetReflectionParameters::InValue' has a wrong offset!");
static_assert(offsetof(DynamicWetnessComponent_SetReflectionParameters, bToRain) == 0x000004, "Member 'DynamicWetnessComponent_SetReflectionParameters::bToRain' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetWetness
// 0x0008 (0x0008 - 0x0000)
struct DynamicWetnessComponent_SetWetness final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToRain;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicWetnessComponent_SetWetness) == 0x000004, "Wrong alignment on DynamicWetnessComponent_SetWetness");
static_assert(sizeof(DynamicWetnessComponent_SetWetness) == 0x000008, "Wrong size on DynamicWetnessComponent_SetWetness");
static_assert(offsetof(DynamicWetnessComponent_SetWetness, InValue) == 0x000000, "Member 'DynamicWetnessComponent_SetWetness::InValue' has a wrong offset!");
static_assert(offsetof(DynamicWetnessComponent_SetWetness, bToRain) == 0x000004, "Member 'DynamicWetnessComponent_SetWetness::bToRain' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetWetnessOcclusionMultiply
// 0x0004 (0x0004 - 0x0000)
struct DynamicWetnessComponent_SetWetnessOcclusionMultiply final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWetnessComponent_SetWetnessOcclusionMultiply) == 0x000004, "Wrong alignment on DynamicWetnessComponent_SetWetnessOcclusionMultiply");
static_assert(sizeof(DynamicWetnessComponent_SetWetnessOcclusionMultiply) == 0x000004, "Wrong size on DynamicWetnessComponent_SetWetnessOcclusionMultiply");
static_assert(offsetof(DynamicWetnessComponent_SetWetnessOcclusionMultiply, NewValue) == 0x000000, "Member 'DynamicWetnessComponent_SetWetnessOcclusionMultiply::NewValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetWetnessSpecularFoliageMultiply
// 0x0004 (0x0004 - 0x0000)
struct DynamicWetnessComponent_SetWetnessSpecularFoliageMultiply final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWetnessComponent_SetWetnessSpecularFoliageMultiply) == 0x000004, "Wrong alignment on DynamicWetnessComponent_SetWetnessSpecularFoliageMultiply");
static_assert(sizeof(DynamicWetnessComponent_SetWetnessSpecularFoliageMultiply) == 0x000004, "Wrong size on DynamicWetnessComponent_SetWetnessSpecularFoliageMultiply");
static_assert(offsetof(DynamicWetnessComponent_SetWetnessSpecularFoliageMultiply, NewValue) == 0x000000, "Member 'DynamicWetnessComponent_SetWetnessSpecularFoliageMultiply::NewValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWetnessComponent.SetWetnessSpecularLandscapeMultiply
// 0x0004 (0x0004 - 0x0000)
struct DynamicWetnessComponent_SetWetnessSpecularLandscapeMultiply final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWetnessComponent_SetWetnessSpecularLandscapeMultiply) == 0x000004, "Wrong alignment on DynamicWetnessComponent_SetWetnessSpecularLandscapeMultiply");
static_assert(sizeof(DynamicWetnessComponent_SetWetnessSpecularLandscapeMultiply) == 0x000004, "Wrong size on DynamicWetnessComponent_SetWetnessSpecularLandscapeMultiply");
static_assert(offsetof(DynamicWetnessComponent_SetWetnessSpecularLandscapeMultiply, NewValue) == 0x000000, "Member 'DynamicWetnessComponent_SetWetnessSpecularLandscapeMultiply::NewValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.DynamicWetnessComponent.UpdateWetnessConfig
// 0x04A8 (0x04A8 - 0x0000)
struct DynamicWetnessComponent_UpdateWetnessConfig final
{
public:
	struct FWetnessConfigParameters               NewWetness;                                        // 0x0000(0x04A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicWetnessComponent_UpdateWetnessConfig) == 0x000008, "Wrong alignment on DynamicWetnessComponent_UpdateWetnessConfig");
static_assert(sizeof(DynamicWetnessComponent_UpdateWetnessConfig) == 0x0004A8, "Wrong size on DynamicWetnessComponent_UpdateWetnessConfig");
static_assert(offsetof(DynamicWetnessComponent_UpdateWetnessConfig, NewWetness) == 0x000000, "Member 'DynamicWetnessComponent_UpdateWetnessConfig::NewWetness' has a wrong offset!");

// Function DynamicEnvironmentSystem.EnvironmentLevelConfigActor.SetConfigEnabled
// 0x0001 (0x0001 - 0x0000)
struct EnvironmentLevelConfigActor_SetConfigEnabled final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentLevelConfigActor_SetConfigEnabled) == 0x000001, "Wrong alignment on EnvironmentLevelConfigActor_SetConfigEnabled");
static_assert(sizeof(EnvironmentLevelConfigActor_SetConfigEnabled) == 0x000001, "Wrong size on EnvironmentLevelConfigActor_SetConfigEnabled");
static_assert(offsetof(EnvironmentLevelConfigActor_SetConfigEnabled, bNewValue) == 0x000000, "Member 'EnvironmentLevelConfigActor_SetConfigEnabled::bNewValue' has a wrong offset!");

// Function DynamicEnvironmentSystem.PCGEffectVolume.AddOrUpdateBlendable
// 0x0018 (0x0018 - 0x0000)
struct PCGEffectVolume_AddOrUpdateBlendable final
{
public:
	TScriptInterface<class IBlendableInterface>   InBlendableObject;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InWeight;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGEffectVolume_AddOrUpdateBlendable) == 0x000008, "Wrong alignment on PCGEffectVolume_AddOrUpdateBlendable");
static_assert(sizeof(PCGEffectVolume_AddOrUpdateBlendable) == 0x000018, "Wrong size on PCGEffectVolume_AddOrUpdateBlendable");
static_assert(offsetof(PCGEffectVolume_AddOrUpdateBlendable, InBlendableObject) == 0x000000, "Member 'PCGEffectVolume_AddOrUpdateBlendable::InBlendableObject' has a wrong offset!");
static_assert(offsetof(PCGEffectVolume_AddOrUpdateBlendable, InWeight) == 0x000010, "Member 'PCGEffectVolume_AddOrUpdateBlendable::InWeight' has a wrong offset!");

// Function DynamicEnvironmentSystem.PCGEffectVolumeSystem.GetCurrentSetting
// 0x0040 (0x0040 - 0x0000)
struct PCGEffectVolumeSystem_GetCurrentSetting final
{
public:
	struct FPCGEffectSettings                     ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGEffectVolumeSystem_GetCurrentSetting) == 0x000010, "Wrong alignment on PCGEffectVolumeSystem_GetCurrentSetting");
static_assert(sizeof(PCGEffectVolumeSystem_GetCurrentSetting) == 0x000040, "Wrong size on PCGEffectVolumeSystem_GetCurrentSetting");
static_assert(offsetof(PCGEffectVolumeSystem_GetCurrentSetting, ReturnValue) == 0x000000, "Member 'PCGEffectVolumeSystem_GetCurrentSetting::ReturnValue' has a wrong offset!");

}

