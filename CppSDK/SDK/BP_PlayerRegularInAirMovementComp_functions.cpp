#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerRegularInAirMovementComp

#include "Basic.hpp"

#include "BP_PlayerRegularInAirMovementComp_classes.hpp"
#include "BP_PlayerRegularInAirMovementComp_parameters.hpp"


namespace SDK
{

// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_ActivateJumpFeature
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_ActivateJumpFeature(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_ActivateJumpFeature");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_ActivateJumpFeature Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_CanActivateJumpFeature
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_PlayerRegularInAirMovementComp_C::BP_CanActivateJumpFeature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_CanActivateJumpFeature");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_CanActivateJumpFeature Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_CanCrash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_CanCrash(bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_CanCrash");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_CanCrash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_CanJump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_CanJump(bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_CanJump");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_CanJump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_DeactivateJumpFeature
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_DeactivateJumpFeature(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_DeactivateJumpFeature");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_DeactivateJumpFeature Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_DoFall
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularInAirMovementComp_C::BP_DoFall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_DoFall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_DoFloat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bForce                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_DoFloat(bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_DoFloat");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_DoFloat Parms{};

	Parms.bForce = bForce;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_DoJump
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bForce                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERegularJumpMode                        JumpMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_DoJump(bool bForce, ERegularJumpMode JumpMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_DoJump");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_DoJump Parms{};

	Parms.bForce = bForce;
	Parms.JumpMode = JumpMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_DoJumpRelease
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularInAirMovementComp_C::BP_DoJumpRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_DoJumpRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_ForceActivateJumpFeature
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularInAirMovementComp_C::BP_ForceActivateJumpFeature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_ForceActivateJumpFeature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_IsNormalJumpOnGround
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsNormalJumpOnGround                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_IsNormalJumpOnGround(bool* IsNormalJumpOnGround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_IsNormalJumpOnGround");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_IsNormalJumpOnGround Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNormalJumpOnGround != nullptr)
		*IsNormalJumpOnGround = Parms.IsNormalJumpOnGround;
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_Modify_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_ModifyOwnerJumpStageConfigByDA
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_JumpStage_ConfigTemplate_C*   NewDataAsset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBP_JumpStage_ConfigTemplate_C**  OldDataAsset                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_ModifyOwnerJumpStageConfigByDA(class UBP_JumpStage_ConfigTemplate_C* NewDataAsset, class UBP_JumpStage_ConfigTemplate_C** OldDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_ModifyOwnerJumpStageConfigByDA");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_ModifyOwnerJumpStageConfigByDA Parms{};

	Parms.NewDataAsset = NewDataAsset;

	UObject::ProcessEvent(Func, &Parms);

	if (OldDataAsset != nullptr)
		*OldDataAsset = Parms.OldDataAsset;
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_Multicast_ChangeJumpStage
// (Net, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularFloatingJumpStage               NewStage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForceUpdate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_Multicast_ChangeJumpStage(ERegularFloatingJumpStage NewStage, bool bForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_Multicast_ChangeJumpStage");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_Multicast_ChangeJumpStage Parms{};

	Parms.NewStage = NewStage;
	Parms.bForceUpdate = bForceUpdate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_OverrideCurrentGravityScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  G                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_OverrideCurrentGravityScale(double G)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_OverrideCurrentGravityScale");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_OverrideCurrentGravityScale Parms{};

	Parms.G = G;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_Reset_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularInAirMovementComp_C::BP_Reset_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_Reset_TimeWindowOfResponseJumpInputWhenOffLedgeConfigValue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_ResetGravityScale
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularInAirMovementComp_C::BP_ResetGravityScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_ResetGravityScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_ResetInAirJumpCount
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularInAirMovementComp_C::BP_ResetInAirJumpCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_ResetInAirJumpCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_ResetNormalJumpCount
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularInAirMovementComp_C::BP_ResetNormalJumpCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_ResetNormalJumpCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_ResetOwnerJumpStageConfig
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularInAirMovementComp_C::BP_ResetOwnerJumpStageConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_ResetOwnerJumpStageConfig");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_RevertOwnerJumpStageConfig
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularInAirMovementComp_C::BP_RevertOwnerJumpStageConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_RevertOwnerJumpStageConfig");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_SetEnableSendJumpStageRPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_SetEnableSendJumpStageRPC(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_SetEnableSendJumpStageRPC");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSendJumpStageRPC Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BP_SetEnableSpecialJumpAnim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnableSpecialJumpAnim                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimaryDataAsset*                SpecialJumpDA                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BP_SetEnableSpecialJumpAnim(bool bEnableSpecialJumpAnim, class UPrimaryDataAsset* SpecialJumpDA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BP_SetEnableSpecialJumpAnim");

	Params::BP_PlayerRegularInAirMovementComp_C_BP_SetEnableSpecialJumpAnim Parms{};

	Parms.bEnableSpecialJumpAnim = bEnableSpecialJumpAnim;
	Parms.SpecialJumpDA = SpecialJumpDA;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BPI_Get_CurrentInAirStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularFloatingJumpStage*              FallStage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsInSpecialJumpAnim                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERegularJumpMode*                       RegularJumpMode                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsJumpingInAir                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BPI_Get_CurrentInAirStates(ERegularFloatingJumpStage* FallStage, bool* IsInSpecialJumpAnim, ERegularJumpMode* RegularJumpMode, bool* IsJumpingInAir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BPI_Get_CurrentInAirStates");

	Params::BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FallStage != nullptr)
		*FallStage = Parms.FallStage;

	if (IsInSpecialJumpAnim != nullptr)
		*IsInSpecialJumpAnim = Parms.IsInSpecialJumpAnim;

	if (RegularJumpMode != nullptr)
		*RegularJumpMode = Parms.RegularJumpMode;

	if (IsJumpingInAir != nullptr)
		*IsJumpingInAir = Parms.IsJumpingInAir;
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BPI_Get_CurrentInAirValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 InCurrentHeight                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimaryDataAsset**               SpecialJumpDA                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BPI_Get_CurrentInAirValues(double* InCurrentHeight, class UPrimaryDataAsset** SpecialJumpDA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BPI_Get_CurrentInAirValues");

	Params::BP_PlayerRegularInAirMovementComp_C_BPI_Get_CurrentInAirValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InCurrentHeight != nullptr)
		*InCurrentHeight = Parms.InCurrentHeight;

	if (SpecialJumpDA != nullptr)
		*SpecialJumpDA = Parms.SpecialJumpDA;
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BPI_Get_EssentialValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         InVelocity                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         InCurrentAcceleration                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InMaxAcceleration                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InTurnAroundAngle                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BPI_Get_EssentialValues(struct FVector* InVelocity, struct FVector* InCurrentAcceleration, double* InMaxAcceleration, double* InTurnAroundAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BPI_Get_EssentialValues");

	Params::BP_PlayerRegularInAirMovementComp_C_BPI_Get_EssentialValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InVelocity != nullptr)
		*InVelocity = std::move(Parms.InVelocity);

	if (InCurrentAcceleration != nullptr)
		*InCurrentAcceleration = std::move(Parms.InCurrentAcceleration);

	if (InMaxAcceleration != nullptr)
		*InMaxAcceleration = Parms.InMaxAcceleration;

	if (InTurnAroundAngle != nullptr)
		*InTurnAroundAngle = Parms.InTurnAroundAngle;
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.BPI_Get_MaxSpeedValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 CurMinAnalogWalkSpeed                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CurConfigMaxSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CurActualMaxSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::BPI_Get_MaxSpeedValues(double* CurMinAnalogWalkSpeed, double* CurConfigMaxSpeed, double* CurActualMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "BPI_Get_MaxSpeedValues");

	Params::BP_PlayerRegularInAirMovementComp_C_BPI_Get_MaxSpeedValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurMinAnalogWalkSpeed != nullptr)
		*CurMinAnalogWalkSpeed = Parms.CurMinAnalogWalkSpeed;

	if (CurConfigMaxSpeed != nullptr)
		*CurConfigMaxSpeed = Parms.CurConfigMaxSpeed;

	if (CurActualMaxSpeed != nullptr)
		*CurActualMaxSpeed = Parms.CurActualMaxSpeed;
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.ExecuteUbergraph_BP_PlayerRegularInAirMovementComp
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::ExecuteUbergraph_BP_PlayerRegularInAirMovementComp(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "ExecuteUbergraph_BP_PlayerRegularInAirMovementComp");

	Params::BP_PlayerRegularInAirMovementComp_C_ExecuteUbergraph_BP_PlayerRegularInAirMovementComp Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.InputAction_Crash
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularInAirMovementComp_C::InputAction_Crash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "InputAction_Crash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.MulticastRPC_ChangeJumpStage
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularFloatingJumpStage               NewStage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForceUpdate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::MulticastRPC_ChangeJumpStage(ERegularFloatingJumpStage NewStage, bool bForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "MulticastRPC_ChangeJumpStage");

	Params::BP_PlayerRegularInAirMovementComp_C_MulticastRPC_ChangeJumpStage Parms{};

	Parms.NewStage = NewStage;
	Parms.bForceUpdate = bForceUpdate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_PlayerRegularInAirMovementComp_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "ReceiveTick");

	Params::BP_PlayerRegularInAirMovementComp_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.UpdateFallState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularFloatingJumpStage               FallStage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSlide                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularInAirMovementComp_C::UpdateFallState(ERegularFloatingJumpStage FallStage, bool IsSlide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "UpdateFallState");

	Params::BP_PlayerRegularInAirMovementComp_C_UpdateFallState Parms{};

	Parms.FallStage = FallStage;
	Parms.IsSlide = IsSlide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularInAirMovementComp.BP_PlayerRegularInAirMovementComp_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_PlayerRegularInAirMovementComp_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularInAirMovementComp_C", "GetModuleName");

	Params::BP_PlayerRegularInAirMovementComp_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

