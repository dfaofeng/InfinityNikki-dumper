#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerUTCInputComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "X6Game_structs.hpp"
#include "X6Game_classes.hpp"
#include "UTCConfigStruct_structs.hpp"
#include "EDeviceScreenSizeType_structs.hpp"
#include "F_UTCRatioConfig_structs.hpp"
#include "InputCore_structs.hpp"
#include "EUTCJoystickMode_structs.hpp"
#include "UTCControlTypeEnum_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerUTCInputComponent.BP_PlayerUTCInputComponent_C
// 0x01C8 (0x0270 - 0x00A8)
class UBP_PlayerUTCInputComponent_C final : public UX6UtcPlayerInputComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FUTCConfigStruct                       UTCConfig;                                         // 0x00B0(0x0078)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class UUTCTapComponent_C*                     TapComponent;                                      // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          TapCreated;                                        // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PinchCreated;                                      // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUTCPinchComponent_C*                   PinchComponent;                                    // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UUTCComponent_C*>     TagToComponent;                                    // 0x0140(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMulticastInlineDelegate<void()>              NewEventDispatcher_0;                              // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UUTCComponent_C*>                FilteredComponents;                                // 0x01A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        PixelRateSTR;                                      // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDeviceScreenSizeType                         ScreenType;                                        // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_UTCRatioConfig                      UTCRateConfig;                                     // 0x01C0(0x00A8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	EUTCJoystickMode                              JoystickMode;                                      // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UTCTouch_Input_Manager(EX6InputTouchEvent X6InputTouchEvent, ETouchIndex FingerIndex, const struct FVector& Location);
	void UpdateSwipeToMoveComponent(class UUTCSwipeToMoveComponent_C* SwipeToMoveComponent, EUTCControlTypeEnum ControlType, const struct FVector2D& InteractionOrigin, const struct FVector2D& InteractionSize);
	void UpdateJoystickComponent(class UUTCJoystickComponent_C* joystickComponent, EUTCControlTypeEnum ControlType, const struct FVector2D& CenterPos, const struct FVector2D& VisualSize, const struct FVector2D& ThumbSize, const struct FVector2D& InteractionOrigin, const struct FVector2D& InteractionSize, bool LockPos, bool UseFloat, const struct FVector2D& EdgeGapSize, const struct FVector2D& PosOffset, double Scale);
	void UpdateComponentByControlType(EUTCControlTypeEnum ControlType, EUTCJoystickMode JoystickMode_0);
	void SetTouchEnable(EUTCControlTypeEnum ControlType, bool bEnable);
	void RightToLeft(double InX, bool bInPercent, bool bLogicSize, double* OutX);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnViewportSizeChanged(const struct FVector2D& Previous_Size, const struct FVector2D& Updated_Size);
	void InitUTCConfig();
	void InitUTCComponents();
	void HandleTouchEvent(EX6InputTouchEvent X6InputTouchEvent, ETouchIndex FingerIndex, const struct FVector& Location);
	bool HandleExtraMouseRelease(const struct FPointerEvent& MouseEvent);
	void GetVectorBySTR(const struct FVector2D& standardVec, struct FVector2D* realVec);
	void GetVector2DInPercent(const struct FVector2D& InValue, struct FVector2D* OutValue);
	void GetVector2dInAbsolute(const struct FVector2D& InValue, struct FVector2D* OutValue);
	void GetSwipeToMoveConfig(EUTCControlTypeEnum ControlType, struct FVector2D* InteractionOrigin, struct FVector2D* InteractionSize);
	void GetSwipeToMoveComponent(class UUTCSwipeToMoveComponent_C** Comp);
	void GetJoystickConfig(EUTCControlTypeEnum ControlType, EUTCJoystickMode JoystickMode_0, struct FVector2D* CenterPos, struct FVector2D* VisualSize, struct FVector2D* ThumbSize, struct FVector2D* InteractionOrigin, struct FVector2D* InteractionSize, bool* LockPos, bool* UseFloat, struct FVector2D* EdgeGapSize);
	void GetComponentByControlType(EUTCControlTypeEnum ControlType, class UUTCComponent_C** OutComponent, bool* IsValid);
	void ExecuteUbergraph_BP_PlayerUTCInputComponent(int32 EntryPoint);
	void DownToTop(double InY, bool bInPercent, bool bLogicSize, double* OutY);
	void DeInitUTCComponents();
	void CreateUTCComponent(EUTCControlTypeEnum ControlType);
	void BP_UpdateJoystickComponent(EUTCControlTypeEnum ControlType, const struct FVector2D& CenterPos, const struct FVector2D& VisualSize, const struct FVector2D& ThumbSize, const struct FVector2D& InteractionOrigin, const struct FVector2D& InteractionSize, bool LockPos, bool UseFloat, const struct FVector2D& EdgeGapSize);
	void BP_SetUTCComponentsTickEnabled(bool bEnabled);
	void BP_SetTouchEnable(bool bEnableControlCamera, bool bEnableControlMove);
	void BP_ResetJoystickAxis();
	void BP_ResetByConfig(EUTCControlTypeEnum ControlType, EUTCJoystickMode JoystickMode_0);
	void BP_InitTouchEventBinding();
	void BP_InitTouch(class UUserWidget* JoystickWidget, EUTCControlTypeEnum ControlType, bool* IsValid);
	void BP_GetJoysitckDefaultInfo(EUTCJoystickMode Mode, struct FVector2D* Pos, double* Size);
	void AdjustWidgetInitPos(const struct FVector2D& InVector2D, const struct FVector2D& InSize, EUTCControlTypeEnum ControlType, struct FVector2D* OutVector2D);
	void AdjustBoundOrigin(const struct FVector2D& InOrigin, const struct FVector2D& InSize, EUTCControlTypeEnum ControlType, struct FVector2D* OutOrigin);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerUTCInputComponent_C">();
	}
	static class UBP_PlayerUTCInputComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerUTCInputComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerUTCInputComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerUTCInputComponent_C");
static_assert(sizeof(UBP_PlayerUTCInputComponent_C) == 0x000270, "Wrong size on UBP_PlayerUTCInputComponent_C");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, UberGraphFrame) == 0x0000A8, "Member 'UBP_PlayerUTCInputComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, UTCConfig) == 0x0000B0, "Member 'UBP_PlayerUTCInputComponent_C::UTCConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, TapComponent) == 0x000128, "Member 'UBP_PlayerUTCInputComponent_C::TapComponent' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, TapCreated) == 0x000130, "Member 'UBP_PlayerUTCInputComponent_C::TapCreated' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, PinchCreated) == 0x000131, "Member 'UBP_PlayerUTCInputComponent_C::PinchCreated' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, PinchComponent) == 0x000138, "Member 'UBP_PlayerUTCInputComponent_C::PinchComponent' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, TagToComponent) == 0x000140, "Member 'UBP_PlayerUTCInputComponent_C::TagToComponent' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, NewEventDispatcher_0) == 0x000190, "Member 'UBP_PlayerUTCInputComponent_C::NewEventDispatcher_0' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, FilteredComponents) == 0x0001A0, "Member 'UBP_PlayerUTCInputComponent_C::FilteredComponents' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, PixelRateSTR) == 0x0001B0, "Member 'UBP_PlayerUTCInputComponent_C::PixelRateSTR' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, ScreenType) == 0x0001B8, "Member 'UBP_PlayerUTCInputComponent_C::ScreenType' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, UTCRateConfig) == 0x0001C0, "Member 'UBP_PlayerUTCInputComponent_C::UTCRateConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerUTCInputComponent_C, JoystickMode) == 0x000268, "Member 'UBP_PlayerUTCInputComponent_C::JoystickMode' has a wrong offset!");

}

