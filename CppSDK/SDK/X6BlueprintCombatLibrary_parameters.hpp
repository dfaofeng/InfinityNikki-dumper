#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6BlueprintCombatLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "EDamagePerformanceType_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "EScenarioCombatEventType_structs.hpp"
#include "F_BuffDurationSet_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "EHitDisMoveType_structs.hpp"
#include "EHitReason_structs.hpp"
#include "EFeedBackReason_structs.hpp"
#include "Enum_JumpToTaskTraceType_structs.hpp"


namespace SDK::Params
{

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.LocalSpawnActorWithServerInit
// 0x0068 (0x0068 - 0x0000)
struct X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit final
{
public:
	class UClass*                                 SpawnClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Postion;                                           // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAddToSoloLevel;                                   // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConfigID;                                          // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_X6SpawnActor_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AX6Actor*                               K2Node_DynamicCast_AsX6Actor;                      // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit");
static_assert(sizeof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit) == 0x000068, "Wrong size on X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit");
static_assert(offsetof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit, SpawnClass) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit::SpawnClass' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit, Postion) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit::Postion' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit, Rotation) == 0x000020, "Member 'X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit::Rotation' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit, bAddToSoloLevel) == 0x000038, "Member 'X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit::bAddToSoloLevel' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit, ConfigID) == 0x00003C, "Member 'X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit::ConfigID' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit, __WorldContext) == 0x000040, "Member 'X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit, Actor) == 0x000048, "Member 'X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit, CallFunc_X6SpawnActor_ReturnValue) == 0x000050, "Member 'X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit::CallFunc_X6SpawnActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit, K2Node_DynamicCast_AsX6Actor) == 0x000058, "Member 'X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit::K2Node_DynamicCast_AsX6Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'X6BlueprintCombatLibrary_C_LocalSpawnActorWithServerInit::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_TryShowTreasurebox
// 0x0008 (0x0008 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_TryShowTreasurebox final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_TryShowTreasurebox) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_TryShowTreasurebox");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_TryShowTreasurebox) == 0x000008, "Wrong size on X6BlueprintCombatLibrary_C_BP_TryShowTreasurebox");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_TryShowTreasurebox, __WorldContext) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_TryShowTreasurebox::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_SetShieldState
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_SetShieldState final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShieldOpen;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_SetShieldState) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_SetShieldState");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_SetShieldState) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_SetShieldState");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_SetShieldState, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_SetShieldState::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_SetShieldState, ShieldOpen) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_SetShieldState::ShieldOpen' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_SetShieldState, __WorldContext) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_SetShieldState::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_SetMonsterMarkerState
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_SetMonsterMarkerState final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowMarker;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_SetMonsterMarkerState) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_SetMonsterMarkerState");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_SetMonsterMarkerState) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_SetMonsterMarkerState");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_SetMonsterMarkerState, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_SetMonsterMarkerState::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_SetMonsterMarkerState, ShowMarker) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_SetMonsterMarkerState::ShowMarker' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_SetMonsterMarkerState, __WorldContext) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_SetMonsterMarkerState::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_SetHighNavCostArea
// 0x0038 (0x0038 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Radius;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Height;                                            // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LifeTime;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea) == 0x000038, "Wrong size on X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea, Center) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea::Center' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea, Radius) == 0x000018, "Member 'X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea::Radius' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea, Height) == 0x000020, "Member 'X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea::Height' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea, LifeTime) == 0x000028, "Member 'X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea::LifeTime' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea, __WorldContext) == 0x000030, "Member 'X6BlueprintCombatLibrary_C_BP_SetHighNavCostArea::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_ResetTokenType
// 0x0010 (0x0010 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_ResetTokenType final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_ResetTokenType) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_ResetTokenType");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_ResetTokenType) == 0x000010, "Wrong size on X6BlueprintCombatLibrary_C_BP_ResetTokenType");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ResetTokenType, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_ResetTokenType::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ResetTokenType, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_ResetTokenType::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_ResetAISightConfig
// 0x0010 (0x0010 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_ResetAISightConfig final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_ResetAISightConfig) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_ResetAISightConfig");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_ResetAISightConfig) == 0x000010, "Wrong size on X6BlueprintCombatLibrary_C_BP_ResetAISightConfig");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ResetAISightConfig, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_ResetAISightConfig::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ResetAISightConfig, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_ResetAISightConfig::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_RemoveBuff
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_RemoveBuff final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_BuffConfig_C*                       BuffDA;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_RemoveBuff) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_RemoveBuff");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_RemoveBuff) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_RemoveBuff");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_RemoveBuff, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_RemoveBuff::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_RemoveBuff, BuffDA) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_RemoveBuff::BuffDA' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_RemoveBuff, __WorldContext) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_RemoveBuff::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_PlayShakeSourceByLocation
// 0x0068 (0x0068 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UBP_CameraAndForceShakeConfigTemplate_C> ConfigSoftRef;                     // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FString                                 ShakeSourceKey;                                    // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 Ret_ShakeSourceKey;                                // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation) == 0x000068, "Wrong size on X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation, Location) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation::Location' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation, ConfigSoftRef) == 0x000018, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation::ConfigSoftRef' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation, ShakeSourceKey) == 0x000040, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation::ShakeSourceKey' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation, __WorldContext) == 0x000050, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation, Ret_ShakeSourceKey) == 0x000058, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSourceByLocation::Ret_ShakeSourceKey' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_PlayShakeSource
// 0x0070 (0x0070 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_PlayShakeSource final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UBP_CameraAndForceShakeConfigTemplate_C> ConfigSoftRef;                     // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          IsAttach;                                          // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AttachSocketName;                                  // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 ShakeSourceKey;                                    // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 Ret_ShakeSourceKey;                                // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_PlayShakeSource) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_PlayShakeSource");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_PlayShakeSource) == 0x000070, "Wrong size on X6BlueprintCombatLibrary_C_BP_PlayShakeSource");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSource, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSource::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSource, ConfigSoftRef) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSource::ConfigSoftRef' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSource, IsAttach) == 0x000030, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSource::IsAttach' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSource, AttachSocketName) == 0x000038, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSource::AttachSocketName' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSource, ShakeSourceKey) == 0x000048, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSource::ShakeSourceKey' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSource, __WorldContext) == 0x000058, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSource::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayShakeSource, Ret_ShakeSourceKey) == 0x000060, "Member 'X6BlueprintCombatLibrary_C_BP_PlayShakeSource::Ret_ShakeSourceKey' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_PlayMontageByTag
// 0x00F8 (0x00F8 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_PlayMontageByTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           MontageTag;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeGameplayTagContainerFromTag_ReturnValue; // 0x0020(0x0020)()
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData;               // 0x0040(0x00B0)()
	bool                                          CallFunc_SendGameplayEventToActorWithRet_ReturnValue; // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_PlayMontageByTag) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_PlayMontageByTag");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_PlayMontageByTag) == 0x0000F8, "Wrong size on X6BlueprintCombatLibrary_C_BP_PlayMontageByTag");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayMontageByTag, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_PlayMontageByTag::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayMontageByTag, MontageTag) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_PlayMontageByTag::MontageTag' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayMontageByTag, __WorldContext) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_PlayMontageByTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayMontageByTag, Result) == 0x000018, "Member 'X6BlueprintCombatLibrary_C_BP_PlayMontageByTag::Result' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayMontageByTag, CallFunc_MakeGameplayTagContainerFromTag_ReturnValue) == 0x000020, "Member 'X6BlueprintCombatLibrary_C_BP_PlayMontageByTag::CallFunc_MakeGameplayTagContainerFromTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayMontageByTag, K2Node_MakeStruct_GameplayEventData) == 0x000040, "Member 'X6BlueprintCombatLibrary_C_BP_PlayMontageByTag::K2Node_MakeStruct_GameplayEventData' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_PlayMontageByTag, CallFunc_SendGameplayEventToActorWithRet_ReturnValue) == 0x0000F0, "Member 'X6BlueprintCombatLibrary_C_BP_PlayMontageByTag::CallFunc_SendGameplayEventToActorWithRet_ReturnValue' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_OnCharacterEnterLeaveBattleArea
// 0x0008 (0x0008 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_OnCharacterEnterLeaveBattleArea final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_OnCharacterEnterLeaveBattleArea) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_OnCharacterEnterLeaveBattleArea");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_OnCharacterEnterLeaveBattleArea) == 0x000008, "Wrong size on X6BlueprintCombatLibrary_C_BP_OnCharacterEnterLeaveBattleArea");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_OnCharacterEnterLeaveBattleArea, __WorldContext) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_OnCharacterEnterLeaveBattleArea::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_OnBossUseSkill
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_OnBossUseSkill final
{
public:
	class FString                                 SkillKey;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_OnBossUseSkill) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_OnBossUseSkill");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_OnBossUseSkill) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_OnBossUseSkill");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_OnBossUseSkill, SkillKey) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_OnBossUseSkill::SkillKey' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_OnBossUseSkill, __WorldContext) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_OnBossUseSkill::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_ModifyHP
// 0x0020 (0x0020 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_ModifyHP final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFeedBackReason                               Reason;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_ModifyHP) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_ModifyHP");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_ModifyHP) == 0x000020, "Wrong size on X6BlueprintCombatLibrary_C_BP_ModifyHP");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyHP, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyHP::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyHP, Value) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyHP::Value' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyHP, Reason) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyHP::Reason' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyHP, __WorldContext) == 0x000018, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyHP::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_ModifyControllerRoleHP
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_ModifyControllerRoleHP final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFeedBackReason                               Reason;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_ModifyControllerRoleHP) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_ModifyControllerRoleHP");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_ModifyControllerRoleHP) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_ModifyControllerRoleHP");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyControllerRoleHP, Value) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyControllerRoleHP::Value' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyControllerRoleHP, Reason) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyControllerRoleHP::Reason' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyControllerRoleHP, __WorldContext) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyControllerRoleHP::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_ModifyAISightConfigByDA
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_ModifyAISightConfigByDA final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_WorldAI_PerceptionConfig_C*         AISightDA;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_ModifyAISightConfigByDA) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_ModifyAISightConfigByDA");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_ModifyAISightConfigByDA) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_ModifyAISightConfigByDA");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyAISightConfigByDA, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyAISightConfigByDA::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyAISightConfigByDA, AISightDA) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyAISightConfigByDA::AISightDA' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyAISightConfigByDA, __WorldContext) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyAISightConfigByDA::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_ModifyAIBehaviorTag
// 0x0028 (0x0028 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AIBehaviorTag;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_X6MonsterrCharacter_C*              K2Node_DynamicCast_AsBP_X6Monsterr_Character;      // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag) == 0x000028, "Wrong size on X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag, AIBehaviorTag) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag::AIBehaviorTag' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag, __WorldContext) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag, K2Node_DynamicCast_AsBP_X6Monsterr_Character) == 0x000018, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag::K2Node_DynamicCast_AsBP_X6Monsterr_Character' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'X6BlueprintCombatLibrary_C_BP_ModifyAIBehaviorTag::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_IsDead
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_IsDead final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_IsDead) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_IsDead");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_IsDead) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_IsDead");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_IsDead, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_IsDead::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_IsDead, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_IsDead::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_IsDead, IsDead) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_IsDead::IsDead' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_GetX6AIPerceptionComponent
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_GetX6AIPerceptionComponent final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UX6AIPerceptionComponent*               X6AIPerceptionComp;                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_GetX6AIPerceptionComponent) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_GetX6AIPerceptionComponent");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_GetX6AIPerceptionComponent) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_GetX6AIPerceptionComponent");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetX6AIPerceptionComponent, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_GetX6AIPerceptionComponent::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetX6AIPerceptionComponent, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_GetX6AIPerceptionComponent::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetX6AIPerceptionComponent, X6AIPerceptionComp) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_GetX6AIPerceptionComponent::X6AIPerceptionComp' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_GetSafeSpawnLocationsFromOffset
// 0x0048 (0x0048 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      OffsetLocations;                                   // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	double                                        GroundHeight;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CheckLength;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DrawDebug;                                         // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        SafeSpawnLocation;                                 // 0x0038(0x0010)(Parm, OutParm)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset) == 0x000048, "Wrong size on X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset, OwnerActor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset::OwnerActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset, OffsetLocations) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset::OffsetLocations' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset, GroundHeight) == 0x000018, "Member 'X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset::GroundHeight' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset, CheckLength) == 0x000020, "Member 'X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset::CheckLength' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset, DrawDebug) == 0x000028, "Member 'X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset::DrawDebug' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset, __WorldContext) == 0x000030, "Member 'X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset, SafeSpawnLocation) == 0x000038, "Member 'X6BlueprintCombatLibrary_C_BP_GetSafeSpawnLocationsFromOffset::SafeSpawnLocation' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_GetRandomPoints
// 0x0050 (0x0050 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_GetRandomPoints final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InnerRadius;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OuterRadius;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Interval;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PointNum;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        RandomPoints;                                      // 0x0040(0x0010)(Parm, OutParm)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_GetRandomPoints) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_GetRandomPoints");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_GetRandomPoints) == 0x000050, "Wrong size on X6BlueprintCombatLibrary_C_BP_GetRandomPoints");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetRandomPoints, Center) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_GetRandomPoints::Center' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetRandomPoints, InnerRadius) == 0x000018, "Member 'X6BlueprintCombatLibrary_C_BP_GetRandomPoints::InnerRadius' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetRandomPoints, OuterRadius) == 0x000020, "Member 'X6BlueprintCombatLibrary_C_BP_GetRandomPoints::OuterRadius' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetRandomPoints, Interval) == 0x000028, "Member 'X6BlueprintCombatLibrary_C_BP_GetRandomPoints::Interval' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetRandomPoints, PointNum) == 0x000030, "Member 'X6BlueprintCombatLibrary_C_BP_GetRandomPoints::PointNum' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetRandomPoints, __WorldContext) == 0x000038, "Member 'X6BlueprintCombatLibrary_C_BP_GetRandomPoints::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetRandomPoints, RandomPoints) == 0x000040, "Member 'X6BlueprintCombatLibrary_C_BP_GetRandomPoints::RandomPoints' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_GetMonsterRangeOfBattleSq
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_GetMonsterRangeOfBattleSq final
{
public:
	class AActor*                                 MonsterActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        RangeOfBattleSq;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_GetMonsterRangeOfBattleSq) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_GetMonsterRangeOfBattleSq");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_GetMonsterRangeOfBattleSq) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_GetMonsterRangeOfBattleSq");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetMonsterRangeOfBattleSq, MonsterActor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_GetMonsterRangeOfBattleSq::MonsterActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetMonsterRangeOfBattleSq, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_GetMonsterRangeOfBattleSq::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetMonsterRangeOfBattleSq, RangeOfBattleSq) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_GetMonsterRangeOfBattleSq::RangeOfBattleSq' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_GetCrowdAllocatePoints
// 0x0080 (0x0080 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints final
{
public:
	class AActor*                                 CenterActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actors;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FVector>                        Positions;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<class AActor*, struct FVector>           Results;                                           // 0x0030(0x0050)(Parm, OutParm)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints) == 0x000080, "Wrong size on X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints, CenterActor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints::CenterActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints, Actors) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints::Actors' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints, Positions) == 0x000018, "Member 'X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints::Positions' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints, __WorldContext) == 0x000028, "Member 'X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints, Results) == 0x000030, "Member 'X6BlueprintCombatLibrary_C_BP_GetCrowdAllocatePoints::Results' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_GetActorMaxHP
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_GetActorMaxHP final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        MaxHP;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_GetActorMaxHP) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_GetActorMaxHP");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_GetActorMaxHP) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_GetActorMaxHP");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetActorMaxHP, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_GetActorMaxHP::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetActorMaxHP, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_GetActorMaxHP::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetActorMaxHP, MaxHP) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_GetActorMaxHP::MaxHP' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_GetActorHP
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_GetActorHP final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        HP;                                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_GetActorHP) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_GetActorHP");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_GetActorHP) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_GetActorHP");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetActorHP, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_GetActorHP::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetActorHP, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_GetActorHP::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_GetActorHP, HP) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_GetActorHP::HP' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_ForceHitBackNikki
// 0x0040 (0x0040 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki final
{
public:
	class AActor*                                 Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDirection;                                      // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitBackTag;                                        // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyAirHitConfig;                                 // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki) == 0x000040, "Wrong size on X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki, Attacker) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki::Attacker' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki, HitDirection) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki::HitDirection' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki, HitBackTag) == 0x000020, "Member 'X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki::HitBackTag' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki, ApplyAirHitConfig) == 0x000028, "Member 'X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki::ApplyAirHitConfig' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki, __WorldContext) == 0x000030, "Member 'X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki, bSuccess) == 0x000038, "Member 'X6BlueprintCombatLibrary_C_BP_ForceHitBackNikki::bSuccess' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_EnterEliteCombat
// 0x0010 (0x0010 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_EnterEliteCombat final
{
public:
	int32                                         EntityID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_EnterEliteCombat) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_EnterEliteCombat");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_EnterEliteCombat) == 0x000010, "Wrong size on X6BlueprintCombatLibrary_C_BP_EnterEliteCombat");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_EnterEliteCombat, EntityID) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_EnterEliteCombat::EntityID' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_EnterEliteCombat, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_EnterEliteCombat::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_EnterBossCombat
// 0x0010 (0x0010 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_EnterBossCombat final
{
public:
	int32                                         BossId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_EnterBossCombat) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_EnterBossCombat");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_EnterBossCombat) == 0x000010, "Wrong size on X6BlueprintCombatLibrary_C_BP_EnterBossCombat");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_EnterBossCombat, BossId) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_EnterBossCombat::BossId' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_EnterBossCombat, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_EnterBossCombat::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_EndPlayShakeSource
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_EndPlayShakeSource final
{
public:
	class FString                                 ShakeSourceKey;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_EndPlayShakeSource) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_EndPlayShakeSource");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_EndPlayShakeSource) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_EndPlayShakeSource");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_EndPlayShakeSource, ShakeSourceKey) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_EndPlayShakeSource::ShakeSourceKey' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_EndPlayShakeSource, __WorldContext) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_EndPlayShakeSource::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_EnableRecoveryFilterAndOutline
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSameEnableCollision;                              // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline, TargetActor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline::TargetActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline, bEnable) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline::bEnable' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline, bSameEnableCollision) == 0x000009, "Member 'X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline::bSameEnableCollision' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline, __WorldContext) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_EnableRecoveryFilterAndOutline::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_DoActiveHitAndDamage
// 0x0080 (0x0080 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EDamagePerformanceType                        PerformanceType;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DamageValue;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDirection;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AttackerActor;                                     // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        HitDistance;                                       // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitHeight;                                         // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitDuration;                                       // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 HitCurveVectorKey;                                 // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          HitOpenLandFinish;                                 // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitDisMoveType                               HitMoveType;                                       // 0x0061(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsForceBack;                                       // 0x0062(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReason                                    HitReason;                                         // 0x0063(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitBackTag;                                        // 0x0064(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage) == 0x000080, "Wrong size on X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, TargetActor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::TargetActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, PerformanceType) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::PerformanceType' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, DamageValue) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::DamageValue' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, HitDirection) == 0x000018, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::HitDirection' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, AttackerActor) == 0x000030, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::AttackerActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, HitDistance) == 0x000038, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::HitDistance' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, HitHeight) == 0x000040, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::HitHeight' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, HitDuration) == 0x000048, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::HitDuration' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, HitCurveVectorKey) == 0x000050, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::HitCurveVectorKey' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, HitOpenLandFinish) == 0x000060, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::HitOpenLandFinish' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, HitMoveType) == 0x000061, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::HitMoveType' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, IsForceBack) == 0x000062, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::IsForceBack' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, HitReason) == 0x000063, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::HitReason' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, HitBackTag) == 0x000064, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::HitBackTag' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, __WorldContext) == 0x000070, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage, IsSuccess) == 0x000078, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveHitAndDamage::IsSuccess' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_DoActiveForceHit
// 0x0070 (0x0070 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_DoActiveForceHit final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EDamagePerformanceType                        PerformanceType;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitDirection;                                      // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AttackerActor;                                     // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        HitDistance;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitHeight;                                         // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitDuration;                                       // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 HitCurveVectorKey;                                 // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          HitOpenLandFinish;                                 // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitDisMoveType                               HitMoveType;                                       // 0x0059(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_DoActiveForceHit");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit) == 0x000070, "Wrong size on X6BlueprintCombatLibrary_C_BP_DoActiveForceHit");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, TargetActor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::TargetActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, PerformanceType) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::PerformanceType' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, HitDirection) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::HitDirection' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, AttackerActor) == 0x000028, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::AttackerActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, HitDistance) == 0x000030, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::HitDistance' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, HitHeight) == 0x000038, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::HitHeight' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, HitDuration) == 0x000040, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::HitDuration' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, HitCurveVectorKey) == 0x000048, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::HitCurveVectorKey' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, HitOpenLandFinish) == 0x000058, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::HitOpenLandFinish' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, HitMoveType) == 0x000059, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::HitMoveType' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, __WorldContext) == 0x000060, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoActiveForceHit, IsSuccess) == 0x000068, "Member 'X6BlueprintCombatLibrary_C_BP_DoActiveForceHit::IsSuccess' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_DisableStrafeMovement
// 0x0010 (0x0010 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_DisableStrafeMovement final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_DisableStrafeMovement) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_DisableStrafeMovement");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_DisableStrafeMovement) == 0x000010, "Wrong size on X6BlueprintCombatLibrary_C_BP_DisableStrafeMovement");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DisableStrafeMovement, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_DisableStrafeMovement::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DisableStrafeMovement, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_DisableStrafeMovement::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_CommonEventTrigger
// 0x0010 (0x0010 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_CommonEventTrigger final
{
public:
	int32                                         MonsterConfigID;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EScenarioCombatEventType                      NoticeType;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_CommonEventTrigger) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_CommonEventTrigger");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_CommonEventTrigger) == 0x000010, "Wrong size on X6BlueprintCombatLibrary_C_BP_CommonEventTrigger");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CommonEventTrigger, MonsterConfigID) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_CommonEventTrigger::MonsterConfigID' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CommonEventTrigger, NoticeType) == 0x000004, "Member 'X6BlueprintCombatLibrary_C_BP_CommonEventTrigger::NoticeType' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CommonEventTrigger, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_CommonEventTrigger::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_CombatEarlyWarning
// 0x00D8 (0x00D8 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning final
{
public:
	Enum_JumpToTaskTraceType                      TraceType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         EarlyWarningNiagara;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NiagaraOffset;                                     // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, double>                     NiagaraFloatVariable;                              // 0x0028(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	TMap<class FName, struct FVector>             NiagaraVectorVariable;                             // 0x0078(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 Target;                                            // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning) == 0x0000D8, "Wrong size on X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning, TraceType) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning::TraceType' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning, EarlyWarningNiagara) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning::EarlyWarningNiagara' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning, NiagaraOffset) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning::NiagaraOffset' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning, NiagaraFloatVariable) == 0x000028, "Member 'X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning::NiagaraFloatVariable' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning, NiagaraVectorVariable) == 0x000078, "Member 'X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning::NiagaraVectorVariable' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning, Target) == 0x0000C8, "Member 'X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning::Target' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning, __WorldContext) == 0x0000D0, "Member 'X6BlueprintCombatLibrary_C_BP_CombatEarlyWarning::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_ChangeHatredValueByTag
// 0x0018 (0x0018 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_ChangeHatredValueByTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TriggerTag;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_ChangeHatredValueByTag) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_ChangeHatredValueByTag");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_ChangeHatredValueByTag) == 0x000018, "Wrong size on X6BlueprintCombatLibrary_C_BP_ChangeHatredValueByTag");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ChangeHatredValueByTag, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_ChangeHatredValueByTag::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ChangeHatredValueByTag, TriggerTag) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_ChangeHatredValueByTag::TriggerTag' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_ChangeHatredValueByTag, __WorldContext) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_ChangeHatredValueByTag::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_BlendCameraOut
// 0x0038 (0x0038 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_BlendCameraOut final
{
public:
	class AActor*                                 CameraOwnerActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CameraConfigIndex;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FViewTargetTransitionParams            BlendOutTransitionParams;                          // 0x0010(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_BlendCameraOut) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_BlendCameraOut");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_BlendCameraOut) == 0x000038, "Wrong size on X6BlueprintCombatLibrary_C_BP_BlendCameraOut");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_BlendCameraOut, CameraOwnerActor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_BlendCameraOut::CameraOwnerActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_BlendCameraOut, CameraConfigIndex) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_BlendCameraOut::CameraConfigIndex' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_BlendCameraOut, BlendOutTransitionParams) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_BlendCameraOut::BlendOutTransitionParams' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_BlendCameraOut, __WorldContext) == 0x000030, "Member 'X6BlueprintCombatLibrary_C_BP_BlendCameraOut::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_BlendCameraIn
// 0x0040 (0x0040 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_BlendCameraIn final
{
public:
	class AActor*                                 CameraOwnerActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCameraBaseParamsData*                  CameraToBlend;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FViewTargetTransitionParams            BlendInTransitionParams;                           // 0x0010(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ConfigIndex;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_BlendCameraIn) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_BlendCameraIn");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_BlendCameraIn) == 0x000040, "Wrong size on X6BlueprintCombatLibrary_C_BP_BlendCameraIn");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_BlendCameraIn, CameraOwnerActor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_BlendCameraIn::CameraOwnerActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_BlendCameraIn, CameraToBlend) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_BlendCameraIn::CameraToBlend' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_BlendCameraIn, BlendInTransitionParams) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_BlendCameraIn::BlendInTransitionParams' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_BlendCameraIn, __WorldContext) == 0x000030, "Member 'X6BlueprintCombatLibrary_C_BP_BlendCameraIn::__WorldContext' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_BlendCameraIn, ConfigIndex) == 0x000038, "Member 'X6BlueprintCombatLibrary_C_BP_BlendCameraIn::ConfigIndex' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_AddBuff
// 0x0028 (0x0028 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_AddBuff final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_BuffConfig_C*                       BuffDA;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FF_BuffDurationSet                     OverrideDurationConfig;                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_AddBuff) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_AddBuff");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_AddBuff) == 0x000028, "Wrong size on X6BlueprintCombatLibrary_C_BP_AddBuff");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_AddBuff, Actor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_AddBuff::Actor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_AddBuff, BuffDA) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_AddBuff::BuffDA' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_AddBuff, OverrideDurationConfig) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_AddBuff::OverrideDurationConfig' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_AddBuff, __WorldContext) == 0x000020, "Member 'X6BlueprintCombatLibrary_C_BP_AddBuff::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_DoSlomo
// 0x0038 (0x0038 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_DoSlomo final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ActorSlomoDuration;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ActorSlomoRate;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsApplyGlobal;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GloabalSlomoDuration;                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GloabalSlomoRate;                                  // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_DoSlomo) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_DoSlomo");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_DoSlomo) == 0x000038, "Wrong size on X6BlueprintCombatLibrary_C_BP_DoSlomo");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoSlomo, TargetActor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_DoSlomo::TargetActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoSlomo, ActorSlomoDuration) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_DoSlomo::ActorSlomoDuration' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoSlomo, ActorSlomoRate) == 0x000010, "Member 'X6BlueprintCombatLibrary_C_BP_DoSlomo::ActorSlomoRate' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoSlomo, IsApplyGlobal) == 0x000018, "Member 'X6BlueprintCombatLibrary_C_BP_DoSlomo::IsApplyGlobal' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoSlomo, GloabalSlomoDuration) == 0x000020, "Member 'X6BlueprintCombatLibrary_C_BP_DoSlomo::GloabalSlomoDuration' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoSlomo, GloabalSlomoRate) == 0x000028, "Member 'X6BlueprintCombatLibrary_C_BP_DoSlomo::GloabalSlomoRate' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_DoSlomo, __WorldContext) == 0x000030, "Member 'X6BlueprintCombatLibrary_C_BP_DoSlomo::__WorldContext' has a wrong offset!");

// Function X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C.BP_CancelSlomo
// 0x0010 (0x0010 - 0x0000)
struct X6BlueprintCombatLibrary_C_BP_CancelSlomo final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(X6BlueprintCombatLibrary_C_BP_CancelSlomo) == 0x000008, "Wrong alignment on X6BlueprintCombatLibrary_C_BP_CancelSlomo");
static_assert(sizeof(X6BlueprintCombatLibrary_C_BP_CancelSlomo) == 0x000010, "Wrong size on X6BlueprintCombatLibrary_C_BP_CancelSlomo");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CancelSlomo, TargetActor) == 0x000000, "Member 'X6BlueprintCombatLibrary_C_BP_CancelSlomo::TargetActor' has a wrong offset!");
static_assert(offsetof(X6BlueprintCombatLibrary_C_BP_CancelSlomo, __WorldContext) == 0x000008, "Member 'X6BlueprintCombatLibrary_C_BP_CancelSlomo::__WorldContext' has a wrong offset!");

}

