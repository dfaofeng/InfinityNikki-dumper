#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6StateMachine

#include "Basic.hpp"

#include "X6StateMachine_structs.hpp"


namespace SDK::Params
{

// Function X6StateMachine.X6StateMachineComponent.CanSetServerState
// 0x0001 (0x0001 - 0x0000)
struct X6StateMachineComponent_CanSetServerState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6StateMachineComponent_CanSetServerState) == 0x000001, "Wrong alignment on X6StateMachineComponent_CanSetServerState");
static_assert(sizeof(X6StateMachineComponent_CanSetServerState) == 0x000001, "Wrong size on X6StateMachineComponent_CanSetServerState");
static_assert(offsetof(X6StateMachineComponent_CanSetServerState, ReturnValue) == 0x000000, "Member 'X6StateMachineComponent_CanSetServerState::ReturnValue' has a wrong offset!");

// Function X6StateMachine.X6StateMachineComponent.ForceSetLocalStateByStateID
// 0x0003 (0x0003 - 0x0000)
struct X6StateMachineComponent_ForceSetLocalStateByStateID final
{
public:
	uint8                                         StateID;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSM_Transition                               Transition;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6StateMachineComponent_ForceSetLocalStateByStateID) == 0x000001, "Wrong alignment on X6StateMachineComponent_ForceSetLocalStateByStateID");
static_assert(sizeof(X6StateMachineComponent_ForceSetLocalStateByStateID) == 0x000003, "Wrong size on X6StateMachineComponent_ForceSetLocalStateByStateID");
static_assert(offsetof(X6StateMachineComponent_ForceSetLocalStateByStateID, StateID) == 0x000000, "Member 'X6StateMachineComponent_ForceSetLocalStateByStateID::StateID' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_ForceSetLocalStateByStateID, Transition) == 0x000001, "Member 'X6StateMachineComponent_ForceSetLocalStateByStateID::Transition' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_ForceSetLocalStateByStateID, ReturnValue) == 0x000002, "Member 'X6StateMachineComponent_ForceSetLocalStateByStateID::ReturnValue' has a wrong offset!");

// Function X6StateMachine.X6StateMachineComponent.GetCurrentStateID
// 0x0001 (0x0001 - 0x0000)
struct X6StateMachineComponent_GetCurrentStateID final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6StateMachineComponent_GetCurrentStateID) == 0x000001, "Wrong alignment on X6StateMachineComponent_GetCurrentStateID");
static_assert(sizeof(X6StateMachineComponent_GetCurrentStateID) == 0x000001, "Wrong size on X6StateMachineComponent_GetCurrentStateID");
static_assert(offsetof(X6StateMachineComponent_GetCurrentStateID, ReturnValue) == 0x000000, "Member 'X6StateMachineComponent_GetCurrentStateID::ReturnValue' has a wrong offset!");

// Function X6StateMachine.X6StateMachineComponent.GetCurrentStateName
// 0x0010 (0x0010 - 0x0000)
struct X6StateMachineComponent_GetCurrentStateName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6StateMachineComponent_GetCurrentStateName) == 0x000008, "Wrong alignment on X6StateMachineComponent_GetCurrentStateName");
static_assert(sizeof(X6StateMachineComponent_GetCurrentStateName) == 0x000010, "Wrong size on X6StateMachineComponent_GetCurrentStateName");
static_assert(offsetof(X6StateMachineComponent_GetCurrentStateName, ReturnValue) == 0x000000, "Member 'X6StateMachineComponent_GetCurrentStateName::ReturnValue' has a wrong offset!");

// Function X6StateMachine.X6StateMachineComponent.GetNetIDByLua
// 0x0008 (0x0008 - 0x0000)
struct X6StateMachineComponent_GetNetIDByLua final
{
public:
	int64                                         NetID;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6StateMachineComponent_GetNetIDByLua) == 0x000008, "Wrong alignment on X6StateMachineComponent_GetNetIDByLua");
static_assert(sizeof(X6StateMachineComponent_GetNetIDByLua) == 0x000008, "Wrong size on X6StateMachineComponent_GetNetIDByLua");
static_assert(offsetof(X6StateMachineComponent_GetNetIDByLua, NetID) == 0x000000, "Member 'X6StateMachineComponent_GetNetIDByLua::NetID' has a wrong offset!");

// Function X6StateMachine.X6StateMachineComponent.IsCurrentState
// 0x0002 (0x0002 - 0x0000)
struct X6StateMachineComponent_IsCurrentState final
{
public:
	uint8                                         CheckStateID;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6StateMachineComponent_IsCurrentState) == 0x000001, "Wrong alignment on X6StateMachineComponent_IsCurrentState");
static_assert(sizeof(X6StateMachineComponent_IsCurrentState) == 0x000002, "Wrong size on X6StateMachineComponent_IsCurrentState");
static_assert(offsetof(X6StateMachineComponent_IsCurrentState, CheckStateID) == 0x000000, "Member 'X6StateMachineComponent_IsCurrentState::CheckStateID' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_IsCurrentState, ReturnValue) == 0x000001, "Member 'X6StateMachineComponent_IsCurrentState::ReturnValue' has a wrong offset!");

// Function X6StateMachine.X6StateMachineComponent.SetLocalState
// 0x0018 (0x0018 - 0x0000)
struct X6StateMachineComponent_SetLocalState final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSM_Transition                               Transition;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6StateMachineComponent_SetLocalState) == 0x000008, "Wrong alignment on X6StateMachineComponent_SetLocalState");
static_assert(sizeof(X6StateMachineComponent_SetLocalState) == 0x000018, "Wrong size on X6StateMachineComponent_SetLocalState");
static_assert(offsetof(X6StateMachineComponent_SetLocalState, Name_0) == 0x000000, "Member 'X6StateMachineComponent_SetLocalState::Name_0' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_SetLocalState, Transition) == 0x000010, "Member 'X6StateMachineComponent_SetLocalState::Transition' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_SetLocalState, ReturnValue) == 0x000011, "Member 'X6StateMachineComponent_SetLocalState::ReturnValue' has a wrong offset!");

// Function X6StateMachine.X6StateMachineComponent.SetLocalStateByStateID
// 0x0003 (0x0003 - 0x0000)
struct X6StateMachineComponent_SetLocalStateByStateID final
{
public:
	uint8                                         StateID;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSM_Transition                               Transition;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6StateMachineComponent_SetLocalStateByStateID) == 0x000001, "Wrong alignment on X6StateMachineComponent_SetLocalStateByStateID");
static_assert(sizeof(X6StateMachineComponent_SetLocalStateByStateID) == 0x000003, "Wrong size on X6StateMachineComponent_SetLocalStateByStateID");
static_assert(offsetof(X6StateMachineComponent_SetLocalStateByStateID, StateID) == 0x000000, "Member 'X6StateMachineComponent_SetLocalStateByStateID::StateID' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_SetLocalStateByStateID, Transition) == 0x000001, "Member 'X6StateMachineComponent_SetLocalStateByStateID::Transition' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_SetLocalStateByStateID, ReturnValue) == 0x000002, "Member 'X6StateMachineComponent_SetLocalStateByStateID::ReturnValue' has a wrong offset!");

// Function X6StateMachine.X6StateMachineComponent.SetServerState
// 0x0038 (0x0038 - 0x0000)
struct X6StateMachineComponent_SetServerState final
{
public:
	class FString                                 OwnerPath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelfName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IncurrentStateID;                                  // 0x0030(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6StateMachineComponent_SetServerState) == 0x000008, "Wrong alignment on X6StateMachineComponent_SetServerState");
static_assert(sizeof(X6StateMachineComponent_SetServerState) == 0x000038, "Wrong size on X6StateMachineComponent_SetServerState");
static_assert(offsetof(X6StateMachineComponent_SetServerState, OwnerPath) == 0x000000, "Member 'X6StateMachineComponent_SetServerState::OwnerPath' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_SetServerState, SelfName) == 0x000010, "Member 'X6StateMachineComponent_SetServerState::SelfName' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_SetServerState, Name_0) == 0x000020, "Member 'X6StateMachineComponent_SetServerState::Name_0' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_SetServerState, IncurrentStateID) == 0x000030, "Member 'X6StateMachineComponent_SetServerState::IncurrentStateID' has a wrong offset!");

// Function X6StateMachine.X6StateMachineComponent.SetState
// 0x0018 (0x0018 - 0x0000)
struct X6StateMachineComponent_SetState final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSM_Transition                               Transition;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(X6StateMachineComponent_SetState) == 0x000008, "Wrong alignment on X6StateMachineComponent_SetState");
static_assert(sizeof(X6StateMachineComponent_SetState) == 0x000018, "Wrong size on X6StateMachineComponent_SetState");
static_assert(offsetof(X6StateMachineComponent_SetState, Name_0) == 0x000000, "Member 'X6StateMachineComponent_SetState::Name_0' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_SetState, Transition) == 0x000010, "Member 'X6StateMachineComponent_SetState::Transition' has a wrong offset!");

// Function X6StateMachine.X6StateMachineComponent.SetStateByStateID
// 0x0002 (0x0002 - 0x0000)
struct X6StateMachineComponent_SetStateByStateID final
{
public:
	uint8                                         StateID;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSM_Transition                               Transition;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6StateMachineComponent_SetStateByStateID) == 0x000001, "Wrong alignment on X6StateMachineComponent_SetStateByStateID");
static_assert(sizeof(X6StateMachineComponent_SetStateByStateID) == 0x000002, "Wrong size on X6StateMachineComponent_SetStateByStateID");
static_assert(offsetof(X6StateMachineComponent_SetStateByStateID, StateID) == 0x000000, "Member 'X6StateMachineComponent_SetStateByStateID::StateID' has a wrong offset!");
static_assert(offsetof(X6StateMachineComponent_SetStateByStateID, Transition) == 0x000001, "Member 'X6StateMachineComponent_SetStateByStateID::Transition' has a wrong offset!");

// Function X6StateMachine.X6StateMachineComponent.SetStateTimeStamp
// 0x0001 (0x0001 - 0x0000)
struct X6StateMachineComponent_SetStateTimeStamp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(X6StateMachineComponent_SetStateTimeStamp) == 0x000001, "Wrong alignment on X6StateMachineComponent_SetStateTimeStamp");
static_assert(sizeof(X6StateMachineComponent_SetStateTimeStamp) == 0x000001, "Wrong size on X6StateMachineComponent_SetStateTimeStamp");
static_assert(offsetof(X6StateMachineComponent_SetStateTimeStamp, ReturnValue) == 0x000000, "Member 'X6StateMachineComponent_SetStateTimeStamp::ReturnValue' has a wrong offset!");

}

