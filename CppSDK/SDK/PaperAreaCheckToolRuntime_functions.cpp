#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperAreaCheckToolRuntime

#include "Basic.hpp"

#include "PaperAreaCheckToolRuntime_classes.hpp"
#include "PaperAreaCheckToolRuntime_parameters.hpp"


namespace SDK
{

// Function PaperAreaCheckToolRuntime.AreaMaskDebugActor.CloseLayerMask
// (Final, Native, Public, BlueprintCallable)

void AAreaMaskDebugActor::CloseLayerMask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AreaMaskDebugActor", "CloseLayerMask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperAreaCheckToolRuntime.AreaMaskDebugActor.GetAllLayerName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>*                  InLayerNames                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AAreaMaskDebugActor::GetAllLayerName(TArray<class FString>* InLayerNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AreaMaskDebugActor", "GetAllLayerName");

	Params::AreaMaskDebugActor_GetAllLayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InLayerNames != nullptr)
		*InLayerNames = std::move(Parms.InLayerNames);
}


// Function PaperAreaCheckToolRuntime.AreaMaskDebugActor.LoadAllMaskImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ImagePath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAreaMaskDebugActor::LoadAllMaskImage(const class FString& ImagePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AreaMaskDebugActor", "LoadAllMaskImage");

	Params::AreaMaskDebugActor_LoadAllMaskImage Parms{};

	Parms.ImagePath = std::move(ImagePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperAreaCheckToolRuntime.AreaMaskDebugActor.ShowMask
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InLayerName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAreaMaskDebugActor::ShowMask(const class FString& InLayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AreaMaskDebugActor", "ShowMask");

	Params::AreaMaskDebugActor_ShowMask Parms{};

	Parms.InLayerName = std::move(InLayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperAreaCheckToolRuntime.NetWorkAreaDebugActor.CloseShowMask
// (Final, Native, Public, BlueprintCallable)

void ANetWorkAreaDebugActor::CloseShowMask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NetWorkAreaDebugActor", "CloseShowMask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperAreaCheckToolRuntime.NetWorkAreaDebugActor.LoadMaskAreaConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ImagePath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    XMLPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANetWorkAreaDebugActor::LoadMaskAreaConfig(const class FString& ImagePath, const class FString& XMLPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NetWorkAreaDebugActor", "LoadMaskAreaConfig");

	Params::NetWorkAreaDebugActor_LoadMaskAreaConfig Parms{};

	Parms.ImagePath = std::move(ImagePath);
	Parms.XMLPath = std::move(XMLPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperAreaCheckToolRuntime.NetWorkAreaDebugActor.ShowMask
// (Final, Native, Public, BlueprintCallable)

void ANetWorkAreaDebugActor::ShowMask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NetWorkAreaDebugActor", "ShowMask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.AreaPolygonTreeInit
// (Final, Native, Public, BlueprintCallable)

void UPaperAreaCheckSubsystem::AreaPolygonTreeInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAreaCheckSubsystem", "AreaPolygonTreeInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.CheckNikkiInAreaEdge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPaperAreaCheckSubsystem::CheckNikkiInAreaEdge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAreaCheckSubsystem", "CheckNikkiInAreaEdge");

	Params::PaperAreaCheckSubsystem_CheckNikkiInAreaEdge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.ClearCurAreaCheckCache
// (Final, Native, Public, BlueprintCallable)

void UPaperAreaCheckSubsystem::ClearCurAreaCheckCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAreaCheckSubsystem", "ClearCurAreaCheckCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.EnterSubLevel
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const int32                             LevelID                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   PlayerPos                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperAreaCheckSubsystem::EnterSubLevel(const int32 LevelID, const struct FVector& PlayerPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAreaCheckSubsystem", "EnterSubLevel");

	Params::PaperAreaCheckSubsystem_EnterSubLevel Parms{};

	Parms.LevelID = LevelID;
	Parms.PlayerPos = std::move(PlayerPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.ExitSubLevel
// (Final, Native, Public, BlueprintCallable)

void UPaperAreaCheckSubsystem::ExitSubLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAreaCheckSubsystem", "ExitSubLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.GetAreaIDByWorldPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InWorldPosition                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPaperAreaCheckSubsystem::GetAreaIDByWorldPosition(const struct FVector& InWorldPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAreaCheckSubsystem", "GetAreaIDByWorldPosition");

	Params::PaperAreaCheckSubsystem_GetAreaIDByWorldPosition Parms{};

	Parms.InWorldPosition = std::move(InWorldPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.GetCurrentAreaID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPaperAreaCheckSubsystem::GetCurrentAreaID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAreaCheckSubsystem", "GetCurrentAreaID");

	Params::PaperAreaCheckSubsystem_GetCurrentAreaID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.GetCurrentSoundAreaID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPaperAreaCheckSubsystem::GetCurrentSoundAreaID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAreaCheckSubsystem", "GetCurrentSoundAreaID");

	Params::PaperAreaCheckSubsystem_GetCurrentSoundAreaID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.GetShrubTypeByWorldPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InPosition                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UPaperAreaCheckSubsystem::GetShrubTypeByWorldPosition(const struct FVector& InPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAreaCheckSubsystem", "GetShrubTypeByWorldPosition");

	Params::PaperAreaCheckSubsystem_GetShrubTypeByWorldPosition Parms{};

	Parms.InPosition = std::move(InPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.RefreshAreaCheckState
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   PlayerPos                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPaperAreaCheckSubsystem::RefreshAreaCheckState(const struct FVector& PlayerPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PaperAreaCheckSubsystem", "RefreshAreaCheckState");

	Params::PaperAreaCheckSubsystem_RefreshAreaCheckState Parms{};

	Parms.PlayerPos = std::move(PlayerPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

