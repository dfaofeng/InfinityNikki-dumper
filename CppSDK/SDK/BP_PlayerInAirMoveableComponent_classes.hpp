#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerInAirMoveableComponent

#include "Basic.hpp"

#include "EInputDeviceKeyType_structs.hpp"
#include "Engine_structs.hpp"
#include "X6Game_structs.hpp"
#include "X6Game_classes.hpp"
#include "EPlayerGameplayInAirMovementMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerInAirMoveableComponent.BP_PlayerInAirMoveableComponent_C
// 0x00A8 (0x0210 - 0x0168)
class UBP_PlayerInAirMoveableComponent_C final : public UX6BasicMoveableComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0168(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class UBP_JumpStage_ConfigTemplate_C> BP_PlayerDefaultJumpStageConfig;            // 0x0170(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TMap<EX6InputDeviceKeyType, TSoftObjectPtr<class UBP_JumpStage_ConfigTemplate_C>> BP_PlayerJumpStageConfigByDevice; // 0x0198(0x0050)(Edit, BlueprintVisible)
	TSoftObjectPtr<class UBP_RegularFlyingMovement_CT_C> BP_PlayerRegularFlyingMovementConfig;       // 0x01E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)

public:
	void BP_OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void BP_OnX6CharacterPossessed(class AController* NewController);
	void BP_OnX6CharacterUnPossessed(class AController* PreviousController);
	void BP_Public_ClearZAxisBrakingDecelerationOverride();
	void BP_Public_ExitGamePlayInAirMovementMode(EPlayerGameplayInAirMovementMode MovementModeToExit);
	void BP_Public_SetZAxisBrakingDeceleartionOverride(double NewZAxisBrakingDeceleration);
	void BP_Public_SwitchCharacterGamePlayInAirMovementMode(EPlayerGameplayInAirMovementMode NewMovementMode);
	void BPI_Get_CurrentInAirStates(ERegularFloatingJumpStage* FallStage, bool* IsInSpecialJumpAnim, ERegularJumpMode* RegularJumpMode, bool* IsJumpingInAir);
	void BPI_Get_CurrentInAirValues(double* InCurrentHeight, class UPrimaryDataAsset** SpecialJumpDA);
	void BPI_Get_EssentialValues(struct FVector* InVelocity, struct FVector* InCurrentAcceleration, double* InMaxAcceleration, double* InTurnAroundAngle);
	void BPI_Get_MaxSpeedValues(double* CurMinAnalogWalkSpeed, double* CurConfigMaxSpeed, double* CurActualMaxSpeed);
	void BPI_Get_RegularFlyingConfigData(double* LowFlyingSpeed, double* NormalFlyingSpeed, double* TopFlyingSpeed);
	void BPI_OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void BPI_OnMovementModeDisabled();
	void BPI_OnMovementModeEnabled();
	void BPI_OnRotateCameraInput(const struct FVector& InputVector, EInputDeviceKeyType DeviceType);
	void BPI_OnSelfControlledByPlayer(class APawn* PlayerPawn);
	void BPI_OnSelfLoseControlledByPlayer();
	void BPI_SetPlayerToControlActor(class AActor* ActorToControl, bool* Controlled);
	void ExecuteUbergraph_BP_PlayerInAirMoveableComponent(int32 EntryPoint);
	void InputAction_Crash(bool PressedOrRelease);
	void InputAction_Jump(bool PressedOrRelease);
	void InputAction_Sprint(bool PressedOrRelease);
	void InputAction_Walk(bool PressOrRelease);
	void OnMovementMoveXAxisAction(double AxisValue);
	void OnMovementMoveYAxisAction(double AxisValue);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UpdateFallState(ERegularFloatingJumpStage FallStage, bool IsSlide);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerInAirMoveableComponent_C">();
	}
	static class UBP_PlayerInAirMoveableComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerInAirMoveableComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerInAirMoveableComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerInAirMoveableComponent_C");
static_assert(sizeof(UBP_PlayerInAirMoveableComponent_C) == 0x000210, "Wrong size on UBP_PlayerInAirMoveableComponent_C");
static_assert(offsetof(UBP_PlayerInAirMoveableComponent_C, UberGraphFrame) == 0x000168, "Member 'UBP_PlayerInAirMoveableComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerInAirMoveableComponent_C, BP_PlayerDefaultJumpStageConfig) == 0x000170, "Member 'UBP_PlayerInAirMoveableComponent_C::BP_PlayerDefaultJumpStageConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerInAirMoveableComponent_C, BP_PlayerJumpStageConfigByDevice) == 0x000198, "Member 'UBP_PlayerInAirMoveableComponent_C::BP_PlayerJumpStageConfigByDevice' has a wrong offset!");
static_assert(offsetof(UBP_PlayerInAirMoveableComponent_C, BP_PlayerRegularFlyingMovementConfig) == 0x0001E8, "Member 'UBP_PlayerInAirMoveableComponent_C::BP_PlayerRegularFlyingMovementConfig' has a wrong offset!");

}

