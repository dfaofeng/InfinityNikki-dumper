#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterBaseInfoComponent

#include "Basic.hpp"

#include "EInt32PlayerPawnStateTypes_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterBaseInfoComponent.BP_CharacterBaseInfoComponent_C.UpdateActorListenPlayerState
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterBaseInfoComponent_C_UpdateActorListenPlayerState final
{
public:
	bool                                          AddOrRemove;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorListenPlayerState;                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterBaseInfoComponent_C_UpdateActorListenPlayerState) == 0x000008, "Wrong alignment on BP_CharacterBaseInfoComponent_C_UpdateActorListenPlayerState");
static_assert(sizeof(BP_CharacterBaseInfoComponent_C_UpdateActorListenPlayerState) == 0x000010, "Wrong size on BP_CharacterBaseInfoComponent_C_UpdateActorListenPlayerState");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_UpdateActorListenPlayerState, AddOrRemove) == 0x000000, "Member 'BP_CharacterBaseInfoComponent_C_UpdateActorListenPlayerState::AddOrRemove' has a wrong offset!");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_UpdateActorListenPlayerState, ActorListenPlayerState) == 0x000008, "Member 'BP_CharacterBaseInfoComponent_C_UpdateActorListenPlayerState::ActorListenPlayerState' has a wrong offset!");

// Function BP_CharacterBaseInfoComponent.BP_CharacterBaseInfoComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterBaseInfoComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterBaseInfoComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_CharacterBaseInfoComponent_C_ReceiveTick");
static_assert(sizeof(BP_CharacterBaseInfoComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_CharacterBaseInfoComponent_C_ReceiveTick");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_CharacterBaseInfoComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_CharacterBaseInfoComponent.BP_CharacterBaseInfoComponent_C.PlayerRemoveState
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterBaseInfoComponent_C_PlayerRemoveState final
{
public:
	int32                                         StateToRemove;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterBaseInfoComponent_C_PlayerRemoveState) == 0x000004, "Wrong alignment on BP_CharacterBaseInfoComponent_C_PlayerRemoveState");
static_assert(sizeof(BP_CharacterBaseInfoComponent_C_PlayerRemoveState) == 0x000004, "Wrong size on BP_CharacterBaseInfoComponent_C_PlayerRemoveState");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_PlayerRemoveState, StateToRemove) == 0x000000, "Member 'BP_CharacterBaseInfoComponent_C_PlayerRemoveState::StateToRemove' has a wrong offset!");

// Function BP_CharacterBaseInfoComponent.BP_CharacterBaseInfoComponent_C.PlayerHasState
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterBaseInfoComponent_C_PlayerHasState final
{
public:
	int32                                         CheckState;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterBaseInfoComponent_C_PlayerHasState) == 0x000004, "Wrong alignment on BP_CharacterBaseInfoComponent_C_PlayerHasState");
static_assert(sizeof(BP_CharacterBaseInfoComponent_C_PlayerHasState) == 0x000008, "Wrong size on BP_CharacterBaseInfoComponent_C_PlayerHasState");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_PlayerHasState, CheckState) == 0x000000, "Member 'BP_CharacterBaseInfoComponent_C_PlayerHasState::CheckState' has a wrong offset!");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_PlayerHasState, Has) == 0x000004, "Member 'BP_CharacterBaseInfoComponent_C_PlayerHasState::Has' has a wrong offset!");

// Function BP_CharacterBaseInfoComponent.BP_CharacterBaseInfoComponent_C.PlayerAddState
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterBaseInfoComponent_C_PlayerAddState final
{
public:
	int32                                         InNewState;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterBaseInfoComponent_C_PlayerAddState) == 0x000004, "Wrong alignment on BP_CharacterBaseInfoComponent_C_PlayerAddState");
static_assert(sizeof(BP_CharacterBaseInfoComponent_C_PlayerAddState) == 0x000004, "Wrong size on BP_CharacterBaseInfoComponent_C_PlayerAddState");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_PlayerAddState, InNewState) == 0x000000, "Member 'BP_CharacterBaseInfoComponent_C_PlayerAddState::InNewState' has a wrong offset!");

// Function BP_CharacterBaseInfoComponent.BP_CharacterBaseInfoComponent_C.ExecuteUbergraph_BP_CharacterBaseInfoComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterBaseInfoComponent_C_ExecuteUbergraph_BP_CharacterBaseInfoComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterBaseInfoComponent_C_ExecuteUbergraph_BP_CharacterBaseInfoComponent) == 0x000004, "Wrong alignment on BP_CharacterBaseInfoComponent_C_ExecuteUbergraph_BP_CharacterBaseInfoComponent");
static_assert(sizeof(BP_CharacterBaseInfoComponent_C_ExecuteUbergraph_BP_CharacterBaseInfoComponent) == 0x000008, "Wrong size on BP_CharacterBaseInfoComponent_C_ExecuteUbergraph_BP_CharacterBaseInfoComponent");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_ExecuteUbergraph_BP_CharacterBaseInfoComponent, EntryPoint) == 0x000000, "Member 'BP_CharacterBaseInfoComponent_C_ExecuteUbergraph_BP_CharacterBaseInfoComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_ExecuteUbergraph_BP_CharacterBaseInfoComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_CharacterBaseInfoComponent_C_ExecuteUbergraph_BP_CharacterBaseInfoComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_CharacterBaseInfoComponent.BP_CharacterBaseInfoComponent_C.CanPlayerDoAction
// 0x0008 (0x0008 - 0x0000)
struct BP_CharacterBaseInfoComponent_C_CanPlayerDoAction final
{
public:
	int32                                         NewAction;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can;                                               // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterBaseInfoComponent_C_CanPlayerDoAction) == 0x000004, "Wrong alignment on BP_CharacterBaseInfoComponent_C_CanPlayerDoAction");
static_assert(sizeof(BP_CharacterBaseInfoComponent_C_CanPlayerDoAction) == 0x000008, "Wrong size on BP_CharacterBaseInfoComponent_C_CanPlayerDoAction");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_CanPlayerDoAction, NewAction) == 0x000000, "Member 'BP_CharacterBaseInfoComponent_C_CanPlayerDoAction::NewAction' has a wrong offset!");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_CanPlayerDoAction, Can) == 0x000004, "Member 'BP_CharacterBaseInfoComponent_C_CanPlayerDoAction::Can' has a wrong offset!");

// Function BP_CharacterBaseInfoComponent.BP_CharacterBaseInfoComponent_C.BP_ListenPlayerStateUpdate
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterBaseInfoComponent_C_BP_ListenPlayerStateUpdate final
{
public:
	TArray<EInt32PlayerPawnStateTypes>            States;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class AActor*                                 ActorListenPlayerState;                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterBaseInfoComponent_C_BP_ListenPlayerStateUpdate) == 0x000008, "Wrong alignment on BP_CharacterBaseInfoComponent_C_BP_ListenPlayerStateUpdate");
static_assert(sizeof(BP_CharacterBaseInfoComponent_C_BP_ListenPlayerStateUpdate) == 0x000018, "Wrong size on BP_CharacterBaseInfoComponent_C_BP_ListenPlayerStateUpdate");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_BP_ListenPlayerStateUpdate, States) == 0x000000, "Member 'BP_CharacterBaseInfoComponent_C_BP_ListenPlayerStateUpdate::States' has a wrong offset!");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_BP_ListenPlayerStateUpdate, ActorListenPlayerState) == 0x000010, "Member 'BP_CharacterBaseInfoComponent_C_BP_ListenPlayerStateUpdate::ActorListenPlayerState' has a wrong offset!");

// Function BP_CharacterBaseInfoComponent.BP_CharacterBaseInfoComponent_C.BP_GetTransToRightFoot
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterBaseInfoComponent_C_BP_GetTransToRightFoot final
{
public:
	bool                                          bTransToRightFoot;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterBaseInfoComponent_C_BP_GetTransToRightFoot) == 0x000001, "Wrong alignment on BP_CharacterBaseInfoComponent_C_BP_GetTransToRightFoot");
static_assert(sizeof(BP_CharacterBaseInfoComponent_C_BP_GetTransToRightFoot) == 0x000001, "Wrong size on BP_CharacterBaseInfoComponent_C_BP_GetTransToRightFoot");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_BP_GetTransToRightFoot, bTransToRightFoot) == 0x000000, "Member 'BP_CharacterBaseInfoComponent_C_BP_GetTransToRightFoot::bTransToRightFoot' has a wrong offset!");

// Function BP_CharacterBaseInfoComponent.BP_CharacterBaseInfoComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterBaseInfoComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterBaseInfoComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_CharacterBaseInfoComponent_C_GetModuleName");
static_assert(sizeof(BP_CharacterBaseInfoComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_CharacterBaseInfoComponent_C_GetModuleName");
static_assert(offsetof(BP_CharacterBaseInfoComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_CharacterBaseInfoComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

