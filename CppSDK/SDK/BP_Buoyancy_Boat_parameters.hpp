#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Buoyancy_Boat

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Buoyancy_Boat.BP_Buoyancy_Boat_C.BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Buoyancy_Boat.BP_Buoyancy_Boat_C.BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_Buoyancy_Boat_Box1_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_Buoyancy_Boat.BP_Buoyancy_Boat_C.BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Buoyancy_Boat.BP_Buoyancy_Boat_C.BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Buoyancy_Boat_C_BndEvt__BP_S_Prop_Boat_03_Box_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_Buoyancy_Boat.BP_Buoyancy_Boat_C.ExecuteUbergraph_BP_Buoyancy_Boat
// 0x0470 (0x0470 - 0x0000)
struct BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_3;  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_3;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_3;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_3;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0028(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x0130(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AX6NikkiPawn*                           K2Node_DynamicCast_AsX6Nikki_Pawn;                 // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AX6NikkiPawn*                           K2Node_DynamicCast_AsX6Nikki_Pawn_1;               // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesPlayerHasState_Has;                   // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AX6WheeledVehicle*                      K2Node_DynamicCast_AsX6Wheeled_Vehicle;            // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesPlayerHasState_Has_1;                 // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AX6WheeledVehicle*                      K2Node_DynamicCast_AsX6Wheeled_Vehicle_1;          // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0180(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0190(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x01A0(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0298(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x02A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AX6NikkiPawn*                           K2Node_DynamicCast_AsX6Nikki_Pawn_2;               // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AX6NikkiPawn*                           K2Node_DynamicCast_AsX6Nikki_Pawn_3;               // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesPlayerHasState_Has_2;                 // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesPlayerHasState_Has_3;                 // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPointInsideBoxComponent_ReturnValue;    // 0x02F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F3[0xD];                                      // 0x02F3(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0300(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0368(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        K2Node_VariableSet_PushForceFactor_ImplicitCast;   // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_PushForceFactor_ImplicitCast_1; // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_StandingDownwardForceScale_ImplicitCast; // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat) == 0x000010, "Wrong alignment on BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat");
static_assert(sizeof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat) == 0x000470, "Wrong size on BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, EntryPoint) == 0x000000, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OverlappedComponent_3) == 0x000008, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OverlappedComponent_3' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherActor_3) == 0x000010, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherActor_3' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherComp_3) == 0x000018, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherComp_3' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherBodyIndex_3) == 0x000020, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherBodyIndex_3' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000024, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000028, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x000120, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherActor_2) == 0x000128, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherComp_2) == 0x000130, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x000138, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_AsX6Nikki_Pawn) == 0x000140, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_AsX6Nikki_Pawn' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_bSuccess) == 0x000148, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_AsX6Nikki_Pawn_1) == 0x000150, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_AsX6Nikki_Pawn_1' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_bSuccess_1) == 0x000158, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, CallFunc_DoesPlayerHasState_Has) == 0x000159, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::CallFunc_DoesPlayerHasState_Has' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_AsX6Wheeled_Vehicle) == 0x000160, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_AsX6Wheeled_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_bSuccess_2) == 0x000168, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, CallFunc_DoesPlayerHasState_Has_1) == 0x000169, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::CallFunc_DoesPlayerHasState_Has_1' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_AsX6Wheeled_Vehicle_1) == 0x000170, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_AsX6Wheeled_Vehicle_1' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_bSuccess_3) == 0x000178, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000180, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000188, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000190, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000198, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_bFromSweep) == 0x00019C, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_SweepResult) == 0x0001A0, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000298, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherActor) == 0x0002A0, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherComp) == 0x0002A8, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0002B0, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_AsX6Nikki_Pawn_2) == 0x0002B8, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_AsX6Nikki_Pawn_2' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_bSuccess_4) == 0x0002C0, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_AsX6Nikki_Pawn_3) == 0x0002C8, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_AsX6Nikki_Pawn_3' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_DynamicCast_bSuccess_5) == 0x0002D0, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0002D8, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, CallFunc_DoesPlayerHasState_Has_2) == 0x0002F0, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::CallFunc_DoesPlayerHasState_Has_2' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, CallFunc_DoesPlayerHasState_Has_3) == 0x0002F1, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::CallFunc_DoesPlayerHasState_Has_3' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, CallFunc_IsPointInsideBoxComponent_ReturnValue) == 0x0002F2, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::CallFunc_IsPointInsideBoxComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000300, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_Event_EndPlayReason) == 0x000360, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000368, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_VariableSet_PushForceFactor_ImplicitCast) == 0x000460, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_VariableSet_PushForceFactor_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_VariableSet_PushForceFactor_ImplicitCast_1) == 0x000468, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_VariableSet_PushForceFactor_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat, K2Node_VariableSet_StandingDownwardForceScale_ImplicitCast) == 0x00046C, "Member 'BP_Buoyancy_Boat_C_ExecuteUbergraph_BP_Buoyancy_Boat::K2Node_VariableSet_StandingDownwardForceScale_ImplicitCast' has a wrong offset!");

// Function BP_Buoyancy_Boat.BP_Buoyancy_Boat_C.NikkiEnter
// 0x0028 (0x0028 - 0x0000)
struct BP_Buoyancy_Boat_C_NikkiEnter final
{
public:
	class AActor*                                 Nikki;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNikkiMovementComponent*                NikkiMoveCom;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ANikkiPlayer_BP_C*                      K2Node_DynamicCast_AsNikki_Player_BP;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_PushForceFactor_ImplicitCast;   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Buoyancy_Boat_C_NikkiEnter) == 0x000008, "Wrong alignment on BP_Buoyancy_Boat_C_NikkiEnter");
static_assert(sizeof(BP_Buoyancy_Boat_C_NikkiEnter) == 0x000028, "Wrong size on BP_Buoyancy_Boat_C_NikkiEnter");
static_assert(offsetof(BP_Buoyancy_Boat_C_NikkiEnter, Nikki) == 0x000000, "Member 'BP_Buoyancy_Boat_C_NikkiEnter::Nikki' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_NikkiEnter, NikkiMoveCom) == 0x000008, "Member 'BP_Buoyancy_Boat_C_NikkiEnter::NikkiMoveCom' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_NikkiEnter, K2Node_DynamicCast_AsNikki_Player_BP) == 0x000010, "Member 'BP_Buoyancy_Boat_C_NikkiEnter::K2Node_DynamicCast_AsNikki_Player_BP' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_NikkiEnter, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Buoyancy_Boat_C_NikkiEnter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_NikkiEnter, K2Node_VariableSet_PushForceFactor_ImplicitCast) == 0x000020, "Member 'BP_Buoyancy_Boat_C_NikkiEnter::K2Node_VariableSet_PushForceFactor_ImplicitCast' has a wrong offset!");

// Function BP_Buoyancy_Boat.BP_Buoyancy_Boat_C.NikkiOut
// 0x0020 (0x0020 - 0x0000)
struct BP_Buoyancy_Boat_C_NikkiOut final
{
public:
	class AActor*                                 Nikki;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNikkiMovementComponent*                NikkiMoveCom;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ANikkiPlayer_BP_C*                      K2Node_DynamicCast_AsNikki_Player_BP;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_VariableSet_PushForceFactor_ImplicitCast;   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Buoyancy_Boat_C_NikkiOut) == 0x000008, "Wrong alignment on BP_Buoyancy_Boat_C_NikkiOut");
static_assert(sizeof(BP_Buoyancy_Boat_C_NikkiOut) == 0x000020, "Wrong size on BP_Buoyancy_Boat_C_NikkiOut");
static_assert(offsetof(BP_Buoyancy_Boat_C_NikkiOut, Nikki) == 0x000000, "Member 'BP_Buoyancy_Boat_C_NikkiOut::Nikki' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_NikkiOut, NikkiMoveCom) == 0x000008, "Member 'BP_Buoyancy_Boat_C_NikkiOut::NikkiMoveCom' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_NikkiOut, K2Node_DynamicCast_AsNikki_Player_BP) == 0x000010, "Member 'BP_Buoyancy_Boat_C_NikkiOut::K2Node_DynamicCast_AsNikki_Player_BP' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_NikkiOut, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Buoyancy_Boat_C_NikkiOut::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_NikkiOut, K2Node_VariableSet_PushForceFactor_ImplicitCast) == 0x00001C, "Member 'BP_Buoyancy_Boat_C_NikkiOut::K2Node_VariableSet_PushForceFactor_ImplicitCast' has a wrong offset!");

// Function BP_Buoyancy_Boat.BP_Buoyancy_Boat_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_Buoyancy_Boat_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Buoyancy_Boat_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_Buoyancy_Boat_C_ReceiveEndPlay");
static_assert(sizeof(BP_Buoyancy_Boat_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_Buoyancy_Boat_C_ReceiveEndPlay");
static_assert(offsetof(BP_Buoyancy_Boat_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_Buoyancy_Boat_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_Buoyancy_Boat.BP_Buoyancy_Boat_C.SetHigPlatformValue
// 0x0008 (0x0008 - 0x0000)
struct BP_Buoyancy_Boat_C_SetHigPlatformValue final
{
public:
	int32                                         CallFunc_GetConsoleVariableIntValue_ReturnValue;   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Buoyancy_Boat_C_SetHigPlatformValue) == 0x000004, "Wrong alignment on BP_Buoyancy_Boat_C_SetHigPlatformValue");
static_assert(sizeof(BP_Buoyancy_Boat_C_SetHigPlatformValue) == 0x000008, "Wrong size on BP_Buoyancy_Boat_C_SetHigPlatformValue");
static_assert(offsetof(BP_Buoyancy_Boat_C_SetHigPlatformValue, CallFunc_GetConsoleVariableIntValue_ReturnValue) == 0x000000, "Member 'BP_Buoyancy_Boat_C_SetHigPlatformValue::CallFunc_GetConsoleVariableIntValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_SetHigPlatformValue, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000004, "Member 'BP_Buoyancy_Boat_C_SetHigPlatformValue::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Buoyancy_Boat.BP_Buoyancy_Boat_C.SetPhy
// 0x0038 (0x0038 - 0x0000)
struct BP_Buoyancy_Boat_C_SetPhy final
{
public:
	bool                                          PhySwitch;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPointInsideBoxComponent_ReturnValue;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Buoyancy_Boat_C_SetPhy) == 0x000008, "Wrong alignment on BP_Buoyancy_Boat_C_SetPhy");
static_assert(sizeof(BP_Buoyancy_Boat_C_SetPhy) == 0x000038, "Wrong size on BP_Buoyancy_Boat_C_SetPhy");
static_assert(offsetof(BP_Buoyancy_Boat_C_SetPhy, PhySwitch) == 0x000000, "Member 'BP_Buoyancy_Boat_C_SetPhy::PhySwitch' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_SetPhy, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000008, "Member 'BP_Buoyancy_Boat_C_SetPhy::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_SetPhy, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Buoyancy_Boat_C_SetPhy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_SetPhy, CallFunc_GetCameraLocation_ReturnValue) == 0x000018, "Member 'BP_Buoyancy_Boat_C_SetPhy::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Buoyancy_Boat_C_SetPhy, CallFunc_IsPointInsideBoxComponent_ReturnValue) == 0x000030, "Member 'BP_Buoyancy_Boat_C_SetPhy::CallFunc_IsPointInsideBoxComponent_ReturnValue' has a wrong offset!");

// Function BP_Buoyancy_Boat.BP_Buoyancy_Boat_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_Buoyancy_Boat_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Buoyancy_Boat_C_GetModuleName) == 0x000008, "Wrong alignment on BP_Buoyancy_Boat_C_GetModuleName");
static_assert(sizeof(BP_Buoyancy_Boat_C_GetModuleName) == 0x000010, "Wrong size on BP_Buoyancy_Boat_C_GetModuleName");
static_assert(offsetof(BP_Buoyancy_Boat_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_Buoyancy_Boat_C_GetModuleName::ReturnValue' has a wrong offset!");

}

