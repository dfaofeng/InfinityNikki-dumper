#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Nikki_AimOffset

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimGraph");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimGraph) == 0x000010, "Wrong size on ABP_Nikki_AimOffset_C_AnimGraph");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_AimOffset
// 0x0020 (0x0020 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_AimOffset final
{
public:
	struct FPoseLink                              InPoseForAimOffset;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_AimOffset_0;                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_AimOffset) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_AimOffset");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_AimOffset) == 0x000020, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_AimOffset");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_AimOffset, InPoseForAimOffset) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_AimOffset::InPoseForAimOffset' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_AimOffset, AnimLayer_AimOffset_0) == 0x000010, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_AimOffset::AnimLayer_AimOffset_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_BehaviorAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_BehaviorAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForPlayerBehavior;                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorAdditiveMode_0;                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_BehaviorAdditiveMode) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_BehaviorAdditiveMode");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_BehaviorAdditiveMode) == 0x000020, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_BehaviorAdditiveMode");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_BehaviorAdditiveMode, InPoseForPlayerBehavior) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_BehaviorAdditiveMode::InPoseForPlayerBehavior' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_BehaviorAdditiveMode, AnimLayer_BehaviorAdditiveMode_0) == 0x000010, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_BehaviorAdditiveMode::AnimLayer_BehaviorAdditiveMode_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_CombatMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_CombatMovement final
{
public:
	struct FPoseLink                              AnimLayer_CombatMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_CombatMovement) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_CombatMovement");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_CombatMovement) == 0x000010, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_CombatMovement");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_CombatMovement, AnimLayer_CombatMovement_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_CombatMovement::AnimLayer_CombatMovement_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_EquipmentAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_EquipmentAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForEquipment;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_EquipmentAdditiveMode_0;                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_EquipmentAdditiveMode) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_EquipmentAdditiveMode");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_EquipmentAdditiveMode) == 0x000020, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_EquipmentAdditiveMode");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_EquipmentAdditiveMode, InPoseForEquipment) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_EquipmentAdditiveMode::InPoseForEquipment' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_EquipmentAdditiveMode, AnimLayer_EquipmentAdditiveMode_0) == 0x000010, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_EquipmentAdditiveMode::AnimLayer_EquipmentAdditiveMode_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_Jump
// 0x0010 (0x0010 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_Jump final
{
public:
	struct FPoseLink                              AnimLayer_Jump_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_Jump) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_Jump");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_Jump) == 0x000010, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_Jump");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_Jump, AnimLayer_Jump_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_Jump::AnimLayer_Jump_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_Land
// 0x0010 (0x0010 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_Land final
{
public:
	struct FPoseLink                              AnimLayer_Land_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_Land) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_Land");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_Land) == 0x000010, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_Land");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_Land, AnimLayer_Land_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_Land::AnimLayer_Land_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_MovementDependObject
// 0x0010 (0x0010 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_MovementDependObject final
{
public:
	struct FPoseLink                              AnimLayer_MovementDependObject_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_MovementDependObject) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_MovementDependObject");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_MovementDependObject) == 0x000010, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_MovementDependObject");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_MovementDependObject, AnimLayer_MovementDependObject_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_MovementDependObject::AnimLayer_MovementDependObject_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_NPCAdditiveBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_NPCAdditiveBehavior final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCAdditiveBehavior_0;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_NPCAdditiveBehavior) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_NPCAdditiveBehavior");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_NPCAdditiveBehavior) == 0x000020, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_NPCAdditiveBehavior");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_NPCAdditiveBehavior, InPose) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_NPCAdditiveBehavior::InPose' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_NPCAdditiveBehavior, AnimLayer_NPCAdditiveBehavior_0) == 0x000010, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_NPCAdditiveBehavior::AnimLayer_NPCAdditiveBehavior_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_NPCBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_NPCBehavior final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCBehavior_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_NPCBehavior) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_NPCBehavior");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_NPCBehavior) == 0x000020, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_NPCBehavior");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_NPCBehavior, InPose_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_NPCBehavior::InPose_0' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_NPCBehavior, AnimLayer_NPCBehavior_0) == 0x000010, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_NPCBehavior::AnimLayer_NPCBehavior_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_PlayerControllingTool
// 0x0010 (0x0010 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_PlayerControllingTool final
{
public:
	struct FPoseLink                              AnimLayer_PlayerControllingTool_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_PlayerControllingTool) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_PlayerControllingTool");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_PlayerControllingTool) == 0x000010, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_PlayerControllingTool");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_PlayerControllingTool, AnimLayer_PlayerControllingTool_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_PlayerControllingTool::AnimLayer_PlayerControllingTool_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_PlayerRegularMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_PlayerRegularMovement final
{
public:
	struct FPoseLink                              AnimLayer_PlayerRegularMovement_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_PlayerRegularMovement) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_PlayerRegularMovement");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_PlayerRegularMovement) == 0x000010, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_PlayerRegularMovement");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_PlayerRegularMovement, AnimLayer_PlayerRegularMovement_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_PlayerRegularMovement::AnimLayer_PlayerRegularMovement_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_SpecialSurfaceMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_SpecialSurfaceMovement final
{
public:
	struct FPoseLink                              AnimLayer_SpecialSurfaceMovement_0;                // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_SpecialSurfaceMovement) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_SpecialSurfaceMovement");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_SpecialSurfaceMovement) == 0x000010, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_SpecialSurfaceMovement");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_SpecialSurfaceMovement, AnimLayer_SpecialSurfaceMovement_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_SpecialSurfaceMovement::AnimLayer_SpecialSurfaceMovement_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_StrafeMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_StrafeMovement final
{
public:
	struct FPoseLink                              AnimLayer_StrafeMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_StrafeMovement) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_StrafeMovement");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_StrafeMovement) == 0x000010, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_StrafeMovement");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_StrafeMovement, AnimLayer_StrafeMovement_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_StrafeMovement::AnimLayer_StrafeMovement_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_UsingCarrierMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_UsingCarrierMovement final
{
public:
	struct FPoseLink                              AnimLayer_UsingCarrierMovement_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_UsingCarrierMovement) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_UsingCarrierMovement");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_UsingCarrierMovement) == 0x000010, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_UsingCarrierMovement");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_UsingCarrierMovement, AnimLayer_UsingCarrierMovement_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_UsingCarrierMovement::AnimLayer_UsingCarrierMovement_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.AnimLayer_WhiteBoxMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Nikki_AimOffset_C_AnimLayer_WhiteBoxMovement final
{
public:
	struct FPoseLink                              AnimLayer_WhiteBoxMovement_0;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_AnimLayer_WhiteBoxMovement) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_AnimLayer_WhiteBoxMovement");
static_assert(sizeof(ABP_Nikki_AimOffset_C_AnimLayer_WhiteBoxMovement) == 0x000010, "Wrong size on ABP_Nikki_AimOffset_C_AnimLayer_WhiteBoxMovement");
static_assert(offsetof(ABP_Nikki_AimOffset_C_AnimLayer_WhiteBoxMovement, AnimLayer_WhiteBoxMovement_0) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_AnimLayer_WhiteBoxMovement::AnimLayer_WhiteBoxMovement_0' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Nikki_AimOffset_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Nikki_AimOffset_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_Nikki_AimOffset_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_Nikki_AimOffset_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_Nikki_AimOffset_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.ExecuteUbergraph_ABP_Nikki_AimOffset
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue_1;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue_2;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue_3;      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerAnimStatesComponent_C*        CallFunc_GetComponentByClass_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool IsLookAtValid)>           K2Node_CreateDelegate_OutputDelegate_2;            // 0x0068(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsLookAtValid;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_SelectRotator_ReturnValue;                // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_SelectRotator_ReturnValue_1;              // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        K2Node_VariableSet_CustomSmoothingTime_ImplicitCast; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset");
static_assert(sizeof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset) == 0x0000C0, "Wrong size on ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, EntryPoint) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000020, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_K2_IsValidTimerHandle_ReturnValue_1) == 0x000021, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_K2_IsValidTimerHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000038, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_K2_IsValidTimerHandle_ReturnValue_2) == 0x000040, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_K2_IsValidTimerHandle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_K2_IsValidTimerHandle_ReturnValue_3) == 0x000041, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_K2_IsValidTimerHandle_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, K2Node_Event_DeltaTimeX) == 0x000044, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000050, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_IsValid_ReturnValue_2) == 0x000059, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_GetComponentByClass_ReturnValue) == 0x000060, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, K2Node_CreateDelegate_OutputDelegate_2) == 0x000068, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_SelectFloat_ReturnValue) == 0x000078, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, K2Node_CustomEvent_IsLookAtValid) == 0x000080, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::K2Node_CustomEvent_IsLookAtValid' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_SelectRotator_ReturnValue) == 0x000088, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_SelectRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, CallFunc_SelectRotator_ReturnValue_1) == 0x0000A0, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::CallFunc_SelectRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset, K2Node_VariableSet_CustomSmoothingTime_ImplicitCast) == 0x0000B8, "Member 'ABP_Nikki_AimOffset_C_ExecuteUbergraph_ABP_Nikki_AimOffset::K2Node_VariableSet_CustomSmoothingTime_ImplicitCast' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.OnIsLookAtChanged
// 0x0001 (0x0001 - 0x0000)
struct ABP_Nikki_AimOffset_C_OnIsLookAtChanged final
{
public:
	bool                                          IsLookAtValid;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_OnIsLookAtChanged) == 0x000001, "Wrong alignment on ABP_Nikki_AimOffset_C_OnIsLookAtChanged");
static_assert(sizeof(ABP_Nikki_AimOffset_C_OnIsLookAtChanged) == 0x000001, "Wrong size on ABP_Nikki_AimOffset_C_OnIsLookAtChanged");
static_assert(offsetof(ABP_Nikki_AimOffset_C_OnIsLookAtChanged, IsLookAtValid) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_OnIsLookAtChanged::IsLookAtValid' has a wrong offset!");

// Function ABP_Nikki_AimOffset.ABP_Nikki_AimOffset_C.UpdateAO_ControlParams
// 0x0020 (0x0020 - 0x0000)
struct ABP_Nikki_AimOffset_C_UpdateAO_ControlParams final
{
public:
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_AOAlpha_ImplicitCast;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Nikki_AimOffset_C_UpdateAO_ControlParams) == 0x000008, "Wrong alignment on ABP_Nikki_AimOffset_C_UpdateAO_ControlParams");
static_assert(sizeof(ABP_Nikki_AimOffset_C_UpdateAO_ControlParams) == 0x000020, "Wrong size on ABP_Nikki_AimOffset_C_UpdateAO_ControlParams");
static_assert(offsetof(ABP_Nikki_AimOffset_C_UpdateAO_ControlParams, CallFunc_GetCurveValue_ReturnValue) == 0x000000, "Member 'ABP_Nikki_AimOffset_C_UpdateAO_ControlParams::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_UpdateAO_ControlParams, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000008, "Member 'ABP_Nikki_AimOffset_C_UpdateAO_ControlParams::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_UpdateAO_ControlParams, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000010, "Member 'ABP_Nikki_AimOffset_C_UpdateAO_ControlParams::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Nikki_AimOffset_C_UpdateAO_ControlParams, K2Node_VariableSet_AOAlpha_ImplicitCast) == 0x000018, "Member 'ABP_Nikki_AimOffset_C_UpdateAO_ControlParams::K2Node_VariableSet_AOAlpha_ImplicitCast' has a wrong offset!");

}

