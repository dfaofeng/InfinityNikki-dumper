#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DyEnvWeathers

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_WeatherState_structs.hpp"
#include "E_WeatherTable_structs.hpp"
#include "DynamicEnvironmentSystem_structs.hpp"
#include "S_WeatherState_structs.hpp"
#include "BP_DynamicWeather_Master_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DyEnvWeathers.BP_DyEnvWeathers_C
// 0x0338 (0x0808 - 0x04D0)
class ABP_DyEnvWeathers_C final : public ABP_DynamicWeather_Master_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DyEnvWeathers_C;                 // 0x04D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  ExposureManager;                                   // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDynamicWetnessComponent*               DynamicWetness;                                    // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URainRipplesComponent*                  RainRipples;                                       // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DyEnvWeatehrComp_None_C*            BPC_DynamicWeather_None;                           // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DyEnvWeatehrComp_Sunny_C*           BPC_DynamicWeather_Sunny;                          // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              ED_Lightning;                                      // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              ED_StopLightning;                                  // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_DyEnvSys_C*                         Ref_TodSysDW;                                      // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const struct FWeatherBaseLerpConfig& WeatherData)> ED_WeatherData; // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Weather_Index;                                     // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADynamicWeatherVolume*                  WeatherVolumeFrom;                                 // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ADynamicWeatherVolume*                  WeatherVolumeTo;                                   // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UBPC_Weather_Master_C*                  CompTo;                                            // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Dynamic_Weather_Comp;                              // 0x0568(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	double                                        RainIntensity;                                     // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   PrevComp;                                          // 0x0598(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	int32                                         DayNightIndex;                                     // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C4[0x4];                                      // 0x05C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BPCFadeInProgress;                                 // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartBlendWeight;                                  // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EndBlentWeight;                                    // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BPCFadeOutProgress;                                // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeatherInBlending;                                 // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             WeatherTable;                                      // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             QuestTable;                                        // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             FightTable;                                        // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             ShowTable;                                         // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        WeatherIntensity;                                  // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentWeatherName;                                // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PrevWeatherName;                                   // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeatherImmediate;                                  // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 TargetTOD;                                         // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TargetPP;                                          // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TargetWP;                                          // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TargetRole;                                        // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TrackSelectorFrom;                                 // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TrackSelectorTo;                                   // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isWeather;                                         // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_661[0x7];                                      // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransitionTime;                                    // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delta_Seconds;                                     // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeatherInterp;                                     // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeatherTransitioning;                              // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_681[0x3];                                      // 0x0681(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Prev_Weather_Name;                                 // 0x0684(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastIsTOD;                                         // 0x068C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTaskWeather;                                     // 0x068D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68E[0x2];                                      // 0x068E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_WeatherState                        ChangeState;                                       // 0x0690(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WeatherTable                                eWeatherTable;                                     // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C1[0x7];                                      // 0x06C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(double LightningIntensity, double Distance)> ED_Thunder;           // 0x06C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UNiagaraParameterCollection*            NG_Collection;                                     // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CompInPreparation;                                 // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WeatherState                                E_WeatherState;                                    // 0x06E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E2[0x6];                                      // 0x06E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              ShouldChangeWeather;                               // 0x06E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Condition;                                         // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Indoor;                                            // 0x06F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6FA[0x6];                                      // 0x06FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PeriodSpeed;                                       // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DyEnvSky_C*                         Ref_DESSky;                                        // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ADynamicWeatherVolume*                  WeatherVolumeNight;                                // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         VolumetricFog;                                     // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71C[0x4];                                      // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UDataTable*>          TODTableArray;                                     // 0x0720(0x0050)(Edit, BlueprintVisible)
	class UDataTable*                             CurrentTODTable;                                   // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ADynamicWeatherVolume*                  TODVolume;                                         // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ADynamicWeatherVolume*                  TODVolumeTo;                                       // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              ED_ChangeWeatherFinished;                          // 0x0788(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FS_WeatherState                        PackedStateCache;                                  // 0x0798(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADynamicWeatherVolume*                  ShowVolume;                                        // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ADynamicWeatherVolume*                  QuestVolume;                                       // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Prev_Wetness;                                      // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Increasing;                                        // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E1[0x7];                                      // 0x07E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               WeatherRainRippleMID;                              // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   LocalFliteredWeatherName;                          // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeatherSwapTo;                                     // 0x07F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F9[0x3];                                      // 0x07F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LastWeatherName;                                   // 0x07FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void WeatherRaining(const struct FWeatherBaseLerpConfig& WeatherSettings);
	void WeatherChangeEvent(const struct FS_WeatherState& packedParams);
	void Weather_Rain(const struct FWeatherBaseLerpConfig& WeatherBaseLerpConfig);
	void Weather_NoRain();
	void UserConstructionScript();
	void UpdateNightParam();
	void TransitionComplete();
	class ADynamicWeatherVolume* TargetWeatherVolume();
	void SetVolumetricFog(bool bNewValue);
	void SetSceneWeatherBlendWeight(double Weight);
	void SetPause(bool bPause);
	void SendPresetToObject(class ADynamicWeatherVolume* Volume);
	void Send_DataTable_to_Volume();
	class ADynamicWeatherVolume* RemoveSwapWeatherVolume();
	double RemoveBlendWeight(class ADynamicWeatherVolume* Vol);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnLoaded_20BA12BD41768EB729615B9BCDF12002(TSubclassOf<class UObject> Loaded);
	void OnLoaded_20BA12BD41768EB729615B9B502C925E(TSubclassOf<class UObject> Loaded);
	void OnLoaded_20BA12BD41768EB729615B9B4C505C9A(TSubclassOf<class UObject> Loaded);
	void OnLoaded_20BA12BD41768EB729615B9B437923C1(TSubclassOf<class UObject> Loaded);
	void Manual_Operation_TOD(double Time);
	void LimitTODSunRotator(const struct FSunLightLerpConfig& FinalSunLightSetting, class AActor* SkySphere, class ADirectionalLight* SunLight, class ADirectionalLight* MoonLight, float NowTime, float* SunExtraIntensity, float* MoonExtraIntensity);
	void InitiWeather();
	class UDataTable* GetWeatherCurrentTable(class FName InName);
	float GetSwapCurveFactorRemapped0_1();
	void Get_Final_Sun_Rotator_Value(float Now_Time, struct FVector* Final);
	void FillWeathersBinding();
	void ExecuteUbergraph_BP_DyEnvWeathers(int32 EntryPoint);
	void Debug_Weather_Rain();
	void Check_Weather_Quests();
	void Check_Rain(double Wetness_Factor, bool* ToRain);
	void Calculat_Weather_Interp(double Delta_Seconds_0);
	void BPI_WeatherData(class UClass* WeatherPreset);
	void BPI_WeatherChanged(const class FString& RegionName, const class FString& UnloadWeatherName, const class FString& LoadWeatherName);
	void BPI_TODTime(double Time);
	void BPI_TodState();
	void BPI_SaveAsset(bool OnlySyncContent, bool OnlyWriteParam);
	void BPI_ReloadFile();
	void BPI_EditorUpdateRole(const struct FLinearColor& LocalLightColor);
	void BPI_EditorUpdate();
	void BPI_CLFSPostContruct();
	void BlendingWeatherVolume();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DyEnvWeathers_C">();
	}
	static class ABP_DyEnvWeathers_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DyEnvWeathers_C>();
	}
};
static_assert(alignof(ABP_DyEnvWeathers_C) == 0x000008, "Wrong alignment on ABP_DyEnvWeathers_C");
static_assert(sizeof(ABP_DyEnvWeathers_C) == 0x000808, "Wrong size on ABP_DyEnvWeathers_C");
static_assert(offsetof(ABP_DyEnvWeathers_C, UberGraphFrame_BP_DyEnvWeathers_C) == 0x0004D0, "Member 'ABP_DyEnvWeathers_C::UberGraphFrame_BP_DyEnvWeathers_C' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, ExposureManager) == 0x0004D8, "Member 'ABP_DyEnvWeathers_C::ExposureManager' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, DynamicWetness) == 0x0004E0, "Member 'ABP_DyEnvWeathers_C::DynamicWetness' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, RainRipples) == 0x0004E8, "Member 'ABP_DyEnvWeathers_C::RainRipples' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Niagara) == 0x0004F0, "Member 'ABP_DyEnvWeathers_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Scene) == 0x0004F8, "Member 'ABP_DyEnvWeathers_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, BPC_DynamicWeather_None) == 0x000500, "Member 'ABP_DyEnvWeathers_C::BPC_DynamicWeather_None' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, BPC_DynamicWeather_Sunny) == 0x000508, "Member 'ABP_DyEnvWeathers_C::BPC_DynamicWeather_Sunny' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, ED_Lightning) == 0x000510, "Member 'ABP_DyEnvWeathers_C::ED_Lightning' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, ED_StopLightning) == 0x000520, "Member 'ABP_DyEnvWeathers_C::ED_StopLightning' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Ref_TodSysDW) == 0x000530, "Member 'ABP_DyEnvWeathers_C::Ref_TodSysDW' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, ED_WeatherData) == 0x000538, "Member 'ABP_DyEnvWeathers_C::ED_WeatherData' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Weather_Index) == 0x000548, "Member 'ABP_DyEnvWeathers_C::Weather_Index' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, WeatherVolumeFrom) == 0x000550, "Member 'ABP_DyEnvWeathers_C::WeatherVolumeFrom' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, WeatherVolumeTo) == 0x000558, "Member 'ABP_DyEnvWeathers_C::WeatherVolumeTo' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, CompTo) == 0x000560, "Member 'ABP_DyEnvWeathers_C::CompTo' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Dynamic_Weather_Comp) == 0x000568, "Member 'ABP_DyEnvWeathers_C::Dynamic_Weather_Comp' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, RainIntensity) == 0x000590, "Member 'ABP_DyEnvWeathers_C::RainIntensity' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, PrevComp) == 0x000598, "Member 'ABP_DyEnvWeathers_C::PrevComp' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, DayNightIndex) == 0x0005C0, "Member 'ABP_DyEnvWeathers_C::DayNightIndex' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, BPCFadeInProgress) == 0x0005C8, "Member 'ABP_DyEnvWeathers_C::BPCFadeInProgress' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, StartBlendWeight) == 0x0005D0, "Member 'ABP_DyEnvWeathers_C::StartBlendWeight' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, EndBlentWeight) == 0x0005D8, "Member 'ABP_DyEnvWeathers_C::EndBlentWeight' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, BPCFadeOutProgress) == 0x0005E0, "Member 'ABP_DyEnvWeathers_C::BPCFadeOutProgress' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, WeatherInBlending) == 0x0005E8, "Member 'ABP_DyEnvWeathers_C::WeatherInBlending' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, WeatherTable) == 0x0005F0, "Member 'ABP_DyEnvWeathers_C::WeatherTable' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, QuestTable) == 0x0005F8, "Member 'ABP_DyEnvWeathers_C::QuestTable' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, FightTable) == 0x000600, "Member 'ABP_DyEnvWeathers_C::FightTable' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, ShowTable) == 0x000608, "Member 'ABP_DyEnvWeathers_C::ShowTable' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, WeatherIntensity) == 0x000610, "Member 'ABP_DyEnvWeathers_C::WeatherIntensity' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, CurrentWeatherName) == 0x000618, "Member 'ABP_DyEnvWeathers_C::CurrentWeatherName' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, PrevWeatherName) == 0x000620, "Member 'ABP_DyEnvWeathers_C::PrevWeatherName' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, WeatherImmediate) == 0x000628, "Member 'ABP_DyEnvWeathers_C::WeatherImmediate' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, TargetTOD) == 0x000630, "Member 'ABP_DyEnvWeathers_C::TargetTOD' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, TargetPP) == 0x000638, "Member 'ABP_DyEnvWeathers_C::TargetPP' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, TargetWP) == 0x000640, "Member 'ABP_DyEnvWeathers_C::TargetWP' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, TargetRole) == 0x000648, "Member 'ABP_DyEnvWeathers_C::TargetRole' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, TrackSelectorFrom) == 0x000650, "Member 'ABP_DyEnvWeathers_C::TrackSelectorFrom' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, TrackSelectorTo) == 0x000658, "Member 'ABP_DyEnvWeathers_C::TrackSelectorTo' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, isWeather) == 0x000660, "Member 'ABP_DyEnvWeathers_C::isWeather' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, TransitionTime) == 0x000668, "Member 'ABP_DyEnvWeathers_C::TransitionTime' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Delta_Seconds) == 0x000670, "Member 'ABP_DyEnvWeathers_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, WeatherInterp) == 0x000678, "Member 'ABP_DyEnvWeathers_C::WeatherInterp' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, WeatherTransitioning) == 0x000680, "Member 'ABP_DyEnvWeathers_C::WeatherTransitioning' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Prev_Weather_Name) == 0x000684, "Member 'ABP_DyEnvWeathers_C::Prev_Weather_Name' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, LastIsTOD) == 0x00068C, "Member 'ABP_DyEnvWeathers_C::LastIsTOD' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, IsTaskWeather) == 0x00068D, "Member 'ABP_DyEnvWeathers_C::IsTaskWeather' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, ChangeState) == 0x000690, "Member 'ABP_DyEnvWeathers_C::ChangeState' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, eWeatherTable) == 0x0006C0, "Member 'ABP_DyEnvWeathers_C::eWeatherTable' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, ED_Thunder) == 0x0006C8, "Member 'ABP_DyEnvWeathers_C::ED_Thunder' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, NG_Collection) == 0x0006D8, "Member 'ABP_DyEnvWeathers_C::NG_Collection' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, CompInPreparation) == 0x0006E0, "Member 'ABP_DyEnvWeathers_C::CompInPreparation' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, E_WeatherState) == 0x0006E1, "Member 'ABP_DyEnvWeathers_C::E_WeatherState' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, ShouldChangeWeather) == 0x0006E8, "Member 'ABP_DyEnvWeathers_C::ShouldChangeWeather' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Condition) == 0x0006F8, "Member 'ABP_DyEnvWeathers_C::Condition' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Indoor) == 0x0006F9, "Member 'ABP_DyEnvWeathers_C::Indoor' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, PeriodSpeed) == 0x000700, "Member 'ABP_DyEnvWeathers_C::PeriodSpeed' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Ref_DESSky) == 0x000708, "Member 'ABP_DyEnvWeathers_C::Ref_DESSky' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, WeatherVolumeNight) == 0x000710, "Member 'ABP_DyEnvWeathers_C::WeatherVolumeNight' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, VolumetricFog) == 0x000718, "Member 'ABP_DyEnvWeathers_C::VolumetricFog' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, TODTableArray) == 0x000720, "Member 'ABP_DyEnvWeathers_C::TODTableArray' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, CurrentTODTable) == 0x000770, "Member 'ABP_DyEnvWeathers_C::CurrentTODTable' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, TODVolume) == 0x000778, "Member 'ABP_DyEnvWeathers_C::TODVolume' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, TODVolumeTo) == 0x000780, "Member 'ABP_DyEnvWeathers_C::TODVolumeTo' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, ED_ChangeWeatherFinished) == 0x000788, "Member 'ABP_DyEnvWeathers_C::ED_ChangeWeatherFinished' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, PackedStateCache) == 0x000798, "Member 'ABP_DyEnvWeathers_C::PackedStateCache' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, ShowVolume) == 0x0007C8, "Member 'ABP_DyEnvWeathers_C::ShowVolume' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, QuestVolume) == 0x0007D0, "Member 'ABP_DyEnvWeathers_C::QuestVolume' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Prev_Wetness) == 0x0007D8, "Member 'ABP_DyEnvWeathers_C::Prev_Wetness' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, Increasing) == 0x0007E0, "Member 'ABP_DyEnvWeathers_C::Increasing' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, WeatherRainRippleMID) == 0x0007E8, "Member 'ABP_DyEnvWeathers_C::WeatherRainRippleMID' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, LocalFliteredWeatherName) == 0x0007F0, "Member 'ABP_DyEnvWeathers_C::LocalFliteredWeatherName' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, WeatherSwapTo) == 0x0007F8, "Member 'ABP_DyEnvWeathers_C::WeatherSwapTo' has a wrong offset!");
static_assert(offsetof(ABP_DyEnvWeathers_C, LastWeatherName) == 0x0007FC, "Member 'ABP_DyEnvWeathers_C::LastWeatherName' has a wrong offset!");

}

