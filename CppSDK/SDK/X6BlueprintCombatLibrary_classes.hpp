#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6BlueprintCombatLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EHitReason_structs.hpp"
#include "EScenarioCombatEventType_structs.hpp"
#include "EFeedBackReason_structs.hpp"
#include "EDamagePerformanceType_structs.hpp"
#include "EHitDisMoveType_structs.hpp"
#include "Enum_JumpToTaskTraceType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass X6BlueprintCombatLibrary.X6BlueprintCombatLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UX6BlueprintCombatLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void LocalSpawnActorWithServerInit(class UClass* SpawnClass, const struct FVector& Postion, const struct FRotator& Rotation, bool bAddToSoloLevel, int32 ConfigID, class UObject* __WorldContext, class AActor** Actor);
	static void BP_TryShowTreasurebox(class UObject* __WorldContext);
	static void BP_SetShieldState(class AActor* Actor, bool ShieldOpen, class UObject* __WorldContext);
	static void BP_SetMonsterMarkerState(class AActor* Actor, bool ShowMarker, class UObject* __WorldContext);
	static void BP_SetHighNavCostArea(const struct FVector& Center, double Radius, double Height, double LifeTime, class UObject* __WorldContext);
	static void BP_ResetTokenType(class AActor* Actor, class UObject* __WorldContext);
	static void BP_ResetAISightConfig(class AActor* Actor, class UObject* __WorldContext);
	static void BP_RemoveBuff(class AActor* Actor, class UBP_BuffConfig_C* BuffDA, class UObject* __WorldContext);
	static void BP_PlayShakeSourceByLocation(const struct FVector& Location, TSoftObjectPtr<class UBP_CameraAndForceShakeConfigTemplate_C> ConfigSoftRef, const class FString& ShakeSourceKey, class UObject* __WorldContext, class FString* Ret_ShakeSourceKey);
	static void BP_PlayShakeSource(class AActor* Actor, TSoftObjectPtr<class UBP_CameraAndForceShakeConfigTemplate_C> ConfigSoftRef, bool IsAttach, const class FString& AttachSocketName, const class FString& ShakeSourceKey, class UObject* __WorldContext, class FString* Ret_ShakeSourceKey);
	static void BP_PlayMontageByTag(class AActor* Actor, const struct FGameplayTag& MontageTag, class UObject* __WorldContext, bool* Result);
	static void BP_OnCharacterEnterLeaveBattleArea(class UObject* __WorldContext);
	static void BP_OnBossUseSkill(const class FString& SkillKey, class UObject* __WorldContext);
	static void BP_ModifyHP(class AActor* Actor, double Value, EFeedBackReason Reason, class UObject* __WorldContext);
	static void BP_ModifyControllerRoleHP(double Value, EFeedBackReason Reason, class UObject* __WorldContext);
	static void BP_ModifyAISightConfigByDA(class AActor* Actor, class UBP_WorldAI_PerceptionConfig_C* AISightDA, class UObject* __WorldContext);
	static void BP_ModifyAIBehaviorTag(class AActor* Actor, const struct FGameplayTag& AIBehaviorTag, class UObject* __WorldContext);
	static void BP_IsDead(class AActor* Actor, class UObject* __WorldContext, bool* IsDead);
	static void BP_GetX6AIPerceptionComponent(class AActor* Actor, class UObject* __WorldContext, class UX6AIPerceptionComponent** X6AIPerceptionComp);
	static void BP_GetSafeSpawnLocationsFromOffset(class AActor* OwnerActor, TArray<struct FVector2D>& OffsetLocations, double GroundHeight, double CheckLength, EDrawDebugTrace DrawDebug, class UObject* __WorldContext, TArray<struct FVector>* SafeSpawnLocation);
	static void BP_GetRandomPoints(const struct FVector& Center, double InnerRadius, double OuterRadius, double Interval, int32 PointNum, class UObject* __WorldContext, TArray<struct FVector>* RandomPoints);
	static void BP_GetMonsterRangeOfBattleSq(class AActor* MonsterActor, class UObject* __WorldContext, double* RangeOfBattleSq);
	static void BP_GetCrowdAllocatePoints(class AActor* CenterActor, TArray<class AActor*>& Actors, TArray<struct FVector>& Positions, class UObject* __WorldContext, TMap<class AActor*, struct FVector>* Results);
	static void BP_GetActorMaxHP(class AActor* Actor, class UObject* __WorldContext, double* MaxHP);
	static void BP_GetActorHP(class AActor* Actor, class UObject* __WorldContext, double* HP);
	static void BP_ForceHitBackNikki(class AActor* Attacker, const struct FVector& HitDirection, const struct FGameplayTag& HitBackTag, bool ApplyAirHitConfig, class UObject* __WorldContext, bool* bSuccess);
	static void BP_EnterEliteCombat(int32 EntityID, class UObject* __WorldContext);
	static void BP_EnterBossCombat(int32 BossId, class UObject* __WorldContext);
	static void BP_EndPlayShakeSource(const class FString& ShakeSourceKey, class UObject* __WorldContext);
	static void BP_EnableRecoveryFilterAndOutline(class AActor* TargetActor, bool bEnable, bool bSameEnableCollision, class UObject* __WorldContext);
	static void BP_DoActiveHitAndDamage(class AActor* TargetActor, EDamagePerformanceType PerformanceType, double DamageValue, const struct FVector& HitDirection, class AActor* AttackerActor, double HitDistance, double HitHeight, double HitDuration, const class FString& HitCurveVectorKey, bool HitOpenLandFinish, EHitDisMoveType HitMoveType, bool IsForceBack, EHitReason HitReason, const struct FGameplayTag& HitBackTag, class UObject* __WorldContext, bool* IsSuccess);
	static void BP_DoActiveForceHit(class AActor* TargetActor, EDamagePerformanceType PerformanceType, const struct FVector& HitDirection, class AActor* AttackerActor, double HitDistance, double HitHeight, double HitDuration, const class FString& HitCurveVectorKey, bool HitOpenLandFinish, EHitDisMoveType HitMoveType, class UObject* __WorldContext, bool* IsSuccess);
	static void BP_DisableStrafeMovement(class AActor* Actor, class UObject* __WorldContext);
	static void BP_CommonEventTrigger(int32 MonsterConfigID, EScenarioCombatEventType NoticeType, class UObject* __WorldContext);
	static void BP_CombatEarlyWarning(Enum_JumpToTaskTraceType TraceType, class UNiagaraSystem* EarlyWarningNiagara, const struct FVector& NiagaraOffset, const TMap<class FName, double>& NiagaraFloatVariable, const TMap<class FName, struct FVector>& NiagaraVectorVariable, class AActor* Target, class UObject* __WorldContext);
	static void BP_ChangeHatredValueByTag(class AActor* Actor, const struct FGameplayTag& TriggerTag, class UObject* __WorldContext);
	static void BP_BlendCameraOut(class AActor* CameraOwnerActor, int32 CameraConfigIndex, const struct FViewTargetTransitionParams& BlendOutTransitionParams, class UObject* __WorldContext);
	static void BP_BlendCameraIn(class AActor* CameraOwnerActor, class UCameraBaseParamsData* CameraToBlend, const struct FViewTargetTransitionParams& BlendInTransitionParams, class UObject* __WorldContext, int32* ConfigIndex);
	static void BP_AddBuff(class AActor* Actor, class UBP_BuffConfig_C* BuffDA, const struct FF_BuffDurationSet& OverrideDurationConfig, class UObject* __WorldContext);

	void BP_DoSlomo(class AActor* TargetActor, double ActorSlomoDuration, double ActorSlomoRate, bool IsApplyGlobal, double GloabalSlomoDuration, double GloabalSlomoRate, class UObject* __WorldContext);
	void BP_CancelSlomo(class AActor* TargetActor, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"X6BlueprintCombatLibrary_C">();
	}
	static class UX6BlueprintCombatLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6BlueprintCombatLibrary_C>();
	}
};
static_assert(alignof(UX6BlueprintCombatLibrary_C) == 0x000008, "Wrong alignment on UX6BlueprintCombatLibrary_C");
static_assert(sizeof(UX6BlueprintCombatLibrary_C) == 0x000028, "Wrong size on UX6BlueprintCombatLibrary_C");

}

