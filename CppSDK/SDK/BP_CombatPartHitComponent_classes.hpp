#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CombatPartHitComponent

#include "Basic.hpp"

#include "ECombatHitMainType_structs.hpp"
#include "Engine_structs.hpp"
#include "EPlayerPartMaterialType_structs.hpp"
#include "X6Game_classes.hpp"
#include "ESkillFlag_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CombatPartHitComponent.BP_CombatPartHitComponent_C
// 0x00A0 (0x06A0 - 0x0600)
class UBP_CombatPartHitComponent_C final : public UX6CombatCapsuleComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0600(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	ECombatHitMainType                            BP_HitMainType;                                    // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BP_PartName;                                       // 0x0610(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          BP_ApplyDamageToMainBody;                          // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_621[0x7];                                      // 0x0621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_PartHP;                                         // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_DamageModifierRatio;                            // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BP_DamageBoxSocketStart;                           // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BP_DamageBoxSocketEnd;                             // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerPartMaterialType                       BP_HitMaterialType;                                // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_649[0x7];                                      // 0x0649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FVector& HItPoint, class AActor* Attacker)> BeHit;    // 0x0650(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BP_BulletNoDamage;                                 // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EffectZoneNoDamage;                             // 0x0661(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_662[0x6];                                      // 0x0662(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_CD;                                             // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 BP_OutlineSectionOverride;                         // 0x0670(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCurveFloat*                            BP_FilterComboFactorCurve;                         // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_FilterApplyOwnerBlock;                          // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillFlag                                    BP_IgnoreSkillFlag;                                // 0x0689(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_ApplyMultipleDamage;                            // 0x068A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68B[0x5];                                      // 0x068B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bModifyHPSuccess, bool bHitSuccess, const struct FVector& HItPoint, class AActor* Attacker)> OnDamageOrHitSuccessful; // 0x0690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_CombatPartHitComponent(int32 EntryPoint);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CombatPartHitComponent_C">();
	}
	static class UBP_CombatPartHitComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CombatPartHitComponent_C>();
	}
};
static_assert(alignof(UBP_CombatPartHitComponent_C) == 0x000010, "Wrong alignment on UBP_CombatPartHitComponent_C");
static_assert(sizeof(UBP_CombatPartHitComponent_C) == 0x0006A0, "Wrong size on UBP_CombatPartHitComponent_C");
static_assert(offsetof(UBP_CombatPartHitComponent_C, UberGraphFrame) == 0x000600, "Member 'UBP_CombatPartHitComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_HitMainType) == 0x000608, "Member 'UBP_CombatPartHitComponent_C::BP_HitMainType' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_PartName) == 0x000610, "Member 'UBP_CombatPartHitComponent_C::BP_PartName' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_ApplyDamageToMainBody) == 0x000620, "Member 'UBP_CombatPartHitComponent_C::BP_ApplyDamageToMainBody' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_PartHP) == 0x000628, "Member 'UBP_CombatPartHitComponent_C::BP_PartHP' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_DamageModifierRatio) == 0x000630, "Member 'UBP_CombatPartHitComponent_C::BP_DamageModifierRatio' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_DamageBoxSocketStart) == 0x000638, "Member 'UBP_CombatPartHitComponent_C::BP_DamageBoxSocketStart' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_DamageBoxSocketEnd) == 0x000640, "Member 'UBP_CombatPartHitComponent_C::BP_DamageBoxSocketEnd' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_HitMaterialType) == 0x000648, "Member 'UBP_CombatPartHitComponent_C::BP_HitMaterialType' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BeHit) == 0x000650, "Member 'UBP_CombatPartHitComponent_C::BeHit' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_BulletNoDamage) == 0x000660, "Member 'UBP_CombatPartHitComponent_C::BP_BulletNoDamage' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_EffectZoneNoDamage) == 0x000661, "Member 'UBP_CombatPartHitComponent_C::BP_EffectZoneNoDamage' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_CD) == 0x000668, "Member 'UBP_CombatPartHitComponent_C::BP_CD' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_OutlineSectionOverride) == 0x000670, "Member 'UBP_CombatPartHitComponent_C::BP_OutlineSectionOverride' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_FilterComboFactorCurve) == 0x000680, "Member 'UBP_CombatPartHitComponent_C::BP_FilterComboFactorCurve' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_FilterApplyOwnerBlock) == 0x000688, "Member 'UBP_CombatPartHitComponent_C::BP_FilterApplyOwnerBlock' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_IgnoreSkillFlag) == 0x000689, "Member 'UBP_CombatPartHitComponent_C::BP_IgnoreSkillFlag' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, BP_ApplyMultipleDamage) == 0x00068A, "Member 'UBP_CombatPartHitComponent_C::BP_ApplyMultipleDamage' has a wrong offset!");
static_assert(offsetof(UBP_CombatPartHitComponent_C, OnDamageOrHitSuccessful) == 0x000690, "Member 'UBP_CombatPartHitComponent_C::OnDamageOrHitSuccessful' has a wrong offset!");

}

