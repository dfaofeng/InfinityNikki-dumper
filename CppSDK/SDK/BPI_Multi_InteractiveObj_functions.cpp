#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Multi_InteractiveObj

#include "Basic.hpp"

#include "BPI_Multi_InteractiveObj_classes.hpp"
#include "BPI_Multi_InteractiveObj_parameters.hpp"


namespace SDK
{

// Function BPI_Multi_InteractiveObj.BPI_Multi_InteractiveObj_C.On_Multi_ActiveSuccess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Other_player_actor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_EInteractSuccRet                      Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Multi_InteractiveObj_C::On_Multi_ActiveSuccess(class AActor* Other_player_actor, E_EInteractSuccRet Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Multi_InteractiveObj_C", "On_Multi_ActiveSuccess");

	Params::BPI_Multi_InteractiveObj_C_On_Multi_ActiveSuccess Parms{};

	Parms.Other_player_actor = Other_player_actor;
	Parms.Result = Result;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Multi_InteractiveObj.BPI_Multi_InteractiveObj_C.On_Multi_InteractiveObjActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Multi_InteractiveObj_C::On_Multi_InteractiveObjActive(const class FString& Data, class AActor* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Multi_InteractiveObj_C", "On_Multi_InteractiveObjActive");

	Params::BPI_Multi_InteractiveObj_C_On_Multi_InteractiveObjActive Parms{};

	Parms.Data = std::move(Data);
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}

}

