#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_DaMiaoCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "X6Animation_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.Anim Layer Additive Behavior
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_Anim_Layer_Additive_Behavior final
{
public:
	struct FPoseLink                              Anim_Layer_Additive_Behavior_0;                    // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_Anim_Layer_Additive_Behavior) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_Anim_Layer_Additive_Behavior");
static_assert(sizeof(ABP_DaMiaoCharacter_C_Anim_Layer_Additive_Behavior) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_Anim_Layer_Additive_Behavior");
static_assert(offsetof(ABP_DaMiaoCharacter_C_Anim_Layer_Additive_Behavior, Anim_Layer_Additive_Behavior_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_Anim_Layer_Additive_Behavior::Anim_Layer_Additive_Behavior_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimationLayer_BaseMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimationLayer_BaseMovement final
{
public:
	struct FPoseLink                              AnimationLayer_BaseMovement_0;                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimationLayer_BaseMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimationLayer_BaseMovement");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimationLayer_BaseMovement) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimationLayer_BaseMovement");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimationLayer_BaseMovement, AnimationLayer_BaseMovement_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimationLayer_BaseMovement::AnimationLayer_BaseMovement_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimGraph");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimGraph) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimGraph");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_AimOffset
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_AimOffset final
{
public:
	struct FPoseLink                              InPoseForAimOffset;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_AimOffset_0;                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_AimOffset) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_AimOffset");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_AimOffset) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_AimOffset");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_AimOffset, InPoseForAimOffset) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_AimOffset::InPoseForAimOffset' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_AimOffset, AnimLayer_AimOffset_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_AimOffset::AnimLayer_AimOffset_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_AttractorBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_AttractorBehavior final
{
public:
	struct FPoseLink                              InPose_AttractorBehavior;                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_AttractorBehavior_0;                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_AttractorBehavior) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_AttractorBehavior");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_AttractorBehavior) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_AttractorBehavior");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_AttractorBehavior, InPose_AttractorBehavior) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_AttractorBehavior::InPose_AttractorBehavior' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_AttractorBehavior, AnimLayer_AttractorBehavior_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_AttractorBehavior::AnimLayer_AttractorBehavior_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_BehaviorAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_BehaviorAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForPlayerBehavior;                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorAdditiveMode_0;                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorAdditiveMode) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_BehaviorAdditiveMode");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorAdditiveMode) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_BehaviorAdditiveMode");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorAdditiveMode, InPoseForPlayerBehavior) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_BehaviorAdditiveMode::InPoseForPlayerBehavior' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorAdditiveMode, AnimLayer_BehaviorAdditiveMode_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_BehaviorAdditiveMode::AnimLayer_BehaviorAdditiveMode_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_BehaviorConnectionMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_BehaviorConnectionMode final
{
public:
	struct FPoseLink                              InPoseToConnectionMode;                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorConnectionMode_0;                // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorConnectionMode) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_BehaviorConnectionMode");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorConnectionMode) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_BehaviorConnectionMode");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorConnectionMode, InPoseToConnectionMode) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_BehaviorConnectionMode::InPoseToConnectionMode' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorConnectionMode, AnimLayer_BehaviorConnectionMode_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_BehaviorConnectionMode::AnimLayer_BehaviorConnectionMode_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_BehaviorExtraMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_BehaviorExtraMode final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorExtraMode_0;                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorExtraMode) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_BehaviorExtraMode");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorExtraMode) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_BehaviorExtraMode");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorExtraMode, InPose) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_BehaviorExtraMode::InPose' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_BehaviorExtraMode, AnimLayer_BehaviorExtraMode_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_BehaviorExtraMode::AnimLayer_BehaviorExtraMode_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_CombatMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_CombatMovement final
{
public:
	struct FPoseLink                              AnimLayer_CombatMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_CombatMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_CombatMovement");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_CombatMovement) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_CombatMovement");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_CombatMovement, AnimLayer_CombatMovement_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_CombatMovement::AnimLayer_CombatMovement_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_CustomBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_CustomBehavior final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_CustomBehavior_0;                        // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_CustomBehavior) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_CustomBehavior");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_CustomBehavior) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_CustomBehavior");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_CustomBehavior, InPose) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_CustomBehavior::InPose' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_CustomBehavior, AnimLayer_CustomBehavior_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_CustomBehavior::AnimLayer_CustomBehavior_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_DialogueBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_DialogueBehavior final
{
public:
	struct FPoseLink                              InPose_DIalogueBehavior;                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_DialogueBehavior_0;                      // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_DialogueBehavior) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_DialogueBehavior");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_DialogueBehavior) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_DialogueBehavior");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_DialogueBehavior, InPose_DIalogueBehavior) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_DialogueBehavior::InPose_DIalogueBehavior' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_DialogueBehavior, AnimLayer_DialogueBehavior_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_DialogueBehavior::AnimLayer_DialogueBehavior_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_EquipmentAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_EquipmentAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForEquipment;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_EquipmentAdditiveMode_0;                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_EquipmentAdditiveMode) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_EquipmentAdditiveMode");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_EquipmentAdditiveMode) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_EquipmentAdditiveMode");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_EquipmentAdditiveMode, InPoseForEquipment) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_EquipmentAdditiveMode::InPoseForEquipment' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_EquipmentAdditiveMode, AnimLayer_EquipmentAdditiveMode_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_EquipmentAdditiveMode::AnimLayer_EquipmentAdditiveMode_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_InteractionPerformanceBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_InteractionPerformanceBehavior final
{
public:
	struct FPoseLink                              InPose_InterationPerformance;                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_InteractionPerformanceBehavior_0;        // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_InteractionPerformanceBehavior) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_InteractionPerformanceBehavior");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_InteractionPerformanceBehavior) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_InteractionPerformanceBehavior");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_InteractionPerformanceBehavior, InPose_InterationPerformance) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_InteractionPerformanceBehavior::InPose_InterationPerformance' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_InteractionPerformanceBehavior, AnimLayer_InteractionPerformanceBehavior_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_InteractionPerformanceBehavior::AnimLayer_InteractionPerformanceBehavior_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_Jump
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_Jump final
{
public:
	struct FPoseLink                              AnimLayer_Jump_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_Jump) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_Jump");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_Jump) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_Jump");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_Jump, AnimLayer_Jump_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_Jump::AnimLayer_Jump_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_Land
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_Land final
{
public:
	struct FPoseLink                              AnimLayer_Land_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_Land) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_Land");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_Land) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_Land");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_Land, AnimLayer_Land_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_Land::AnimLayer_Land_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_MovementDependObject
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_MovementDependObject final
{
public:
	struct FPoseLink                              AnimLayer_MovementDependObject_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_MovementDependObject) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_MovementDependObject");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_MovementDependObject) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_MovementDependObject");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_MovementDependObject, AnimLayer_MovementDependObject_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_MovementDependObject::AnimLayer_MovementDependObject_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_NPCAdditiveBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_NPCAdditiveBehavior final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCAdditiveBehavior_0;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_NPCAdditiveBehavior) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_NPCAdditiveBehavior");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_NPCAdditiveBehavior) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_NPCAdditiveBehavior");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_NPCAdditiveBehavior, InPose) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_NPCAdditiveBehavior::InPose' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_NPCAdditiveBehavior, AnimLayer_NPCAdditiveBehavior_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_NPCAdditiveBehavior::AnimLayer_NPCAdditiveBehavior_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_NPCBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_NPCBehavior final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCBehavior_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_NPCBehavior) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_NPCBehavior");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_NPCBehavior) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_NPCBehavior");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_NPCBehavior, InPose_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_NPCBehavior::InPose_0' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_NPCBehavior, AnimLayer_NPCBehavior_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_NPCBehavior::AnimLayer_NPCBehavior_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_PlayerControllingTool
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_PlayerControllingTool final
{
public:
	struct FPoseLink                              AnimLayer_PlayerControllingTool_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_PlayerControllingTool) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_PlayerControllingTool");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_PlayerControllingTool) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_PlayerControllingTool");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_PlayerControllingTool, AnimLayer_PlayerControllingTool_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_PlayerControllingTool::AnimLayer_PlayerControllingTool_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_PlayerRegularMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_PlayerRegularMovement final
{
public:
	struct FPoseLink                              AnimLayer_PlayerRegularMovement_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_PlayerRegularMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_PlayerRegularMovement");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_PlayerRegularMovement) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_PlayerRegularMovement");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_PlayerRegularMovement, AnimLayer_PlayerRegularMovement_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_PlayerRegularMovement::AnimLayer_PlayerRegularMovement_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_SituationFeedbackBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_SituationFeedbackBehavior final
{
public:
	struct FPoseLink                              InPose_SituationFeedback;                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_SituationFeedbackBehavior_0;             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_SituationFeedbackBehavior) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_SituationFeedbackBehavior");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_SituationFeedbackBehavior) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_SituationFeedbackBehavior");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_SituationFeedbackBehavior, InPose_SituationFeedback) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_SituationFeedbackBehavior::InPose_SituationFeedback' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_SituationFeedbackBehavior, AnimLayer_SituationFeedbackBehavior_0) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_SituationFeedbackBehavior::AnimLayer_SituationFeedbackBehavior_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_SpecialSurfaceMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_SpecialSurfaceMovement final
{
public:
	struct FPoseLink                              AnimLayer_SpecialSurfaceMovement_0;                // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_SpecialSurfaceMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_SpecialSurfaceMovement");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_SpecialSurfaceMovement) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_SpecialSurfaceMovement");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_SpecialSurfaceMovement, AnimLayer_SpecialSurfaceMovement_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_SpecialSurfaceMovement::AnimLayer_SpecialSurfaceMovement_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_StrafeMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_StrafeMovement final
{
public:
	struct FPoseLink                              AnimLayer_StrafeMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_StrafeMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_StrafeMovement");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_StrafeMovement) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_StrafeMovement");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_StrafeMovement, AnimLayer_StrafeMovement_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_StrafeMovement::AnimLayer_StrafeMovement_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_UsingCarrierMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_UsingCarrierMovement final
{
public:
	struct FPoseLink                              AnimLayer_UsingCarrierMovement_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_UsingCarrierMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_UsingCarrierMovement");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_UsingCarrierMovement) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_UsingCarrierMovement");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_UsingCarrierMovement, AnimLayer_UsingCarrierMovement_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_UsingCarrierMovement::AnimLayer_UsingCarrierMovement_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.AnimLayer_WhiteBoxMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_AnimLayer_WhiteBoxMovement final
{
public:
	struct FPoseLink                              AnimLayer_WhiteBoxMovement_0;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_AnimLayer_WhiteBoxMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_AnimLayer_WhiteBoxMovement");
static_assert(sizeof(ABP_DaMiaoCharacter_C_AnimLayer_WhiteBoxMovement) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_AnimLayer_WhiteBoxMovement");
static_assert(offsetof(ABP_DaMiaoCharacter_C_AnimLayer_WhiteBoxMovement, AnimLayer_WhiteBoxMovement_0) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_AnimLayer_WhiteBoxMovement::AnimLayer_WhiteBoxMovement_0' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_DaMiaoCharacter_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_DaMiaoCharacter_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_DaMiaoCharacter_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_DaMiaoCharacter_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_DaMiaoCharacter_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.BP_LinkSingleLayer
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_BP_LinkSingleLayer final
{
public:
	class UClass*                                 LinkLayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_BP_LinkSingleLayer) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_BP_LinkSingleLayer");
static_assert(sizeof(ABP_DaMiaoCharacter_C_BP_LinkSingleLayer) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_BP_LinkSingleLayer");
static_assert(offsetof(ABP_DaMiaoCharacter_C_BP_LinkSingleLayer, LinkLayer) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_BP_LinkSingleLayer::LinkLayer' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_BP_LinkSingleLayer, CallFunc_IsValidClass_ReturnValue) == 0x000008, "Member 'ABP_DaMiaoCharacter_C_BP_LinkSingleLayer::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.CanUseDialogPerformance
// 0x0003 (0x0003 - 0x0000)
struct ABP_DaMiaoCharacter_C_CanUseDialogPerformance final
{
public:
	bool                                          bRet;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_CanUseDialogPerformance) == 0x000001, "Wrong alignment on ABP_DaMiaoCharacter_C_CanUseDialogPerformance");
static_assert(sizeof(ABP_DaMiaoCharacter_C_CanUseDialogPerformance) == 0x000003, "Wrong size on ABP_DaMiaoCharacter_C_CanUseDialogPerformance");
static_assert(offsetof(ABP_DaMiaoCharacter_C_CanUseDialogPerformance, bRet) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_CanUseDialogPerformance::bRet' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_CanUseDialogPerformance, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'ABP_DaMiaoCharacter_C_CanUseDialogPerformance::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_CanUseDialogPerformance, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'ABP_DaMiaoCharacter_C_CanUseDialogPerformance::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.CanUseLevelSequenceEmotion
// 0x0003 (0x0003 - 0x0000)
struct ABP_DaMiaoCharacter_C_CanUseLevelSequenceEmotion final
{
public:
	bool                                          bRet;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_CanUseLevelSequenceEmotion) == 0x000001, "Wrong alignment on ABP_DaMiaoCharacter_C_CanUseLevelSequenceEmotion");
static_assert(sizeof(ABP_DaMiaoCharacter_C_CanUseLevelSequenceEmotion) == 0x000003, "Wrong size on ABP_DaMiaoCharacter_C_CanUseLevelSequenceEmotion");
static_assert(offsetof(ABP_DaMiaoCharacter_C_CanUseLevelSequenceEmotion, bRet) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_CanUseLevelSequenceEmotion::bRet' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_CanUseLevelSequenceEmotion, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'ABP_DaMiaoCharacter_C_CanUseLevelSequenceEmotion::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_CanUseLevelSequenceEmotion, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'ABP_DaMiaoCharacter_C_CanUseLevelSequenceEmotion::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.ExecuteUbergraph_ABP_DaMiaoCharacter
// 0x0088 (0x0088 - 0x0000)
struct ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerRegularMovementCompV3_C*      CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerAnimStatesComponent_C*        CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetEnableEmotionPerformance_EnableEmotionPerformance; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckActorHasBegunPlay_ReturnValue;       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_2;            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UX6NikkiCPPTickHelperComponent*         CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_3;            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUseDialogPerformance_bRet;             // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_4;            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerFeedBackPerformanceComponent_C* CallFunc_GetComponentByClass_ReturnValue_3;      // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter");
static_assert(sizeof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter) == 0x000088, "Wrong size on ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, EntryPoint) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000008, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, K2Node_Event_DeltaTimeX) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x000028, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000030, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_BP_GetEnableEmotionPerformance_EnableEmotionPerformance) == 0x000038, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_BP_GetEnableEmotionPerformance_EnableEmotionPerformance' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_GetOwningActor_ReturnValue) == 0x000040, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_CheckActorHasBegunPlay_ReturnValue) == 0x000048, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_CheckActorHasBegunPlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_TryGetPawnOwner_ReturnValue_2) == 0x000050, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_TryGetPawnOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000058, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_IsValid_ReturnValue_2) == 0x000060, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_TryGetPawnOwner_ReturnValue_3) == 0x000068, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_TryGetPawnOwner_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_IsValid_ReturnValue_3) == 0x000070, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_IsValid_ReturnValue_4) == 0x000071, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_CanUseDialogPerformance_bRet) == 0x000072, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_CanUseDialogPerformance_bRet' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_TryGetPawnOwner_ReturnValue_4) == 0x000078, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_TryGetPawnOwner_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter, CallFunc_GetComponentByClass_ReturnValue_3) == 0x000080, "Member 'ABP_DaMiaoCharacter_C_ExecuteUbergraph_ABP_DaMiaoCharacter::CallFunc_GetComponentByClass_ReturnValue_3' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.GetForceInitFootPlacementIKParam
// 0x0002 (0x0002 - 0x0000)
struct ABP_DaMiaoCharacter_C_GetForceInitFootPlacementIKParam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ret;                                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_GetForceInitFootPlacementIKParam) == 0x000001, "Wrong alignment on ABP_DaMiaoCharacter_C_GetForceInitFootPlacementIKParam");
static_assert(sizeof(ABP_DaMiaoCharacter_C_GetForceInitFootPlacementIKParam) == 0x000002, "Wrong size on ABP_DaMiaoCharacter_C_GetForceInitFootPlacementIKParam");
static_assert(offsetof(ABP_DaMiaoCharacter_C_GetForceInitFootPlacementIKParam, ReturnValue) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_GetForceInitFootPlacementIKParam::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_GetForceInitFootPlacementIKParam, Ret) == 0x000001, "Member 'ABP_DaMiaoCharacter_C_GetForceInitFootPlacementIKParam::Ret' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.IsNearFootstepSyncMark
// 0x0048 (0x0048 - 0x0000)
struct ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark final
{
public:
	bool                                          bNearFootstepSyncMarker;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBetweenFootstepSyncMarkers;                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeToClosestMarker_OutMarkerTime;     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetTimeToClosestMarker_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeToClosestMarker_OutMarkerTime_1;   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetTimeToClosestMarker_ReturnValue_1;     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast_1;                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark");
static_assert(sizeof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark) == 0x000048, "Wrong size on ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, bNearFootstepSyncMarker) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::bNearFootstepSyncMarker' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, bBetweenFootstepSyncMarkers) == 0x000001, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::bBetweenFootstepSyncMarkers' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_GetTimeToClosestMarker_OutMarkerTime) == 0x000004, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_GetTimeToClosestMarker_OutMarkerTime' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_GetTimeToClosestMarker_ReturnValue) == 0x000008, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_GetTimeToClosestMarker_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_GetTimeToClosestMarker_OutMarkerTime_1) == 0x00000C, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_GetTimeToClosestMarker_OutMarkerTime_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_GetTimeToClosestMarker_ReturnValue_1) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_GetTimeToClosestMarker_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_Abs_ReturnValue) == 0x000018, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_BooleanAND_ReturnValue) == 0x000020, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000021, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_Abs_ReturnValue_1) == 0x000028, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_BooleanOR_ReturnValue) == 0x000031, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_Abs_A_ImplicitCast) == 0x000038, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark, CallFunc_Abs_A_ImplicitCast_1) == 0x000040, "Member 'ABP_DaMiaoCharacter_C_IsNearFootstepSyncMark::CallFunc_Abs_A_ImplicitCast_1' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.OnBecomeRelevant_ContrlRig_FootPlacementIK
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoCharacter_C_OnBecomeRelevant_ContrlRig_FootPlacementIK final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_OnBecomeRelevant_ContrlRig_FootPlacementIK) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_OnBecomeRelevant_ContrlRig_FootPlacementIK");
static_assert(sizeof(ABP_DaMiaoCharacter_C_OnBecomeRelevant_ContrlRig_FootPlacementIK) == 0x000020, "Wrong size on ABP_DaMiaoCharacter_C_OnBecomeRelevant_ContrlRig_FootPlacementIK");
static_assert(offsetof(ABP_DaMiaoCharacter_C_OnBecomeRelevant_ContrlRig_FootPlacementIK, Context) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_OnBecomeRelevant_ContrlRig_FootPlacementIK::Context' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_OnBecomeRelevant_ContrlRig_FootPlacementIK, Node) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_OnBecomeRelevant_ContrlRig_FootPlacementIK::Node' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.OnOverlayBlendBecomeRelevant
// 0x0050 (0x0050 - 0x0000)
struct ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	EAnimNodeReferenceConversionResult            CallFunc_ConvertToX6OverlayBlend_Result;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6OverlayBlendReference               CallFunc_ConvertToX6OverlayBlend_ReturnValue;      // 0x0028(0x0010)(NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FX6OverlayBlendReference               CallFunc_DeactivateBlendThisFrame_ReturnValue;     // 0x0040(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant");
static_assert(sizeof(ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant) == 0x000050, "Wrong size on ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant");
static_assert(offsetof(ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant, Context) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant::Context' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant, Node) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant::Node' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant, CallFunc_ConvertToX6OverlayBlend_Result) == 0x000020, "Member 'ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant::CallFunc_ConvertToX6OverlayBlend_Result' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant, CallFunc_ConvertToX6OverlayBlend_ReturnValue) == 0x000028, "Member 'ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant::CallFunc_ConvertToX6OverlayBlend_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant, K2Node_SwitchEnum_CmpSuccess) == 0x000038, "Member 'ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant, CallFunc_DeactivateBlendThisFrame_ReturnValue) == 0x000040, "Member 'ABP_DaMiaoCharacter_C_OnOverlayBlendBecomeRelevant::CallFunc_DeactivateBlendThisFrame_ReturnValue' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.Update Montage Blend Alpha
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha final
{
public:
	bool                                          CallFunc_IsMontageSlotActivated_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMontageSlotActivated_ReturnValue_1;     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUseLevelSequenceEmotion_bRet;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha");
static_assert(sizeof(ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha");
static_assert(offsetof(ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha, CallFunc_IsMontageSlotActivated_ReturnValue) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha::CallFunc_IsMontageSlotActivated_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha, CallFunc_IsMontageSlotActivated_ReturnValue_1) == 0x000001, "Member 'ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha::CallFunc_IsMontageSlotActivated_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha, CallFunc_CanUseLevelSequenceEmotion_bRet) == 0x000002, "Member 'ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha::CallFunc_CanUseLevelSequenceEmotion_bRet' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'ABP_DaMiaoCharacter_C_Update_Montage_Blend_Alpha::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.UpdateDefaultEmotionRatio
// 0x0030 (0x0030 - 0x0000)
struct ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio final
{
public:
	class UBP_PlayerAnimStatesComponent_C*        InPlayerAnimStatesComponent;                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_DeltaTime_ImplicitCast; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_Current_ImplicitCast;  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_DefaultEmotionRatio_ImplicitCast; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio");
static_assert(sizeof(ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio) == 0x000030, "Wrong size on ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio, InPlayerAnimStatesComponent) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio::InPlayerAnimStatesComponent' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio, CallFunc_FInterpTo_Constant_DeltaTime_ImplicitCast) == 0x000018, "Member 'ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio::CallFunc_FInterpTo_Constant_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio, CallFunc_FInterpTo_Constant_Current_ImplicitCast) == 0x000020, "Member 'ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio::CallFunc_FInterpTo_Constant_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio, K2Node_VariableSet_DefaultEmotionRatio_ImplicitCast) == 0x000028, "Member 'ABP_DaMiaoCharacter_C_UpdateDefaultEmotionRatio::K2Node_VariableSet_DefaultEmotionRatio_ImplicitCast' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.UpdateFeedbackPerformance
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoCharacter_C_UpdateFeedbackPerformance final
{
public:
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_UpdateFeedbackPerformance) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_UpdateFeedbackPerformance");
static_assert(sizeof(ABP_DaMiaoCharacter_C_UpdateFeedbackPerformance) == 0x000010, "Wrong size on ABP_DaMiaoCharacter_C_UpdateFeedbackPerformance");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFeedbackPerformance, CallFunc_Conv_NameToString_ReturnValue) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_UpdateFeedbackPerformance::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.UpdateFootPlacementIKData
// 0x0030 (0x0030 - 0x0000)
struct ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData final
{
public:
	double                                        TempFootTargetAlpha;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValueWithDefault_OutValue;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCurveValueWithDefault_ReturnValue;     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData");
static_assert(sizeof(ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData) == 0x000030, "Wrong size on ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData, TempFootTargetAlpha) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData::TempFootTargetAlpha' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData, CallFunc_GetCurveValueWithDefault_OutValue) == 0x00000C, "Member 'ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData::CallFunc_GetCurveValueWithDefault_OutValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData, CallFunc_GetCurveValueWithDefault_ReturnValue) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData::CallFunc_GetCurveValueWithDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000020, "Member 'ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000028, "Member 'ABP_DaMiaoCharacter_C_UpdateFootPlacementIKData::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.UpdateFootTargetAlpha
// 0x0050 (0x0050 - 0x0000)
struct ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha final
{
public:
	bool                                          TargetEnableFootTarget;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetFootTargetAlpha;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearFootstepSyncMark_bNearFootstepSyncMarker; // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNearFootstepSyncMark_bBetweenFootstepSyncMarkers; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDeltaSeconds_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FloatSpringInterp_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_Current_ImplicitCast;   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FloatSpringInterp_Target_ImplicitCast;    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_FootTargetAlpha_ImplicitCast;   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha) == 0x000008, "Wrong alignment on ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha");
static_assert(sizeof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha) == 0x000050, "Wrong size on ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, TargetEnableFootTarget) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::TargetEnableFootTarget' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, TargetFootTargetAlpha) == 0x000008, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::TargetFootTargetAlpha' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, Temp_real_Variable) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, Temp_real_Variable_1) == 0x000018, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000021, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, CallFunc_BooleanOR_ReturnValue) == 0x000023, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, Temp_bool_Variable) == 0x000024, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, K2Node_Select_Default) == 0x000028, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, CallFunc_IsNearFootstepSyncMark_bNearFootstepSyncMarker) == 0x000030, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::CallFunc_IsNearFootstepSyncMark_bNearFootstepSyncMarker' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, CallFunc_IsNearFootstepSyncMark_bBetweenFootstepSyncMarkers) == 0x000031, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::CallFunc_IsNearFootstepSyncMark_bBetweenFootstepSyncMarkers' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, CallFunc_GetDeltaSeconds_ReturnValue) == 0x000034, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::CallFunc_GetDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, CallFunc_FloatSpringInterp_ReturnValue) == 0x00003C, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::CallFunc_FloatSpringInterp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, CallFunc_FloatSpringInterp_Current_ImplicitCast) == 0x000040, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::CallFunc_FloatSpringInterp_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, CallFunc_FloatSpringInterp_Target_ImplicitCast) == 0x000044, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::CallFunc_FloatSpringInterp_Target_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha, K2Node_VariableSet_FootTargetAlpha_ImplicitCast) == 0x000048, "Member 'ABP_DaMiaoCharacter_C_UpdateFootTargetAlpha::K2Node_VariableSet_FootTargetAlpha_ImplicitCast' has a wrong offset!");

// Function ABP_DaMiaoCharacter.ABP_DaMiaoCharacter_C.UpdateInteractionPerformanceIK
// 0x0210 (0x0210 - 0x0000)
struct ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK final
{
public:
	class UBP_PlayerAnimStatesComponent_C*        InPlayerAnimStatesComponent;                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewEnableInteractionIK;                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValueWithDefault_OutValue;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCurveValueWithDefault_ReturnValue;     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_Map_Find_Value;                           // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_RotatorRotator_ReturnValue;    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122[0xE];                                      // 0x0122(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Map_Find_Value_1;                         // 0x0130(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast;         // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast;           // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_InteractionIKLogicAlpha_ImplicitCast; // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK) == 0x000010, "Wrong alignment on ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK");
static_assert(sizeof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK) == 0x000210, "Wrong size on ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, InPlayerAnimStatesComponent) == 0x000000, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::InPlayerAnimStatesComponent' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, bNewEnableInteractionIK) == 0x000008, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::bNewEnableInteractionIK' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_GetCurveValueWithDefault_OutValue) == 0x00000C, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_GetCurveValueWithDefault_OutValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_GetCurveValueWithDefault_ReturnValue) == 0x000010, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_GetCurveValueWithDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_Map_Find_Value) == 0x000020, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_Map_Find_ReturnValue) == 0x000080, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000081, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_TransformLocation_ReturnValue) == 0x000088, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_SelectFloat_ReturnValue) == 0x0000A0, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_BreakTransform_Location) == 0x0000A8, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_BreakTransform_Rotation) == 0x0000C0, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_BreakTransform_Scale) == 0x0000D8, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000F0, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_FInterpTo_ReturnValue) == 0x0000F8, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000100, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000108, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_EqualEqual_RotatorRotator_ReturnValue) == 0x000120, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_EqualEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_BooleanOR_ReturnValue) == 0x000121, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_Map_Find_Value_1) == 0x000130, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_Map_Find_ReturnValue_1) == 0x000190, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_BreakTransform_Location_1) == 0x000198, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_BreakTransform_Rotation_1) == 0x0001B0, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_BreakTransform_Scale_1) == 0x0001C8, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0001E0, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x0001E8, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_FInterpTo_DeltaTime_ImplicitCast) == 0x0001F0, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_FInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, CallFunc_FInterpTo_Current_ImplicitCast) == 0x0001F8, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::CallFunc_FInterpTo_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK, K2Node_VariableSet_InteractionIKLogicAlpha_ImplicitCast) == 0x000200, "Member 'ABP_DaMiaoCharacter_C_UpdateInteractionPerformanceIK::K2Node_VariableSet_InteractionIKLogicAlpha_ImplicitCast' has a wrong offset!");

}

