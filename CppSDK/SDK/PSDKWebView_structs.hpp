#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PSDKWebView

#include "Basic.hpp"

#include "PSDKBasic_structs.hpp"


namespace SDK
{

// ScriptStruct PSDKWebView.WebViewTicketData
// 0x0020 (0x00D8 - 0x00B8)
struct FWebViewTicketData final : public FJsonData
{
public:
	class FString                                 ID;                                                // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 link;                                              // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWebViewTicketData) == 0x000008, "Wrong alignment on FWebViewTicketData");
static_assert(sizeof(FWebViewTicketData) == 0x0000D8, "Wrong size on FWebViewTicketData");
static_assert(offsetof(FWebViewTicketData, ID) == 0x0000B8, "Member 'FWebViewTicketData::ID' has a wrong offset!");
static_assert(offsetof(FWebViewTicketData, link) == 0x0000C8, "Member 'FWebViewTicketData::link' has a wrong offset!");

// ScriptStruct PSDKWebView.WebViewTicketResponse
// 0x00F0 (0x01A8 - 0x00B8)
struct FWebViewTicketResponse final : public FJsonData
{
public:
	int32                                         Code;                                              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Info;                                              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWebViewTicketData                     Data;                                              // 0x00D0(0x00D8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FWebViewTicketResponse) == 0x000008, "Wrong alignment on FWebViewTicketResponse");
static_assert(sizeof(FWebViewTicketResponse) == 0x0001A8, "Wrong size on FWebViewTicketResponse");
static_assert(offsetof(FWebViewTicketResponse, Code) == 0x0000B8, "Member 'FWebViewTicketResponse::Code' has a wrong offset!");
static_assert(offsetof(FWebViewTicketResponse, Info) == 0x0000C0, "Member 'FWebViewTicketResponse::Info' has a wrong offset!");
static_assert(offsetof(FWebViewTicketResponse, Data) == 0x0000D0, "Member 'FWebViewTicketResponse::Data' has a wrong offset!");

// ScriptStruct PSDKWebView.PSWebViewModel
// 0x0058 (0x0058 - 0x0000)
struct FPSWebViewModel final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          openExternal;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 isLogin;                                           // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          urlEncode;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Extra;                                             // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SendCloseCallback;                                 // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFullScreen;                                      // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsModalView;                                       // 0x0042(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Width;                                             // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetX;                                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetY;                                           // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowNavigationBar;                                 // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LoadCompletedNeedSetFocus;                         // 0x0055(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SupportCreateNewWindow;                            // 0x0056(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewTypeCreateWindow;                               // 0x0057(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSWebViewModel) == 0x000008, "Wrong alignment on FPSWebViewModel");
static_assert(sizeof(FPSWebViewModel) == 0x000058, "Wrong size on FPSWebViewModel");
static_assert(offsetof(FPSWebViewModel, URL) == 0x000000, "Member 'FPSWebViewModel::URL' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, openExternal) == 0x000010, "Member 'FPSWebViewModel::openExternal' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, isLogin) == 0x000018, "Member 'FPSWebViewModel::isLogin' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, urlEncode) == 0x000028, "Member 'FPSWebViewModel::urlEncode' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, Extra) == 0x000030, "Member 'FPSWebViewModel::Extra' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, SendCloseCallback) == 0x000040, "Member 'FPSWebViewModel::SendCloseCallback' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, IsFullScreen) == 0x000041, "Member 'FPSWebViewModel::IsFullScreen' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, IsModalView) == 0x000042, "Member 'FPSWebViewModel::IsModalView' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, Width) == 0x000044, "Member 'FPSWebViewModel::Width' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, Height) == 0x000048, "Member 'FPSWebViewModel::Height' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, OffsetX) == 0x00004C, "Member 'FPSWebViewModel::OffsetX' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, OffsetY) == 0x000050, "Member 'FPSWebViewModel::OffsetY' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, ShowNavigationBar) == 0x000054, "Member 'FPSWebViewModel::ShowNavigationBar' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, LoadCompletedNeedSetFocus) == 0x000055, "Member 'FPSWebViewModel::LoadCompletedNeedSetFocus' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, SupportCreateNewWindow) == 0x000056, "Member 'FPSWebViewModel::SupportCreateNewWindow' has a wrong offset!");
static_assert(offsetof(FPSWebViewModel, NewTypeCreateWindow) == 0x000057, "Member 'FPSWebViewModel::NewTypeCreateWindow' has a wrong offset!");

}

