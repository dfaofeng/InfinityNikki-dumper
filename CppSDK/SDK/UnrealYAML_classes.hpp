#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnrealYAML

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "UnrealYAML_structs.hpp"


namespace SDK
{

// Class UnrealYAML.YamlNodeHelpers
// 0x0000 (0x0028 - 0x0028)
class UYamlNodeHelpers final : public UBlueprintFunctionLibrary
{
public:
	static bool AsBool(const struct FYamlNode& Node, bool Default, bool* Value);
	static bool AsBoolArray(const struct FYamlNode& Node, const TArray<bool>& Default, TArray<bool>* Value);
	static bool AsByte(const struct FYamlNode& Node, uint8 Default, uint8* Value);
	static bool AsByteArray(const struct FYamlNode& Node, const TArray<uint8>& Default, TArray<uint8>* Value);
	static bool AsFloat(const struct FYamlNode& Node, float Default, float* Value);
	static bool AsFloatArray(const struct FYamlNode& Node, const TArray<float>& Default, TArray<float>* Value);
	static bool AsInt(const struct FYamlNode& Node, int32 Default, int32* Value);
	static bool AsIntArray(const struct FYamlNode& Node, const TArray<int32>& Default, TArray<int32>* Value);
	static bool AsIntBoolMap(const struct FYamlNode& Node, const TMap<int32, bool>& Default, TMap<int32, bool>* Value);
	static bool AsIntByteMap(const struct FYamlNode& Node, const TMap<int32, uint8>& Default, TMap<int32, uint8>* Value);
	static bool AsIntFloatMap(const struct FYamlNode& Node, const TMap<int32, float>& Default, TMap<int32, float>* Value);
	static bool AsIntIntMap(const struct FYamlNode& Node, const TMap<int32, int32>& Default, TMap<int32, int32>* Value);
	static bool AsIntLongMap(const struct FYamlNode& Node, const TMap<int32, int64>& Default, TMap<int32, int64>* Value);
	static bool AsIntQuatMap(const struct FYamlNode& Node, const TMap<int32, struct FQuat>& Default, TMap<int32, struct FQuat>* Value);
	static bool AsIntStringMap(const struct FYamlNode& Node, const TMap<int32, class FString>& Default, TMap<int32, class FString>* Value);
	static bool AsIntTextMap(const struct FYamlNode& Node, const TMap<int32, class FText>& Default, TMap<int32, class FText>* Value);
	static bool AsIntTransformMap(const struct FYamlNode& Node, const TMap<int32, struct FTransform>& Default, TMap<int32, struct FTransform>* Value);
	static bool AsIntVectorMap(const struct FYamlNode& Node, const TMap<int32, struct FVector>& Default, TMap<int32, struct FVector>* Value);
	static bool AsLong(const struct FYamlNode& Node, int64 Default, int64* Value);
	static bool AsLongArray(const struct FYamlNode& Node, const TArray<int64>& Default, TArray<int64>* Value);
	static bool AsQuat(const struct FYamlNode& Node, const struct FQuat& Default, struct FQuat* Value);
	static bool AsQuatArray(const struct FYamlNode& Node, const TArray<struct FQuat>& Default, TArray<struct FQuat>* Value);
	static bool AsString(const struct FYamlNode& Node, const class FString& Default, class FString* Value);
	static bool AsStringArray(const struct FYamlNode& Node, const TArray<class FString>& Default, TArray<class FString>* Value);
	static bool AsStringBoolMap(const struct FYamlNode& Node, const TMap<class FString, bool>& Default, TMap<class FString, bool>* Value);
	static bool AsStringByteMap(const struct FYamlNode& Node, const TMap<class FString, uint8>& Default, TMap<class FString, uint8>* Value);
	static bool AsStringFloatMap(const struct FYamlNode& Node, const TMap<class FString, float>& Default, TMap<class FString, float>* Value);
	static bool AsStringIntMap(const struct FYamlNode& Node, const TMap<class FString, int32>& Default, TMap<class FString, int32>* Value);
	static bool AsStringLongMap(const struct FYamlNode& Node, const TMap<class FString, int64>& Default, TMap<class FString, int64>* Value);
	static bool AsStringQuatMap(const struct FYamlNode& Node, const TMap<class FString, struct FQuat>& Default, TMap<class FString, struct FQuat>* Value);
	static bool AsStringStringMap(const struct FYamlNode& Node, const TMap<class FString, class FString>& Default, TMap<class FString, class FString>* Value);
	static bool AsStringTextMap(const struct FYamlNode& Node, const TMap<class FString, class FText>& Default, TMap<class FString, class FText>* Value);
	static bool AsStringTransformMap(const struct FYamlNode& Node, const TMap<class FString, struct FTransform>& Default, TMap<class FString, struct FTransform>* Value);
	static bool AsStringVectorMap(const struct FYamlNode& Node, const TMap<class FString, struct FVector>& Default, TMap<class FString, struct FVector>* Value);
	static bool AsText(const struct FYamlNode& Node, const class FText& Default, class FText* Value);
	static bool AsTextArray(const struct FYamlNode& Node, const TArray<class FText>& Default, TArray<class FText>* Value);
	static bool AsTransform(const struct FYamlNode& Node, const struct FTransform& Default, struct FTransform* Value);
	static bool AsTransformArray(const struct FYamlNode& Node, const TArray<struct FTransform>& Default, TArray<struct FTransform>* Value);
	static bool AsVector(const struct FYamlNode& Node, const struct FVector& Default, struct FVector* Value);
	static bool AsVectorArray(const struct FYamlNode& Node, const TArray<struct FVector>& Default, TArray<struct FVector>* Value);
	static bool Equal(const struct FYamlNode& Node, const struct FYamlNode& Other);
	static struct FYamlNode Get(const struct FYamlNode& Node, const class FString& Key);
	static class FString GetContent(const struct FYamlNode& Node);
	static struct FYamlNode GetIndex(const struct FYamlNode& Node, int32 Index_0);
	static bool IsDefined(const struct FYamlNode& Node);
	static bool IsMap(const struct FYamlNode& Node);
	static bool IsNull(const struct FYamlNode& Node);
	static bool IsScalar(const struct FYamlNode& Node);
	static bool IsSequence(const struct FYamlNode& Node);
	static struct FYamlNode MakeFromBool(bool Value);
	static struct FYamlNode MakeFromBoolArray(const TArray<bool>& Value);
	static struct FYamlNode MakeFromByte(uint8 Value);
	static struct FYamlNode MakeFromByteArray(const TArray<uint8>& Value);
	static struct FYamlNode MakeFromFloat(float Value);
	static struct FYamlNode MakeFromFloatArray(const TArray<float>& Value);
	static struct FYamlNode MakeFromInt(int32 Value);
	static struct FYamlNode MakeFromIntArray(const TArray<int32>& Value);
	static struct FYamlNode MakeFromIntBoolMap(const TMap<int32, bool>& Value);
	static struct FYamlNode MakeFromIntByteMap(const TMap<int32, uint8>& Value);
	static struct FYamlNode MakeFromIntFloatMap(const TMap<int32, float>& Value);
	static struct FYamlNode MakeFromIntIntMap(const TMap<int32, int32>& Value);
	static struct FYamlNode MakeFromIntLongMap(const TMap<int32, int64>& Value);
	static struct FYamlNode MakeFromIntQuatMap(const TMap<int32, struct FQuat>& Value);
	static struct FYamlNode MakeFromIntStringMap(const TMap<int32, class FString>& Value);
	static struct FYamlNode MakeFromIntTextMap(const TMap<int32, class FText>& Value);
	static struct FYamlNode MakeFromIntTransformMap(const TMap<int32, struct FTransform>& Value);
	static struct FYamlNode MakeFromIntVectorMap(const TMap<int32, struct FVector>& Value);
	static struct FYamlNode MakeFromLong(int64 Value);
	static struct FYamlNode MakeFromLongArray(const TArray<int64>& Value);
	static struct FYamlNode MakeFromQuat(const struct FQuat& Value);
	static struct FYamlNode MakeFromQuatArray(const TArray<struct FQuat>& Value);
	static struct FYamlNode MakeFromString(const class FString& Value);
	static struct FYamlNode MakeFromStringArray(const TArray<class FString>& Value);
	static struct FYamlNode MakeFromStringBoolMap(const TMap<class FString, bool>& Value);
	static struct FYamlNode MakeFromStringByteMap(const TMap<class FString, uint8>& Value);
	static struct FYamlNode MakeFromStringFloatMap(const TMap<class FString, float>& Value);
	static struct FYamlNode MakeFromStringIntMap(const TMap<class FString, int32>& Value);
	static struct FYamlNode MakeFromStringLongMap(const TMap<class FString, int64>& Value);
	static struct FYamlNode MakeFromStringQuatMap(const TMap<class FString, struct FQuat>& Value);
	static struct FYamlNode MakeFromStringStringMap(const TMap<class FString, class FString>& Value);
	static struct FYamlNode MakeFromStringTextMap(const TMap<class FString, class FText>& Value);
	static struct FYamlNode MakeFromStringTransformMap(const TMap<class FString, struct FTransform>& Value);
	static struct FYamlNode MakeFromStringVectorMap(const TMap<class FString, struct FVector>& Value);
	static struct FYamlNode MakeFromText(const class FText& Value);
	static struct FYamlNode MakeFromTextArray(const TArray<class FText>& Value);
	static struct FYamlNode MakeFromTransform(const struct FTransform& Value);
	static struct FYamlNode MakeFromTransformArray(const TArray<struct FTransform>& Value);
	static struct FYamlNode MakeFromVector(const struct FVector& Value);
	static struct FYamlNode MakeFromVectorArray(const TArray<struct FVector>& Value);
	static struct FYamlNode MakeYamlNode();
	static bool Push(struct FYamlNode& Node, const struct FYamlNode& Element, struct FYamlNode* Out);
	static bool Reset(struct FYamlNode* Node);
	static bool Set(struct FYamlNode& Node, const class FString& Key, const struct FYamlNode& Value, struct FYamlNode* Out);
	static bool SetIndex(struct FYamlNode& Node, int32 Index_0, const struct FYamlNode& Value, struct FYamlNode* Out);
	static struct FYamlNode SetStyle(struct FYamlNode& Node, EYamlEmitterStyle Style_0);
	static int32 Size(const struct FYamlNode& Node);
	static EYamlEmitterStyle Style(const struct FYamlNode& Node);
	static EYamlNodeType Type(const struct FYamlNode& Node);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"YamlNodeHelpers">();
	}
	static class UYamlNodeHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UYamlNodeHelpers>();
	}
};
static_assert(alignof(UYamlNodeHelpers) == 0x000008, "Wrong alignment on UYamlNodeHelpers");
static_assert(sizeof(UYamlNodeHelpers) == 0x000028, "Wrong size on UYamlNodeHelpers");

// Class UnrealYAML.YamlParsing
// 0x0000 (0x0028 - 0x0028)
class UYamlParsing final : public UBlueprintFunctionLibrary
{
public:
	static bool LoadYamlFromFile(const class FString& Path, struct FYamlNode* Out);
	static bool ParseIntoStruct_BP(const struct FYamlNode& Node, const int32& Struct);
	static bool ParseYaml(const class FString& String, struct FYamlNode* Out);
	static void WriteYamlToFile(const class FString& Path, const struct FYamlNode& Node);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"YamlParsing">();
	}
	static class UYamlParsing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UYamlParsing>();
	}
};
static_assert(alignof(UYamlParsing) == 0x000008, "Wrong alignment on UYamlParsing");
static_assert(sizeof(UYamlParsing) == 0x000028, "Wrong size on UYamlParsing");

}

