#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANS_HitFrame

#include "Basic.hpp"

#include "X6Game_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ANS_HitFrame.ANS_HitFrame_C
// 0x0058 (0x0098 - 0x0040)
class UANS_HitFrame_C final : public UAnimNotifyState_SkillHitFrame
{
public:
	class UBP_DamageDataAsset_C*                  BP_Damage;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTargetingPreset*                       BP_TargetingPreset;                                // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_BuffConfig_C*>               BP_BuffDAList;                                     // 0x0050(0x0010)(Edit, BlueprintVisible)
	bool                                          BP_UseLineDirection;                               // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_CheckCollision;                                 // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BP_CheckSocket;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 BP_GroupName;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	double                                        BP_HitInterval;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BP_HitCount;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	class FString GetModuleName() const;
	class FString GetNotifyName() const;
	bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime, const struct FAnimNotifyEventReference& EventReference) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANS_HitFrame_C">();
	}
	static class UANS_HitFrame_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANS_HitFrame_C>();
	}
};
static_assert(alignof(UANS_HitFrame_C) == 0x000008, "Wrong alignment on UANS_HitFrame_C");
static_assert(sizeof(UANS_HitFrame_C) == 0x000098, "Wrong size on UANS_HitFrame_C");
static_assert(offsetof(UANS_HitFrame_C, BP_Damage) == 0x000040, "Member 'UANS_HitFrame_C::BP_Damage' has a wrong offset!");
static_assert(offsetof(UANS_HitFrame_C, BP_TargetingPreset) == 0x000048, "Member 'UANS_HitFrame_C::BP_TargetingPreset' has a wrong offset!");
static_assert(offsetof(UANS_HitFrame_C, BP_BuffDAList) == 0x000050, "Member 'UANS_HitFrame_C::BP_BuffDAList' has a wrong offset!");
static_assert(offsetof(UANS_HitFrame_C, BP_UseLineDirection) == 0x000060, "Member 'UANS_HitFrame_C::BP_UseLineDirection' has a wrong offset!");
static_assert(offsetof(UANS_HitFrame_C, BP_CheckCollision) == 0x000061, "Member 'UANS_HitFrame_C::BP_CheckCollision' has a wrong offset!");
static_assert(offsetof(UANS_HitFrame_C, BP_CheckSocket) == 0x000068, "Member 'UANS_HitFrame_C::BP_CheckSocket' has a wrong offset!");
static_assert(offsetof(UANS_HitFrame_C, BP_GroupName) == 0x000078, "Member 'UANS_HitFrame_C::BP_GroupName' has a wrong offset!");
static_assert(offsetof(UANS_HitFrame_C, BP_HitInterval) == 0x000088, "Member 'UANS_HitFrame_C::BP_HitInterval' has a wrong offset!");
static_assert(offsetof(UANS_HitFrame_C, BP_HitCount) == 0x000090, "Member 'UANS_HitFrame_C::BP_HitCount' has a wrong offset!");

}

