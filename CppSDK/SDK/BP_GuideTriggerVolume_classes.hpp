#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GuideTriggerVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GuideTriggerVolume.BP_GuideTriggerVolume_C
// 0x0020 (0x03D8 - 0x03B8)
class ABP_GuideTriggerVolume_C final : public AStaticMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         MeshType;                                          // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         VolumeID;                                          // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAutoDestroy;                                     // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ShowVolume(bool CanShow);
	void SetVolumeID(int64 VolumeID_0);
	void SetTransformInfo(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
	void SetMeshType(int32 MeshType_0);
	void SetAutoDestroy(bool IsAutoDestroy_0);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void OnOverlapEnd(class AActor* Actor);
	void OnOverlapBegin(class AActor* Actor);
	void GetVolumeID(int64* VolumeID_0);
	void GetAutoDestroy(bool* IsAutoDestroy_0);
	void ExecuteUbergraph_BP_GuideTriggerVolume(int32 EntryPoint);
	void EnableOverlap();
	void DisableOverlap();

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GuideTriggerVolume_C">();
	}
	static class ABP_GuideTriggerVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GuideTriggerVolume_C>();
	}
};
static_assert(alignof(ABP_GuideTriggerVolume_C) == 0x000008, "Wrong alignment on ABP_GuideTriggerVolume_C");
static_assert(sizeof(ABP_GuideTriggerVolume_C) == 0x0003D8, "Wrong size on ABP_GuideTriggerVolume_C");
static_assert(offsetof(ABP_GuideTriggerVolume_C, UberGraphFrame) == 0x0003B8, "Member 'ABP_GuideTriggerVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GuideTriggerVolume_C, MeshType) == 0x0003C0, "Member 'ABP_GuideTriggerVolume_C::MeshType' has a wrong offset!");
static_assert(offsetof(ABP_GuideTriggerVolume_C, VolumeID) == 0x0003C8, "Member 'ABP_GuideTriggerVolume_C::VolumeID' has a wrong offset!");
static_assert(offsetof(ABP_GuideTriggerVolume_C, IsAutoDestroy) == 0x0003D0, "Member 'ABP_GuideTriggerVolume_C::IsAutoDestroy' has a wrong offset!");

}

