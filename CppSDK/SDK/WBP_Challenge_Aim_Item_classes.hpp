#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Challenge_Aim_Item

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Challenge_Aim_Item.WBP_Challenge_Aim_Item_C
// 0x0048 (0x0338 - 0x02F0)
class UWBP_Challenge_Aim_Item_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Ani_Finished;                                      // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Ani_Refresh;                                       // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             DES;                                               // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Done;                                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FX_01;                                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FX_02;                                             // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Normal;                                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcherDone;                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_Challenge_Aim_Item(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Challenge_Aim_Item_C">();
	}
	static class UWBP_Challenge_Aim_Item_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Challenge_Aim_Item_C>();
	}
};
static_assert(alignof(UWBP_Challenge_Aim_Item_C) == 0x000008, "Wrong alignment on UWBP_Challenge_Aim_Item_C");
static_assert(sizeof(UWBP_Challenge_Aim_Item_C) == 0x000338, "Wrong size on UWBP_Challenge_Aim_Item_C");
static_assert(offsetof(UWBP_Challenge_Aim_Item_C, UberGraphFrame) == 0x0002F0, "Member 'UWBP_Challenge_Aim_Item_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Challenge_Aim_Item_C, Ani_Finished) == 0x0002F8, "Member 'UWBP_Challenge_Aim_Item_C::Ani_Finished' has a wrong offset!");
static_assert(offsetof(UWBP_Challenge_Aim_Item_C, Ani_Refresh) == 0x000300, "Member 'UWBP_Challenge_Aim_Item_C::Ani_Refresh' has a wrong offset!");
static_assert(offsetof(UWBP_Challenge_Aim_Item_C, DES) == 0x000308, "Member 'UWBP_Challenge_Aim_Item_C::DES' has a wrong offset!");
static_assert(offsetof(UWBP_Challenge_Aim_Item_C, Done) == 0x000310, "Member 'UWBP_Challenge_Aim_Item_C::Done' has a wrong offset!");
static_assert(offsetof(UWBP_Challenge_Aim_Item_C, FX_01) == 0x000318, "Member 'UWBP_Challenge_Aim_Item_C::FX_01' has a wrong offset!");
static_assert(offsetof(UWBP_Challenge_Aim_Item_C, FX_02) == 0x000320, "Member 'UWBP_Challenge_Aim_Item_C::FX_02' has a wrong offset!");
static_assert(offsetof(UWBP_Challenge_Aim_Item_C, Normal) == 0x000328, "Member 'UWBP_Challenge_Aim_Item_C::Normal' has a wrong offset!");
static_assert(offsetof(UWBP_Challenge_Aim_Item_C, WidgetSwitcherDone) == 0x000330, "Member 'UWBP_Challenge_Aim_Item_C::WidgetSwitcherDone' has a wrong offset!");

}

