#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StarSeaCrystal

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "X6Game_classes.hpp"
#include "E_InteractionProcess_structs.hpp"
#include "E_EInteractSuccRet_structs.hpp"
#include "X6StateMachine_structs.hpp"
#include "E_InteractiveObjPhantomState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_StarSeaCrystal.BP_StarSeaCrystal_C
// 0x0268 (0x06A0 - 0x0438)
class ABP_StarSeaCrystal_C final : public AX6Actor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0438(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_HandleInteractionLogic_C*           BP_HandleInteractionLogic;                         // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara_Interact1;                                 // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara_Collect1;                                  // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Crystal1;                                          // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Shell1;                                            // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStarSeaObject_StateMachine_C*          StarSeaObject_StateMachine;                        // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara_Interact;                                  // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractivePhantomComponent_C*      BP_InteractivePhantomComponent;                    // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara_Collect;                                   // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Shell;                                             // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Range;                                             // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractiveActorComponent_C*        BP_InteractiveActorComponent;                      // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       InteractiveCollision;                              // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Crystal;                                           // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Breath_ShellEmissive_80422BE54C9046565A010AB6B289A9F7; // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Breath_MatLight_80422BE54C9046565A010AB6B289A9F7;  // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Breath__Direction_80422BE54C9046565A010AB6B289A9F7; // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Breath;                                            // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        ShortRingTime;                                     // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LongRingTime;                                      // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlyUp;                                            // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E1[0x7];                                      // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FlyUpStartLoc;                                     // 0x04E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CurveTransform;                                    // 0x0500(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentFlySpeed;                                   // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_FlyStartSpeed;                                  // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerDistanceVec;                                 // 0x0570(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_FlyAccelerateSpeed;                             // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaDistance;                                     // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ForceSuccessTimerHandle;                           // 0x0598(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ForceInteractDistanceSquared;                   // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_ForceSuccessTime;                               // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaSeconds;                                      // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlyUpTime;                                         // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_FlyDelayTime;                                   // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           FlyUpCurve;                                        // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           EmpowerTimerHandle;                                // 0x05D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           LongRingTimerHandle;                               // 0x05D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ShortRingTimerHandle;                              // 0x05E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SphereRadius;                                      // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInShortRing;                                      // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInLongRing;                                       // 0x05F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInEmpower;                                        // 0x05F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F3[0x5];                                      // 0x05F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_StarSeaCameraModifier_C*            CameraModifier;                                    // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bSharePerform;                                     // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HandHoldingActor;                                  // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bSingleCollectFinished;                            // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCoupleCollectFinished;                            // 0x0619(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61A[0x6];                                      // 0x061A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BreathCrystalDynamicMat;                           // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultBreathValue;                                // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BreathShelllDynamicMat;                            // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultEmissiveValue;                              // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EmpowerRingTime;                                   // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMoving;                                           // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceSuccess;                                     // 0x0649(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64A[0x6];                                      // 0x064A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkAudioEvent>           BreathSoundEvent;                                  // 0x0650(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        BreathSoundTime;                                   // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ID;                                                // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_684[0x4];                                      // 0x0684(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_StarSeaDustCombine_C*               StarSeaCombine;                                    // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CrystalNS;                                         // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_StarSeaCrystal_Niagara_Interact1_K2Node_ComponentBoundEvent_4_OnNiagaraSystemFinished__DelegateSignature(class UNiagaraComponent* PSystem);
	void BndEvt__BP_StarSeaCrystal_Niagara_Interact_K2Node_ComponentBoundEvent_2_OnNiagaraSystemFinished__DelegateSignature(class UNiagaraComponent* PSystem);
	void BndEvt__BP_StarSeaCrystal_Range_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_WishDewDrop_BP_InteractiveActorComponent_K2Node_ComponentBoundEvent_1_ActiveInteractive__DelegateSignature(E_InteractionProcess Process, int64 InteractMasterNetID, class AActor* InteractMasterActor, bool IsPressBtnInteraction, class AActor* InteractedActor, class UBP_InterAction_State_C* InterAction_State);
	void BP_ChangeVirtual(bool bVirtual);
	void BP_CheckVirtual(bool* bVirtual);
	void BP_Deinit();
	void BP_DisableBreath();
	void BP_DisableEmpower();
	void BP_DisableLongRing();
	void BP_DisablePenetrateEffect();
	void BP_DisableShortRing();
	void BP_EnableBreath();
	void BP_EnablePenetrateEffect();
	void BP_ForceInteractSuccess();
	void BP_Init();
	void BP_IsArriveAtPlayer(bool* isArrive);
	void BP_IsEnergized(class AActor* Actor, bool* bIsEnergized);
	void BP_NotifySpawned();
	void BP_OnEmpower();
	void BP_OnLongRing();
	void BP_OnShortRing();
	void BP_StartBreathSoundEvent();
	void BP_StartFly();
	void BP_StopBreathSoundEvent();
	void BP_UpdateActorLocationOnCurve();
	void BP_UpdateCoupleLocation(double DeltaTime);
	void BP_UpdateLocation(double DeltaTime);
	void BP_UpdateRange();
	void Breath__FinishedFunc();
	void Breath__UpdateFunc();
	void ExecuteUbergraph_BP_StarSeaCrystal(int32 EntryPoint);
	void On_Multi_ActiveSuccess(class AActor* Other_player_actor, E_EInteractSuccRet Result);
	void On_Multi_InteractiveObjActive(const class FString& Data, class AActor* Player);
	void OnCollect();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds_0);
	void ServerInit(bool bServer);
	void StartBreath();
	void UserConstructionScript();

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StarSeaCrystal_C">();
	}
	static class ABP_StarSeaCrystal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_StarSeaCrystal_C>();
	}
};
static_assert(alignof(ABP_StarSeaCrystal_C) == 0x000010, "Wrong alignment on ABP_StarSeaCrystal_C");
static_assert(sizeof(ABP_StarSeaCrystal_C) == 0x0006A0, "Wrong size on ABP_StarSeaCrystal_C");
static_assert(offsetof(ABP_StarSeaCrystal_C, UberGraphFrame) == 0x000438, "Member 'ABP_StarSeaCrystal_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BP_HandleInteractionLogic) == 0x000440, "Member 'ABP_StarSeaCrystal_C::BP_HandleInteractionLogic' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Niagara_Interact1) == 0x000448, "Member 'ABP_StarSeaCrystal_C::Niagara_Interact1' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Niagara_Collect1) == 0x000450, "Member 'ABP_StarSeaCrystal_C::Niagara_Collect1' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Crystal1) == 0x000458, "Member 'ABP_StarSeaCrystal_C::Crystal1' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Shell1) == 0x000460, "Member 'ABP_StarSeaCrystal_C::Shell1' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, StarSeaObject_StateMachine) == 0x000468, "Member 'ABP_StarSeaCrystal_C::StarSeaObject_StateMachine' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Niagara_Interact) == 0x000470, "Member 'ABP_StarSeaCrystal_C::Niagara_Interact' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BP_InteractivePhantomComponent) == 0x000478, "Member 'ABP_StarSeaCrystal_C::BP_InteractivePhantomComponent' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Niagara_Collect) == 0x000480, "Member 'ABP_StarSeaCrystal_C::Niagara_Collect' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Niagara) == 0x000488, "Member 'ABP_StarSeaCrystal_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Shell) == 0x000490, "Member 'ABP_StarSeaCrystal_C::Shell' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Range) == 0x000498, "Member 'ABP_StarSeaCrystal_C::Range' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BP_InteractiveActorComponent) == 0x0004A0, "Member 'ABP_StarSeaCrystal_C::BP_InteractiveActorComponent' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, InteractiveCollision) == 0x0004A8, "Member 'ABP_StarSeaCrystal_C::InteractiveCollision' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Crystal) == 0x0004B0, "Member 'ABP_StarSeaCrystal_C::Crystal' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Breath_ShellEmissive_80422BE54C9046565A010AB6B289A9F7) == 0x0004B8, "Member 'ABP_StarSeaCrystal_C::Breath_ShellEmissive_80422BE54C9046565A010AB6B289A9F7' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Breath_MatLight_80422BE54C9046565A010AB6B289A9F7) == 0x0004BC, "Member 'ABP_StarSeaCrystal_C::Breath_MatLight_80422BE54C9046565A010AB6B289A9F7' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Breath__Direction_80422BE54C9046565A010AB6B289A9F7) == 0x0004C0, "Member 'ABP_StarSeaCrystal_C::Breath__Direction_80422BE54C9046565A010AB6B289A9F7' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, Breath) == 0x0004C8, "Member 'ABP_StarSeaCrystal_C::Breath' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, ShortRingTime) == 0x0004D0, "Member 'ABP_StarSeaCrystal_C::ShortRingTime' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, LongRingTime) == 0x0004D8, "Member 'ABP_StarSeaCrystal_C::LongRingTime' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, bFlyUp) == 0x0004E0, "Member 'ABP_StarSeaCrystal_C::bFlyUp' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, FlyUpStartLoc) == 0x0004E8, "Member 'ABP_StarSeaCrystal_C::FlyUpStartLoc' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, CurveTransform) == 0x000500, "Member 'ABP_StarSeaCrystal_C::CurveTransform' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, CurrentFlySpeed) == 0x000560, "Member 'ABP_StarSeaCrystal_C::CurrentFlySpeed' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BP_FlyStartSpeed) == 0x000568, "Member 'ABP_StarSeaCrystal_C::BP_FlyStartSpeed' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, PlayerDistanceVec) == 0x000570, "Member 'ABP_StarSeaCrystal_C::PlayerDistanceVec' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BP_FlyAccelerateSpeed) == 0x000588, "Member 'ABP_StarSeaCrystal_C::BP_FlyAccelerateSpeed' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, DeltaDistance) == 0x000590, "Member 'ABP_StarSeaCrystal_C::DeltaDistance' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, ForceSuccessTimerHandle) == 0x000598, "Member 'ABP_StarSeaCrystal_C::ForceSuccessTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BP_ForceInteractDistanceSquared) == 0x0005A0, "Member 'ABP_StarSeaCrystal_C::BP_ForceInteractDistanceSquared' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BP_ForceSuccessTime) == 0x0005A8, "Member 'ABP_StarSeaCrystal_C::BP_ForceSuccessTime' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, DeltaSeconds) == 0x0005B0, "Member 'ABP_StarSeaCrystal_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, FlyUpTime) == 0x0005B8, "Member 'ABP_StarSeaCrystal_C::FlyUpTime' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BP_FlyDelayTime) == 0x0005C0, "Member 'ABP_StarSeaCrystal_C::BP_FlyDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, FlyUpCurve) == 0x0005C8, "Member 'ABP_StarSeaCrystal_C::FlyUpCurve' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, EmpowerTimerHandle) == 0x0005D0, "Member 'ABP_StarSeaCrystal_C::EmpowerTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, LongRingTimerHandle) == 0x0005D8, "Member 'ABP_StarSeaCrystal_C::LongRingTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, ShortRingTimerHandle) == 0x0005E0, "Member 'ABP_StarSeaCrystal_C::ShortRingTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, SphereRadius) == 0x0005E8, "Member 'ABP_StarSeaCrystal_C::SphereRadius' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, bInShortRing) == 0x0005F0, "Member 'ABP_StarSeaCrystal_C::bInShortRing' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, bInLongRing) == 0x0005F1, "Member 'ABP_StarSeaCrystal_C::bInLongRing' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, bInEmpower) == 0x0005F2, "Member 'ABP_StarSeaCrystal_C::bInEmpower' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, DynamicMaterial) == 0x0005F8, "Member 'ABP_StarSeaCrystal_C::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, CameraModifier) == 0x000600, "Member 'ABP_StarSeaCrystal_C::CameraModifier' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, bSharePerform) == 0x000608, "Member 'ABP_StarSeaCrystal_C::bSharePerform' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, HandHoldingActor) == 0x000610, "Member 'ABP_StarSeaCrystal_C::HandHoldingActor' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, bSingleCollectFinished) == 0x000618, "Member 'ABP_StarSeaCrystal_C::bSingleCollectFinished' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, bCoupleCollectFinished) == 0x000619, "Member 'ABP_StarSeaCrystal_C::bCoupleCollectFinished' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BreathCrystalDynamicMat) == 0x000620, "Member 'ABP_StarSeaCrystal_C::BreathCrystalDynamicMat' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, DefaultBreathValue) == 0x000628, "Member 'ABP_StarSeaCrystal_C::DefaultBreathValue' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BreathShelllDynamicMat) == 0x000630, "Member 'ABP_StarSeaCrystal_C::BreathShelllDynamicMat' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, DefaultEmissiveValue) == 0x000638, "Member 'ABP_StarSeaCrystal_C::DefaultEmissiveValue' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, EmpowerRingTime) == 0x000640, "Member 'ABP_StarSeaCrystal_C::EmpowerRingTime' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, bMoving) == 0x000648, "Member 'ABP_StarSeaCrystal_C::bMoving' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, bForceSuccess) == 0x000649, "Member 'ABP_StarSeaCrystal_C::bForceSuccess' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BreathSoundEvent) == 0x000650, "Member 'ABP_StarSeaCrystal_C::BreathSoundEvent' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, BreathSoundTime) == 0x000678, "Member 'ABP_StarSeaCrystal_C::BreathSoundTime' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, ID) == 0x000680, "Member 'ABP_StarSeaCrystal_C::ID' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, StarSeaCombine) == 0x000688, "Member 'ABP_StarSeaCrystal_C::StarSeaCombine' has a wrong offset!");
static_assert(offsetof(ABP_StarSeaCrystal_C, CrystalNS) == 0x000690, "Member 'ABP_StarSeaCrystal_C::CrystalNS' has a wrong offset!");

}

