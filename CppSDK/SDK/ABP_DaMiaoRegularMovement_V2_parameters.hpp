#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_DaMiaoRegularMovement_V2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EGroundedLocomotionScenarioType_structs.hpp"
#include "X6Game_structs.hpp"


namespace SDK::Params
{

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimGraph");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimGraph) == 0x000010, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimGraph");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_AimOffset
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_AimOffset final
{
public:
	struct FPoseLink                              InPoseForAimOffset;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_AimOffset_0;                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_AimOffset) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_AimOffset");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_AimOffset) == 0x000020, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_AimOffset");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_AimOffset, InPoseForAimOffset) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_AimOffset::InPoseForAimOffset' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_AimOffset, AnimLayer_AimOffset_0) == 0x000010, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_AimOffset::AnimLayer_AimOffset_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_BehaviorAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_BehaviorAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForPlayerBehavior;                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorAdditiveMode_0;                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_BehaviorAdditiveMode) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_BehaviorAdditiveMode");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_BehaviorAdditiveMode) == 0x000020, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_BehaviorAdditiveMode");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_BehaviorAdditiveMode, InPoseForPlayerBehavior) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_BehaviorAdditiveMode::InPoseForPlayerBehavior' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_BehaviorAdditiveMode, AnimLayer_BehaviorAdditiveMode_0) == 0x000010, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_BehaviorAdditiveMode::AnimLayer_BehaviorAdditiveMode_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_CombatMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_CombatMovement final
{
public:
	struct FPoseLink                              AnimLayer_CombatMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_CombatMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_CombatMovement");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_CombatMovement) == 0x000010, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_CombatMovement");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_CombatMovement, AnimLayer_CombatMovement_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_CombatMovement::AnimLayer_CombatMovement_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_EquipmentAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_EquipmentAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForEquipment;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_EquipmentAdditiveMode_0;                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_EquipmentAdditiveMode) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_EquipmentAdditiveMode");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_EquipmentAdditiveMode) == 0x000020, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_EquipmentAdditiveMode");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_EquipmentAdditiveMode, InPoseForEquipment) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_EquipmentAdditiveMode::InPoseForEquipment' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_EquipmentAdditiveMode, AnimLayer_EquipmentAdditiveMode_0) == 0x000010, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_EquipmentAdditiveMode::AnimLayer_EquipmentAdditiveMode_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_Jump
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Jump final
{
public:
	struct FPoseLink                              AnimLayer_Jump_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Jump) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Jump");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Jump) == 0x000010, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Jump");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Jump, AnimLayer_Jump_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Jump::AnimLayer_Jump_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_Land
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Land final
{
public:
	struct FPoseLink                              AnimLayer_Land_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Land) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Land");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Land) == 0x000010, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Land");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Land, AnimLayer_Land_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_Land::AnimLayer_Land_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_MovementDependObject
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_MovementDependObject final
{
public:
	struct FPoseLink                              AnimLayer_MovementDependObject_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_MovementDependObject) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_MovementDependObject");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_MovementDependObject) == 0x000010, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_MovementDependObject");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_MovementDependObject, AnimLayer_MovementDependObject_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_MovementDependObject::AnimLayer_MovementDependObject_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_NPCAdditiveBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCAdditiveBehavior final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCAdditiveBehavior_0;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCAdditiveBehavior) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCAdditiveBehavior");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCAdditiveBehavior) == 0x000020, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCAdditiveBehavior");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCAdditiveBehavior, InPose) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCAdditiveBehavior::InPose' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCAdditiveBehavior, AnimLayer_NPCAdditiveBehavior_0) == 0x000010, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCAdditiveBehavior::AnimLayer_NPCAdditiveBehavior_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_NPCBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCBehavior final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCBehavior_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCBehavior) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCBehavior");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCBehavior) == 0x000020, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCBehavior");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCBehavior, InPose_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCBehavior::InPose_0' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCBehavior, AnimLayer_NPCBehavior_0) == 0x000010, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_NPCBehavior::AnimLayer_NPCBehavior_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_PlayerControllingTool
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerControllingTool final
{
public:
	struct FPoseLink                              AnimLayer_PlayerControllingTool_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerControllingTool) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerControllingTool");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerControllingTool) == 0x000010, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerControllingTool");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerControllingTool, AnimLayer_PlayerControllingTool_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerControllingTool::AnimLayer_PlayerControllingTool_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_PlayerRegularMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerRegularMovement final
{
public:
	struct FPoseLink                              AnimLayer_PlayerRegularMovement_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerRegularMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerRegularMovement");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerRegularMovement) == 0x000010, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerRegularMovement");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerRegularMovement, AnimLayer_PlayerRegularMovement_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_PlayerRegularMovement::AnimLayer_PlayerRegularMovement_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_SpecialSurfaceMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_SpecialSurfaceMovement final
{
public:
	struct FPoseLink                              AnimLayer_SpecialSurfaceMovement_0;                // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_SpecialSurfaceMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_SpecialSurfaceMovement");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_SpecialSurfaceMovement) == 0x000010, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_SpecialSurfaceMovement");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_SpecialSurfaceMovement, AnimLayer_SpecialSurfaceMovement_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_SpecialSurfaceMovement::AnimLayer_SpecialSurfaceMovement_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_StrafeMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_StrafeMovement final
{
public:
	struct FPoseLink                              AnimLayer_StrafeMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_StrafeMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_StrafeMovement");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_StrafeMovement) == 0x000010, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_StrafeMovement");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_StrafeMovement, AnimLayer_StrafeMovement_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_StrafeMovement::AnimLayer_StrafeMovement_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_UsingCarrierMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_UsingCarrierMovement final
{
public:
	struct FPoseLink                              AnimLayer_UsingCarrierMovement_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_UsingCarrierMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_UsingCarrierMovement");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_UsingCarrierMovement) == 0x000010, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_UsingCarrierMovement");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_UsingCarrierMovement, AnimLayer_UsingCarrierMovement_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_UsingCarrierMovement::AnimLayer_UsingCarrierMovement_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.AnimLayer_WhiteBoxMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_AnimLayer_WhiteBoxMovement final
{
public:
	struct FPoseLink                              AnimLayer_WhiteBoxMovement_0;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_WhiteBoxMovement) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_WhiteBoxMovement");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_WhiteBoxMovement) == 0x000010, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_AnimLayer_WhiteBoxMovement");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_AnimLayer_WhiteBoxMovement, AnimLayer_WhiteBoxMovement_0) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_AnimLayer_WhiteBoxMovement::AnimLayer_WhiteBoxMovement_0' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.BlueprintPrepareDependencies
// 0x0098 (0x0098 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  NewLocalVar;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EGroundedLocomotionScenarioType NewGroundedLocomotionState, EGroundedLocomotionScenarioType OldGroundedLocomotionState)> K2Node_CreateDelegate_OutputDelegate; // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool IsInDash)>                K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_MainCharacterRegularMovementComp_C* K2Node_DynamicCast_AsBP_Main_Character_Regular_Movement_Comp; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerFeedBackPerformanceComponent_C* CallFunc_GetComponentByClass_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerInAirMoveableComponent_C*     CallFunc_GetComponentByClass_ReturnValue_1;        // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerRegularMovementCompV3_C*      CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERegularFloatingJumpStage NewStage, ERegularFloatingJumpStage OldStage)> K2Node_CreateDelegate_OutputDelegate_2; // 0x0070(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERegularLocomotionType NewGait, ERegularLocomotionType OldGait)> K2Node_CreateDelegate_OutputDelegate_3; // 0x0080(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies) == 0x000098, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, ReturnValue) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, NewLocalVar) == 0x000008, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::NewLocalVar' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, K2Node_DynamicCast_AsBP_Main_Character_Regular_Movement_Comp) == 0x000038, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::K2Node_DynamicCast_AsBP_Main_Character_Regular_Movement_Comp' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_GetComponentByClass_ReturnValue) == 0x000048, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_IsValid_ReturnValue_2) == 0x000050, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000058, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_IsValid_ReturnValue_3) == 0x000060, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_IsValid_ReturnValue_4) == 0x000061, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000068, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, K2Node_CreateDelegate_OutputDelegate_2) == 0x000070, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, K2Node_CreateDelegate_OutputDelegate_3) == 0x000080, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_IsValid_ReturnValue_5) == 0x000090, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_IsValid_ReturnValue_6) == 0x000091, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies, CallFunc_IsValid_ReturnValue_7) == 0x000092, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintPrepareDependencies::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.BlueprintUpdatePlayerStates
// 0x0008 (0x0008 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdatePlayerStates final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdatePlayerStates) == 0x000004, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdatePlayerStates");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdatePlayerStates) == 0x000008, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdatePlayerStates");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdatePlayerStates, DeltaSeconds) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdatePlayerStates::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdatePlayerStates, Temp_bool_IsClosed_Variable) == 0x000004, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdatePlayerStates::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdatePlayerStates, Temp_bool_Has_Been_Initd_Variable) == 0x000005, "Member 'ABP_DaMiaoRegularMovement_V2_C_BlueprintUpdatePlayerStates::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2
// 0x000C (0x000C - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2) == 0x000004, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2) == 0x00000C, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2, EntryPoint) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2, K2Node_Event_DeltaTimeX) == 0x000004, "Member 'ABP_DaMiaoRegularMovement_V2_C_ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'ABP_DaMiaoRegularMovement_V2_C_ExecuteUbergraph_ABP_DaMiaoRegularMovement_V2::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.OnAllowGaitChanged
// 0x0002 (0x0002 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_OnAllowGaitChanged final
{
public:
	ERegularLocomotionType                        NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularLocomotionType                        OldGait;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_OnAllowGaitChanged) == 0x000001, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_OnAllowGaitChanged");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_OnAllowGaitChanged) == 0x000002, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_OnAllowGaitChanged");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_OnAllowGaitChanged, NewGait) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_OnAllowGaitChanged::NewGait' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_OnAllowGaitChanged, OldGait) == 0x000001, "Member 'ABP_DaMiaoRegularMovement_V2_C_OnAllowGaitChanged::OldGait' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.OnCharacterDashStateChanged
// 0x0001 (0x0001 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_OnCharacterDashStateChanged final
{
public:
	bool                                          IsInDash;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_OnCharacterDashStateChanged) == 0x000001, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_OnCharacterDashStateChanged");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_OnCharacterDashStateChanged) == 0x000001, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_OnCharacterDashStateChanged");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_OnCharacterDashStateChanged, IsInDash) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_OnCharacterDashStateChanged::IsInDash' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.OnFloatingJumpStageChanged
// 0x0002 (0x0002 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_OnFloatingJumpStageChanged final
{
public:
	ERegularFloatingJumpStage                     NewStage;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     OldStage;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_OnFloatingJumpStageChanged) == 0x000001, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_OnFloatingJumpStageChanged");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_OnFloatingJumpStageChanged) == 0x000002, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_OnFloatingJumpStageChanged");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_OnFloatingJumpStageChanged, NewStage) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_OnFloatingJumpStageChanged::NewStage' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_OnFloatingJumpStageChanged, OldStage) == 0x000001, "Member 'ABP_DaMiaoRegularMovement_V2_C_OnFloatingJumpStageChanged::OldStage' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.OnGroundedLocomotionStateChanged
// 0x0002 (0x0002 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_OnGroundedLocomotionStateChanged final
{
public:
	EGroundedLocomotionScenarioType               NewGroundedLocomotionState;                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGroundedLocomotionScenarioType               OldGroundedLocomotionState;                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_OnGroundedLocomotionStateChanged) == 0x000001, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_OnGroundedLocomotionStateChanged");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_OnGroundedLocomotionStateChanged) == 0x000002, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_OnGroundedLocomotionStateChanged");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_OnGroundedLocomotionStateChanged, NewGroundedLocomotionState) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_OnGroundedLocomotionStateChanged::NewGroundedLocomotionState' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_OnGroundedLocomotionStateChanged, OldGroundedLocomotionState) == 0x000001, "Member 'ABP_DaMiaoRegularMovement_V2_C_OnGroundedLocomotionStateChanged::OldGroundedLocomotionState' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.OnIdleBreakStateBecomeRelevant
// 0x0020 (0x0020 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_OnIdleBreakStateBecomeRelevant final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_OnIdleBreakStateBecomeRelevant) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_OnIdleBreakStateBecomeRelevant");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_OnIdleBreakStateBecomeRelevant) == 0x000020, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_OnIdleBreakStateBecomeRelevant");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_OnIdleBreakStateBecomeRelevant, Context) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_OnIdleBreakStateBecomeRelevant::Context' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_OnIdleBreakStateBecomeRelevant, Node) == 0x000010, "Member 'ABP_DaMiaoRegularMovement_V2_C_OnIdleBreakStateBecomeRelevant::Node' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.SwitchGroundedLocomotionState
// 0x0110 (0x0110 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState final
{
public:
	EGroundedLocomotionScenarioType               InGroundedLocomotionState;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDaMiaoGroundedLocomotionAnimSet       CallFunc_Map_Find_Value;                           // 0x0008(0x0100)(NoDestructor)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState) == 0x000110, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState, InGroundedLocomotionState) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState::InGroundedLocomotionState' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState, CallFunc_Map_Find_Value) == 0x000008, "Member 'ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState, CallFunc_Map_Find_ReturnValue) == 0x000108, "Member 'ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000109, "Member 'ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00010A, "Member 'ABP_DaMiaoRegularMovement_V2_C_SwitchGroundedLocomotionState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.UpdateFloatingJumpStage
// 0x0003 (0x0003 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_UpdateFloatingJumpStage final
{
public:
	ERegularFloatingJumpStage                     InFloatingJumpStage;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_UpdateFloatingJumpStage) == 0x000001, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_UpdateFloatingJumpStage");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_UpdateFloatingJumpStage) == 0x000003, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_UpdateFloatingJumpStage");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateFloatingJumpStage, InFloatingJumpStage) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateFloatingJumpStage::InFloatingJumpStage' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateFloatingJumpStage, CallFunc_MakeLiteralByte_ReturnValue) == 0x000001, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateFloatingJumpStage::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateFloatingJumpStage, CallFunc_GetValidValue_ReturnValue) == 0x000002, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateFloatingJumpStage::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.UpdateGait
// 0x0003 (0x0003 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_UpdateGait final
{
public:
	ERegularLocomotionType                        AllowGait;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_UpdateGait) == 0x000001, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_UpdateGait");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_UpdateGait) == 0x000003, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_UpdateGait");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateGait, AllowGait) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateGait::AllowGait' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateGait, CallFunc_MakeLiteralByte_ReturnValue) == 0x000001, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateGait::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateGait, CallFunc_GetValidValue_ReturnValue) == 0x000002, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateGait::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function ABP_DaMiaoRegularMovement_V2.ABP_DaMiaoRegularMovement_V2_C.UpdateInAirValues
// 0x0050 (0x0050 - 0x0000)
struct ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues final
{
public:
	bool                                          bNewMantleJump;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Locomotion_FallState_C> K2Node_DynamicCast_AsBPI_Locomotion_Fall_State; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularFloatingJumpStage                     CallFunc_BPI_Get_CurrentInAirStates_FallStage;     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_Get_CurrentInAirStates_IsInSpecialJumpAnim; // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERegularJumpMode                              CallFunc_BPI_Get_CurrentInAirStates_RegularJumpMode; // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BPI_Get_CurrentInAirStates_IsJumpingInAir; // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BPI_Get_CurrentInAirValues_InCurrentHeight; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimaryDataAsset*                      CallFunc_BPI_Get_CurrentInAirValues_SpecialJumpDA; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerInAirMoveableComponent_C*     CallFunc_GetComponentByClass_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues) == 0x000008, "Wrong alignment on ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues");
static_assert(sizeof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues) == 0x000050, "Wrong size on ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, bNewMantleJump) == 0x000000, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::bNewMantleJump' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000002, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, K2Node_DynamicCast_AsBPI_Locomotion_Fall_State) == 0x000008, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::K2Node_DynamicCast_AsBPI_Locomotion_Fall_State' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_BPI_Get_CurrentInAirStates_FallStage) == 0x000019, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_BPI_Get_CurrentInAirStates_FallStage' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_BPI_Get_CurrentInAirStates_IsInSpecialJumpAnim) == 0x00001A, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_BPI_Get_CurrentInAirStates_IsInSpecialJumpAnim' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_BPI_Get_CurrentInAirStates_RegularJumpMode) == 0x00001B, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_BPI_Get_CurrentInAirStates_RegularJumpMode' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_BPI_Get_CurrentInAirStates_IsJumpingInAir) == 0x00001C, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_BPI_Get_CurrentInAirStates_IsJumpingInAir' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_BPI_Get_CurrentInAirValues_InCurrentHeight) == 0x000020, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_BPI_Get_CurrentInAirValues_InCurrentHeight' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_BPI_Get_CurrentInAirValues_SpecialJumpDA) == 0x000028, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_BPI_Get_CurrentInAirValues_SpecialJumpDA' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000038, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_GetComponentByClass_ReturnValue) == 0x000040, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_BooleanAND_ReturnValue) == 0x000048, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'ABP_DaMiaoRegularMovement_V2_C_UpdateInAirValues::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

