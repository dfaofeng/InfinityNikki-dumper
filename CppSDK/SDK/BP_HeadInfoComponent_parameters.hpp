#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HeadInfoComponent

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_HeadInfoComponent.BP_HeadInfoComponent_C.ExecuteUbergraph_BP_HeadInfoComponent
// 0x0004 (0x0004 - 0x0000)
struct BP_HeadInfoComponent_C_ExecuteUbergraph_BP_HeadInfoComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HeadInfoComponent_C_ExecuteUbergraph_BP_HeadInfoComponent) == 0x000004, "Wrong alignment on BP_HeadInfoComponent_C_ExecuteUbergraph_BP_HeadInfoComponent");
static_assert(sizeof(BP_HeadInfoComponent_C_ExecuteUbergraph_BP_HeadInfoComponent) == 0x000004, "Wrong size on BP_HeadInfoComponent_C_ExecuteUbergraph_BP_HeadInfoComponent");
static_assert(offsetof(BP_HeadInfoComponent_C_ExecuteUbergraph_BP_HeadInfoComponent, EntryPoint) == 0x000000, "Member 'BP_HeadInfoComponent_C_ExecuteUbergraph_BP_HeadInfoComponent::EntryPoint' has a wrong offset!");

// Function BP_HeadInfoComponent.BP_HeadInfoComponent_C.SetIconTexture
// 0x0008 (0x0008 - 0x0000)
struct BP_HeadInfoComponent_C_SetIconTexture final
{
public:
	class UTexture*                               IconTexture;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HeadInfoComponent_C_SetIconTexture) == 0x000008, "Wrong alignment on BP_HeadInfoComponent_C_SetIconTexture");
static_assert(sizeof(BP_HeadInfoComponent_C_SetIconTexture) == 0x000008, "Wrong size on BP_HeadInfoComponent_C_SetIconTexture");
static_assert(offsetof(BP_HeadInfoComponent_C_SetIconTexture, IconTexture) == 0x000000, "Member 'BP_HeadInfoComponent_C_SetIconTexture::IconTexture' has a wrong offset!");

// Function BP_HeadInfoComponent.BP_HeadInfoComponent_C.SetIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_HeadInfoComponent_C_SetIconVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HeadInfoComponent_C_SetIconVisibility) == 0x000001, "Wrong alignment on BP_HeadInfoComponent_C_SetIconVisibility");
static_assert(sizeof(BP_HeadInfoComponent_C_SetIconVisibility) == 0x000001, "Wrong size on BP_HeadInfoComponent_C_SetIconVisibility");
static_assert(offsetof(BP_HeadInfoComponent_C_SetIconVisibility, bShow) == 0x000000, "Member 'BP_HeadInfoComponent_C_SetIconVisibility::bShow' has a wrong offset!");

// Function BP_HeadInfoComponent.BP_HeadInfoComponent_C.SetInteractiveIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_HeadInfoComponent_C_SetInteractiveIconVisibility final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HeadInfoComponent_C_SetInteractiveIconVisibility) == 0x000001, "Wrong alignment on BP_HeadInfoComponent_C_SetInteractiveIconVisibility");
static_assert(sizeof(BP_HeadInfoComponent_C_SetInteractiveIconVisibility) == 0x000001, "Wrong size on BP_HeadInfoComponent_C_SetInteractiveIconVisibility");
static_assert(offsetof(BP_HeadInfoComponent_C_SetInteractiveIconVisibility, NewParam) == 0x000000, "Member 'BP_HeadInfoComponent_C_SetInteractiveIconVisibility::NewParam' has a wrong offset!");

// Function BP_HeadInfoComponent.BP_HeadInfoComponent_C.SetTextVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_HeadInfoComponent_C_SetTextVisibility final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HeadInfoComponent_C_SetTextVisibility) == 0x000001, "Wrong alignment on BP_HeadInfoComponent_C_SetTextVisibility");
static_assert(sizeof(BP_HeadInfoComponent_C_SetTextVisibility) == 0x000001, "Wrong size on BP_HeadInfoComponent_C_SetTextVisibility");
static_assert(offsetof(BP_HeadInfoComponent_C_SetTextVisibility, NewParam) == 0x000000, "Member 'BP_HeadInfoComponent_C_SetTextVisibility::NewParam' has a wrong offset!");

// Function BP_HeadInfoComponent.BP_HeadInfoComponent_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_HeadInfoComponent_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_HeadInfoComponent_C_GetModuleName) == 0x000008, "Wrong alignment on BP_HeadInfoComponent_C_GetModuleName");
static_assert(sizeof(BP_HeadInfoComponent_C_GetModuleName) == 0x000010, "Wrong size on BP_HeadInfoComponent_C_GetModuleName");
static_assert(offsetof(BP_HeadInfoComponent_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_HeadInfoComponent_C_GetModuleName::ReturnValue' has a wrong offset!");

}

