#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperEffects

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct PaperEffects.NeedDissolveItemInfo
// 0x0018 (0x0018 - 0x0000)
struct FNeedDissolveItemInfo final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitItem;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNeedDissolveItemInfo) == 0x000008, "Wrong alignment on FNeedDissolveItemInfo");
static_assert(sizeof(FNeedDissolveItemInfo) == 0x000018, "Wrong size on FNeedDissolveItemInfo");
static_assert(offsetof(FNeedDissolveItemInfo, HitActor) == 0x000000, "Member 'FNeedDissolveItemInfo::HitActor' has a wrong offset!");
static_assert(offsetof(FNeedDissolveItemInfo, HitComponent) == 0x000008, "Member 'FNeedDissolveItemInfo::HitComponent' has a wrong offset!");
static_assert(offsetof(FNeedDissolveItemInfo, HitItem) == 0x000010, "Member 'FNeedDissolveItemInfo::HitItem' has a wrong offset!");

// ScriptStruct PaperEffects.HitMaskInfo
// 0x0048 (0x0048 - 0x0000)
struct FHitMaskInfo final
{
public:
	int32                                         TotalHitCount;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitIndex;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 HitSkeletalMesh;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitBoneName;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DecalTexID;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitRadius;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitStrength;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitMaskInfo) == 0x000008, "Wrong alignment on FHitMaskInfo");
static_assert(sizeof(FHitMaskInfo) == 0x000048, "Wrong size on FHitMaskInfo");
static_assert(offsetof(FHitMaskInfo, TotalHitCount) == 0x000000, "Member 'FHitMaskInfo::TotalHitCount' has a wrong offset!");
static_assert(offsetof(FHitMaskInfo, HitIndex) == 0x000004, "Member 'FHitMaskInfo::HitIndex' has a wrong offset!");
static_assert(offsetof(FHitMaskInfo, HitActor) == 0x000008, "Member 'FHitMaskInfo::HitActor' has a wrong offset!");
static_assert(offsetof(FHitMaskInfo, HitSkeletalMesh) == 0x000010, "Member 'FHitMaskInfo::HitSkeletalMesh' has a wrong offset!");
static_assert(offsetof(FHitMaskInfo, HitLocation) == 0x000018, "Member 'FHitMaskInfo::HitLocation' has a wrong offset!");
static_assert(offsetof(FHitMaskInfo, HitBoneName) == 0x000030, "Member 'FHitMaskInfo::HitBoneName' has a wrong offset!");
static_assert(offsetof(FHitMaskInfo, DecalTexID) == 0x000038, "Member 'FHitMaskInfo::DecalTexID' has a wrong offset!");
static_assert(offsetof(FHitMaskInfo, HitRadius) == 0x00003C, "Member 'FHitMaskInfo::HitRadius' has a wrong offset!");
static_assert(offsetof(FHitMaskInfo, HitStrength) == 0x000040, "Member 'FHitMaskInfo::HitStrength' has a wrong offset!");

}

