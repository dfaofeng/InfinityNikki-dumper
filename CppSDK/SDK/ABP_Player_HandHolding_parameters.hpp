#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Player_HandHolding

#include "Basic.hpp"

#include "PBIK_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "F_HoldingHandBakedInfo_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK::Params
{

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.UpdateLeaderHandTarget
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_UpdateLeaderHandTarget final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidLinkPoint_Valid;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_UpdateLeaderHandTarget) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_UpdateLeaderHandTarget");
static_assert(sizeof(ABP_Player_HandHolding_C_UpdateLeaderHandTarget) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_UpdateLeaderHandTarget");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateLeaderHandTarget, DeltaTime) == 0x000000, "Member 'ABP_Player_HandHolding_C_UpdateLeaderHandTarget::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateLeaderHandTarget, CallFunc_IsValidLinkPoint_Valid) == 0x000008, "Member 'ABP_Player_HandHolding_C_UpdateLeaderHandTarget::CallFunc_IsValidLinkPoint_Valid' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateLeaderHandTarget, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'ABP_Player_HandHolding_C_UpdateLeaderHandTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.UpdateIkAndGestureAlphaByCurve
// 0x0038 (0x0038 - 0x0000)
struct ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve final
{
public:
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1;   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve");
static_assert(sizeof(ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve) == 0x000038, "Wrong size on ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve, CallFunc_GetCurveValue_ReturnValue) == 0x000000, "Member 'ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve, CallFunc_GetCurveValue_ReturnValue_1) == 0x000004, "Member 'ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000008, "Member 'ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000010, "Member 'ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve, CallFunc_FClamp_ReturnValue) == 0x000018, "Member 'ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve, CallFunc_FClamp_ReturnValue_1) == 0x000020, "Member 'ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000028, "Member 'ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve, CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1) == 0x000030, "Member 'ABP_Player_HandHolding_C_UpdateIkAndGestureAlphaByCurve::CallFunc_Subtract_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.UpdateHoldingHandsFloatMovingTurnAngle
// 0x0068 (0x0068 - 0x0000)
struct ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle final
{
public:
	struct FVector                                CallFunc_Vector_Normal2D_ReturnValue;              // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_ReturnValue;                  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle");
static_assert(sizeof(ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle) == 0x000068, "Wrong size on ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle, CallFunc_Vector_Normal2D_ReturnValue) == 0x000000, "Member 'ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle::CallFunc_Vector_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle, CallFunc_Dot_VectorVector_ReturnValue) == 0x000018, "Member 'ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle, CallFunc_DegAcos_ReturnValue) == 0x000020, "Member 'ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle, CallFunc_Cross_VectorVector_ReturnValue) == 0x000028, "Member 'ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle, CallFunc_BreakVector_X) == 0x000040, "Member 'ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle, CallFunc_BreakVector_Y) == 0x000048, "Member 'ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle, CallFunc_BreakVector_Z) == 0x000050, "Member 'ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle, CallFunc_SignOfFloat_ReturnValue) == 0x000058, "Member 'ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000060, "Member 'ABP_Player_HandHolding_C_UpdateHoldingHandsFloatMovingTurnAngle::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.UpdateHoldHandingSelfSocketTransform
// 0x00D0 (0x00D0 - 0x0000)
struct ABP_Player_HandHolding_C_UpdateHoldHandingSelfSocketTransform final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_UpdateHoldHandingSelfSocketTransform) == 0x000010, "Wrong alignment on ABP_Player_HandHolding_C_UpdateHoldHandingSelfSocketTransform");
static_assert(sizeof(ABP_Player_HandHolding_C_UpdateHoldHandingSelfSocketTransform) == 0x0000D0, "Wrong size on ABP_Player_HandHolding_C_UpdateHoldHandingSelfSocketTransform");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldHandingSelfSocketTransform, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'ABP_Player_HandHolding_C_UpdateHoldHandingSelfSocketTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldHandingSelfSocketTransform, CallFunc_GetSocketTransform_ReturnValue) == 0x000010, "Member 'ABP_Player_HandHolding_C_UpdateHoldHandingSelfSocketTransform::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHoldHandingSelfSocketTransform, CallFunc_GetSocketTransform_ReturnValue_1) == 0x000070, "Member 'ABP_Player_HandHolding_C_UpdateHoldHandingSelfSocketTransform::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.UpdateHandHoldTarget
// 0x0090 (0x0090 - 0x0000)
struct ABP_Player_HandHolding_C_UpdateHandHoldTarget final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class INavMovementInterface> CallFunc_IsFlying_self_CastInput;                  // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFlying_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class INavMovementInterface> CallFunc_IsFlying_self_CastInput_1;                // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFlying_ReturnValue_1;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class INavMovementInterface> CallFunc_IsFalling_self_CastInput;                 // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class INavMovementInterface> CallFunc_IsFalling_self_CastInput_1;               // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFalling_ReturnValue_1;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue; // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Player_HandHolding_C*              K2Node_DynamicCast_AsABP_Player_Hand_Holding;      // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_UpdateHandHoldTarget) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_UpdateHandHoldTarget");
static_assert(sizeof(ABP_Player_HandHolding_C_UpdateHandHoldTarget) == 0x000090, "Wrong size on ABP_Player_HandHolding_C_UpdateHandHoldTarget");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, DeltaTime) == 0x000000, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsFlying_self_CastInput) == 0x000010, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsFlying_self_CastInput' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsFlying_ReturnValue) == 0x000020, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsFlying_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsFlying_self_CastInput_1) == 0x000028, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsFlying_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsFlying_ReturnValue_1) == 0x000038, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsFlying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsFalling_self_CastInput) == 0x000040, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsFalling_self_CastInput' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsFalling_ReturnValue) == 0x000050, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsFalling_self_CastInput_1) == 0x000058, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsFalling_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsFalling_ReturnValue_1) == 0x000068, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsFalling_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_BooleanOR_ReturnValue) == 0x000069, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_BooleanOR_ReturnValue_1) == 0x00006A, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsValid_ReturnValue_2) == 0x00006B, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_BooleanOR_ReturnValue_2) == 0x00006C, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_Not_PreBool_ReturnValue) == 0x00006D, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_IsValid_ReturnValue_3) == 0x00006E, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_GetAnimInstance_ReturnValue) == 0x000070, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue) == 0x000078, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, K2Node_DynamicCast_AsABP_Player_Hand_Holding) == 0x000080, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::K2Node_DynamicCast_AsABP_Player_Hand_Holding' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateHandHoldTarget, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'ABP_Player_HandHolding_C_UpdateHandHoldTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.UpdateFollowerHandTarget
// 0x0048 (0x0048 - 0x0000)
struct ABP_Player_HandHolding_C_UpdateFollowerHandTarget final
{
public:
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UABP_Player_HandHolding_C*              K2Node_DynamicCast_AsABP_Player_Hand_Holding;      // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_UpdateFollowerHandTarget) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_UpdateFollowerHandTarget");
static_assert(sizeof(ABP_Player_HandHolding_C_UpdateFollowerHandTarget) == 0x000048, "Wrong size on ABP_Player_HandHolding_C_UpdateFollowerHandTarget");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateFollowerHandTarget, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000000, "Member 'ABP_Player_HandHolding_C_UpdateFollowerHandTarget::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateFollowerHandTarget, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000008, "Member 'ABP_Player_HandHolding_C_UpdateFollowerHandTarget::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateFollowerHandTarget, CallFunc_MakeVector_ReturnValue) == 0x000010, "Member 'ABP_Player_HandHolding_C_UpdateFollowerHandTarget::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateFollowerHandTarget, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'ABP_Player_HandHolding_C_UpdateFollowerHandTarget::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateFollowerHandTarget, CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue) == 0x000030, "Member 'ABP_Player_HandHolding_C_UpdateFollowerHandTarget::CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateFollowerHandTarget, K2Node_DynamicCast_AsABP_Player_Hand_Holding) == 0x000038, "Member 'ABP_Player_HandHolding_C_UpdateFollowerHandTarget::K2Node_DynamicCast_AsABP_Player_Hand_Holding' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateFollowerHandTarget, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'ABP_Player_HandHolding_C_UpdateFollowerHandTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_UpdateFollowerHandTarget, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'ABP_Player_HandHolding_C_UpdateFollowerHandTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.StoreNHHFrameData
// 0x01A0 (0x01A0 - 0x0000)
struct ABP_Player_HandHolding_C_StoreNHHFrameData final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_Select_Default_1;                           // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x00E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue_1;      // 0x0140(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_StoreNHHFrameData) == 0x000010, "Wrong alignment on ABP_Player_HandHolding_C_StoreNHHFrameData");
static_assert(sizeof(ABP_Player_HandHolding_C_StoreNHHFrameData) == 0x0001A0, "Wrong size on ABP_Player_HandHolding_C_StoreNHHFrameData");
static_assert(offsetof(ABP_Player_HandHolding_C_StoreNHHFrameData, Temp_bool_Variable) == 0x000000, "Member 'ABP_Player_HandHolding_C_StoreNHHFrameData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_StoreNHHFrameData, Temp_bool_Variable_1) == 0x000001, "Member 'ABP_Player_HandHolding_C_StoreNHHFrameData::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_StoreNHHFrameData, K2Node_Select_Default) == 0x000008, "Member 'ABP_Player_HandHolding_C_StoreNHHFrameData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_StoreNHHFrameData, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'ABP_Player_HandHolding_C_StoreNHHFrameData::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_StoreNHHFrameData, CallFunc_MakeRelativeTransform_ReturnValue) == 0x000070, "Member 'ABP_Player_HandHolding_C_StoreNHHFrameData::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_StoreNHHFrameData, K2Node_Select_Default_1) == 0x0000D0, "Member 'ABP_Player_HandHolding_C_StoreNHHFrameData::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_StoreNHHFrameData, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x0000E0, "Member 'ABP_Player_HandHolding_C_StoreNHHFrameData::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_StoreNHHFrameData, CallFunc_MakeRelativeTransform_ReturnValue_1) == 0x000140, "Member 'ABP_Player_HandHolding_C_StoreNHHFrameData::CallFunc_MakeRelativeTransform_ReturnValue_1' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.OnUpdate_SM_Behavior_HoldHands
// 0x0040 (0x0040 - 0x0000)
struct ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FAnimationStateMachineReference        CallFunc_ConvertToAnimationStateMachinePure_AnimationState; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToAnimationStateMachinePure_Result; // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetState_ReturnValue;                     // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands");
static_assert(sizeof(ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands) == 0x000040, "Wrong size on ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands");
static_assert(offsetof(ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands, Context) == 0x000000, "Member 'ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands::Context' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands, Node) == 0x000010, "Member 'ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands::Node' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands, CallFunc_ConvertToAnimationStateMachinePure_AnimationState) == 0x000020, "Member 'ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands::CallFunc_ConvertToAnimationStateMachinePure_AnimationState' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands, CallFunc_ConvertToAnimationStateMachinePure_Result) == 0x000030, "Member 'ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands::CallFunc_ConvertToAnimationStateMachinePure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands, CallFunc_GetState_ReturnValue) == 0x000034, "Member 'ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands::CallFunc_GetState_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands, CallFunc_NotEqual_NameName_ReturnValue) == 0x00003C, "Member 'ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands, CallFunc_BooleanAND_ReturnValue) == 0x00003D, "Member 'ABP_Player_HandHolding_C_OnUpdate_SM_Behavior_HoldHands::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.OnStateEntry_InviteToHoldHands
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_HandHolding_C_OnStateEntry_InviteToHoldHands final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_OnStateEntry_InviteToHoldHands) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_OnStateEntry_InviteToHoldHands");
static_assert(sizeof(ABP_Player_HandHolding_C_OnStateEntry_InviteToHoldHands) == 0x000020, "Wrong size on ABP_Player_HandHolding_C_OnStateEntry_InviteToHoldHands");
static_assert(offsetof(ABP_Player_HandHolding_C_OnStateEntry_InviteToHoldHands, Context) == 0x000000, "Member 'ABP_Player_HandHolding_C_OnStateEntry_InviteToHoldHands::Context' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnStateEntry_InviteToHoldHands, Node) == 0x000010, "Member 'ABP_Player_HandHolding_C_OnStateEntry_InviteToHoldHands::Node' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.OnStateEntry_HandHolding
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_HandHolding_C_OnStateEntry_HandHolding final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_OnStateEntry_HandHolding) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_OnStateEntry_HandHolding");
static_assert(sizeof(ABP_Player_HandHolding_C_OnStateEntry_HandHolding) == 0x000020, "Wrong size on ABP_Player_HandHolding_C_OnStateEntry_HandHolding");
static_assert(offsetof(ABP_Player_HandHolding_C_OnStateEntry_HandHolding, Context) == 0x000000, "Member 'ABP_Player_HandHolding_C_OnStateEntry_HandHolding::Context' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnStateEntry_HandHolding, Node) == 0x000010, "Member 'ABP_Player_HandHolding_C_OnStateEntry_HandHolding::Node' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.OnStateEntry_ContextPose
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_HandHolding_C_OnStateEntry_ContextPose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_OnStateEntry_ContextPose) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_OnStateEntry_ContextPose");
static_assert(sizeof(ABP_Player_HandHolding_C_OnStateEntry_ContextPose) == 0x000020, "Wrong size on ABP_Player_HandHolding_C_OnStateEntry_ContextPose");
static_assert(offsetof(ABP_Player_HandHolding_C_OnStateEntry_ContextPose, Context) == 0x000000, "Member 'ABP_Player_HandHolding_C_OnStateEntry_ContextPose::Context' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnStateEntry_ContextPose, Node) == 0x000010, "Member 'ABP_Player_HandHolding_C_OnStateEntry_ContextPose::Node' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.OnBecomeRelevant_StartHoldingHands
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_HandHolding_C_OnBecomeRelevant_StartHoldingHands final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_OnBecomeRelevant_StartHoldingHands) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_OnBecomeRelevant_StartHoldingHands");
static_assert(sizeof(ABP_Player_HandHolding_C_OnBecomeRelevant_StartHoldingHands) == 0x000020, "Wrong size on ABP_Player_HandHolding_C_OnBecomeRelevant_StartHoldingHands");
static_assert(offsetof(ABP_Player_HandHolding_C_OnBecomeRelevant_StartHoldingHands, Context) == 0x000000, "Member 'ABP_Player_HandHolding_C_OnBecomeRelevant_StartHoldingHands::Context' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnBecomeRelevant_StartHoldingHands, Node) == 0x000010, "Member 'ABP_Player_HandHolding_C_OnBecomeRelevant_StartHoldingHands::Node' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.OnBecomeRelevant_SM_ContextPose
// 0x0038 (0x0038 - 0x0000)
struct ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FAnimationStateMachineReference        CallFunc_ConvertToAnimationStateMachinePure_AnimationState; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToAnimationStateMachinePure_Result; // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose");
static_assert(sizeof(ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose) == 0x000038, "Wrong size on ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose");
static_assert(offsetof(ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose, Context) == 0x000000, "Member 'ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose::Context' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose, Node) == 0x000010, "Member 'ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose::Node' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose, CallFunc_ConvertToAnimationStateMachinePure_AnimationState) == 0x000020, "Member 'ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose::CallFunc_ConvertToAnimationStateMachinePure_AnimationState' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose, CallFunc_ConvertToAnimationStateMachinePure_Result) == 0x000030, "Member 'ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose::CallFunc_ConvertToAnimationStateMachinePure_Result' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose, K2Node_SwitchName_CmpSuccess) == 0x000031, "Member 'ABP_Player_HandHolding_C_OnBecomeRelevant_SM_ContextPose::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.OnBecomeRelevant_HoldingHands
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_HandHolding_C_OnBecomeRelevant_HoldingHands final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_OnBecomeRelevant_HoldingHands) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_OnBecomeRelevant_HoldingHands");
static_assert(sizeof(ABP_Player_HandHolding_C_OnBecomeRelevant_HoldingHands) == 0x000020, "Wrong size on ABP_Player_HandHolding_C_OnBecomeRelevant_HoldingHands");
static_assert(offsetof(ABP_Player_HandHolding_C_OnBecomeRelevant_HoldingHands, Context) == 0x000000, "Member 'ABP_Player_HandHolding_C_OnBecomeRelevant_HoldingHands::Context' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_OnBecomeRelevant_HoldingHands, Node) == 0x000010, "Member 'ABP_Player_HandHolding_C_OnBecomeRelevant_HoldingHands::Node' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.IsValidLinkPoint
// 0x0002 (0x0002 - 0x0000)
struct ABP_Player_HandHolding_C_IsValidLinkPoint final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_IsValidLinkPoint) == 0x000001, "Wrong alignment on ABP_Player_HandHolding_C_IsValidLinkPoint");
static_assert(sizeof(ABP_Player_HandHolding_C_IsValidLinkPoint) == 0x000002, "Wrong size on ABP_Player_HandHolding_C_IsValidLinkPoint");
static_assert(offsetof(ABP_Player_HandHolding_C_IsValidLinkPoint, Valid) == 0x000000, "Member 'ABP_Player_HandHolding_C_IsValidLinkPoint::Valid' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_IsValidLinkPoint, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000001, "Member 'ABP_Player_HandHolding_C_IsValidLinkPoint::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.IsPrepare
// 0x0008 (0x0008 - 0x0000)
struct ABP_Player_HandHolding_C_IsPrepare final
{
public:
	bool                                          Ret;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_IsPrepare) == 0x000001, "Wrong alignment on ABP_Player_HandHolding_C_IsPrepare");
static_assert(sizeof(ABP_Player_HandHolding_C_IsPrepare) == 0x000008, "Wrong size on ABP_Player_HandHolding_C_IsPrepare");
static_assert(offsetof(ABP_Player_HandHolding_C_IsPrepare, Ret) == 0x000000, "Member 'ABP_Player_HandHolding_C_IsPrepare::Ret' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_IsPrepare, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'ABP_Player_HandHolding_C_IsPrepare::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_IsPrepare, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'ABP_Player_HandHolding_C_IsPrepare::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_IsPrepare, CallFunc_IsValid_ReturnValue_2) == 0x000003, "Member 'ABP_Player_HandHolding_C_IsPrepare::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_IsPrepare, CallFunc_IsValid_ReturnValue_3) == 0x000004, "Member 'ABP_Player_HandHolding_C_IsPrepare::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_IsPrepare, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'ABP_Player_HandHolding_C_IsPrepare::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_IsPrepare, CallFunc_BooleanAND_ReturnValue_1) == 0x000006, "Member 'ABP_Player_HandHolding_C_IsPrepare::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_IsPrepare, CallFunc_BooleanAND_ReturnValue_2) == 0x000007, "Member 'ABP_Player_HandHolding_C_IsPrepare::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.IsNHHDebug
// 0x0002 (0x0002 - 0x0000)
struct ABP_Player_HandHolding_C_IsNHHDebug final
{
public:
	bool                                          DrawDebug;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_IsNHHDebug) == 0x000001, "Wrong alignment on ABP_Player_HandHolding_C_IsNHHDebug");
static_assert(sizeof(ABP_Player_HandHolding_C_IsNHHDebug) == 0x000002, "Wrong size on ABP_Player_HandHolding_C_IsNHHDebug");
static_assert(offsetof(ABP_Player_HandHolding_C_IsNHHDebug, DrawDebug) == 0x000000, "Member 'ABP_Player_HandHolding_C_IsNHHDebug::DrawDebug' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_IsNHHDebug, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'ABP_Player_HandHolding_C_IsNHHDebug::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.GetNikkiDeltaHeight
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_GetNikkiDeltaHeight final
{
public:
	double                                        Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_GetNikkiDeltaHeight) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_GetNikkiDeltaHeight");
static_assert(sizeof(ABP_Player_HandHolding_C_GetNikkiDeltaHeight) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_GetNikkiDeltaHeight");
static_assert(offsetof(ABP_Player_HandHolding_C_GetNikkiDeltaHeight, Result) == 0x000000, "Member 'ABP_Player_HandHolding_C_GetNikkiDeltaHeight::Result' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetNikkiDeltaHeight, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'ABP_Player_HandHolding_C_GetNikkiDeltaHeight::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.GetHoldingHandTargetPositionV3
// 0x0280 (0x0280 - 0x0000)
struct ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3 final
{
public:
	struct FVector                                HoldingHandTargetPosition;                         // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Ret;                                               // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_SelectName_ReturnValue;                   // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0040(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x00F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_2;         // 0x01A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3) == 0x000010, "Wrong alignment on ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3");
static_assert(sizeof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3) == 0x000280, "Wrong size on ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, HoldingHandTargetPosition) == 0x000000, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::HoldingHandTargetPosition' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, Ret) == 0x000018, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::Ret' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_SelectName_ReturnValue) == 0x000034, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_SelectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_GetSocketTransform_ReturnValue) == 0x000040, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_BreakTransform_Location) == 0x0000A0, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_BreakTransform_Rotation) == 0x0000B8, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_BreakTransform_Scale) == 0x0000D0, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_GetSocketTransform_ReturnValue_1) == 0x0000F0, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_BreakTransform_Location_1) == 0x000150, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_BreakTransform_Rotation_1) == 0x000168, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_BreakTransform_Scale_1) == 0x000180, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000198, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_GetSocketTransform_ReturnValue_2) == 0x0001A0, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_GetSocketTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000200, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_BreakTransform_Location_2) == 0x000208, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_BreakTransform_Rotation_2) == 0x000220, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_BreakTransform_Scale_2) == 0x000238, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_MakeVector_ReturnValue) == 0x000250, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000268, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV3::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.GetHoldingHandTargetPositionV2
// 0x0090 (0x0090 - 0x0000)
struct ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2 final
{
public:
	struct FVector                                HoldingHandTargetPosition;                         // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_IntToVector_ReturnValue;             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2");
static_assert(sizeof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2) == 0x000090, "Wrong size on ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2, HoldingHandTargetPosition) == 0x000000, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2::HoldingHandTargetPosition' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2, CallFunc_GetSocketLocation_ReturnValue) == 0x000018, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000030, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2, CallFunc_Add_VectorVector_ReturnValue) == 0x000048, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2, CallFunc_Conv_IntToVector_ReturnValue) == 0x000060, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2::CallFunc_Conv_IntToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2, CallFunc_Divide_VectorVector_ReturnValue) == 0x000078, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPositionV2::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.GetHoldingHandTargetPosition
// 0x0310 (0x0310 - 0x0000)
struct ABP_Player_HandHolding_C_GetHoldingHandTargetPosition final
{
public:
	struct FVector                                HoldingHandTargetPosition;                         // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_SelectName_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_SelectName_ReturnValue_1;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x00F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_2;         // 0x01A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_3;         // 0x0200(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_1;          // 0x0260(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition) == 0x000010, "Wrong alignment on ABP_Player_HandHolding_C_GetHoldingHandTargetPosition");
static_assert(sizeof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition) == 0x000310, "Wrong size on ABP_Player_HandHolding_C_GetHoldingHandTargetPosition");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, HoldingHandTargetPosition) == 0x000000, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::HoldingHandTargetPosition' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_SelectName_ReturnValue) == 0x000018, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_SelectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_SelectName_ReturnValue_1) == 0x000020, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_SelectName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_GetSocketTransform_ReturnValue_1) == 0x000090, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_ComposeTransforms_ReturnValue) == 0x0000F0, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_BreakTransform_Location) == 0x000150, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_BreakTransform_Rotation) == 0x000168, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_BreakTransform_Scale) == 0x000180, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_IsValid_ReturnValue_1) == 0x000198, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_GetSocketTransform_ReturnValue_2) == 0x0001A0, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_GetSocketTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_GetSocketTransform_ReturnValue_3) == 0x000200, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_GetSocketTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_ComposeTransforms_ReturnValue_1) == 0x000260, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_ComposeTransforms_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_BreakTransform_Location_1) == 0x0002C0, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_BreakTransform_Rotation_1) == 0x0002D8, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandTargetPosition, CallFunc_BreakTransform_Scale_1) == 0x0002F0, "Member 'ABP_Player_HandHolding_C_GetHoldingHandTargetPosition::CallFunc_BreakTransform_Scale_1' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.GetHoldingHandIsForwardAlpha
// 0x00D8 (0x00D8 - 0x0000)
struct ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha final
{
public:
	double                                        Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue_1;   // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_ReturnValue;                  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue_2;   // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha");
static_assert(sizeof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha) == 0x0000D8, "Wrong size on ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, Ret) == 0x000000, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::Ret' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_InverseTransformLocation_ReturnValue) == 0x000008, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000020, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_Dot_VectorVector_ReturnValue) == 0x000038, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_InverseTransformLocation_ReturnValue_1) == 0x000040, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_InverseTransformLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_SignOfFloat_ReturnValue) == 0x000058, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_InverseTransformLocation_ReturnValue_2) == 0x000060, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_InverseTransformLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000078, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000090, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_BreakVector_X) == 0x0000A8, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_BreakVector_Y) == 0x0000B0, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_BreakVector_Z) == 0x0000B8, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_Abs_ReturnValue) == 0x0000C0, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_MapRangeClamped_ReturnValue) == 0x0000C8, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'ABP_Player_HandHolding_C_GetHoldingHandIsForwardAlpha::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.GatherLogicData
// 0x00F8 (0x00F8 - 0x0000)
struct ABP_Player_HandHolding_C_GatherLogicData final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSizeXYSquared_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanPlayerDoAction_Can;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetHoldingHandTargetPositionV3_HoldingHandTargetPosition; // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_Select_Default;                             // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_Select_Default_1;                           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_GatherLogicData) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_GatherLogicData");
static_assert(sizeof(ABP_Player_HandHolding_C_GatherLogicData) == 0x0000F8, "Wrong size on ABP_Player_HandHolding_C_GatherLogicData");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, Temp_bool_Variable) == 0x000000, "Member 'ABP_Player_HandHolding_C_GatherLogicData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_VSizeXYSquared_ReturnValue) == 0x000008, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_VSizeXYSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_CanPlayerDoAction_Can) == 0x000011, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_CanPlayerDoAction_Can' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_Vector_Distance_ReturnValue) == 0x000018, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000020, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BooleanAND_ReturnValue) == 0x000021, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BooleanAND_ReturnValue_1) == 0x000022, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_IsValid_ReturnValue) == 0x000023, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_GetSocketLocation_ReturnValue) == 0x000028, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BreakVector_X) == 0x000040, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BreakVector_Y) == 0x000048, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BreakVector_Z) == 0x000050, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BooleanAND_ReturnValue_2) == 0x000058, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BooleanAND_ReturnValue_3) == 0x000059, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_IsValid_ReturnValue_1) == 0x00005A, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BooleanAND_ReturnValue_4) == 0x00005B, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000060, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BreakVector_X_1) == 0x000078, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BreakVector_Y_1) == 0x000080, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BreakVector_Z_1) == 0x000088, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000090, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x000098, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000B0, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, Temp_bool_Variable_1) == 0x0000B1, "Member 'ABP_Player_HandHolding_C_GatherLogicData::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BooleanAND_ReturnValue_5) == 0x0000B2, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_GetHoldingHandTargetPositionV3_HoldingHandTargetPosition) == 0x0000B8, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_GetHoldingHandTargetPositionV3_HoldingHandTargetPosition' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_TryGetPawnOwner_ReturnValue) == 0x0000D0, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, K2Node_DynamicCast_AsCharacter) == 0x0000D8, "Member 'ABP_Player_HandHolding_C_GatherLogicData::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, K2Node_DynamicCast_bSuccess) == 0x0000E0, "Member 'ABP_Player_HandHolding_C_GatherLogicData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_IsValid_ReturnValue_2) == 0x0000E1, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BooleanAND_ReturnValue_6) == 0x0000E2, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, CallFunc_BooleanAND_ReturnValue_7) == 0x0000E3, "Member 'ABP_Player_HandHolding_C_GatherLogicData::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, K2Node_Select_Default) == 0x0000E8, "Member 'ABP_Player_HandHolding_C_GatherLogicData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_GatherLogicData, K2Node_Select_Default_1) == 0x0000F0, "Member 'ABP_Player_HandHolding_C_GatherLogicData::K2Node_Select_Default_1' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.FindBestTarget
// 0x0960 (0x0960 - 0x0000)
struct ABP_Player_HandHolding_C_FindBestTarget final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CalibratedHandLocation;                            // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Sqrt_ReturnValue;                         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Sqrt_ReturnValue_1;                       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Sqrt_ReturnValue_2;                       // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Sqrt_ReturnValue_3;                       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue;             // 0x0150(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0xF];                                      // 0x01B1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue_1;           // 0x01C0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0xF];                                      // 0x0221(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0230(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_1;          // 0x0290(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Down_ReturnValue;                  // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Down_ReturnValue_1;                // 0x0308(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0328(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0340(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0388(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x03A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x03B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x03D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x03E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Square_ReturnValue;                       // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Square_ReturnValue_1;                     // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Square_ReturnValue_2;                     // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x0430(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_498[0x8];                                      // 0x0498(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_2;          // 0x04A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0508(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Square_ReturnValue_3;                     // 0x0510(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_2;        // 0x0518(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_2;      // 0x0538(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Sqrt_ReturnValue_4;                       // 0x0550(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0558(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_3;        // 0x0578(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_3;      // 0x0590(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x05A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x05C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D8[0x8];                                      // 0x05D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue_1;      // 0x05E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_3;          // 0x0640(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x06A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x06B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x06D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x06E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0700(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x0760(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x0778(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x0790(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue_1;                      // 0x07A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x07C0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_2;                  // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x0828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_3;                  // 0x0830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNHHDebug_DrawDebug;                     // 0x0838(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0840(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x08A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x0900(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x0918(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x0930(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x0948(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DrawDebugSphere_Radius_ImplicitCast;      // 0x0950(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_FindBestTarget) == 0x000010, "Wrong alignment on ABP_Player_HandHolding_C_FindBestTarget");
static_assert(sizeof(ABP_Player_HandHolding_C_FindBestTarget) == 0x000960, "Wrong size on ABP_Player_HandHolding_C_FindBestTarget");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, DeltaTime) == 0x000000, "Member 'ABP_Player_HandHolding_C_FindBestTarget::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CalibratedHandLocation) == 0x000008, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CalibratedHandLocation' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Location) == 0x000020, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Rotation) == 0x000038, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Scale) == 0x000050, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Location_1) == 0x000068, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Rotation_1) == 0x000080, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Scale_1) == 0x000098, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000B0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Sqrt_ReturnValue) == 0x0000C0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Sqrt_ReturnValue_1) == 0x0000D0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Sqrt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_FInterpTo_ReturnValue) == 0x0000D8, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0000E0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Sqrt_ReturnValue_2) == 0x0000E8, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Sqrt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000F0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Sqrt_ReturnValue_3) == 0x0000F8, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Sqrt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_FInterpTo_ReturnValue_1) == 0x000100, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_GetVelocity_ReturnValue) == 0x000108, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000120, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000138, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_GetBoneTransform_ReturnValue) == 0x000150, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_GetBoneTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Not_PreBool_ReturnValue) == 0x0001B0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_GetBoneTransform_ReturnValue_1) == 0x0001C0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_GetBoneTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Not_PreBool_ReturnValue_1) == 0x000220, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_ComposeTransforms_ReturnValue) == 0x000230, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_ComposeTransforms_ReturnValue_1) == 0x000290, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_ComposeTransforms_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Vector_Down_ReturnValue) == 0x0002F0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Vector_Down_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Vector_Down_ReturnValue_1) == 0x000308, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Vector_Down_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Dot_VectorVector_ReturnValue) == 0x000320, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000328, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000340, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000358, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000370, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Normal_ReturnValue) == 0x000388, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Normal_ReturnValue_1) == 0x0003A0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Location_2) == 0x0003B8, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Rotation_2) == 0x0003D0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Scale_2) == 0x0003E8, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Square_ReturnValue) == 0x000400, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000408, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000410, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Square_ReturnValue_1) == 0x000418, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Square_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Square_ReturnValue_2) == 0x000420, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Square_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000428, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_MakeRelativeTransform_ReturnValue) == 0x000430, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000490, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_ComposeTransforms_ReturnValue_2) == 0x0004A0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_ComposeTransforms_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000500, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000508, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Square_ReturnValue_3) == 0x000510, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Square_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Conv_DoubleToVector_ReturnValue_2) == 0x000518, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Conv_DoubleToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000530, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_VectorVector_ReturnValue_2) == 0x000538, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Sqrt_ReturnValue_4) == 0x000550, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Sqrt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Add_VectorVector_ReturnValue) == 0x000558, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000570, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Conv_DoubleToVector_ReturnValue_3) == 0x000578, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Conv_DoubleToVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_VectorVector_ReturnValue_3) == 0x000590, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0005A8, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0005C0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_MakeRelativeTransform_ReturnValue_1) == 0x0005E0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_MakeRelativeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_ComposeTransforms_ReturnValue_3) == 0x000640, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_ComposeTransforms_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Location_3) == 0x0006A0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Rotation_3) == 0x0006B8, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Scale_3) == 0x0006D0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_VLerp_ReturnValue) == 0x0006E8, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_MakeTransform_ReturnValue) == 0x000700, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Location_4) == 0x000760, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Rotation_4) == 0x000778, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Scale_4) == 0x000790, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_VLerp_ReturnValue_1) == 0x0007A8, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_VLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_MakeTransform_ReturnValue_1) == 0x0007C0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_FInterpTo_ReturnValue_2) == 0x000820, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x000828, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_FInterpTo_ReturnValue_3) == 0x000830, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_FInterpTo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_IsNHHDebug_DrawDebug) == 0x000838, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_IsNHHDebug_DrawDebug' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_MakeTransform_ReturnValue_2) == 0x000840, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_MakeTransform_ReturnValue_3) == 0x0008A0, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Location_5) == 0x000900, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Rotation_5) == 0x000918, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_BreakTransform_Scale_5) == 0x000930, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x000948, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestTarget, CallFunc_DrawDebugSphere_Radius_ImplicitCast) == 0x000950, "Member 'ABP_Player_HandHolding_C_FindBestTarget::CallFunc_DrawDebugSphere_Radius_ImplicitCast' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.FindBestHandPose
// 0x0840 (0x0840 - 0x0000)
struct ABP_Player_HandHolding_C_FindBestHandPose final
{
public:
	int32                                         BestIndex;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinDist;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNHHDebug_DrawDebug;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_32ByteByte_ReturnValue;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0040(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x00B0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_HoldingHandBakedInfo                CallFunc_Array_Get_Item;                           // 0x0110(0x0170)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x02A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0308(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0320(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0338(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_1;                // 0x0360(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0388(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x03A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_2;               // 0x03D0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_3;               // 0x0430(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue_1;      // 0x0490(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x04F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0508(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0520(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_538[0x8];                                      // 0x0538(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue_2;      // 0x0540(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x05A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x05B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x05D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x05E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_HoldingHandBakedInfo                CallFunc_Array_Get_Item_1;                         // 0x0600(0x0170)(HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0770(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0778(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0780(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0790(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AC[0x4];                                      // 0x07AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x07B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x07B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B9[0x7];                                      // 0x07B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x07C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue_1;            // 0x07C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue_2;            // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x07D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x07D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7DA[0x6];                                      // 0x07DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_SelectTransform_ReturnValue;              // 0x07E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_FindBestHandPose) == 0x000010, "Wrong alignment on ABP_Player_HandHolding_C_FindBestHandPose");
static_assert(sizeof(ABP_Player_HandHolding_C_FindBestHandPose) == 0x000840, "Wrong size on ABP_Player_HandHolding_C_FindBestHandPose");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, BestIndex) == 0x000000, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::BestIndex' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, MinDist) == 0x000008, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::MinDist' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, Temp_int_Array_Index_Variable) == 0x000018, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_IsNHHDebug_DrawDebug) == 0x000020, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_IsNHHDebug_DrawDebug' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_SelectFloat_ReturnValue) == 0x000028, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_SelectFloat_ReturnValue_1) == 0x000030, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_EqualEqual_32ByteByte_ReturnValue) == 0x000038, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_EqualEqual_32ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_GetTransform_ReturnValue) == 0x000040, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_SelectColor_ReturnValue) == 0x0000A0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_GetTransform_ReturnValue_1) == 0x0000B0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Array_Get_Item) == 0x000110, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Array_Length_ReturnValue) == 0x000280, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakVector_X) == 0x000288, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakVector_Y) == 0x000290, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakVector_Z) == 0x000298, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_MakeRelativeTransform_ReturnValue) == 0x0002A0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000300, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakTransform_Location) == 0x000308, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakTransform_Rotation) == 0x000320, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakTransform_Scale) == 0x000338, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000350, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000358, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_SelectColor_ReturnValue_1) == 0x000360, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_SelectColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_MakeVector_ReturnValue) == 0x000370, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000388, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_TransformLocation_ReturnValue) == 0x0003A0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0003B8, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, Temp_int_Loop_Counter_Variable_1) == 0x0003BC, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Less_IntInt_ReturnValue) == 0x0003C0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Add_IntInt_ReturnValue_1) == 0x0003C4, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_GetTransform_ReturnValue_2) == 0x0003D0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_GetTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_GetTransform_ReturnValue_3) == 0x000430, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_GetTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_MakeRelativeTransform_ReturnValue_1) == 0x000490, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_MakeRelativeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakTransform_Location_1) == 0x0004F0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakTransform_Rotation_1) == 0x000508, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakTransform_Scale_1) == 0x000520, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_MakeRelativeTransform_ReturnValue_2) == 0x000540, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_MakeRelativeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakTransform_Location_2) == 0x0005A0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakTransform_Rotation_2) == 0x0005B8, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakTransform_Scale_2) == 0x0005D0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0005E8, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Array_Get_Item_1) == 0x000600, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakVector_X_1) == 0x000770, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakVector_Y_1) == 0x000778, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_BreakVector_Z_1) == 0x000780, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000788, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_MakeVector_ReturnValue_1) == 0x000790, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Array_Length_ReturnValue_1) == 0x0007A8, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Vector_Distance_ReturnValue) == 0x0007B0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Less_IntInt_ReturnValue_1) == 0x0007B8, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0007C0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Vector_Distance_ReturnValue_1) == 0x0007C8, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Vector_Distance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Vector_Distance_ReturnValue_2) == 0x0007D0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Vector_Distance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0007D8, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0007D9, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_FindBestHandPose, CallFunc_SelectTransform_ReturnValue) == 0x0007E0, "Member 'ABP_Player_HandHolding_C_FindBestHandPose::CallFunc_SelectTransform_ReturnValue' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.ExecuteUbergraph_ABP_Player_HandHolding
// 0x0398 (0x0398 - 0x0000)
struct ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AX6NikkiPawn*                           K2Node_DynamicCast_AsX6Nikki_Pawn;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6OverlayCustomModeData*               Temp_object_Variable;                              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UX6OverlayCustomModeData*               Temp_object_Variable_1;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6OverlayCustomModeData*               Temp_object_Variable_2;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UX6OverlayCustomModeData*               Temp_object_Variable_3;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_1; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSizeSquared_ReturnValue;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73[0x1];                                       // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0074(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6OverlayCustomModeData*               Temp_object_Variable_4;                            // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UX6OverlayCustomModeData*               Temp_object_Variable_5;                            // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        CallFunc_GetHoldingHandIsForwardAlpha_Ret;         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6OverlayCustomModeData*               Temp_object_Variable_6;                            // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UX6OverlayCustomModeData*               Temp_object_Variable_7;                            // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetNikkiDeltaHeight_Result;               // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_10;                             // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6OverlayCustomModeData*               K2Node_Select_Default;                             // 0x0118(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UX6OverlayCustomModeData*               K2Node_Select_Default_1;                           // 0x0120(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_11;                             // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_12;                             // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6OverlayCustomModeData*               K2Node_Select_Default_2;                           // 0x0130(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UX6OverlayCustomModeData*               Temp_object_Variable_8;                            // 0x0138(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6OverlayCustomModeData*               K2Node_Select_Default_3;                           // 0x0148(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UX6OverlayCustomModeData*               K2Node_Select_Default_4;                           // 0x0150(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_13;                             // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6OverlayCustomModeData*               K2Node_Select_Default_5;                           // 0x0160(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_14;                             // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6OverlayCustomModeData*               Temp_object_Variable_9;                            // 0x0170(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_15;                             // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6OverlayCustomModeData*               K2Node_Select_Default_6;                           // 0x0180(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPBIKBoneSetting>               K2Node_Select_Default_7;                           // 0x01D0(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeSquared_ReturnValue_1;               // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_2; // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_3;          // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_3; // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_4;          // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UX6OverlayCustomModeData*               Temp_object_Variable_10;                           // 0x0278(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UX6OverlayCustomModeData*               Temp_object_Variable_11;                           // 0x0280(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_16;                             // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UX6OverlayCustomModeData*               K2Node_Select_Default_8;                           // 0x0290(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UX6OverlayCustomModeData*               K2Node_Select_Default_9;                           // 0x0298(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_8;                  // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x02A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_9;                  // 0x02A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_10;                 // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_11;                 // 0x02A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x02A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A7[0x1];                                      // 0x02A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPBIKBoneSetting>               K2Node_Select_Default_10;                          // 0x02A8(0x0010)(ReferenceParm)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_12;                 // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_2;            // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_Blueprint_GetMainAnimInstance_ReturnValue; // 0x02E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNikkiAnim_BPNew_C*                     K2Node_DynamicCast_AsNikki_Anim_BPNew;             // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_3;            // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerAnimStatesComponent_C*        CallFunc_GetComponentByClass_ReturnValue;          // 0x0308(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_MultiPlayerGroupMovementComponent_C* CallFunc_GetComponentByClass_ReturnValue_1;       // 0x0310(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0319(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPrepare_Ret;                            // 0x031A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B[0x5];                                      // 0x031B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_4;            // 0x0320(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UX6RMInAirComponent*                    CallFunc_GetComponentByClass_ReturnValue_2;        // 0x0328(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UX6CharacterMovementComponent*          CallFunc_GetComponentByClass_ReturnValue_3;        // 0x0330(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0339(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast_1;       // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast_2;       // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_20_ImplicitCast; // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_22_ImplicitCast; // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_16_ImplicitCast; // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_18_ImplicitCast; // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_19_ImplicitCast; // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_21_ImplicitCast; // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_15_ImplicitCast; // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_17_ImplicitCast; // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast;         // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast_3;       // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast_4;       // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateHandHoldTarget_DeltaTime_ImplicitCast; // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding");
static_assert(sizeof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding) == 0x000398, "Wrong size on ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, EntryPoint) == 0x000000, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000008, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_DynamicCast_AsX6Nikki_Pawn) == 0x000010, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_DynamicCast_AsX6Nikki_Pawn' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue) == 0x00001C, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_GetInstanceAssetPlayerTimeFromEndFraction_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000020, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue) == 0x000024, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue) == 0x000029, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_1) == 0x00002A, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable) == 0x00002B, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable) == 0x000030, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable_1) == 0x000038, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_1) == 0x000040, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable_2) == 0x000048, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable_3) == 0x000050, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_2) == 0x000058, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Not_PreBool_ReturnValue) == 0x000059, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Not_PreBool_ReturnValue_1) == 0x00005A, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Not_PreBool_ReturnValue_2) == 0x00005B, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanAND_ReturnValue) == 0x00005C, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_2) == 0x00005D, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_3) == 0x00005E, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_1) == 0x000060, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x000064, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanAND_ReturnValue_1) == 0x000065, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_VSizeSquared_ReturnValue) == 0x000068, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_4) == 0x000070, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000071, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_5) == 0x000072, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_CreateDelegate_OutputDelegate) == 0x000074, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000088, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_6) == 0x000090, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Not_PreBool_ReturnValue_3) == 0x000091, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000092, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanAND_ReturnValue_2) == 0x000093, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_VSize_ReturnValue) == 0x000098, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x0000A0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_3) == 0x0000A1, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_7) == 0x0000A2, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Not_PreBool_ReturnValue_4) == 0x0000A3, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_4) == 0x0000A4, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable_4) == 0x0000A8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable_5) == 0x0000B0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_GetHoldingHandIsForwardAlpha_Ret) == 0x0000B8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_GetHoldingHandIsForwardAlpha_Ret' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_5) == 0x0000C0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable_6) == 0x0000C8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable_7) == 0x0000D0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_6) == 0x0000D8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_GetNikkiDeltaHeight_Result) == 0x0000E0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_GetNikkiDeltaHeight_Result' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_7) == 0x0000E8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x0000F0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000F8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_8) == 0x000100, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_FClamp_ReturnValue) == 0x000108, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_9) == 0x000110, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_10) == 0x000111, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Select_Default) == 0x000118, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Select_Default_1) == 0x000120, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_11) == 0x000128, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_12) == 0x000129, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Select_Default_2) == 0x000130, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable_8) == 0x000138, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Not_PreBool_ReturnValue_5) == 0x000140, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Select_Default_3) == 0x000148, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Select_Default_4) == 0x000150, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_13) == 0x000158, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Select_Default_5) == 0x000160, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_14) == 0x000168, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable_9) == 0x000170, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_15) == 0x000178, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Select_Default_6) == 0x000180, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BreakTransform_Location) == 0x000188, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BreakTransform_Rotation) == 0x0001A0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BreakTransform_Scale) == 0x0001B8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Select_Default_7) == 0x0001D0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BreakTransform_Location_1) == 0x0001E0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BreakTransform_Rotation_1) == 0x0001F8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BreakTransform_Scale_1) == 0x000210, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_VSizeSquared_ReturnValue_1) == 0x000228, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_VSizeSquared_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x000230, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_2) == 0x000234, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Less_DoubleDouble_ReturnValue_3) == 0x000238, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Less_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_3) == 0x00023C, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Less_DoubleDouble_ReturnValue_4) == 0x000240, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Less_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000248, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000260, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable_10) == 0x000278, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_object_Variable_11) == 0x000280, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, Temp_bool_Variable_16) == 0x000288, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Select_Default_8) == 0x000290, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Select_Default_9) == 0x000298, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_8) == 0x0002A0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanAND_ReturnValue_3) == 0x0002A1, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanAND_ReturnValue_4) == 0x0002A2, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_9) == 0x0002A3, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_10) == 0x0002A4, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_11) == 0x0002A5, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Not_PreBool_ReturnValue_6) == 0x0002A6, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Select_Default_10) == 0x0002A8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Select_Default_10' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_Event_DeltaTimeX) == 0x0002B8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x0002C0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_IsValid_ReturnValue) == 0x0002C8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_BooleanOR_ReturnValue_12) == 0x0002C9, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_BooleanOR_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_TryGetPawnOwner_ReturnValue_2) == 0x0002D0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_TryGetPawnOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_IsValid_ReturnValue_1) == 0x0002D8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Blueprint_GetMainAnimInstance_ReturnValue) == 0x0002E0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Blueprint_GetMainAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_IsValid_ReturnValue_2) == 0x0002E8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_DynamicCast_AsNikki_Anim_BPNew) == 0x0002F0, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_DynamicCast_AsNikki_Anim_BPNew' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_DynamicCast_bSuccess_1) == 0x0002F8, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_TryGetPawnOwner_ReturnValue_3) == 0x000300, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_TryGetPawnOwner_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_GetComponentByClass_ReturnValue) == 0x000308, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_GetComponentByClass_ReturnValue_1) == 0x000310, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_IsValid_ReturnValue_3) == 0x000318, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_IsValid_ReturnValue_4) == 0x000319, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_IsPrepare_Ret) == 0x00031A, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_IsPrepare_Ret' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_TryGetPawnOwner_ReturnValue_4) == 0x000320, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_TryGetPawnOwner_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_GetComponentByClass_ReturnValue_2) == 0x000328, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_GetComponentByClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_GetComponentByClass_ReturnValue_3) == 0x000330, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_GetComponentByClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_IsValid_ReturnValue_5) == 0x000338, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_IsValid_ReturnValue_6) == 0x000339, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000340, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Less_DoubleDouble_A_ImplicitCast_1) == 0x000348, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Less_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Less_DoubleDouble_A_ImplicitCast_2) == 0x000350, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Less_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_StructMemberSet___FloatProperty_20_ImplicitCast) == 0x000358, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_StructMemberSet___FloatProperty_20_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_StructMemberSet___FloatProperty_22_ImplicitCast) == 0x00035C, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_StructMemberSet___FloatProperty_22_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_StructMemberSet___FloatProperty_16_ImplicitCast) == 0x000360, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_StructMemberSet___FloatProperty_16_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_StructMemberSet___FloatProperty_18_ImplicitCast) == 0x000364, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_StructMemberSet___FloatProperty_18_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_StructMemberSet___FloatProperty_19_ImplicitCast) == 0x000368, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_StructMemberSet___FloatProperty_19_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_StructMemberSet___FloatProperty_21_ImplicitCast) == 0x00036C, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_StructMemberSet___FloatProperty_21_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_StructMemberSet___FloatProperty_15_ImplicitCast) == 0x000370, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_StructMemberSet___FloatProperty_15_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_StructMemberSet___FloatProperty_17_ImplicitCast) == 0x000374, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_StructMemberSet___FloatProperty_17_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, K2Node_StructMemberSet_Alpha_ImplicitCast) == 0x000378, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::K2Node_StructMemberSet_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Less_DoubleDouble_A_ImplicitCast_3) == 0x000380, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Less_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_Less_DoubleDouble_A_ImplicitCast_4) == 0x000388, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_Less_DoubleDouble_A_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding, CallFunc_UpdateHandHoldTarget_DeltaTime_ImplicitCast) == 0x000390, "Member 'ABP_Player_HandHolding_C_ExecuteUbergraph_ABP_Player_HandHolding::CallFunc_UpdateHandHoldTarget_DeltaTime_ImplicitCast' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.DebugDrawHandHoldTarget
// 0x0158 (0x0158 - 0x0000)
struct ABP_Player_HandHolding_C_DebugDrawHandHoldTarget final
{
public:
	bool                                          CallFunc_IsNHHDebug_DrawDebug;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue_1;               // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_DebugDrawHandHoldTarget");
static_assert(sizeof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget) == 0x000158, "Wrong size on ABP_Player_HandHolding_C_DebugDrawHandHoldTarget");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_IsNHHDebug_DrawDebug) == 0x000000, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_IsNHHDebug_DrawDebug' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_Not_PreBool_ReturnValue_1) == 0x000002, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Location) == 0x000008, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Rotation) == 0x000020, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Scale) == 0x000038, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Location_1) == 0x000050, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Rotation_1) == 0x000068, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Scale_1) == 0x000080, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_SelectVector_ReturnValue) == 0x000098, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Location_2) == 0x0000B0, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Rotation_2) == 0x0000C8, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Scale_2) == 0x0000E0, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Location_3) == 0x0000F8, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Rotation_3) == 0x000110, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_BreakTransform_Scale_3) == 0x000128, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_DebugDrawHandHoldTarget, CallFunc_SelectVector_ReturnValue_1) == 0x000140, "Member 'ABP_Player_HandHolding_C_DebugDrawHandHoldTarget::CallFunc_SelectVector_ReturnValue_1' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.CalculateLastFrameInfo
// 0x0400 (0x0400 - 0x0000)
struct ABP_Player_HandHolding_C_CalculateLastFrameInfo final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_SelectName_ReturnValue;                   // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_SelectName_ReturnValue_1;                 // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_SelectName_ReturnValue_2;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue;             // 0x0030(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_SelectName_ReturnValue_3;                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue_1;           // 0x00A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x02A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x02B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x02D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x02E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x0300(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0318(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_2;                      // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue_2;           // 0x0340(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue_3;           // 0x03A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_CalculateLastFrameInfo) == 0x000010, "Wrong alignment on ABP_Player_HandHolding_C_CalculateLastFrameInfo");
static_assert(sizeof(ABP_Player_HandHolding_C_CalculateLastFrameInfo) == 0x000400, "Wrong size on ABP_Player_HandHolding_C_CalculateLastFrameInfo");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_Not_PreBool_ReturnValue_1) == 0x000001, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_SelectName_ReturnValue) == 0x000004, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_SelectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_SelectName_ReturnValue_1) == 0x00000C, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_SelectName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_Not_PreBool_ReturnValue_2) == 0x000014, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_SelectName_ReturnValue_2) == 0x000018, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_SelectName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_Not_PreBool_ReturnValue_3) == 0x000020, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_GetBoneTransform_ReturnValue) == 0x000030, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_GetBoneTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_SelectName_ReturnValue_3) == 0x000090, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_SelectName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_GetBoneTransform_ReturnValue_1) == 0x0000A0, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_GetBoneTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Location) == 0x000100, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Rotation) == 0x000118, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Scale) == 0x000130, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000148, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Location_1) == 0x000150, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Rotation_1) == 0x000168, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Scale_1) == 0x000180, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000198, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Location_2) == 0x0001B0, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Rotation_2) == 0x0001C8, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Scale_2) == 0x0001E0, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_VSize_ReturnValue) == 0x0001F8, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Location_3) == 0x000200, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Rotation_3) == 0x000218, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Scale_3) == 0x000230, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000248, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000260, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_VSize_ReturnValue_1) == 0x000268, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_MakeVector_ReturnValue) == 0x000270, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Location_4) == 0x000288, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Rotation_4) == 0x0002A0, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Scale_4) == 0x0002B8, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Location_5) == 0x0002D0, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Rotation_5) == 0x0002E8, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_BreakTransform_Scale_5) == 0x000300, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000318, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_VSize_ReturnValue_2) == 0x000330, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_GetBoneTransform_ReturnValue_2) == 0x000340, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_GetBoneTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_CalculateLastFrameInfo, CallFunc_GetBoneTransform_ReturnValue_3) == 0x0003A0, "Member 'ABP_Player_HandHolding_C_CalculateLastFrameInfo::CallFunc_GetBoneTransform_ReturnValue_3' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Player_HandHolding_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Player_HandHolding_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_Player_HandHolding_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_Player_HandHolding_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_Player_HandHolding_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_Player_HandHolding_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Player_HandHolding_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Player_HandHolding_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Player_HandHolding_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_Player_HandHolding_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on ABP_Player_HandHolding_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_Player_HandHolding_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_Player_HandHolding_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_WhiteBoxMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_WhiteBoxMovement final
{
public:
	struct FPoseLink                              AnimLayer_WhiteBoxMovement_0;                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_WhiteBoxMovement) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_WhiteBoxMovement");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_WhiteBoxMovement) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_WhiteBoxMovement");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_WhiteBoxMovement, AnimLayer_WhiteBoxMovement_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_WhiteBoxMovement::AnimLayer_WhiteBoxMovement_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_UsingCarrierMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_UsingCarrierMovement final
{
public:
	struct FPoseLink                              AnimLayer_UsingCarrierMovement_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_UsingCarrierMovement) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_UsingCarrierMovement");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_UsingCarrierMovement) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_UsingCarrierMovement");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_UsingCarrierMovement, AnimLayer_UsingCarrierMovement_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_UsingCarrierMovement::AnimLayer_UsingCarrierMovement_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_StrafeMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_StrafeMovement final
{
public:
	struct FPoseLink                              AnimLayer_StrafeMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_StrafeMovement) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_StrafeMovement");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_StrafeMovement) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_StrafeMovement");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_StrafeMovement, AnimLayer_StrafeMovement_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_StrafeMovement::AnimLayer_StrafeMovement_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_SpecialSurfaceMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_SpecialSurfaceMovement final
{
public:
	struct FPoseLink                              AnimLayer_SpecialSurfaceMovement_0;                // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_SpecialSurfaceMovement) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_SpecialSurfaceMovement");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_SpecialSurfaceMovement) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_SpecialSurfaceMovement");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_SpecialSurfaceMovement, AnimLayer_SpecialSurfaceMovement_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_SpecialSurfaceMovement::AnimLayer_SpecialSurfaceMovement_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_PlayerRegularMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_PlayerRegularMovement final
{
public:
	struct FPoseLink                              AnimLayer_PlayerRegularMovement_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_PlayerRegularMovement) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_PlayerRegularMovement");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_PlayerRegularMovement) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_PlayerRegularMovement");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_PlayerRegularMovement, AnimLayer_PlayerRegularMovement_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_PlayerRegularMovement::AnimLayer_PlayerRegularMovement_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_PlayerControllingTool
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_PlayerControllingTool final
{
public:
	struct FPoseLink                              AnimLayer_PlayerControllingTool_0;                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_PlayerControllingTool) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_PlayerControllingTool");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_PlayerControllingTool) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_PlayerControllingTool");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_PlayerControllingTool, AnimLayer_PlayerControllingTool_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_PlayerControllingTool::AnimLayer_PlayerControllingTool_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_NPCBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_NPCBehavior final
{
public:
	struct FPoseLink                              InPose_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCBehavior_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_NPCBehavior) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_NPCBehavior");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_NPCBehavior) == 0x000020, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_NPCBehavior");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_NPCBehavior, InPose_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_NPCBehavior::InPose_0' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_NPCBehavior, AnimLayer_NPCBehavior_0) == 0x000010, "Member 'ABP_Player_HandHolding_C_AnimLayer_NPCBehavior::AnimLayer_NPCBehavior_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_NPCAdditiveBehavior
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_NPCAdditiveBehavior final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_NPCAdditiveBehavior_0;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_NPCAdditiveBehavior) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_NPCAdditiveBehavior");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_NPCAdditiveBehavior) == 0x000020, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_NPCAdditiveBehavior");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_NPCAdditiveBehavior, InPose) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_NPCAdditiveBehavior::InPose' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_NPCAdditiveBehavior, AnimLayer_NPCAdditiveBehavior_0) == 0x000010, "Member 'ABP_Player_HandHolding_C_AnimLayer_NPCAdditiveBehavior::AnimLayer_NPCAdditiveBehavior_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_MovementDependObject
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_MovementDependObject final
{
public:
	struct FPoseLink                              AnimLayer_MovementDependObject_0;                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_MovementDependObject) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_MovementDependObject");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_MovementDependObject) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_MovementDependObject");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_MovementDependObject, AnimLayer_MovementDependObject_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_MovementDependObject::AnimLayer_MovementDependObject_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_Land
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_Land final
{
public:
	struct FPoseLink                              AnimLayer_Land_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_Land) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_Land");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_Land) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_Land");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_Land, AnimLayer_Land_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_Land::AnimLayer_Land_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_Jump
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_Jump final
{
public:
	struct FPoseLink                              AnimLayer_Jump_0;                                  // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_Jump) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_Jump");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_Jump) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_Jump");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_Jump, AnimLayer_Jump_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_Jump::AnimLayer_Jump_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_EquipmentAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_EquipmentAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForEquipment;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_EquipmentAdditiveMode_0;                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_EquipmentAdditiveMode) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_EquipmentAdditiveMode");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_EquipmentAdditiveMode) == 0x000020, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_EquipmentAdditiveMode");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_EquipmentAdditiveMode, InPoseForEquipment) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_EquipmentAdditiveMode::InPoseForEquipment' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_EquipmentAdditiveMode, AnimLayer_EquipmentAdditiveMode_0) == 0x000010, "Member 'ABP_Player_HandHolding_C_AnimLayer_EquipmentAdditiveMode::AnimLayer_EquipmentAdditiveMode_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_CombatMovement
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_CombatMovement final
{
public:
	struct FPoseLink                              AnimLayer_CombatMovement_0;                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_CombatMovement) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_CombatMovement");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_CombatMovement) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_CombatMovement");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_CombatMovement, AnimLayer_CombatMovement_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_CombatMovement::AnimLayer_CombatMovement_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_BehaviorConnectionMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_BehaviorConnectionMode final
{
public:
	struct FPoseLink                              InPoseToConnectionMode;                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorConnectionMode_0;                // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_BehaviorConnectionMode) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_BehaviorConnectionMode");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_BehaviorConnectionMode) == 0x000020, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_BehaviorConnectionMode");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_BehaviorConnectionMode, InPoseToConnectionMode) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_BehaviorConnectionMode::InPoseToConnectionMode' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_BehaviorConnectionMode, AnimLayer_BehaviorConnectionMode_0) == 0x000010, "Member 'ABP_Player_HandHolding_C_AnimLayer_BehaviorConnectionMode::AnimLayer_BehaviorConnectionMode_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_BehaviorAdditiveMode
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_BehaviorAdditiveMode final
{
public:
	struct FPoseLink                              InPoseForPlayerBehavior;                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_BehaviorAdditiveMode_0;                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_BehaviorAdditiveMode) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_BehaviorAdditiveMode");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_BehaviorAdditiveMode) == 0x000020, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_BehaviorAdditiveMode");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_BehaviorAdditiveMode, InPoseForPlayerBehavior) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_BehaviorAdditiveMode::InPoseForPlayerBehavior' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_BehaviorAdditiveMode, AnimLayer_BehaviorAdditiveMode_0) == 0x000010, "Member 'ABP_Player_HandHolding_C_AnimLayer_BehaviorAdditiveMode::AnimLayer_BehaviorAdditiveMode_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimLayer_AimOffset
// 0x0020 (0x0020 - 0x0000)
struct ABP_Player_HandHolding_C_AnimLayer_AimOffset final
{
public:
	struct FPoseLink                              InPoseForAimOffset;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimLayer_AimOffset_0;                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimLayer_AimOffset) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimLayer_AimOffset");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimLayer_AimOffset) == 0x000020, "Wrong size on ABP_Player_HandHolding_C_AnimLayer_AimOffset");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_AimOffset, InPoseForAimOffset) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimLayer_AimOffset::InPoseForAimOffset' has a wrong offset!");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimLayer_AimOffset, AnimLayer_AimOffset_0) == 0x000010, "Member 'ABP_Player_HandHolding_C_AnimLayer_AimOffset::AnimLayer_AimOffset_0' has a wrong offset!");

// Function ABP_Player_HandHolding.ABP_Player_HandHolding_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Player_HandHolding_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Player_HandHolding_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Player_HandHolding_C_AnimGraph");
static_assert(sizeof(ABP_Player_HandHolding_C_AnimGraph) == 0x000010, "Wrong size on ABP_Player_HandHolding_C_AnimGraph");
static_assert(offsetof(ABP_Player_HandHolding_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Player_HandHolding_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

