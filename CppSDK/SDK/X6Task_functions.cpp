#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6Task

#include "Basic.hpp"

#include "X6Task_classes.hpp"
#include "X6Task_parameters.hpp"


namespace SDK
{

// Function X6Task.X6TaskBase.InovkeTaskStart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName*                            EventName                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UX6TaskBase::InovkeTaskStart(class FName* EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6TaskBase", "InovkeTaskStart");

	Params::X6TaskBase_InovkeTaskStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (EventName != nullptr)
		*EventName = Parms.EventName;
}


// Function X6Task.X6TaskBase.OnTaskFinish
// (Native, Public, BlueprintCallable)

void UX6TaskBase::OnTaskFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6TaskBase", "OnTaskFinish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function X6Task.X6TaskBase.OnTaskFinishEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsLogicalFinish                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UX6TaskBase::OnTaskFinishEvent(bool bIsLogicalFinish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6TaskBase", "OnTaskFinishEvent");

	Params::X6TaskBase_OnTaskFinishEvent Parms{};

	Parms.bIsLogicalFinish = bIsLogicalFinish;

	UObject::ProcessEvent(Func, &Parms);
}


// Function X6Task.X6TaskBase.OnTaskStart
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName*                            EventName                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UX6TaskBase::OnTaskStart(class FName* EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6TaskBase", "OnTaskStart");

	Params::X6TaskBase_OnTaskStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (EventName != nullptr)
		*EventName = Parms.EventName;
}


// Function X6Task.X6TaskBase.OnTaskTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UX6TaskBase::OnTaskTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6TaskBase", "OnTaskTick");

	Params::X6TaskBase_OnTaskTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function X6Task.X6TaskAsyncBase.InovkeAsyncTaskStart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName*                            EventName                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UX6TaskAsyncBase::InovkeAsyncTaskStart(class FName* EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("X6TaskAsyncBase", "InovkeAsyncTaskStart");

	Params::X6TaskAsyncBase_InovkeAsyncTaskStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (EventName != nullptr)
		*EventName = Parms.EventName;
}

}

