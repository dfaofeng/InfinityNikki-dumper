#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HDiffPatch

#include "Basic.hpp"

#include "HDiffPatch_classes.hpp"
#include "HDiffPatch_parameters.hpp"


namespace SDK
{

// Function HDiffPatch.FlibHDiffPatchHelper.CreateCompressedDiff
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    NewData                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    OldData                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<uint8>*                          OutPatch                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFlibHDiffPatchHelper::CreateCompressedDiff(const TArray<uint8>& NewData, const TArray<uint8>& OldData, TArray<uint8>* OutPatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FlibHDiffPatchHelper", "CreateCompressedDiff");

	Params::FlibHDiffPatchHelper_CreateCompressedDiff Parms{};

	Parms.NewData = std::move(NewData);
	Parms.OldData = std::move(OldData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPatch != nullptr)
		*OutPatch = std::move(Parms.OutPatch);

	return Parms.ReturnValue;
}


// Function HDiffPatch.FlibHDiffPatchHelper.LoadFileToArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> UFlibHDiffPatchHelper::LoadFileToArray(const class FString& InPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FlibHDiffPatchHelper", "LoadFileToArray");

	Params::FlibHDiffPatchHelper_LoadFileToArray Parms{};

	Parms.InPath = std::move(InPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HDiffPatch.FlibHDiffPatchHelper.PatchCompressedDiff
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    OldData                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    PatchData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<uint8>*                          OutNewData                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFlibHDiffPatchHelper::PatchCompressedDiff(const TArray<uint8>& OldData, const TArray<uint8>& PatchData, TArray<uint8>* OutNewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FlibHDiffPatchHelper", "PatchCompressedDiff");

	Params::FlibHDiffPatchHelper_PatchCompressedDiff Parms{};

	Parms.OldData = std::move(OldData);
	Parms.PatchData = std::move(PatchData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNewData != nullptr)
		*OutNewData = std::move(Parms.OutNewData);

	return Parms.ReturnValue;
}


// Function HDiffPatch.FlibHDiffPatchHelper.SaveArrayToFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    InBytes                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    InPath                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFlibHDiffPatchHelper::SaveArrayToFile(const TArray<uint8>& InBytes, const class FString& InPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FlibHDiffPatchHelper", "SaveArrayToFile");

	Params::FlibHDiffPatchHelper_SaveArrayToFile Parms{};

	Parms.InBytes = std::move(InBytes);
	Parms.InPath = std::move(InPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

