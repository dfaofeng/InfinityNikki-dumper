#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HttpDownloader

#include "Basic.hpp"

#include "HttpDownloader_classes.hpp"
#include "HttpDownloader_parameters.hpp"


namespace SDK
{

// Function HttpDownloader.DownloadTaskInfoMgr.BeginTransaction
// (Final, Native, Public, BlueprintCallable)

void UDownloadTaskInfoMgr::BeginTransaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownloadTaskInfoMgr", "BeginTransaction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HttpDownloader.DownloadTaskInfoMgr.ClearAllCache
// (Final, Native, Public, BlueprintCallable)

void UDownloadTaskInfoMgr::ClearAllCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownloadTaskInfoMgr", "ClearAllCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HttpDownloader.DownloadTaskInfoMgr.CloseDB
// (Final, Native, Public, BlueprintCallable)

void UDownloadTaskInfoMgr::CloseDB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownloadTaskInfoMgr", "CloseDB");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HttpDownloader.DownloadTaskInfoMgr.EndTransaction
// (Final, Native, Public, BlueprintCallable)

void UDownloadTaskInfoMgr::EndTransaction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownloadTaskInfoMgr", "EndTransaction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function HttpDownloader.DownloadTaskInfoMgr.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CacheDir                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InDBName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InTableName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDownloadTaskInfoMgr::Init(const class FString& CacheDir, const class FString& InDBName, const class FString& InTableName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownloadTaskInfoMgr", "Init");

	Params::DownloadTaskInfoMgr_Init Parms{};

	Parms.CacheDir = std::move(CacheDir);
	Parms.InDBName = std::move(InDBName);
	Parms.InTableName = std::move(InTableName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HttpDownloader.DownloadTaskInfoMgr.SyncDownloadTasks
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FSimpleHttpDownloadTaskInfo>&newlyCreatedTask                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDownloadTaskInfoMgr::SyncDownloadTasks(const TArray<struct FSimpleHttpDownloadTaskInfo>& newlyCreatedTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownloadTaskInfoMgr", "SyncDownloadTasks");

	Params::DownloadTaskInfoMgr_SyncDownloadTasks Parms{};

	Parms.newlyCreatedTask = std::move(newlyCreatedTask);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HttpDownloader.DownloadTaskInfoMgr.UpdateDownloadTaskStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDownloadTaskInfoStatus                 Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDownloadTaskInfoMgr::UpdateDownloadTaskStatus(const class FString& URL, EDownloadTaskInfoStatus Status, int32 Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownloadTaskInfoMgr", "UpdateDownloadTaskStatus");

	Params::DownloadTaskInfoMgr_UpdateDownloadTaskStatus Parms{};

	Parms.URL = std::move(URL);
	Parms.Status = Status;
	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HttpDownloader.DownloadTaskInfoMgr.GetFinalDownloadedTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FString, struct FSimpleHttpDownloadTaskInfo>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FString, struct FSimpleHttpDownloadTaskInfo> UDownloadTaskInfoMgr::GetFinalDownloadedTasks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownloadTaskInfoMgr", "GetFinalDownloadedTasks");

	Params::DownloadTaskInfoMgr_GetFinalDownloadedTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HttpDownloader.DownloadTaskInfoMgr.GetFinalShouldDownloadTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FString, struct FSimpleHttpDownloadTaskInfo>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FString, struct FSimpleHttpDownloadTaskInfo> UDownloadTaskInfoMgr::GetFinalShouldDownloadTasks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownloadTaskInfoMgr", "GetFinalShouldDownloadTasks");

	Params::DownloadTaskInfoMgr_GetFinalShouldDownloadTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HttpDownloader.DownloadTaskInfoMgr.GetPreDownloadedTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FString, struct FSimpleHttpDownloadTaskInfo>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FString, struct FSimpleHttpDownloadTaskInfo> UDownloadTaskInfoMgr::GetPreDownloadedTasks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownloadTaskInfoMgr", "GetPreDownloadedTasks");

	Params::DownloadTaskInfoMgr_GetPreDownloadedTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HttpDownloader.SimpleDownloader.AddFilesToDownload
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FSimpleHttpDownloadTaskInfo>&DownloadTasks                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> USimpleDownloader::AddFilesToDownload(const TArray<struct FSimpleHttpDownloadTaskInfo>& DownloadTasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleDownloader", "AddFilesToDownload");

	Params::SimpleDownloader_AddFilesToDownload Parms{};

	Parms.DownloadTasks = std::move(DownloadTasks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HttpDownloader.SimpleDownloader.GetDownloadTaskInfoByID
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   RequestID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSimpleHttpDownloadTaskInfo*     OutTaskInfo                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USimpleDownloader::GetDownloadTaskInfoByID(int32 RequestID, struct FSimpleHttpDownloadTaskInfo* OutTaskInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleDownloader", "GetDownloadTaskInfoByID");

	Params::SimpleDownloader_GetDownloadTaskInfoByID Parms{};

	Parms.RequestID = RequestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTaskInfo != nullptr)
		*OutTaskInfo = std::move(Parms.OutTaskInfo);

	return Parms.ReturnValue;
}


// Function HttpDownloader.SimpleDownloader.GetResponseContentByID
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   RequestID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>*                          Content                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USimpleDownloader::GetResponseContentByID(int32 RequestID, TArray<uint8>* Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleDownloader", "GetResponseContentByID");

	Params::SimpleDownloader_GetResponseContentByID Parms{};

	Parms.RequestID = RequestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Content != nullptr)
		*Content = std::move(Parms.Content);

	return Parms.ReturnValue;
}


// Function HttpDownloader.SimpleDownloader.IsDownloadTaskUsingStreamMode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSimpleHttpDownloadTaskInfo*     InTaskInfo                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USimpleDownloader::IsDownloadTaskUsingStreamMode(struct FSimpleHttpDownloadTaskInfo* InTaskInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleDownloader", "IsDownloadTaskUsingStreamMode");

	Params::SimpleDownloader_IsDownloadTaskUsingStreamMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InTaskInfo != nullptr)
		*InTaskInfo = std::move(Parms.InTaskInfo);

	return Parms.ReturnValue;
}


// Function HttpDownloader.SimpleDownloader.IsFinishDownload
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  SuccessCount                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  FailedCount                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USimpleDownloader::IsFinishDownload(int32* SuccessCount, int32* FailedCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleDownloader", "IsFinishDownload");

	Params::SimpleDownloader_IsFinishDownload Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SuccessCount != nullptr)
		*SuccessCount = Parms.SuccessCount;

	if (FailedCount != nullptr)
		*FailedCount = Parms.FailedCount;

	return Parms.ReturnValue;
}


// Function HttpDownloader.SimpleDownloader.SetMaxRequestCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MaxCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleDownloader::SetMaxRequestCount(int32 MaxCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleDownloader", "SetMaxRequestCount");

	Params::SimpleDownloader_SetMaxRequestCount Parms{};

	Parms.MaxCount = MaxCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HttpDownloader.SimpleDownloader.SetMaxRetryCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MaxCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USimpleDownloader::SetMaxRetryCount(int32 MaxCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleDownloader", "SetMaxRetryCount");

	Params::SimpleDownloader_SetMaxRetryCount Parms{};

	Parms.MaxCount = MaxCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HttpDownloader.SimpleDownloader.SetStreamingModeFileExt
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            Exts                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USimpleDownloader::SetStreamingModeFileExt(const TArray<class FString>& Exts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleDownloader", "SetStreamingModeFileExt");

	Params::SimpleDownloader_SetStreamingModeFileExt Parms{};

	Parms.Exts = std::move(Exts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function HttpDownloader.SimpleHashChecker.AddTasksToCheck
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FSimpleHttpDownloadTaskInfo>&Tasks                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USimpleHashChecker::AddTasksToCheck(const TArray<struct FSimpleHttpDownloadTaskInfo>& Tasks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHashChecker", "AddTasksToCheck");

	Params::SimpleHashChecker_AddTasksToCheck Parms{};

	Parms.Tasks = std::move(Tasks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function HttpDownloader.SimpleHashChecker.StartCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const TArray<struct FSimpleHttpDownloadTaskInfo>& CurrentSuccessTask, const TArray<struct FSimpleHttpDownloadTaskInfo>& CurrentFailedTask)>Progress                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const TArray<struct FSimpleHttpDownloadTaskInfo>& AllFailedFileName)>AllComplete                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USimpleHashChecker::StartCheck(TDelegate<void(const TArray<struct FSimpleHttpDownloadTaskInfo>& CurrentSuccessTask, const TArray<struct FSimpleHttpDownloadTaskInfo>& CurrentFailedTask)> Progress, TDelegate<void(const TArray<struct FSimpleHttpDownloadTaskInfo>& AllFailedFileName)> AllComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleHashChecker", "StartCheck");

	Params::SimpleHashChecker_StartCheck Parms{};

	Parms.Progress = Progress;
	Parms.AllComplete = AllComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

