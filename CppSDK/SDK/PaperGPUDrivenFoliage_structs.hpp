#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperGPUDrivenFoliage

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum PaperGPUDrivenFoliage.ESectorDevideOptions
// NumValues: 0x0004
enum class ESectorDevideOptions : uint8
{
	FixedGrids                               = 0,
	BottonKDTree                             = 1,
	FixedKDTree                              = 2,
	ESectorDevideOptions_MAX                 = 3,
};

// ScriptStruct PaperGPUDrivenFoliage.PaperGPUDrivenFoliageClusterData
// 0x00E8 (0x00E8 - 0x0000)
struct FPaperGPUDrivenFoliageClusterData final
{
public:
	struct FSoftObjectPath                        ClusterDataSavePath;                               // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelMarkerID;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClusterID;                                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContainInstanceNum;                                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContainPatchNum;                                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ClusterContainedSectionIDs;                        // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       ClusterBound;                                      // 0x0040(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       CullClusterBound;                                  // 0x0078(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UCompressedStreamedGPUDrivenFoliageClusterInstanceAssetData* TemptLoadCompressedClusterData; // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x30];                                      // 0x00B8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperGPUDrivenFoliageClusterData) == 0x000008, "Wrong alignment on FPaperGPUDrivenFoliageClusterData");
static_assert(sizeof(FPaperGPUDrivenFoliageClusterData) == 0x0000E8, "Wrong size on FPaperGPUDrivenFoliageClusterData");
static_assert(offsetof(FPaperGPUDrivenFoliageClusterData, ClusterDataSavePath) == 0x000000, "Member 'FPaperGPUDrivenFoliageClusterData::ClusterDataSavePath' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageClusterData, LevelMarkerID) == 0x000020, "Member 'FPaperGPUDrivenFoliageClusterData::LevelMarkerID' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageClusterData, ClusterID) == 0x000024, "Member 'FPaperGPUDrivenFoliageClusterData::ClusterID' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageClusterData, ContainInstanceNum) == 0x000028, "Member 'FPaperGPUDrivenFoliageClusterData::ContainInstanceNum' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageClusterData, ContainPatchNum) == 0x00002C, "Member 'FPaperGPUDrivenFoliageClusterData::ContainPatchNum' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageClusterData, ClusterContainedSectionIDs) == 0x000030, "Member 'FPaperGPUDrivenFoliageClusterData::ClusterContainedSectionIDs' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageClusterData, ClusterBound) == 0x000040, "Member 'FPaperGPUDrivenFoliageClusterData::ClusterBound' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageClusterData, CullClusterBound) == 0x000078, "Member 'FPaperGPUDrivenFoliageClusterData::CullClusterBound' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageClusterData, TemptLoadCompressedClusterData) == 0x0000B0, "Member 'FPaperGPUDrivenFoliageClusterData::TemptLoadCompressedClusterData' has a wrong offset!");

// ScriptStruct PaperGPUDrivenFoliage.AGFGPUDrivenFoliageMeshVertex
// 0x0018 (0x0018 - 0x0000)
struct FAGFGPUDrivenFoliageMeshVertex final
{
public:
	struct FVector3f                              Position;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPackedNormal                          TangentX;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPackedNormal                          TangentZ;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAGFGPUDrivenFoliageMeshVertex) == 0x000004, "Wrong alignment on FAGFGPUDrivenFoliageMeshVertex");
static_assert(sizeof(FAGFGPUDrivenFoliageMeshVertex) == 0x000018, "Wrong size on FAGFGPUDrivenFoliageMeshVertex");
static_assert(offsetof(FAGFGPUDrivenFoliageMeshVertex, Position) == 0x000000, "Member 'FAGFGPUDrivenFoliageMeshVertex::Position' has a wrong offset!");
static_assert(offsetof(FAGFGPUDrivenFoliageMeshVertex, TangentX) == 0x00000C, "Member 'FAGFGPUDrivenFoliageMeshVertex::TangentX' has a wrong offset!");
static_assert(offsetof(FAGFGPUDrivenFoliageMeshVertex, TangentZ) == 0x000010, "Member 'FAGFGPUDrivenFoliageMeshVertex::TangentZ' has a wrong offset!");
static_assert(offsetof(FAGFGPUDrivenFoliageMeshVertex, Color) == 0x000014, "Member 'FAGFGPUDrivenFoliageMeshVertex::Color' has a wrong offset!");

// ScriptStruct PaperGPUDrivenFoliage.PFoliagePageSectionData
// 0x0078 (0x0078 - 0x0000)
struct FPFoliagePageSectionData final
{
public:
	uint32                                        VertexOffset;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        IndiceOffset;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VertexCount;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        IndiceCount;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSectionFirstPatchOffset;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSectionNum;                                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSectionIndex;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionIndex;                                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODIndex;                                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeshIndex;                                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnlightenUVBufferOffset;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxSphereBounds                       SectionBound;                                      // 0x0030(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinScreenSize;                                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScreenSize;                                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstanceStartCullDis;                              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstanceEndCullDis;                                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPFoliagePageSectionData) == 0x000008, "Wrong alignment on FPFoliagePageSectionData");
static_assert(sizeof(FPFoliagePageSectionData) == 0x000078, "Wrong size on FPFoliagePageSectionData");
static_assert(offsetof(FPFoliagePageSectionData, VertexOffset) == 0x000000, "Member 'FPFoliagePageSectionData::VertexOffset' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, IndiceOffset) == 0x000004, "Member 'FPFoliagePageSectionData::IndiceOffset' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, VertexCount) == 0x000008, "Member 'FPFoliagePageSectionData::VertexCount' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, IndiceCount) == 0x00000C, "Member 'FPFoliagePageSectionData::IndiceCount' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, PageSectionFirstPatchOffset) == 0x000010, "Member 'FPFoliagePageSectionData::PageSectionFirstPatchOffset' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, PageSectionNum) == 0x000014, "Member 'FPFoliagePageSectionData::PageSectionNum' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, PageSectionIndex) == 0x000018, "Member 'FPFoliagePageSectionData::PageSectionIndex' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, SectionIndex) == 0x00001C, "Member 'FPFoliagePageSectionData::SectionIndex' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, LODIndex) == 0x000020, "Member 'FPFoliagePageSectionData::LODIndex' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, MeshIndex) == 0x000024, "Member 'FPFoliagePageSectionData::MeshIndex' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, EnlightenUVBufferOffset) == 0x000028, "Member 'FPFoliagePageSectionData::EnlightenUVBufferOffset' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, SectionBound) == 0x000030, "Member 'FPFoliagePageSectionData::SectionBound' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, MinScreenSize) == 0x000068, "Member 'FPFoliagePageSectionData::MinScreenSize' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, MaxScreenSize) == 0x00006C, "Member 'FPFoliagePageSectionData::MaxScreenSize' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, InstanceStartCullDis) == 0x000070, "Member 'FPFoliagePageSectionData::InstanceStartCullDis' has a wrong offset!");
static_assert(offsetof(FPFoliagePageSectionData, InstanceEndCullDis) == 0x000074, "Member 'FPFoliagePageSectionData::InstanceEndCullDis' has a wrong offset!");

// ScriptStruct PaperGPUDrivenFoliage.LODProxyPrimitiveBounds
// 0x0050 (0x0050 - 0x0000)
struct FLODProxyPrimitiveBounds final
{
public:
	struct FBoxSphereBounds                       BoxSphereBounds;                                   // 0x0000(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDrawDistanceSq;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLODProxyPrimitiveBounds) == 0x000008, "Wrong alignment on FLODProxyPrimitiveBounds");
static_assert(sizeof(FLODProxyPrimitiveBounds) == 0x000050, "Wrong size on FLODProxyPrimitiveBounds");
static_assert(offsetof(FLODProxyPrimitiveBounds, BoxSphereBounds) == 0x000000, "Member 'FLODProxyPrimitiveBounds::BoxSphereBounds' has a wrong offset!");
static_assert(offsetof(FLODProxyPrimitiveBounds, AssetName) == 0x000038, "Member 'FLODProxyPrimitiveBounds::AssetName' has a wrong offset!");
static_assert(offsetof(FLODProxyPrimitiveBounds, MinDrawDistanceSq) == 0x000048, "Member 'FLODProxyPrimitiveBounds::MinDrawDistanceSq' has a wrong offset!");

// ScriptStruct PaperGPUDrivenFoliage.GPUDrivenMeshReplaceTableStructInfo
// 0x0020 (0x0028 - 0x0008)
struct FGPUDrivenMeshReplaceTableStructInfo final : public FTableRowBase
{
public:
	class FString                                 OriginalMeshName;                                  // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplaceMeshName;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGPUDrivenMeshReplaceTableStructInfo) == 0x000008, "Wrong alignment on FGPUDrivenMeshReplaceTableStructInfo");
static_assert(sizeof(FGPUDrivenMeshReplaceTableStructInfo) == 0x000028, "Wrong size on FGPUDrivenMeshReplaceTableStructInfo");
static_assert(offsetof(FGPUDrivenMeshReplaceTableStructInfo, OriginalMeshName) == 0x000008, "Member 'FGPUDrivenMeshReplaceTableStructInfo::OriginalMeshName' has a wrong offset!");
static_assert(offsetof(FGPUDrivenMeshReplaceTableStructInfo, ReplaceMeshName) == 0x000018, "Member 'FGPUDrivenMeshReplaceTableStructInfo::ReplaceMeshName' has a wrong offset!");

// ScriptStruct PaperGPUDrivenFoliage.PaperGPUDrivenFoliageSectorData
// 0x0238 (0x0238 - 0x0000)
struct FPaperGPUDrivenFoliageSectorData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxSphereBounds                       SectorBound;                                       // 0x0008(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SectorID;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AllGeneratedSrcMeshNames;                          // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 RelatedFoliagePageIndices;                         // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContainedPatchNum;                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        InstanceDataSavePath;                              // 0x0070(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    AllSrcStaticMeshes;                                // 0x0090(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class UCompressedStreamedGPUDrivenFoliageSectorInstanceAssetData* TemptLoadCompressedInstanceData; // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x190];                                     // 0x00A8(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperGPUDrivenFoliageSectorData) == 0x000008, "Wrong alignment on FPaperGPUDrivenFoliageSectorData");
static_assert(sizeof(FPaperGPUDrivenFoliageSectorData) == 0x000238, "Wrong size on FPaperGPUDrivenFoliageSectorData");
static_assert(offsetof(FPaperGPUDrivenFoliageSectorData, SectorBound) == 0x000008, "Member 'FPaperGPUDrivenFoliageSectorData::SectorBound' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageSectorData, SectorID) == 0x000040, "Member 'FPaperGPUDrivenFoliageSectorData::SectorID' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageSectorData, AllGeneratedSrcMeshNames) == 0x000048, "Member 'FPaperGPUDrivenFoliageSectorData::AllGeneratedSrcMeshNames' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageSectorData, RelatedFoliagePageIndices) == 0x000058, "Member 'FPaperGPUDrivenFoliageSectorData::RelatedFoliagePageIndices' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageSectorData, ContainedPatchNum) == 0x000068, "Member 'FPaperGPUDrivenFoliageSectorData::ContainedPatchNum' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageSectorData, InstanceDataSavePath) == 0x000070, "Member 'FPaperGPUDrivenFoliageSectorData::InstanceDataSavePath' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageSectorData, AllSrcStaticMeshes) == 0x000090, "Member 'FPaperGPUDrivenFoliageSectorData::AllSrcStaticMeshes' has a wrong offset!");
static_assert(offsetof(FPaperGPUDrivenFoliageSectorData, TemptLoadCompressedInstanceData) == 0x0000A0, "Member 'FPaperGPUDrivenFoliageSectorData::TemptLoadCompressedInstanceData' has a wrong offset!");

// ScriptStruct PaperGPUDrivenFoliage.VirtualGrassSharedData
// 0x0040 (0x0040 - 0x0000)
struct FVirtualGrassSharedData final
{
public:
	struct FSoftObjectPath                        MeshDataSavePath;                                  // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCompressedStreamedVirtualGrassPageSectionData* TemptPrebakeData;                          // 0x0020(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVirtualGrassSharedData) == 0x000008, "Wrong alignment on FVirtualGrassSharedData");
static_assert(sizeof(FVirtualGrassSharedData) == 0x000040, "Wrong size on FVirtualGrassSharedData");
static_assert(offsetof(FVirtualGrassSharedData, MeshDataSavePath) == 0x000000, "Member 'FVirtualGrassSharedData::MeshDataSavePath' has a wrong offset!");
static_assert(offsetof(FVirtualGrassSharedData, TemptPrebakeData) == 0x000020, "Member 'FVirtualGrassSharedData::TemptPrebakeData' has a wrong offset!");

}

