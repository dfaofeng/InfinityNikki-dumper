#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerRegularMovementCompV3

#include "Basic.hpp"

#include "BP_PlayerRegularMovementCompV3_classes.hpp"
#include "BP_PlayerRegularMovementCompV3_parameters.hpp"


namespace SDK
{

// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.SyncAnimStatesWithTick
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularMovementCompV3_C::SyncAnimStatesWithTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "SyncAnimStatesWithTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "ReceiveEndPlay");

	Params::BP_PlayerRegularMovementCompV3_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_PlayerRegularMovementCompV3_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.NotifyCurAllowedGaitChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// ERegularLocomotionType                  NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERegularLocomotionType                  CurrentGait                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::NotifyCurAllowedGaitChanged(ERegularLocomotionType NewGait, ERegularLocomotionType CurrentGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "NotifyCurAllowedGaitChanged");

	Params::BP_PlayerRegularMovementCompV3_C_NotifyCurAllowedGaitChanged Parms{};

	Parms.NewGait = NewGait;
	Parms.CurrentGait = CurrentGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.NotifyCurActualGaitChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// ERegularLocomotionType                  NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERegularLocomotionType                  CurrentGait                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::NotifyCurActualGaitChanged(ERegularLocomotionType NewGait, ERegularLocomotionType CurrentGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "NotifyCurActualGaitChanged");

	Params::BP_PlayerRegularMovementCompV3_C_NotifyCurActualGaitChanged Parms{};

	Parms.NewGait = NewGait;
	Parms.CurrentGait = CurrentGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.ExecuteUbergraph_BP_PlayerRegularMovementCompV3
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::ExecuteUbergraph_BP_PlayerRegularMovementCompV3(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "ExecuteUbergraph_BP_PlayerRegularMovementCompV3");

	Params::BP_PlayerRegularMovementCompV3_C_ExecuteUbergraph_BP_PlayerRegularMovementCompV3 Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_PlayerStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsInState_AimMode                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BPI_Get_PlayerStates(bool* IsInState_AimMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BPI_Get_PlayerStates");

	Params::BP_PlayerRegularMovementCompV3_C_BPI_Get_PlayerStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInState_AimMode != nullptr)
		*IsInState_AimMode = Parms.IsInState_AimMode;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_MaxSpeedValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 CurMinAnalogWalkSpeed                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CurConfigMaxSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CurActualMaxSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BPI_Get_MaxSpeedValues(double* CurMinAnalogWalkSpeed, double* CurConfigMaxSpeed, double* CurActualMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BPI_Get_MaxSpeedValues");

	Params::BP_PlayerRegularMovementCompV3_C_BPI_Get_MaxSpeedValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurMinAnalogWalkSpeed != nullptr)
		*CurMinAnalogWalkSpeed = Parms.CurMinAnalogWalkSpeed;

	if (CurConfigMaxSpeed != nullptr)
		*CurConfigMaxSpeed = Parms.CurConfigMaxSpeed;

	if (CurActualMaxSpeed != nullptr)
		*CurActualMaxSpeed = Parms.CurActualMaxSpeed;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_EssentialValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         InVelocity                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         InCurrentAcceleration                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InMaxAcceleration                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InTurnAroundAngle                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InSlopeAngle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InStartTurnAroundAngle                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InCurConfigMaxSpeed                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BPI_Get_EssentialValues(struct FVector* InVelocity, struct FVector* InCurrentAcceleration, double* InMaxAcceleration, double* InTurnAroundAngle, double* InSlopeAngle, double* InStartTurnAroundAngle, double* InCurConfigMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BPI_Get_EssentialValues");

	Params::BP_PlayerRegularMovementCompV3_C_BPI_Get_EssentialValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InVelocity != nullptr)
		*InVelocity = std::move(Parms.InVelocity);

	if (InCurrentAcceleration != nullptr)
		*InCurrentAcceleration = std::move(Parms.InCurrentAcceleration);

	if (InMaxAcceleration != nullptr)
		*InMaxAcceleration = Parms.InMaxAcceleration;

	if (InTurnAroundAngle != nullptr)
		*InTurnAroundAngle = Parms.InTurnAroundAngle;

	if (InSlopeAngle != nullptr)
		*InSlopeAngle = Parms.InSlopeAngle;

	if (InStartTurnAroundAngle != nullptr)
		*InStartTurnAroundAngle = Parms.InStartTurnAroundAngle;

	if (InCurConfigMaxSpeed != nullptr)
		*InCurConfigMaxSpeed = Parms.InCurConfigMaxSpeed;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_CurrentGroundStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode*                          PawnMovementMode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERegularLocomotionType*                 AllowedGait                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerMovementScenarios*               MovementScenario                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputDeviceKeyType*                    CurInputDeviceKeyType                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BPI_Get_CurrentGroundStates(EMovementMode* PawnMovementMode, ERegularLocomotionType* AllowedGait, EPlayerMovementScenarios* MovementScenario, EInputDeviceKeyType* CurInputDeviceKeyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BPI_Get_CurrentGroundStates");

	Params::BP_PlayerRegularMovementCompV3_C_BPI_Get_CurrentGroundStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PawnMovementMode != nullptr)
		*PawnMovementMode = Parms.PawnMovementMode;

	if (AllowedGait != nullptr)
		*AllowedGait = Parms.AllowedGait;

	if (MovementScenario != nullptr)
		*MovementScenario = Parms.MovementScenario;

	if (CurInputDeviceKeyType != nullptr)
		*CurInputDeviceKeyType = Parms.CurInputDeviceKeyType;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_ConfigData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 WalkSpeed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 RunSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 SprintSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BPI_Get_ConfigData(double* WalkSpeed, double* RunSpeed, double* SprintSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BPI_Get_ConfigData");

	Params::BP_PlayerRegularMovementCompV3_C_BPI_Get_ConfigData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WalkSpeed != nullptr)
		*WalkSpeed = Parms.WalkSpeed;

	if (RunSpeed != nullptr)
		*RunSpeed = Parms.RunSpeed;

	if (SprintSpeed != nullptr)
		*SprintSpeed = Parms.SprintSpeed;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BPI_Get_BalanceBeamStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanMoveOnValidInput                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsEnterTowardSideOfBeam                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsCurInputValid                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BPI_Get_BalanceBeamStates(bool* CanMoveOnValidInput, bool* IsEnterTowardSideOfBeam, bool* IsCurInputValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BPI_Get_BalanceBeamStates");

	Params::BP_PlayerRegularMovementCompV3_C_BPI_Get_BalanceBeamStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanMoveOnValidInput != nullptr)
		*CanMoveOnValidInput = Parms.CanMoveOnValidInput;

	if (IsEnterTowardSideOfBeam != nullptr)
		*IsEnterTowardSideOfBeam = Parms.IsEnterTowardSideOfBeam;

	if (IsCurInputValid != nullptr)
		*IsCurInputValid = Parms.IsCurInputValid;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_VisitorSetAdditiveMovementMode_Aiming
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnter                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_VisitorSetAdditiveMovementMode_Aiming(bool bEnter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_VisitorSetAdditiveMovementMode_Aiming");

	Params::BP_PlayerRegularMovementCompV3_C_BP_VisitorSetAdditiveMovementMode_Aiming Parms{};

	Parms.bEnter = bEnter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SyncCMCValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCharacterMovementComponent*      CMC                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// double                                  MaxWalkSpeed                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinAnalogWalkSpeed                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxAcceleration                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BrakingDecelerationWalking                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GroundFriction                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_SyncCMCValue(class UCharacterMovementComponent* CMC, double MaxWalkSpeed, double MinAnalogWalkSpeed, double MaxAcceleration, double BrakingDecelerationWalking, double GroundFriction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_SyncCMCValue");

	Params::BP_PlayerRegularMovementCompV3_C_BP_SyncCMCValue Parms{};

	Parms.CMC = CMC;
	Parms.MaxWalkSpeed = MaxWalkSpeed;
	Parms.MinAnalogWalkSpeed = MinAnalogWalkSpeed;
	Parms.MaxAcceleration = MaxAcceleration;
	Parms.BrakingDecelerationWalking = BrakingDecelerationWalking;
	Parms.GroundFriction = GroundFriction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SyncAnimStatesWithTickV2
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularMovementCompV3_C::BP_SyncAnimStatesWithTickV2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_SyncAnimStatesWithTickV2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SyncAnimStatesWithTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurFloorAngle_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CurTurnAroundAngle                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCurInputValid                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERegularLocomotionType                  CurrentAllowedGait_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLogicInStateAiming                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_SyncAnimStatesWithTick(double CurFloorAngle_0, double CurTurnAroundAngle, bool IsCurInputValid, ERegularLocomotionType CurrentAllowedGait_0, bool IsLogicInStateAiming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_SyncAnimStatesWithTick");

	Params::BP_PlayerRegularMovementCompV3_C_BP_SyncAnimStatesWithTick Parms{};

	Parms.CurFloorAngle_0 = CurFloorAngle_0;
	Parms.CurTurnAroundAngle = CurTurnAroundAngle;
	Parms.IsCurInputValid = IsCurInputValid;
	Parms.CurrentAllowedGait_0 = CurrentAllowedGait_0;
	Parms.IsLogicInStateAiming = IsLogicInStateAiming;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_StopActiveTurnInplace
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularMovementCompV3_C::BP_StopActiveTurnInplace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_StopActiveTurnInplace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SetRegularMovementEnable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_SetRegularMovementEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_SetRegularMovementEnable");

	Params::BP_PlayerRegularMovementCompV3_C_BP_SetRegularMovementEnable Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SetInplaceTurnAroundAngle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurTargetTurnAroundAngle                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  LowerBoundOfAngleOfTurnInplace                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPreventRotationMovementWhenTurningInPlace             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_SetInplaceTurnAroundAngle(double CurTargetTurnAroundAngle, double LowerBoundOfAngleOfTurnInplace, bool bPreventRotationMovementWhenTurningInPlace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_SetInplaceTurnAroundAngle");

	Params::BP_PlayerRegularMovementCompV3_C_BP_SetInplaceTurnAroundAngle Parms{};

	Parms.CurTargetTurnAroundAngle = CurTargetTurnAroundAngle;
	Parms.LowerBoundOfAngleOfTurnInplace = LowerBoundOfAngleOfTurnInplace;
	Parms.bPreventRotationMovementWhenTurningInPlace = bPreventRotationMovementWhenTurningInPlace;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SetForceMaxInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bForceMaxInput                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_SetForceMaxInput(bool bForceMaxInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_SetForceMaxInput");

	Params::BP_PlayerRegularMovementCompV3_C_BP_SetForceMaxInput Parms{};

	Parms.bForceMaxInput = bForceMaxInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SetEnableFootIK
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bImmediately                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_SetEnableFootIK(bool bEnable, bool bImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_SetEnableFootIK");

	Params::BP_PlayerRegularMovementCompV3_C_BP_SetEnableFootIK Parms{};

	Parms.bEnable = bEnable;
	Parms.bImmediately = bImmediately;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_SetAIInplaceTurnAroundAngle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurInplaceTurnAroundAngle                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_SetAIInplaceTurnAroundAngle(double CurInplaceTurnAroundAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_SetAIInplaceTurnAroundAngle");

	Params::BP_PlayerRegularMovementCompV3_C_BP_SetAIInplaceTurnAroundAngle Parms{};

	Parms.CurInplaceTurnAroundAngle = CurInplaceTurnAroundAngle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ResetOwnerMovementConfig
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularMovementCompV3_C::BP_ResetOwnerMovementConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ResetOwnerMovementConfig");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ResetMaxAccelerationConfigValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 OldMaxAcceleration                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ResetMaxAccelerationConfigValue(double* OldMaxAcceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ResetMaxAccelerationConfigValue");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ResetMaxAccelerationConfigValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OldMaxAcceleration != nullptr)
		*OldMaxAcceleration = Parms.OldMaxAcceleration;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ResetGroundFrictionConfigValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 OldGroundFriction                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ResetGroundFrictionConfigValue(double* OldGroundFriction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ResetGroundFrictionConfigValue");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ResetGroundFrictionConfigValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OldGroundFriction != nullptr)
		*OldGroundFriction = Parms.OldGroundFriction;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ResetGlideMovementConfig
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularMovementCompV3_C::BP_ResetGlideMovementConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ResetGlideMovementConfig");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ResetGaitMaxWalkSpeedConfigValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularLocomotionType                  Gait                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ResetGaitMaxWalkSpeedConfigValue(ERegularLocomotionType Gait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ResetGaitMaxWalkSpeedConfigValue");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ResetGaitMaxWalkSpeedConfigValue Parms{};

	Parms.Gait = Gait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ResetBrakingDecelerationWalkingConfigValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 OldBrakingDecelerationWalking                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ResetBrakingDecelerationWalkingConfigValue(double* OldBrakingDecelerationWalking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ResetBrakingDecelerationWalkingConfigValue");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ResetBrakingDecelerationWalkingConfigValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OldBrakingDecelerationWalking != nullptr)
		*OldBrakingDecelerationWalking = Parms.OldBrakingDecelerationWalking;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyOwnerMovementConfigByDA
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MovementAllConfigTemplate_C*  NewDataAsset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBP_MovementAllConfigTemplate_C** OldDataAsset                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ModifyOwnerMovementConfigByDA(class UBP_MovementAllConfigTemplate_C* NewDataAsset, class UBP_MovementAllConfigTemplate_C** OldDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ModifyOwnerMovementConfigByDA");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ModifyOwnerMovementConfigByDA Parms{};

	Parms.NewDataAsset = NewDataAsset;

	UObject::ProcessEvent(Func, &Parms);

	if (OldDataAsset != nullptr)
		*OldDataAsset = Parms.OldDataAsset;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyMaxAccelerationConfigValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ModifyMaxAccelerationConfigValue(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ModifyMaxAccelerationConfigValue");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ModifyMaxAccelerationConfigValue Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyGroundFrictionConfigValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ModifyGroundFrictionConfigValue(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ModifyGroundFrictionConfigValue");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ModifyGroundFrictionConfigValue Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyGlideMovementConfig
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewMaxWalkSpeed                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewRotationActorInterpSpeed                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ModifyGlideMovementConfig(double NewMaxWalkSpeed, double NewRotationActorInterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ModifyGlideMovementConfig");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ModifyGlideMovementConfig Parms{};

	Parms.NewMaxWalkSpeed = NewMaxWalkSpeed;
	Parms.NewRotationActorInterpSpeed = NewRotationActorInterpSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyGaitMaxWalkSpeedConfigValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularLocomotionType                  Gait                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxWalkSpeedValue                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ModifyGaitMaxWalkSpeedConfigValue(ERegularLocomotionType Gait, double MaxWalkSpeedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ModifyGaitMaxWalkSpeedConfigValue");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ModifyGaitMaxWalkSpeedConfigValue Parms{};

	Parms.Gait = Gait;
	Parms.MaxWalkSpeedValue = MaxWalkSpeedValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyCurLocomotionAnimSetBySoftRef
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UBP_QuadrupedLocomotion_AnimSet_C>NewAnimSetSoftRef                                      (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ModifyCurLocomotionAnimSetBySoftRef(TSoftObjectPtr<class UBP_QuadrupedLocomotion_AnimSet_C> NewAnimSetSoftRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ModifyCurLocomotionAnimSetBySoftRef");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetBySoftRef Parms{};

	Parms.NewAnimSetSoftRef = NewAnimSetSoftRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyCurLocomotionAnimSetByPath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    NewAnimSetPath                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ModifyCurLocomotionAnimSetByPath(const class FString& NewAnimSetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ModifyCurLocomotionAnimSetByPath");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSetByPath Parms{};

	Parms.NewAnimSetPath = std::move(NewAnimSetPath);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyCurLocomotionAnimSet
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_QuadrupedLocomotion_AnimSet_C*NewAnimSet                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ModifyCurLocomotionAnimSet(class UBP_QuadrupedLocomotion_AnimSet_C* NewAnimSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ModifyCurLocomotionAnimSet");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ModifyCurLocomotionAnimSet Parms{};

	Parms.NewAnimSet = NewAnimSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ModifyBrakingDecelerationWalkingConfigValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ModifyBrakingDecelerationWalkingConfigValue(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ModifyBrakingDecelerationWalkingConfigValue");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ModifyBrakingDecelerationWalkingConfigValue Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_InterruptAITurnAroundBehavior
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PlayerRegularMovementCompV3_C::BP_InterruptAITurnAroundBehavior()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_InterruptAITurnAroundBehavior");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetPlayerCurTurnAroundAngle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 CurrentTurnAroundAngle                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_GetPlayerCurTurnAroundAngle(double* CurrentTurnAroundAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_GetPlayerCurTurnAroundAngle");

	Params::BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurTurnAroundAngle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentTurnAroundAngle != nullptr)
		*CurrentTurnAroundAngle = Parms.CurrentTurnAroundAngle;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetPlayerCurLocomotionStateByCurSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ERegularLocomotionType*                 CurLocomotionType                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_GetPlayerCurLocomotionStateByCurSpeed(ERegularLocomotionType* CurLocomotionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_GetPlayerCurLocomotionStateByCurSpeed");

	Params::BP_PlayerRegularMovementCompV3_C_BP_GetPlayerCurLocomotionStateByCurSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurLocomotionType != nullptr)
		*CurLocomotionType = Parms.CurLocomotionType;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetOwnerIsSimulated
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bOwnerSimulated                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_GetOwnerIsSimulated(bool* bOwnerSimulated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_GetOwnerIsSimulated");

	Params::BP_PlayerRegularMovementCompV3_C_BP_GetOwnerIsSimulated Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bOwnerSimulated != nullptr)
		*bOwnerSimulated = Parms.bOwnerSimulated;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetDesiredGait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularLocomotionType*                 BP_CurrentAllowedGait_0                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_GetDesiredGait(ERegularLocomotionType* BP_CurrentAllowedGait_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_GetDesiredGait");

	Params::BP_PlayerRegularMovementCompV3_C_BP_GetDesiredGait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BP_CurrentAllowedGait_0 != nullptr)
		*BP_CurrentAllowedGait_0 = Parms.BP_CurrentAllowedGait_0;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetCurConfigMaxSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 CurConfigMaxSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_GetCurConfigMaxSpeed(double* CurConfigMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_GetCurConfigMaxSpeed");

	Params::BP_PlayerRegularMovementCompV3_C_BP_GetCurConfigMaxSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurConfigMaxSpeed != nullptr)
		*CurConfigMaxSpeed = Parms.CurConfigMaxSpeed;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_GetAllowGait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularLocomotionType*                 NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_GetAllowGait(ERegularLocomotionType* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_GetAllowGait");

	Params::BP_PlayerRegularMovementCompV3_C_BP_GetAllowGait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ForbidPlayerRegularMovementInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerRegularForbidInputType           RegularForbidInputType                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ForbidPlayerRegularMovementInput(bool Value, EPlayerRegularForbidInputType RegularForbidInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ForbidPlayerRegularMovementInput");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ForbidPlayerRegularMovementInput Parms{};

	Parms.Value = Value;
	Parms.RegularForbidInputType = RegularForbidInputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ExitAdditiveMovementMode_Aiming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_AimModeMovement_CT_C**        OldAimingMovementModeConfig                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ExitAdditiveMovementMode_Aiming(class UBP_AimModeMovement_CT_C** OldAimingMovementModeConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ExitAdditiveMovementMode_Aiming");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ExitAdditiveMovementMode_Aiming Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OldAimingMovementModeConfig != nullptr)
		*OldAimingMovementModeConfig = Parms.OldAimingMovementModeConfig;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_EnterAdditiveMovementMode_Aiming
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_AimModeMovement_CT_C*         NewAimingMovementModeConfig                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_EnterAdditiveMovementMode_Aiming(class UBP_AimModeMovement_CT_C* NewAimingMovementModeConfig, bool* Ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_EnterAdditiveMovementMode_Aiming");

	Params::BP_PlayerRegularMovementCompV3_C_BP_EnterAdditiveMovementMode_Aiming Parms{};

	Parms.NewAimingMovementModeConfig = NewAimingMovementModeConfig;

	UObject::ProcessEvent(Func, &Parms);

	if (Ret != nullptr)
		*Ret = Parms.Ret;
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_EnableInplaceTurnAroundBehavior
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_EnableInplaceTurnAroundBehavior(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_EnableInplaceTurnAroundBehavior");

	Params::BP_PlayerRegularMovementCompV3_C_BP_EnableInplaceTurnAroundBehavior Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_EnableAIInplaceTurnAroundBehavior
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_EnableAIInplaceTurnAroundBehavior(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_EnableAIInplaceTurnAroundBehavior");

	Params::BP_PlayerRegularMovementCompV3_C_BP_EnableAIInplaceTurnAroundBehavior Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_DebugForceEnterSprintGait
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bForceEnterSprintGait                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_DebugForceEnterSprintGait(bool bForceEnterSprintGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_DebugForceEnterSprintGait");

	Params::BP_PlayerRegularMovementCompV3_C_BP_DebugForceEnterSprintGait Parms{};

	Parms.bForceEnterSprintGait = bForceEnterSprintGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_ChangeDesiredGait
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularLocomotionType                  NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForceChangeOperationInput                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_ChangeDesiredGait(ERegularLocomotionType NewGait, bool bForceChangeOperationInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_ChangeDesiredGait");

	Params::BP_PlayerRegularMovementCompV3_C_BP_ChangeDesiredGait Parms{};

	Parms.NewGait = NewGait;
	Parms.bForceChangeOperationInput = bForceChangeOperationInput;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_AnimNotifyState_EnableEdgeProtection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnableEdgeProtection                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_AnimNotifyState_EnableEdgeProtection(bool bEnableEdgeProtection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_AnimNotifyState_EnableEdgeProtection");

	Params::BP_PlayerRegularMovementCompV3_C_BP_AnimNotifyState_EnableEdgeProtection Parms{};

	Parms.bEnableEdgeProtection = bEnableEdgeProtection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.BP_AnimNotify_IsInStateStartMoving
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInStateStartMoving                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PlayerRegularMovementCompV3_C::BP_AnimNotify_IsInStateStartMoving(bool bInStateStartMoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "BP_AnimNotify_IsInStateStartMoving");

	Params::BP_PlayerRegularMovementCompV3_C_BP_AnimNotify_IsInStateStartMoving Parms{};

	Parms.bInStateStartMoving = bInStateStartMoving;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerRegularMovementCompV3.BP_PlayerRegularMovementCompV3_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_PlayerRegularMovementCompV3_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerRegularMovementCompV3_C", "GetModuleName");

	Params::BP_PlayerRegularMovementCompV3_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

