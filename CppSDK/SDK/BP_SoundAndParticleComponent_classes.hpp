#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SoundAndParticleComponent

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "F_FootstepSurfaceTypeSoundStruct_structs.hpp"
#include "EInt32PlayerPawnStateTypes_structs.hpp"
#include "X6Game_structs.hpp"
#include "Enum_ShrubEnum_structs.hpp"
#include "BP_CharacterEffectBaseComponent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SoundAndParticleComponent.BP_SoundAndParticleComponent_C
// 0x0140 (0x0788 - 0x0648)
class UBP_SoundAndParticleComponent_C final : public UBP_CharacterEffectBaseComponent_C
{
public:
	TArray<EInt32PlayerPawnStateTypes>            BP_TEnableAutoRestore;                             // 0x0648(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        BP_CfgFloorTraceLength;                            // 0x0658(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UBP_Character_EffectConfig_Template_C> BP_CfgCharacterEffectConfigDataAsset; // 0x0660(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	double                                        BP_CfgFloorTraceHeight;                            // 0x0688(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BP_CfgLSEffectBindingTag;                          // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAkSwitchValue>          BP_CfgInRainSwitch;                                // 0x0698(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UAkSwitchValue>          BP_CfgNotInRainSwitch;                             // 0x06C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UDataTable*                             DT_FootstepGaitType;                               // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableFootstepGaitSwitch;                         // 0x06F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_InBushSpline;                                   // 0x06F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBushType                                     BP_BushTypeSpline;                                 // 0x06F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F3[0x5];                                      // 0x06F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<Enum_ShrubEnum, TSoftObjectPtr<class UAkSwitchValue>> ShrubTypeSwitchValueMap;              // 0x06F8(0x0050)(Edit, BlueprintVisible)
	bool                                          BP_CfgNeedReactToEnvironment;                      // 0x0748(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInFSTSwitchVolume;                                // 0x0749(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74A[0x6];                                      // 0x074A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_FootstepSurfaceTypeSoundStruct      CurrentSurfaceOverride;                            // 0x0750(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bEnableFootstepSound;                              // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetVolumeSurfaceTypeValue(const struct FF_FootstepSurfaceTypeSoundStruct& SurfaceTypeValue);
	void SetIsInFSTSwitchVolume(bool bInFSTSwitchVolume_0);
	void OnDataTableLoaded();
	void IsInBush(bool* bInBush_0);
	void GetSoftObjectPtrByPath(const class FString& PathString, bool* Found, TSoftObjectPtr<class UObject>* SWITCH);
	void GetShrubType(Enum_ShrubEnum* ShrubType);
	void GetShoeSwitchPath(class USceneComponent* Comp, class FString* ShoeSwitchPaths);
	void GetFootstepSoundMaterialSwitchPath(class FString* OutMaterialTag, class FString* OutTypeTag);
	void GetFootstepSoundGaitSwitch(const class FString& InStr, TSoftObjectPtr<class UAkSwitchValue> DefaultAkSwitch, TSoftObjectPtr<class UAkSwitchValue>* OutAkSwitch);
	void GetFootstepSoundFloorSwitch(TSoftObjectPtr<class UAkSwitchValue>* SwitchValue);
	void CompressPosition(const struct FVector& InPosition, int32 Offset_X, int32 Offset_Y, int32 Offset_Z, struct FVector* CompressdPosition);
	void BPAnimNotify_OnX6PlayFootstepEffect(class USkeletalMeshComponent* MeshComponent, class FName SocketName, const struct FVector& LocationOffset, const struct FRotator& RotationOffset, const struct FVector& Scale, bool bDestroyImmediately, bool bAttached, double Duration, const class FString& RowName);
	void BPAnimNotify_OnUpdateMaterialEffect(class UObject* NotifyObject, double FrameDeltaTime);
	void BPAnimNotify_OnRunStepSoundEffectV2(TSoftObjectPtr<class UAkAudioEvent> AkEvent, const class FString& MaterialTag, class USceneComponent* Comp, class FName AttachName);
	void BPAnimNotify_OnRunStepSoundEffect(TSoftObjectPtr<class UAkAudioEvent> AkEvent, class USceneComponent* Comp, class FName AttachName, const class FString& AnimName, TSoftObjectPtr<class UAkSwitchValue> DefaultGaitAkSwitch);
	void BPAnimNotify_OnPlayRejumpEffect(class UObject* NotifyObject, const struct FGameplayTag& CharacterEffectTag, class USkeletalMeshComponent* MeshComponent, class FName SocketName, const struct FVector& LocationOffset, const struct FRotator& RotationOffset, const struct FVector& Scale, bool bAbsoluteScale, bool bAttached, bool bAutoDestroy, double TotalDuration);
	void BPAnimNotify_OnPlayMaterialEffect(class UObject* NotifyObject, const struct FGameplayTag& CharacterEffectTag, double TotalDuration);
	void BPAnimNotify_OnPlayLSEffect(const class UAnimNotifyState* NotifyObject, TSoftObjectPtr<class ULevelSequence> LevelSequenceRef, double TotalDuration);
	void BPAnimNotify_OnPlayCharacterEffect(class UObject* NotifyObject, const struct FGameplayTag& CharacterEffectTag, class USkeletalMeshComponent* MeshComponent, class FName SocketName, const struct FVector& LocationOffset, const struct FRotator& RotationOffset, const struct FVector& Scale, bool bAbsoluteScale, bool bAttached, bool bAutoDestroy, double TotalDuration);
	void BPAnimNotify_OnEndMaterialEffect(class UObject* NotifyObject);
	void BPAnimNotify_OnEndLSEffect(const class UAnimNotifyState* NotifyObject, bool bWaitForLSFinish);
	void BPAnimNotify_OnEndCharacterEffect(class UObject* NotifyObject, class USkeletalMeshComponent* MeshComponent, bool bDestroyAtEnd);
	void BPAnimNotify_OnClothesTypeEffect(class USceneComponent* Comp, class UAkAudioEvent* AkEvent);
	void BPAnimNotify_OnClothesMaterialEffect(class USceneComponent* Comp, class UAkAudioEvent* AkEvent);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SoundAndParticleComponent_C">();
	}
	static class UBP_SoundAndParticleComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SoundAndParticleComponent_C>();
	}
};
static_assert(alignof(UBP_SoundAndParticleComponent_C) == 0x000008, "Wrong alignment on UBP_SoundAndParticleComponent_C");
static_assert(sizeof(UBP_SoundAndParticleComponent_C) == 0x000788, "Wrong size on UBP_SoundAndParticleComponent_C");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, BP_TEnableAutoRestore) == 0x000648, "Member 'UBP_SoundAndParticleComponent_C::BP_TEnableAutoRestore' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, BP_CfgFloorTraceLength) == 0x000658, "Member 'UBP_SoundAndParticleComponent_C::BP_CfgFloorTraceLength' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, BP_CfgCharacterEffectConfigDataAsset) == 0x000660, "Member 'UBP_SoundAndParticleComponent_C::BP_CfgCharacterEffectConfigDataAsset' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, BP_CfgFloorTraceHeight) == 0x000688, "Member 'UBP_SoundAndParticleComponent_C::BP_CfgFloorTraceHeight' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, BP_CfgLSEffectBindingTag) == 0x000690, "Member 'UBP_SoundAndParticleComponent_C::BP_CfgLSEffectBindingTag' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, BP_CfgInRainSwitch) == 0x000698, "Member 'UBP_SoundAndParticleComponent_C::BP_CfgInRainSwitch' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, BP_CfgNotInRainSwitch) == 0x0006C0, "Member 'UBP_SoundAndParticleComponent_C::BP_CfgNotInRainSwitch' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, DT_FootstepGaitType) == 0x0006E8, "Member 'UBP_SoundAndParticleComponent_C::DT_FootstepGaitType' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, bEnableFootstepGaitSwitch) == 0x0006F0, "Member 'UBP_SoundAndParticleComponent_C::bEnableFootstepGaitSwitch' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, BP_InBushSpline) == 0x0006F1, "Member 'UBP_SoundAndParticleComponent_C::BP_InBushSpline' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, BP_BushTypeSpline) == 0x0006F2, "Member 'UBP_SoundAndParticleComponent_C::BP_BushTypeSpline' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, ShrubTypeSwitchValueMap) == 0x0006F8, "Member 'UBP_SoundAndParticleComponent_C::ShrubTypeSwitchValueMap' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, BP_CfgNeedReactToEnvironment) == 0x000748, "Member 'UBP_SoundAndParticleComponent_C::BP_CfgNeedReactToEnvironment' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, bInFSTSwitchVolume) == 0x000749, "Member 'UBP_SoundAndParticleComponent_C::bInFSTSwitchVolume' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, CurrentSurfaceOverride) == 0x000750, "Member 'UBP_SoundAndParticleComponent_C::CurrentSurfaceOverride' has a wrong offset!");
static_assert(offsetof(UBP_SoundAndParticleComponent_C, bEnableFootstepSound) == 0x000780, "Member 'UBP_SoundAndParticleComponent_C::bEnableFootstepSound' has a wrong offset!");

}

