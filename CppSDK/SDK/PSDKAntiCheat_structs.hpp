#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PSDKAntiCheat

#include "Basic.hpp"

#include "PSDKBasic_structs.hpp"


namespace SDK
{

// Enum PSDKAntiCheat.FSDKAntiCheatAccountType
// NumValues: 0x0018
enum class EFSDKAntiCheatAccountType : uint16
{
	ACE_SDK_ACCOUNT_TYPE_QQ                  = 1,
	ACE_SDK_ACCOUNT_TYPE_WECHAT              = 2,
	ACE_SDK_ACCOUNT_TYPE_BAIDU               = 3,
	ACE_SDK_ACCOUNT_TYPE_QQ_OPENID           = 4,
	ACE_SDK_ACCOUNT_TYPE_VISITOR             = 7,
	ACE_SDK_ACCOUNT_TYPE_GOPENID             = 8,
	ACE_SDK_ACCOUNT_TYPE_GOOGLE              = 101,
	ACE_SDK_ACCOUNT_TYPE_WEGAME_MAIL         = 102,
	ACE_SDK_ACCOUNT_TYPE_4399                = 201,
	ACE_SDK_ACCOUNT_TYPE_GARENA              = 202,
	ACE_SDK_ACCOUNT_TYPE_GIANT_NETWORK       = 203,
	ACE_SDK_ACCOUNT_TYPE_WEGAME              = 301,
	ACE_SDK_ACCOUNT_TYPE_STEAM               = 302,
	ACE_SDK_ACCOUNT_TYPE_WEGAME_COMMON_ID    = 308,
	ACE_SDK_ACCOUNT_TYPE_WOODUAN             = 312,
	ACE_SDK_ACCOUNT_TYPE_VK                  = 314,
	ACE_SDK_ACCOUNT_TYPE_COMMON_ID           = 601,
	ACE_SDK_ACCOUNT_TYPE_FACEBOOK            = 1001,
	ACE_SDK_ACCOUNT_TYPE_SUPERCELL           = 1002,
	ACE_SDK_ACCOUNT_TYPE_TCOMMIC             = 1005,
	ACE_SDK_ACCOUNT_TYPE_UPLAY               = 1006,
	ACE_SDK_ACCOUNT_TYPE_PHONE_OPENID        = 1014,
	ACE_SDK_ACCOUNT_TYPE_APPLE               = 1015,
	ACE_SDK_ACCOUNT_TYPE_MAX                 = 1016,
};

// Enum PSDKAntiCheat.FSDKAntiCheatAccountPlatId
// NumValues: 0x000A
enum class EFSDKAntiCheatAccountPlatId : uint16
{
	ACE_SDK_PLAT_ID_IOS                      = 0,
	ACE_SDK_PLAT_ID_ANDROID                  = 1,
	ACE_SDK_PLAT_ID_PC_CLIENT                = 3,
	ACE_SDK_PLAT_ID_MICRO_WEB                = 4,
	ACE_SDK_PLAT_ID_MICRO_CLIENT             = 5,
	ACE_SDK_PLAT_ID_SWITCH                   = 6,
	ACE_SDK_PLAT_ID_PS_CLIENT                = 7,
	ACE_SDK_PLAT_ID_XBOX_CLIENT              = 8,
	ACE_SDK_PLAT_ID_UNKNOWN                  = 99,
	ACE_SDK_PLAT_ID_MAX                      = 100,
};

// ScriptStruct PSDKAntiCheat.PSDKAntiCheatStartRequest
// 0x0030 (0x00E8 - 0x00B8)
struct FPSDKAntiCheatStartRequest final : public FJsonData
{
public:
	class FString                                 openId;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 zoneId;                                            // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSDKAntiCheatStartRequest) == 0x000008, "Wrong alignment on FPSDKAntiCheatStartRequest");
static_assert(sizeof(FPSDKAntiCheatStartRequest) == 0x0000E8, "Wrong size on FPSDKAntiCheatStartRequest");
static_assert(offsetof(FPSDKAntiCheatStartRequest, openId) == 0x0000B8, "Member 'FPSDKAntiCheatStartRequest::openId' has a wrong offset!");
static_assert(offsetof(FPSDKAntiCheatStartRequest, RoleId) == 0x0000C8, "Member 'FPSDKAntiCheatStartRequest::RoleId' has a wrong offset!");
static_assert(offsetof(FPSDKAntiCheatStartRequest, zoneId) == 0x0000D8, "Member 'FPSDKAntiCheatStartRequest::zoneId' has a wrong offset!");

// ScriptStruct PSDKAntiCheat.SDKAntiCheatInitRequest
// 0x0008 (0x00C0 - 0x00B8)
struct FSDKAntiCheatInitRequest final : public FJsonData
{
public:
	uint32                                        GameId;                                            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSDKAntiCheatInitRequest) == 0x000008, "Wrong alignment on FSDKAntiCheatInitRequest");
static_assert(sizeof(FSDKAntiCheatInitRequest) == 0x0000C0, "Wrong size on FSDKAntiCheatInitRequest");
static_assert(offsetof(FSDKAntiCheatInitRequest, GameId) == 0x0000B8, "Member 'FSDKAntiCheatInitRequest::GameId' has a wrong offset!");

// ScriptStruct PSDKAntiCheat.SDKAntiCheatPlayerControlRequest
// 0x0040 (0x00F8 - 0x00B8)
struct FSDKAntiCheatPlayerControlRequest final : public FJsonData
{
public:
	class FString                                 accountId;                                         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSDKAntiCheatAccountType                     AccountType;                                       // 0x00C8(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSDKAntiCheatAccountPlatId                   PlatID;                                            // 0x00CA(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        GameId;                                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        worldId;                                           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoleId;                                            // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 zoneId;                                            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSDKAntiCheatPlayerControlRequest) == 0x000008, "Wrong alignment on FSDKAntiCheatPlayerControlRequest");
static_assert(sizeof(FSDKAntiCheatPlayerControlRequest) == 0x0000F8, "Wrong size on FSDKAntiCheatPlayerControlRequest");
static_assert(offsetof(FSDKAntiCheatPlayerControlRequest, accountId) == 0x0000B8, "Member 'FSDKAntiCheatPlayerControlRequest::accountId' has a wrong offset!");
static_assert(offsetof(FSDKAntiCheatPlayerControlRequest, AccountType) == 0x0000C8, "Member 'FSDKAntiCheatPlayerControlRequest::AccountType' has a wrong offset!");
static_assert(offsetof(FSDKAntiCheatPlayerControlRequest, PlatID) == 0x0000CA, "Member 'FSDKAntiCheatPlayerControlRequest::PlatID' has a wrong offset!");
static_assert(offsetof(FSDKAntiCheatPlayerControlRequest, GameId) == 0x0000CC, "Member 'FSDKAntiCheatPlayerControlRequest::GameId' has a wrong offset!");
static_assert(offsetof(FSDKAntiCheatPlayerControlRequest, worldId) == 0x0000D0, "Member 'FSDKAntiCheatPlayerControlRequest::worldId' has a wrong offset!");
static_assert(offsetof(FSDKAntiCheatPlayerControlRequest, RoleId) == 0x0000D8, "Member 'FSDKAntiCheatPlayerControlRequest::RoleId' has a wrong offset!");
static_assert(offsetof(FSDKAntiCheatPlayerControlRequest, zoneId) == 0x0000E8, "Member 'FSDKAntiCheatPlayerControlRequest::zoneId' has a wrong offset!");

}

