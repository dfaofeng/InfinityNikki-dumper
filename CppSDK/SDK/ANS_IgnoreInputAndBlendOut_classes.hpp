#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANS_IgnoreInputAndBlendOut

#include "Basic.hpp"

#include "FBlendOutCondition_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ANS_IgnoreInputAndBlendOut.ANS_IgnoreInputAndBlendOut_C
// 0x0018 (0x00B8 - 0x00A0)
class UANS_IgnoreInputAndBlendOut_C final : public UAnimNotifyState_Sections
{
public:
	TArray<struct FFBlendOutCondition>            BlendOutSetting;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible)
	bool                                          BP_InhibitMoveInput;                               // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_AlsoInhibitJumpInput;                           // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddJumpData(double Duration) const;
	void AddMoveData(double Duration) const;
	bool BP_TickBlendOut(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime) const;
	void CancelAbility(class ACharacter* InCharacter, class UAnimMontage* InMontage, bool* Ret) const;
	class FString GetModuleName() const;
	class FString GetNotifyName() const;
	void Received_NotifyBegin_Section(class FName SectionName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, float SectionElapsedTime) const;
	void Received_NotifyEnd_Section(class FName SectionName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float SectionElapsedTime, bool bAnimNotifyEnd) const;
	void Received_NotifyTick_Section(class FName SectionName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime) const;
	void StopMontage(class ACharacter* InCharacter, class UAnimInstance* InAnimInstance, double InBlendOutTime, class UAnimMontage* InMontage) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANS_IgnoreInputAndBlendOut_C">();
	}
	static class UANS_IgnoreInputAndBlendOut_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANS_IgnoreInputAndBlendOut_C>();
	}
};
static_assert(alignof(UANS_IgnoreInputAndBlendOut_C) == 0x000008, "Wrong alignment on UANS_IgnoreInputAndBlendOut_C");
static_assert(sizeof(UANS_IgnoreInputAndBlendOut_C) == 0x0000B8, "Wrong size on UANS_IgnoreInputAndBlendOut_C");
static_assert(offsetof(UANS_IgnoreInputAndBlendOut_C, BlendOutSetting) == 0x0000A0, "Member 'UANS_IgnoreInputAndBlendOut_C::BlendOutSetting' has a wrong offset!");
static_assert(offsetof(UANS_IgnoreInputAndBlendOut_C, BP_InhibitMoveInput) == 0x0000B0, "Member 'UANS_IgnoreInputAndBlendOut_C::BP_InhibitMoveInput' has a wrong offset!");
static_assert(offsetof(UANS_IgnoreInputAndBlendOut_C, BP_AlsoInhibitJumpInput) == 0x0000B1, "Member 'UANS_IgnoreInputAndBlendOut_C::BP_AlsoInhibitJumpInput' has a wrong offset!");

}

