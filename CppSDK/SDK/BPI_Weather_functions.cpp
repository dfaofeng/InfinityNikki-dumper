#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Weather

#include "Basic.hpp"

#include "BPI_Weather_classes.hpp"
#include "BPI_Weather_parameters.hpp"


namespace SDK
{

// Function BPI_Weather.BPI_Weather_C.Manual Operation TOD
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weather_C::Manual_Operation_TOD(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weather_C", "Manual Operation TOD");

	Params::BPI_Weather_C_Manual_Operation_TOD Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weather.BPI_Weather_C.BPI_WeatherData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           WeatherPreset                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Weather_C::BPI_WeatherData(class UClass* WeatherPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weather_C", "BPI_WeatherData");

	Params::BPI_Weather_C_BPI_WeatherData Parms{};

	Parms.WeatherPreset = WeatherPreset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weather.BPI_Weather_C.BPI_WeatherChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    RegionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    UnloadWeatherName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    LoadWeatherName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_Weather_C::BPI_WeatherChanged(const class FString& RegionName, const class FString& UnloadWeatherName, const class FString& LoadWeatherName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weather_C", "BPI_WeatherChanged");

	Params::BPI_Weather_C_BPI_WeatherChanged Parms{};

	Parms.RegionName = std::move(RegionName);
	Parms.UnloadWeatherName = std::move(UnloadWeatherName);
	Parms.LoadWeatherName = std::move(LoadWeatherName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weather.BPI_Weather_C.BPI_TODTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weather_C::BPI_TODTime(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weather_C", "BPI_TODTime");

	Params::BPI_Weather_C_BPI_TODTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weather.BPI_Weather_C.BPI_TodState
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Weather_C::BPI_TodState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weather_C", "BPI_TodState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Weather.BPI_Weather_C.BPI_SaveAsset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OnlySyncContent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OnlyWriteParam                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weather_C::BPI_SaveAsset(bool OnlySyncContent, bool OnlyWriteParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weather_C", "BPI_SaveAsset");

	Params::BPI_Weather_C_BPI_SaveAsset Parms{};

	Parms.OnlySyncContent = OnlySyncContent;
	Parms.OnlyWriteParam = OnlyWriteParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weather.BPI_Weather_C.BPI_ReloadFile
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Weather_C::BPI_ReloadFile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weather_C", "BPI_ReloadFile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Weather.BPI_Weather_C.BPI_EditorUpdateRole
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              LocalLightColor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weather_C::BPI_EditorUpdateRole(const struct FLinearColor& LocalLightColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weather_C", "BPI_EditorUpdateRole");

	Params::BPI_Weather_C_BPI_EditorUpdateRole Parms{};

	Parms.LocalLightColor = std::move(LocalLightColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weather.BPI_Weather_C.BPI_EditorUpdate
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Weather_C::BPI_EditorUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weather_C", "BPI_EditorUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_Weather.BPI_Weather_C.BPI_CLFSPostContruct
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Weather_C::BPI_CLFSPostContruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weather_C", "BPI_CLFSPostContruct");

	UObject::ProcessEvent(Func, nullptr);
}

}

