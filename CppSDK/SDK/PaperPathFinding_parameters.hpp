#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperPathFinding

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PaperPathFinding.PaperAIController.ServerMoveToLocation
// 0x0030 (0x0030 - 0x0000)
struct PaperAIController_ServerMoveToLocation final
{
public:
	int64                                         InRequestID;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        InPath;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 OffMeshIdxs;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsPartial;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperAIController_ServerMoveToLocation) == 0x000008, "Wrong alignment on PaperAIController_ServerMoveToLocation");
static_assert(sizeof(PaperAIController_ServerMoveToLocation) == 0x000030, "Wrong size on PaperAIController_ServerMoveToLocation");
static_assert(offsetof(PaperAIController_ServerMoveToLocation, InRequestID) == 0x000000, "Member 'PaperAIController_ServerMoveToLocation::InRequestID' has a wrong offset!");
static_assert(offsetof(PaperAIController_ServerMoveToLocation, InPath) == 0x000008, "Member 'PaperAIController_ServerMoveToLocation::InPath' has a wrong offset!");
static_assert(offsetof(PaperAIController_ServerMoveToLocation, OffMeshIdxs) == 0x000018, "Member 'PaperAIController_ServerMoveToLocation::OffMeshIdxs' has a wrong offset!");
static_assert(offsetof(PaperAIController_ServerMoveToLocation, IsPartial) == 0x000028, "Member 'PaperAIController_ServerMoveToLocation::IsPartial' has a wrong offset!");

// Function PaperPathFinding.PaperPathFinding.DrawNavMeshFromServer
// 0x0020 (0x0020 - 0x0000)
struct PaperPathFinding_DrawNavMeshFromServer final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Tiles;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperPathFinding_DrawNavMeshFromServer) == 0x000008, "Wrong alignment on PaperPathFinding_DrawNavMeshFromServer");
static_assert(sizeof(PaperPathFinding_DrawNavMeshFromServer) == 0x000020, "Wrong size on PaperPathFinding_DrawNavMeshFromServer");
static_assert(offsetof(PaperPathFinding_DrawNavMeshFromServer, InWorld) == 0x000000, "Member 'PaperPathFinding_DrawNavMeshFromServer::InWorld' has a wrong offset!");
static_assert(offsetof(PaperPathFinding_DrawNavMeshFromServer, Tiles) == 0x000008, "Member 'PaperPathFinding_DrawNavMeshFromServer::Tiles' has a wrong offset!");
static_assert(offsetof(PaperPathFinding_DrawNavMeshFromServer, Time) == 0x000018, "Member 'PaperPathFinding_DrawNavMeshFromServer::Time' has a wrong offset!");

// Function PaperPathFinding.PaperPathFinding.DrawPathFromServer
// 0x0010 (0x0010 - 0x0000)
struct PaperPathFinding_DrawPathFromServer final
{
public:
	TArray<struct FVector>                        InPath;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperPathFinding_DrawPathFromServer) == 0x000008, "Wrong alignment on PaperPathFinding_DrawPathFromServer");
static_assert(sizeof(PaperPathFinding_DrawPathFromServer) == 0x000010, "Wrong size on PaperPathFinding_DrawPathFromServer");
static_assert(offsetof(PaperPathFinding_DrawPathFromServer, InPath) == 0x000000, "Member 'PaperPathFinding_DrawPathFromServer::InPath' has a wrong offset!");

// Function PaperPathFinding.PaperPathFinding.FindPathSendRequest
// 0x0048 (0x0048 - 0x0000)
struct PaperPathFinding_FindPathSendRequest final
{
public:
	class AController*                            InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InStartPoint;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InEndPoint;                                        // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InRequestID;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserFlags;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperPathFinding_FindPathSendRequest) == 0x000008, "Wrong alignment on PaperPathFinding_FindPathSendRequest");
static_assert(sizeof(PaperPathFinding_FindPathSendRequest) == 0x000048, "Wrong size on PaperPathFinding_FindPathSendRequest");
static_assert(offsetof(PaperPathFinding_FindPathSendRequest, InController) == 0x000000, "Member 'PaperPathFinding_FindPathSendRequest::InController' has a wrong offset!");
static_assert(offsetof(PaperPathFinding_FindPathSendRequest, InStartPoint) == 0x000008, "Member 'PaperPathFinding_FindPathSendRequest::InStartPoint' has a wrong offset!");
static_assert(offsetof(PaperPathFinding_FindPathSendRequest, InEndPoint) == 0x000020, "Member 'PaperPathFinding_FindPathSendRequest::InEndPoint' has a wrong offset!");
static_assert(offsetof(PaperPathFinding_FindPathSendRequest, InRequestID) == 0x000038, "Member 'PaperPathFinding_FindPathSendRequest::InRequestID' has a wrong offset!");
static_assert(offsetof(PaperPathFinding_FindPathSendRequest, UserFlags) == 0x000040, "Member 'PaperPathFinding_FindPathSendRequest::UserFlags' has a wrong offset!");

// Function PaperPathFinding.PaperPathFinding.GetNavDataForActor
// 0x0010 (0x0010 - 0x0000)
struct PaperPathFinding_GetNavDataForActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationData*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperPathFinding_GetNavDataForActor) == 0x000008, "Wrong alignment on PaperPathFinding_GetNavDataForActor");
static_assert(sizeof(PaperPathFinding_GetNavDataForActor) == 0x000010, "Wrong size on PaperPathFinding_GetNavDataForActor");
static_assert(offsetof(PaperPathFinding_GetNavDataForActor, InActor) == 0x000000, "Member 'PaperPathFinding_GetNavDataForActor::InActor' has a wrong offset!");
static_assert(offsetof(PaperPathFinding_GetNavDataForActor, ReturnValue) == 0x000008, "Member 'PaperPathFinding_GetNavDataForActor::ReturnValue' has a wrong offset!");

// Function PaperPathFinding.PaperPathFinding.GetNearbyActorDynamicCollision
// 0x0038 (0x0038 - 0x0000)
struct PaperPathFinding_GetNearbyActorDynamicCollision final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       OutRotation;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutObstacleID;                                     // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBox>                           ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperPathFinding_GetNearbyActorDynamicCollision) == 0x000008, "Wrong alignment on PaperPathFinding_GetNearbyActorDynamicCollision");
static_assert(sizeof(PaperPathFinding_GetNearbyActorDynamicCollision) == 0x000038, "Wrong size on PaperPathFinding_GetNearbyActorDynamicCollision");
static_assert(offsetof(PaperPathFinding_GetNearbyActorDynamicCollision, InActor) == 0x000000, "Member 'PaperPathFinding_GetNearbyActorDynamicCollision::InActor' has a wrong offset!");
static_assert(offsetof(PaperPathFinding_GetNearbyActorDynamicCollision, OutRotation) == 0x000008, "Member 'PaperPathFinding_GetNearbyActorDynamicCollision::OutRotation' has a wrong offset!");
static_assert(offsetof(PaperPathFinding_GetNearbyActorDynamicCollision, OutObstacleID) == 0x000018, "Member 'PaperPathFinding_GetNearbyActorDynamicCollision::OutObstacleID' has a wrong offset!");
static_assert(offsetof(PaperPathFinding_GetNearbyActorDynamicCollision, ReturnValue) == 0x000028, "Member 'PaperPathFinding_GetNearbyActorDynamicCollision::ReturnValue' has a wrong offset!");

// Function PaperPathFinding.ServerPathFollowingComponent.GetCurrentDirection
// 0x0018 (0x0018 - 0x0000)
struct ServerPathFollowingComponent_GetCurrentDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerPathFollowingComponent_GetCurrentDirection) == 0x000008, "Wrong alignment on ServerPathFollowingComponent_GetCurrentDirection");
static_assert(sizeof(ServerPathFollowingComponent_GetCurrentDirection) == 0x000018, "Wrong size on ServerPathFollowingComponent_GetCurrentDirection");
static_assert(offsetof(ServerPathFollowingComponent_GetCurrentDirection, ReturnValue) == 0x000000, "Member 'ServerPathFollowingComponent_GetCurrentDirection::ReturnValue' has a wrong offset!");

// Function PaperPathFinding.ServerPathFollowingComponent.GetCurrentPathIndex
// 0x0008 (0x0008 - 0x0000)
struct ServerPathFollowingComponent_GetCurrentPathIndex final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerPathFollowingComponent_GetCurrentPathIndex) == 0x000008, "Wrong alignment on ServerPathFollowingComponent_GetCurrentPathIndex");
static_assert(sizeof(ServerPathFollowingComponent_GetCurrentPathIndex) == 0x000008, "Wrong size on ServerPathFollowingComponent_GetCurrentPathIndex");
static_assert(offsetof(ServerPathFollowingComponent_GetCurrentPathIndex, ReturnValue) == 0x000000, "Member 'ServerPathFollowingComponent_GetCurrentPathIndex::ReturnValue' has a wrong offset!");

}

