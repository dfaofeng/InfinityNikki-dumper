#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SphereFog

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_ColorSelection_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SphereFog.BP_SphereFog_C
// 0x00C0 (0x0468 - 0x03A8)
class ABP_SphereFog_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   mesh;                                              // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShapeRadius;                                       // 0x03C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FogDensity;                                        // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SphereMaterial;                                    // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FogBrightness;                                     // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         ColorID;                                           // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AfterDOF;                                          // 0x040C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ColorSelection                              E_ColorID;                                         // 0x040D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40E[0x2];                                      // 0x040E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           AreaFogColor;                                      // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Exponent;                                          // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Hardness;                                          // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableTick;                                        // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FadeOffset;                                        // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeSoftness;                                      // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        New_Cull_Distance;                                 // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HueShift;                                          // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         StartDistance;                                     // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartFalloff;                                      // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MobileForceEnable;                                 // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SphereFog(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UpdateParameter();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SphereFog_C">();
	}
	static class ABP_SphereFog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SphereFog_C>();
	}
};
static_assert(alignof(ABP_SphereFog_C) == 0x000008, "Wrong alignment on ABP_SphereFog_C");
static_assert(sizeof(ABP_SphereFog_C) == 0x000468, "Wrong size on ABP_SphereFog_C");
static_assert(offsetof(ABP_SphereFog_C, UberGraphFrame) == 0x0003A8, "Member 'ABP_SphereFog_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, Billboard) == 0x0003B0, "Member 'ABP_SphereFog_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, mesh) == 0x0003B8, "Member 'ABP_SphereFog_C::mesh' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, Sphere) == 0x0003C0, "Member 'ABP_SphereFog_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, ShapeRadius) == 0x0003C8, "Member 'ABP_SphereFog_C::ShapeRadius' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, Color) == 0x0003E0, "Member 'ABP_SphereFog_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, FogDensity) == 0x0003F0, "Member 'ABP_SphereFog_C::FogDensity' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, SphereMaterial) == 0x0003F8, "Member 'ABP_SphereFog_C::SphereMaterial' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, FogBrightness) == 0x000400, "Member 'ABP_SphereFog_C::FogBrightness' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, ColorID) == 0x000408, "Member 'ABP_SphereFog_C::ColorID' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, AfterDOF) == 0x00040C, "Member 'ABP_SphereFog_C::AfterDOF' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, E_ColorID) == 0x00040D, "Member 'ABP_SphereFog_C::E_ColorID' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, AreaFogColor) == 0x000410, "Member 'ABP_SphereFog_C::AreaFogColor' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, Exponent) == 0x000420, "Member 'ABP_SphereFog_C::Exponent' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, Hardness) == 0x000428, "Member 'ABP_SphereFog_C::Hardness' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, EnableTick) == 0x000430, "Member 'ABP_SphereFog_C::EnableTick' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, FadeOffset) == 0x000438, "Member 'ABP_SphereFog_C::FadeOffset' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, FadeSoftness) == 0x000440, "Member 'ABP_SphereFog_C::FadeSoftness' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, New_Cull_Distance) == 0x000448, "Member 'ABP_SphereFog_C::New_Cull_Distance' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, HueShift) == 0x000450, "Member 'ABP_SphereFog_C::HueShift' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, StartDistance) == 0x000458, "Member 'ABP_SphereFog_C::StartDistance' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, StartFalloff) == 0x00045C, "Member 'ABP_SphereFog_C::StartFalloff' has a wrong offset!");
static_assert(offsetof(ABP_SphereFog_C, MobileForceEnable) == 0x000460, "Member 'ABP_SphereFog_C::MobileForceEnable' has a wrong offset!");

}

