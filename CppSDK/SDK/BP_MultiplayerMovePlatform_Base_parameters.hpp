#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MultiplayerMovePlatform_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_EInteractSuccRet_structs.hpp"


namespace SDK::Params
{

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.AdjustRotation
// 0x0188 (0x0188 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_AdjustRotation final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue; // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0090(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation) == 0x000008, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_AdjustRotation");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation) == 0x000188, "Wrong size on BP_MultiplayerMovePlatform_Base_C_AdjustRotation");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, DeltaTime) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000008, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue) == 0x000044, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue) == 0x000048, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue) == 0x000050, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_GetRotationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_BreakRotator_Roll_1) == 0x000068, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_BreakRotator_Pitch_1) == 0x00006C, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_BreakRotator_Yaw_1) == 0x000070, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_MakeRotator_ReturnValue) == 0x000078, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_AdjustRotation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000090, "Member 'BP_MultiplayerMovePlatform_Base_C_AdjustRotation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.BndEvt__BP_MultiplayerMovePlatform_Base_BP_SplineTrackComponent_K2Node_ComponentBoundEvent_1_OnReacheEnd__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_BP_SplineTrackComponent_K2Node_ComponentBoundEvent_1_OnReacheEnd__DelegateSignature final
{
public:
	bool                                          bForward;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PointIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_BP_SplineTrackComponent_K2Node_ComponentBoundEvent_1_OnReacheEnd__DelegateSignature) == 0x000004, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_BP_SplineTrackComponent_K2Node_ComponentBoundEvent_1_OnReacheEnd__DelegateSignature");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_BP_SplineTrackComponent_K2Node_ComponentBoundEvent_1_OnReacheEnd__DelegateSignature) == 0x000008, "Wrong size on BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_BP_SplineTrackComponent_K2Node_ComponentBoundEvent_1_OnReacheEnd__DelegateSignature");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_BP_SplineTrackComponent_K2Node_ComponentBoundEvent_1_OnReacheEnd__DelegateSignature, bForward) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_BP_SplineTrackComponent_K2Node_ComponentBoundEvent_1_OnReacheEnd__DelegateSignature::bForward' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_BP_SplineTrackComponent_K2Node_ComponentBoundEvent_1_OnReacheEnd__DelegateSignature, PointIndex) == 0x000004, "Member 'BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_BP_SplineTrackComponent_K2Node_ComponentBoundEvent_1_OnReacheEnd__DelegateSignature::PointIndex' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_MultiplayerMovePlatform_Base_C_BndEvt__BP_MultiplayerMovePlatform_Base_LeaveTriggerVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.BP_EnableLocalChairs
// 0x0001 (0x0001 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_BP_EnableLocalChairs final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_BP_EnableLocalChairs) == 0x000001, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_BP_EnableLocalChairs");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_BP_EnableLocalChairs) == 0x000001, "Wrong size on BP_MultiplayerMovePlatform_Base_C_BP_EnableLocalChairs");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_BP_EnableLocalChairs, bEnable) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_BP_EnableLocalChairs::bEnable' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.BP_OnEndInteract
// 0x0001 (0x0001 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_BP_OnEndInteract final
{
public:
	bool                                          bCompleted;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_BP_OnEndInteract) == 0x000001, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_BP_OnEndInteract");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_BP_OnEndInteract) == 0x000001, "Wrong size on BP_MultiplayerMovePlatform_Base_C_BP_OnEndInteract");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_BP_OnEndInteract, bCompleted) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_BP_OnEndInteract::bCompleted' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.BP_PlayerGetOff
// 0x0001 (0x0001 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_BP_PlayerGetOff final
{
public:
	bool                                          bCompleted;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_BP_PlayerGetOff) == 0x000001, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_BP_PlayerGetOff");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_BP_PlayerGetOff) == 0x000001, "Wrong size on BP_MultiplayerMovePlatform_Base_C_BP_PlayerGetOff");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_BP_PlayerGetOff, bCompleted) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_BP_PlayerGetOff::bCompleted' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.BP_ResetRotation
// 0x0110 (0x0110 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_BP_ResetRotation final
{
public:
	struct FRotator                               CallFunc_GetRotationAtSplinePoint_ReturnValue;     // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0018(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_BP_ResetRotation) == 0x000008, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_BP_ResetRotation");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_BP_ResetRotation) == 0x000110, "Wrong size on BP_MultiplayerMovePlatform_Base_C_BP_ResetRotation");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_BP_ResetRotation, CallFunc_GetRotationAtSplinePoint_ReturnValue) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_BP_ResetRotation::CallFunc_GetRotationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_BP_ResetRotation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000018, "Member 'BP_MultiplayerMovePlatform_Base_C_BP_ResetRotation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.ExecuteUbergraph_BP_MultiplayerMovePlatform_Base
// 0x0138 (0x0138 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_4;                   // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_3;                   // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x003C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_2;                   // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_1;                   // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_3;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_4;            // 0x0084(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_Data;                                 // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Player;                               // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Other_player_actor;                   // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_EInteractSuccRet                            K2Node_Event_result;                               // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bForward;               // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_PointIndex;             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_5;            // 0x00D0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0108(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetX6GameNikkiPawn_NikkiPawn;             // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_AdjustRotation_DeltaTime_ImplicitCast;    // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base) == 0x000008, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base) == 0x000138, "Wrong size on BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, EntryPoint) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, Temp_object_Variable) == 0x000008, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_DynamicCast_AsAnim_Montage) == 0x000010, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_DynamicCast_AsAnim_Montage' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CustomEvent_NotifyName_4) == 0x00001C, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CustomEvent_NotifyName_4' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CreateDelegate_OutputDelegate) == 0x000024, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CustomEvent_NotifyName_3) == 0x000034, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CustomEvent_NotifyName_3' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CreateDelegate_OutputDelegate_1) == 0x00003C, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CustomEvent_NotifyName_2) == 0x00004C, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CustomEvent_NotifyName_2' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CreateDelegate_OutputDelegate_2) == 0x000054, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CustomEvent_NotifyName_1) == 0x000064, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CustomEvent_NotifyName_1' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CreateDelegate_OutputDelegate_3) == 0x00006C, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CustomEvent_NotifyName) == 0x00007C, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CreateDelegate_OutputDelegate_4) == 0x000084, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, Temp_name_Variable) == 0x000094, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_Event_Data) == 0x0000A0, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_Event_Data' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_Event_Player) == 0x0000B0, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_Event_Player' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_Event_Other_player_actor) == 0x0000B8, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_Event_Other_player_actor' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_Event_result) == 0x0000C0, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_Event_result' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_Event_DeltaSeconds) == 0x0000C4, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_ComponentBoundEvent_bForward) == 0x0000C8, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_ComponentBoundEvent_bForward' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_ComponentBoundEvent_PointIndex) == 0x0000CC, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_ComponentBoundEvent_PointIndex' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000D0, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x0000E0, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, CallFunc_IsValid_ReturnValue) == 0x0000E8, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, CallFunc_GetAnimInstance_ReturnValue) == 0x0000F0, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0000F8, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_ComponentBoundEvent_OtherActor) == 0x000100, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_ComponentBoundEvent_OtherComp) == 0x000108, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000110, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, K2Node_CustomEvent_Loaded) == 0x000118, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, CallFunc_GetX6GameNikkiPawn_NikkiPawn) == 0x000120, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::CallFunc_GetX6GameNikkiPawn_NikkiPawn' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000128, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base, CallFunc_AdjustRotation_DeltaTime_ImplicitCast) == 0x000130, "Member 'BP_MultiplayerMovePlatform_Base_C_ExecuteUbergraph_BP_MultiplayerMovePlatform_Base::CallFunc_AdjustRotation_DeltaTime_ImplicitCast' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.On_Multi_ActiveSuccess
// 0x0010 (0x0010 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_On_Multi_ActiveSuccess final
{
public:
	class AActor*                                 Other_player_actor;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_EInteractSuccRet                            Result;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_On_Multi_ActiveSuccess) == 0x000008, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_On_Multi_ActiveSuccess");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_On_Multi_ActiveSuccess) == 0x000010, "Wrong size on BP_MultiplayerMovePlatform_Base_C_On_Multi_ActiveSuccess");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_On_Multi_ActiveSuccess, Other_player_actor) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_On_Multi_ActiveSuccess::Other_player_actor' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_On_Multi_ActiveSuccess, Result) == 0x000008, "Member 'BP_MultiplayerMovePlatform_Base_C_On_Multi_ActiveSuccess::Result' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.On_Multi_InteractiveObjActive
// 0x0018 (0x0018 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_On_Multi_InteractiveObjActive final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 Player;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_On_Multi_InteractiveObjActive) == 0x000008, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_On_Multi_InteractiveObjActive");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_On_Multi_InteractiveObjActive) == 0x000018, "Wrong size on BP_MultiplayerMovePlatform_Base_C_On_Multi_InteractiveObjActive");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_On_Multi_InteractiveObjActive, Data) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_On_Multi_InteractiveObjActive::Data' has a wrong offset!");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_On_Multi_InteractiveObjActive, Player) == 0x000010, "Member 'BP_MultiplayerMovePlatform_Base_C_On_Multi_InteractiveObjActive::Player' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.OnBlendOut_3FA2443E4959FA0322D075B4FEA0A8E3
// 0x0008 (0x0008 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_OnBlendOut_3FA2443E4959FA0322D075B4FEA0A8E3 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_OnBlendOut_3FA2443E4959FA0322D075B4FEA0A8E3) == 0x000004, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_OnBlendOut_3FA2443E4959FA0322D075B4FEA0A8E3");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_OnBlendOut_3FA2443E4959FA0322D075B4FEA0A8E3) == 0x000008, "Wrong size on BP_MultiplayerMovePlatform_Base_C_OnBlendOut_3FA2443E4959FA0322D075B4FEA0A8E3");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_OnBlendOut_3FA2443E4959FA0322D075B4FEA0A8E3, NotifyName) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_OnBlendOut_3FA2443E4959FA0322D075B4FEA0A8E3::NotifyName' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.OnCompleted_3FA2443E4959FA0322D075B4FEA0A8E3
// 0x0008 (0x0008 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_OnCompleted_3FA2443E4959FA0322D075B4FEA0A8E3 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_OnCompleted_3FA2443E4959FA0322D075B4FEA0A8E3) == 0x000004, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_OnCompleted_3FA2443E4959FA0322D075B4FEA0A8E3");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_OnCompleted_3FA2443E4959FA0322D075B4FEA0A8E3) == 0x000008, "Wrong size on BP_MultiplayerMovePlatform_Base_C_OnCompleted_3FA2443E4959FA0322D075B4FEA0A8E3");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_OnCompleted_3FA2443E4959FA0322D075B4FEA0A8E3, NotifyName) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_OnCompleted_3FA2443E4959FA0322D075B4FEA0A8E3::NotifyName' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.OnInterrupted_3FA2443E4959FA0322D075B4FEA0A8E3
// 0x0008 (0x0008 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_OnInterrupted_3FA2443E4959FA0322D075B4FEA0A8E3 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_OnInterrupted_3FA2443E4959FA0322D075B4FEA0A8E3) == 0x000004, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_OnInterrupted_3FA2443E4959FA0322D075B4FEA0A8E3");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_OnInterrupted_3FA2443E4959FA0322D075B4FEA0A8E3) == 0x000008, "Wrong size on BP_MultiplayerMovePlatform_Base_C_OnInterrupted_3FA2443E4959FA0322D075B4FEA0A8E3");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_OnInterrupted_3FA2443E4959FA0322D075B4FEA0A8E3, NotifyName) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_OnInterrupted_3FA2443E4959FA0322D075B4FEA0A8E3::NotifyName' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.OnLoaded_CB2FFBC84F62675EA25EA897832EDF4D
// 0x0008 (0x0008 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_OnLoaded_CB2FFBC84F62675EA25EA897832EDF4D final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_OnLoaded_CB2FFBC84F62675EA25EA897832EDF4D) == 0x000008, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_OnLoaded_CB2FFBC84F62675EA25EA897832EDF4D");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_OnLoaded_CB2FFBC84F62675EA25EA897832EDF4D) == 0x000008, "Wrong size on BP_MultiplayerMovePlatform_Base_C_OnLoaded_CB2FFBC84F62675EA25EA897832EDF4D");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_OnLoaded_CB2FFBC84F62675EA25EA897832EDF4D, Loaded) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_OnLoaded_CB2FFBC84F62675EA25EA897832EDF4D::Loaded' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.OnNotifyBegin_3FA2443E4959FA0322D075B4FEA0A8E3
// 0x0008 (0x0008 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_OnNotifyBegin_3FA2443E4959FA0322D075B4FEA0A8E3 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_OnNotifyBegin_3FA2443E4959FA0322D075B4FEA0A8E3) == 0x000004, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_OnNotifyBegin_3FA2443E4959FA0322D075B4FEA0A8E3");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_OnNotifyBegin_3FA2443E4959FA0322D075B4FEA0A8E3) == 0x000008, "Wrong size on BP_MultiplayerMovePlatform_Base_C_OnNotifyBegin_3FA2443E4959FA0322D075B4FEA0A8E3");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_OnNotifyBegin_3FA2443E4959FA0322D075B4FEA0A8E3, NotifyName) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_OnNotifyBegin_3FA2443E4959FA0322D075B4FEA0A8E3::NotifyName' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.OnNotifyEnd_3FA2443E4959FA0322D075B4FEA0A8E3
// 0x0008 (0x0008 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_OnNotifyEnd_3FA2443E4959FA0322D075B4FEA0A8E3 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_OnNotifyEnd_3FA2443E4959FA0322D075B4FEA0A8E3) == 0x000004, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_OnNotifyEnd_3FA2443E4959FA0322D075B4FEA0A8E3");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_OnNotifyEnd_3FA2443E4959FA0322D075B4FEA0A8E3) == 0x000008, "Wrong size on BP_MultiplayerMovePlatform_Base_C_OnNotifyEnd_3FA2443E4959FA0322D075B4FEA0A8E3");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_OnNotifyEnd_3FA2443E4959FA0322D075B4FEA0A8E3, NotifyName) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_OnNotifyEnd_3FA2443E4959FA0322D075B4FEA0A8E3::NotifyName' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_ReceiveTick");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_ReceiveTick) == 0x000004, "Wrong size on BP_MultiplayerMovePlatform_Base_C_ReceiveTick");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.SetInvisibleWall
// 0x0001 (0x0001 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_SetInvisibleWall final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_SetInvisibleWall) == 0x000001, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_SetInvisibleWall");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_SetInvisibleWall) == 0x000001, "Wrong size on BP_MultiplayerMovePlatform_Base_C_SetInvisibleWall");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_SetInvisibleWall, bEnable) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_SetInvisibleWall::bEnable' has a wrong offset!");

// Function BP_MultiplayerMovePlatform_Base.BP_MultiplayerMovePlatform_Base_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BP_MultiplayerMovePlatform_Base_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_MultiplayerMovePlatform_Base_C_GetModuleName) == 0x000008, "Wrong alignment on BP_MultiplayerMovePlatform_Base_C_GetModuleName");
static_assert(sizeof(BP_MultiplayerMovePlatform_Base_C_GetModuleName) == 0x000010, "Wrong size on BP_MultiplayerMovePlatform_Base_C_GetModuleName");
static_assert(offsetof(BP_MultiplayerMovePlatform_Base_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BP_MultiplayerMovePlatform_Base_C_GetModuleName::ReturnValue' has a wrong offset!");

}

