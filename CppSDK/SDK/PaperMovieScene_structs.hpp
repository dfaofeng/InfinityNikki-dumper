#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperMovieScene

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum PaperMovieScene.EPaperTraverseSectionReason
// NumValues: 0x0008
enum class EPaperTraverseSectionReason : uint8
{
	None                                     = 0,
	DragLineBreakBegin                       = 1,
	DragLineBreakEnd                         = 2,
	DeleteLineBreak                          = 3,
	PrevLineChange                           = 4,
	CollectOverlapInfo                       = 5,
	ResumeOverlapInfo                        = 6,
	EPaperTraverseSectionReason_MAX          = 7,
};

// Enum PaperMovieScene.EPaperGroupSectionSubType
// NumValues: 0x0003
enum class EPaperGroupSectionSubType : uint8
{
	Normal                                   = 0,
	LineBreak                                = 1,
	EPaperGroupSectionSubType_MAX            = 2,
};

// Enum PaperMovieScene.EPaperSequencerSectionType
// NumValues: 0x0003
enum class EPaperSequencerSectionType : uint8
{
	DefaultType                              = 0,
	LineType                                 = 1,
	Max                                      = 2,
};

// Enum PaperMovieScene.EPCDCustomSequencerTrackType
// NumValues: 0x0003
enum class EPCDCustomSequencerTrackType : uint32
{
	MasterTrack                              = 0,
	ObjectTrack                              = 1,
	EPCDCustomSequencerTrackType_MAX         = 2,
};

// ScriptStruct PaperMovieScene.PaperMovieSceneGroupTemplate
// 0x0010 (0x0030 - 0x0020)
struct FPaperMovieSceneGroupTemplate final : public FMovieSceneEvalTemplate
{
public:
	class UPaperMovieSceneGroupSection*           GroupSection;                                      // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperMovieSceneGroupTemplate) == 0x000008, "Wrong alignment on FPaperMovieSceneGroupTemplate");
static_assert(sizeof(FPaperMovieSceneGroupTemplate) == 0x000030, "Wrong size on FPaperMovieSceneGroupTemplate");
static_assert(offsetof(FPaperMovieSceneGroupTemplate, GroupSection) == 0x000020, "Member 'FPaperMovieSceneGroupTemplate::GroupSection' has a wrong offset!");

// ScriptStruct PaperMovieScene.PaperMovieSceneIdleTemplateBase
// 0x0010 (0x0030 - 0x0020)
struct FPaperMovieSceneIdleTemplateBase : public FMovieSceneEvalTemplate
{
public:
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventObjectBindingName;                            // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperMovieSceneIdleTemplateBase) == 0x000008, "Wrong alignment on FPaperMovieSceneIdleTemplateBase");
static_assert(sizeof(FPaperMovieSceneIdleTemplateBase) == 0x000030, "Wrong size on FPaperMovieSceneIdleTemplateBase");
static_assert(offsetof(FPaperMovieSceneIdleTemplateBase, EventObjectBindingName) == 0x000024, "Member 'FPaperMovieSceneIdleTemplateBase::EventObjectBindingName' has a wrong offset!");

// ScriptStruct PaperMovieScene.PaperMovieSceneIdleTriggerTemplate
// 0x0020 (0x0050 - 0x0030)
struct FPaperMovieSceneIdleTriggerTemplate final : public FPaperMovieSceneIdleTemplateBase
{
public:
	TArray<struct FFrameNumber>                   EventTimes;                                        // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         EventNames;                                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperMovieSceneIdleTriggerTemplate) == 0x000008, "Wrong alignment on FPaperMovieSceneIdleTriggerTemplate");
static_assert(sizeof(FPaperMovieSceneIdleTriggerTemplate) == 0x000050, "Wrong size on FPaperMovieSceneIdleTriggerTemplate");
static_assert(offsetof(FPaperMovieSceneIdleTriggerTemplate, EventTimes) == 0x000030, "Member 'FPaperMovieSceneIdleTriggerTemplate::EventTimes' has a wrong offset!");
static_assert(offsetof(FPaperMovieSceneIdleTriggerTemplate, EventNames) == 0x000040, "Member 'FPaperMovieSceneIdleTriggerTemplate::EventNames' has a wrong offset!");

// ScriptStruct PaperMovieScene.PaperMovieSceneIdleRepeaterTemplate
// 0x0010 (0x0040 - 0x0030)
struct FPaperMovieSceneIdleRepeaterTemplate final : public FPaperMovieSceneIdleTemplateBase
{
public:
	class FString                                 EventName;                                         // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaperMovieSceneIdleRepeaterTemplate) == 0x000008, "Wrong alignment on FPaperMovieSceneIdleRepeaterTemplate");
static_assert(sizeof(FPaperMovieSceneIdleRepeaterTemplate) == 0x000040, "Wrong size on FPaperMovieSceneIdleRepeaterTemplate");
static_assert(offsetof(FPaperMovieSceneIdleRepeaterTemplate, EventName) == 0x000030, "Member 'FPaperMovieSceneIdleRepeaterTemplate::EventName' has a wrong offset!");

// ScriptStruct PaperMovieScene.PaperMovieSceneLineTemplate
// 0x0008 (0x0028 - 0x0020)
struct FPaperMovieSceneLineTemplate final : public FMovieSceneEvalTemplate
{
public:
	class UPaperMovieSceneLineSection*            LineSection;                                       // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPaperMovieSceneLineTemplate) == 0x000008, "Wrong alignment on FPaperMovieSceneLineTemplate");
static_assert(sizeof(FPaperMovieSceneLineTemplate) == 0x000028, "Wrong size on FPaperMovieSceneLineTemplate");
static_assert(offsetof(FPaperMovieSceneLineTemplate, LineSection) == 0x000020, "Member 'FPaperMovieSceneLineTemplate::LineSection' has a wrong offset!");

// ScriptStruct PaperMovieScene.PaperDialogueCustomSectionData
// 0x001C (0x001C - 0x0000)
struct FPaperDialogueCustomSectionData final
{
public:
	class FName                                   ActorName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LineId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrackName;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFirstLine;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPaperDialogueCustomSectionData) == 0x000004, "Wrong alignment on FPaperDialogueCustomSectionData");
static_assert(sizeof(FPaperDialogueCustomSectionData) == 0x00001C, "Wrong size on FPaperDialogueCustomSectionData");
static_assert(offsetof(FPaperDialogueCustomSectionData, ActorName) == 0x000000, "Member 'FPaperDialogueCustomSectionData::ActorName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCustomSectionData, LineId) == 0x000008, "Member 'FPaperDialogueCustomSectionData::LineId' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCustomSectionData, TrackName) == 0x000010, "Member 'FPaperDialogueCustomSectionData::TrackName' has a wrong offset!");
static_assert(offsetof(FPaperDialogueCustomSectionData, bIsFirstLine) == 0x000018, "Member 'FPaperDialogueCustomSectionData::bIsFirstLine' has a wrong offset!");

// ScriptStruct PaperMovieScene.PaperMovieSceneSequencerTemplateBP
// 0x0008 (0x0028 - 0x0020)
struct FPaperMovieSceneSequencerTemplateBP : public FMovieSceneEvalTemplate
{
public:
	class UPaperMovieSceneSequencerSectionBP*     SequencerSectionBP;                                // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPaperMovieSceneSequencerTemplateBP) == 0x000008, "Wrong alignment on FPaperMovieSceneSequencerTemplateBP");
static_assert(sizeof(FPaperMovieSceneSequencerTemplateBP) == 0x000028, "Wrong size on FPaperMovieSceneSequencerTemplateBP");
static_assert(offsetof(FPaperMovieSceneSequencerTemplateBP, SequencerSectionBP) == 0x000020, "Member 'FPaperMovieSceneSequencerTemplateBP::SequencerSectionBP' has a wrong offset!");

// ScriptStruct PaperMovieScene.PaperMovieSceneSequencerTemplateBP_Animation
// 0x0018 (0x0040 - 0x0028)
struct FPaperMovieSceneSequencerTemplateBP_Animation final : public FPaperMovieSceneSequencerTemplateBP
{
public:
	class UPaperMovieSceneSequencerSectionBP_Animation* SequencerSectionBP_Animation;                // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ObjectBindingID;                                   // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPaperMovieSceneSequencerTemplateBP_Animation) == 0x000008, "Wrong alignment on FPaperMovieSceneSequencerTemplateBP_Animation");
static_assert(sizeof(FPaperMovieSceneSequencerTemplateBP_Animation) == 0x000040, "Wrong size on FPaperMovieSceneSequencerTemplateBP_Animation");
static_assert(offsetof(FPaperMovieSceneSequencerTemplateBP_Animation, SequencerSectionBP_Animation) == 0x000028, "Member 'FPaperMovieSceneSequencerTemplateBP_Animation::SequencerSectionBP_Animation' has a wrong offset!");
static_assert(offsetof(FPaperMovieSceneSequencerTemplateBP_Animation, ObjectBindingID) == 0x000030, "Member 'FPaperMovieSceneSequencerTemplateBP_Animation::ObjectBindingID' has a wrong offset!");

// ScriptStruct PaperMovieScene.PCDSequencerTrackInstanceInput
// 0x0070 (0x0070 - 0x0000)
struct FPCDSequencerTrackInstanceInput final
{
public:
	class UPaperMovieSceneSequencerSectionBP*     Section;                                           // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x68];                                       // 0x0008(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPCDSequencerTrackInstanceInput) == 0x000008, "Wrong alignment on FPCDSequencerTrackInstanceInput");
static_assert(sizeof(FPCDSequencerTrackInstanceInput) == 0x000070, "Wrong size on FPCDSequencerTrackInstanceInput");
static_assert(offsetof(FPCDSequencerTrackInstanceInput, Section) == 0x000000, "Member 'FPCDSequencerTrackInstanceInput::Section' has a wrong offset!");

}

