#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlendStack

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BlendStack_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BlendStack.BlendStackAnimNodeLibrary.BlendTo
// 0x0058 (0x0058 - 0x0000)
struct BlendStackAnimNodeLibrary_BlendTo final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBlendStackAnimNodeReference           BlendStackNode;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationTime;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlendParameters;                                   // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WantedPlayRate;                                    // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivationDelay;                                   // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlendStackAnimNodeLibrary_BlendTo) == 0x000008, "Wrong alignment on BlendStackAnimNodeLibrary_BlendTo");
static_assert(sizeof(BlendStackAnimNodeLibrary_BlendTo) == 0x000058, "Wrong size on BlendStackAnimNodeLibrary_BlendTo");
static_assert(offsetof(BlendStackAnimNodeLibrary_BlendTo, Context) == 0x000000, "Member 'BlendStackAnimNodeLibrary_BlendTo::Context' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_BlendTo, BlendStackNode) == 0x000010, "Member 'BlendStackAnimNodeLibrary_BlendTo::BlendStackNode' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_BlendTo, AnimationAsset) == 0x000020, "Member 'BlendStackAnimNodeLibrary_BlendTo::AnimationAsset' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_BlendTo, AnimationTime) == 0x000028, "Member 'BlendStackAnimNodeLibrary_BlendTo::AnimationTime' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_BlendTo, bLoop) == 0x00002C, "Member 'BlendStackAnimNodeLibrary_BlendTo::bLoop' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_BlendTo, bMirrored) == 0x00002D, "Member 'BlendStackAnimNodeLibrary_BlendTo::bMirrored' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_BlendTo, BlendTime) == 0x000030, "Member 'BlendStackAnimNodeLibrary_BlendTo::BlendTime' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_BlendTo, BlendParameters) == 0x000038, "Member 'BlendStackAnimNodeLibrary_BlendTo::BlendParameters' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_BlendTo, WantedPlayRate) == 0x000050, "Member 'BlendStackAnimNodeLibrary_BlendTo::WantedPlayRate' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_BlendTo, ActivationDelay) == 0x000054, "Member 'BlendStackAnimNodeLibrary_BlendTo::ActivationDelay' has a wrong offset!");

// Function BlendStack.BlendStackAnimNodeLibrary.ConvertToBlendStackNode
// 0x0028 (0x0028 - 0x0000)
struct BlendStackAnimNodeLibrary_ConvertToBlendStackNode final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendStackAnimNodeReference           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlendStackAnimNodeLibrary_ConvertToBlendStackNode) == 0x000008, "Wrong alignment on BlendStackAnimNodeLibrary_ConvertToBlendStackNode");
static_assert(sizeof(BlendStackAnimNodeLibrary_ConvertToBlendStackNode) == 0x000028, "Wrong size on BlendStackAnimNodeLibrary_ConvertToBlendStackNode");
static_assert(offsetof(BlendStackAnimNodeLibrary_ConvertToBlendStackNode, Node) == 0x000000, "Member 'BlendStackAnimNodeLibrary_ConvertToBlendStackNode::Node' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_ConvertToBlendStackNode, Result) == 0x000010, "Member 'BlendStackAnimNodeLibrary_ConvertToBlendStackNode::Result' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_ConvertToBlendStackNode, ReturnValue) == 0x000018, "Member 'BlendStackAnimNodeLibrary_ConvertToBlendStackNode::ReturnValue' has a wrong offset!");

// Function BlendStack.BlendStackAnimNodeLibrary.ConvertToBlendStackNodePure
// 0x0028 (0x0028 - 0x0000)
struct BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBlendStackAnimNodeReference           BlendStackNode;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure) == 0x000008, "Wrong alignment on BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure");
static_assert(sizeof(BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure) == 0x000028, "Wrong size on BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure");
static_assert(offsetof(BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure, Node) == 0x000000, "Member 'BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure::Node' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure, BlendStackNode) == 0x000010, "Member 'BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure::BlendStackNode' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure, Result) == 0x000020, "Member 'BlendStackAnimNodeLibrary_ConvertToBlendStackNodePure::Result' has a wrong offset!");

// Function BlendStack.BlendStackAnimNodeLibrary.ForceBlendNextUpdate
// 0x0010 (0x0010 - 0x0000)
struct BlendStackAnimNodeLibrary_ForceBlendNextUpdate final
{
public:
	struct FBlendStackAnimNodeReference           BlendStackNode;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlendStackAnimNodeLibrary_ForceBlendNextUpdate) == 0x000008, "Wrong alignment on BlendStackAnimNodeLibrary_ForceBlendNextUpdate");
static_assert(sizeof(BlendStackAnimNodeLibrary_ForceBlendNextUpdate) == 0x000010, "Wrong size on BlendStackAnimNodeLibrary_ForceBlendNextUpdate");
static_assert(offsetof(BlendStackAnimNodeLibrary_ForceBlendNextUpdate, BlendStackNode) == 0x000000, "Member 'BlendStackAnimNodeLibrary_ForceBlendNextUpdate::BlendStackNode' has a wrong offset!");

// Function BlendStack.BlendStackAnimNodeLibrary.GetCurrentBlendStackAnimAsset
// 0x0018 (0x0018 - 0x0000)
struct BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAsset final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAsset) == 0x000008, "Wrong alignment on BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAsset");
static_assert(sizeof(BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAsset) == 0x000018, "Wrong size on BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAsset");
static_assert(offsetof(BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAsset, Node) == 0x000000, "Member 'BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAsset::Node' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAsset, ReturnValue) == 0x000010, "Member 'BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAsset::ReturnValue' has a wrong offset!");

// Function BlendStack.BlendStackAnimNodeLibrary.GetCurrentBlendStackAnimAssetTime
// 0x0018 (0x0018 - 0x0000)
struct BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAssetTime final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAssetTime) == 0x000008, "Wrong alignment on BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAssetTime");
static_assert(sizeof(BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAssetTime) == 0x000018, "Wrong size on BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAssetTime");
static_assert(offsetof(BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAssetTime, Node) == 0x000000, "Member 'BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAssetTime::Node' has a wrong offset!");
static_assert(offsetof(BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAssetTime, ReturnValue) == 0x000010, "Member 'BlendStackAnimNodeLibrary_GetCurrentBlendStackAnimAssetTime::ReturnValue' has a wrong offset!");

// Function BlendStack.BlendStackInputAnimNodeLibrary.ConvertToBlendStackInputNode
// 0x0028 (0x0028 - 0x0000)
struct BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNode final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EAnimNodeReferenceConversionResult            Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendStackInputAnimNodeReference      ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNode) == 0x000008, "Wrong alignment on BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNode");
static_assert(sizeof(BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNode) == 0x000028, "Wrong size on BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNode");
static_assert(offsetof(BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNode, Node) == 0x000000, "Member 'BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNode::Node' has a wrong offset!");
static_assert(offsetof(BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNode, Result) == 0x000010, "Member 'BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNode::Result' has a wrong offset!");
static_assert(offsetof(BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNode, ReturnValue) == 0x000018, "Member 'BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNode::ReturnValue' has a wrong offset!");

// Function BlendStack.BlendStackInputAnimNodeLibrary.ConvertToBlendStackInputNodePure
// 0x0028 (0x0028 - 0x0000)
struct BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNodePure final
{
public:
	struct FAnimNodeReference                     Node;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBlendStackInputAnimNodeReference      BlendStackInputNode;                               // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNodePure) == 0x000008, "Wrong alignment on BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNodePure");
static_assert(sizeof(BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNodePure) == 0x000028, "Wrong size on BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNodePure");
static_assert(offsetof(BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNodePure, Node) == 0x000000, "Member 'BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNodePure::Node' has a wrong offset!");
static_assert(offsetof(BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNodePure, BlendStackInputNode) == 0x000010, "Member 'BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNodePure::BlendStackInputNode' has a wrong offset!");
static_assert(offsetof(BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNodePure, Result) == 0x000020, "Member 'BlendStackInputAnimNodeLibrary_ConvertToBlendStackInputNodePure::Result' has a wrong offset!");

// Function BlendStack.BlendStackInputAnimNodeLibrary.GetProperties
// 0x0020 (0x0020 - 0x0000)
struct BlendStackInputAnimNodeLibrary_GetProperties final
{
public:
	struct FBlendStackInputAnimNodeReference      BlendStackInputNode;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedTime;                                   // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlendStackInputAnimNodeLibrary_GetProperties) == 0x000008, "Wrong alignment on BlendStackInputAnimNodeLibrary_GetProperties");
static_assert(sizeof(BlendStackInputAnimNodeLibrary_GetProperties) == 0x000020, "Wrong size on BlendStackInputAnimNodeLibrary_GetProperties");
static_assert(offsetof(BlendStackInputAnimNodeLibrary_GetProperties, BlendStackInputNode) == 0x000000, "Member 'BlendStackInputAnimNodeLibrary_GetProperties::BlendStackInputNode' has a wrong offset!");
static_assert(offsetof(BlendStackInputAnimNodeLibrary_GetProperties, AnimationAsset) == 0x000010, "Member 'BlendStackInputAnimNodeLibrary_GetProperties::AnimationAsset' has a wrong offset!");
static_assert(offsetof(BlendStackInputAnimNodeLibrary_GetProperties, AccumulatedTime) == 0x000018, "Member 'BlendStackInputAnimNodeLibrary_GetProperties::AccumulatedTime' has a wrong offset!");

}

