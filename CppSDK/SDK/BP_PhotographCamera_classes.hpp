#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PhotographCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PhotographCamera.BP_PhotographCamera_C
// 0x0060 (0x0408 - 0x03A8)
class ABP_PhotographCamera_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraCollisionProcess*                CameraCollisionProcess;                            // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UX6PhotographCameraComponent*           CineCamera;                                        // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class AActor>                  Nikki;                                             // 0x03D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        FocusOffset;                                       // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlatFormMobile;                                  // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetVignetteIntensity(double InValue);
	void SetFocusDistance(double InDistance);
	void SetFocusActor(class AActor* InActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InitAsFirstPersonCamera();
	void GetVignetteIntensity(double* OutValue);
	void GetDefaultVignetteIntensity(double* DefaultValue);
	void GetCameraRelativeLocToNikki();
	void FocusNikki(class AActor* InNikki);
	void ExecuteUbergraph_BP_PhotographCamera(int32 EntryPoint);
	void ConvertParamsToMobilePlatform();
	void ClearFocusNikki();
	void ClearFocusActor();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PhotographCamera_C">();
	}
	static class ABP_PhotographCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PhotographCamera_C>();
	}
};
static_assert(alignof(ABP_PhotographCamera_C) == 0x000008, "Wrong alignment on ABP_PhotographCamera_C");
static_assert(sizeof(ABP_PhotographCamera_C) == 0x000408, "Wrong size on ABP_PhotographCamera_C");
static_assert(offsetof(ABP_PhotographCamera_C, UberGraphFrame) == 0x0003A8, "Member 'ABP_PhotographCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PhotographCamera_C, CameraCollisionProcess) == 0x0003B0, "Member 'ABP_PhotographCamera_C::CameraCollisionProcess' has a wrong offset!");
static_assert(offsetof(ABP_PhotographCamera_C, CineCamera) == 0x0003B8, "Member 'ABP_PhotographCamera_C::CineCamera' has a wrong offset!");
static_assert(offsetof(ABP_PhotographCamera_C, Sphere) == 0x0003C0, "Member 'ABP_PhotographCamera_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_PhotographCamera_C, DefaultSceneRoot) == 0x0003C8, "Member 'ABP_PhotographCamera_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PhotographCamera_C, Nikki) == 0x0003D0, "Member 'ABP_PhotographCamera_C::Nikki' has a wrong offset!");
static_assert(offsetof(ABP_PhotographCamera_C, FocusOffset) == 0x0003F8, "Member 'ABP_PhotographCamera_C::FocusOffset' has a wrong offset!");
static_assert(offsetof(ABP_PhotographCamera_C, IsPlatFormMobile) == 0x000400, "Member 'ABP_PhotographCamera_C::IsPlatFormMobile' has a wrong offset!");

}

