#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperDialogue

#include "Basic.hpp"

#include "PaperDialogue_structs.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "LevelSequence_classes.hpp"


namespace SDK
{

// Class PaperDialogue.PaperDialogue
// 0x0180 (0x01A8 - 0x0028)
class UPaperDialogue final : public UObject
{
public:
	class UPaperDialogueSet*                      Stage;                                             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DialogueId;                                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       SpeakerSnapToTerrainMap;                           // 0x0038(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FPaperDialogueActorInfo>        Actors;                                            // 0x0088(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LineInterval;                                      // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPaperDialogueLines>            Lines;                                             // 0x00A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPaperDialogueCinematicInfo*            CinematicInfo;                                     // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGuid, class FName>               CamerasInUse;                                      // 0x00B8(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, class FName>               FbxCamerasInUse;                                   // 0x0108(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FDialogueFbxCameraShot> FbxCameraShots;                                 // 0x0158(0x0050)(NativeAccessSpecifierPublic)

public:
	void OnTriggerEvent(int32 I);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogue">();
	}
	static class UPaperDialogue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogue>();
	}
};
static_assert(alignof(UPaperDialogue) == 0x000008, "Wrong alignment on UPaperDialogue");
static_assert(sizeof(UPaperDialogue) == 0x0001A8, "Wrong size on UPaperDialogue");
static_assert(offsetof(UPaperDialogue, Stage) == 0x000028, "Member 'UPaperDialogue::Stage' has a wrong offset!");
static_assert(offsetof(UPaperDialogue, DialogueId) == 0x000030, "Member 'UPaperDialogue::DialogueId' has a wrong offset!");
static_assert(offsetof(UPaperDialogue, SpeakerSnapToTerrainMap) == 0x000038, "Member 'UPaperDialogue::SpeakerSnapToTerrainMap' has a wrong offset!");
static_assert(offsetof(UPaperDialogue, Actors) == 0x000088, "Member 'UPaperDialogue::Actors' has a wrong offset!");
static_assert(offsetof(UPaperDialogue, LineInterval) == 0x000098, "Member 'UPaperDialogue::LineInterval' has a wrong offset!");
static_assert(offsetof(UPaperDialogue, Lines) == 0x0000A0, "Member 'UPaperDialogue::Lines' has a wrong offset!");
static_assert(offsetof(UPaperDialogue, CinematicInfo) == 0x0000B0, "Member 'UPaperDialogue::CinematicInfo' has a wrong offset!");
static_assert(offsetof(UPaperDialogue, CamerasInUse) == 0x0000B8, "Member 'UPaperDialogue::CamerasInUse' has a wrong offset!");
static_assert(offsetof(UPaperDialogue, FbxCamerasInUse) == 0x000108, "Member 'UPaperDialogue::FbxCamerasInUse' has a wrong offset!");
static_assert(offsetof(UPaperDialogue, FbxCameraShots) == 0x000158, "Member 'UPaperDialogue::FbxCameraShots' has a wrong offset!");

// Class PaperDialogue.DialogueBaseActor
// 0x0000 (0x03A8 - 0x03A8)
class ADialogueBaseActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DialogueBaseActor">();
	}
	static class ADialogueBaseActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADialogueBaseActor>();
	}
};
static_assert(alignof(ADialogueBaseActor) == 0x000008, "Wrong alignment on ADialogueBaseActor");
static_assert(sizeof(ADialogueBaseActor) == 0x0003A8, "Wrong size on ADialogueBaseActor");

// Class PaperDialogue.PaperDialogueNode_Base
// 0x0020 (0x0048 - 0x0028)
class UPaperDialogueNode_Base : public UObject
{
public:
	class UPaperDialogueNode_Base*                Parent;                                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  NodeGuid;                                          // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphNode*                           GraphNode;                                         // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnEnter();
	void OnExit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueNode_Base">();
	}
	static class UPaperDialogueNode_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueNode_Base>();
	}
};
static_assert(alignof(UPaperDialogueNode_Base) == 0x000008, "Wrong alignment on UPaperDialogueNode_Base");
static_assert(sizeof(UPaperDialogueNode_Base) == 0x000048, "Wrong size on UPaperDialogueNode_Base");
static_assert(offsetof(UPaperDialogueNode_Base, Parent) == 0x000028, "Member 'UPaperDialogueNode_Base::Parent' has a wrong offset!");
static_assert(offsetof(UPaperDialogueNode_Base, NodeGuid) == 0x000030, "Member 'UPaperDialogueNode_Base::NodeGuid' has a wrong offset!");
static_assert(offsetof(UPaperDialogueNode_Base, GraphNode) == 0x000040, "Member 'UPaperDialogueNode_Base::GraphNode' has a wrong offset!");

// Class PaperDialogue.PaperDialogueBranch
// 0x0020 (0x0068 - 0x0048)
class UPaperDialogueBranch : public UPaperDialogueNode_Base
{
public:
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDialogueMenuItem>              Items;                                             // 0x0058(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueBranch">();
	}
	static class UPaperDialogueBranch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueBranch>();
	}
};
static_assert(alignof(UPaperDialogueBranch) == 0x000008, "Wrong alignment on UPaperDialogueBranch");
static_assert(sizeof(UPaperDialogueBranch) == 0x000068, "Wrong size on UPaperDialogueBranch");
static_assert(offsetof(UPaperDialogueBranch, Items) == 0x000058, "Member 'UPaperDialogueBranch::Items' has a wrong offset!");

// Class PaperDialogue.PaperDialogueBlueprintNode
// 0x0000 (0x0068 - 0x0068)
class UPaperDialogueBlueprintNode final : public UPaperDialogueBranch
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueBlueprintNode">();
	}
	static class UPaperDialogueBlueprintNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueBlueprintNode>();
	}
};
static_assert(alignof(UPaperDialogueBlueprintNode) == 0x000008, "Wrong alignment on UPaperDialogueBlueprintNode");
static_assert(sizeof(UPaperDialogueBlueprintNode) == 0x000068, "Wrong size on UPaperDialogueBlueprintNode");

// Class PaperDialogue.PaperDialogueBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UPaperDialogueBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ConvertStageCustomExtendedData(const struct FDialogueCustomExtendedData& InCustomExtendedData, class UStructProperty* OutStructData);
	static bool ConvertStageCustomExtendedJson(const class FString& InCustomExtendedJson, class UStructProperty* OutStructData);
	static struct FPaperDialogueGenerationCameraShakeTracks GetCameraShakeTrackGenerationConfig();
	static struct FPaperDialogueGenerationSetupCameraStruct GetCameraTrackGenerationConfig();
	static struct FPaperDialogueGenerationCharacterNameableTracks GetCharacterNameableTrackGenerationConfig();
	static struct FPaperDialogueGenerationCustomTracks GetCustomTrackAndSlotConfigs();
	static struct FPaperDialogueGenerationEmotionTracks GetEmotionTrackGenerationConfig();
	static struct FPaperDialogueGenerationSetupFadeStruct GetFadeTrackGenerationConfig();
	static struct FPaperDialogueGenerationGestureTracks GetGestureTrackGenerationConfig();
	static struct FPaperDialogueGenerationHighHeelTracks GetHighHeelTrackGenerationConfig();
	static int64 GetIndexByDisplayName(const struct FSoftObjectPath& EnumSoftPath, const class FName& DisplayName);
	static struct FPaperDialogueGenerationLookAtTracks GetLookAtTrackGenerationConfig();
	static struct FPaperDialogueGenerationResimulationTracks GetResimulationTrackGenerationConfig();
	static struct FPaperDialogueGenerationAnimationTracks GetTrackAndSlotConfigs();
	static struct FPaperDialogueGenerationTransformTracks GetTransformTrackGenerationConfig();
	static struct FPaperDialogueGenerationUnifiedAnimationTracks GetUniteTrackAndSlotConfigs();
	static bool InitDialogueData();
	static class APaperDialogueSequenceActor* PlayDialogueStage(const class UObject* WorldContextObject, const struct FTransform& SpawnTransform, class UPaperDialogueStage* DialogueStage, class UPaperDialogueUserWidget* InDialogueWidget, const TMap<class FName, class AActor*>& BindingActorsBySlotName, const TArray<class FName>& UnSwitchAvatarTags, bool bAutoPlay, bool bExitAfterPlayEnd, bool bEnableOverrideInstanceData, bool bAttachBindActorToSequence);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueBPLibrary">();
	}
	static class UPaperDialogueBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueBPLibrary>();
	}
};
static_assert(alignof(UPaperDialogueBPLibrary) == 0x000008, "Wrong alignment on UPaperDialogueBPLibrary");
static_assert(sizeof(UPaperDialogueBPLibrary) == 0x000028, "Wrong size on UPaperDialogueBPLibrary");

// Class PaperDialogue.PaperDialogueCinematicInfo
// 0x0168 (0x0190 - 0x0028)
class UPaperDialogueCinematicInfo final : public UObject
{
public:
	TMap<class FName, struct FGuid>               ActorGuids;                                        // 0x0028(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FComponentGuids>     CompGuids;                                         // 0x0078(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               CameraGuids;                                       // 0x00C8(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               LightGuids;                                        // 0x0118(0x0050)(NativeAccessSpecifierPublic)
	class ULevelSequence*                         Dialogue;                                          // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogueLineTime>              LineTime;                                          // 0x0170(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CutTime;                                           // 0x0180(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueCinematicInfo">();
	}
	static class UPaperDialogueCinematicInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueCinematicInfo>();
	}
};
static_assert(alignof(UPaperDialogueCinematicInfo) == 0x000008, "Wrong alignment on UPaperDialogueCinematicInfo");
static_assert(sizeof(UPaperDialogueCinematicInfo) == 0x000190, "Wrong size on UPaperDialogueCinematicInfo");
static_assert(offsetof(UPaperDialogueCinematicInfo, ActorGuids) == 0x000028, "Member 'UPaperDialogueCinematicInfo::ActorGuids' has a wrong offset!");
static_assert(offsetof(UPaperDialogueCinematicInfo, CompGuids) == 0x000078, "Member 'UPaperDialogueCinematicInfo::CompGuids' has a wrong offset!");
static_assert(offsetof(UPaperDialogueCinematicInfo, CameraGuids) == 0x0000C8, "Member 'UPaperDialogueCinematicInfo::CameraGuids' has a wrong offset!");
static_assert(offsetof(UPaperDialogueCinematicInfo, LightGuids) == 0x000118, "Member 'UPaperDialogueCinematicInfo::LightGuids' has a wrong offset!");
static_assert(offsetof(UPaperDialogueCinematicInfo, Dialogue) == 0x000168, "Member 'UPaperDialogueCinematicInfo::Dialogue' has a wrong offset!");
static_assert(offsetof(UPaperDialogueCinematicInfo, LineTime) == 0x000170, "Member 'UPaperDialogueCinematicInfo::LineTime' has a wrong offset!");
static_assert(offsetof(UPaperDialogueCinematicInfo, CutTime) == 0x000180, "Member 'UPaperDialogueCinematicInfo::CutTime' has a wrong offset!");

// Class PaperDialogue.PaperDialogueConditionNode
// 0x0008 (0x0070 - 0x0068)
class UPaperDialogueConditionNode final : public UPaperDialogueBranch
{
public:
	bool                                          bPreviewValue;                                     // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueConditionNode">();
	}
	static class UPaperDialogueConditionNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueConditionNode>();
	}
};
static_assert(alignof(UPaperDialogueConditionNode) == 0x000008, "Wrong alignment on UPaperDialogueConditionNode");
static_assert(sizeof(UPaperDialogueConditionNode) == 0x000070, "Wrong size on UPaperDialogueConditionNode");
static_assert(offsetof(UPaperDialogueConditionNode, bPreviewValue) == 0x000068, "Member 'UPaperDialogueConditionNode::bPreviewValue' has a wrong offset!");

// Class PaperDialogue.PaperDialogueControllerComponent
// 0x0068 (0x0110 - 0x00A8)
class UPaperDialogueControllerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x60];                                      // 0x00A8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperDialogueStage*                    Graph;                                             // 0x0108(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnDialoguePlayEnd();
	void OnExit();
	void OnLevelSequencePlayEnd();
	void OnPlay();
	void OnStop();
	void Play();
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueControllerComponent">();
	}
	static class UPaperDialogueControllerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueControllerComponent>();
	}
};
static_assert(alignof(UPaperDialogueControllerComponent) == 0x000008, "Wrong alignment on UPaperDialogueControllerComponent");
static_assert(sizeof(UPaperDialogueControllerComponent) == 0x000110, "Wrong size on UPaperDialogueControllerComponent");
static_assert(offsetof(UPaperDialogueControllerComponent, Graph) == 0x000108, "Member 'UPaperDialogueControllerComponent::Graph' has a wrong offset!");

// Class PaperDialogue.PaperDialogueSingleNode
// 0x0008 (0x0050 - 0x0048)
class UPaperDialogueSingleNode : public UPaperDialogueNode_Base
{
public:
	class UPaperDialogueNode_Base*                Next;                                              // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueSingleNode">();
	}
	static class UPaperDialogueSingleNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueSingleNode>();
	}
};
static_assert(alignof(UPaperDialogueSingleNode) == 0x000008, "Wrong alignment on UPaperDialogueSingleNode");
static_assert(sizeof(UPaperDialogueSingleNode) == 0x000050, "Wrong size on UPaperDialogueSingleNode");
static_assert(offsetof(UPaperDialogueSingleNode, Next) == 0x000048, "Member 'UPaperDialogueSingleNode::Next' has a wrong offset!");

// Class PaperDialogue.PaperDialogueFunctionNode
// 0x0018 (0x0068 - 0x0050)
class UPaperDialogueFunctionNode final : public UPaperDialogueSingleNode
{
public:
	class FName                                   FunctionName;                                      // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueFunctionNode">();
	}
	static class UPaperDialogueFunctionNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueFunctionNode>();
	}
};
static_assert(alignof(UPaperDialogueFunctionNode) == 0x000008, "Wrong alignment on UPaperDialogueFunctionNode");
static_assert(sizeof(UPaperDialogueFunctionNode) == 0x000068, "Wrong size on UPaperDialogueFunctionNode");
static_assert(offsetof(UPaperDialogueFunctionNode, FunctionName) == 0x000050, "Member 'UPaperDialogueFunctionNode::FunctionName' has a wrong offset!");

// Class PaperDialogue.PaperDialogueMenu
// 0x0078 (0x00E0 - 0x0068)
class UPaperDialogueMenu final : public UPaperDialogueBranch
{
public:
	class FName                                   ChoiceHubName;                                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChoiceSlot;                                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpecialUIWidgetType;                               // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPaperDialogueChoiceLineConfig> DialogueChoices;                                   // 0x0080(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      ChoiceLineIDWithItemMap;                           // 0x0090(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueMenu">();
	}
	static class UPaperDialogueMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueMenu>();
	}
};
static_assert(alignof(UPaperDialogueMenu) == 0x000008, "Wrong alignment on UPaperDialogueMenu");
static_assert(sizeof(UPaperDialogueMenu) == 0x0000E0, "Wrong size on UPaperDialogueMenu");
static_assert(offsetof(UPaperDialogueMenu, ChoiceHubName) == 0x000068, "Member 'UPaperDialogueMenu::ChoiceHubName' has a wrong offset!");
static_assert(offsetof(UPaperDialogueMenu, bChoiceSlot) == 0x000070, "Member 'UPaperDialogueMenu::bChoiceSlot' has a wrong offset!");
static_assert(offsetof(UPaperDialogueMenu, SpecialUIWidgetType) == 0x000074, "Member 'UPaperDialogueMenu::SpecialUIWidgetType' has a wrong offset!");
static_assert(offsetof(UPaperDialogueMenu, DialogueChoices) == 0x000080, "Member 'UPaperDialogueMenu::DialogueChoices' has a wrong offset!");
static_assert(offsetof(UPaperDialogueMenu, ChoiceLineIDWithItemMap) == 0x000090, "Member 'UPaperDialogueMenu::ChoiceLineIDWithItemMap' has a wrong offset!");

// Class PaperDialogue.PaperDialogueNodeBlueprint
// 0x0000 (0x00A8 - 0x00A8)
class UPaperDialogueNodeBlueprint final : public UBlueprint
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueNodeBlueprint">();
	}
	static class UPaperDialogueNodeBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueNodeBlueprint>();
	}
};
static_assert(alignof(UPaperDialogueNodeBlueprint) == 0x000008, "Wrong alignment on UPaperDialogueNodeBlueprint");
static_assert(sizeof(UPaperDialogueNodeBlueprint) == 0x0000A8, "Wrong size on UPaperDialogueNodeBlueprint");

// Class PaperDialogue.PaperOutputNode
// 0x0000 (0x0048 - 0x0048)
class UPaperOutputNode final : public UPaperDialogueNode_Base
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperOutputNode">();
	}
	static class UPaperOutputNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperOutputNode>();
	}
};
static_assert(alignof(UPaperOutputNode) == 0x000008, "Wrong alignment on UPaperOutputNode");
static_assert(sizeof(UPaperOutputNode) == 0x000048, "Wrong size on UPaperOutputNode");

// Class PaperDialogue.PaperDialoguePersistentNode
// 0x0010 (0x0078 - 0x0068)
class UPaperDialoguePersistentNode final : public UPaperDialogueBranch
{
public:
	class FName                                   PersistentVariable;                                // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersistentValue;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialoguePersistentNode">();
	}
	static class UPaperDialoguePersistentNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialoguePersistentNode>();
	}
};
static_assert(alignof(UPaperDialoguePersistentNode) == 0x000008, "Wrong alignment on UPaperDialoguePersistentNode");
static_assert(sizeof(UPaperDialoguePersistentNode) == 0x000078, "Wrong size on UPaperDialoguePersistentNode");
static_assert(offsetof(UPaperDialoguePersistentNode, PersistentVariable) == 0x000068, "Member 'UPaperDialoguePersistentNode::PersistentVariable' has a wrong offset!");
static_assert(offsetof(UPaperDialoguePersistentNode, PersistentValue) == 0x000070, "Member 'UPaperDialoguePersistentNode::PersistentValue' has a wrong offset!");

// Class PaperDialogue.PaperDialogueNode
// 0x0010 (0x0060 - 0x0050)
class UPaperDialogueNode final : public UPaperDialogueSingleNode
{
public:
	class UPaperDialogue*                         Dialogue;                                          // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceUnloadContextOnPlayEnd;                       // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueNode">();
	}
	static class UPaperDialogueNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueNode>();
	}
};
static_assert(alignof(UPaperDialogueNode) == 0x000008, "Wrong alignment on UPaperDialogueNode");
static_assert(sizeof(UPaperDialogueNode) == 0x000060, "Wrong size on UPaperDialogueNode");
static_assert(offsetof(UPaperDialogueNode, Dialogue) == 0x000050, "Member 'UPaperDialogueNode::Dialogue' has a wrong offset!");
static_assert(offsetof(UPaperDialogueNode, ForceUnloadContextOnPlayEnd) == 0x000058, "Member 'UPaperDialogueNode::ForceUnloadContextOnPlayEnd' has a wrong offset!");

// Class PaperDialogue.PaperDialogueSequenceActor
// 0x02D0 (0x0720 - 0x0450)
class APaperDialogueSequenceActor final : public ALevelSequenceActor
{
public:
	bool                                          bExitAfterPlayEnd;                                 // 0x0450(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DlgLocation;                                       // 0x0458(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FVector>             ActorPos;                                          // 0x0470(0x0050)(NativeAccessSpecifierPrivate)
	bool                                          PinContext;                                        // 0x04C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C1[0x3];                                      // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToGround;                                  // 0x04C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperDialogue*                         Dialogue;                                          // 0x04C8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperDialogueControllerComponent*      DialogueController;                                // 0x04D0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         DynamicActors;                                     // 0x04D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4E8[0x90];                                     // 0x04E8(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnPlayEnd;                                         // 0x0578(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 InLineIndex, const class FName& SpeakerTag, const class FName& TempNameTitleId, const class FName& StringID, const class FText& InNewLine, float Duration, bool IsLineBreak)> OnUpdateLine; // 0x0588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 groutId)> OnGroupPlayEnd;                                    // 0x0598(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayDialogueStageEnd;                            // 0x05A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPaperDialogueWidget*                   DialogueUserWidget;                                // 0x05B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class AActor*>                    BindingActorsBySlotIndex;                          // 0x05C0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, class AActor*>              BindingActorsBySlotName;                           // 0x0610(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, class AActor*>              BindingActorsParentActor;                          // 0x0660(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<class FName>                           UnSwitchAvatarTags;                                // 0x06B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAttachBindActorToSequence;                        // 0x06C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C1[0x7];                                      // 0x06C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       SpeakerSnapToTerrainMap;                           // 0x06C8(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bAutoPlay_PaperDialogueSequenceActor;              // 0x0718(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_719[0x7];                                      // 0x0719(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddBindingBySlotIndex(int32 SlotIndex, class AActor* InBindingActor);
	void AddBindingBySlotName(class FName Name_0, class AActor* InBindingActor);
	void Exit();
	class UPaperDialogue* GetDialogue();
	TMap<int32, class AActor*> GetDialogueCharacters();
	class UPaperDialogueStage* GetDialogueGraph();
	bool IsAutoPlay();
	bool IsPlaying();
	bool JumpToGroup(int32 GroupID);
	void OnSequencerPlayEnd();
	void OnSequencerPlayFinished();
	bool Pause(bool bPause);
	void Play(int32 StartLineIndex);
	void PlayGraph();
	void SetAutoPlay(bool InAutoPlay);
	void SetDialogue(class UPaperDialogue* InDlg);
	void SetDialogueGraph(class UPaperDialogueStage* InGraph);
	void SetDynamicActorByName(class FName Name_0, class AActor* Actor);
	void SetDynamicActorByNameWithParent(class FName Name_0, class AActor* Actor, class AActor* ParentActor);
	void SetDynamicActorBySlot(int32 nSlot, class AActor* Actor);
	void SetExitAfterPlayEnd(bool Exit);
	void SetPlayRate(float PlayRate);
	void Stop();

	float GetPlayRate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueSequenceActor">();
	}
	static class APaperDialogueSequenceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APaperDialogueSequenceActor>();
	}
};
static_assert(alignof(APaperDialogueSequenceActor) == 0x000008, "Wrong alignment on APaperDialogueSequenceActor");
static_assert(sizeof(APaperDialogueSequenceActor) == 0x000720, "Wrong size on APaperDialogueSequenceActor");
static_assert(offsetof(APaperDialogueSequenceActor, bExitAfterPlayEnd) == 0x000450, "Member 'APaperDialogueSequenceActor::bExitAfterPlayEnd' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, DlgLocation) == 0x000458, "Member 'APaperDialogueSequenceActor::DlgLocation' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, ActorPos) == 0x000470, "Member 'APaperDialogueSequenceActor::ActorPos' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, PinContext) == 0x0004C0, "Member 'APaperDialogueSequenceActor::PinContext' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, DistanceToGround) == 0x0004C4, "Member 'APaperDialogueSequenceActor::DistanceToGround' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, Dialogue) == 0x0004C8, "Member 'APaperDialogueSequenceActor::Dialogue' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, DialogueController) == 0x0004D0, "Member 'APaperDialogueSequenceActor::DialogueController' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, DynamicActors) == 0x0004D8, "Member 'APaperDialogueSequenceActor::DynamicActors' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, OnPlayEnd) == 0x000578, "Member 'APaperDialogueSequenceActor::OnPlayEnd' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, OnUpdateLine) == 0x000588, "Member 'APaperDialogueSequenceActor::OnUpdateLine' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, OnGroupPlayEnd) == 0x000598, "Member 'APaperDialogueSequenceActor::OnGroupPlayEnd' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, OnPlayDialogueStageEnd) == 0x0005A8, "Member 'APaperDialogueSequenceActor::OnPlayDialogueStageEnd' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, DialogueUserWidget) == 0x0005B8, "Member 'APaperDialogueSequenceActor::DialogueUserWidget' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, BindingActorsBySlotIndex) == 0x0005C0, "Member 'APaperDialogueSequenceActor::BindingActorsBySlotIndex' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, BindingActorsBySlotName) == 0x000610, "Member 'APaperDialogueSequenceActor::BindingActorsBySlotName' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, BindingActorsParentActor) == 0x000660, "Member 'APaperDialogueSequenceActor::BindingActorsParentActor' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, UnSwitchAvatarTags) == 0x0006B0, "Member 'APaperDialogueSequenceActor::UnSwitchAvatarTags' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, bAttachBindActorToSequence) == 0x0006C0, "Member 'APaperDialogueSequenceActor::bAttachBindActorToSequence' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, SpeakerSnapToTerrainMap) == 0x0006C8, "Member 'APaperDialogueSequenceActor::SpeakerSnapToTerrainMap' has a wrong offset!");
static_assert(offsetof(APaperDialogueSequenceActor, bAutoPlay_PaperDialogueSequenceActor) == 0x000718, "Member 'APaperDialogueSequenceActor::bAutoPlay_PaperDialogueSequenceActor' has a wrong offset!");

// Class PaperDialogue.PaperDialogueSequence
// 0x0008 (0x0058 - 0x0050)
class UPaperDialogueSequence final : public UPaperDialogueSingleNode
{
public:
	class ULevelSequence*                         Sequence;                                          // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueSequence">();
	}
	static class UPaperDialogueSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueSequence>();
	}
};
static_assert(alignof(UPaperDialogueSequence) == 0x000008, "Wrong alignment on UPaperDialogueSequence");
static_assert(sizeof(UPaperDialogueSequence) == 0x000058, "Wrong size on UPaperDialogueSequence");
static_assert(offsetof(UPaperDialogueSequence, Sequence) == 0x000050, "Member 'UPaperDialogueSequence::Sequence' has a wrong offset!");

// Class PaperDialogue.PaperDialogueSet
// 0x00E8 (0x0110 - 0x0028)
class UPaperDialogueSet final : public UObject
{
public:
	TMap<class FName, struct FDialogueCameraGroup> CameraGroups;                                     // 0x0028(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FDialogueCharacterSlot>         CharacterSlots;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     CameraSlots;                                       // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPaperDialogueCamera>           CineCameras;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDialogueLight>                 Lights;                                            // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FDialoguePresetCamera> PresetCameras;                                   // 0x00B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class ACineCameraActor>           DefaultCineCamera;                                 // 0x0108(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueSet">();
	}
	static class UPaperDialogueSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueSet>();
	}
};
static_assert(alignof(UPaperDialogueSet) == 0x000008, "Wrong alignment on UPaperDialogueSet");
static_assert(sizeof(UPaperDialogueSet) == 0x000110, "Wrong size on UPaperDialogueSet");
static_assert(offsetof(UPaperDialogueSet, CameraGroups) == 0x000028, "Member 'UPaperDialogueSet::CameraGroups' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSet, CharacterSlots) == 0x000078, "Member 'UPaperDialogueSet::CharacterSlots' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSet, CameraSlots) == 0x000088, "Member 'UPaperDialogueSet::CameraSlots' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSet, CineCameras) == 0x000098, "Member 'UPaperDialogueSet::CineCameras' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSet, Lights) == 0x0000A8, "Member 'UPaperDialogueSet::Lights' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSet, PresetCameras) == 0x0000B8, "Member 'UPaperDialogueSet::PresetCameras' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSet, DefaultCineCamera) == 0x000108, "Member 'UPaperDialogueSet::DefaultCineCamera' has a wrong offset!");

// Class PaperDialogue.PaperDialogueSettings
// 0x0098 (0x00C0 - 0x0028)
class UPaperDialogueSettings final : public UObject
{
public:
	EPaperDialogueLanguage                        DefaultLanguage;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetWwiseCultureWhenSetEditorCulture;              // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportMutilLanguage;                             // 0x002A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMutilLanguageCustomType;                          // 0x002B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MutilLanguageDialogueTypes;                        // 0x0030(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bEnableLineIntervalSnapping;                       // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoRemoveUnusedFbxCameras;                       // 0x0041(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOpenLookAtTrack : 1;                              // 0x0042(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bAnimSectionChangeRateWhenStretch;                 // 0x0043(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTryFixedLineMultiFrameBug;                        // 0x0044(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCDSequenceExternalActorHandleType           ExternalActorHandleType;                           // 0x0045(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseLevelSequenceBeforeChoice;                   // 0x0046(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixNoAudioEvent;                                  // 0x0047(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirectExecuteDialogueStageNodes;                  // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MuteRulesX;                                        // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MuteRulesY;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MuteRulesZ;                                        // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DialogueSetActorHeight;                            // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCombineLines;                               // 0x005C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        StageCustomExtendedStruct;                         // 0x0060(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRawDialogueData;                               // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenCustomLineTitle;                              // 0x0081(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRawVoiceData;                                  // 0x0082(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseProviderCameraRules;                           // 0x0083(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutomaticCameraHeightFix;                         // 0x0084(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFixDynamicActorCameraHeight : 1;                  // 0x0085(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bCameraFocallengthFix;                             // 0x0086(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetTooTallThreshold;                            // 0x0088(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraFocallengthFixArg;                           // 0x008C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseCineCameraArrayConfig : 1;                     // 0x0090(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSupportMultiLights : 1;                           // 0x0090(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        CharacterHeightDataTable;                          // 0x0098(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPaperProjectType                             ProjectType;                                       // 0x00B8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueSettings">();
	}
	static class UPaperDialogueSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueSettings>();
	}
};
static_assert(alignof(UPaperDialogueSettings) == 0x000008, "Wrong alignment on UPaperDialogueSettings");
static_assert(sizeof(UPaperDialogueSettings) == 0x0000C0, "Wrong size on UPaperDialogueSettings");
static_assert(offsetof(UPaperDialogueSettings, DefaultLanguage) == 0x000028, "Member 'UPaperDialogueSettings::DefaultLanguage' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bSetWwiseCultureWhenSetEditorCulture) == 0x000029, "Member 'UPaperDialogueSettings::bSetWwiseCultureWhenSetEditorCulture' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bSupportMutilLanguage) == 0x00002A, "Member 'UPaperDialogueSettings::bSupportMutilLanguage' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bMutilLanguageCustomType) == 0x00002B, "Member 'UPaperDialogueSettings::bMutilLanguageCustomType' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, MutilLanguageDialogueTypes) == 0x000030, "Member 'UPaperDialogueSettings::MutilLanguageDialogueTypes' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bEnableLineIntervalSnapping) == 0x000040, "Member 'UPaperDialogueSettings::bEnableLineIntervalSnapping' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bAutoRemoveUnusedFbxCameras) == 0x000041, "Member 'UPaperDialogueSettings::bAutoRemoveUnusedFbxCameras' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bAnimSectionChangeRateWhenStretch) == 0x000043, "Member 'UPaperDialogueSettings::bAnimSectionChangeRateWhenStretch' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bTryFixedLineMultiFrameBug) == 0x000044, "Member 'UPaperDialogueSettings::bTryFixedLineMultiFrameBug' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, ExternalActorHandleType) == 0x000045, "Member 'UPaperDialogueSettings::ExternalActorHandleType' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bPauseLevelSequenceBeforeChoice) == 0x000046, "Member 'UPaperDialogueSettings::bPauseLevelSequenceBeforeChoice' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bFixNoAudioEvent) == 0x000047, "Member 'UPaperDialogueSettings::bFixNoAudioEvent' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bDirectExecuteDialogueStageNodes) == 0x000048, "Member 'UPaperDialogueSettings::bDirectExecuteDialogueStageNodes' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, MuteRulesX) == 0x00004C, "Member 'UPaperDialogueSettings::MuteRulesX' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, MuteRulesY) == 0x000050, "Member 'UPaperDialogueSettings::MuteRulesY' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, MuteRulesZ) == 0x000054, "Member 'UPaperDialogueSettings::MuteRulesZ' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, DialogueSetActorHeight) == 0x000058, "Member 'UPaperDialogueSettings::DialogueSetActorHeight' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bEnableCombineLines) == 0x00005C, "Member 'UPaperDialogueSettings::bEnableCombineLines' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, StageCustomExtendedStruct) == 0x000060, "Member 'UPaperDialogueSettings::StageCustomExtendedStruct' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bUseRawDialogueData) == 0x000080, "Member 'UPaperDialogueSettings::bUseRawDialogueData' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bOpenCustomLineTitle) == 0x000081, "Member 'UPaperDialogueSettings::bOpenCustomLineTitle' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bUseRawVoiceData) == 0x000082, "Member 'UPaperDialogueSettings::bUseRawVoiceData' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bUseProviderCameraRules) == 0x000083, "Member 'UPaperDialogueSettings::bUseProviderCameraRules' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bAutomaticCameraHeightFix) == 0x000084, "Member 'UPaperDialogueSettings::bAutomaticCameraHeightFix' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, bCameraFocallengthFix) == 0x000086, "Member 'UPaperDialogueSettings::bCameraFocallengthFix' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, TargetTooTallThreshold) == 0x000088, "Member 'UPaperDialogueSettings::TargetTooTallThreshold' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, CameraFocallengthFixArg) == 0x00008C, "Member 'UPaperDialogueSettings::CameraFocallengthFixArg' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, CharacterHeightDataTable) == 0x000098, "Member 'UPaperDialogueSettings::CharacterHeightDataTable' has a wrong offset!");
static_assert(offsetof(UPaperDialogueSettings, ProjectType) == 0x0000B8, "Member 'UPaperDialogueSettings::ProjectType' has a wrong offset!");

// Class PaperDialogue.PaperDialogueStage
// 0x0198 (0x01C0 - 0x0028)
class UPaperDialogueStage final : public UObject
{
public:
	EDialogueGraphStatus                          Status;                                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperEdGraphEntryNode*                 entry;                                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPaperDialogueSet>       DialogueSet;                                       // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DialogueType;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogueActorDefinition>       DialogueActorDefinitions;                          // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDialogueSlotSetting>           SlotSettings;                                      // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 VersionNumber;                                     // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueCustomExtendedData            CustomExtendedData;                                // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, AdvancedDisplay, NativeAccessSpecifierPublic)
	TMap<int32, struct FDialogueCharacterSlotDetail> ActorSlotFullData;                              // 0x00B0(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FDialogueInternalData> DialogueInternalData;                            // 0x0100(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FTransform                             DialogueRuntimeTransform;                          // 0x0150(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPaperDialogueNode_Base*>        AllNodes;                                          // 0x01B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	bool GetCharacterTransformInLevelSequence(class FName InSpeakerTag, struct FTransform* OutTransform);

	class ULevelSequence* FindLevelSequenceBySectionName(const class FName& SectionName) const;
	bool GetDialogueSetCharacterSlots(TArray<struct FDialogueCharacterSlot>* DialogueSetCharacterSlots) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueStage">();
	}
	static class UPaperDialogueStage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueStage>();
	}
};
static_assert(alignof(UPaperDialogueStage) == 0x000010, "Wrong alignment on UPaperDialogueStage");
static_assert(sizeof(UPaperDialogueStage) == 0x0001C0, "Wrong size on UPaperDialogueStage");
static_assert(offsetof(UPaperDialogueStage, Status) == 0x000028, "Member 'UPaperDialogueStage::Status' has a wrong offset!");
static_assert(offsetof(UPaperDialogueStage, entry) == 0x000030, "Member 'UPaperDialogueStage::entry' has a wrong offset!");
static_assert(offsetof(UPaperDialogueStage, DialogueSet) == 0x000038, "Member 'UPaperDialogueStage::DialogueSet' has a wrong offset!");
static_assert(offsetof(UPaperDialogueStage, DialogueType) == 0x000060, "Member 'UPaperDialogueStage::DialogueType' has a wrong offset!");
static_assert(offsetof(UPaperDialogueStage, DialogueActorDefinitions) == 0x000070, "Member 'UPaperDialogueStage::DialogueActorDefinitions' has a wrong offset!");
static_assert(offsetof(UPaperDialogueStage, SlotSettings) == 0x000080, "Member 'UPaperDialogueStage::SlotSettings' has a wrong offset!");
static_assert(offsetof(UPaperDialogueStage, VersionNumber) == 0x000090, "Member 'UPaperDialogueStage::VersionNumber' has a wrong offset!");
static_assert(offsetof(UPaperDialogueStage, CustomExtendedData) == 0x0000A0, "Member 'UPaperDialogueStage::CustomExtendedData' has a wrong offset!");
static_assert(offsetof(UPaperDialogueStage, ActorSlotFullData) == 0x0000B0, "Member 'UPaperDialogueStage::ActorSlotFullData' has a wrong offset!");
static_assert(offsetof(UPaperDialogueStage, DialogueInternalData) == 0x000100, "Member 'UPaperDialogueStage::DialogueInternalData' has a wrong offset!");
static_assert(offsetof(UPaperDialogueStage, DialogueRuntimeTransform) == 0x000150, "Member 'UPaperDialogueStage::DialogueRuntimeTransform' has a wrong offset!");
static_assert(offsetof(UPaperDialogueStage, AllNodes) == 0x0001B0, "Member 'UPaperDialogueStage::AllNodes' has a wrong offset!");

// Class PaperDialogue.PaperDialogueUserWidget
// 0x0050 (0x0340 - 0x02F0)
class UPaperDialogueUserWidget final : public UUserWidget
{
public:
	int32                                         CurrentIndex;                                      // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    LSActor;                                           // 0x02F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperDialogue*                         Dlg;                                               // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperDialogueMenu*                     Menu;                                              // 0x0308(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperDialogueConditionNode*            ConditionNode;                                     // 0x0310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperDialoguePersistentNode*           PersistentNode;                                    // 0x0318(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperDialogueBlueprintNode*            CustomBlueprintNode;                               // 0x0320(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperDialogueFunctionNode*             FunctionNode;                                      // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperDialogueCinematicInfo*            Info;                                              // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearWidget();
	class UPaperDialogueStage* GetCurrentDialogueStage();
	bool GetLevelSequenceAutoPlayStatus();
	bool IsSequencePlayerPaused();
	bool OnBlueprintNodeClick(int32 ItemIndex);
	void OnChangeDialogueNodeState(EFDialogueUserWidgetState CurrentState);
	void OnClickedAutoPlay(bool bAutoPlay);
	void OnClickedBegin();
	void OnClickedEnd();
	void OnClickedNext();
	void OnClickedPre();
	void OnClickedSure();
	void OnConditionItemClick(bool bIsTrue);
	void OnFunctionNodeClick();
	void OnMenuItemClick(int32 MenuIndex);
	void OnMenuItemClickByChoiceLineID(const class FName& ChoiceLineID);
	void OnPersistentNodeClick();
	void OnPlayBlueprintNode(const int64& UId, class UPaperDialogueBlueprintNode* BlueprintNode);
	void OnPlayConditionNode(const int64& UId, bool bPreviewValue);
	void OnPlayDialogueSectionNodeBegin(const int64& UId, const class FName& DialogueId);
	void OnPlayDialogueSectionNodeEnd(const int64& UId, const class FName& DialogueId);
	void OnPlayFunctionNode(const int64& UId, const class FName& FunctionName);
	void OnPlayLevelSequenceNodeBegin(const int64& UId);
	void OnPlayLevelSequenceNodeEnd(const int64& UId);
	void OnPlayMenuItems(const int64& UId, const class FName& ChoiceHubName, const bool bChoiceSlot, const class FName& SpecialUIWidgetType, const TArray<struct FPaperDialogueChoiceLineConfig>& DialogueChoices);
	void OnPlayOutputNode(const int64& UId);
	void OnPlayPersistentNode(const int64& UId, const class FName& InPersistentName, const int32& InPersistentValue);
	void OnStopDialogueStage();
	void OnUpdateDialogueLine(int32 LineIndex, const class FName& SpeakerTag, const class FName& TempNameTitleId, const class FName& StringID, const class FText& SpeakerLine, float Duration, bool IsLineBreak);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueUserWidget">();
	}
	static class UPaperDialogueUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueUserWidget>();
	}
};
static_assert(alignof(UPaperDialogueUserWidget) == 0x000008, "Wrong alignment on UPaperDialogueUserWidget");
static_assert(sizeof(UPaperDialogueUserWidget) == 0x000340, "Wrong size on UPaperDialogueUserWidget");
static_assert(offsetof(UPaperDialogueUserWidget, CurrentIndex) == 0x0002F0, "Member 'UPaperDialogueUserWidget::CurrentIndex' has a wrong offset!");
static_assert(offsetof(UPaperDialogueUserWidget, LSActor) == 0x0002F8, "Member 'UPaperDialogueUserWidget::LSActor' has a wrong offset!");
static_assert(offsetof(UPaperDialogueUserWidget, Dlg) == 0x000300, "Member 'UPaperDialogueUserWidget::Dlg' has a wrong offset!");
static_assert(offsetof(UPaperDialogueUserWidget, Menu) == 0x000308, "Member 'UPaperDialogueUserWidget::Menu' has a wrong offset!");
static_assert(offsetof(UPaperDialogueUserWidget, ConditionNode) == 0x000310, "Member 'UPaperDialogueUserWidget::ConditionNode' has a wrong offset!");
static_assert(offsetof(UPaperDialogueUserWidget, PersistentNode) == 0x000318, "Member 'UPaperDialogueUserWidget::PersistentNode' has a wrong offset!");
static_assert(offsetof(UPaperDialogueUserWidget, CustomBlueprintNode) == 0x000320, "Member 'UPaperDialogueUserWidget::CustomBlueprintNode' has a wrong offset!");
static_assert(offsetof(UPaperDialogueUserWidget, FunctionNode) == 0x000328, "Member 'UPaperDialogueUserWidget::FunctionNode' has a wrong offset!");
static_assert(offsetof(UPaperDialogueUserWidget, Info) == 0x000330, "Member 'UPaperDialogueUserWidget::Info' has a wrong offset!");

// Class PaperDialogue.MenuItemProxy
// 0x0010 (0x0038 - 0x0028)
class UMenuItemProxy final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClick();
	void OnHover();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuItemProxy">();
	}
	static class UMenuItemProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuItemProxy>();
	}
};
static_assert(alignof(UMenuItemProxy) == 0x000008, "Wrong alignment on UMenuItemProxy");
static_assert(sizeof(UMenuItemProxy) == 0x000038, "Wrong size on UMenuItemProxy");

// Class PaperDialogue.PaperDialogueWidget
// 0x0088 (0x0378 - 0x02F0)
class UPaperDialogueWidget final : public UUserWidget
{
public:
	class ALevelSequenceActor*                    Actor;                                             // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperDialogue*                         Dlg;                                               // 0x02F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPaperDialogueCinematicInfo*            Info;                                              // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                Control_HorizontalBox;                             // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UButton*                                Begin_Button;                                      // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UButton*                                Pre_Button;                                        // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UButton*                                Next_Button;                                       // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UButton*                                End_Button;                                        // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUniformGridPanel*                      MenuItem_GridPanel;                                // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UButton*                                MenuItem_Button;                                   // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UOverlay*                               Dialogue_Overlay;                                  // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             SpeakerName_Text;                                  // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             SpeakerTitle_Text;                                 // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextBlock*                             Line_Text;                                         // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UButton*>                        MenuItems;                                         // 0x0360(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClickedBegin();
	void OnClickedEnd();
	void OnClickedNext();
	void OnClickedPre();
	void OnPlayEnd();
	void OnUpdateLine(int32 InCurrentLineIndex, const class FName& SpeakerTag, const class FText& InNewLine, float Duration, bool IsLineBreak);
	void SetDialogue(class UPaperDialogue* InDlg);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperDialogueWidget">();
	}
	static class UPaperDialogueWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperDialogueWidget>();
	}
};
static_assert(alignof(UPaperDialogueWidget) == 0x000008, "Wrong alignment on UPaperDialogueWidget");
static_assert(sizeof(UPaperDialogueWidget) == 0x000378, "Wrong size on UPaperDialogueWidget");
static_assert(offsetof(UPaperDialogueWidget, Actor) == 0x0002F0, "Member 'UPaperDialogueWidget::Actor' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, Dlg) == 0x0002F8, "Member 'UPaperDialogueWidget::Dlg' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, Info) == 0x000300, "Member 'UPaperDialogueWidget::Info' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, Control_HorizontalBox) == 0x000308, "Member 'UPaperDialogueWidget::Control_HorizontalBox' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, Begin_Button) == 0x000310, "Member 'UPaperDialogueWidget::Begin_Button' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, Pre_Button) == 0x000318, "Member 'UPaperDialogueWidget::Pre_Button' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, Next_Button) == 0x000320, "Member 'UPaperDialogueWidget::Next_Button' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, End_Button) == 0x000328, "Member 'UPaperDialogueWidget::End_Button' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, MenuItem_GridPanel) == 0x000330, "Member 'UPaperDialogueWidget::MenuItem_GridPanel' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, MenuItem_Button) == 0x000338, "Member 'UPaperDialogueWidget::MenuItem_Button' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, Dialogue_Overlay) == 0x000340, "Member 'UPaperDialogueWidget::Dialogue_Overlay' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, SpeakerName_Text) == 0x000348, "Member 'UPaperDialogueWidget::SpeakerName_Text' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, SpeakerTitle_Text) == 0x000350, "Member 'UPaperDialogueWidget::SpeakerTitle_Text' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, Line_Text) == 0x000358, "Member 'UPaperDialogueWidget::Line_Text' has a wrong offset!");
static_assert(offsetof(UPaperDialogueWidget, MenuItems) == 0x000360, "Member 'UPaperDialogueWidget::MenuItems' has a wrong offset!");

// Class PaperDialogue.PaperEdDialogueGraph
// 0x0008 (0x0068 - 0x0060)
class UPaperEdDialogueGraph final : public UEdGraph
{
public:
	class UPaperDialogueSet*                      DefaultStage;                                      // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdDialogueGraph">();
	}
	static class UPaperEdDialogueGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdDialogueGraph>();
	}
};
static_assert(alignof(UPaperEdDialogueGraph) == 0x000008, "Wrong alignment on UPaperEdDialogueGraph");
static_assert(sizeof(UPaperEdDialogueGraph) == 0x000068, "Wrong size on UPaperEdDialogueGraph");
static_assert(offsetof(UPaperEdDialogueGraph, DefaultStage) == 0x000060, "Member 'UPaperEdDialogueGraph::DefaultStage' has a wrong offset!");

// Class PaperDialogue.PaperEdDialogueGraphSchema
// 0x0000 (0x0028 - 0x0028)
class UPaperEdDialogueGraphSchema final : public UEdGraphSchema
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdDialogueGraphSchema">();
	}
	static class UPaperEdDialogueGraphSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdDialogueGraphSchema>();
	}
};
static_assert(alignof(UPaperEdDialogueGraphSchema) == 0x000008, "Wrong alignment on UPaperEdDialogueGraphSchema");
static_assert(sizeof(UPaperEdDialogueGraphSchema) == 0x000028, "Wrong size on UPaperEdDialogueGraphSchema");

// Class PaperDialogue.PaperEdGraphBaseNode
// 0x0040 (0x00D8 - 0x0098)
class UPaperEdGraphBaseNode : public UEdGraphNode
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  NodeID;                                            // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NodeName;                                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UPaperDialogueNode_Base>> AssignedNodeClasses;                          // 0x00C0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UPaperDialogueNode_Base*                FlowNode;                                          // 0x00D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphBaseNode">();
	}
	static class UPaperEdGraphBaseNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphBaseNode>();
	}
};
static_assert(alignof(UPaperEdGraphBaseNode) == 0x000008, "Wrong alignment on UPaperEdGraphBaseNode");
static_assert(sizeof(UPaperEdGraphBaseNode) == 0x0000D8, "Wrong size on UPaperEdGraphBaseNode");
static_assert(offsetof(UPaperEdGraphBaseNode, NodeID) == 0x0000A0, "Member 'UPaperEdGraphBaseNode::NodeID' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphBaseNode, NodeName) == 0x0000B0, "Member 'UPaperEdGraphBaseNode::NodeName' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphBaseNode, EventType) == 0x0000B8, "Member 'UPaperEdGraphBaseNode::EventType' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphBaseNode, AssignedNodeClasses) == 0x0000C0, "Member 'UPaperEdGraphBaseNode::AssignedNodeClasses' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphBaseNode, FlowNode) == 0x0000D0, "Member 'UPaperEdGraphBaseNode::FlowNode' has a wrong offset!");

// Class PaperDialogue.PaperEdGraphAssetNode
// 0x0018 (0x00F0 - 0x00D8)
class UPaperEdGraphAssetNode : public UPaperEdGraphBaseNode
{
public:
	class UObject*                                OuterObject;                                       // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                InnerObject;                                       // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseOuter;                                          // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphAssetNode">();
	}
	static class UPaperEdGraphAssetNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphAssetNode>();
	}
};
static_assert(alignof(UPaperEdGraphAssetNode) == 0x000008, "Wrong alignment on UPaperEdGraphAssetNode");
static_assert(sizeof(UPaperEdGraphAssetNode) == 0x0000F0, "Wrong size on UPaperEdGraphAssetNode");
static_assert(offsetof(UPaperEdGraphAssetNode, OuterObject) == 0x0000D8, "Member 'UPaperEdGraphAssetNode::OuterObject' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphAssetNode, InnerObject) == 0x0000E0, "Member 'UPaperEdGraphAssetNode::InnerObject' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphAssetNode, UseOuter) == 0x0000E8, "Member 'UPaperEdGraphAssetNode::UseOuter' has a wrong offset!");

// Class PaperDialogue.PaperEdGraphBlueprintNode
// 0x0010 (0x00E8 - 0x00D8)
class UPaperEdGraphBlueprintNode final : public UPaperEdGraphBaseNode
{
public:
	TArray<class FText>                           ItemTexts;                                         // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphBlueprintNode">();
	}
	static class UPaperEdGraphBlueprintNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphBlueprintNode>();
	}
};
static_assert(alignof(UPaperEdGraphBlueprintNode) == 0x000008, "Wrong alignment on UPaperEdGraphBlueprintNode");
static_assert(sizeof(UPaperEdGraphBlueprintNode) == 0x0000E8, "Wrong size on UPaperEdGraphBlueprintNode");
static_assert(offsetof(UPaperEdGraphBlueprintNode, ItemTexts) == 0x0000D8, "Member 'UPaperEdGraphBlueprintNode::ItemTexts' has a wrong offset!");

// Class PaperDialogue.PaperEdGraphConditionNode
// 0x0038 (0x0110 - 0x00D8)
class UPaperEdGraphConditionNode final : public UPaperEdGraphBaseNode
{
public:
	bool                                          bPreviewValue;                                     // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperDialogueMultiParaStruct          ConditionData;                                     // 0x00E0(0x0018)(Edit, NativeAccessSpecifierPublic)
	class UPCDInstancedProvider*                  PCDInstancedProvider;                              // 0x00F8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           ItemTexts;                                         // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphConditionNode">();
	}
	static class UPaperEdGraphConditionNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphConditionNode>();
	}
};
static_assert(alignof(UPaperEdGraphConditionNode) == 0x000008, "Wrong alignment on UPaperEdGraphConditionNode");
static_assert(sizeof(UPaperEdGraphConditionNode) == 0x000110, "Wrong size on UPaperEdGraphConditionNode");
static_assert(offsetof(UPaperEdGraphConditionNode, bPreviewValue) == 0x0000D8, "Member 'UPaperEdGraphConditionNode::bPreviewValue' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphConditionNode, ConditionData) == 0x0000E0, "Member 'UPaperEdGraphConditionNode::ConditionData' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphConditionNode, PCDInstancedProvider) == 0x0000F8, "Member 'UPaperEdGraphConditionNode::PCDInstancedProvider' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphConditionNode, ItemTexts) == 0x000100, "Member 'UPaperEdGraphConditionNode::ItemTexts' has a wrong offset!");

// Class PaperDialogue.PaperEdGraphDialogueNode
// 0x0008 (0x00F8 - 0x00F0)
class UPaperEdGraphDialogueNode final : public UPaperEdGraphAssetNode
{
public:
	float                                         LineInterval;                                      // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceUnloadContextOnPlayEnd;                       // 0x00F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphDialogueNode">();
	}
	static class UPaperEdGraphDialogueNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphDialogueNode>();
	}
};
static_assert(alignof(UPaperEdGraphDialogueNode) == 0x000008, "Wrong alignment on UPaperEdGraphDialogueNode");
static_assert(sizeof(UPaperEdGraphDialogueNode) == 0x0000F8, "Wrong size on UPaperEdGraphDialogueNode");
static_assert(offsetof(UPaperEdGraphDialogueNode, LineInterval) == 0x0000F0, "Member 'UPaperEdGraphDialogueNode::LineInterval' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphDialogueNode, ForceUnloadContextOnPlayEnd) == 0x0000F4, "Member 'UPaperEdGraphDialogueNode::ForceUnloadContextOnPlayEnd' has a wrong offset!");

// Class PaperDialogue.PaperEdGraphEntryNode
// 0x0008 (0x00E0 - 0x00D8)
class UPaperEdGraphEntryNode final : public UPaperEdGraphBaseNode
{
public:
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphEntryNode">();
	}
	static class UPaperEdGraphEntryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphEntryNode>();
	}
};
static_assert(alignof(UPaperEdGraphEntryNode) == 0x000008, "Wrong alignment on UPaperEdGraphEntryNode");
static_assert(sizeof(UPaperEdGraphEntryNode) == 0x0000E0, "Wrong size on UPaperEdGraphEntryNode");

// Class PaperDialogue.PaperEdGraphParaStructBaseNode
// 0x00B0 (0x0188 - 0x00D8)
class UPaperEdGraphParaStructBaseNode : public UPaperEdGraphBaseNode
{
public:
	class FName                                   ParameterType;                                     // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPaperDialogueParameterConfig> ParameterConfigs;                        // 0x00E0(0x0050)(NativeAccessSpecifierPublic)
	struct FPaperDialogueSingleParaStruct         SingleParaData;                                    // 0x0130(0x0058)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphParaStructBaseNode">();
	}
	static class UPaperEdGraphParaStructBaseNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphParaStructBaseNode>();
	}
};
static_assert(alignof(UPaperEdGraphParaStructBaseNode) == 0x000008, "Wrong alignment on UPaperEdGraphParaStructBaseNode");
static_assert(sizeof(UPaperEdGraphParaStructBaseNode) == 0x000188, "Wrong size on UPaperEdGraphParaStructBaseNode");
static_assert(offsetof(UPaperEdGraphParaStructBaseNode, ParameterType) == 0x0000D8, "Member 'UPaperEdGraphParaStructBaseNode::ParameterType' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphParaStructBaseNode, ParameterConfigs) == 0x0000E0, "Member 'UPaperEdGraphParaStructBaseNode::ParameterConfigs' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphParaStructBaseNode, SingleParaData) == 0x000130, "Member 'UPaperEdGraphParaStructBaseNode::SingleParaData' has a wrong offset!");

// Class PaperDialogue.PaperEdGraphFunctionNode
// 0x0000 (0x0188 - 0x0188)
class UPaperEdGraphFunctionNode final : public UPaperEdGraphParaStructBaseNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphFunctionNode">();
	}
	static class UPaperEdGraphFunctionNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphFunctionNode>();
	}
};
static_assert(alignof(UPaperEdGraphFunctionNode) == 0x000008, "Wrong alignment on UPaperEdGraphFunctionNode");
static_assert(sizeof(UPaperEdGraphFunctionNode) == 0x000188, "Wrong size on UPaperEdGraphFunctionNode");

// Class PaperDialogue.PaperEdGraphMenuNode
// 0x0048 (0x0120 - 0x00D8)
class UPaperEdGraphMenuNode final : public UPaperEdGraphBaseNode
{
public:
	bool                                          bIsChoiceSlot;                                     // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChoiceHubName;                                     // 0x00DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecialUIWidgetType;                               // 0x00E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPaperDialogueChoiceLineConfig> DialogueChoices;                                   // 0x00F0(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class FText>                           ItemTexts;                                         // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   ItemText;                                          // 0x0110(0x0010)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphMenuNode">();
	}
	static class UPaperEdGraphMenuNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphMenuNode>();
	}
};
static_assert(alignof(UPaperEdGraphMenuNode) == 0x000008, "Wrong alignment on UPaperEdGraphMenuNode");
static_assert(sizeof(UPaperEdGraphMenuNode) == 0x000120, "Wrong size on UPaperEdGraphMenuNode");
static_assert(offsetof(UPaperEdGraphMenuNode, bIsChoiceSlot) == 0x0000D8, "Member 'UPaperEdGraphMenuNode::bIsChoiceSlot' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphMenuNode, ChoiceHubName) == 0x0000DC, "Member 'UPaperEdGraphMenuNode::ChoiceHubName' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphMenuNode, SpecialUIWidgetType) == 0x0000E4, "Member 'UPaperEdGraphMenuNode::SpecialUIWidgetType' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphMenuNode, DialogueChoices) == 0x0000F0, "Member 'UPaperEdGraphMenuNode::DialogueChoices' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphMenuNode, ItemTexts) == 0x000100, "Member 'UPaperEdGraphMenuNode::ItemTexts' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphMenuNode, ItemText) == 0x000110, "Member 'UPaperEdGraphMenuNode::ItemText' has a wrong offset!");

// Class PaperDialogue.PaperEdGraphOutputNode
// 0x0000 (0x00D8 - 0x00D8)
class UPaperEdGraphOutputNode final : public UPaperEdGraphBaseNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphOutputNode">();
	}
	static class UPaperEdGraphOutputNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphOutputNode>();
	}
};
static_assert(alignof(UPaperEdGraphOutputNode) == 0x000008, "Wrong alignment on UPaperEdGraphOutputNode");
static_assert(sizeof(UPaperEdGraphOutputNode) == 0x0000D8, "Wrong size on UPaperEdGraphOutputNode");

// Class PaperDialogue.PaperEdGraphPersistentNode
// 0x0020 (0x00F8 - 0x00D8)
class UPaperEdGraphPersistentNode final : public UPaperEdGraphBaseNode
{
public:
	class FName                                   PersistentVariable;                                // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersistentValue;                                   // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ItemTexts;                                         // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphPersistentNode">();
	}
	static class UPaperEdGraphPersistentNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphPersistentNode>();
	}
};
static_assert(alignof(UPaperEdGraphPersistentNode) == 0x000008, "Wrong alignment on UPaperEdGraphPersistentNode");
static_assert(sizeof(UPaperEdGraphPersistentNode) == 0x0000F8, "Wrong size on UPaperEdGraphPersistentNode");
static_assert(offsetof(UPaperEdGraphPersistentNode, PersistentVariable) == 0x0000D8, "Member 'UPaperEdGraphPersistentNode::PersistentVariable' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphPersistentNode, PersistentValue) == 0x0000E0, "Member 'UPaperEdGraphPersistentNode::PersistentValue' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphPersistentNode, ItemTexts) == 0x0000E8, "Member 'UPaperEdGraphPersistentNode::ItemTexts' has a wrong offset!");

// Class PaperDialogue.PaperEdGraphSequenceNode
// 0x00F0 (0x01E0 - 0x00F0)
class UPaperEdGraphSequenceNode final : public UPaperEdGraphAssetNode
{
public:
	TMap<struct FGuid, class FName>               CameraRemapping;                                   // 0x00F0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, class FName>               ActorRemapping;                                    // 0x0140(0x0050)(NativeAccessSpecifierPrivate)
	TMap<struct FGuid, class FName>               LightRemapping;                                    // 0x0190(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperEdGraphSequenceNode">();
	}
	static class UPaperEdGraphSequenceNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperEdGraphSequenceNode>();
	}
};
static_assert(alignof(UPaperEdGraphSequenceNode) == 0x000008, "Wrong alignment on UPaperEdGraphSequenceNode");
static_assert(sizeof(UPaperEdGraphSequenceNode) == 0x0001E0, "Wrong size on UPaperEdGraphSequenceNode");
static_assert(offsetof(UPaperEdGraphSequenceNode, CameraRemapping) == 0x0000F0, "Member 'UPaperEdGraphSequenceNode::CameraRemapping' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphSequenceNode, ActorRemapping) == 0x000140, "Member 'UPaperEdGraphSequenceNode::ActorRemapping' has a wrong offset!");
static_assert(offsetof(UPaperEdGraphSequenceNode, LightRemapping) == 0x000190, "Member 'UPaperEdGraphSequenceNode::LightRemapping' has a wrong offset!");

// Class PaperDialogue.PaperGroupInitInfo
// 0x02B8 (0x02E0 - 0x0028)
class UPaperGroupInitInfo final : public UObject
{
public:
	int32                                         Index_0;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Camera;                                            // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperDialogueActorAnimations          Speaker;                                           // 0x0040(0x02A0)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PaperGroupInitInfo">();
	}
	static class UPaperGroupInitInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPaperGroupInitInfo>();
	}
};
static_assert(alignof(UPaperGroupInitInfo) == 0x000010, "Wrong alignment on UPaperGroupInitInfo");
static_assert(sizeof(UPaperGroupInitInfo) == 0x0002E0, "Wrong size on UPaperGroupInitInfo");
static_assert(offsetof(UPaperGroupInitInfo, Index_0) == 0x000028, "Member 'UPaperGroupInitInfo::Index_0' has a wrong offset!");
static_assert(offsetof(UPaperGroupInitInfo, Camera) == 0x00002C, "Member 'UPaperGroupInitInfo::Camera' has a wrong offset!");
static_assert(offsetof(UPaperGroupInitInfo, Speaker) == 0x000040, "Member 'UPaperGroupInitInfo::Speaker' has a wrong offset!");

// Class PaperDialogue.VirtualCameraManComponent
// 0x0050 (0x0280 - 0x0230)
class UVirtualCameraManComponent final : public USceneComponent
{
public:
	uint8                                         Pad_230[0x20];                                     // 0x0230(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0250(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentName;                                     // 0x0258(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVirtualCameraManParams                Params_0;                                          // 0x0260(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualCameraManComponent">();
	}
	static class UVirtualCameraManComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualCameraManComponent>();
	}
};
static_assert(alignof(UVirtualCameraManComponent) == 0x000010, "Wrong alignment on UVirtualCameraManComponent");
static_assert(sizeof(UVirtualCameraManComponent) == 0x000280, "Wrong size on UVirtualCameraManComponent");
static_assert(offsetof(UVirtualCameraManComponent, Target) == 0x000250, "Member 'UVirtualCameraManComponent::Target' has a wrong offset!");
static_assert(offsetof(UVirtualCameraManComponent, ComponentName) == 0x000258, "Member 'UVirtualCameraManComponent::ComponentName' has a wrong offset!");
static_assert(offsetof(UVirtualCameraManComponent, Params_0) == 0x000260, "Member 'UVirtualCameraManComponent::Params_0' has a wrong offset!");

}

