#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PaperAreaCheckToolRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PaperAreaCheckToolRuntime.AreaMaskDebugActor.GetAllLayerName
// 0x0010 (0x0010 - 0x0000)
struct AreaMaskDebugActor_GetAllLayerName final
{
public:
	TArray<class FString>                         InLayerNames;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaMaskDebugActor_GetAllLayerName) == 0x000008, "Wrong alignment on AreaMaskDebugActor_GetAllLayerName");
static_assert(sizeof(AreaMaskDebugActor_GetAllLayerName) == 0x000010, "Wrong size on AreaMaskDebugActor_GetAllLayerName");
static_assert(offsetof(AreaMaskDebugActor_GetAllLayerName, InLayerNames) == 0x000000, "Member 'AreaMaskDebugActor_GetAllLayerName::InLayerNames' has a wrong offset!");

// Function PaperAreaCheckToolRuntime.AreaMaskDebugActor.LoadAllMaskImage
// 0x0018 (0x0018 - 0x0000)
struct AreaMaskDebugActor_LoadAllMaskImage final
{
public:
	class FString                                 ImagePath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AreaMaskDebugActor_LoadAllMaskImage) == 0x000008, "Wrong alignment on AreaMaskDebugActor_LoadAllMaskImage");
static_assert(sizeof(AreaMaskDebugActor_LoadAllMaskImage) == 0x000018, "Wrong size on AreaMaskDebugActor_LoadAllMaskImage");
static_assert(offsetof(AreaMaskDebugActor_LoadAllMaskImage, ImagePath) == 0x000000, "Member 'AreaMaskDebugActor_LoadAllMaskImage::ImagePath' has a wrong offset!");
static_assert(offsetof(AreaMaskDebugActor_LoadAllMaskImage, ReturnValue) == 0x000010, "Member 'AreaMaskDebugActor_LoadAllMaskImage::ReturnValue' has a wrong offset!");

// Function PaperAreaCheckToolRuntime.AreaMaskDebugActor.ShowMask
// 0x0010 (0x0010 - 0x0000)
struct AreaMaskDebugActor_ShowMask final
{
public:
	class FString                                 InLayerName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AreaMaskDebugActor_ShowMask) == 0x000008, "Wrong alignment on AreaMaskDebugActor_ShowMask");
static_assert(sizeof(AreaMaskDebugActor_ShowMask) == 0x000010, "Wrong size on AreaMaskDebugActor_ShowMask");
static_assert(offsetof(AreaMaskDebugActor_ShowMask, InLayerName) == 0x000000, "Member 'AreaMaskDebugActor_ShowMask::InLayerName' has a wrong offset!");

// Function PaperAreaCheckToolRuntime.NetWorkAreaDebugActor.LoadMaskAreaConfig
// 0x0020 (0x0020 - 0x0000)
struct NetWorkAreaDebugActor_LoadMaskAreaConfig final
{
public:
	class FString                                 ImagePath;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XMLPath;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetWorkAreaDebugActor_LoadMaskAreaConfig) == 0x000008, "Wrong alignment on NetWorkAreaDebugActor_LoadMaskAreaConfig");
static_assert(sizeof(NetWorkAreaDebugActor_LoadMaskAreaConfig) == 0x000020, "Wrong size on NetWorkAreaDebugActor_LoadMaskAreaConfig");
static_assert(offsetof(NetWorkAreaDebugActor_LoadMaskAreaConfig, ImagePath) == 0x000000, "Member 'NetWorkAreaDebugActor_LoadMaskAreaConfig::ImagePath' has a wrong offset!");
static_assert(offsetof(NetWorkAreaDebugActor_LoadMaskAreaConfig, XMLPath) == 0x000010, "Member 'NetWorkAreaDebugActor_LoadMaskAreaConfig::XMLPath' has a wrong offset!");

// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.CheckNikkiInAreaEdge
// 0x0001 (0x0001 - 0x0000)
struct PaperAreaCheckSubsystem_CheckNikkiInAreaEdge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAreaCheckSubsystem_CheckNikkiInAreaEdge) == 0x000001, "Wrong alignment on PaperAreaCheckSubsystem_CheckNikkiInAreaEdge");
static_assert(sizeof(PaperAreaCheckSubsystem_CheckNikkiInAreaEdge) == 0x000001, "Wrong size on PaperAreaCheckSubsystem_CheckNikkiInAreaEdge");
static_assert(offsetof(PaperAreaCheckSubsystem_CheckNikkiInAreaEdge, ReturnValue) == 0x000000, "Member 'PaperAreaCheckSubsystem_CheckNikkiInAreaEdge::ReturnValue' has a wrong offset!");

// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.EnterSubLevel
// 0x0020 (0x0020 - 0x0000)
struct PaperAreaCheckSubsystem_EnterSubLevel final
{
public:
	int32                                         LevelID;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerPos;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAreaCheckSubsystem_EnterSubLevel) == 0x000008, "Wrong alignment on PaperAreaCheckSubsystem_EnterSubLevel");
static_assert(sizeof(PaperAreaCheckSubsystem_EnterSubLevel) == 0x000020, "Wrong size on PaperAreaCheckSubsystem_EnterSubLevel");
static_assert(offsetof(PaperAreaCheckSubsystem_EnterSubLevel, LevelID) == 0x000000, "Member 'PaperAreaCheckSubsystem_EnterSubLevel::LevelID' has a wrong offset!");
static_assert(offsetof(PaperAreaCheckSubsystem_EnterSubLevel, PlayerPos) == 0x000008, "Member 'PaperAreaCheckSubsystem_EnterSubLevel::PlayerPos' has a wrong offset!");

// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.GetAreaIDByWorldPosition
// 0x0020 (0x0020 - 0x0000)
struct PaperAreaCheckSubsystem_GetAreaIDByWorldPosition final
{
public:
	struct FVector                                InWorldPosition;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperAreaCheckSubsystem_GetAreaIDByWorldPosition) == 0x000008, "Wrong alignment on PaperAreaCheckSubsystem_GetAreaIDByWorldPosition");
static_assert(sizeof(PaperAreaCheckSubsystem_GetAreaIDByWorldPosition) == 0x000020, "Wrong size on PaperAreaCheckSubsystem_GetAreaIDByWorldPosition");
static_assert(offsetof(PaperAreaCheckSubsystem_GetAreaIDByWorldPosition, InWorldPosition) == 0x000000, "Member 'PaperAreaCheckSubsystem_GetAreaIDByWorldPosition::InWorldPosition' has a wrong offset!");
static_assert(offsetof(PaperAreaCheckSubsystem_GetAreaIDByWorldPosition, ReturnValue) == 0x000018, "Member 'PaperAreaCheckSubsystem_GetAreaIDByWorldPosition::ReturnValue' has a wrong offset!");

// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.GetCurrentAreaID
// 0x0004 (0x0004 - 0x0000)
struct PaperAreaCheckSubsystem_GetCurrentAreaID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAreaCheckSubsystem_GetCurrentAreaID) == 0x000004, "Wrong alignment on PaperAreaCheckSubsystem_GetCurrentAreaID");
static_assert(sizeof(PaperAreaCheckSubsystem_GetCurrentAreaID) == 0x000004, "Wrong size on PaperAreaCheckSubsystem_GetCurrentAreaID");
static_assert(offsetof(PaperAreaCheckSubsystem_GetCurrentAreaID, ReturnValue) == 0x000000, "Member 'PaperAreaCheckSubsystem_GetCurrentAreaID::ReturnValue' has a wrong offset!");

// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.GetCurrentSoundAreaID
// 0x0004 (0x0004 - 0x0000)
struct PaperAreaCheckSubsystem_GetCurrentSoundAreaID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAreaCheckSubsystem_GetCurrentSoundAreaID) == 0x000004, "Wrong alignment on PaperAreaCheckSubsystem_GetCurrentSoundAreaID");
static_assert(sizeof(PaperAreaCheckSubsystem_GetCurrentSoundAreaID) == 0x000004, "Wrong size on PaperAreaCheckSubsystem_GetCurrentSoundAreaID");
static_assert(offsetof(PaperAreaCheckSubsystem_GetCurrentSoundAreaID, ReturnValue) == 0x000000, "Member 'PaperAreaCheckSubsystem_GetCurrentSoundAreaID::ReturnValue' has a wrong offset!");

// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.GetShrubTypeByWorldPosition
// 0x0020 (0x0020 - 0x0000)
struct PaperAreaCheckSubsystem_GetShrubTypeByWorldPosition final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperAreaCheckSubsystem_GetShrubTypeByWorldPosition) == 0x000008, "Wrong alignment on PaperAreaCheckSubsystem_GetShrubTypeByWorldPosition");
static_assert(sizeof(PaperAreaCheckSubsystem_GetShrubTypeByWorldPosition) == 0x000020, "Wrong size on PaperAreaCheckSubsystem_GetShrubTypeByWorldPosition");
static_assert(offsetof(PaperAreaCheckSubsystem_GetShrubTypeByWorldPosition, InPosition) == 0x000000, "Member 'PaperAreaCheckSubsystem_GetShrubTypeByWorldPosition::InPosition' has a wrong offset!");
static_assert(offsetof(PaperAreaCheckSubsystem_GetShrubTypeByWorldPosition, ReturnValue) == 0x000018, "Member 'PaperAreaCheckSubsystem_GetShrubTypeByWorldPosition::ReturnValue' has a wrong offset!");

// Function PaperAreaCheckToolRuntime.PaperAreaCheckSubsystem.RefreshAreaCheckState
// 0x0018 (0x0018 - 0x0000)
struct PaperAreaCheckSubsystem_RefreshAreaCheckState final
{
public:
	struct FVector                                PlayerPos;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperAreaCheckSubsystem_RefreshAreaCheckState) == 0x000008, "Wrong alignment on PaperAreaCheckSubsystem_RefreshAreaCheckState");
static_assert(sizeof(PaperAreaCheckSubsystem_RefreshAreaCheckState) == 0x000018, "Wrong size on PaperAreaCheckSubsystem_RefreshAreaCheckState");
static_assert(offsetof(PaperAreaCheckSubsystem_RefreshAreaCheckState, PlayerPos) == 0x000000, "Member 'PaperAreaCheckSubsystem_RefreshAreaCheckState::PlayerPos' has a wrong offset!");

}

