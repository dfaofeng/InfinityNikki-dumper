#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Combat_AIHatredConfig

#include "Basic.hpp"

#include "Enum_HatredTickParams_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Combat_AIHatredConfig.BP_Combat_AIHatredConfig_C
// 0x00D8 (0x0108 - 0x0030)
class UBP_Combat_AIHatredConfig_C final : public UPrimaryDataAsset
{
public:
	double                                        MinHateValue;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxHateValue;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InSightValue;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OutSightValue;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BeHitValue;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyValueIgnoreHitCondition;                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReReachableValue;                                  // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, double>             TriggerEventMap;                                   // 0x0068(0x0050)(Edit, BlueprintVisible)
	TMap<Enum_HatredTickParams, class UCurveFloat*> TickParamsMap;                                   // 0x00B8(0x0050)(Edit, BlueprintVisible)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Combat_AIHatredConfig_C">();
	}
	static class UBP_Combat_AIHatredConfig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Combat_AIHatredConfig_C>();
	}
};
static_assert(alignof(UBP_Combat_AIHatredConfig_C) == 0x000008, "Wrong alignment on UBP_Combat_AIHatredConfig_C");
static_assert(sizeof(UBP_Combat_AIHatredConfig_C) == 0x000108, "Wrong size on UBP_Combat_AIHatredConfig_C");
static_assert(offsetof(UBP_Combat_AIHatredConfig_C, MinHateValue) == 0x000030, "Member 'UBP_Combat_AIHatredConfig_C::MinHateValue' has a wrong offset!");
static_assert(offsetof(UBP_Combat_AIHatredConfig_C, MaxHateValue) == 0x000038, "Member 'UBP_Combat_AIHatredConfig_C::MaxHateValue' has a wrong offset!");
static_assert(offsetof(UBP_Combat_AIHatredConfig_C, InSightValue) == 0x000040, "Member 'UBP_Combat_AIHatredConfig_C::InSightValue' has a wrong offset!");
static_assert(offsetof(UBP_Combat_AIHatredConfig_C, OutSightValue) == 0x000048, "Member 'UBP_Combat_AIHatredConfig_C::OutSightValue' has a wrong offset!");
static_assert(offsetof(UBP_Combat_AIHatredConfig_C, BeHitValue) == 0x000050, "Member 'UBP_Combat_AIHatredConfig_C::BeHitValue' has a wrong offset!");
static_assert(offsetof(UBP_Combat_AIHatredConfig_C, ApplyValueIgnoreHitCondition) == 0x000058, "Member 'UBP_Combat_AIHatredConfig_C::ApplyValueIgnoreHitCondition' has a wrong offset!");
static_assert(offsetof(UBP_Combat_AIHatredConfig_C, ReReachableValue) == 0x000060, "Member 'UBP_Combat_AIHatredConfig_C::ReReachableValue' has a wrong offset!");
static_assert(offsetof(UBP_Combat_AIHatredConfig_C, TriggerEventMap) == 0x000068, "Member 'UBP_Combat_AIHatredConfig_C::TriggerEventMap' has a wrong offset!");
static_assert(offsetof(UBP_Combat_AIHatredConfig_C, TickParamsMap) == 0x0000B8, "Member 'UBP_Combat_AIHatredConfig_C::TickParamsMap' has a wrong offset!");

}

