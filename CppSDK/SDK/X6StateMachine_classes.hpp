#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6StateMachine

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "X6StateMachine_structs.hpp"


namespace SDK
{

// Class X6StateMachine.X6StateMachineComponent
// 0x00F8 (0x01A0 - 0x00A8)
class UX6StateMachineComponent : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentStateName;                                  // 0x00B0(0x0010)(Edit, ZeroConstructor, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CurrentStateID;                                    // 0x00C0(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CurrentStateTimestamp;                             // 0x00C8(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnum*                                  K2_Enumerator;                                     // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ArrStateName;                                      // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	bool                                          IsLocalState;                                      // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicated;                                       // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnEnter;                                           // 0x00EA(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnExit;                                            // 0x00EB(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnChangeState;                                     // 0x00EC(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             PostChangeState;                                   // 0x00ED(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE[0xB2];                                      // 0x00EE(0x00B2)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanSetServerState();
	bool ForceSetLocalStateByStateID(const uint8 StateID, EFSM_Transition* Transition);
	uint8 GetCurrentStateID();
	class FString GetCurrentStateName();
	void GetNetIDByLua(int64* NetID);
	bool IsCurrentState(const uint8 CheckStateID);
	bool SetLocalState(const class FString& Name_0, EFSM_Transition* Transition);
	bool SetLocalStateByStateID(const uint8 StateID, EFSM_Transition* Transition);
	void SetServerState(const class FString& OwnerPath, const class FString& SelfName, const class FString& Name_0, const int32& IncurrentStateID);
	void SetState(const class FString& Name_0, EFSM_Transition* Transition);
	void SetStateByStateID(const uint8 StateID, EFSM_Transition* Transition);
	bool SetStateTimeStamp();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"X6StateMachineComponent">();
	}
	static class UX6StateMachineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6StateMachineComponent>();
	}
};
static_assert(alignof(UX6StateMachineComponent) == 0x000008, "Wrong alignment on UX6StateMachineComponent");
static_assert(sizeof(UX6StateMachineComponent) == 0x0001A0, "Wrong size on UX6StateMachineComponent");
static_assert(offsetof(UX6StateMachineComponent, CurrentStateName) == 0x0000B0, "Member 'UX6StateMachineComponent::CurrentStateName' has a wrong offset!");
static_assert(offsetof(UX6StateMachineComponent, CurrentStateID) == 0x0000C0, "Member 'UX6StateMachineComponent::CurrentStateID' has a wrong offset!");
static_assert(offsetof(UX6StateMachineComponent, CurrentStateTimestamp) == 0x0000C8, "Member 'UX6StateMachineComponent::CurrentStateTimestamp' has a wrong offset!");
static_assert(offsetof(UX6StateMachineComponent, K2_Enumerator) == 0x0000D0, "Member 'UX6StateMachineComponent::K2_Enumerator' has a wrong offset!");
static_assert(offsetof(UX6StateMachineComponent, ArrStateName) == 0x0000D8, "Member 'UX6StateMachineComponent::ArrStateName' has a wrong offset!");
static_assert(offsetof(UX6StateMachineComponent, IsLocalState) == 0x0000E8, "Member 'UX6StateMachineComponent::IsLocalState' has a wrong offset!");
static_assert(offsetof(UX6StateMachineComponent, bReplicated) == 0x0000E9, "Member 'UX6StateMachineComponent::bReplicated' has a wrong offset!");
static_assert(offsetof(UX6StateMachineComponent, OnEnter) == 0x0000EA, "Member 'UX6StateMachineComponent::OnEnter' has a wrong offset!");
static_assert(offsetof(UX6StateMachineComponent, OnExit) == 0x0000EB, "Member 'UX6StateMachineComponent::OnExit' has a wrong offset!");
static_assert(offsetof(UX6StateMachineComponent, OnChangeState) == 0x0000EC, "Member 'UX6StateMachineComponent::OnChangeState' has a wrong offset!");
static_assert(offsetof(UX6StateMachineComponent, PostChangeState) == 0x0000ED, "Member 'UX6StateMachineComponent::PostChangeState' has a wrong offset!");

}

