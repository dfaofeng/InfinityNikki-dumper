#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PSDKTlog

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct PSDKTlog.PSCommonDeviceInfo
// 0x0188 (0x0188 - 0x0000)
struct FPSCommonDeviceInfo final
{
public:
	int32                                         isLauncher;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LaunchMode;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequestID;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UUID;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 activityID;                                        // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EventId;                                           // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeqID;                                             // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 vGameAppid;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceID;                                          // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 paperDevice;                                       // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DtEventTime;                                       // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventTime;                                         // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EventTimeStamp;                                    // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BridgeVersion;                                     // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAgent;                                         // 0x00C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SystemLang;                                        // 0x00D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlatID;                                            // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubPlatID;                                         // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientVersion;                                     // 0x00E8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 resourceVersion;                                   // 0x00F8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VopenID;                                           // 0x0108(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VRoleID;                                           // 0x0118(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SDKVersion;                                        // 0x0128(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackageName;                                       // 0x0138(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 installExeName;                                    // 0x0148(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 doid;                                              // 0x0158(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppID;                                             // 0x0168(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extra;                                             // 0x0178(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPSCommonDeviceInfo) == 0x000008, "Wrong alignment on FPSCommonDeviceInfo");
static_assert(sizeof(FPSCommonDeviceInfo) == 0x000188, "Wrong size on FPSCommonDeviceInfo");
static_assert(offsetof(FPSCommonDeviceInfo, isLauncher) == 0x000000, "Member 'FPSCommonDeviceInfo::isLauncher' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, LaunchMode) == 0x000004, "Member 'FPSCommonDeviceInfo::LaunchMode' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, RequestID) == 0x000008, "Member 'FPSCommonDeviceInfo::RequestID' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, UUID) == 0x000018, "Member 'FPSCommonDeviceInfo::UUID' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, activityID) == 0x000028, "Member 'FPSCommonDeviceInfo::activityID' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, SessionId) == 0x000038, "Member 'FPSCommonDeviceInfo::SessionId' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, EventId) == 0x000048, "Member 'FPSCommonDeviceInfo::EventId' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, SeqID) == 0x000050, "Member 'FPSCommonDeviceInfo::SeqID' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, vGameAppid) == 0x000058, "Member 'FPSCommonDeviceInfo::vGameAppid' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, DeviceID) == 0x000068, "Member 'FPSCommonDeviceInfo::DeviceID' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, paperDevice) == 0x000078, "Member 'FPSCommonDeviceInfo::paperDevice' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, DtEventTime) == 0x000088, "Member 'FPSCommonDeviceInfo::DtEventTime' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, EventTime) == 0x000098, "Member 'FPSCommonDeviceInfo::EventTime' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, EventTimeStamp) == 0x0000A8, "Member 'FPSCommonDeviceInfo::EventTimeStamp' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, BridgeVersion) == 0x0000B0, "Member 'FPSCommonDeviceInfo::BridgeVersion' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, UserAgent) == 0x0000C0, "Member 'FPSCommonDeviceInfo::UserAgent' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, SystemLang) == 0x0000D0, "Member 'FPSCommonDeviceInfo::SystemLang' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, PlatID) == 0x0000E0, "Member 'FPSCommonDeviceInfo::PlatID' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, SubPlatID) == 0x0000E4, "Member 'FPSCommonDeviceInfo::SubPlatID' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, ClientVersion) == 0x0000E8, "Member 'FPSCommonDeviceInfo::ClientVersion' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, resourceVersion) == 0x0000F8, "Member 'FPSCommonDeviceInfo::resourceVersion' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, VopenID) == 0x000108, "Member 'FPSCommonDeviceInfo::VopenID' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, VRoleID) == 0x000118, "Member 'FPSCommonDeviceInfo::VRoleID' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, SDKVersion) == 0x000128, "Member 'FPSCommonDeviceInfo::SDKVersion' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, PackageName) == 0x000138, "Member 'FPSCommonDeviceInfo::PackageName' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, installExeName) == 0x000148, "Member 'FPSCommonDeviceInfo::installExeName' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, doid) == 0x000158, "Member 'FPSCommonDeviceInfo::doid' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, AppID) == 0x000168, "Member 'FPSCommonDeviceInfo::AppID' has a wrong offset!");
static_assert(offsetof(FPSCommonDeviceInfo, Extra) == 0x000178, "Member 'FPSCommonDeviceInfo::Extra' has a wrong offset!");

}

