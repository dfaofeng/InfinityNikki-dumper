#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TT_TargetingSelection_RecoveryAOEPicker

#include "Basic.hpp"

#include "F_TargetingPickerConfig_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "X6Game_classes.hpp"
#include "F_TargetingWeightConfig_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TT_TargetingSelection_RecoveryAOEPicker.TT_TargetingSelection_RecoveryAOEPicker_C
// 0x0080 (0x0130 - 0x00B0)
class UTT_TargetingSelection_RecoveryAOEPicker_C final : public UX6TargetingSelectionTask_ChargeUpBase
{
public:
	bool                                          bPenetrateTrace;                                   // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDirectionTrace;                                   // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FloorAngle;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 BulletSocketName;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                BulletOffset;                                      // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BulletMoveDistance;                                // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ShapeTraceDataAsset_C*              CollisionShapeTraceData;                           // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_ShapeTraceDataAsset_C*              HitShapeTraceData;                                 // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      HitObjectTypes;                                    // 0x0100(0x0010)(Edit, BlueprintVisible)
	TArray<struct FF_TargetingWeightConfig>       SelectorData;                                      // 0x0110(0x0010)(Edit, BlueprintVisible)
	TArray<struct FF_TargetingPickerConfig>       FilterData;                                        // 0x0120(0x0010)(Edit, BlueprintVisible)

public:
	class FString GetModuleName() const;
	struct FQuat GetSourceRotation(const struct FTargetingRequestHandle& TargetingHandle) const;
	bool K2_CanSelect(const struct FTargetingRequestHandle& TargetingHandle, const struct FTargetingSourceContext& SourceContext) const;
	void K2_MarkHitResult(class AActor* Actor, class UPrimitiveComponent* Component, struct FHitResult* HitResult) const;
	void SelectTargets(const struct FTargetingRequestHandle& TargetingHandle, const struct FTargetingSourceContext& SourceContext) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TT_TargetingSelection_RecoveryAOEPicker_C">();
	}
	static class UTT_TargetingSelection_RecoveryAOEPicker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTT_TargetingSelection_RecoveryAOEPicker_C>();
	}
};
static_assert(alignof(UTT_TargetingSelection_RecoveryAOEPicker_C) == 0x000010, "Wrong alignment on UTT_TargetingSelection_RecoveryAOEPicker_C");
static_assert(sizeof(UTT_TargetingSelection_RecoveryAOEPicker_C) == 0x000130, "Wrong size on UTT_TargetingSelection_RecoveryAOEPicker_C");
static_assert(offsetof(UTT_TargetingSelection_RecoveryAOEPicker_C, bPenetrateTrace) == 0x0000B0, "Member 'UTT_TargetingSelection_RecoveryAOEPicker_C::bPenetrateTrace' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelection_RecoveryAOEPicker_C, bDirectionTrace) == 0x0000B1, "Member 'UTT_TargetingSelection_RecoveryAOEPicker_C::bDirectionTrace' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelection_RecoveryAOEPicker_C, FloorAngle) == 0x0000B8, "Member 'UTT_TargetingSelection_RecoveryAOEPicker_C::FloorAngle' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelection_RecoveryAOEPicker_C, BulletSocketName) == 0x0000C0, "Member 'UTT_TargetingSelection_RecoveryAOEPicker_C::BulletSocketName' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelection_RecoveryAOEPicker_C, BulletOffset) == 0x0000D0, "Member 'UTT_TargetingSelection_RecoveryAOEPicker_C::BulletOffset' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelection_RecoveryAOEPicker_C, BulletMoveDistance) == 0x0000E8, "Member 'UTT_TargetingSelection_RecoveryAOEPicker_C::BulletMoveDistance' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelection_RecoveryAOEPicker_C, CollisionShapeTraceData) == 0x0000F0, "Member 'UTT_TargetingSelection_RecoveryAOEPicker_C::CollisionShapeTraceData' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelection_RecoveryAOEPicker_C, HitShapeTraceData) == 0x0000F8, "Member 'UTT_TargetingSelection_RecoveryAOEPicker_C::HitShapeTraceData' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelection_RecoveryAOEPicker_C, HitObjectTypes) == 0x000100, "Member 'UTT_TargetingSelection_RecoveryAOEPicker_C::HitObjectTypes' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelection_RecoveryAOEPicker_C, SelectorData) == 0x000110, "Member 'UTT_TargetingSelection_RecoveryAOEPicker_C::SelectorData' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelection_RecoveryAOEPicker_C, FilterData) == 0x000120, "Member 'UTT_TargetingSelection_RecoveryAOEPicker_C::FilterData' has a wrong offset!");

}

