#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_Quadruped_DoMove

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "X6Game_structs.hpp"
#include "X6BTTask_LuaBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C
// 0x0110 (0x01C8 - 0x00B8)
class UBTT_Quadruped_DoMove_C final : public UX6BTTask_LuaBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BTT_Quadruped_DoMove_C;             // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 BP_MoveLocationKey;                                // 0x00C0(0x0028)(Edit, BlueprintVisible)
	ERegularLocomotionType                        BP_LocomotionTypeEnum;                             // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 BP_LocomotionType;                                 // 0x00F0(0x0028)(Edit, BlueprintVisible)
	double                                        BP_GroundFriction;                                 // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        BP_RemovePointRatio;                               // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 BP_PathFollowingResult;                            // 0x0128(0x0028)(Edit, BlueprintVisible)
	bool                                          BP_UseHorseTurnAroundStrategy;                     // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_MaxMoveTurnAroundAngle;                         // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<ERegularLocomotionType, double>          BP_AccelerationRotateSpeed;                        // 0x0160(0x0050)(Edit, BlueprintVisible)
	bool                                          BP_DisableTurnInPlace;                             // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             WaterCollisionObjectType;                          // 0x01B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableBlockDetection;                           // 0x01B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B3[0x1];                                      // 0x01B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BP_BlockDetectionSampleCount;                      // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_BlockDetectDistance;                            // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BP_BlockDetectionInterval;                         // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void OnBlackboardKeyValueChange(const class UBlackboardComponent* Blackboard, class FName KeyName);
	void K2_OnInstanceDestroyed();
	void ExecuteUbergraph_BTT_Quadruped_DoMove(int32 EntryPoint);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_Quadruped_DoMove_C">();
	}
	static class UBTT_Quadruped_DoMove_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_Quadruped_DoMove_C>();
	}
};
static_assert(alignof(UBTT_Quadruped_DoMove_C) == 0x000008, "Wrong alignment on UBTT_Quadruped_DoMove_C");
static_assert(sizeof(UBTT_Quadruped_DoMove_C) == 0x0001C8, "Wrong size on UBTT_Quadruped_DoMove_C");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, UberGraphFrame_BTT_Quadruped_DoMove_C) == 0x0000B8, "Member 'UBTT_Quadruped_DoMove_C::UberGraphFrame_BTT_Quadruped_DoMove_C' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_MoveLocationKey) == 0x0000C0, "Member 'UBTT_Quadruped_DoMove_C::BP_MoveLocationKey' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_LocomotionTypeEnum) == 0x0000E8, "Member 'UBTT_Quadruped_DoMove_C::BP_LocomotionTypeEnum' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_LocomotionType) == 0x0000F0, "Member 'UBTT_Quadruped_DoMove_C::BP_LocomotionType' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_GroundFriction) == 0x000118, "Member 'UBTT_Quadruped_DoMove_C::BP_GroundFriction' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_RemovePointRatio) == 0x000120, "Member 'UBTT_Quadruped_DoMove_C::BP_RemovePointRatio' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_PathFollowingResult) == 0x000128, "Member 'UBTT_Quadruped_DoMove_C::BP_PathFollowingResult' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_UseHorseTurnAroundStrategy) == 0x000150, "Member 'UBTT_Quadruped_DoMove_C::BP_UseHorseTurnAroundStrategy' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_MaxMoveTurnAroundAngle) == 0x000158, "Member 'UBTT_Quadruped_DoMove_C::BP_MaxMoveTurnAroundAngle' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_AccelerationRotateSpeed) == 0x000160, "Member 'UBTT_Quadruped_DoMove_C::BP_AccelerationRotateSpeed' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_DisableTurnInPlace) == 0x0001B0, "Member 'UBTT_Quadruped_DoMove_C::BP_DisableTurnInPlace' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, WaterCollisionObjectType) == 0x0001B1, "Member 'UBTT_Quadruped_DoMove_C::WaterCollisionObjectType' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_EnableBlockDetection) == 0x0001B2, "Member 'UBTT_Quadruped_DoMove_C::BP_EnableBlockDetection' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_BlockDetectionSampleCount) == 0x0001B4, "Member 'UBTT_Quadruped_DoMove_C::BP_BlockDetectionSampleCount' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_BlockDetectDistance) == 0x0001B8, "Member 'UBTT_Quadruped_DoMove_C::BP_BlockDetectDistance' has a wrong offset!");
static_assert(offsetof(UBTT_Quadruped_DoMove_C, BP_BlockDetectionInterval) == 0x0001C0, "Member 'UBTT_Quadruped_DoMove_C::BP_BlockDetectionInterval' has a wrong offset!");

}

