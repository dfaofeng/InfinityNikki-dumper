#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_Quadruped_DoMove

#include "Basic.hpp"


namespace SDK::Params
{

// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTT_Quadruped_DoMove_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Quadruped_DoMove_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTT_Quadruped_DoMove_C_ReceiveTickAI");
static_assert(sizeof(BTT_Quadruped_DoMove_C_ReceiveTickAI) == 0x000018, "Wrong size on BTT_Quadruped_DoMove_C_ReceiveTickAI");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTT_Quadruped_DoMove_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTT_Quadruped_DoMove_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTT_Quadruped_DoMove_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_Quadruped_DoMove_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Quadruped_DoMove_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_Quadruped_DoMove_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_Quadruped_DoMove_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_Quadruped_DoMove_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_Quadruped_DoMove_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_Quadruped_DoMove_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.ReceiveAbortAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_Quadruped_DoMove_C_ReceiveAbortAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Quadruped_DoMove_C_ReceiveAbortAI) == 0x000008, "Wrong alignment on BTT_Quadruped_DoMove_C_ReceiveAbortAI");
static_assert(sizeof(BTT_Quadruped_DoMove_C_ReceiveAbortAI) == 0x000010, "Wrong size on BTT_Quadruped_DoMove_C_ReceiveAbortAI");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ReceiveAbortAI, OwnerController) == 0x000000, "Member 'BTT_Quadruped_DoMove_C_ReceiveAbortAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ReceiveAbortAI, ControlledPawn) == 0x000008, "Member 'BTT_Quadruped_DoMove_C_ReceiveAbortAI::ControlledPawn' has a wrong offset!");

// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.OnBlackboardKeyValueChange
// 0x0010 (0x0010 - 0x0000)
struct BTT_Quadruped_DoMove_C_OnBlackboardKeyValueChange final
{
public:
	const class UBlackboardComponent*             Blackboard;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   KeyName;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Quadruped_DoMove_C_OnBlackboardKeyValueChange) == 0x000008, "Wrong alignment on BTT_Quadruped_DoMove_C_OnBlackboardKeyValueChange");
static_assert(sizeof(BTT_Quadruped_DoMove_C_OnBlackboardKeyValueChange) == 0x000010, "Wrong size on BTT_Quadruped_DoMove_C_OnBlackboardKeyValueChange");
static_assert(offsetof(BTT_Quadruped_DoMove_C_OnBlackboardKeyValueChange, Blackboard) == 0x000000, "Member 'BTT_Quadruped_DoMove_C_OnBlackboardKeyValueChange::Blackboard' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_OnBlackboardKeyValueChange, KeyName) == 0x000008, "Member 'BTT_Quadruped_DoMove_C_OnBlackboardKeyValueChange::KeyName' has a wrong offset!");

// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.ExecuteUbergraph_BTT_Quadruped_DoMove
// 0x0050 (0x0050 - 0x0000)
struct BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_2;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_2;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UBlackboardComponent*             K2Node_Event_Blackboard;                           // 0x0040(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_KeyName;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove) == 0x000008, "Wrong alignment on BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove");
static_assert(sizeof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove) == 0x000050, "Wrong size on BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove, EntryPoint) == 0x000000, "Member 'BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove, K2Node_Event_OwnerController_2) == 0x000008, "Member 'BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove::K2Node_Event_OwnerController_2' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove, K2Node_Event_ControlledPawn_2) == 0x000010, "Member 'BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove::K2Node_Event_ControlledPawn_2' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove, K2Node_Event_OwnerController_1) == 0x000018, "Member 'BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove, K2Node_Event_ControlledPawn_1) == 0x000020, "Member 'BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove, K2Node_Event_OwnerController) == 0x000030, "Member 'BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove, K2Node_Event_ControlledPawn) == 0x000038, "Member 'BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove, K2Node_Event_Blackboard) == 0x000040, "Member 'BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove::K2Node_Event_Blackboard' has a wrong offset!");
static_assert(offsetof(BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove, K2Node_Event_KeyName) == 0x000048, "Member 'BTT_Quadruped_DoMove_C_ExecuteUbergraph_BTT_Quadruped_DoMove::K2Node_Event_KeyName' has a wrong offset!");

// Function BTT_Quadruped_DoMove.BTT_Quadruped_DoMove_C.GetModuleName
// 0x0010 (0x0010 - 0x0000)
struct BTT_Quadruped_DoMove_C_GetModuleName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Quadruped_DoMove_C_GetModuleName) == 0x000008, "Wrong alignment on BTT_Quadruped_DoMove_C_GetModuleName");
static_assert(sizeof(BTT_Quadruped_DoMove_C_GetModuleName) == 0x000010, "Wrong size on BTT_Quadruped_DoMove_C_GetModuleName");
static_assert(offsetof(BTT_Quadruped_DoMove_C_GetModuleName, ReturnValue) == 0x000000, "Member 'BTT_Quadruped_DoMove_C_GetModuleName::ReturnValue' has a wrong offset!");

}

