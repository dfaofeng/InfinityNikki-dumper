#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NikkiAIController_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function NikkiAIController_BP.NikkiAIController_BP_C.ExecuteUbergraph_NikkiAIController_BP
// 0x0004 (0x0004 - 0x0000)
struct NikkiAIController_BP_C_ExecuteUbergraph_NikkiAIController_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NikkiAIController_BP_C_ExecuteUbergraph_NikkiAIController_BP) == 0x000004, "Wrong alignment on NikkiAIController_BP_C_ExecuteUbergraph_NikkiAIController_BP");
static_assert(sizeof(NikkiAIController_BP_C_ExecuteUbergraph_NikkiAIController_BP) == 0x000004, "Wrong size on NikkiAIController_BP_C_ExecuteUbergraph_NikkiAIController_BP");
static_assert(offsetof(NikkiAIController_BP_C_ExecuteUbergraph_NikkiAIController_BP, EntryPoint) == 0x000000, "Member 'NikkiAIController_BP_C_ExecuteUbergraph_NikkiAIController_BP::EntryPoint' has a wrong offset!");

// Function NikkiAIController_BP.NikkiAIController_BP_C.MoveToRemoteLocation
// 0x0070 (0x0070 - 0x0000)
struct NikkiAIController_BP_C_MoveToRemoteLocation final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NikkiAIController_BP_C_MoveToRemoteLocation) == 0x000008, "Wrong alignment on NikkiAIController_BP_C_MoveToRemoteLocation");
static_assert(sizeof(NikkiAIController_BP_C_MoveToRemoteLocation) == 0x000070, "Wrong size on NikkiAIController_BP_C_MoveToRemoteLocation");
static_assert(offsetof(NikkiAIController_BP_C_MoveToRemoteLocation, Target) == 0x000000, "Member 'NikkiAIController_BP_C_MoveToRemoteLocation::Target' has a wrong offset!");
static_assert(offsetof(NikkiAIController_BP_C_MoveToRemoteLocation, CallFunc_Conv_VectorToString_ReturnValue) == 0x000018, "Member 'NikkiAIController_BP_C_MoveToRemoteLocation::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(NikkiAIController_BP_C_MoveToRemoteLocation, CallFunc_K2_GetPawn_ReturnValue) == 0x000028, "Member 'NikkiAIController_BP_C_MoveToRemoteLocation::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(NikkiAIController_BP_C_MoveToRemoteLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'NikkiAIController_BP_C_MoveToRemoteLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(NikkiAIController_BP_C_MoveToRemoteLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000048, "Member 'NikkiAIController_BP_C_MoveToRemoteLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NikkiAIController_BP_C_MoveToRemoteLocation, CallFunc_VSize_ReturnValue) == 0x000060, "Member 'NikkiAIController_BP_C_MoveToRemoteLocation::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NikkiAIController_BP_C_MoveToRemoteLocation, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000068, "Member 'NikkiAIController_BP_C_MoveToRemoteLocation::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");

}

