#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineTrackComponent

#include "Basic.hpp"

#include "BP_SplineTrackComponent_classes.hpp"
#include "BP_SplineTrackComponent_parameters.hpp"


namespace SDK
{

// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.AddKeyFrameDataBlend
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FF_SplineTrackKeyFrameData&OldData                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewSpeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FF_SplineTrackKeyFrameData*      NewData                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::AddKeyFrameDataBlend(const struct FF_SplineTrackKeyFrameData& OldData, double NewSpeed, double BlendTime, struct FF_SplineTrackKeyFrameData* NewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "AddKeyFrameDataBlend");

	Params::BP_SplineTrackComponent_C_AddKeyFrameDataBlend Parms{};

	Parms.OldData = std::move(OldData);
	Parms.NewSpeed = NewSpeed;
	Parms.BlendTime = BlendTime;

	UObject::ProcessEvent(Func, &Parms);

	if (NewData != nullptr)
		*NewData = std::move(Parms.NewData);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.AddKeyFrameDataConst
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FF_SplineTrackKeyFrameData&OldData                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  EndDistance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FF_SplineTrackKeyFrameData*      NewData                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::AddKeyFrameDataConst(const struct FF_SplineTrackKeyFrameData& OldData, double EndDistance, struct FF_SplineTrackKeyFrameData* NewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "AddKeyFrameDataConst");

	Params::BP_SplineTrackComponent_C_AddKeyFrameDataConst Parms{};

	Parms.OldData = std::move(OldData);
	Parms.EndDistance = EndDistance;

	UObject::ProcessEvent(Func, &Parms);

	if (NewData != nullptr)
		*NewData = std::move(Parms.NewData);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.AddKeyFrameDataStay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FF_SplineTrackKeyFrameData&OldData                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  StayTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FF_SplineTrackKeyFrameData*      NewData                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::AddKeyFrameDataStay(const struct FF_SplineTrackKeyFrameData& OldData, double StayTime, struct FF_SplineTrackKeyFrameData* NewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "AddKeyFrameDataStay");

	Params::BP_SplineTrackComponent_C_AddKeyFrameDataStay Parms{};

	Parms.OldData = std::move(OldData);
	Parms.StayTime = StayTime;

	UObject::ProcessEvent(Func, &Parms);

	if (NewData != nullptr)
		*NewData = std::move(Parms.NewData);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.AlignToInitPosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::AlignToInitPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "AlignToInitPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.AlmostArriveNextPoint
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  DeltaTime_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bAlmostArrive                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::AlmostArriveNextPoint(double DeltaTime_0, bool* bAlmostArrive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "AlmostArriveNextPoint");

	Params::BP_SplineTrackComponent_C_AlmostArriveNextPoint Parms{};

	Parms.DeltaTime_0 = DeltaTime_0;

	UObject::ProcessEvent(Func, &Parms);

	if (bAlmostArrive != nullptr)
		*bAlmostArrive = Parms.bAlmostArrive;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.ArrangeSegmentOverrides
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::ArrangeSegmentOverrides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "ArrangeSegmentOverrides");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.BP_DeinitMulti
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::BP_DeinitMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "BP_DeinitMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.BP_ForceSetStartTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewStartTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::BP_ForceSetStartTime(double NewStartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "BP_ForceSetStartTime");

	Params::BP_SplineTrackComponent_C_BP_ForceSetStartTime Parms{};

	Parms.NewStartTime = NewStartTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.BP_InitMulti
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::BP_InitMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "BP_InitMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.BP_IsMultiPlayerModeAndEnableNetSync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bYes                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::BP_IsMultiPlayerModeAndEnableNetSync(bool* bYes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "BP_IsMultiPlayerModeAndEnableNetSync");

	Params::BP_SplineTrackComponent_C_BP_IsMultiPlayerModeAndEnableNetSync Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bYes != nullptr)
		*bYes = Parms.bYes;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.BP_UpdateCurrentTimeMulti
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::BP_UpdateCurrentTimeMulti()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "BP_UpdateCurrentTimeMulti");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.ChangeEffectLineColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              NewColor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::ChangeEffectLineColor(const struct FLinearColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "ChangeEffectLineColor");

	Params::BP_SplineTrackComponent_C_ChangeEffectLineColor Parms{};

	Parms.NewColor = std::move(NewColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.ChangeEffectPointColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              NewColor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::ChangeEffectPointColor(const struct FLinearColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "ChangeEffectPointColor");

	Params::BP_SplineTrackComponent_C_ChangeEffectPointColor Parms{};

	Parms.NewColor = std::move(NewColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.CondtionallySetPlatformActorRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  TargetRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SplineTrackComponent_C::CondtionallySetPlatformActorRotation(const struct FRotator& TargetRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "CondtionallySetPlatformActorRotation");

	Params::BP_SplineTrackComponent_C_CondtionallySetPlatformActorRotation Parms{};

	Parms.TargetRotation = std::move(TargetRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.DeInit
// (BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::DeInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "DeInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.DoesSegmentOverrideAnything
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FTrackSegmentOverride&     Segment                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool*                                   bOverrideSomething                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::DoesSegmentOverrideAnything(const struct FTrackSegmentOverride& Segment, bool* bOverrideSomething)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "DoesSegmentOverrideAnything");

	Params::BP_SplineTrackComponent_C_DoesSegmentOverrideAnything Parms{};

	Parms.Segment = std::move(Segment);

	UObject::ProcessEvent(Func, &Parms);

	if (bOverrideSomething != nullptr)
		*bOverrideSomething = Parms.bOverrideSomething;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.DrawEffectLine
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::DrawEffectLine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "DrawEffectLine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.DrawEffectLineImpl
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::DrawEffectLineImpl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "DrawEffectLineImpl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.DrawEffectPoints
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::DrawEffectPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "DrawEffectPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.DrawEffectPointsImpl
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::DrawEffectPointsImpl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "DrawEffectPointsImpl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.ExecuteUbergraph_BP_SplineTrackComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::ExecuteUbergraph_BP_SplineTrackComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "ExecuteUbergraph_BP_SplineTrackComponent");

	Params::BP_SplineTrackComponent_C_ExecuteUbergraph_BP_SplineTrackComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.FillSegmentOverrides
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::FillSegmentOverrides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "FillSegmentOverrides");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetAccelerationByKetFrameTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Acceleration                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetAccelerationByKetFrameTime(double Time, double* Acceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetAccelerationByKetFrameTime");

	Params::BP_SplineTrackComponent_C_GetAccelerationByKetFrameTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Acceleration != nullptr)
		*Acceleration = Parms.Acceleration;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetAllMoveInfoByKeyFrameTime
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform*                      Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Acceleration                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 SplineDistance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetAllMoveInfoByKeyFrameTime(double Time, struct FTransform* Transform, struct FVector* Velocity, double* Acceleration, double* SplineDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetAllMoveInfoByKeyFrameTime");

	Params::BP_SplineTrackComponent_C_GetAllMoveInfoByKeyFrameTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (Acceleration != nullptr)
		*Acceleration = Parms.Acceleration;

	if (SplineDistance != nullptr)
		*SplineDistance = Parms.SplineDistance;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetBlendTimeOnLeaveSplineSegment
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SegmentIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 BlendTime                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetBlendTimeOnLeaveSplineSegment(int32 SegmentIndex, double* BlendTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetBlendTimeOnLeaveSplineSegment");

	Params::BP_SplineTrackComponent_C_GetBlendTimeOnLeaveSplineSegment Parms{};

	Parms.SegmentIndex = SegmentIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (BlendTime != nullptr)
		*BlendTime = Parms.BlendTime;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetClampedDistance
// (Private, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  InDistance                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetClampedDistance(double InDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetClampedDistance");

	Params::BP_SplineTrackComponent_C_GetClampedDistance Parms{};

	Parms.InDistance = InDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetClosedLoopClampDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InDistance                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 OutDistance                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetClosedLoopClampDistance(double InDistance, double* OutDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetClosedLoopClampDistance");

	Params::BP_SplineTrackComponent_C_GetClosedLoopClampDistance Parms{};

	Parms.InDistance = InDistance;

	UObject::ProcessEvent(Func, &Parms);

	if (OutDistance != nullptr)
		*OutDistance = Parms.OutDistance;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetDistanceAndSpeedByKeyFrameData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetDistanceAndSpeedByKeyFrameData(double Time, double* Distance, double* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetDistanceAndSpeedByKeyFrameData");

	Params::BP_SplineTrackComponent_C_GetDistanceAndSpeedByKeyFrameData Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetDistanceByKeyFrameTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetDistanceByKeyFrameTime(double Time, double* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetDistanceByKeyFrameTime");

	Params::BP_SplineTrackComponent_C_GetDistanceByKeyFrameTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetInitializationSplineInuptKey
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 InitializationSplineInuptKey                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetInitializationSplineInuptKey(double* InitializationSplineInuptKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetInitializationSplineInuptKey");

	Params::BP_SplineTrackComponent_C_GetInitializationSplineInuptKey Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InitializationSplineInuptKey != nullptr)
		*InitializationSplineInuptKey = Parms.InitializationSplineInuptKey;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetKeyFrameDataMaxTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 MaxTime                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetKeyFrameDataMaxTime(double* MaxTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetKeyFrameDataMaxTime");

	Params::BP_SplineTrackComponent_C_GetKeyFrameDataMaxTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxTime != nullptr)
		*MaxTime = Parms.MaxTime;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetKeyFrameTimeByDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForward                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 KeyFrameTime                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetKeyFrameTimeByDistance(double Distance, bool bForward, double* KeyFrameTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetKeyFrameTimeByDistance");

	Params::BP_SplineTrackComponent_C_GetKeyFrameTimeByDistance Parms{};

	Parms.Distance = Distance;
	Parms.bForward = bForward;

	UObject::ProcessEvent(Func, &Parms);

	if (KeyFrameTime != nullptr)
		*KeyFrameTime = Parms.KeyFrameTime;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetLaunchTimeOnSplineSegment
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SegmentIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 LaunchTime                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetLaunchTimeOnSplineSegment(int32 SegmentIndex, double* LaunchTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetLaunchTimeOnSplineSegment");

	Params::BP_SplineTrackComponent_C_GetLaunchTimeOnSplineSegment Parms{};

	Parms.SegmentIndex = SegmentIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (LaunchTime != nullptr)
		*LaunchTime = Parms.LaunchTime;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetLocationAndVelocityByKeyFrameTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetLocationAndVelocityByKeyFrameTime(double Time, struct FVector* Location, struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetLocationAndVelocityByKeyFrameTime");

	Params::BP_SplineTrackComponent_C_GetLocationAndVelocityByKeyFrameTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetLowerKeyFrameDataByDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForward                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FF_SplineTrackKeyFrameData*      NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetLowerKeyFrameDataByDistance(double Distance, bool bForward, struct FF_SplineTrackKeyFrameData* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetLowerKeyFrameDataByDistance");

	Params::BP_SplineTrackComponent_C_GetLowerKeyFrameDataByDistance Parms{};

	Parms.Distance = Distance;
	Parms.bForward = bForward;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetLowerKeyFrameDataByTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FF_SplineTrackKeyFrameData*      NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetLowerKeyFrameDataByTime(double Time, struct FF_SplineTrackKeyFrameData* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetLowerKeyFrameDataByTime");

	Params::BP_SplineTrackComponent_C_GetLowerKeyFrameDataByTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetNextSpeedBlendTime
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetNextSpeedBlendTime(double* Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetNextSpeedBlendTime");

	Params::BP_SplineTrackComponent_C_GetNextSpeedBlendTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Time != nullptr)
		*Time = Parms.Time;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetSpeedOnSplineSegment
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SegmentIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetSpeedOnSplineSegment(int32 SegmentIndex, double* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetSpeedOnSplineSegment");

	Params::BP_SplineTrackComponent_C_GetSpeedOnSplineSegment Parms{};

	Parms.SegmentIndex = SegmentIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetSpeedOnSplineSegmentImpl
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SegmentIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForward                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetSpeedOnSplineSegmentImpl(int32 SegmentIndex, bool bForward, double* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetSpeedOnSplineSegmentImpl");

	Params::BP_SplineTrackComponent_C_GetSpeedOnSplineSegmentImpl Parms{};

	Parms.SegmentIndex = SegmentIndex;
	Parms.bForward = bForward;

	UObject::ProcessEvent(Func, &Parms);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetStayTimeOnEnterSplineSegment
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SegmentIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 StayTime                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetStayTimeOnEnterSplineSegment(int32 SegmentIndex, double* StayTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetStayTimeOnEnterSplineSegment");

	Params::BP_SplineTrackComponent_C_GetStayTimeOnEnterSplineSegment Parms{};

	Parms.SegmentIndex = SegmentIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (StayTime != nullptr)
		*StayTime = Parms.StayTime;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetUpperKeyFrameDataByDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForward                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FF_SplineTrackKeyFrameData*      KeyFrameData                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetUpperKeyFrameDataByDistance(double Distance, bool bForward, struct FF_SplineTrackKeyFrameData* KeyFrameData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetUpperKeyFrameDataByDistance");

	Params::BP_SplineTrackComponent_C_GetUpperKeyFrameDataByDistance Parms{};

	Parms.Distance = Distance;
	Parms.bForward = bForward;

	UObject::ProcessEvent(Func, &Parms);

	if (KeyFrameData != nullptr)
		*KeyFrameData = std::move(Parms.KeyFrameData);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetUpperKeyFrameDataByTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FF_SplineTrackKeyFrameData*      NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::GetUpperKeyFrameDataByTime(double Time, struct FF_SplineTrackKeyFrameData* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetUpperKeyFrameDataByTime");

	Params::BP_SplineTrackComponent_C_GetUpperKeyFrameDataByTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.HasArrivedNextPoint
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bArrived                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::HasArrivedNextPoint(bool* bArrived)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "HasArrivedNextPoint");

	Params::BP_SplineTrackComponent_C_HasArrivedNextPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bArrived != nullptr)
		*bArrived = Parms.bArrived;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.HasReachedEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bReachedEnd                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::HasReachedEnd(bool* bReachedEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "HasReachedEnd");

	Params::BP_SplineTrackComponent_C_HasReachedEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bReachedEnd != nullptr)
		*bReachedEnd = Parms.bReachedEnd;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.Init
// (BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "Init");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.InitDistanceAndIndex
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::InitDistanceAndIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "InitDistanceAndIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.InitKeyFrameData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::InitKeyFrameData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "InitKeyFrameData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.InitSegmentOverrides
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::InitSegmentOverrides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "InitSegmentOverrides");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.IsStaying
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bIsStaying                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::IsStaying(bool* bIsStaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "IsStaying");

	Params::BP_SplineTrackComponent_C_IsStaying Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsStaying != nullptr)
		*bIsStaying = Parms.bIsStaying;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.IsTrackActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bActive                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::IsTrackActive(bool* bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "IsTrackActive");

	Params::BP_SplineTrackComponent_C_IsTrackActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bActive != nullptr)
		*bActive = Parms.bActive;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.LaunchHelper
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::LaunchHelper()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "LaunchHelper");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.MapTimeToKeyFrameDataRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  InTime                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 ValidTime                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::MapTimeToKeyFrameDataRange(double InTime, double* ValidTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "MapTimeToKeyFrameDataRange");

	Params::BP_SplineTrackComponent_C_MapTimeToKeyFrameDataRange Parms{};

	Parms.InTime = InTime;

	UObject::ProcessEvent(Func, &Parms);

	if (ValidTime != nullptr)
		*ValidTime = Parms.ValidTime;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.OnLaunchFromEndPoint
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::OnLaunchFromEndPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "OnLaunchFromEndPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.OnLoaded_001FCB834655C195935AE8ABB5056F2C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::OnLoaded_001FCB834655C195935AE8ABB5056F2C(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "OnLoaded_001FCB834655C195935AE8ABB5056F2C");

	Params::BP_SplineTrackComponent_C_OnLoaded_001FCB834655C195935AE8ABB5056F2C Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.OnLoaded_6CED6E0242C047F2D28A56AA09B6CC63
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::OnLoaded_6CED6E0242C047F2D28A56AA09B6CC63(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "OnLoaded_6CED6E0242C047F2D28A56AA09B6CC63");

	Params::BP_SplineTrackComponent_C_OnLoaded_6CED6E0242C047F2D28A56AA09B6CC63 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.OnLoaded_7DB3D5DB4E70E356CCC6DE94FB30A177
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::OnLoaded_7DB3D5DB4E70E356CCC6DE94FB30A177(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "OnLoaded_7DB3D5DB4E70E356CCC6DE94FB30A177");

	Params::BP_SplineTrackComponent_C_OnLoaded_7DB3D5DB4E70E356CCC6DE94FB30A177 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.OnReachEnd_Debug
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bForward                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PointIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::OnReachEnd_Debug(bool bForward, int32 PointIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "OnReachEnd_Debug");

	Params::BP_SplineTrackComponent_C_OnReachEnd_Debug Parms{};

	Parms.bForward = bForward;
	Parms.PointIndex = PointIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.OnReachPoint_Debug
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PointIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::OnReachPoint_Debug(int32 PointIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "OnReachPoint_Debug");

	Params::BP_SplineTrackComponent_C_OnReachPoint_Debug Parms{};

	Parms.PointIndex = PointIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.PrintInfoOnUpdate
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::PrintInfoOnUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "PrintInfoOnUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_SplineTrackComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "ReceiveEndPlay");

	Params::BP_SplineTrackComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "ReceiveTick");

	Params::BP_SplineTrackComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.RemoveAllEffect
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::RemoveAllEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "RemoveAllEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.RemoveEffectLine
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::RemoveEffectLine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "RemoveEffectLine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.RemoveEffectPoints
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::RemoveEffectPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "RemoveEffectPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.RequestMultiStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>&                          Params_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_SplineTrackComponent_C::RequestMultiStart(TArray<int32>& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "RequestMultiStart");

	Params::BP_SplineTrackComponent_C_RequestMultiStart Parms{};

	Parms.Params_0 = std::move(Params_0);

	UObject::ProcessEvent(Func, &Parms);

	Params_0 = std::move(Parms.Params_0);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.RequestMultiStop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>&                          Params_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_SplineTrackComponent_C::RequestMultiStop(TArray<int32>& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "RequestMultiStop");

	Params::BP_SplineTrackComponent_C_RequestMultiStop Parms{};

	Parms.Params_0 = std::move(Params_0);

	UObject::ProcessEvent(Func, &Parms);

	Params_0 = std::move(Parms.Params_0);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.Reset
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.ResetVariables
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::ResetVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "ResetVariables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.ServerInit
// (BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::ServerInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "ServerInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.SetDefaultTimeBySpeed
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::SetDefaultTimeBySpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "SetDefaultTimeBySpeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.SetTrackActive
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewActive                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::SetTrackActive(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "SetTrackActive");

	Params::BP_SplineTrackComponent_C_SetTrackActive Parms{};

	Parms.bNewActive = bNewActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.SetTrackActiveImpl
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bActive                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::SetTrackActiveImpl(bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "SetTrackActiveImpl");

	Params::BP_SplineTrackComponent_C_SetTrackActiveImpl Parms{};

	Parms.bActive = bActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.SetUpdatedComponent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  NewUpdatedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::SetUpdatedComponent(class USceneComponent* NewUpdatedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "SetUpdatedComponent");

	Params::BP_SplineTrackComponent_C_SetUpdatedComponent Parms{};

	Parms.NewUpdatedComponent = NewUpdatedComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.ShouldStayOnEnterSplineSegment
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SegmentIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bStay                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::ShouldStayOnEnterSplineSegment(int32 SegmentIndex, bool* bStay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "ShouldStayOnEnterSplineSegment");

	Params::BP_SplineTrackComponent_C_ShouldStayOnEnterSplineSegment Parms{};

	Parms.SegmentIndex = SegmentIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (bStay != nullptr)
		*bStay = Parms.bStay;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.SnapToClosestPoint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::SnapToClosestPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "SnapToClosestPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.SortSegmentOverrides
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SplineTrackComponent_C::SortSegmentOverrides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "SortSegmentOverrides");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.TryConstrainRotationToPitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FRotator&                  InRotation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator*                        OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SplineTrackComponent_C::TryConstrainRotationToPitch(const struct FRotator& InRotation, struct FRotator* OutRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "TryConstrainRotationToPitch");

	Params::BP_SplineTrackComponent_C_TryConstrainRotationToPitch Parms{};

	Parms.InRotation = std::move(InRotation);

	UObject::ProcessEvent(Func, &Parms);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.UpdateAcceleration
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 NewAcceleration                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::UpdateAcceleration(double* NewAcceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "UpdateAcceleration");

	Params::BP_SplineTrackComponent_C_UpdateAcceleration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewAcceleration != nullptr)
		*NewAcceleration = Parms.NewAcceleration;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.UpdateDistance
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 NewDistance                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::UpdateDistance(double DeltaTime_0, double* NewDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "UpdateDistance");

	Params::BP_SplineTrackComponent_C_UpdateDistance Parms{};

	Parms.DeltaTime_0 = DeltaTime_0;

	UObject::ProcessEvent(Func, &Parms);

	if (NewDistance != nullptr)
		*NewDistance = Parms.NewDistance;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.UpdateNextPoint
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::UpdateNextPoint(double DeltaTime_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "UpdateNextPoint");

	Params::BP_SplineTrackComponent_C_UpdateNextPoint Parms{};

	Parms.DeltaTime_0 = DeltaTime_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.UpdatePlatformActor
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::UpdatePlatformActor(double DeltaTime_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "UpdatePlatformActor");

	Params::BP_SplineTrackComponent_C_UpdatePlatformActor Parms{};

	Parms.DeltaTime_0 = DeltaTime_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.UpdateSpeed
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 NewSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::UpdateSpeed(double DeltaTime_0, double* NewSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "UpdateSpeed");

	Params::BP_SplineTrackComponent_C_UpdateSpeed Parms{};

	Parms.DeltaTime_0 = DeltaTime_0;

	UObject::ProcessEvent(Func, &Parms);

	if (NewSpeed != nullptr)
		*NewSpeed = Parms.NewSpeed;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.UpdateState
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// Enum_SplineTrackState*                  NewState                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::UpdateState(double DeltaTime_0, Enum_SplineTrackState* NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "UpdateState");

	Params::BP_SplineTrackComponent_C_UpdateState Parms{};

	Parms.DeltaTime_0 = DeltaTime_0;

	UObject::ProcessEvent(Func, &Parms);

	if (NewState != nullptr)
		*NewState = Parms.NewState;
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.UpdateUsingKeyFrameMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SplineTrackComponent_C::UpdateUsingKeyFrameMode(double DeltaTime_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "UpdateUsingKeyFrameMode");

	Params::BP_SplineTrackComponent_C_UpdateUsingKeyFrameMode Parms{};

	Parms.DeltaTime_0 = DeltaTime_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineTrackComponent.BP_SplineTrackComponent_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_SplineTrackComponent_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineTrackComponent_C", "GetModuleName");

	Params::BP_SplineTrackComponent_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

