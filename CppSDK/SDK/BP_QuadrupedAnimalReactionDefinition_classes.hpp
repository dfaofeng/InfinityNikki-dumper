#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QuadrupedAnimalReactionDefinition

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_QuadrupedAnimalReactionDefinition.BP_QuadrupedAnimalReactionDefinition_C
// 0x00B8 (0x00E8 - 0x0030)
class UBP_QuadrupedAnimalReactionDefinition_C final : public UPrimaryDataAsset
{
public:
	double                                        AlertAngleThreshold90;                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AlertAngleThreshold180;                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LeaveAlertRadius;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EnterAlertRadius;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AlterTurnCurve_90;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AlterTurnCurve_180;                                // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AlertTurnCoolDown90;                               // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AlertTurnCoolDown180;                              // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AlertMaxDuration;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      FleeAnim;                                          // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        EnterLeaveFleeRadius;                              // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FleeRange;                                         // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FleeStepDistMin;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FleeSucceedDistance;                               // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FleeStepDistMax;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CuriousAngleThreshold180;                          // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CuriousAngleThreshold90;                           // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CuriousTurnCoolDown180;                            // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CuriousTurnCoolDown90;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EnterLeaveCuriousDistance;                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CuriousTurnCurve_90;                               // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CuriousTurnCurve_180;                              // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        StartStanceTimeBeforeTurnFinish;                   // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_QuadrupedAnimalReactionDefinition_C">();
	}
	static class UBP_QuadrupedAnimalReactionDefinition_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_QuadrupedAnimalReactionDefinition_C>();
	}
};
static_assert(alignof(UBP_QuadrupedAnimalReactionDefinition_C) == 0x000008, "Wrong alignment on UBP_QuadrupedAnimalReactionDefinition_C");
static_assert(sizeof(UBP_QuadrupedAnimalReactionDefinition_C) == 0x0000E8, "Wrong size on UBP_QuadrupedAnimalReactionDefinition_C");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, AlertAngleThreshold90) == 0x000030, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::AlertAngleThreshold90' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, AlertAngleThreshold180) == 0x000038, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::AlertAngleThreshold180' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, LeaveAlertRadius) == 0x000040, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::LeaveAlertRadius' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, EnterAlertRadius) == 0x000048, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::EnterAlertRadius' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, AlterTurnCurve_90) == 0x000050, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::AlterTurnCurve_90' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, AlterTurnCurve_180) == 0x000058, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::AlterTurnCurve_180' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, AlertTurnCoolDown90) == 0x000060, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::AlertTurnCoolDown90' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, AlertTurnCoolDown180) == 0x000068, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::AlertTurnCoolDown180' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, AlertMaxDuration) == 0x000070, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::AlertMaxDuration' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, FleeAnim) == 0x000078, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::FleeAnim' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, EnterLeaveFleeRadius) == 0x000080, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::EnterLeaveFleeRadius' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, FleeRange) == 0x000088, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::FleeRange' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, FleeStepDistMin) == 0x000090, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::FleeStepDistMin' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, FleeSucceedDistance) == 0x000098, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::FleeSucceedDistance' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, FleeStepDistMax) == 0x0000A0, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::FleeStepDistMax' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, CuriousAngleThreshold180) == 0x0000A8, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::CuriousAngleThreshold180' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, CuriousAngleThreshold90) == 0x0000B0, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::CuriousAngleThreshold90' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, CuriousTurnCoolDown180) == 0x0000B8, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::CuriousTurnCoolDown180' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, CuriousTurnCoolDown90) == 0x0000C0, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::CuriousTurnCoolDown90' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, EnterLeaveCuriousDistance) == 0x0000C8, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::EnterLeaveCuriousDistance' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, CuriousTurnCurve_90) == 0x0000D0, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::CuriousTurnCurve_90' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, CuriousTurnCurve_180) == 0x0000D8, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::CuriousTurnCurve_180' has a wrong offset!");
static_assert(offsetof(UBP_QuadrupedAnimalReactionDefinition_C, StartStanceTimeBeforeTurnFinish) == 0x0000E0, "Member 'UBP_QuadrupedAnimalReactionDefinition_C::StartStanceTimeBeforeTurnFinish' has a wrong offset!");

}

