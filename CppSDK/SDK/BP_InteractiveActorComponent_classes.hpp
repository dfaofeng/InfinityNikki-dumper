#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractiveActorComponent

#include "Basic.hpp"

#include "EInt32PlayerPawnStateTypes_structs.hpp"
#include "E_InteractiveActorType_structs.hpp"
#include "E_InteractiveShapeType_structs.hpp"
#include "X6Game_structs.hpp"
#include "X6Game_classes.hpp"
#include "E_InteractionProcess_structs.hpp"
#include "E_InteractiveStageEnum_structs.hpp"
#include "E_InteractiveTraceLocationType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "F_AdvanceInteractOperationData_structs.hpp"
#include "E_InteractiveTraceModeType_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_InterObjOccupyType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InteractiveActorComponent.BP_InteractiveActorComponent_C
// 0x02A8 (0x03D8 - 0x0130)
class UBP_InteractiveActorComponent_C final : public UX6InteractiveActorComponent
{
public:
	E_InteractiveActorType                        InteractiveActorType;                              // 0x0130(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         InteractiveActorConfigID;                          // 0x0138(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_InteractiveShapeType                        InteractiveCollisionShapeType;                     // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(E_InteractionProcess Process, int64 InteractMasterNetID, class AActor* InteractMasterActor, bool IsPressBtnInteraction, class AActor* InteractedActor, class UBP_InterAction_State_C* InterAction_State)> ActiveInteractive; // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(bool StartOrEnd, class AActor* MasterActor, bool CheckClothResult)> PreInteractiveEffect; // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        InteractiveItemHP;                                 // 0x0168(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanInteract;                                       // 0x0170(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool StartOrEnd, class AActor* MasterActor)> InteractiveTipTrigger; // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(EInt32PlayerPawnStateTypes NewInt32StateAdded, EInt32PlayerPawnStateTypes Int32StateRemoved)> ListenLocalPlayerStateUpdated; // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              StopInteraction;                                   // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* Initiator, E_InteractiveStageEnum UpdatedStage)> InteractStageUpdate; // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 IndividualActionId)> IndividualActionInteractive;            // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              ReceiveAttachToPlayerEvent;                        // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              ReceivePlayerReqStopInteractEvent;                 // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              ReceiveDetachFromPlayerEvent;                      // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 DialogueId)> StartDialogue;                                  // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 DialogueId)> FinishDialogue;                                 // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         DTConfigRowID;                                     // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DTConfig;                                          // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class UBP_InterAction_State_C*>   InterActInfo;                                      // 0x0228(0x0050)(Edit, BlueprintVisible)
	TMulticastInlineDelegate<void(const struct FInteractSlotDefinition& SlotData)> StartAdjustTransform; // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              InteractiveStageEnd;                               // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	E_InteractiveStageEnum                        BP_CurrentState;                                   // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FF_AdvanceInteractOperationData> AdvanceInterActInfo;                         // 0x02A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_InteractiveStageEnum, TSoftObjectPtr<class UAnimMontage>> InteractiveActorAnimMontageList; // 0x02F0(0x0050)(Edit, BlueprintVisible)
	bool                                          bInterruptDialogue;                                // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* InteractMaster, E_InteractiveStageEnum Stage, class UAnimMontage* MTG)> OnInteractMasterPlayMTG; // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        BP_PendingKillTime;                                // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BP_InteractDetectionDistance;                      // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         BP_InteractConditionUID;                           // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_InteractiveTraceLocationType                BP_TraceLocationType;                              // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_InteractiveTraceModeType                    BP_TraceModeType;                                  // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_372[0x2];                                      // 0x0372(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BP_ArrowComponentTag;                              // 0x0374(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_EnableCreateStimuliSouce;                       // 0x037C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37D[0x3];                                      // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BP_StimuliSourceTag;                               // 0x0380(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          bp_ApplyNpcRule;                                   // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_InteractiveWhitePointWidgetComponent_C* BP_WhitePointWidgetComponent;                  // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AbilityInteractWidgetOffset;                       // 0x0398(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int64 InteractMasterNetID, class AActor* InteractMasterActor, class AActor* InteractedActor)> PreInteractSuccess; // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	E_InterObjOccupyType                          BP_OccupyType;                                     // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool ShowInteractionUI, bool CanInteract)> OnUpdateCanInteract;    // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void UpdateCanInteract(bool ShowInteractUI, bool CanInteract_0);
	void GetInteractiveActorType(E_InteractiveActorType* ActorType);
	void GetInteractiveActorConfigID(int64* ConfigID);
	void GetCanInteract(bool* Can);
	void BP_SetIsBlock(bool IsBlock);
	void BP_SetInteractWidgetOffset(const struct FVector& NewWidgetOffset);
	void BP_NotifyServerSelfPos();
	void BP_ModifyWhitePointWidgetComponent();
	void BP_GetIsBlock(bool* IsBlock);
	void BP_DynamicModifyWhitePointVisibility(bool bShow);
	void BP_ConvertIkButtVector(const struct FVector& ArrowForwardVector, double ActorYaw, double ArrowRelativeYaw, const struct FVector& IkVector, struct FVector* caculateIkVector);
	void BP_AddWhitePointWidgetComponent();

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InteractiveActorComponent_C">();
	}
	static class UBP_InteractiveActorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_InteractiveActorComponent_C>();
	}
};
static_assert(alignof(UBP_InteractiveActorComponent_C) == 0x000008, "Wrong alignment on UBP_InteractiveActorComponent_C");
static_assert(sizeof(UBP_InteractiveActorComponent_C) == 0x0003D8, "Wrong size on UBP_InteractiveActorComponent_C");
static_assert(offsetof(UBP_InteractiveActorComponent_C, InteractiveActorType) == 0x000130, "Member 'UBP_InteractiveActorComponent_C::InteractiveActorType' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, InteractiveActorConfigID) == 0x000138, "Member 'UBP_InteractiveActorComponent_C::InteractiveActorConfigID' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, InteractiveCollisionShapeType) == 0x000140, "Member 'UBP_InteractiveActorComponent_C::InteractiveCollisionShapeType' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, ActiveInteractive) == 0x000148, "Member 'UBP_InteractiveActorComponent_C::ActiveInteractive' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, PreInteractiveEffect) == 0x000158, "Member 'UBP_InteractiveActorComponent_C::PreInteractiveEffect' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, InteractiveItemHP) == 0x000168, "Member 'UBP_InteractiveActorComponent_C::InteractiveItemHP' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, CanInteract) == 0x000170, "Member 'UBP_InteractiveActorComponent_C::CanInteract' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, InteractiveTipTrigger) == 0x000178, "Member 'UBP_InteractiveActorComponent_C::InteractiveTipTrigger' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, ListenLocalPlayerStateUpdated) == 0x000188, "Member 'UBP_InteractiveActorComponent_C::ListenLocalPlayerStateUpdated' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, StopInteraction) == 0x000198, "Member 'UBP_InteractiveActorComponent_C::StopInteraction' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, InteractStageUpdate) == 0x0001A8, "Member 'UBP_InteractiveActorComponent_C::InteractStageUpdate' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, IndividualActionInteractive) == 0x0001B8, "Member 'UBP_InteractiveActorComponent_C::IndividualActionInteractive' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, ReceiveAttachToPlayerEvent) == 0x0001C8, "Member 'UBP_InteractiveActorComponent_C::ReceiveAttachToPlayerEvent' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, ReceivePlayerReqStopInteractEvent) == 0x0001D8, "Member 'UBP_InteractiveActorComponent_C::ReceivePlayerReqStopInteractEvent' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, ReceiveDetachFromPlayerEvent) == 0x0001E8, "Member 'UBP_InteractiveActorComponent_C::ReceiveDetachFromPlayerEvent' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, StartDialogue) == 0x0001F8, "Member 'UBP_InteractiveActorComponent_C::StartDialogue' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, FinishDialogue) == 0x000208, "Member 'UBP_InteractiveActorComponent_C::FinishDialogue' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, DTConfigRowID) == 0x000218, "Member 'UBP_InteractiveActorComponent_C::DTConfigRowID' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, DTConfig) == 0x000220, "Member 'UBP_InteractiveActorComponent_C::DTConfig' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, InterActInfo) == 0x000228, "Member 'UBP_InteractiveActorComponent_C::InterActInfo' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, StartAdjustTransform) == 0x000278, "Member 'UBP_InteractiveActorComponent_C::StartAdjustTransform' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, InteractiveStageEnd) == 0x000288, "Member 'UBP_InteractiveActorComponent_C::InteractiveStageEnd' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, BP_CurrentState) == 0x000298, "Member 'UBP_InteractiveActorComponent_C::BP_CurrentState' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, AdvanceInterActInfo) == 0x0002A0, "Member 'UBP_InteractiveActorComponent_C::AdvanceInterActInfo' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, InteractiveActorAnimMontageList) == 0x0002F0, "Member 'UBP_InteractiveActorComponent_C::InteractiveActorAnimMontageList' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, bInterruptDialogue) == 0x000340, "Member 'UBP_InteractiveActorComponent_C::bInterruptDialogue' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, OnInteractMasterPlayMTG) == 0x000348, "Member 'UBP_InteractiveActorComponent_C::OnInteractMasterPlayMTG' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, BP_PendingKillTime) == 0x000358, "Member 'UBP_InteractiveActorComponent_C::BP_PendingKillTime' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, BP_InteractDetectionDistance) == 0x000360, "Member 'UBP_InteractiveActorComponent_C::BP_InteractDetectionDistance' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, BP_InteractConditionUID) == 0x000368, "Member 'UBP_InteractiveActorComponent_C::BP_InteractConditionUID' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, BP_TraceLocationType) == 0x000370, "Member 'UBP_InteractiveActorComponent_C::BP_TraceLocationType' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, BP_TraceModeType) == 0x000371, "Member 'UBP_InteractiveActorComponent_C::BP_TraceModeType' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, BP_ArrowComponentTag) == 0x000374, "Member 'UBP_InteractiveActorComponent_C::BP_ArrowComponentTag' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, BP_EnableCreateStimuliSouce) == 0x00037C, "Member 'UBP_InteractiveActorComponent_C::BP_EnableCreateStimuliSouce' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, BP_StimuliSourceTag) == 0x000380, "Member 'UBP_InteractiveActorComponent_C::BP_StimuliSourceTag' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, bp_ApplyNpcRule) == 0x000388, "Member 'UBP_InteractiveActorComponent_C::bp_ApplyNpcRule' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, BP_WhitePointWidgetComponent) == 0x000390, "Member 'UBP_InteractiveActorComponent_C::BP_WhitePointWidgetComponent' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, AbilityInteractWidgetOffset) == 0x000398, "Member 'UBP_InteractiveActorComponent_C::AbilityInteractWidgetOffset' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, PreInteractSuccess) == 0x0003B0, "Member 'UBP_InteractiveActorComponent_C::PreInteractSuccess' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, BP_OccupyType) == 0x0003C0, "Member 'UBP_InteractiveActorComponent_C::BP_OccupyType' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveActorComponent_C, OnUpdateCanInteract) == 0x0003C8, "Member 'UBP_InteractiveActorComponent_C::OnUpdateCanInteract' has a wrong offset!");

}

