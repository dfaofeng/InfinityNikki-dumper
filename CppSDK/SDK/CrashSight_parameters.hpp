#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CrashSight

#include "Basic.hpp"


namespace SDK::Params
{

// Function CrashSight.PaperCrashSightLibrary.AddSceneData
// 0x0020 (0x0020 - 0x0000)
struct PaperCrashSightLibrary_AddSceneData final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_AddSceneData) == 0x000008, "Wrong alignment on PaperCrashSightLibrary_AddSceneData");
static_assert(sizeof(PaperCrashSightLibrary_AddSceneData) == 0x000020, "Wrong size on PaperCrashSightLibrary_AddSceneData");
static_assert(offsetof(PaperCrashSightLibrary_AddSceneData, Key) == 0x000000, "Member 'PaperCrashSightLibrary_AddSceneData::Key' has a wrong offset!");
static_assert(offsetof(PaperCrashSightLibrary_AddSceneData, Value) == 0x000010, "Member 'PaperCrashSightLibrary_AddSceneData::Value' has a wrong offset!");

// Function CrashSight.PaperCrashSightLibrary.ConfigDebugMode
// 0x0001 (0x0001 - 0x0000)
struct PaperCrashSightLibrary_ConfigDebugMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_ConfigDebugMode) == 0x000001, "Wrong alignment on PaperCrashSightLibrary_ConfigDebugMode");
static_assert(sizeof(PaperCrashSightLibrary_ConfigDebugMode) == 0x000001, "Wrong size on PaperCrashSightLibrary_ConfigDebugMode");
static_assert(offsetof(PaperCrashSightLibrary_ConfigDebugMode, Enable) == 0x000000, "Member 'PaperCrashSightLibrary_ConfigDebugMode::Enable' has a wrong offset!");

// Function CrashSight.PaperCrashSightLibrary.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct PaperCrashSightLibrary_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_IsInitialized) == 0x000001, "Wrong alignment on PaperCrashSightLibrary_IsInitialized");
static_assert(sizeof(PaperCrashSightLibrary_IsInitialized) == 0x000001, "Wrong size on PaperCrashSightLibrary_IsInitialized");
static_assert(offsetof(PaperCrashSightLibrary_IsInitialized, ReturnValue) == 0x000000, "Member 'PaperCrashSightLibrary_IsInitialized::ReturnValue' has a wrong offset!");

// Function CrashSight.PaperCrashSightLibrary.PrintLog
// 0x0018 (0x0018 - 0x0000)
struct PaperCrashSightLibrary_PrintLog final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LogStr;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_PrintLog) == 0x000008, "Wrong alignment on PaperCrashSightLibrary_PrintLog");
static_assert(sizeof(PaperCrashSightLibrary_PrintLog) == 0x000018, "Wrong size on PaperCrashSightLibrary_PrintLog");
static_assert(offsetof(PaperCrashSightLibrary_PrintLog, Level) == 0x000000, "Member 'PaperCrashSightLibrary_PrintLog::Level' has a wrong offset!");
static_assert(offsetof(PaperCrashSightLibrary_PrintLog, LogStr) == 0x000008, "Member 'PaperCrashSightLibrary_PrintLog::LogStr' has a wrong offset!");

// Function CrashSight.PaperCrashSightLibrary.ReportException
// 0x0050 (0x0050 - 0x0000)
struct PaperCrashSightLibrary_ReportException final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StackTrace;                                        // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extras;                                            // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          quit;                                              // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         dumpNativeType;                                    // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_ReportException) == 0x000008, "Wrong alignment on PaperCrashSightLibrary_ReportException");
static_assert(sizeof(PaperCrashSightLibrary_ReportException) == 0x000050, "Wrong size on PaperCrashSightLibrary_ReportException");
static_assert(offsetof(PaperCrashSightLibrary_ReportException, Type) == 0x000000, "Member 'PaperCrashSightLibrary_ReportException::Type' has a wrong offset!");
static_assert(offsetof(PaperCrashSightLibrary_ReportException, Name_0) == 0x000008, "Member 'PaperCrashSightLibrary_ReportException::Name_0' has a wrong offset!");
static_assert(offsetof(PaperCrashSightLibrary_ReportException, Reason) == 0x000018, "Member 'PaperCrashSightLibrary_ReportException::Reason' has a wrong offset!");
static_assert(offsetof(PaperCrashSightLibrary_ReportException, StackTrace) == 0x000028, "Member 'PaperCrashSightLibrary_ReportException::StackTrace' has a wrong offset!");
static_assert(offsetof(PaperCrashSightLibrary_ReportException, Extras) == 0x000038, "Member 'PaperCrashSightLibrary_ReportException::Extras' has a wrong offset!");
static_assert(offsetof(PaperCrashSightLibrary_ReportException, quit) == 0x000048, "Member 'PaperCrashSightLibrary_ReportException::quit' has a wrong offset!");
static_assert(offsetof(PaperCrashSightLibrary_ReportException, dumpNativeType) == 0x00004C, "Member 'PaperCrashSightLibrary_ReportException::dumpNativeType' has a wrong offset!");

// Function CrashSight.PaperCrashSightLibrary.ReportLogInfo
// 0x0020 (0x0020 - 0x0000)
struct PaperCrashSightLibrary_ReportLogInfo final
{
public:
	class FString                                 MsgType;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 msg;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_ReportLogInfo) == 0x000008, "Wrong alignment on PaperCrashSightLibrary_ReportLogInfo");
static_assert(sizeof(PaperCrashSightLibrary_ReportLogInfo) == 0x000020, "Wrong size on PaperCrashSightLibrary_ReportLogInfo");
static_assert(offsetof(PaperCrashSightLibrary_ReportLogInfo, MsgType) == 0x000000, "Member 'PaperCrashSightLibrary_ReportLogInfo::MsgType' has a wrong offset!");
static_assert(offsetof(PaperCrashSightLibrary_ReportLogInfo, msg) == 0x000010, "Member 'PaperCrashSightLibrary_ReportLogInfo::msg' has a wrong offset!");

// Function CrashSight.PaperCrashSightLibrary.SetAppVersion
// 0x0010 (0x0010 - 0x0000)
struct PaperCrashSightLibrary_SetAppVersion final
{
public:
	class FString                                 appVersion;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_SetAppVersion) == 0x000008, "Wrong alignment on PaperCrashSightLibrary_SetAppVersion");
static_assert(sizeof(PaperCrashSightLibrary_SetAppVersion) == 0x000010, "Wrong size on PaperCrashSightLibrary_SetAppVersion");
static_assert(offsetof(PaperCrashSightLibrary_SetAppVersion, appVersion) == 0x000000, "Member 'PaperCrashSightLibrary_SetAppVersion::appVersion' has a wrong offset!");

// Function CrashSight.PaperCrashSightLibrary.SetDeviceId
// 0x0010 (0x0010 - 0x0000)
struct PaperCrashSightLibrary_SetDeviceId final
{
public:
	class FString                                 DeviceID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_SetDeviceId) == 0x000008, "Wrong alignment on PaperCrashSightLibrary_SetDeviceId");
static_assert(sizeof(PaperCrashSightLibrary_SetDeviceId) == 0x000010, "Wrong size on PaperCrashSightLibrary_SetDeviceId");
static_assert(offsetof(PaperCrashSightLibrary_SetDeviceId, DeviceID) == 0x000000, "Member 'PaperCrashSightLibrary_SetDeviceId::DeviceID' has a wrong offset!");

// Function CrashSight.PaperCrashSightLibrary.SetLogPath
// 0x0010 (0x0010 - 0x0000)
struct PaperCrashSightLibrary_SetLogPath final
{
public:
	class FString                                 LogPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_SetLogPath) == 0x000008, "Wrong alignment on PaperCrashSightLibrary_SetLogPath");
static_assert(sizeof(PaperCrashSightLibrary_SetLogPath) == 0x000010, "Wrong size on PaperCrashSightLibrary_SetLogPath");
static_assert(offsetof(PaperCrashSightLibrary_SetLogPath, LogPath) == 0x000000, "Member 'PaperCrashSightLibrary_SetLogPath::LogPath' has a wrong offset!");

// Function CrashSight.PaperCrashSightLibrary.SetScene
// 0x0004 (0x0004 - 0x0000)
struct PaperCrashSightLibrary_SetScene final
{
public:
	int32                                         sceneId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_SetScene) == 0x000004, "Wrong alignment on PaperCrashSightLibrary_SetScene");
static_assert(sizeof(PaperCrashSightLibrary_SetScene) == 0x000004, "Wrong size on PaperCrashSightLibrary_SetScene");
static_assert(offsetof(PaperCrashSightLibrary_SetScene, sceneId) == 0x000000, "Member 'PaperCrashSightLibrary_SetScene::sceneId' has a wrong offset!");

// Function CrashSight.PaperCrashSightLibrary.SetUserId
// 0x0010 (0x0010 - 0x0000)
struct PaperCrashSightLibrary_SetUserId final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_SetUserId) == 0x000008, "Wrong alignment on PaperCrashSightLibrary_SetUserId");
static_assert(sizeof(PaperCrashSightLibrary_SetUserId) == 0x000010, "Wrong size on PaperCrashSightLibrary_SetUserId");
static_assert(offsetof(PaperCrashSightLibrary_SetUserId, UserId) == 0x000000, "Member 'PaperCrashSightLibrary_SetUserId::UserId' has a wrong offset!");

// Function CrashSight.PaperCrashSightLibrary.SetUserValue
// 0x0020 (0x0020 - 0x0000)
struct PaperCrashSightLibrary_SetUserValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperCrashSightLibrary_SetUserValue) == 0x000008, "Wrong alignment on PaperCrashSightLibrary_SetUserValue");
static_assert(sizeof(PaperCrashSightLibrary_SetUserValue) == 0x000020, "Wrong size on PaperCrashSightLibrary_SetUserValue");
static_assert(offsetof(PaperCrashSightLibrary_SetUserValue, Key) == 0x000000, "Member 'PaperCrashSightLibrary_SetUserValue::Key' has a wrong offset!");
static_assert(offsetof(PaperCrashSightLibrary_SetUserValue, Value) == 0x000010, "Member 'PaperCrashSightLibrary_SetUserValue::Value' has a wrong offset!");

}

