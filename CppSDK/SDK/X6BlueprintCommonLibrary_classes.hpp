#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6BlueprintCommonLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_InformID_structs.hpp"
#include "ECharacterType_structs.hpp"
#include "E_SafezoneType_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Enum_CenterInfoType_structs.hpp"
#include "MainHUDItem_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass X6BlueprintCommonLibrary.X6BlueprintCommonLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UX6BlueprintCommonLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void X6SpawnNSAttached(class UNiagaraSystem* NSAsset, class USceneComponent* AttachComp, class FName AttachSocket, const struct FVector& Location, const struct FRotator& Rotation, uint8 LocationType, bool bAutoDestroy, bool bAutoActivate, class UObject* __WorldContext, class UNiagaraComponent** FXCom);
	static void X6SpawnNSAtLocation(class UObject* WorldContext, class UNiagaraSystem* NSAsset, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, bool bAutoActivate, class UObject* __WorldContext, class UNiagaraComponent** FXCom);
	static void X6SpawnNSAlongSpline(class UNiagaraSystem* NiagaraAsset, class USplineComponent* Spline, double HeightOffset, class UObject* __WorldContext, TArray<class UNiagaraComponent*>* NiagaraComps);
	static void X6PushBackCharacter(class ACharacter* TargetCharacter, class AActor* Actor, double ForceXY, double ForceZ, class UObject* __WorldContext);
	static void X6HideActors(TArray<class AActor*>& Actor, bool Hide, class UObject* __WorldContext);
	static void X6HideActor(class AActor* Actor, bool Hide, class UObject* __WorldContext);
	static void WidgetsCustomNavigation(TArray<class UWidget*>& Widgets, EUINavigation NavigationDir, bool Wrap, class UObject* __WorldContext, class UWidget** FocusRecipient);
	static int32 UpdateAndClampInteger(int32 Current, int32 Add, int32 Min, int32 Max, class UObject* __WorldContext);
	static class AActor* SpawnActorByActorSoftClassReference(TSoftClassPtr<class UClass> ActorClassRef, const struct FVector& Location, const struct FRotator& Rotation, class UObject* __WorldContext);
	static void SnapToGround(class AActor* Actor, double LineTraceStartZ, double LineTraceEndZ, class UObject* __WorldContext);
	static void RequestSpawnInteractiveActor(class UObject* Context, int32 ConfigID, const struct FTransform& Transform, bool isOnGround, int32 OutputId, class AActor* Parent, class UObject* __WorldContext);
	static void RequestDestroyInteractiveActor(class UObject* Context, class AActor* Actor, class UObject* __WorldContext);
	static void GetSystemStateNotifyMgr(class UObject* __WorldContext, class ABP_SystemStateNotifyManager_C** SystemStateNotifyMgr);
	static void GetPetCharacter(class UObject* __WorldContext, class ACharacter** Character);
	static void GetNearestActorOfClass(class UClass* Class_0, double Radius, class UObject* __WorldContext, class AActor** NewParam);
	static void GetDistanceToActor(class AActor* Actor1, class AActor* Actor2, class UObject* __WorldContext, double* Distance);
	static void GetDistanceFromPointToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal, class UObject* __WorldContext, double* Distance);
	static void GetAssetsInFolderByClassType(const class FString& FolderName, bool bRecursive, class UClass* assetClassType, class UObject* __WorldContext, TArray<class UObject*>* Assets);
	static void GetAllNSAssetInFolder(const class FString& FolderName, bool bRecursive, class UObject* __WorldContext, TArray<class UNiagaraSystem*>* Assets);
	static void CreateObjectViaSoftObjectPath(const struct FSoftObjectPath& SoftObjectPath, class UObject* Outer_0, class UObject* __WorldContext, class UObject** CreatedObject);
	static void BPUpdateWaterSurfaceHeightWithSpeed(class AActor* WaterActor, double TotalHeightToUpdate, double SpeedToUpdate, class UObject* __WorldContext);
	static void BPUpdateWaterSurfaceHeightInTime(class AActor* WaterActor, double TotalHeightToUpdate, double TimeDuration, class UObject* __WorldContext);
	static void BPUpdateWaterSurfaceHeight(class AActor* WaterActor, double HeightOffset, class UObject* __WorldContext);
	static void BPUpdateWaterDensity(class AActor* WaterActor, double NewDensity, class UObject* __WorldContext);
	static void BPUpdateFloatingActorDensity(class AActor* FloatingActor, double NewDensity, class UObject* __WorldContext);
	static void BPStopCameraFocusFeature(class UObject* __WorldContext);
	static void BPMessageHUDState(class UObject* __WorldContext);
	static void BPLib_CameraShake(class UClass* shakeAssetClass, class UObject* __WorldContext);
	static void BPIsActorFloatingOnWaterSurface(class AActor* ActorToCheck, class UObject* __WorldContext, bool* FloatingOnWaterSurface);
	static double BPGetValueFromCurveByDeltaSeconds(class UCurveFloat* FCurve, double DeltaSeconds, class UObject* __WorldContext);
	static void BPGetNearestActorFromActor(class UClass* Class_0, double Radius, class AActor* CenterActor, class UObject* __WorldContext, class AActor** ReturnActor);
	static void BPForceActorEnterWater(class AActor* ActorToEnterWater, class AActor* WaterActor, class UObject* __WorldContext);
	static void BPEnableActorSimulateBuoyancy(class AActor* FloatingActor, bool EnableSimulate, class UObject* __WorldContext);
	static void BP_UpdateUITips(int32 LevelID, int32 GameStage, class UObject* __WorldContext);
	static void BP_UnTrackMarker(class UBP_Marker_C* Marker, class UObject* __WorldContext);
	static void BP_TrackMarker(class UBP_Marker_C* Marker, class UObject* __WorldContext);
	static void BP_SyncNikkiPlayerPos(const struct FVector& Pos, const struct FRotator& Rot, class UObject* Context, class UObject* __WorldContext);
	static void BP_ShowDressmain(class UObject* __WorldContext);
	static void BP_SetRotationWithAnimation(const struct FRotator& NewRotation, class UAnimSequence* PlayAnimation, class UObject* __WorldContext);
	static void BP_SetNiagaraActorTags(class USceneComponent* NiagaraComp, class AActor* OwnerActor, class UObject* __WorldContext);
	static void BP_SetMainHUDItemVisibility(EMainHUDItem HUDItem, int32 Visibility, class UObject* __WorldContext);
	static void BP_SetLevelProcess(int32 LevelProcess, class UObject* __WorldContext);
	static void BP_SetLevelPass(class UObject* __WorldContext);
	static void BP_SetLevelChallengeSuccess(class UObject* __WorldContext);
	static void BP_SetActorTickEnabled(class AActor* Actor, bool bEnabled, const class FString& Tag, class UObject* __WorldContext);
	static void BP_SetActorHiddenInGame(class AActor* Actor, bool bNewHidden, const class FString& Tag, class UObject* __WorldContext);
	static void BP_SetActorFrozen(class AActor* Actor, bool bFreeze, const class FString& Tag, class UObject* __WorldContext);
	static void BP_SetActorEnableGravity(class AActor* Actor, bool bEnableGravity, const class FString& Tag, class UObject* __WorldContext);
	static void BP_SetActorEnableCollision(class AActor* Actor, bool bEnableCollision, const class FString& Tag, class UObject* __WorldContext);
	static void BP_RequestEnterBattle(int32 LevelID, class UObject* __WorldContext);
	static void BP_RequestConsumeOutput(class UObject* Context, int32 OutputId, class UObject* __WorldContext);
	static void BP_RequestBackToWorld(const struct FVector& PlayerLocation, const struct FRotator& PlayerRotation, class UObject* __WorldContext);
	static void BP_RemoveMarker(class UBP_Marker_C* Marker, class UObject* __WorldContext);
	static void BP_RemoveCacheActor(int32 cachePoolId, class UObject* __WorldContext);
	static void BP_PlayVideo(const class FString& StrVedioPath, class UObject* Contxt, class UObject* __WorldContext);
	static void BP_PlayLevelSeqAtCustomizeTransfrom(class ALevelSequenceActor* LevelSeqToPlay, const struct FTransform& CustomizeTransform, const struct FVector& BaseLocationForLevelSeq, class UObject* __WorldContext);
	static void BP_NotifyLogicFadeInFinish(class UUserWidget* Widget, class UObject* __WorldContext);
	static void BP_Multi_InteractiveObjActive(class AActor* Actor, const class FString& Data, class UObject* __WorldContext);
	static void BP_IsLightOnTime(class UObject* __WorldContext, bool* bIsLightOnTime);
	static void BP_GetWorldIDFromLevelData(class UObject* __WorldContext, int32* worldId);
	static void BP_GetSoloLevelManager(class UObject* __WorldContext, class UBP_PaperSoloLevelManager_C** SoloLevelManager);
	static void BP_GetLevePass(class UObject* __WorldContext, bool* bLevelPass);
	static void BP_GetLevelProcess(class UObject* __WorldContext, int32* LevelProcess);
	static void BP_GetLevelChallengeSuccess(class UObject* __WorldContext, bool* bLevelChallengeSuccess);
	static void BP_GetLevelChallengeID(class UObject* __WorldContext, int32* LevelProcess);
	static void BP_GetItemCountById(int32 ID, class UObject* __WorldContext, int32* Num);
	static void BP_GetIsDayTime(class UObject* __WorldContext, bool* bIsDayTime);
	static void BP_GetGlobalFXManager(class UObject* __WorldContext, class ABP_PaperFXManager_C** FXManager);
	static void BP_GetGameTime(class UObject* __WorldContext, double* Hour, double* Min);
	static void BP_GetCharacterType(class AActor* Actor, class UObject* __WorldContext, ECharacterType* Type);
	static void BP_GetCharacterTag(class AActor* Actor, class UObject* __WorldContext, struct FGameplayTag* CharacterTag);
	static void BP_GetCharacterID(class AActor* Actor, class UObject* __WorldContext, int64* ID);
	static void BP_GetBlackScreenManager(class UObject* __WorldContext, class UBP_PaperBlackScreenManager_C** BlackScreenManager);
	static void BP_GetActorSpawnerID(class AActor* Actor, class UObject* __WorldContext, int64* SpawnerID);
	static void BP_GetActorEntityID(class AActor* Actor, class UObject* __WorldContext, int64* EntityID);
	static void BP_DestroySafezoneVolume(int32 SafezoneHandle, class UObject* __WorldContext);
	static void BP_DeleteNPCHeadMarker(class UBP_Marker_C* Marker, class UObject* __WorldContext);
	static void BP_CreateSafezoneVolume(TArray<class AActor*>& actors_whitelist, const struct FVector& Postion, double Range, E_SafezoneType safezone_type, class UObject* __WorldContext, int32* Handle);
	static void BP_CheckWoolenHeartObtianedbySpawnerID(int64 SpawnerID, class UObject* __WorldContext, bool* bObtained);
	static void BP_CenterInfoPushTips(Enum_CenterInfoType InfoType, const class FString& MainTitle, const class FString& ExtraTitle, const class FString& MainContent, const class FString& ExtraContent, class UObject* __WorldContext);
	static void BP_CenterInfoPushStaticInform(Enum_InformID InformID, class UObject* __WorldContext);
	static void BP_AddNPCHeadMarker(const class FString& markerCfgId, class AActor* NPC, class UObject* __WorldContext, class UBP_Marker_C** Marker);
	static void BP_AddMarkerforCurrentWorldActor(const class FString& markerCfgId, class AActor* Actor, bool isMannualTrack, class UObject* __WorldContext, class UBP_Marker_C** Marker);
	static void BP_AddMarkerForActor(const class FString& markerCfgId, class AActor* Actor, int32 worldId, bool isMannualTrack, class UObject* __WorldContext, class UBP_Marker_C** Marker);
	static void BP_AddCacheActor(class AActor* Actor, class UObject* __WorldContext, int32* cachePoolId);
	static void ApplyComponentPosToActor(class AActor* Actor, class USceneComponent* RefSceneComponent, class UObject* __WorldContext);

	void BP_UpdateRidderItem(int32 ItemId, bool Add, class UObject* __WorldContext);
	void BP_ShowMainUI(int32 MainModeID, int32 SubModeID, class UObject* __WorldContext);
	void BP_ShowMainHud(bool Show, class UObject* __WorldContext);
	void BP_ShowHUDLockCamera(bool toShow, class UObject* __WorldContext);
	void BP_ShowBlurScreen(bool Show, int32 BlurStrength, class UObject* __WorldContext);
	void BP_SetCurrentGamePlayMode(int32 MainModeID, int32 SubModeID, class UObject* __WorldContext);
	void BP_RequestLoadStreamingLevel(int32 LevelID, const class FString& LevelPath, const struct FVector& levelLocation, const struct FVector& PlayerLocation, const struct FRotator& PlayerRotation, class UObject* __WorldContext);
	void BP_GetIsConnected(class UObject* __WorldContext, bool* IsConnected);
	void BP_GetCurrentClientTime(class UObject* __WorldContext, TArray<int32>* CurrentTime);
	void BP_GetActorID(class AActor* Actor, class UObject* __WorldContext, int64* ID);
	void BP_DestroyItemByNetID(int64 NetID, class UObject* __WorldContext);
	void BP_CloseMainUI(int32 MainModeID, int32 SubModeID, class UObject* __WorldContext);
	void BP_AutoPickUpThrowableItem(class AX6Actor* NewThrowableItem, class UObject* __WorldContext);
	void BP_Auto_Put_Down_Throwable_Item(class UObject* __WorldContext);

	void ModifySourceSocketOnMesh(class USkeletalMeshComponent* mesh, class FName SourceSocket, class UObject* __WorldContext) const;
	void GetMainSkeletalMesh(class AActor* Actor, class FName MeshTag, class UObject* __WorldContext, class USkeletalMeshComponent** mesh) const;
	void BP_CreatePreviewMesh(class AActor* Actor, class USkeletalMesh* PreviewMesh, class FName MeshTag, class FName TargetSocket, class FName SourceSocket, class UObject* __WorldContext, class USkeletalMeshComponent** MeshComp) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"X6BlueprintCommonLibrary_C">();
	}
	static class UX6BlueprintCommonLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6BlueprintCommonLibrary_C>();
	}
};
static_assert(alignof(UX6BlueprintCommonLibrary_C) == 0x000008, "Wrong alignment on UX6BlueprintCommonLibrary_C");
static_assert(sizeof(UX6BlueprintCommonLibrary_C) == 0x000028, "Wrong size on UX6BlueprintCommonLibrary_C");

}

