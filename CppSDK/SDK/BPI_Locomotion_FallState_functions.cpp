#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Locomotion_FallState

#include "Basic.hpp"

#include "BPI_Locomotion_FallState_classes.hpp"
#include "BPI_Locomotion_FallState_parameters.hpp"


namespace SDK
{

// Function BPI_Locomotion_FallState.BPI_Locomotion_FallState_C.BPI_Get_CurrentInAirStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularFloatingJumpStage*              FallStage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsInSpecialJumpAnim                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERegularJumpMode*                       RegularJumpMode                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsJumpingInAir                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Locomotion_FallState_C::BPI_Get_CurrentInAirStates(ERegularFloatingJumpStage* FallStage, bool* IsInSpecialJumpAnim, ERegularJumpMode* RegularJumpMode, bool* IsJumpingInAir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Locomotion_FallState_C", "BPI_Get_CurrentInAirStates");

	Params::BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FallStage != nullptr)
		*FallStage = Parms.FallStage;

	if (IsInSpecialJumpAnim != nullptr)
		*IsInSpecialJumpAnim = Parms.IsInSpecialJumpAnim;

	if (RegularJumpMode != nullptr)
		*RegularJumpMode = Parms.RegularJumpMode;

	if (IsJumpingInAir != nullptr)
		*IsJumpingInAir = Parms.IsJumpingInAir;
}


// Function BPI_Locomotion_FallState.BPI_Locomotion_FallState_C.BPI_Get_CurrentInAirValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 InCurrentHeight                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimaryDataAsset**               SpecialJumpDA                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Locomotion_FallState_C::BPI_Get_CurrentInAirValues(double* InCurrentHeight, class UPrimaryDataAsset** SpecialJumpDA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Locomotion_FallState_C", "BPI_Get_CurrentInAirValues");

	Params::BPI_Locomotion_FallState_C_BPI_Get_CurrentInAirValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InCurrentHeight != nullptr)
		*InCurrentHeight = Parms.InCurrentHeight;

	if (SpecialJumpDA != nullptr)
		*SpecialJumpDA = Parms.SpecialJumpDA;
}


// Function BPI_Locomotion_FallState.BPI_Locomotion_FallState_C.BPI_Get_EssentialValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         InVelocity                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         InCurrentAcceleration                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InMaxAcceleration                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InTurnAroundAngle                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Locomotion_FallState_C::BPI_Get_EssentialValues(struct FVector* InVelocity, struct FVector* InCurrentAcceleration, double* InMaxAcceleration, double* InTurnAroundAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Locomotion_FallState_C", "BPI_Get_EssentialValues");

	Params::BPI_Locomotion_FallState_C_BPI_Get_EssentialValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InVelocity != nullptr)
		*InVelocity = std::move(Parms.InVelocity);

	if (InCurrentAcceleration != nullptr)
		*InCurrentAcceleration = std::move(Parms.InCurrentAcceleration);

	if (InMaxAcceleration != nullptr)
		*InMaxAcceleration = Parms.InMaxAcceleration;

	if (InTurnAroundAngle != nullptr)
		*InTurnAroundAngle = Parms.InTurnAroundAngle;
}


// Function BPI_Locomotion_FallState.BPI_Locomotion_FallState_C.BPI_Get_MaxSpeedValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 CurMinAnalogWalkSpeed                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CurConfigMaxSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CurActualMaxSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Locomotion_FallState_C::BPI_Get_MaxSpeedValues(double* CurMinAnalogWalkSpeed, double* CurConfigMaxSpeed, double* CurActualMaxSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Locomotion_FallState_C", "BPI_Get_MaxSpeedValues");

	Params::BPI_Locomotion_FallState_C_BPI_Get_MaxSpeedValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurMinAnalogWalkSpeed != nullptr)
		*CurMinAnalogWalkSpeed = Parms.CurMinAnalogWalkSpeed;

	if (CurConfigMaxSpeed != nullptr)
		*CurConfigMaxSpeed = Parms.CurConfigMaxSpeed;

	if (CurActualMaxSpeed != nullptr)
		*CurActualMaxSpeed = Parms.CurActualMaxSpeed;
}


// Function BPI_Locomotion_FallState.BPI_Locomotion_FallState_C.UpdateFallState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERegularFloatingJumpStage               FallStage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSlide                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Locomotion_FallState_C::UpdateFallState(ERegularFloatingJumpStage FallStage, bool IsSlide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Locomotion_FallState_C", "UpdateFallState");

	Params::BPI_Locomotion_FallState_C_UpdateFallState Parms{};

	Parms.FallStage = FallStage;
	Parms.IsSlide = IsSlide;

	UObject::ProcessEvent(Func, &Parms);
}

}

