#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TT_TargetingSelectionAOEIncludeRotation

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "X6Game_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TT_TargetingSelectionAOEIncludeRotation.TT_TargetingSelectionAOEIncludeRotation_C
// 0x0030 (0x0118 - 0x00E8)
class UTT_TargetingSelectionAOEIncludeRotation_C final : public UX6TargetingSelectionTask_AOE
{
public:
	bool                                          bIsAbsolutePlane;                                  // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DefaultRotationOffset;                             // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bUseSocketRotation;                                // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DefaultYawRotationOffset;                          // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BP_GetSourceMeshComp(const struct FTargetingRequestHandle& TargetingHandle, class UMeshComponent** MeshComp) const;
	class FString GetModuleName() const;
	struct FQuat GetOffsetRotationInEditor(const class AActor* Actor) const;
	struct FVector GetSourceLocation(const struct FTargetingRequestHandle& TargetingHandle) const;
	struct FVector GetSourceLocationFromMesh(const struct FTargetingRequestHandle& TargetingHandle, class UMeshComponent* MeshComp) const;
	struct FVector GetSourceOffset(const struct FTargetingRequestHandle& TargetingHandle) const;
	struct FVector GetSourceOffsetLocationFromMesh(const struct FTargetingRequestHandle& TargetingHandle, class UMeshComponent* MeshComp) const;
	struct FQuat GetSourceRotation(const struct FTargetingRequestHandle& TargetingHandle) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TT_TargetingSelectionAOEIncludeRotation_C">();
	}
	static class UTT_TargetingSelectionAOEIncludeRotation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTT_TargetingSelectionAOEIncludeRotation_C>();
	}
};
static_assert(alignof(UTT_TargetingSelectionAOEIncludeRotation_C) == 0x000008, "Wrong alignment on UTT_TargetingSelectionAOEIncludeRotation_C");
static_assert(sizeof(UTT_TargetingSelectionAOEIncludeRotation_C) == 0x000118, "Wrong size on UTT_TargetingSelectionAOEIncludeRotation_C");
static_assert(offsetof(UTT_TargetingSelectionAOEIncludeRotation_C, bIsAbsolutePlane) == 0x0000E8, "Member 'UTT_TargetingSelectionAOEIncludeRotation_C::bIsAbsolutePlane' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionAOEIncludeRotation_C, DefaultRotationOffset) == 0x0000F0, "Member 'UTT_TargetingSelectionAOEIncludeRotation_C::DefaultRotationOffset' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionAOEIncludeRotation_C, bUseSocketRotation) == 0x000108, "Member 'UTT_TargetingSelectionAOEIncludeRotation_C::bUseSocketRotation' has a wrong offset!");
static_assert(offsetof(UTT_TargetingSelectionAOEIncludeRotation_C, DefaultYawRotationOffset) == 0x000110, "Member 'UTT_TargetingSelectionAOEIncludeRotation_C::DefaultYawRotationOffset' has a wrong offset!");

}

