#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BMPFont

#include "Basic.hpp"

#include "BMPFont_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class BMPFont.UIBMPFontText
// 0x00C8 (0x0278 - 0x01B0)
class UUIBMPFontText final : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x01B0(0x0010)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x01D0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ColorAndOpacityDelegate;                           // 0x01E4(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBMPFontInfo                      Font;                                              // 0x01F8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredWidth;                                   // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrapWithInvalidationPanel;                        // 0x025C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimpleTextMode;                                   // 0x025D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25E[0x2];                                      // 0x025E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CharacterGap;                                      // 0x0260(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CharacterScale;                                    // 0x0264(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_268[0x10];                                     // 0x0268(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* GetDynamicFontMaterial();
	void SetAutoWrapText(bool InAutoTextWrap);
	void SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
	void SetFont(const struct FSlateBMPFontInfo& InFontInfo);
	void SetMinDesiredWidth(float InMinDesiredWidth);
	void SetOpacity(float InOpacity);
	void SetText(const class FText& InText);

	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIBMPFontText">();
	}
	static class UUIBMPFontText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIBMPFontText>();
	}
};
static_assert(alignof(UUIBMPFontText) == 0x000008, "Wrong alignment on UUIBMPFontText");
static_assert(sizeof(UUIBMPFontText) == 0x000278, "Wrong size on UUIBMPFontText");
static_assert(offsetof(UUIBMPFontText, Text) == 0x0001B0, "Member 'UUIBMPFontText::Text' has a wrong offset!");
static_assert(offsetof(UUIBMPFontText, TextDelegate) == 0x0001C0, "Member 'UUIBMPFontText::TextDelegate' has a wrong offset!");
static_assert(offsetof(UUIBMPFontText, ColorAndOpacity) == 0x0001D0, "Member 'UUIBMPFontText::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UUIBMPFontText, ColorAndOpacityDelegate) == 0x0001E4, "Member 'UUIBMPFontText::ColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UUIBMPFontText, Font) == 0x0001F8, "Member 'UUIBMPFontText::Font' has a wrong offset!");
static_assert(offsetof(UUIBMPFontText, MinDesiredWidth) == 0x000258, "Member 'UUIBMPFontText::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(UUIBMPFontText, bWrapWithInvalidationPanel) == 0x00025C, "Member 'UUIBMPFontText::bWrapWithInvalidationPanel' has a wrong offset!");
static_assert(offsetof(UUIBMPFontText, bSimpleTextMode) == 0x00025D, "Member 'UUIBMPFontText::bSimpleTextMode' has a wrong offset!");
static_assert(offsetof(UUIBMPFontText, CharacterGap) == 0x000260, "Member 'UUIBMPFontText::CharacterGap' has a wrong offset!");
static_assert(offsetof(UUIBMPFontText, CharacterScale) == 0x000264, "Member 'UUIBMPFontText::CharacterScale' has a wrong offset!");

}

