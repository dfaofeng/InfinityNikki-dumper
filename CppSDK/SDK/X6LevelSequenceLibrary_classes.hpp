#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: X6LevelSequenceLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ELSTimePeriodType_structs.hpp"
#include "EPlatformType_structs.hpp"
#include "X6Game_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass X6LevelSequenceLibrary.X6LevelSequenceLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UX6LevelSequenceLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void UpdateActorCondition(const class FString& ActorName, bool CurrentCondition, const class FString& Tag, class UObject* __WorldContext, bool* Result);
	static void UnregisterActorCondition(const class FString& ActorName, const class FString& Tag, class UObject* __WorldContext);
	static void ShowGameLogo(bool IsVisible, class UObject* __WorldContext);
	static void SetBP_EnableEmotionPerformance(class AActor* SetActor, bool Value, class UObject* __WorldContext);
	static void ResimulationNikkiPhysAndChaos(class USkeletalMeshComponent* Target, class UObject* __WorldContext);
	static void RegisterActorCondition(const class FString& ActorName, const class FString& Tag, class UObject* __WorldContext);
	static void PlayFeatureSequenceWithParams(class ULevelSequence* SequenceAsset, const struct FFeatureSequenceParams& Params_0, class UObject* __WorldContext, class ALevelSequenceActor** SequenceActor, class ULevelSequencePlayer** SequencePlayer);
	static void PlayFeatureSequence_V2(class ULevelSequence* SequenceAsset, bool HideHUD, const struct FTransform& Transform, const struct FMovieSceneSequencePlaybackSettings& PlaybackSetting, class UObject* __WorldContext, class ALevelSequenceActor** SequenceActor, class ULevelSequencePlayer** SequencePlayer);
	static void PlayFeatureSequence(class ULevelSequence* SequenceAsset, bool HideHUD, class AActor* TransformActor, const struct FMovieSceneSequencePlaybackSettings& PlaybackSetting, class UObject* __WorldContext, class ALevelSequenceActor** SequenceActor, class ULevelSequencePlayer** SequencePlayer);
	static void PlayCutscene(TSoftObjectPtr<class ULevelSequence> LS, bool bResetCamera, class AActor* Target, bool bUseSafezone, class UObject* __WorldContext);
	static void NotifySpecialCutEnd(class UObject* __WorldContext);
	static void MoveActorToLocation(class AActor* Actor, const struct FVector& Location, ERegularLocomotionType LocomotionType, class UObject* __WorldContext);
	static void LSSyncGameplayNikkiTransform(class AActor* InSourceActor, class UObject* __WorldContext);
	static void LSSyncGameplayCameraTransform(class AActor* InSourceCamera, class UObject* __WorldContext);
	static void IsPreviewInEditor(class UObject* __WorldContext, bool* Result);
	static void HiddenActorInLight(class AActor* InActor, bool FinalCondition, class UObject* __WorldContext);
	static void GetLevelOriginTransform(class UObject* __WorldContext, struct FTransform* OriginTransform);
	static void GetCurrentTimePeriod(class UObject* __WorldContext, TArray<ELSTimePeriodType>* TimePeriodArray);
	static void GetCurrentPlatform(class UObject* __WorldContext, TArray<EPlatformType>* PlatformType);
	static void BP_ForceReadyToPlayLS(bool CinematicMode, bool HidePlayer, bool bHideDaMiao, bool HideHUD, bool DisableMovement, bool DisableCamera, bool AddPlayerEnterSequenceState, class UObject* __WorldContext);
	static void AddBindingByCastTag(class ALevelSequenceActor* LevelSequenceActor, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"X6LevelSequenceLibrary_C">();
	}
	static class UX6LevelSequenceLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UX6LevelSequenceLibrary_C>();
	}
};
static_assert(alignof(UX6LevelSequenceLibrary_C) == 0x000008, "Wrong alignment on UX6LevelSequenceLibrary_C");
static_assert(sizeof(UX6LevelSequenceLibrary_C) == 0x000028, "Wrong size on UX6LevelSequenceLibrary_C");

}

