#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerMoveableComponent

#include "Basic.hpp"

#include "EInputDeviceKeyType_structs.hpp"
#include "Engine_structs.hpp"
#include "EPlayerGamePlayMovementMode_structs.hpp"
#include "EPlayerMovementScenarios_structs.hpp"
#include "X6Game_structs.hpp"
#include "X6Game_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerMoveableComponent.BP_PlayerMoveableComponent_C
// 0x00A8 (0x0210 - 0x0168)
class UBP_PlayerMoveableComponent_C final : public UX6BasicMoveableComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0168(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<EPlayerMovementScenarios>              BP_cfgAvaliableMovementModes;                      // 0x0170(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UBP_MovementAllConfigTemplate_C> BP_PlayerDefaultMovementConfig;            // 0x0180(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TMap<EX6InputDeviceKeyType, TSoftObjectPtr<class UBP_MovementAllConfigTemplate_C>> BP_PlayerMovementConfigByDevice; // 0x01A8(0x0050)(Edit, BlueprintVisible)
	TMulticastInlineDelegate<void(EPlayerGamePlayMovementMode OldMode, EPlayerGamePlayMovementMode NewMode)> Event_GamePlayMovementModeChanged; // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BP_bDebugEnableVisualizeLocomotionInputData;       // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void BP_DebugVisualizeLocomotionInputData(double DeltaSeconds);
	void BP_GetCurInputContext(struct FRMInputContext* BP_CurRMInputContext);
	void BP_GetCurrentActiveMovementMode(EPlayerGamePlayMovementMode* Ret);
	void BP_OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void BP_OnX6CharacterPossessed(class AController* NewController);
	void BP_OnX6CharacterUnPossessed(class AController* PreviousController);
	void BP_Public_SwitchNikkiGamePlayMovementMode(EPlayerGamePlayMovementMode NewGamePlayMovementMode);
	void BPI_Get_BalanceBeamStates(bool* CanMoveOnValidInput, bool* IsEnterTowardSideOfBeam, bool* IsCurInputValid);
	void BPI_Get_ConfigData(double* WalkSpeed, double* RunSpeed, double* SprintSpeed);
	void BPI_Get_CurrentGroundStates(EMovementMode* PawnMovementMode, ERegularLocomotionType* AllowedGait, EPlayerMovementScenarios* MovementScenario, EInputDeviceKeyType* CurInputDeviceKeyType);
	void BPI_Get_EssentialValues(struct FVector* InVelocity, struct FVector* InCurrentAcceleration, double* InMaxAcceleration, double* InTurnAroundAngle, double* InSlopeAngle, double* InStartTurnAroundAngle, double* InCurConfigMaxSpeed);
	void BPI_Get_MaxSpeedValues(double* CurMinAnalogWalkSpeed, double* CurConfigMaxSpeed, double* CurActualMaxSpeed);
	void BPI_Get_PlayerStates(bool* IsInState_AimMode);
	void BPI_OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void BPI_OnMovementModeDisabled();
	void BPI_OnMovementModeEnabled();
	void BPI_OnRotateCameraInput(const struct FVector& InputVector, EInputDeviceKeyType DeviceType);
	void BPI_OnSelfControlledByPlayer(class APawn* PlayerPawn);
	void BPI_OnSelfLoseControlledByPlayer();
	void BPI_SetPlayerToControlActor(class AActor* ActorToControl, bool* Controlled);
	void ExecuteUbergraph_BP_PlayerMoveableComponent(int32 EntryPoint);
	void InputAction_Crash(bool PressedOrRelease);
	void InputAction_Jump(bool PressedOrRelease);
	void InputAction_Sprint(bool PressedOrRelease);
	void InputAction_Walk(bool PressOrRelease);
	void OnMovementMoveXAxisAction(double AxisValue);
	void OnMovementMoveYAxisAction(double AxisValue);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerMoveableComponent_C">();
	}
	static class UBP_PlayerMoveableComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_PlayerMoveableComponent_C>();
	}
};
static_assert(alignof(UBP_PlayerMoveableComponent_C) == 0x000008, "Wrong alignment on UBP_PlayerMoveableComponent_C");
static_assert(sizeof(UBP_PlayerMoveableComponent_C) == 0x000210, "Wrong size on UBP_PlayerMoveableComponent_C");
static_assert(offsetof(UBP_PlayerMoveableComponent_C, UberGraphFrame) == 0x000168, "Member 'UBP_PlayerMoveableComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMoveableComponent_C, BP_cfgAvaliableMovementModes) == 0x000170, "Member 'UBP_PlayerMoveableComponent_C::BP_cfgAvaliableMovementModes' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMoveableComponent_C, BP_PlayerDefaultMovementConfig) == 0x000180, "Member 'UBP_PlayerMoveableComponent_C::BP_PlayerDefaultMovementConfig' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMoveableComponent_C, BP_PlayerMovementConfigByDevice) == 0x0001A8, "Member 'UBP_PlayerMoveableComponent_C::BP_PlayerMovementConfigByDevice' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMoveableComponent_C, Event_GamePlayMovementModeChanged) == 0x0001F8, "Member 'UBP_PlayerMoveableComponent_C::Event_GamePlayMovementModeChanged' has a wrong offset!");
static_assert(offsetof(UBP_PlayerMoveableComponent_C, BP_bDebugEnableVisualizeLocomotionInputData) == 0x000208, "Member 'UBP_PlayerMoveableComponent_C::BP_bDebugEnableVisualizeLocomotionInputData' has a wrong offset!");

}

