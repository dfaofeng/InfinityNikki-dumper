#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataRegistry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DataRegistry_structs.hpp"


namespace SDK::Params
{

// Function DataRegistry.DataRegistryFunctionLibrary.GetDataRegistryRowByColumnKey
// 0x0030 (0x0030 - 0x0000)
struct DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey final
{
public:
	const class UDataRegistry*                    Registry;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ColumnName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTableRowBase                          OutRow;                                            // 0x0020(0x0008)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bCheckVersion;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey) == 0x000008, "Wrong alignment on DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey");
static_assert(sizeof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey) == 0x000030, "Wrong size on DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey, Registry) == 0x000000, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey::Registry' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey, ColumnName) == 0x000008, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey::ColumnName' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey, Key) == 0x000010, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey::Key' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey, OutRow) == 0x000020, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey::OutRow' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey, bCheckVersion) == 0x000028, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey::bCheckVersion' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey, ReturnValue) == 0x000029, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKey::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistryFunctionLibrary.GetDataRegistryRowByColumnKeys
// 0x0068 (0x0068 - 0x0000)
struct DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys final
{
public:
	const class UDataRegistry*                    Registry;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              ColumnsAndKeyMap;                                  // 0x0008(0x0050)(Parm, NativeAccessSpecifierPublic)
	struct FTableRowBase                          OutRow;                                            // 0x0058(0x0008)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bCheckVersion;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys) == 0x000008, "Wrong alignment on DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys");
static_assert(sizeof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys) == 0x000068, "Wrong size on DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys, Registry) == 0x000000, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys::Registry' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys, ColumnsAndKeyMap) == 0x000008, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys::ColumnsAndKeyMap' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys, OutRow) == 0x000058, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys::OutRow' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys, bCheckVersion) == 0x000060, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys::bCheckVersion' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys, ReturnValue) == 0x000061, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowByColumnKeys::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistryFunctionLibrary.GetDataRegistryRowFromName
// 0x0020 (0x0020 - 0x0000)
struct DataRegistryFunctionLibrary_GetDataRegistryRowFromName final
{
public:
	const class UDataRegistry*                    Registry;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTableRowBase                          OutRow;                                            // 0x0010(0x0008)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bCheckVersion;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistryFunctionLibrary_GetDataRegistryRowFromName) == 0x000008, "Wrong alignment on DataRegistryFunctionLibrary_GetDataRegistryRowFromName");
static_assert(sizeof(DataRegistryFunctionLibrary_GetDataRegistryRowFromName) == 0x000020, "Wrong size on DataRegistryFunctionLibrary_GetDataRegistryRowFromName");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowFromName, Registry) == 0x000000, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowFromName::Registry' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowFromName, RowName) == 0x000008, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowFromName::RowName' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowFromName, OutRow) == 0x000010, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowFromName::OutRow' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowFromName, bCheckVersion) == 0x000018, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowFromName::bCheckVersion' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowFromName, ReturnValue) == 0x000019, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowFromName::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistryFunctionLibrary.GetDataRegistryRowMap
// 0x0060 (0x0060 - 0x0000)
struct DataRegistryFunctionLibrary_GetDataRegistryRowMap final
{
public:
	const class UDataRegistry*                    Registry;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTableRowBase>       OutRowMap;                                         // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bCheckVersion;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0059(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistryFunctionLibrary_GetDataRegistryRowMap) == 0x000008, "Wrong alignment on DataRegistryFunctionLibrary_GetDataRegistryRowMap");
static_assert(sizeof(DataRegistryFunctionLibrary_GetDataRegistryRowMap) == 0x000060, "Wrong size on DataRegistryFunctionLibrary_GetDataRegistryRowMap");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowMap, Registry) == 0x000000, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowMap::Registry' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowMap, OutRowMap) == 0x000008, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowMap::OutRowMap' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowMap, bCheckVersion) == 0x000058, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowMap::bCheckVersion' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowMap, ReturnValue) == 0x000059, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowMap::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistryFunctionLibrary.GetDataRegistryRowNames
// 0x0020 (0x0020 - 0x0000)
struct DataRegistryFunctionLibrary_GetDataRegistryRowNames final
{
public:
	const class UDataRegistry*                    Registry;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutRowNames;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCheckVersion;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistryFunctionLibrary_GetDataRegistryRowNames) == 0x000008, "Wrong alignment on DataRegistryFunctionLibrary_GetDataRegistryRowNames");
static_assert(sizeof(DataRegistryFunctionLibrary_GetDataRegistryRowNames) == 0x000020, "Wrong size on DataRegistryFunctionLibrary_GetDataRegistryRowNames");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowNames, Registry) == 0x000000, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowNames::Registry' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowNames, OutRowNames) == 0x000008, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowNames::OutRowNames' has a wrong offset!");
static_assert(offsetof(DataRegistryFunctionLibrary_GetDataRegistryRowNames, bCheckVersion) == 0x000018, "Member 'DataRegistryFunctionLibrary_GetDataRegistryRowNames::bCheckVersion' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.AcquireItemBP
// 0x0024 (0x0024 - 0x0000)
struct DataRegistrySubsystem_AcquireItemBP final
{
public:
	struct FDataRegistryId                        ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FDataRegistryId& ItemId, const struct FDataRegistryLookup& ResolvedLookup, EDataRegistryAcquireStatus Status)> AcquireCallback; // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistrySubsystem_AcquireItemBP) == 0x000004, "Wrong alignment on DataRegistrySubsystem_AcquireItemBP");
static_assert(sizeof(DataRegistrySubsystem_AcquireItemBP) == 0x000024, "Wrong size on DataRegistrySubsystem_AcquireItemBP");
static_assert(offsetof(DataRegistrySubsystem_AcquireItemBP, ItemId) == 0x000000, "Member 'DataRegistrySubsystem_AcquireItemBP::ItemId' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_AcquireItemBP, AcquireCallback) == 0x000010, "Member 'DataRegistrySubsystem_AcquireItemBP::AcquireCallback' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_AcquireItemBP, ReturnValue) == 0x000020, "Member 'DataRegistrySubsystem_AcquireItemBP::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.Conv_DataRegistryIdToString
// 0x0020 (0x0020 - 0x0000)
struct DataRegistrySubsystem_Conv_DataRegistryIdToString final
{
public:
	struct FDataRegistryId                        DataRegistryId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataRegistrySubsystem_Conv_DataRegistryIdToString) == 0x000008, "Wrong alignment on DataRegistrySubsystem_Conv_DataRegistryIdToString");
static_assert(sizeof(DataRegistrySubsystem_Conv_DataRegistryIdToString) == 0x000020, "Wrong size on DataRegistrySubsystem_Conv_DataRegistryIdToString");
static_assert(offsetof(DataRegistrySubsystem_Conv_DataRegistryIdToString, DataRegistryId) == 0x000000, "Member 'DataRegistrySubsystem_Conv_DataRegistryIdToString::DataRegistryId' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_Conv_DataRegistryIdToString, ReturnValue) == 0x000010, "Member 'DataRegistrySubsystem_Conv_DataRegistryIdToString::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.Conv_DataRegistryTypeToString
// 0x0018 (0x0018 - 0x0000)
struct DataRegistrySubsystem_Conv_DataRegistryTypeToString final
{
public:
	struct FDataRegistryType                      DataRegistryType;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataRegistrySubsystem_Conv_DataRegistryTypeToString) == 0x000008, "Wrong alignment on DataRegistrySubsystem_Conv_DataRegistryTypeToString");
static_assert(sizeof(DataRegistrySubsystem_Conv_DataRegistryTypeToString) == 0x000018, "Wrong size on DataRegistrySubsystem_Conv_DataRegistryTypeToString");
static_assert(offsetof(DataRegistrySubsystem_Conv_DataRegistryTypeToString, DataRegistryType) == 0x000000, "Member 'DataRegistrySubsystem_Conv_DataRegistryTypeToString::DataRegistryType' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_Conv_DataRegistryTypeToString, ReturnValue) == 0x000008, "Member 'DataRegistrySubsystem_Conv_DataRegistryTypeToString::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.EqualEqual_DataRegistryId
// 0x0024 (0x0024 - 0x0000)
struct DataRegistrySubsystem_EqualEqual_DataRegistryId final
{
public:
	struct FDataRegistryId                        A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataRegistryId                        B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistrySubsystem_EqualEqual_DataRegistryId) == 0x000004, "Wrong alignment on DataRegistrySubsystem_EqualEqual_DataRegistryId");
static_assert(sizeof(DataRegistrySubsystem_EqualEqual_DataRegistryId) == 0x000024, "Wrong size on DataRegistrySubsystem_EqualEqual_DataRegistryId");
static_assert(offsetof(DataRegistrySubsystem_EqualEqual_DataRegistryId, A) == 0x000000, "Member 'DataRegistrySubsystem_EqualEqual_DataRegistryId::A' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_EqualEqual_DataRegistryId, B) == 0x000010, "Member 'DataRegistrySubsystem_EqualEqual_DataRegistryId::B' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_EqualEqual_DataRegistryId, ReturnValue) == 0x000020, "Member 'DataRegistrySubsystem_EqualEqual_DataRegistryId::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.EqualEqual_DataRegistryType
// 0x0014 (0x0014 - 0x0000)
struct DataRegistrySubsystem_EqualEqual_DataRegistryType final
{
public:
	struct FDataRegistryType                      A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataRegistryType                      B;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistrySubsystem_EqualEqual_DataRegistryType) == 0x000004, "Wrong alignment on DataRegistrySubsystem_EqualEqual_DataRegistryType");
static_assert(sizeof(DataRegistrySubsystem_EqualEqual_DataRegistryType) == 0x000014, "Wrong size on DataRegistrySubsystem_EqualEqual_DataRegistryType");
static_assert(offsetof(DataRegistrySubsystem_EqualEqual_DataRegistryType, A) == 0x000000, "Member 'DataRegistrySubsystem_EqualEqual_DataRegistryType::A' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_EqualEqual_DataRegistryType, B) == 0x000008, "Member 'DataRegistrySubsystem_EqualEqual_DataRegistryType::B' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_EqualEqual_DataRegistryType, ReturnValue) == 0x000010, "Member 'DataRegistrySubsystem_EqualEqual_DataRegistryType::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.EvaluateDataRegistryCurve
// 0x0020 (0x0020 - 0x0000)
struct DataRegistrySubsystem_EvaluateDataRegistryCurve final
{
public:
	struct FDataRegistryId                        ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataRegistrySubsystemGetItemResult           OutResult;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutValue;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataRegistrySubsystem_EvaluateDataRegistryCurve) == 0x000004, "Wrong alignment on DataRegistrySubsystem_EvaluateDataRegistryCurve");
static_assert(sizeof(DataRegistrySubsystem_EvaluateDataRegistryCurve) == 0x000020, "Wrong size on DataRegistrySubsystem_EvaluateDataRegistryCurve");
static_assert(offsetof(DataRegistrySubsystem_EvaluateDataRegistryCurve, ItemId) == 0x000000, "Member 'DataRegistrySubsystem_EvaluateDataRegistryCurve::ItemId' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_EvaluateDataRegistryCurve, InputValue) == 0x000010, "Member 'DataRegistrySubsystem_EvaluateDataRegistryCurve::InputValue' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_EvaluateDataRegistryCurve, DefaultValue) == 0x000014, "Member 'DataRegistrySubsystem_EvaluateDataRegistryCurve::DefaultValue' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_EvaluateDataRegistryCurve, OutResult) == 0x000018, "Member 'DataRegistrySubsystem_EvaluateDataRegistryCurve::OutResult' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_EvaluateDataRegistryCurve, OutValue) == 0x00001C, "Member 'DataRegistrySubsystem_EvaluateDataRegistryCurve::OutValue' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.FindCachedItemBP
// 0x0020 (0x0020 - 0x0000)
struct DataRegistrySubsystem_FindCachedItemBP final
{
public:
	struct FDataRegistryId                        ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataRegistrySubsystemGetItemResult           OutResult;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTableRowBase                          OutItem;                                           // 0x0018(0x0008)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataRegistrySubsystem_FindCachedItemBP) == 0x000008, "Wrong alignment on DataRegistrySubsystem_FindCachedItemBP");
static_assert(sizeof(DataRegistrySubsystem_FindCachedItemBP) == 0x000020, "Wrong size on DataRegistrySubsystem_FindCachedItemBP");
static_assert(offsetof(DataRegistrySubsystem_FindCachedItemBP, ItemId) == 0x000000, "Member 'DataRegistrySubsystem_FindCachedItemBP::ItemId' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_FindCachedItemBP, OutResult) == 0x000010, "Member 'DataRegistrySubsystem_FindCachedItemBP::OutResult' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_FindCachedItemBP, OutItem) == 0x000018, "Member 'DataRegistrySubsystem_FindCachedItemBP::OutItem' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.GetCachedItemBP
// 0x0020 (0x0020 - 0x0000)
struct DataRegistrySubsystem_GetCachedItemBP final
{
public:
	struct FDataRegistryId                        ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTableRowBase                          OutItem;                                           // 0x0010(0x0008)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistrySubsystem_GetCachedItemBP) == 0x000008, "Wrong alignment on DataRegistrySubsystem_GetCachedItemBP");
static_assert(sizeof(DataRegistrySubsystem_GetCachedItemBP) == 0x000020, "Wrong size on DataRegistrySubsystem_GetCachedItemBP");
static_assert(offsetof(DataRegistrySubsystem_GetCachedItemBP, ItemId) == 0x000000, "Member 'DataRegistrySubsystem_GetCachedItemBP::ItemId' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_GetCachedItemBP, OutItem) == 0x000010, "Member 'DataRegistrySubsystem_GetCachedItemBP::OutItem' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_GetCachedItemBP, ReturnValue) == 0x000018, "Member 'DataRegistrySubsystem_GetCachedItemBP::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.GetCachedItemFromLookupBP
// 0x0040 (0x0040 - 0x0000)
struct DataRegistrySubsystem_GetCachedItemFromLookupBP final
{
public:
	struct FDataRegistryId                        ItemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataRegistryLookup                    ResolvedLookup;                                    // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTableRowBase                          OutItem;                                           // 0x0030(0x0008)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistrySubsystem_GetCachedItemFromLookupBP) == 0x000008, "Wrong alignment on DataRegistrySubsystem_GetCachedItemFromLookupBP");
static_assert(sizeof(DataRegistrySubsystem_GetCachedItemFromLookupBP) == 0x000040, "Wrong size on DataRegistrySubsystem_GetCachedItemFromLookupBP");
static_assert(offsetof(DataRegistrySubsystem_GetCachedItemFromLookupBP, ItemId) == 0x000000, "Member 'DataRegistrySubsystem_GetCachedItemFromLookupBP::ItemId' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_GetCachedItemFromLookupBP, ResolvedLookup) == 0x000010, "Member 'DataRegistrySubsystem_GetCachedItemFromLookupBP::ResolvedLookup' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_GetCachedItemFromLookupBP, OutItem) == 0x000030, "Member 'DataRegistrySubsystem_GetCachedItemFromLookupBP::OutItem' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_GetCachedItemFromLookupBP, ReturnValue) == 0x000038, "Member 'DataRegistrySubsystem_GetCachedItemFromLookupBP::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.IsValidDataRegistryId
// 0x0014 (0x0014 - 0x0000)
struct DataRegistrySubsystem_IsValidDataRegistryId final
{
public:
	struct FDataRegistryId                        DataRegistryId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistrySubsystem_IsValidDataRegistryId) == 0x000004, "Wrong alignment on DataRegistrySubsystem_IsValidDataRegistryId");
static_assert(sizeof(DataRegistrySubsystem_IsValidDataRegistryId) == 0x000014, "Wrong size on DataRegistrySubsystem_IsValidDataRegistryId");
static_assert(offsetof(DataRegistrySubsystem_IsValidDataRegistryId, DataRegistryId) == 0x000000, "Member 'DataRegistrySubsystem_IsValidDataRegistryId::DataRegistryId' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_IsValidDataRegistryId, ReturnValue) == 0x000010, "Member 'DataRegistrySubsystem_IsValidDataRegistryId::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.IsValidDataRegistryType
// 0x000C (0x000C - 0x0000)
struct DataRegistrySubsystem_IsValidDataRegistryType final
{
public:
	struct FDataRegistryType                      DataRegistryType;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistrySubsystem_IsValidDataRegistryType) == 0x000004, "Wrong alignment on DataRegistrySubsystem_IsValidDataRegistryType");
static_assert(sizeof(DataRegistrySubsystem_IsValidDataRegistryType) == 0x00000C, "Wrong size on DataRegistrySubsystem_IsValidDataRegistryType");
static_assert(offsetof(DataRegistrySubsystem_IsValidDataRegistryType, DataRegistryType) == 0x000000, "Member 'DataRegistrySubsystem_IsValidDataRegistryType::DataRegistryType' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_IsValidDataRegistryType, ReturnValue) == 0x000008, "Member 'DataRegistrySubsystem_IsValidDataRegistryType::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.NotEqual_DataRegistryId
// 0x0024 (0x0024 - 0x0000)
struct DataRegistrySubsystem_NotEqual_DataRegistryId final
{
public:
	struct FDataRegistryId                        A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataRegistryId                        B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistrySubsystem_NotEqual_DataRegistryId) == 0x000004, "Wrong alignment on DataRegistrySubsystem_NotEqual_DataRegistryId");
static_assert(sizeof(DataRegistrySubsystem_NotEqual_DataRegistryId) == 0x000024, "Wrong size on DataRegistrySubsystem_NotEqual_DataRegistryId");
static_assert(offsetof(DataRegistrySubsystem_NotEqual_DataRegistryId, A) == 0x000000, "Member 'DataRegistrySubsystem_NotEqual_DataRegistryId::A' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_NotEqual_DataRegistryId, B) == 0x000010, "Member 'DataRegistrySubsystem_NotEqual_DataRegistryId::B' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_NotEqual_DataRegistryId, ReturnValue) == 0x000020, "Member 'DataRegistrySubsystem_NotEqual_DataRegistryId::ReturnValue' has a wrong offset!");

// Function DataRegistry.DataRegistrySubsystem.NotEqual_DataRegistryType
// 0x0014 (0x0014 - 0x0000)
struct DataRegistrySubsystem_NotEqual_DataRegistryType final
{
public:
	struct FDataRegistryType                      A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataRegistryType                      B;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataRegistrySubsystem_NotEqual_DataRegistryType) == 0x000004, "Wrong alignment on DataRegistrySubsystem_NotEqual_DataRegistryType");
static_assert(sizeof(DataRegistrySubsystem_NotEqual_DataRegistryType) == 0x000014, "Wrong size on DataRegistrySubsystem_NotEqual_DataRegistryType");
static_assert(offsetof(DataRegistrySubsystem_NotEqual_DataRegistryType, A) == 0x000000, "Member 'DataRegistrySubsystem_NotEqual_DataRegistryType::A' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_NotEqual_DataRegistryType, B) == 0x000008, "Member 'DataRegistrySubsystem_NotEqual_DataRegistryType::B' has a wrong offset!");
static_assert(offsetof(DataRegistrySubsystem_NotEqual_DataRegistryType, ReturnValue) == 0x000010, "Member 'DataRegistrySubsystem_NotEqual_DataRegistryType::ReturnValue' has a wrong offset!");

}

