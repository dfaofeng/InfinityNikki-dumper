#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GuideTriggerVolume

#include "Basic.hpp"

#include "BP_GuideTriggerVolume_classes.hpp"
#include "BP_GuideTriggerVolume_parameters.hpp"


namespace SDK
{

// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.ShowVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanShow                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::ShowVolume(bool CanShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "ShowVolume");

	Params::BP_GuideTriggerVolume_C_ShowVolume Parms{};

	Parms.CanShow = CanShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.SetVolumeID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64                                   VolumeID_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::SetVolumeID(int64 VolumeID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "SetVolumeID");

	Params::BP_GuideTriggerVolume_C_SetVolumeID Parms{};

	Parms.VolumeID_0 = VolumeID_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.SetTransformInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::SetTransformInfo(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "SetTransformInfo");

	Params::BP_GuideTriggerVolume_C_SetTransformInfo Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.SetMeshType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MeshType_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::SetMeshType(int32 MeshType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "SetMeshType");

	Params::BP_GuideTriggerVolume_C_SetMeshType Parms{};

	Parms.MeshType_0 = MeshType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.SetAutoDestroy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsAutoDestroy_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::SetAutoDestroy(bool IsAutoDestroy_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "SetAutoDestroy");

	Params::BP_GuideTriggerVolume_C_SetAutoDestroy Parms{};

	Parms.IsAutoDestroy_0 = IsAutoDestroy_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.ReceiveActorEndOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "ReceiveActorEndOverlap");

	Params::BP_GuideTriggerVolume_C_ReceiveActorEndOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.ReceiveActorBeginOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "ReceiveActorBeginOverlap");

	Params::BP_GuideTriggerVolume_C_ReceiveActorBeginOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.OnOverlapEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::OnOverlapEnd(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "OnOverlapEnd");

	Params::BP_GuideTriggerVolume_C_OnOverlapEnd Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.OnOverlapBegin
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::OnOverlapBegin(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "OnOverlapBegin");

	Params::BP_GuideTriggerVolume_C_OnOverlapBegin Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.GetVolumeID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int64*                                  VolumeID_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::GetVolumeID(int64* VolumeID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "GetVolumeID");

	Params::BP_GuideTriggerVolume_C_GetVolumeID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (VolumeID_0 != nullptr)
		*VolumeID_0 = Parms.VolumeID_0;
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.GetAutoDestroy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsAutoDestroy_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::GetAutoDestroy(bool* IsAutoDestroy_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "GetAutoDestroy");

	Params::BP_GuideTriggerVolume_C_GetAutoDestroy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAutoDestroy_0 != nullptr)
		*IsAutoDestroy_0 = Parms.IsAutoDestroy_0;
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.ExecuteUbergraph_BP_GuideTriggerVolume
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GuideTriggerVolume_C::ExecuteUbergraph_BP_GuideTriggerVolume(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "ExecuteUbergraph_BP_GuideTriggerVolume");

	Params::BP_GuideTriggerVolume_C_ExecuteUbergraph_BP_GuideTriggerVolume Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.EnableOverlap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GuideTriggerVolume_C::EnableOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "EnableOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.DisableOverlap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GuideTriggerVolume_C::DisableOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "DisableOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GuideTriggerVolume.BP_GuideTriggerVolume_C.GetModuleName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString ABP_GuideTriggerVolume_C::GetModuleName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GuideTriggerVolume_C", "GetModuleName");

	Params::BP_GuideTriggerVolume_C_GetModuleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

