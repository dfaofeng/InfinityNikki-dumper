#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BinkMediaPlayer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "BinkMediaPlayer_structs.hpp"


namespace SDK
{

// Class BinkMediaPlayer.BinkFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBinkFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void Bink_DrawOverlays();
	static struct FTimespan BinkLoadingMovie_GetDuration();
	static struct FTimespan BinkLoadingMovie_GetTime();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BinkFunctionLibrary">();
	}
	static class UBinkFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBinkFunctionLibrary>();
	}
};
static_assert(alignof(UBinkFunctionLibrary) == 0x000008, "Wrong alignment on UBinkFunctionLibrary");
static_assert(sizeof(UBinkFunctionLibrary) == 0x000028, "Wrong size on UBinkFunctionLibrary");

// Class BinkMediaPlayer.BinkMediaPlayer
// 0x0130 (0x0158 - 0x0028)
class UBinkMediaPlayer final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnMediaClosed;                                     // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& OpenedUrl)> OnMediaOpened;                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMediaReachedEnd;                                 // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlaybackSuspended;                               // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Looping : 1;                                       // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         StartImmediately : 1;                              // 0x0070(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DelayedOpen : 1;                                   // 0x0070(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseTimeMode : 1;                                   // 0x0070(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        FrameThreshold;                                    // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseAtEnd;                                       // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BinkDestinationUpperLeft;                          // 0x0080(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BinkDestinationLowerRight;                         // 0x0090(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBinkMediaPlayerBinkBufferModes               BinkBufferMode;                                    // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBinkMediaPlayerBinkSoundTrack                BinkSoundTrack;                                    // 0x00B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BinkSoundTrackStart;                               // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBinkMediaPlayerBinkDrawStyle                 BinkDrawStyle;                                     // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BinkLayerDepth;                                    // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StandardAspectRatio;                               // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MinAspectRatio;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxAspectRatio;                                    // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x68];                                      // 0x00F0(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CloseUrl();
	void Draw(class UTexture* Texture, bool tonemap, int32 out_nits, float alpha, bool srgb_decode, bool hdr);
	bool OpenUrl(const class FString& NewURL);
	bool Pause();
	bool Play();
	bool Rewind();
	bool Seek(const struct FTimespan& InTime);
	bool SetLooping(bool InLooping);
	bool SetRate(float Rate);
	void SetVolume(float Rate);
	void Stop();

	bool CanPause() const;
	bool CanPlay() const;
	struct FTimespan GetDuration() const;
	float GetRate() const;
	struct FTimespan GetTime() const;
	class FString GetUrl() const;
	bool IsInitialized() const;
	bool IsLooping() const;
	bool IsPaused() const;
	bool IsPlaying() const;
	bool IsStopped() const;
	bool SupportsRate(float Rate, bool Unthinned) const;
	bool SupportsScrubbing() const;
	bool SupportsSeeking() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BinkMediaPlayer">();
	}
	static class UBinkMediaPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBinkMediaPlayer>();
	}
};
static_assert(alignof(UBinkMediaPlayer) == 0x000008, "Wrong alignment on UBinkMediaPlayer");
static_assert(sizeof(UBinkMediaPlayer) == 0x000158, "Wrong size on UBinkMediaPlayer");
static_assert(offsetof(UBinkMediaPlayer, OnMediaClosed) == 0x000030, "Member 'UBinkMediaPlayer::OnMediaClosed' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, OnMediaOpened) == 0x000040, "Member 'UBinkMediaPlayer::OnMediaOpened' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, OnMediaReachedEnd) == 0x000050, "Member 'UBinkMediaPlayer::OnMediaReachedEnd' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, OnPlaybackSuspended) == 0x000060, "Member 'UBinkMediaPlayer::OnPlaybackSuspended' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, FrameThreshold) == 0x000074, "Member 'UBinkMediaPlayer::FrameThreshold' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, bPauseAtEnd) == 0x000078, "Member 'UBinkMediaPlayer::bPauseAtEnd' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, BinkDestinationUpperLeft) == 0x000080, "Member 'UBinkMediaPlayer::BinkDestinationUpperLeft' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, BinkDestinationLowerRight) == 0x000090, "Member 'UBinkMediaPlayer::BinkDestinationLowerRight' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, URL) == 0x0000A0, "Member 'UBinkMediaPlayer::URL' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, BinkBufferMode) == 0x0000B0, "Member 'UBinkMediaPlayer::BinkBufferMode' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, BinkSoundTrack) == 0x0000B1, "Member 'UBinkMediaPlayer::BinkSoundTrack' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, BinkSoundTrackStart) == 0x0000B4, "Member 'UBinkMediaPlayer::BinkSoundTrackStart' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, BinkDrawStyle) == 0x0000B8, "Member 'UBinkMediaPlayer::BinkDrawStyle' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, BinkLayerDepth) == 0x0000BC, "Member 'UBinkMediaPlayer::BinkLayerDepth' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, StandardAspectRatio) == 0x0000C0, "Member 'UBinkMediaPlayer::StandardAspectRatio' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, MinAspectRatio) == 0x0000D0, "Member 'UBinkMediaPlayer::MinAspectRatio' has a wrong offset!");
static_assert(offsetof(UBinkMediaPlayer, MaxAspectRatio) == 0x0000E0, "Member 'UBinkMediaPlayer::MaxAspectRatio' has a wrong offset!");

// Class BinkMediaPlayer.BinkMediaTexture
// 0x0038 (0x0170 - 0x0138)
class UBinkMediaTexture final : public UTexture
{
public:
	ETextureAddress                               AddressX;                                          // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBinkMediaPlayer*                       MediaPlayer;                                       // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  PixelFormat;                                       // 0x0148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          tonemap;                                           // 0x0149(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x2];                                      // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutputNits;                                        // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DecodeSRGB;                                        // 0x0154(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_155[0x1B];                                     // 0x0155(0x001B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void SetMediaPlayer(class UBinkMediaPlayer* InMediaPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BinkMediaTexture">();
	}
	static class UBinkMediaTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBinkMediaTexture>();
	}
};
static_assert(alignof(UBinkMediaTexture) == 0x000008, "Wrong alignment on UBinkMediaTexture");
static_assert(sizeof(UBinkMediaTexture) == 0x000170, "Wrong size on UBinkMediaTexture");
static_assert(offsetof(UBinkMediaTexture, AddressX) == 0x000138, "Member 'UBinkMediaTexture::AddressX' has a wrong offset!");
static_assert(offsetof(UBinkMediaTexture, AddressY) == 0x000139, "Member 'UBinkMediaTexture::AddressY' has a wrong offset!");
static_assert(offsetof(UBinkMediaTexture, MediaPlayer) == 0x000140, "Member 'UBinkMediaTexture::MediaPlayer' has a wrong offset!");
static_assert(offsetof(UBinkMediaTexture, PixelFormat) == 0x000148, "Member 'UBinkMediaTexture::PixelFormat' has a wrong offset!");
static_assert(offsetof(UBinkMediaTexture, tonemap) == 0x000149, "Member 'UBinkMediaTexture::tonemap' has a wrong offset!");
static_assert(offsetof(UBinkMediaTexture, OutputNits) == 0x00014C, "Member 'UBinkMediaTexture::OutputNits' has a wrong offset!");
static_assert(offsetof(UBinkMediaTexture, alpha) == 0x000150, "Member 'UBinkMediaTexture::alpha' has a wrong offset!");
static_assert(offsetof(UBinkMediaTexture, DecodeSRGB) == 0x000154, "Member 'UBinkMediaTexture::DecodeSRGB' has a wrong offset!");

// Class BinkMediaPlayer.BinkMoviePlayerSettings
// 0x0030 (0x0058 - 0x0028)
class UBinkMoviePlayerSettings final : public UObject
{
public:
	EBinkMoviePlayerBinkBufferModes               BinkBufferMode;                                    // 0x0028(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBinkMoviePlayerBinkSoundTrack                BinkSoundTrack;                                    // 0x0029(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BinkSoundTrackStart;                               // 0x002C(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BinkDestinationUpperLeft;                          // 0x0030(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BinkDestinationLowerRight;                         // 0x0040(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  BinkPixelFormat;                                   // 0x0050(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BinkMoviePlayerSettings">();
	}
	static class UBinkMoviePlayerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBinkMoviePlayerSettings>();
	}
};
static_assert(alignof(UBinkMoviePlayerSettings) == 0x000008, "Wrong alignment on UBinkMoviePlayerSettings");
static_assert(sizeof(UBinkMoviePlayerSettings) == 0x000058, "Wrong size on UBinkMoviePlayerSettings");
static_assert(offsetof(UBinkMoviePlayerSettings, BinkBufferMode) == 0x000028, "Member 'UBinkMoviePlayerSettings::BinkBufferMode' has a wrong offset!");
static_assert(offsetof(UBinkMoviePlayerSettings, BinkSoundTrack) == 0x000029, "Member 'UBinkMoviePlayerSettings::BinkSoundTrack' has a wrong offset!");
static_assert(offsetof(UBinkMoviePlayerSettings, BinkSoundTrackStart) == 0x00002C, "Member 'UBinkMoviePlayerSettings::BinkSoundTrackStart' has a wrong offset!");
static_assert(offsetof(UBinkMoviePlayerSettings, BinkDestinationUpperLeft) == 0x000030, "Member 'UBinkMoviePlayerSettings::BinkDestinationUpperLeft' has a wrong offset!");
static_assert(offsetof(UBinkMoviePlayerSettings, BinkDestinationLowerRight) == 0x000040, "Member 'UBinkMoviePlayerSettings::BinkDestinationLowerRight' has a wrong offset!");
static_assert(offsetof(UBinkMoviePlayerSettings, BinkPixelFormat) == 0x000050, "Member 'UBinkMoviePlayerSettings::BinkPixelFormat' has a wrong offset!");

}

