#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PoseSearch

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BlendStack_structs.hpp"


namespace SDK
{

// Enum PoseSearch.EPoseSearchMode
// NumValues: 0x0004
enum class EPoseSearchMode : uint32
{
	BruteForce                               = 0,
	PCAKDTree                                = 1,
	VPTree                                   = 2,
	EPoseSearchMode_MAX                      = 3,
};

// Enum PoseSearch.EPoseSearchMirrorOption
// NumValues: 0x0004
enum class EPoseSearchMirrorOption : uint8
{
	UnmirroredOnly                           = 0,
	MirroredOnly                             = 1,
	UnmirroredAndMirrored                    = 2,
	EPoseSearchMirrorOption_MAX              = 3,
};

// Enum PoseSearch.EComponentStrippingVector
// NumValues: 0x0004
enum class EComponentStrippingVector : uint8
{
	None                                     = 0,
	StripXY                                  = 1,
	StripZ                                   = 2,
	EComponentStrippingVector_MAX            = 3,
};

// Enum PoseSearch.EInputQueryPose
// NumValues: 0x0003
enum class EInputQueryPose : uint8
{
	UseCharacterPose                         = 0,
	UseContinuingPose                        = 1,
	EInputQueryPose_MAX                      = 2,
};

// Enum PoseSearch.EPermutationTimeType
// NumValues: 0x0004
enum class EPermutationTimeType : uint8
{
	UseSampleTime                            = 0,
	UsePermutationTime                       = 1,
	UseSampleToPermutationTime               = 2,
	EPermutationTimeType_MAX                 = 3,
};

// Enum PoseSearch.EHeadingAxis
// NumValues: 0x0005
enum class EHeadingAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	Num                                      = 3,
	EHeadingAxis_MAX                         = 4,
};

// Enum PoseSearch.EPoseSearchBoneFlags
// NumValues: 0x0005
enum class EPoseSearchBoneFlags : uint8
{
	Velocity                                 = 1,
	Position                                 = 2,
	Rotation                                 = 4,
	Phase                                    = 8,
	EPoseSearchBoneFlags_MAX                 = 9,
};

// Enum PoseSearch.EPoseSearchTrajectoryFlags
// NumValues: 0x0009
enum class EPoseSearchTrajectoryFlags : uint8
{
	Velocity                                 = 1,
	Position                                 = 2,
	VelocityDirection                        = 4,
	FacingDirection                          = 8,
	VelocityXY                               = 16,
	PositionXY                               = 32,
	VelocityDirectionXY                      = 64,
	FacingDirectionXY                        = 128,
	EPoseSearchTrajectoryFlags_MAX           = 129,
};

// Enum PoseSearch.EPoseSearchDataPreprocessor
// NumValues: 0x0005
enum class EPoseSearchDataPreprocessor : uint8
{
	None                                     = 0,
	Normalize                                = 1,
	NormalizeOnlyByDeviation                 = 2,
	NormalizeWithCommonSchema                = 3,
	EPoseSearchDataPreprocessor_MAX          = 4,
};

// Enum PoseSearch.EPoseSearchInterruptMode
// NumValues: 0x0006
enum class EPoseSearchInterruptMode : uint8
{
	DoNotInterrupt                           = 0,
	InterruptOnDatabaseChange                = 1,
	InterruptOnDatabaseChangeAndInvalidateContinuingPose = 2,
	ForceInterrupt                           = 3,
	ForceInterruptAndInvalidateContinuingPose = 4,
	EPoseSearchInterruptMode_MAX             = 5,
};

// ScriptStruct PoseSearch.MotionMatchingAnimNodeReference
// 0x0000 (0x0010 - 0x0010)
struct FMotionMatchingAnimNodeReference final : public FAnimNodeReference
{
};
static_assert(alignof(FMotionMatchingAnimNodeReference) == 0x000008, "Wrong alignment on FMotionMatchingAnimNodeReference");
static_assert(sizeof(FMotionMatchingAnimNodeReference) == 0x000010, "Wrong size on FMotionMatchingAnimNodeReference");

// ScriptStruct PoseSearch.PoseSearchCost
// 0x0004 (0x0004 - 0x0000)
struct FPoseSearchCost final
{
public:
	float                                         TotalCost;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPoseSearchCost) == 0x000004, "Wrong alignment on FPoseSearchCost");
static_assert(sizeof(FPoseSearchCost) == 0x000004, "Wrong size on FPoseSearchCost");
static_assert(offsetof(FPoseSearchCost, TotalCost) == 0x000000, "Member 'FPoseSearchCost::TotalCost' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseAnimationAssetBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FPoseSearchDatabaseAnimationAssetBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchDatabaseAnimationAssetBase) == 0x000008, "Wrong alignment on FPoseSearchDatabaseAnimationAssetBase");
static_assert(sizeof(FPoseSearchDatabaseAnimationAssetBase) == 0x000008, "Wrong size on FPoseSearchDatabaseAnimationAssetBase");

// ScriptStruct PoseSearch.PoseSearchDatabaseSequence
// 0x0008 (0x0010 - 0x0008)
struct FPoseSearchDatabaseSequence final : public FPoseSearchDatabaseAnimationAssetBase
{
public:
	class UAnimSequence*                          Sequence;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchDatabaseSequence) == 0x000008, "Wrong alignment on FPoseSearchDatabaseSequence");
static_assert(sizeof(FPoseSearchDatabaseSequence) == 0x000010, "Wrong size on FPoseSearchDatabaseSequence");
static_assert(offsetof(FPoseSearchDatabaseSequence, Sequence) == 0x000008, "Member 'FPoseSearchDatabaseSequence::Sequence' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseBlendSpace
// 0x0008 (0x0010 - 0x0008)
struct FPoseSearchDatabaseBlendSpace final : public FPoseSearchDatabaseAnimationAssetBase
{
public:
	class UBlendSpace*                            BlendSpace;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchDatabaseBlendSpace) == 0x000008, "Wrong alignment on FPoseSearchDatabaseBlendSpace");
static_assert(sizeof(FPoseSearchDatabaseBlendSpace) == 0x000010, "Wrong size on FPoseSearchDatabaseBlendSpace");
static_assert(offsetof(FPoseSearchDatabaseBlendSpace, BlendSpace) == 0x000008, "Member 'FPoseSearchDatabaseBlendSpace::BlendSpace' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseAnimComposite
// 0x0008 (0x0010 - 0x0008)
struct FPoseSearchDatabaseAnimComposite final : public FPoseSearchDatabaseAnimationAssetBase
{
public:
	class UAnimComposite*                         AnimComposite;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchDatabaseAnimComposite) == 0x000008, "Wrong alignment on FPoseSearchDatabaseAnimComposite");
static_assert(sizeof(FPoseSearchDatabaseAnimComposite) == 0x000010, "Wrong size on FPoseSearchDatabaseAnimComposite");
static_assert(offsetof(FPoseSearchDatabaseAnimComposite, AnimComposite) == 0x000008, "Member 'FPoseSearchDatabaseAnimComposite::AnimComposite' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseAnimMontage
// 0x0008 (0x0010 - 0x0008)
struct FPoseSearchDatabaseAnimMontage final : public FPoseSearchDatabaseAnimationAssetBase
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchDatabaseAnimMontage) == 0x000008, "Wrong alignment on FPoseSearchDatabaseAnimMontage");
static_assert(sizeof(FPoseSearchDatabaseAnimMontage) == 0x000010, "Wrong size on FPoseSearchDatabaseAnimMontage");
static_assert(offsetof(FPoseSearchDatabaseAnimMontage, AnimMontage) == 0x000008, "Member 'FPoseSearchDatabaseAnimMontage::AnimMontage' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchDatabaseMultiSequence
// 0x0008 (0x0010 - 0x0008)
struct FPoseSearchDatabaseMultiSequence final : public FPoseSearchDatabaseAnimationAssetBase
{
public:
	class UPoseSearchMultiSequence*               MultiSequence;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchDatabaseMultiSequence) == 0x000008, "Wrong alignment on FPoseSearchDatabaseMultiSequence");
static_assert(sizeof(FPoseSearchDatabaseMultiSequence) == 0x000010, "Wrong size on FPoseSearchDatabaseMultiSequence");
static_assert(offsetof(FPoseSearchDatabaseMultiSequence, MultiSequence) == 0x000008, "Member 'FPoseSearchDatabaseMultiSequence::MultiSequence' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchBone
// 0x0014 (0x0014 - 0x0000)
struct FPoseSearchBone final
{
public:
	struct FBoneReference                         Reference;                                         // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Flags;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchBone) == 0x000004, "Wrong alignment on FPoseSearchBone");
static_assert(sizeof(FPoseSearchBone) == 0x000014, "Wrong size on FPoseSearchBone");
static_assert(offsetof(FPoseSearchBone, Reference) == 0x000000, "Member 'FPoseSearchBone::Reference' has a wrong offset!");
static_assert(offsetof(FPoseSearchBone, Flags) == 0x000010, "Member 'FPoseSearchBone::Flags' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchTrajectorySample
// 0x0008 (0x0008 - 0x0000)
struct FPoseSearchTrajectorySample final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flags;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchTrajectorySample) == 0x000004, "Wrong alignment on FPoseSearchTrajectorySample");
static_assert(sizeof(FPoseSearchTrajectorySample) == 0x000008, "Wrong size on FPoseSearchTrajectorySample");
static_assert(offsetof(FPoseSearchTrajectorySample, Offset) == 0x000000, "Member 'FPoseSearchTrajectorySample::Offset' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectorySample, Flags) == 0x000004, "Member 'FPoseSearchTrajectorySample::Flags' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchHistoryCollectorAnimNodeReference
// 0x0000 (0x0010 - 0x0010)
struct FPoseSearchHistoryCollectorAnimNodeReference final : public FAnimNodeReference
{
};
static_assert(alignof(FPoseSearchHistoryCollectorAnimNodeReference) == 0x000008, "Wrong alignment on FPoseSearchHistoryCollectorAnimNodeReference");
static_assert(sizeof(FPoseSearchHistoryCollectorAnimNodeReference) == 0x000010, "Wrong size on FPoseSearchHistoryCollectorAnimNodeReference");

// ScriptStruct PoseSearch.PoseSearchMultiSequenceItem
// 0x0070 (0x0070 - 0x0000)
struct FPoseSearchMultiSequenceItem final
{
public:
	class UAnimSequenceBase*                      Sequence;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Origin;                                            // 0x0010(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchMultiSequenceItem) == 0x000010, "Wrong alignment on FPoseSearchMultiSequenceItem");
static_assert(sizeof(FPoseSearchMultiSequenceItem) == 0x000070, "Wrong size on FPoseSearchMultiSequenceItem");
static_assert(offsetof(FPoseSearchMultiSequenceItem, Sequence) == 0x000000, "Member 'FPoseSearchMultiSequenceItem::Sequence' has a wrong offset!");
static_assert(offsetof(FPoseSearchMultiSequenceItem, Role) == 0x000008, "Member 'FPoseSearchMultiSequenceItem::Role' has a wrong offset!");
static_assert(offsetof(FPoseSearchMultiSequenceItem, Origin) == 0x000010, "Member 'FPoseSearchMultiSequenceItem::Origin' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchBlueprintResult
// 0x0040 (0x0040 - 0x0000)
struct FPoseSearchBlueprintResult final
{
public:
	class UObject*                                SelectedAnimation;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectedTime;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WantedPlayRate;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMirrored;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BlendParameters;                                   // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPoseSearchDatabase>     SelectedDatabase;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchCost;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchBlueprintResult) == 0x000008, "Wrong alignment on FPoseSearchBlueprintResult");
static_assert(sizeof(FPoseSearchBlueprintResult) == 0x000040, "Wrong size on FPoseSearchBlueprintResult");
static_assert(offsetof(FPoseSearchBlueprintResult, SelectedAnimation) == 0x000000, "Member 'FPoseSearchBlueprintResult::SelectedAnimation' has a wrong offset!");
static_assert(offsetof(FPoseSearchBlueprintResult, SelectedTime) == 0x000008, "Member 'FPoseSearchBlueprintResult::SelectedTime' has a wrong offset!");
static_assert(offsetof(FPoseSearchBlueprintResult, WantedPlayRate) == 0x00000C, "Member 'FPoseSearchBlueprintResult::WantedPlayRate' has a wrong offset!");
static_assert(offsetof(FPoseSearchBlueprintResult, bLoop) == 0x000010, "Member 'FPoseSearchBlueprintResult::bLoop' has a wrong offset!");
static_assert(offsetof(FPoseSearchBlueprintResult, bIsMirrored) == 0x000011, "Member 'FPoseSearchBlueprintResult::bIsMirrored' has a wrong offset!");
static_assert(offsetof(FPoseSearchBlueprintResult, BlendParameters) == 0x000018, "Member 'FPoseSearchBlueprintResult::BlendParameters' has a wrong offset!");
static_assert(offsetof(FPoseSearchBlueprintResult, SelectedDatabase) == 0x000030, "Member 'FPoseSearchBlueprintResult::SelectedDatabase' has a wrong offset!");
static_assert(offsetof(FPoseSearchBlueprintResult, SearchCost) == 0x000038, "Member 'FPoseSearchBlueprintResult::SearchCost' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchRoledSkeleton
// 0x0038 (0x0038 - 0x0000)
struct FPoseSearchRoledSkeleton final
{
public:
	class USkeleton*                              Skeleton;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMirrorDataTable*                       MirrorDataTable;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Role;                                              // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 BoneReferences;                                    // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<uint16>                                BoneIndicesWithParents;                            // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchRoledSkeleton) == 0x000008, "Wrong alignment on FPoseSearchRoledSkeleton");
static_assert(sizeof(FPoseSearchRoledSkeleton) == 0x000038, "Wrong size on FPoseSearchRoledSkeleton");
static_assert(offsetof(FPoseSearchRoledSkeleton, Skeleton) == 0x000000, "Member 'FPoseSearchRoledSkeleton::Skeleton' has a wrong offset!");
static_assert(offsetof(FPoseSearchRoledSkeleton, MirrorDataTable) == 0x000008, "Member 'FPoseSearchRoledSkeleton::MirrorDataTable' has a wrong offset!");
static_assert(offsetof(FPoseSearchRoledSkeleton, Role) == 0x000010, "Member 'FPoseSearchRoledSkeleton::Role' has a wrong offset!");
static_assert(offsetof(FPoseSearchRoledSkeleton, BoneReferences) == 0x000018, "Member 'FPoseSearchRoledSkeleton::BoneReferences' has a wrong offset!");
static_assert(offsetof(FPoseSearchRoledSkeleton, BoneIndicesWithParents) == 0x000028, "Member 'FPoseSearchRoledSkeleton::BoneIndicesWithParents' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchTrajectoryData
// 0x0128 (0x0128 - 0x0000)
struct FPoseSearchTrajectoryData final
{
public:
	float                                         RotateTowardsMovementSpeed;                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxControllerYawRate;                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendVelocityTowardsAcceleration;                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpeedRemappingCurve;                           // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     SpeedRemappingCurve;                               // 0x0010(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUseAccelerationRemappingCurve;                    // 0x0098(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     AccelerationRemappingCurve;                        // 0x00A0(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchTrajectoryData) == 0x000008, "Wrong alignment on FPoseSearchTrajectoryData");
static_assert(sizeof(FPoseSearchTrajectoryData) == 0x000128, "Wrong size on FPoseSearchTrajectoryData");
static_assert(offsetof(FPoseSearchTrajectoryData, RotateTowardsMovementSpeed) == 0x000000, "Member 'FPoseSearchTrajectoryData::RotateTowardsMovementSpeed' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectoryData, MaxControllerYawRate) == 0x000004, "Member 'FPoseSearchTrajectoryData::MaxControllerYawRate' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectoryData, BendVelocityTowardsAcceleration) == 0x000008, "Member 'FPoseSearchTrajectoryData::BendVelocityTowardsAcceleration' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectoryData, bUseSpeedRemappingCurve) == 0x00000C, "Member 'FPoseSearchTrajectoryData::bUseSpeedRemappingCurve' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectoryData, SpeedRemappingCurve) == 0x000010, "Member 'FPoseSearchTrajectoryData::SpeedRemappingCurve' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectoryData, bUseAccelerationRemappingCurve) == 0x000098, "Member 'FPoseSearchTrajectoryData::bUseAccelerationRemappingCurve' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectoryData, AccelerationRemappingCurve) == 0x0000A0, "Member 'FPoseSearchTrajectoryData::AccelerationRemappingCurve' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchTrajectory_WorldCollisionResults
// 0x0008 (0x0008 - 0x0000)
struct FPoseSearchTrajectory_WorldCollisionResults final
{
public:
	float                                         TimeToLand;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandSpeed;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchTrajectory_WorldCollisionResults) == 0x000004, "Wrong alignment on FPoseSearchTrajectory_WorldCollisionResults");
static_assert(sizeof(FPoseSearchTrajectory_WorldCollisionResults) == 0x000008, "Wrong size on FPoseSearchTrajectory_WorldCollisionResults");
static_assert(offsetof(FPoseSearchTrajectory_WorldCollisionResults, TimeToLand) == 0x000000, "Member 'FPoseSearchTrajectory_WorldCollisionResults::TimeToLand' has a wrong offset!");
static_assert(offsetof(FPoseSearchTrajectory_WorldCollisionResults, LandSpeed) == 0x000004, "Member 'FPoseSearchTrajectory_WorldCollisionResults::LandSpeed' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchQueryTrajectorySample
// 0x0040 (0x0040 - 0x0000)
struct FPoseSearchQueryTrajectorySample final
{
public:
	struct FQuat                                  Facing;                                            // 0x0000(0x0020)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedSeconds;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchQueryTrajectorySample) == 0x000010, "Wrong alignment on FPoseSearchQueryTrajectorySample");
static_assert(sizeof(FPoseSearchQueryTrajectorySample) == 0x000040, "Wrong size on FPoseSearchQueryTrajectorySample");
static_assert(offsetof(FPoseSearchQueryTrajectorySample, Facing) == 0x000000, "Member 'FPoseSearchQueryTrajectorySample::Facing' has a wrong offset!");
static_assert(offsetof(FPoseSearchQueryTrajectorySample, Position) == 0x000020, "Member 'FPoseSearchQueryTrajectorySample::Position' has a wrong offset!");
static_assert(offsetof(FPoseSearchQueryTrajectorySample, AccumulatedSeconds) == 0x000038, "Member 'FPoseSearchQueryTrajectorySample::AccumulatedSeconds' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchQueryTrajectory
// 0x0010 (0x0010 - 0x0000)
struct FPoseSearchQueryTrajectory final
{
public:
	TArray<struct FPoseSearchQueryTrajectorySample> Samples;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchQueryTrajectory) == 0x000008, "Wrong alignment on FPoseSearchQueryTrajectory");
static_assert(sizeof(FPoseSearchQueryTrajectory) == 0x000010, "Wrong size on FPoseSearchQueryTrajectory");
static_assert(offsetof(FPoseSearchQueryTrajectory, Samples) == 0x000000, "Member 'FPoseSearchQueryTrajectory::Samples' has a wrong offset!");

// ScriptStruct PoseSearch.AnimNode_MotionMatching
// 0x00E8 (0x0198 - 0x00B0)
struct FAnimNode_MotionMatching final : public FAnimNode_BlendStack_Standalone
{
public:
	class UPoseSearchDatabase*                    Database;                                          // 0x00B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BlendTime;                                         // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendProfile*                          BlendProfile;                                      // 0x00C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAlphaBlendOption                             BlendOption;                                       // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         PoseJumpThresholdTime;                             // 0x00CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PoseReselectHistory;                               // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SearchThrottleTime;                                // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFloatInterval                         PlayRate;                                          // 0x00DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseInertialBlend;                                 // 0x00E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bResetOnBecomingRelevant;                          // 0x00E5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShouldSearch;                                     // 0x00E6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShouldUseCachedChannelData;                       // 0x00E7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x98];                                      // 0x00E8(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPoseSearchDatabase*>            DatabasesToSearch;                                 // 0x0180(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_190[0x8];                                      // 0x0190(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_MotionMatching) == 0x000008, "Wrong alignment on FAnimNode_MotionMatching");
static_assert(sizeof(FAnimNode_MotionMatching) == 0x000198, "Wrong size on FAnimNode_MotionMatching");
static_assert(offsetof(FAnimNode_MotionMatching, Database) == 0x0000B0, "Member 'FAnimNode_MotionMatching::Database' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, BlendTime) == 0x0000B8, "Member 'FAnimNode_MotionMatching::BlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, BlendProfile) == 0x0000C0, "Member 'FAnimNode_MotionMatching::BlendProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, BlendOption) == 0x0000C8, "Member 'FAnimNode_MotionMatching::BlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, PoseJumpThresholdTime) == 0x0000CC, "Member 'FAnimNode_MotionMatching::PoseJumpThresholdTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, PoseReselectHistory) == 0x0000D4, "Member 'FAnimNode_MotionMatching::PoseReselectHistory' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, SearchThrottleTime) == 0x0000D8, "Member 'FAnimNode_MotionMatching::SearchThrottleTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, PlayRate) == 0x0000DC, "Member 'FAnimNode_MotionMatching::PlayRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, bUseInertialBlend) == 0x0000E4, "Member 'FAnimNode_MotionMatching::bUseInertialBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, bResetOnBecomingRelevant) == 0x0000E5, "Member 'FAnimNode_MotionMatching::bResetOnBecomingRelevant' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, bShouldSearch) == 0x0000E6, "Member 'FAnimNode_MotionMatching::bShouldSearch' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, bShouldUseCachedChannelData) == 0x0000E7, "Member 'FAnimNode_MotionMatching::bShouldUseCachedChannelData' has a wrong offset!");
static_assert(offsetof(FAnimNode_MotionMatching, DatabasesToSearch) == 0x000180, "Member 'FAnimNode_MotionMatching::DatabasesToSearch' has a wrong offset!");

// ScriptStruct PoseSearch.AnimNode_PoseSearchHistoryCollector_Base
// 0x0288 (0x0298 - 0x0010)
struct FAnimNode_PoseSearchHistoryCollector_Base : public FAnimNode_Base
{
public:
	int32                                         PoseCount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SamplingInterval;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 CollectedBones;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInitializeWithRefPose;                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetOnBecomingRelevant;                          // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStoreScales;                                      // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RootBoneRecoveryTime;                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bGenerateTrajectory;                               // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSearchQueryTrajectory             Trajectory;                                        // 0x0048(0x0010)(Edit, NativeAccessSpecifierPublic)
	float                                         TrajectorySpeedMultiplier;                         // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrajectoryHistoryCount;                            // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrajectoryPredictionCount;                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PredictionSamplingInterval;                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSearchTrajectoryData              TrajectoryData;                                    // 0x0068(0x0128)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x108];                                    // 0x0190(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseSearchHistoryCollector_Base) == 0x000008, "Wrong alignment on FAnimNode_PoseSearchHistoryCollector_Base");
static_assert(sizeof(FAnimNode_PoseSearchHistoryCollector_Base) == 0x000298, "Wrong size on FAnimNode_PoseSearchHistoryCollector_Base");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, PoseCount) == 0x000010, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::PoseCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, SamplingInterval) == 0x000014, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::SamplingInterval' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, CollectedBones) == 0x000018, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::CollectedBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, bInitializeWithRefPose) == 0x000028, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::bInitializeWithRefPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, bResetOnBecomingRelevant) == 0x000029, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::bResetOnBecomingRelevant' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, bStoreScales) == 0x00002A, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::bStoreScales' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, RootBoneRecoveryTime) == 0x00002C, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::RootBoneRecoveryTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, bGenerateTrajectory) == 0x000040, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::bGenerateTrajectory' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, Trajectory) == 0x000048, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::Trajectory' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, TrajectorySpeedMultiplier) == 0x000058, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::TrajectorySpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, TrajectoryHistoryCount) == 0x00005C, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::TrajectoryHistoryCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, TrajectoryPredictionCount) == 0x000060, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::TrajectoryPredictionCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, PredictionSamplingInterval) == 0x000064, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::PredictionSamplingInterval' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector_Base, TrajectoryData) == 0x000068, "Member 'FAnimNode_PoseSearchHistoryCollector_Base::TrajectoryData' has a wrong offset!");

// ScriptStruct PoseSearch.AnimNode_PoseSearchHistoryCollector
// 0x0010 (0x02A8 - 0x0298)
struct FAnimNode_PoseSearchHistoryCollector final : public FAnimNode_PoseSearchHistoryCollector_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0298(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_PoseSearchHistoryCollector) == 0x000008, "Wrong alignment on FAnimNode_PoseSearchHistoryCollector");
static_assert(sizeof(FAnimNode_PoseSearchHistoryCollector) == 0x0002A8, "Wrong size on FAnimNode_PoseSearchHistoryCollector");
static_assert(offsetof(FAnimNode_PoseSearchHistoryCollector, Source) == 0x000298, "Member 'FAnimNode_PoseSearchHistoryCollector::Source' has a wrong offset!");

// ScriptStruct PoseSearch.AnimNode_PoseSearchComponentSpaceHistoryCollector
// 0x0010 (0x02A8 - 0x0298)
struct FAnimNode_PoseSearchComponentSpaceHistoryCollector final : public FAnimNode_PoseSearchHistoryCollector_Base
{
public:
	struct FComponentSpacePoseLink                Source;                                            // 0x0298(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_PoseSearchComponentSpaceHistoryCollector) == 0x000008, "Wrong alignment on FAnimNode_PoseSearchComponentSpaceHistoryCollector");
static_assert(sizeof(FAnimNode_PoseSearchComponentSpaceHistoryCollector) == 0x0002A8, "Wrong size on FAnimNode_PoseSearchComponentSpaceHistoryCollector");
static_assert(offsetof(FAnimNode_PoseSearchComponentSpaceHistoryCollector, Source) == 0x000298, "Member 'FAnimNode_PoseSearchComponentSpaceHistoryCollector::Source' has a wrong offset!");

// ScriptStruct PoseSearch.PoseSearchFutureProperties
// 0x0010 (0x0010 - 0x0000)
struct FPoseSearchFutureProperties final
{
public:
	class UObject*                                Animation;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationTime;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTime;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchFutureProperties) == 0x000008, "Wrong alignment on FPoseSearchFutureProperties");
static_assert(sizeof(FPoseSearchFutureProperties) == 0x000010, "Wrong size on FPoseSearchFutureProperties");
static_assert(offsetof(FPoseSearchFutureProperties, Animation) == 0x000000, "Member 'FPoseSearchFutureProperties::Animation' has a wrong offset!");
static_assert(offsetof(FPoseSearchFutureProperties, AnimationTime) == 0x000008, "Member 'FPoseSearchFutureProperties::AnimationTime' has a wrong offset!");
static_assert(offsetof(FPoseSearchFutureProperties, IntervalTime) == 0x00000C, "Member 'FPoseSearchFutureProperties::IntervalTime' has a wrong offset!");

}

