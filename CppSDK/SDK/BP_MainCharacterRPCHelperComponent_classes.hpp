#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MainCharacterRPCHelperComponent

#include "Basic.hpp"

#include "EShepherdessAnimState_structs.hpp"
#include "Engine_structs.hpp"
#include "X6Game_classes.hpp"
#include "EPowerFrogStage_structs.hpp"
#include "EAthenaShowState_structs.hpp"
#include "ECastPhantomStage_structs.hpp"
#include "ECastGuardStage_structs.hpp"
#include "EImaginationFireworkAnimState_structs.hpp"
#include "EAbilityMultiPlayerHelperType_structs.hpp"
#include "Enum_InstrumentType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MainCharacterRPCHelperComponent.BP_MainCharacterRPCHelperComponent_C
// 0x0058 (0x0100 - 0x00A8)
class UBP_MainCharacterRPCHelperComponent_C : public UX6ActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          BP_bIsControllingDaMiao;                           // 0x00B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         BP_PlaneIndex;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         BP_GlideState;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BP_GlideEnergy;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_GlidePaused;                                    // 0x00D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bIsInMusicBoxClimax;                            // 0x00E0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BP_SeamlessCaveLoadedMap;                          // 0x00E8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	bool                                          BP_bSeamlessCaveLowQuality;                        // 0x00F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BP_bIsCopyMapReady;                                // 0x00F9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void BP_Multi_InterObjActive(int64 EntityID, const class FString& Data, int64 playerEntityID);
	void BP_OnMulti_SitOnBubbleCableCar(int64 EntityID, int64 playerEntityID, int32 Action, int64 extraInfo, int64 extraInfo2);
	void BP_OnMulticast_AbilityBegin(uint8 HelperType);
	void BP_OnMulticast_AbilityClearActor(EAbilityMultiPlayerHelperType NewParam5);
	void BP_OnMulticast_AbilityClearNS(EAbilityMultiPlayerHelperType NewParam5);
	void BP_OnMulticast_AbilityDestroyActor(EAbilityMultiPlayerHelperType NewParam5, const class FString& NewParam);
	void BP_OnMulticast_AbilityDestroyNS(EAbilityMultiPlayerHelperType NewParam5, const class FString& NewParam);
	void BP_OnMulticast_AbilityEnd(uint8 HelperType);
	void BP_OnMulticast_AbilityPostEvent(EAbilityMultiPlayerHelperType NewParam5, const class FString& NewParam);
	void BP_OnMulticast_AbilitySetActorMeshLocation(EAbilityMultiPlayerHelperType NewParam, const struct FVector& NewParam1);
	void BP_OnMulticast_AbilitySpawnActor(EAbilityMultiPlayerHelperType NewParam5, const class FString& NewParam, const struct FTransform& NewParam1, const class FString& NewParam2);
	void BP_OnMulticast_AbilitySpawnNS(EAbilityMultiPlayerHelperType NewParam5, const class FString& NewParam, const struct FTransform& NewParam1, const class FString& NewParam2, bool NewParam3, bool NewParam4);
	void BP_OnMulticast_AdjustTransform(const struct FF_AdjustTransformRPCParam& AdjustParam);
	void BP_OnMulticast_AfkIdle(bool inAfk, bool bImmediatelyStop);
	void BP_OnMulticast_AthenaAbilityBegin(const class FString& ABPPath, const class FString& SeatAniPath, const struct FVector& SeatOffset, const struct FVector& SeatRotation);
	void BP_OnMulticast_AthenaAbilityEnd();
	void BP_OnMulticast_AthenaSwitchAnimStage(EAthenaShowState AniStage);
	void BP_OnMulticast_AttachRibbonFishMesh(const class FString& MeshAssetPath, const class FString& CurveAssetPath);
	void BP_OnMulticast_BallonDuckAttachToCarrier(const class FString& NewParam, int32 NewParam1, int32 NewParam2);
	void BP_OnMulticast_BallonDuckDetachFromCarrier(const class FString& NewParam);
	void BP_OnMulticast_BallonDuckRefreshWeapon(int32 NewParam);
	void BP_OnMulticast_BallonDuckTrigger(int32 NewParam);
	void BP_OnMulticast_BeginCleaningAnimal(int64 AnimalEntityID, int64 AbilityEffectID, double LookAtAnimRotYaw);
	void BP_OnMulticast_BeginFishing(const struct FVector& FishFloatLocation, bool IsInPrepare);
	void BP_OnMulticast_BeginGetWoolenHeart(int64 WoolenHeartEntityID, const struct FF_WoolenHeartInfoCache& WoolenHeartInfoCache);
	void BP_OnMulticast_BeginMusicBoxHypnosisAnimal();
	void BP_OnMulticast_BlowBubbleSpawnNS(const class FString& AssetPath, const struct FVector& Location, const struct FRotator& Rotation);
	void BP_OnMulticast_BlueberryPicnicRefreshWeapon(const class FString& NewParam);
	void BP_OnMulticast_BlueberryPicnicTrigger(const class FString& NewParam1, const class FString& NewParam2, const class FString& NewParam3);
	void BP_OnMulticast_BoxStopPhysics(int64 BoxID, const struct FTransform& FinalTrans);
	void BP_OnMulticast_Buff(int64 EntityID, const class FString& BuffDAPath, bool bRemove);
	void BP_OnMulticast_Bullet(const class FString& BulletDAPath, const struct FF_MulticastTriggerContext& BP_TriggerContext);
	void BP_OnMulticast_CatchInsectSuccess(int64 InsectEntityID);
	void BP_OnMulticast_CelebrationGuardBegin(const class FString& NewParam);
	void BP_OnMulticast_CelebrationGuardEnd();
	void BP_OnMulticast_CelebrationGuardSwitchAnimStage(ECastGuardStage NewParam, bool NewParam1, bool NewParam2);
	void BP_OnMulticast_CelebrationPhantomBegin(const class FString& NewParam);
	void BP_OnMulticast_CelebrationPhantomEnd();
	void BP_OnMulticast_CelebrationPhantomSwitchAnimStage(ECastPhantomStage NewParam);
	void BP_OnMulticast_ChangeInstArticulation(bool Value);
	void BP_OnMulticast_ClaretStateChange(int32 State);
	void BP_OnMulticast_CorollaDeerBegin();
	void BP_OnMulticast_CorollaDeerEnd();
	void BP_OnMulticast_CreateFlyEffect(const class FString& NiagaraPath, const struct FVector& StartLoc, const struct FVector& EndLoc, int64 targetSpawnerID);
	void BP_OnMulticast_CreateSirenWaterPool();
	void BP_OnMulticast_CrownDeerBegin();
	void BP_OnMulticast_CrownDeerEnd();
	void BP_OnMulticast_CrownDeerEndAnim();
	void BP_OnMulticast_DamiaoPerformStart(const class FString& NewParam, const struct FVector& NewParam1, const struct FRotator& NewParam2, TArray<int32>& NewParam3);
	void BP_OnMulticast_DamiaoPerformStop();
	void BP_OnMulticast_DayDreamBegin(int32 NewParam);
	void BP_OnMulticast_DayDreamDestroyCloud();
	void BP_OnMulticast_DayDreamEnd();
	void BP_OnMulticast_DeadWoodBadPerformance(int32 PhaseIndex);
	void BP_OnMulticast_DeadWoodGoodPerformance(int32 PhaseIndex);
	void BP_OnMulticast_DeadWoodPerformaceState(bool IsContinue);
	void BP_OnMulticast_DeadWoodStartProcessShow();
	void BP_OnMulticast_DeadWoodStopProcessShow();
	void BP_OnMulticast_DeinitFishing();
	void BP_OnMulticast_DeInitGlide();
	void BP_OnMulticast_DestroyMusicBoxComponet();
	void BP_OnMulticast_DetachRibbonFishMesh();
	void BP_OnMulticast_DoDamage_Hitframe(const class FString& DamageDAPath, const struct FF_MulticastHitFrameContext& MulticastHitframeContext);
	void BP_OnMulticast_DoRelive(int64 EntityID);
	void BP_OnMulticast_EndCleaningAnimal(int64 AnimalEntityID, int64 AbilityEffectID);
	void BP_OnMulticast_EndFishing(int64 FishEntityID);
	void BP_OnMulticast_EndMusicBoxHypnosisAnimal();
	void BP_OnMulticast_EnterFishingProcess(int64 FishEntityID);
	void BP_OnMulticast_EnterInstrument(Enum_InstrumentType NewParam);
	void BP_OnMulticast_EquipWeaponByConfigPath(const class FString& WeaponConfigPath, const class FString& SlotType, bool bImmediateRequest, bool bInSync);
	void BP_OnMulticast_EquipWeaponByID(int32 WeaponID, const class FString& SlotType, bool bImmediateRequest, bool bInSync, const struct FGameplayTag& CustomWeaponState);
	void BP_OnMulticast_ExitFishingProcess(bool Success, const class FString& Reason);
	void BP_OnMulticast_FastUnequipWeapon(bool bImmediateRequest, bool bInSync);
	void BP_OnMulticast_FishingUpdateParams(int64 FishEntityID, bool IsReelIn, bool IsLeft);
	void BP_OnMulticast_FrozenPathAbility_DeInit();
	void BP_OnMulticast_FrozenPathAbility_Init();
	void BP_OnMulticast_GlowInsectNet(bool bGlow);
	void BP_OnMulticast_ImaginationFireworkBegin(const class FString& NewParam, const class FString& NewParam1, const struct FVector& NewParam2, const struct FRotator& NewParam3, const class FString& NewParam4);
	void BP_OnMulticast_ImaginationFireworkEnd();
	void BP_OnMulticast_ImaginationFireworkSwitchStage(EImaginationFireworkAnimState NewParam, bool NewParam1, bool NewParam2);
	void BP_OnMulticast_InitGlide();
	void BP_OnMulticast_InstrumentClearAllNS();
	void BP_OnMulticast_InstrumentDestroyActor(const class FString& Handle);
	void BP_OnMulticast_InstrumentDestroyNS(const class FString& NewParam);
	void BP_OnMulticast_InstrumentSpawnActor(const class FString& ActorClassPath, const struct FTransform& Transform, const class FString& Handle);
	void BP_OnMulticast_InstrumentSpawnNS(const class FString& NewParam, const struct FTransform& NewParam1, const class FString& NewParam2, bool NewParam3, bool NewParam4);
	void BP_OnMulticast_MagicBanquetBegin();
	void BP_OnMulticast_MagicBanquetDestroyTable();
	void BP_OnMulticast_MagicBanquetEnd();
	void BP_OnMulticast_MagicBanquetSpawnTable(int32 NewParam);
	void BP_OnMulticast_MapleLeavesBegin();
	void BP_OnMulticast_MapleLeavesChangeTree(TArray<class FString>& NewParam, bool NewParam1);
	void BP_OnMulticast_MapleLeavesEnd();
	void BP_OnMulticast_MidnightPromDestroyGhost();
	void BP_OnMulticast_MidnightPromShowGhost(const class FString& NewParam, const struct FVector& NewParam1, double NewParam2);
	void BP_OnMulticast_MultiCallVehicleFunction(int64 VehicleEntityId, int64 FuncId);
	void BP_OnMulticast_MultiPassengerBindEntity(int64 VehicleEntityId, int64 PassenegerID);
	void BP_OnMulticast_MultiPhotographConfirmInvite(int64 FromRoleID, bool BAccept);
	void BP_OnMulticast_MultiPhotographConfirmTransfer(bool BAccept, int64 PlyaerRoleID);
	void BP_OnMulticast_MultiPhotographEnter(int64 PlayerRoleID);
	void BP_OnMulticast_MultiPhotographExit(bool bController, const class FString& UserName);
	void BP_OnMulticast_MultiPhotographInvite(int64 PlayerRoleID);
	void BP_OnMulticast_MultiPhotographInviteeReadyToInviter(int64 InviterRid);
	void BP_OnMulticast_MultiPhotographLookAt(bool EnableLookAt);
	void BP_OnMulticast_MultiPhotographNikkiRelativeRotation(const struct FRotator& RelativeRotation, bool BCatDoll, bool BAnimal);
	void BP_OnMulticast_MultiPhotographNikkiState(bool BInSpecial3CState, int32 InitPoseID, const class FString& InitalStanceTag);
	void BP_OnMulticast_MultiPhotographNormalMsg(const class FString& MsgStr);
	void BP_OnMulticast_MultiPhotographPauseAnim();
	void BP_OnMulticast_MultiPhotographPlayAnim(int32 PoseID);
	void BP_OnMulticast_MultiPhotographRemove(int64 PlayerRoleID);
	void BP_OnMulticast_MultiPhotographRestoreAnim(bool BFromPhotographExit);
	void BP_OnMulticast_MultiPhotographResumeAnim();
	void BP_OnMulticast_MultiPhotographReturnToMainUI();
	void BP_OnMulticast_MultiPhotographSetAnim(double Percent);
	void BP_OnMulticast_MultiPhotographTakePhoto(const struct FVector& NikkiLoc, const struct FVector& CameraActorLoc, const struct FVector& LookAtRealCenterLoc, const struct FVector& CameraRelativeLoc, const struct FF_CameraParamsForRpc& Params_0);
	void BP_OnMulticast_MultiPhotographTransfer(int64 PlayerRoleID, bool BFromController);
	void BP_OnMulticast_MultiPhotographUpdateCameraParams(const struct FF_CameraParamsForRpc& Params_0);
	void BP_OnMulticast_MultiPhotographUpdateCameraPos(const struct FVector& NikkiLoc, const struct FVector& CameraActorLoc, const struct FVector& LookAtRealCenterLoc, const struct FVector& CameraRelativeLoc);
	void BP_OnMulticast_MusicBoxClimaxEnd();
	void BP_OnMulticast_MusicBoxClimaxStart();
	void BP_OnMulticast_MusicBoxCombatHypnosis(TArray<int64>& RemoveList, TArray<int64>& AddList);
	void BP_OnMulticast_MusicBoxUpdateBaseRing(bool bVisible, int32 Level);
	void BP_OnMulticast_NetSyncGlide(int32 GlideState);
	void BP_OnMulticast_NetSyncWeapon(int64 RoleId, int32 WeaponID, const class FString& SlotType, int32 OverlayState, const class FString& CustomState);
	void BP_OnMulticast_NotifyClothesChanged(TArray<int32>& inDressup, TArray<int32>& inUndress, int32 inChangeType, bool inNeedCover, int32 inAbilityEffectID);
	void BP_OnMulticast_NotifyDaMiaoTransformToNikki();
	void BP_OnMulticast_NotifyNikkiTransformToDaMiao();
	void BP_OnMulticast_NotifySuitConfigChanged(int32 SuitId);
	void BP_OnMulticast_NotifyTransformDaMiaoMsg(int32 MsgID, const class FString& msg);
	void BP_OnMulticast_NotifyWeaponOverlayStateChanged(int32 UpdatedState, bool bAdded);
	void BP_OnMulticast_NovelistBegin();
	void BP_OnMulticast_NovelistCreateNS(const class FString& MontageAssetPath, const struct FVector& NewParam, const struct FRotator& NewParam1);
	void BP_OnMulticast_NovelistDestroyNS(bool AssetPath);
	void BP_OnMulticast_NovelistEnd();
	void BP_OnMulticast_PainterDestroyNS(bool bImmediately);
	void BP_OnMulticast_PainterStartPainting(const class FString& MontageAssetPath, const class FString& NSAssetPath);
	void BP_OnMulticast_PainterStopPainting();
	void BP_OnMulticast_PhxFloatFeedback(int32 Type, const struct FF_MulticastDamageContext& DamageContext);
	void BP_OnMulticast_PicnicBouequetRefreshWeapon(const class FString& NewParam, TArray<class FString>& NewParam1);
	void BP_OnMulticast_PicnicBouequetTrigger(const class FString& NewParam1, const class FString& NewParam2, const class FString& NewParam3, TArray<class FString>& NewParam4, const struct FRotator& NewParam5);
	void BP_OnMulticast_PillowStateChange(int32 State);
	void BP_OnMulticast_PlayEmoteMontage(int64 playerId, int32 PoseID, const class FString& MontageName);
	void BP_OnMulticast_PlayFeatureSequence(const class FString& LSPath);
	void BP_OnMulticast_PlayHighAltitudeFireworks(const class FString& NiagaraPath, const struct FVector& EffectLocation, const struct FRotator& EffectRotator, const struct FVector& EffectScale, const class FString& NSVariableName, const struct FVector& currentEffectLocation);
	void BP_OnMulticast_PlayLowAltitudeFireworks(const class FString& NiagaraPath, const struct FVector& EffectLocation, const struct FRotator& EffectRotator, const struct FVector& EffectScale);
	void BP_OnMulticast_PlayWeaponAction(const struct FGameplayTag& ActionTag);
	void BP_OnMulticast_PortableBubbleMachine(bool bUse, int32 PortableBubblueMachineItemID, int64 NikkiEntityID);
	void BP_OnMulticast_PostExitInstrument();
	void BP_OnMulticast_PowerFrogBegin(const class FString& NewParam, const class FString& NewParam1);
	void BP_OnMulticast_PowerFrogEnd();
	void BP_OnMulticast_PowerFrogSpawnFrog(const class FString& NewParam, const struct FTransform& NewParam1, int32 NewParam2, int32 NewParam3);
	void BP_OnMulticast_PowerFrogSwitchStage(EPowerFrogStage NewParam);
	void BP_OnMulticast_PreExitInstrument();
	void BP_OnMulticast_PressSyllable(Enum_InstrumentType InstrumentType, int32 Octace);
	void BP_OnMulticast_QuickRelive(const struct FTransform& ReliveTransfom);
	void BP_OnMulticast_QuitRibbonFish();
	void BP_OnMulticast_ReleaseSyllable(Enum_InstrumentType InstrumentType, int32 Octace);
	void BP_OnMulticast_RemoveGC();
	void BP_OnMulticast_RemoveSlotWeapon(const class FString& SlotType, bool bImmediateRequest, bool bInSync);
	void BP_OnMulticast_RequestStartGesture(const class FString& ActivePerformanceGestureTagName, bool bFullBodyGesture, bool bTrimGesture, double TrimStartTimeForGesture, double TrimEndTimeForGesture, bool bExpectedAdditive);
	void BP_OnMulticast_RequestStartPerformance(const class FString& StanceTag, bool bAllowFlag, bool bNeedFireEvent, bool bFastTransition, bool bSkipTransition, bool bFullBodyStance);
	void BP_OnMulticast_RequestStopGesture();
	void BP_OnMulticast_RequestStopPerformance(bool bNeedFireEvent, bool bFastTransition, bool bSkipTransition);
	void BP_OnMulticast_ResetInteractionPerformance();
	void BP_OnMulticast_SeaOfStarsBegin(const class FString& NikkiActionAnimPath, const class FString& StarAnimPath, const class FString& StarClassRefPath);
	void BP_OnMulticast_SeaOfStartsStop();
	void BP_OnMulticast_SetAnimLocomotionState(bool bEnter);
	void BP_OnMulticast_SetDoorLightSlot(int32 Index_0, bool bInit, int64 DoorSpawnerID);
	void BP_OnMulticast_SetPerformanceInviteId(int64 playerId, int64 InvitePlayerId);
	void BP_OnMulticast_SetPerformanceRespondCount(int64 playerId, int32 Count, int64 RespondPlayerId);
	void BP_OnMulticast_SetPerformanceState(int64 playerId, int32 State, int32 PoseID);
	void BP_OnMulticast_SetPlaceableObjHidden(TArray<int64>& PlaceableObjEntityID, bool bHidden, int64 RequestPlayerEntityID);
	void BP_OnMulticast_SetWeaponAppearanceDisabled(bool bDisabled, bool bImmediateRequest, const class FString& InModuleTag);
	void BP_OnMulticast_ShepherdessBegin();
	void BP_OnMulticast_ShepherdessEnd();
	void BP_OnMulticast_ShepherdessEnterPhotograph(bool NewParam);
	void BP_OnMulticast_ShepherdessSwitchStage(EShepherdessAnimState NewParam1);
	void BP_OnMulticast_ShinyMothChangeLamp(int32 MothID, const class FString& State);
	void BP_OnMulticast_SirenBegin();
	void BP_OnMulticast_SirenEnd();
	void BP_OnMulticast_SitOnInteractiveChair(int32 ParamType, bool bSit, bool bIsAttached, const class FString& ChairIdentifier, const class FString& ParentCompName, const struct FTransform& RelativeTransform);
	void BP_OnMulticast_SkinChange();
	void BP_OnMulticast_StartBlowBubble();
	void BP_OnMulticast_StopAdjustTransform();
	void BP_OnMulticast_StopAnimLocomotionState();
	void BP_OnMulticast_StopBlowBubble(bool bImmediately);
	void BP_OnMulticast_StopEmoteMontage(int64 playerId);
	void BP_OnMulticast_SummonMotorcycleBegin();
	void BP_OnMulticast_SummonMotorcycleEnd();
	void BP_OnMulticast_SummonRainbowBegin();
	void BP_OnMulticast_SummonRainbowEnd();
	void BP_OnMulticast_SuonaToningChange(bool bIsToning);
	void BP_OnMulticast_TriggerPerformAnim();
	void BP_OnMulticast_TriggerPlaceableObjInteracted(int64 PlaceableEntityID, int64 FromPlayerEntityID, int64 ToPlayerEntityID, const class FString& String);
	void BP_OnMulticast_TriggerRibbonFish();
	void BP_OnMulticast_UIDisableMovement(int64 EntityID, bool bDisable);
	void BP_OnMulticast_UnequipWeapon(bool bImmediateRequest, bool bInSync);
	void BP_OnMulticast_UpdateInstrumentRTPCValue(double Value);
	void BP_OnMulticast_UpdateInteractionIK(bool bEnable, TArray<struct FFInteractionIkSlots>& IkSlots);
	void BP_OnMulticast_UpdateNikkiStylizedOverlayData(int32 PawnAnimState, int32 UpdatedState, bool bAdded);
	void BP_OnMulticastShadow_MusicBoxClimaxEnd();
	void BP_OnMulticastShadow_MusicBoxClimaxStart();
	void ExecuteUbergraph_BP_MainCharacterRPCHelperComponent(int32 EntryPoint);
	void Multi_InterObjActive(int64 EntityID, const class FString& Data, int64 playerEntityID);
	void Multicast_AbilityBegin(uint8 HelperType);
	void Multicast_AbilityClearActor(EAbilityMultiPlayerHelperType HelperType);
	void Multicast_AbilityClearNS(EAbilityMultiPlayerHelperType HelperType);
	void Multicast_AbilityDestroyActor(EAbilityMultiPlayerHelperType HelperType, const class FString& Handle);
	void Multicast_AbilityDestroyNS(EAbilityMultiPlayerHelperType HelperType, const class FString& Handle);
	void Multicast_AbilityEnd(uint8 HelperType);
	void Multicast_AbilityPostEvent(EAbilityMultiPlayerHelperType HelperType, const class FString& AssetPath);
	void Multicast_AbilitySetActorMeshLocation(EAbilityMultiPlayerHelperType HelperType, const struct FVector& RelativeLocation);
	void Multicast_AbilitySpawnActor(EAbilityMultiPlayerHelperType HelperType, const class FString& AssetPath, const struct FTransform& Transform, const class FString& Handle);
	void Multicast_AbilitySpawnNS(EAbilityMultiPlayerHelperType HelperType, const class FString& AssetPath, const struct FTransform& Transform, const class FString& Handle, bool bAutoDestroy, bool bAutoActive);
	void Multicast_AdjustTransform(const struct FF_AdjustTransformRPCParam& AdjustParam);
	void Multicast_AfkIdle(bool inAfk, bool bImmediatelyStop);
	void Multicast_AthenaAbilityBegin(const class FString& ABPPath, const class FString& SeatAniPath, const struct FVector& SeatOffset, const struct FVector& SeatRotation);
	void Multicast_AthenaAbilityEnd();
	void Multicast_AthenaSwitchAnimStage(EAthenaShowState AnimStage);
	void Multicast_AttachRibbonFishMesh(const class FString& MeshAssetPath, const class FString& CurveAssetPath);
	void Multicast_BallonDuckAttachToCarrier(const class FString& NewParam, int32 NewParam2, int32 NewParam3);
	void Multicast_BallonDuckDetachFromCarrier(const class FString& NewParam);
	void Multicast_BallonDuckRefreshWeapon(int32 NewParam);
	void Multicast_BallonDuckTrigger(int32 NewParam);
	void Multicast_BeginCleaningAnimal(int64 AnimalEntityID, int64 AbilityEffectID, double LookAtAnimRotYaw);
	void Multicast_BeginFishing(const struct FVector& FishFloatLocation, bool IsInPrepare);
	void Multicast_BeginGetWoolenHeart(int64 WoolenHeartEntityID, const struct FF_WoolenHeartInfoCache& WoolenHeartInfoCache);
	void Multicast_BeginMusicBoxHypnosisAnimal();
	void Multicast_BlowBubbleSpawnNS(const class FString& AssetPath, const struct FVector& Location, const struct FRotator& Rotation);
	void Multicast_BlueberryPicnicRefreshWeapon(const class FString& MeshPath);
	void Multicast_BlueberryPicnicTrigger(const class FString& MeshPath, const class FString& NSPath, const class FString& AnimPath);
	void Multicast_Buff(int64 EntityID, const class FString& BuffDAPath, bool bRemove);
	void Multicast_Bullet(const class FString& BulletDAPath, const struct FF_MulticastTriggerContext& BP_TriggerContext);
	void Multicast_CatchInsectSuccess(int64 InsectEntityID);
	void Multicast_CelebrationGuardBegin(const class FString& ABPPath);
	void Multicast_CelebrationGuardEnd();
	void Multicast_CelebrationGuardSwitchAnimStage(ECastGuardStage AnimStage, bool bMoveState, bool RandomBool);
	void Multicast_CelebrationPhantomBegin(const class FString& ABPPath);
	void Multicast_CelebrationPhantomEnd();
	void Multicast_ChangeInstArticulation(bool Value);
	void Multicast_ClaretStateChange(int32 State);
	void Multicast_CorollaDeerBegin();
	void Multicast_CorollaDeerEnd();
	void Multicast_CreateFlyEffect(const class FString& NiagaraPath, const struct FVector& StartLoc, const struct FVector& EndLoc, int64 targetSpawnerID);
	void Multicast_CreateSirenWaterPool();
	void Multicast_CrownDeerBegin();
	void Multicast_CrownDeerEnd();
	void Multicast_CrownDeerEndAnim();
	void Multicast_DamiaoPerformStart(const class FString& ActorClassPath, const struct FVector& Location, const struct FRotator& Rotation, const TArray<int32>& CloakID);
	void Multicast_DamiaoPerformStop();
	void Multicast_DayDreamBegin(int32 NewParam);
	void Multicast_DayDreamDestroyCloud();
	void Multicast_DayDreamEnd();
	void Multicast_DeadWoodBadPerformance(int32 PhaseIndex);
	void Multicast_DeadWoodGoodPerformance(int32 PhaseIndex);
	void Multicast_DeadWoodPerformaceState(bool IsContinue);
	void Multicast_DeadWoodStartProcessShow();
	void Multicast_DeadWoodStopProcessShow();
	void Multicast_DetachRibbonFishMesh();
	void Multicast_DoDamage_Hitframe(const class FString& DamageDAPath, const struct FF_MulticastHitFrameContext& MulticastHitframeContext);
	void Multicast_EndCleaningAnimal(int64 AnimalEntityID, int64 AbilityEffectID);
	void Multicast_EndFishing(int64 FishEntityID);
	void Multicast_EndMusicBoxHypnosisAnimal();
	void Multicast_EnterFishingProcess(int64 FishEntityID);
	void Multicast_EnterInstrument(Enum_InstrumentType InstrumentType);
	void Multicast_EquipWeaponByConfigPath(const class FString& WeaponConfigPath, const class FString& SlotType, bool bImmediateRequest, bool bInSync);
	void Multicast_EquipWeaponByID(int32 WeaponID, const class FString& SlotType, bool bImmediateRequest, bool bInSync, const struct FGameplayTag& CustomWeaponState);
	void Multicast_ExitFishingProcess(bool Success, const class FString& Reason);
	void Multicast_FastUnequipWeapon(bool bImmediateRequest, bool bInSync);
	void Multicast_FishingUpdateParams(int64 FishEntityID, bool IsReelIn, bool IsLeft);
	void Multicast_FishShadow();
	void Multicast_FrozenPathAbility_DeInit();
	void Multicast_FrozenPathAbility_Init();
	void Multicast_GameplayCue();
	void Multicast_GlowInsectNet(bool bGlow);
	void Multicast_ImaginationFireworkBegin(const class FString& ABPAssetPath, const class FString& NSTailPath, const struct FVector& TailLocation, const struct FRotator& TailRotation, const class FString& NSHandheldPath);
	void Multicast_ImaginationFireworkEnd();
	void Multicast_ImaginationFireworkSwitchStage(EImaginationFireworkAnimState Stage, bool bMoveState, bool bRelaxState);
	void Multicast_InstrumentClearAllNS();
	void Multicast_InstrumentDestroyActor(const class FString& Handle);
	void Multicast_InstrumentDestroyNS(const class FString& Handle);
	void Multicast_InstrumentSpawnActor(const class FString& ActorClassPath, const struct FTransform& Transform, const class FString& Handle);
	void Multicast_InstrumentSpawnNS(const class FString& NSPath, const struct FTransform& Transform, const class FString& Handle, bool bAutoDestroy, bool bAutoActive);
	void Multicast_MagicBanquetBegin();
	void Multicast_MagicBanquetDetroyTable();
	void Multicast_MagicBanquetEnd();
	void Multicast_MagicBanquetSpawnTable(int32 Index_0);
	void Multicast_MapleLeavesBegin();
	void Multicast_MapleLeavesChangeTree(const TArray<class FString>& NewParam, bool NewParam2);
	void Multicast_MapleLeavesEnd();
	void Multicast_MidnightPromDestroyGhost();
	void Multicast_MidnightPromShowGhost(const class FString& AssetPath, const struct FVector& RelativeLocation, double DissolveTime);
	void Multicast_MultiCallVehicleFunction(int64 VehicleEntityId, int64 FuncId);
	void Multicast_MultiPassengerBindEntity(int64 VehicleEntityId, int64 PassenegerID);
	void Multicast_MultiPhotographConfirmInvite(int64 FromRoleID, bool BAccept);
	void Multicast_MultiPhotographConfirmTransfer(bool BAccept, int64 PlyaerRoleID);
	void Multicast_MultiPhotographEnter(const int64 PlayerRoleID);
	void Multicast_MultiPhotographExit(bool bController, const class FString& UserName);
	void Multicast_MultiPhotographInvite(int64 PlayerRoleID);
	void Multicast_MultiPhotographInviteeReadyToInviter(int64 InviterRid);
	void Multicast_MultiPhotographLookAt(bool EnableLookAt);
	void Multicast_MultiPhotographNikkiRelativeRotation(const struct FRotator& RelativeRotation, bool BCatDoll, bool BAnimal);
	void Multicast_MultiPhotographNikkiState(bool BInSpecial3CState, int32 InitPoseID, const class FString& InitalStanceTag);
	void Multicast_MultiPhotographNormalMsg(const class FString& MsgStr);
	void Multicast_MultiPhotographPauseAnim();
	void Multicast_MultiPhotographPlayAnim(int32 PoseID);
	void Multicast_MultiPhotographRemove(int64 PlayerRoleID);
	void Multicast_MultiPhotographRestoreAnim(bool BFromPhotographExit);
	void Multicast_MultiPhotographResumeAnim();
	void Multicast_MultiPhotographReturnToMainUI();
	void Multicast_MultiPhotographSetAnim(double Percent);
	void Multicast_MultiPhotographTakePhoto(const struct FVector& NikkiLoc, const struct FVector& CameraActorLoc, const struct FVector& LookAtRealCenterLoc, const struct FVector& CameraRelativeLoc, const struct FF_CameraParamsForRpc& Params_0);
	void Multicast_MultiPhotographTransfer(int64 PlayerRoleID, bool BFromController);
	void Multicast_MultiPhotographUpdateCameraParams(const struct FF_CameraParamsForRpc& Params_0);
	void Multicast_MultiPhotographUpdateCameraPos(const struct FVector& NikkiLoc, const struct FVector& CameraActorLoc, const struct FVector& LookAtRealCenterLoc, const struct FVector& CameraRelativeLoc);
	void Multicast_MusicBox_ClimaxEnd();
	void Multicast_MusicBox_ClimaxStart();
	void Multicast_MusicBox_DestroyMusicBoxComponet();
	void Multicast_MusicBox_UpdateBaseRing(bool bDisplay, int32 CurChargeLevel);
	void Multicast_MusicBoxCombatHypnosis(const TArray<int64>& RemoveList, const TArray<int64>& AddList);
	void Multicast_NetSyncGlide(int32 GlideState);
	void Multicast_NetSyncWeapon(int64 RoleId, int32 WeaponID, const class FString& SlotType, int32 OverlayState, const class FString& CustomState);
	void Multicast_NikkiUpdateOverlayData(int32 PawnAnimState, int32 UpdatedState, bool bAdded);
	void Multicast_NotifyClothesChanged(const TArray<int32>& inDressup, TArray<int32>& inUndress, int32 inChangeType, bool inNeedCover, int32 inAbilityEffectID);
	void Multicast_NotifyDaMiaoTransformToNikki();
	void Multicast_NotifyNikkiTransformToDaMiao();
	void Multicast_NotifySuitConfigChanged(int32 SuitId);
	void Multicast_NotifyTransformDaMiaoMsg(int32 MsgID, const class FString& msg);
	void Multicast_NotifyWeaponOverlayStateChanged(int32 UpdatedState, bool bAdded);
	void Multicast_NovelistBegin();
	void Multicast_NovelistCreateNS(const class FString& AssetPath, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation);
	void Multicast_NovelistDestroyNS(bool bImmediately);
	void Multicast_NovelistEnd();
	void Multicast_PainterDestroyNS(bool bImmediately);
	void Multicast_PainterStartPainting(const class FString& MontageAssetPath, const class FString& NSAssetPath);
	void Multicast_PainterStopPainting();
	void Multicast_PhxFloatFeedback(int32 Type, const struct FF_MulticastDamageContext& DamageContext);
	void Multicast_PicnicBouequetRefreshWeapon(const class FString& MeshPath, const TArray<class FString>& MatPathList);
	void Multicast_PicnicBouequetTrigger(const class FString& MeshPath, const class FString& NSPath, const class FString& AnimPath, const TArray<class FString>& MatPathList, const struct FRotator& NSRotator);
	void Multicast_PillowStateChange(int32 State);
	void Multicast_PlayEmoteMontage(int64 playerId, int32 PoseID, const class FString& MontageName);
	void Multicast_PlayFeatureSequence(const class FString& LSPath);
	void Multicast_PlayHighAltitudeFireworks(const class FString& NiagaraPath, const struct FVector& EffectLocation, const struct FRotator& EffectRotator, const struct FVector& EffectScale, const class FString& NSVariableName, const struct FVector& currentEffectLocation);
	void Multicast_PlayLowAltitudeFireworks(const class FString& NiagaraPath, const struct FVector& EffectLocation, const struct FRotator& EffectRotator, const struct FVector& EffectScale);
	void Multicast_PlayWeaponAction(const struct FGameplayTag& ActionTag);
	void Multicast_PortableBubble(bool bUse, int32 PortableBubblueMachineItemID, int64 NikkiEntityID);
	void Multicast_PostExitInstrument();
	void Multicast_PowerFrogBegin(const class FString& NewParam, const class FString& NewParam2);
	void Multicast_PowerFrogEnd();
	void Multicast_PowerFrogSpawnFrog(const class FString& NewParam, const struct FTransform& NewParam2, int32 NewParam3, int32 NewParam4);
	void Multicast_PowerFrogSwitchStage(EPowerFrogStage Stage);
	void Multicast_PreExitInstrument();
	void Multicast_PressSyllable(Enum_InstrumentType InstrumentType, int32 Octace);
	void Multicast_QuickRelive(const struct FTransform& ReliveTransform);
	void Multicast_QuitRibbonFish();
	void Multicast_ReleaseSyllable(Enum_InstrumentType InstrumentType, int32 Octace);
	void Multicast_RemoveSlotWeapon(const class FString& SlotType, bool bImmediateRequest, bool bInSync);
	void Multicast_RequestStartGesture(const class FString& ActivePerformanceGestureTagName, bool bFullBodyGesture, bool bTrimGesture, double TrimStartTimeForGesture, double TrimEndTimeForGesture, bool bExpectedAdditive);
	void Multicast_RequestStartPerformance(const class FString& StanceTag, bool bAllowFlag, bool bNeedFireEvent, bool bFastTransition, bool bSkipTransition, bool bFullBodyStance);
	void Multicast_RequestStopGesture();
	void Multicast_RequestStopPerformance(bool bNeedFireEvent, bool bFastTransition, bool bSkipTransition);
	void Multicast_ResetInteractionPerformance();
	void Multicast_SeaOfStarsBegin(const class FString& NikkiActionAnimPath, const class FString& StarAnimPath, const class FString& StarClassRefPath);
	void Multicast_SeaOfStartsStop();
	void Multicast_SetAnimLocomotionState(bool bEnter);
	void Multicast_SetDoorLightSlot(int32 Index_0, bool bInit, int64 DoorSpawnerID);
	void Multicast_SetPerformanceInviteId(int64 playerId, int64 InvitePlayerId);
	void Multicast_SetPerformanceRespondCount(int64 playerId, int32 Count, int64 RespondPlayerId);
	void Multicast_SetPerformanceState(int64 playerId, int32 State, int32 PoseID);
	void Multicast_SetPlaceableObjHidden(const TArray<int64>& PlaceableObjEntityID, bool bHidden, int64 RequestPlayerEntityID);
	void Multicast_SetWeaponAppearanceDisabled(bool bDisabled, bool bImmediateRequest, const class FString& InModuleTag);
	void Multicast_ShepherdessBegin();
	void Multicast_ShepherdessEnd();
	void Multicast_ShepherdessEnterPhotograph(bool NewParam);
	void Multicast_ShepherdessSwitchStage(EShepherdessAnimState NewParam);
	void Multicast_ShinyMothChangeLamp(int32 MothID, const class FString& State);
	void Multicast_SirenBegin();
	void Multicast_SirenEnd();
	void Multicast_SitOnBubbleCableCar(int64 EntityID, int64 playerEntityID, int32 Action, int64 extraInfo, int64 extraInfo2);
	void Multicast_SitOnInteractiveChair(int32 ParamType, bool bSit, bool bIsAttached, const class FString& ChairIdentifier, const class FString& ParentCompName, const struct FTransform& RelativeTransfrom);
	void Multicast_SkinChange();
	void Multicast_StartBlowBubble();
	void Multicast_StopAdjustTransform();
	void Multicast_StopBlowBubble(bool bImmediately);
	void Multicast_StopBoxPhysics(int64 BoxID, const struct FTransform& FinalTrans);
	void Multicast_StopEmoteMontage(int64 playerId);
	void Multicast_SummonMotorcycleBegin();
	void Multicast_SummonMotorcycleEnd();
	void Multicast_SummonRainbowBegin();
	void Multicast_SummonRainbowEnd();
	void Multicast_SuonaToningChange(bool bIsToning);
	void Multicast_TriggerPerformAnim();
	void Multicast_TriggerPlaceableObjInteracted(int64 PlaceableEntityID, int64 FromPlayerEntityID, int64 ToPlayerEntityID, const class FString& String);
	void Multicast_TriggerRibbonFish();
	void Multicast_UIDisableMovement(int64 EntityID, bool bDisable);
	void Multicast_UnequipWeapon(bool bImmediateRequest, bool bInSync);
	void Multicast_UpdateInstrumentRTPCValue(const double Value);
	void Multicast_UpdateInteractionIK(bool bEnable, const TArray<struct FFInteractionIkSlots>& IkSlots);
	void MulticastShadow_MusicBox_ClimaxEnd();
	void MulticastShadow_MusicBox_ClimaxStart();
	void Multicst_DoRelive(int64 EntityID);
	void OnRep_BP_bIsCopyMapReady();
	void OnRep_BP_bIsInMusicBoxClimax();
	void OnRep_BP_GlideEnergy();
	void OnRep_BP_GlidePaused();
	void OnRep_BP_GlideState();
	void OnRep_BP_PlaneIndex();
	void OnRep_BP_SeamlessCaveLoadedMap();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);

	class FString GetModuleName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MainCharacterRPCHelperComponent_C">();
	}
	static class UBP_MainCharacterRPCHelperComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MainCharacterRPCHelperComponent_C>();
	}
};
static_assert(alignof(UBP_MainCharacterRPCHelperComponent_C) == 0x000008, "Wrong alignment on UBP_MainCharacterRPCHelperComponent_C");
static_assert(sizeof(UBP_MainCharacterRPCHelperComponent_C) == 0x000100, "Wrong size on UBP_MainCharacterRPCHelperComponent_C");
static_assert(offsetof(UBP_MainCharacterRPCHelperComponent_C, UberGraphFrame) == 0x0000A8, "Member 'UBP_MainCharacterRPCHelperComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterRPCHelperComponent_C, BP_bIsControllingDaMiao) == 0x0000B0, "Member 'UBP_MainCharacterRPCHelperComponent_C::BP_bIsControllingDaMiao' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterRPCHelperComponent_C, BP_PlaneIndex) == 0x0000B8, "Member 'UBP_MainCharacterRPCHelperComponent_C::BP_PlaneIndex' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterRPCHelperComponent_C, BP_GlideState) == 0x0000C0, "Member 'UBP_MainCharacterRPCHelperComponent_C::BP_GlideState' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterRPCHelperComponent_C, BP_GlideEnergy) == 0x0000C8, "Member 'UBP_MainCharacterRPCHelperComponent_C::BP_GlideEnergy' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterRPCHelperComponent_C, BP_GlidePaused) == 0x0000D0, "Member 'UBP_MainCharacterRPCHelperComponent_C::BP_GlidePaused' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterRPCHelperComponent_C, StaticMesh) == 0x0000D8, "Member 'UBP_MainCharacterRPCHelperComponent_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterRPCHelperComponent_C, BP_bIsInMusicBoxClimax) == 0x0000E0, "Member 'UBP_MainCharacterRPCHelperComponent_C::BP_bIsInMusicBoxClimax' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterRPCHelperComponent_C, BP_SeamlessCaveLoadedMap) == 0x0000E8, "Member 'UBP_MainCharacterRPCHelperComponent_C::BP_SeamlessCaveLoadedMap' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterRPCHelperComponent_C, BP_bSeamlessCaveLowQuality) == 0x0000F8, "Member 'UBP_MainCharacterRPCHelperComponent_C::BP_bSeamlessCaveLowQuality' has a wrong offset!");
static_assert(offsetof(UBP_MainCharacterRPCHelperComponent_C, BP_bIsCopyMapReady) == 0x0000F9, "Member 'UBP_MainCharacterRPCHelperComponent_C::BP_bIsCopyMapReady' has a wrong offset!");

}

