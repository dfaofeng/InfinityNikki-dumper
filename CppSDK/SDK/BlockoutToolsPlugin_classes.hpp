#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlockoutToolsPlugin

#include "Basic.hpp"

#include "BlockoutToolsPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class BlockoutToolsPlugin.BlockoutToolsParent
// 0x0098 (0x0440 - 0x03A8)
class ABlockoutToolsParent final : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                    Billboard;                                         // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BlockoutGridParent;                                // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               BlockoutGridMID;                                   // 0x03C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BlockoutCurrentMaterial;                           // 0x03C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           BlockoutMeshComponents;                            // 0x03D0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EBlockoutMaterialType                         BlockoutMaterialType;                              // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E1[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BlockoutMaterialColor;                             // 0x03E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutMaterialUseGrid;                          // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutWorldAligned;                             // 0x03F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F6[0x2];                                      // 0x03F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlockoutMaterialGridSize;                          // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockoutMaterialCheckerLuminance;                  // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockoutMaterialRoughness;                         // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutMaterialUseTopColor;                      // 0x0404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_405[0x3];                                      // 0x0405(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BlockoutMaterialTopColor;                          // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomMaterial;                                // 0x0418(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CustomMaterial;                                    // 0x0420(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BlockoutCustomMaterial;                            // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutEnableCollisions;                         // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutEnableCustomCollision;                    // 0x0431(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_432[0x2];                                      // 0x0432(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BlockoutCustomCollisionProfileName;                // 0x0434(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutCastShadows;                              // 0x043C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43D[0x3];                                      // 0x043D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlockoutSetMaterial(bool bForceRecreateMaterialInstanceDynamic);
	void RerunConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlockoutToolsParent">();
	}
	static class ABlockoutToolsParent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlockoutToolsParent>();
	}
};
static_assert(alignof(ABlockoutToolsParent) == 0x000008, "Wrong alignment on ABlockoutToolsParent");
static_assert(sizeof(ABlockoutToolsParent) == 0x000440, "Wrong size on ABlockoutToolsParent");
static_assert(offsetof(ABlockoutToolsParent, Root) == 0x0003A8, "Member 'ABlockoutToolsParent::Root' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, Billboard) == 0x0003B0, "Member 'ABlockoutToolsParent::Billboard' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutGridParent) == 0x0003B8, "Member 'ABlockoutToolsParent::BlockoutGridParent' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutGridMID) == 0x0003C0, "Member 'ABlockoutToolsParent::BlockoutGridMID' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutCurrentMaterial) == 0x0003C8, "Member 'ABlockoutToolsParent::BlockoutCurrentMaterial' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMeshComponents) == 0x0003D0, "Member 'ABlockoutToolsParent::BlockoutMeshComponents' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMaterialType) == 0x0003E0, "Member 'ABlockoutToolsParent::BlockoutMaterialType' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMaterialColor) == 0x0003E4, "Member 'ABlockoutToolsParent::BlockoutMaterialColor' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bBlockoutMaterialUseGrid) == 0x0003F4, "Member 'ABlockoutToolsParent::bBlockoutMaterialUseGrid' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bBlockoutWorldAligned) == 0x0003F5, "Member 'ABlockoutToolsParent::bBlockoutWorldAligned' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMaterialGridSize) == 0x0003F8, "Member 'ABlockoutToolsParent::BlockoutMaterialGridSize' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMaterialCheckerLuminance) == 0x0003FC, "Member 'ABlockoutToolsParent::BlockoutMaterialCheckerLuminance' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMaterialRoughness) == 0x000400, "Member 'ABlockoutToolsParent::BlockoutMaterialRoughness' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bBlockoutMaterialUseTopColor) == 0x000404, "Member 'ABlockoutToolsParent::bBlockoutMaterialUseTopColor' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutMaterialTopColor) == 0x000408, "Member 'ABlockoutToolsParent::BlockoutMaterialTopColor' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bUseCustomMaterial) == 0x000418, "Member 'ABlockoutToolsParent::bUseCustomMaterial' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, CustomMaterial) == 0x000420, "Member 'ABlockoutToolsParent::CustomMaterial' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutCustomMaterial) == 0x000428, "Member 'ABlockoutToolsParent::BlockoutCustomMaterial' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bBlockoutEnableCollisions) == 0x000430, "Member 'ABlockoutToolsParent::bBlockoutEnableCollisions' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bBlockoutEnableCustomCollision) == 0x000431, "Member 'ABlockoutToolsParent::bBlockoutEnableCustomCollision' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, BlockoutCustomCollisionProfileName) == 0x000434, "Member 'ABlockoutToolsParent::BlockoutCustomCollisionProfileName' has a wrong offset!");
static_assert(offsetof(ABlockoutToolsParent, bBlockoutCastShadows) == 0x00043C, "Member 'ABlockoutToolsParent::bBlockoutCastShadows' has a wrong offset!");

// Class BlockoutToolsPlugin.BlockoutToolsSettings
// 0x0038 (0x0060 - 0x0028)
class UBlockoutToolsSettings final : public UObject
{
public:
	EBlockoutMaterialType                         BlockoutMaterialType;                              // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BlockoutMaterialColor;                             // 0x002C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutMaterialUseGrid;                          // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutWorldAligned;                             // 0x003D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlockoutMaterialGridSize;                          // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockoutMaterialCheckerLuminance;                  // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockoutMaterialRoughness;                         // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockoutMaterialUseTopColor;                      // 0x004C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BlockoutMaterialTopColor;                          // 0x0050(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlockoutToolsSettings">();
	}
	static class UBlockoutToolsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlockoutToolsSettings>();
	}
};
static_assert(alignof(UBlockoutToolsSettings) == 0x000008, "Wrong alignment on UBlockoutToolsSettings");
static_assert(sizeof(UBlockoutToolsSettings) == 0x000060, "Wrong size on UBlockoutToolsSettings");
static_assert(offsetof(UBlockoutToolsSettings, BlockoutMaterialType) == 0x000028, "Member 'UBlockoutToolsSettings::BlockoutMaterialType' has a wrong offset!");
static_assert(offsetof(UBlockoutToolsSettings, BlockoutMaterialColor) == 0x00002C, "Member 'UBlockoutToolsSettings::BlockoutMaterialColor' has a wrong offset!");
static_assert(offsetof(UBlockoutToolsSettings, bBlockoutMaterialUseGrid) == 0x00003C, "Member 'UBlockoutToolsSettings::bBlockoutMaterialUseGrid' has a wrong offset!");
static_assert(offsetof(UBlockoutToolsSettings, bBlockoutWorldAligned) == 0x00003D, "Member 'UBlockoutToolsSettings::bBlockoutWorldAligned' has a wrong offset!");
static_assert(offsetof(UBlockoutToolsSettings, BlockoutMaterialGridSize) == 0x000040, "Member 'UBlockoutToolsSettings::BlockoutMaterialGridSize' has a wrong offset!");
static_assert(offsetof(UBlockoutToolsSettings, BlockoutMaterialCheckerLuminance) == 0x000044, "Member 'UBlockoutToolsSettings::BlockoutMaterialCheckerLuminance' has a wrong offset!");
static_assert(offsetof(UBlockoutToolsSettings, BlockoutMaterialRoughness) == 0x000048, "Member 'UBlockoutToolsSettings::BlockoutMaterialRoughness' has a wrong offset!");
static_assert(offsetof(UBlockoutToolsSettings, bBlockoutMaterialUseTopColor) == 0x00004C, "Member 'UBlockoutToolsSettings::bBlockoutMaterialUseTopColor' has a wrong offset!");
static_assert(offsetof(UBlockoutToolsSettings, BlockoutMaterialTopColor) == 0x000050, "Member 'UBlockoutToolsSettings::BlockoutMaterialTopColor' has a wrong offset!");

}

